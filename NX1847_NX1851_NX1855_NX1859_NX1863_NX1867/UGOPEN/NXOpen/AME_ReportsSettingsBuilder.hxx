#ifndef NXOpen_AME_REPORTSSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_AME_REPORTSSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ReportsSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_PageBuilder.hxx>
#include <NXOpen/AME_SelectClassificationBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ReportsSettingsBuilder;
    }
    namespace AME
    {
        class SelectClassificationBuilder;
    }
    class Builder;
    namespace AME
    {
        class _ReportsSettingsBuilderBuilder;
        class ReportsSettingsBuilderImpl;
        /** interface for the ReportsSettingsBuilder <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateReportsSettingsBuilder  NXOpen::AME::AMEManager::CreateReportsSettingsBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ReportsSettingsBuilder : public NXOpen::Builder
        {
            private: ReportsSettingsBuilderImpl * m_reportssettingsbuilder_impl;
            private: friend class  _ReportsSettingsBuilderBuilder;
            protected: ReportsSettingsBuilder();
            public: ~ReportsSettingsBuilder();
            /**Returns  the selected classification 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectClassificationBuilder * SelectClassification
            (
            );
            /**Returns  the string report name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString ReportName
            (
            );
            /**Sets  the string report name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetReportName
            (
                const NXString & reportName /** reportname */ 
            );
            /**Sets  the string report name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetReportName
            (
                const char * reportName /** reportname */ 
            );
            /**Returns  the whole project toggle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool WholeProjectToggle
            (
            );
            /**Sets  the whole project toggle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetWholeProjectToggle
            (
                bool wholeProjectToggle /** wholeprojecttoggle */ 
            );
            /**Returns  the function aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool FunctionAspect
            (
            );
            /**Sets  the function aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFunctionAspect
            (
                bool functionAspect /** functionaspect */ 
            );
            /**Returns  the location aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool LocationAspect
            (
            );
            /**Sets  the location aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetLocationAspect
            (
                bool locationAspect /** locationaspect */ 
            );
            /**Returns  the product aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ProductAspect
            (
            );
            /**Sets  the product aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetProductAspect
            (
                bool productAspect /** productaspect */ 
            );
            /**Returns  the selected report rule
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int SelectedRule
            (
            );
            /**Sets  the selected report rule
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSelectedRule
            (
                int selectedRule /** selectedrule */ 
            );
            /**Returns  the selected report template type
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PageBuilder::Types ReportType
            (
            );
            /**Sets  the selected report template type
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetReportType
            (
                NXOpen::AME::PageBuilder::Types reportType /** reporttype */ 
            );
            /**Returns  the report template name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString ReportTemplateName
            (
            );
            /**Sets  the report template name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetReportTemplateName
            (
                const NXString & reportTemplateName /** reporttemplatename */ 
            );
            /**Sets  the report template name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetReportTemplateName
            (
                const char * reportTemplateName /** reporttemplatename */ 
            );
            /** Add new report rule 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddRule
            (
            );
            /** Remove report rule 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveRule
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
