#ifndef NXOpen_TOOLING_FACECOLORMANAGEMENTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_FACECOLORMANAGEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_FaceColorManagementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class FaceColorManagementBuilder;
    }
    class Builder;
    class Direction;
    class NXColor;
    class NXObject;
    class ScCollector;
    namespace Tooling
    {
        class _FaceColorManagementBuilderBuilder;
        class FaceColorManagementBuilderImpl;
        /** Tooling  builder to assign and edit color of objects  <br> To create a new instance of this class, use @link NXOpen::Tooling::FaceColorManagementCollection::CreateFaceColorManagementBuilder  NXOpen::Tooling::FaceColorManagementCollection::CreateFaceColorManagementBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngleNoseIgnorableSize </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        FaceTranslucency </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        HighlightSelectedFace </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        HoleTypeEnum </td> <td> 
         
        ThroughHoles </td> </tr> 

        <tr><td> 
         
        IsAutoSelectHoleByType </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsShowFaceWithSameColorAttributeToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsShowFaceWithoutColorAttributeToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        OnlyCheckHoleFace </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SelectSubHoleFaceAutomatically </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  FaceColorManagementBuilder : public NXOpen::Builder
        {
            /** the hole type enumeration */
            public: enum HoleTypeEnumValue
            {
                HoleTypeEnumValueThroughHoles/** through holes */ ,
                HoleTypeEnumValueBlindHoles/** blind holes */ ,
                HoleTypeEnumValueCounterboredHoles/** counterbored holes */ ,
                HoleTypeEnumValueCountersunkHoles/** countersunk holes */ ,
                HoleTypeEnumValueThreadedHoles/** threaded holes */ ,
                HoleTypeEnumValueComboHoles/** combo holes */ ,
                HoleTypeEnumValueWireEDMStartHoles/** wire edmstart holes */ ,
                HoleTypeEnumValueCirclesinSketch/** circlesin sketch */ 
            };

            private: FaceColorManagementBuilderImpl * m_facecolormanagementbuilder_impl;
            private: friend class  _FaceColorManagementBuilderBuilder;
            protected: FaceColorManagementBuilder();
            public: ~FaceColorManagementBuilder();
            /**Returns  the option whether to select holes by type automatically 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsAutoSelectHoleByType
            (
            );
            /**Sets  the option whether to select holes by type automatically 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetAutoSelectHoleByType
            (
                bool isAutoSelectHoleByType /** isautoselectholebytype */ 
            );
            /**Returns  the hole axis 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SelectHoleAxis
            (
            );
            /**Sets  the hole axis 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetSelectHoleAxis
            (
                NXOpen::Direction * selectHoleAxis /** selectholeaxis */ 
            );
            /**Returns  the hole type enumeration 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::FaceColorManagementBuilder::HoleTypeEnumValue HoleTypeEnum
            (
            );
            /**Sets  the hole type enumeration 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetHoleTypeEnum
            (
                NXOpen::Tooling::FaceColorManagementBuilder::HoleTypeEnumValue holeTypeEnum /** holetypeenum */ 
            );
            /**Returns  the select curve 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectCurve
            (
            );
            /** The action to show faces without color attributes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void ShowFacesWithoutColorAttrirbute
            (
            );
            /**Returns  the option whether to highlight selected faces 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool HighlightSelectedFace
            (
            );
            /**Sets  the option whether to highlight selected faces 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetHighlightSelectedFace
            (
                bool highlightSelectedFace /** highlightselectedface */ 
            );
            /**Returns  the selected faces 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectFace
            (
            );
            /**Returns  the face color 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * FaceColor
            (
            );
            /**Sets  the face color 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceColor
            (
                NXOpen::NXColor * faceColor /** facecolor */ 
            );
            /**Returns  the face translucency 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int FaceTranslucency
            (
            );
            /**Sets  the face translucency 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceTranslucency
            (
                int faceTranslucency /** facetranslucency */ 
            );
            /**Returns  the angle nose ignorable size 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleNoseIgnorableSize
            (
            );
            /**Sets  the angle nose ignorable size 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetAngleNoseIgnorableSize
            (
                double angleNoseIgnorableSize /** anglenoseignorablesize */ 
            );
            /**Returns  the only check planar face option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool OnlyCheckHoleFace
            (
            );
            /**Sets  the only check planar face option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOnlyCheckHoleFace
            (
                bool onlyCheckHoleFace /** onlycheckholeface */ 
            );
            /**Returns  the select sub-hole face automatically option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool SelectSubHoleFaceAutomatically
            (
            );
            /**Sets  the select sub-hole face automatically option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectSubHoleFaceAutomatically
            (
                bool selectSubHoleFaceAutomatically /** selectsubholefaceautomatically */ 
            );
            /** The action to show face without any manufacturing information 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ShowFaceWithoutAnyManufacturingInformationButton
            (
            );
            /** The action to show face with same manufacturing information 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ShowFaceWithSameManufacturingInformationButton
            (
            );
            /**Returns  the option whether to show face without color attribute toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsShowFaceWithoutColorAttributeToggle
            (
            );
            /**Sets  the option whether to show face without color attribute toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetShowFaceWithoutColorAttributeToggle
            (
                bool isShowFaceWithoutColorAttributeToggle /** isshowfacewithoutcolorattributetoggle */ 
            );
            /**Returns  the option whether to show face with same color attribute toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsShowFaceWithSameColorAttributeToggle
            (
            );
            /**Sets  the option whether to show face with same color attribute toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetShowFaceWithSameColorAttributeToggle
            (
                bool isShowFaceWithSameColorAttributeToggle /** isshowfacewithsamecolorattributetoggle */ 
            );
            /**Returns  the face color spreadsheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectColorSpreadsheet
            (
            );
            /**Sets  the face color spreadsheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetSelectColorSpreadsheet
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the face color spreadsheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            void SetSelectColorSpreadsheet
            (
                const char * filename /** filename */ 
            );
            /** The action to edit face color spreadsheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void EditColorSpreadsheet
            (
            );
            /**Returns  the wizard type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int WizardType
            (
            );
            /**Sets  the wizard type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetWizardType
            (
                int wizardType /** wizardtype */ 
            );
            /** Assign attribute to object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void AssignAttributeToObject
            (
                NXOpen::NXObject * objectTag /** objecttag */ ,
                const NXString & attrTitle /** attrtitle */ ,
                const NXString & attrValue /** attrvalue */ 
            );
            /** Assign attribute to object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            void AssignAttributeToObject
            (
                NXOpen::NXObject * objectTag /** objecttag */ ,
                const char * attrTitle /** attrtitle */ ,
                const char * attrValue /** attrvalue */ 
            );
            /** Assign color to object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void AssignColorToObject
            (
                NXOpen::NXObject * objectTag /** objecttag */ ,
                int colorID /** colorid */ 
            );
            /** Remove attribute of object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void RemoveAttributeOfObject
            (
                NXOpen::NXObject * objectTag /** objecttag */ ,
                const NXString & attrTitle /** attrtitle */ 
            );
            /** Remove attribute of object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard") */
            void RemoveAttributeOfObject
            (
                NXOpen::NXObject * objectTag /** objecttag */ ,
                const char * attrTitle /** attrtitle */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
