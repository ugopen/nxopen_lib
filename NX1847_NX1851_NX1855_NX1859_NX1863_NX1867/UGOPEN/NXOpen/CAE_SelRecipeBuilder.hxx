#ifndef NXOpen_CAE_SELRECIPEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_SELRECIPEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SelRecipeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SelRecipeAdapter.hxx>
#include <NXOpen/CAE_SelRecipeAttributeStrategy.hxx>
#include <NXOpen/CAE_SelRecipeBaseStrategy.hxx>
#include <NXOpen/CAE_SelRecipeBoundingVolumeStrategy.hxx>
#include <NXOpen/CAE_SetObject.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectionMethod.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SelRecipeBuilder;
    }
    class Builder;
    namespace CAE
    {
        class CAEBody;
    }
    namespace CAE
    {
        class Mesh;
    }
    namespace CAE
    {
        class SelRecipeAdapter;
    }
    namespace CAE
    {
        class SelRecipeAttributeStrategy;
    }
    namespace CAE
    {
        class SelRecipeBaseStrategy;
    }
    namespace CAE
    {
        class SelRecipeBoundingVolumeStrategy;
    }
    namespace CAE
    {
        class SelRecipeCoordinateStrategy;
    }
    namespace CAE
    {
        class SelRecipeLabelRangeStrategy;
    }
    namespace CAE
    {
        class SelRecipePointStrategy;
    }
    namespace CAE
    {
        class SelRecipeProximityStrategy;
    }
    namespace CAE
    {
        class SelRecipeSingleLabelStrategy;
    }
    class CoordinateSystem;
    class Expression;
    class Point;
    class SelectionMethod;
    class TaggedObject;
    namespace CAE
    {
        class _SelRecipeBuilderBuilder;
        class SelRecipeBuilderImpl;
        /** Selection Recipe Builder <br> To create a new instance of this class, use @link NXOpen::CAE::SelectionRecipeCollection::CreateSelRecipeBuilder  NXOpen::CAE::SelectionRecipeCollection::CreateSelRecipeBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SelRecipeBuilder : public NXOpen::Builder
        {
            /** the input filter type */
            public: enum InputFilterType
            {
                InputFilterTypeEntireModel/** entire model */ ,
                InputFilterTypeMesh/** mesh */ ,
                InputFilterTypeBody/** body */ ,
                InputFilterTypeComponent/** component */ 
            };

            private: SelRecipeBuilderImpl * m_selrecipebuilder_impl;
            private: friend class  _SelRecipeBuilderBuilder;
            protected: SelRecipeBuilder();
            public: ~SelRecipeBuilder();
            /** Add a Box Bounding Volume Strategy @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeBoundingVolumeStrategy * AddBoxBoundingVolumeStrategy
            (
                NXOpen::Point * centerPoint /** centerpoint */ ,
                NXOpen::Point * targetPoint /** targetpoint */ ,
                const std::vector<NXOpen::CAE::CaeSetGroupFilterType> & entityTypes /** Entity types to which this strategy resolves to. If NULL default will be Nodes */,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add a Box Bounding Volume Strategy @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeBoundingVolumeStrategy * AddBoxBoundingVolumeStrategy
            (
                NXOpen::CoordinateSystem * centerCsys /** centercsys */ ,
                NXOpen::Expression * length /** length */ ,
                NXOpen::Expression * width /** width */ ,
                NXOpen::Expression * height /** height */ ,
                const std::vector<NXOpen::CAE::CaeSetGroupFilterType> & entityTypes /** Entity types to which this strategy resolves to. If NULL default will be Nodes */,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add a Cylinder Bounding Volume Strategy @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeBoundingVolumeStrategy * AddCylinderBoundingVolumeStrategy
            (
                NXOpen::CoordinateSystem * centerCsys /** centercsys */ ,
                NXOpen::Expression * diameter /** diameter */ ,
                NXOpen::Expression * cylinderHeight /** cylinderheight */ ,
                const std::vector<NXOpen::CAE::CaeSetGroupFilterType> & entityTypes /** Entity types to which this strategy resolves to. If NULL default will be Nodes */,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add a Cylinder Bounding Volume Strategy @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeBoundingVolumeStrategy * AddCylinderBoundingVolumeStrategy
            (
                NXOpen::Expression * diameter /** diameter */ ,
                NXOpen::Point * baseCenter /** basecenter */ ,
                NXOpen::Point * topCenter /** topcenter */ ,
                const std::vector<NXOpen::CAE::CaeSetGroupFilterType> & entityTypes /** Entity types to which this strategy resolves to. If NULL default will be Nodes */,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add a Sphere Bounding Volume Strategy @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeBoundingVolumeStrategy * AddSphereBoundingVolumeStrategy
            (
                NXOpen::Point * centerPoint /** centerpoint */ ,
                NXOpen::Expression * diameter /** diameter */ ,
                const std::vector<NXOpen::CAE::CaeSetGroupFilterType> & entityTypes /** Entity types to which this strategy resolves to. If NULL default will be Nodes */,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add an Arbitary Bounding Volume Strategy @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeBoundingVolumeStrategy * AddArbitraryVolMeshStrategy
            (
                NXOpen::CAE::Mesh * mesh /** mesh */ ,
                const std::vector<NXOpen::CAE::CaeSetGroupFilterType> & entityTypes /** Entity types to which this recipe resolves to. If NULL default will be Nodes */,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add an Arbitary Bounding Volume Strategy @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeBoundingVolumeStrategy * AddArbitraryVolPolygonBodyStrategy
            (
                NXOpen::CAE::CAEBody * body /** body */ ,
                const std::vector<NXOpen::CAE::CaeSetGroupFilterType> & entityTypes /** Entity types to which this recipe resolves to. If NULL default will be Nodes */,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add an Attribute Strategy 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeAttributeStrategy * AddAttributeStrategy
            (
                NXOpen::CAE::CaeSetGroupFilterType entityType /** The enitity type to which the recipe resolves to. */,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add a Proximity Strategy 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeProximityStrategy * AddProximityStrategy
            (
                const std::vector<NXOpen::TaggedObject *> & selectedObject /** selectedobject */ ,
                double tolerance /** The search tolerance. */,
                NXOpen::CAE::CaeSetGroupFilterType entityType /** The enitity type to which the recipe resolves to. */,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add an Adapter Strategy @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeAdapter * AddAdapter
            (
                NXOpen::SelectionMethod * selectionMethod /** Smart Selector Method which defines the adaptor*/
            );
            /** Add a Coordinate based Single Node Strategy 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeCoordinateStrategy * AddCoordinateStrategy
            (
                const NXOpen::Point3d & coordinates /** The coordinates to be used in the search. */,
                double tolerance /** The search tolerance. */,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add a Point based Single Node Strategy 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipePointStrategy * AddPointStrategy
            (
                NXOpen::Point * point /** The point whom coordinates will be used in the search. */,
                double tolerance /** The search tolerance. */,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add a Single Label Node Strategy 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeSingleLabelStrategy * AddSingleLabelStrategy
            (
                int nodeLabel /** nodelabel */ ,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Add a Label Range Strategy 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeLabelRangeStrategy * AddLabelRangeStrategy
            (
                const std::vector<int> & singleLabels /** singlelabels */ ,
                const std::vector<int> & startLabels /** startlabels */ ,
                const std::vector<int> & endLabels /** endlabels */ ,
                const std::vector<int> & increments /** increments */ ,
                NXOpen::CAE::CaeSetGroupFilterType entityType /** entitytype */ ,
                NXOpen::CAE::SelRecipeBuilder::InputFilterType inputFilterType /** input filter type */ ,
                NXOpen::TaggedObject * inputFilter /** input filter */ 
            );
            /** Returns the Nth Strategy @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SelRecipeBaseStrategy * GetNthStrategy
            (
                int index /** index */ 
            );
            /** Delete Last N Strategies 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteLastNStrategies
            (
                int nStrategies /** nstrategies */ 
            );
            /**Returns  the selection recipe name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString RecipeName
            (
            );
            /**Sets  the selection recipe name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetRecipeName
            (
                const NXString & recipeName /** Name of the selection recipe. If NULL, then a valid unique name will be generated. */
            );
            /**Sets  the selection recipe name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetRecipeName
            (
                const char * recipeName /** Name of the selection recipe. If NULL, then a valid unique name will be generated. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
