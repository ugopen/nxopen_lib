#ifndef NXOpen_DIE_PIERCETASKBUILDER_HXX_INCLUDED
#define NXOpen_DIE_PIERCETASKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_PierceTaskBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Die_PierceItemBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class PierceTaskBuilder;
    }
    class Body;
    namespace Die
    {
        class PierceItemBuilder;
    }
    namespace Die
    {
        class PierceItemBuilderList;
    }
    class DisplayableObject;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeature;
    }
    class ILocation;
    class IProfile;
    class ScCollector;
    class SelectNXObjectList;
    class View;
    namespace Die
    {
        class _PierceTaskBuilderBuilder;
        class PierceTaskBuilderImpl;
        /** Represents a Pierce Task feature builder  <br> To create a new instance of this class, use @link NXOpen::Die::DieCollection::PierceTask  NXOpen::Die::DieCollection::PierceTask @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  PierceTaskBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Settings for the cam type of the pierce task. */
            public: enum CamTypes
            {
                CamTypesDirect/** Direct */ = 2,
                CamTypesAerial/** Aerial Cam */ = 0,
                CamTypesBaseMounted/** Base Mounted Cam */
            };

            /** Settings for the precistion type of the pierce task. */
            public: enum PrecisionTypes
            {
                PrecisionTypesGage/** Gage hole */,
                PrecisionTypesCritical/** Critical hole */,
                PrecisionTypesStandard/** Standard hole */
            };

            /** Settings for the center point output options of the pierce task. */
            public: enum CenterPointOptionTypes
            {
                CenterPointOptionTypesNone/** No center points output */,
                CenterPointOptionTypesDie/** Center points output in die position */,
                CenterPointOptionTypesProduct/** Center points output in product position */,
                CenterPointOptionTypesBoth/** Center points output in both die and product position */
            };

            private: PierceTaskBuilderImpl * m_piercetaskbuilder_impl;
            private: friend class  _PierceTaskBuilderBuilder;
            protected: PierceTaskBuilder();
            public: ~PierceTaskBuilder();
            /**Returns  the tipped product of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Features::Feature * TippedProduct
            (
            );
            /**Sets  the tipped product of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTippedProduct
            (
                NXOpen::Features::Feature * tippedProduct /** The tip of the operation where the pierce
                                                                                   task resides. */
            );
            /** Sets the pierce bounds of the pierce task. 
                    Note - @link Die::PierceTaskBuilder::SetTippedProduct Die::PierceTaskBuilder::SetTippedProduct@endlink  needs to be called before this function. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetPierceBounds
            (
                NXOpen::Die::DirectionOption direction /** Profile direction */,
                const std::vector<NXOpen::IProfile *> & profileEntries /** Profile entries that make up the 
                                                                                                              boundary of the pierce task */
            );
            /** Gets the pierce bounds of the pierce task  @return  Profile entries that make up the 
                                                                                                       boundary of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::IProfile *> GetPierceBounds
            (
                NXOpen::Die::DirectionOption* direction /** Profile direction */
            );
            /**Returns  the cam direction of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ILocation * CamDirection
            (
            );
            /**Sets  the cam direction of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCamDirection
            (
                NXOpen::ILocation * camDirection /** cam direction */ 
            );
            /** Sets the associative objects of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAssociativeObjects
            (
                const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
            );
            /** Gets the associative objects of the pierce task  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::DisplayableObject *> GetAssociativeObjects
            (
            );
            /** Sets the camera views of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraViews
            (
                const std::vector<NXOpen::View *> & objects /** objects */ 
            );
            /** Gets the camera views of the pierce task  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::View *> GetCameraViews
            (
            );
            /**Returns  the finish operation of the pierce task 
                    True indicates the pierce is to be a finish pierce. False indicates rough pierce. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool FinishOperation
            (
            );
            /**Sets  the finish operation of the pierce task 
                    True indicates the pierce is to be a finish pierce. False indicates rough pierce. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFinishOperation
            (
                bool finishOperation /** finish operation */ 
            );
            /**Returns  the layout flange setting of the pierce task. 
                    True indicates that the pierce curve is to be laid out on the flange. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool LayoutFlange
            (
            );
            /**Sets  the layout flange setting of the pierce task. 
                    True indicates that the pierce curve is to be laid out on the flange. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetLayoutFlange
            (
                bool layoutFlange /** layout flange */ 
            );
            /**Returns  the create scrap setting of the pierce task. 
                    True indicates that the scrap is to be created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool CreateScrap
            (
            );
            /**Sets  the create scrap setting of the pierce task. 
                    True indicates that the scrap is to be created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCreateScrap
            (
                bool createScrap /** create scrap */ 
            );
            /**Returns  the cam type of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::PierceTaskBuilder::CamTypes CamType
            (
            );
            /**Sets  the cam type of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCamType
            (
                NXOpen::Die::PierceTaskBuilder::CamTypes camType /** cam type */ 
            );
            /**Returns  the precision type of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::PierceTaskBuilder::PrecisionTypes PrecisionType
            (
            );
            /**Sets  the precision type of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetPrecisionType
            (
                NXOpen::Die::PierceTaskBuilder::PrecisionTypes precisionType /** precision type */ 
            );
            /**Returns  the center point output option of the pierce task 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::PierceTaskBuilder::CenterPointOptionTypes CenterPointOption
            (
            );
            /**Sets  the center point output option of the pierce task 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCenterPointOption
            (
                NXOpen::Die::PierceTaskBuilder::CenterPointOptionTypes centerPointOption /** center point option */ 
            );
            /**Returns  the angle tolerance of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angle tolerance */ 
            );
            /**Returns  the distance tolerance of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distance tolerance */ 
            );
            /** Sets the detailed description of the pierce task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDetails
            (
                std::vector<NXString> & strings /** detail strings */
            );
            /** Gets the detailed description of the pierce task  @return  detail strings 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetDetails
            (
            );
            /** Gets the camera layer settings and xmlp data  @return  1 layer setting string for each camera object. 
                                                                           the string needs to be 256 characters long 
                                                                           (one for each user layer) with either 0 for off
                                                                           or 1 for on. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetCameraLayerAndXmlp
            (
                std::vector<NXString> & xmlpData /** xmlp data */
            );
            /** Sets the camera layer settings and xmlp data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraLayerAndXmlp
            (
                std::vector<NXString> & layerSettings /** 1 layer setting string for each camera object. 
                                                                               the string needs to be 256 characters long 
                                                                               (one for each user layer) with either 0 for off
                                                                               or 1 for on. */,
                std::vector<NXString> & xmlpData /** xmlp data */
            );
            /** Sets the names of the camera 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraNames
            (
                std::vector<NXString> & strings /** each string contains the name of a camera object */
            );
            /** Gets the names of the camera  @return  each string contains the name of a camera object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetCameraNames
            (
            );
            /**Returns  the tip feature 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Features::SelectFeature * TipFeature
            (
            );
            /**Returns  the pierce holes 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ScCollector * PierceHoles
            (
            );
            /**Returns  the pierce holes list 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::PierceItemBuilderList * PierceHolesList
            (
            );
            /** Creates a new pierce hole item in the set 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::PierceItemBuilder * NewPierceHole
            (
                NXOpen::Die::PierceItemBuilder::HoleShapeType holeShape /** hole shape */ 
            );
            /**Returns  the assoc objects 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::SelectNXObjectList * AssociatedObjects
            (
            );
            /**Returns  the trim new die face, from NX10.0 new stamping output can import one new die face to die engineer process.
                        If this pierce task will trim this new die face, set trimNewDieFace to true, or else set it to false. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool TrimNewDieFace
            (
            );
            /**Sets  the trim new die face, from NX10.0 new stamping output can import one new die face to die engineer process.
                        If this pierce task will trim this new die face, set trimNewDieFace to true, or else set it to false. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTrimNewDieFace
            (
                bool trimNewDieFace /** if set to true, pierce task performs on new die face, or else it will perform on original die face. */
            );
            /**Returns  the without workflow sheet of the pierce task builder. 
                        In release NX11.0, pierce task supports without workflow type 
                        when the workflow tip feature does not exist. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Body * WithoutWorkflowSheet
            (
            );
            /**Sets  the without workflow sheet of the pierce task builder. 
                        In release NX11.0, pierce task supports without workflow type 
                        when the workflow tip feature does not exist. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetWithoutWorkflowSheet
            (
                NXOpen::Body * sheet /** sheet */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
