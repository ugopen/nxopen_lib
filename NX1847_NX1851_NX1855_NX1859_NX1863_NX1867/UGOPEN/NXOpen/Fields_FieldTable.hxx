#ifndef NXOpen_FIELDS_FIELDTABLE_HXX_INCLUDED
#define NXOpen_FIELDS_FIELDTABLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_FieldTable.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_FieldEvaluator.hxx>
#include <NXOpen/Fields_FieldVariable.hxx>
#include <NXOpen/Fields_Field.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class FieldTable;
    }
    namespace Fields
    {
        class Field;
    }
    namespace Fields
    {
        class FieldVariable;
    }
    class Unit;
    namespace Fields
    {
        class _FieldTableBuilder;
        class FieldTableImpl;
        /**  @brief  Represents the Field Table class. 

          
             <br> A field (see @link NXOpen::Fields::Field NXOpen::Fields::Field@endlink ) defined in terms of tabular data involving 
            one or more look-up independent columns and one or more dependent variables (see 
            @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink ) which depend on the look-up columns. <br>   <br> To obtain a instance of this class use @link NXOpen::Fields::FieldManager NXOpen::Fields::FieldManager@endlink  .  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  FieldTable : public NXOpen::Fields::Field
        {
            /**  Interpolation type This enumeration has been deprecated use @link NXOpen::Fields::FieldEvaluator::InterpolationEnum NXOpen::Fields::FieldEvaluator::InterpolationEnum@endlink  instead.  
             <br>  @deprecated Deprecated in NX7.5.2.  Use @link NXOpen::Fields::FieldEvaluator::InterpolationEnum NXOpen::Fields::FieldEvaluator::InterpolationEnum@endlink  instead. <br>  
            */
            public: enum NX_DEPRECATED("Deprecated in NX7.5.2.  Use NXOpen::Fields::FieldEvaluator::InterpolationEnum instead.") InterpolationEnum
            {
                InterpolationEnumNone/** No interpolation method; table can only be used as a lookup */,
                InterpolationEnumLinear1d/** Standard linear interpolation between bounding points */,
                InterpolationEnumNearestNeighbor1d/** Locates the nearest point and returns its value */,
                InterpolationEnumInverseDistanceWeighting1d/** Sum of the weighted value of all points, based on the inverse of the distance */,
                InterpolationEnumDelaunay2dFast/** Triangulates the independent values and uses the bounding triangle, sacrifices accuracy for speed */,
                InterpolationEnumDelaunay2dMedium/** Triangulates the independent values and uses the bounding triangle, compromise between accuracy and speed */,
                InterpolationEnumDelaunay2dAccurate/** Triangulates the independent values and uses the bounding triangle, sacrifices speed for accuracy */,
                InterpolationEnumNearestNeighbor2d/** Locates the nearest point in a plane and returns its value */,
                InterpolationEnumRenkaShepard2d/** Refined inverse distance weighting in 2D space */,
                InterpolationEnumInverseDistanceWeighting2d/** Sum of the weighted value of all points in 2D space, based on the inverse of the distance */,
                InterpolationEnumDelaunay3dFast/** Creates Tetrahedrals using the independent values and uses the bounding tetrahedron, sacrifices accuracy for speed */,
                InterpolationEnumDelaunay3dMedium/** Creates Tetrahedrals using the independent values and uses the bounding tetrahedron, compromise between accuracy and speed */,
                InterpolationEnumDelaunay3dAccurate/** Creates Tetrahedrals using the independent values and uses the bounding tetrahedron, sacrifices speed for accuracy */,
                InterpolationEnumNearestNeighbor3d/** Locates the nearest point in space and returns its value */,
                InterpolationEnumRenkaShepard3d/** Refined inverse distance weighting in 3D space */,
                InterpolationEnumInverseDistanceWeighting3d/** Sum of the weighted value of all points in 3D space, based on the inverse of the distance */,
                InterpolationEnumNearestNeighborNd/** Locates the nearest point in N dimensional space and returns its value */,
                InterpolationEnumRenkaShepardNd/** Refined inverse distance weighting in N dimensional space */,
                InterpolationEnumInverseDistanceWeightingNd/** Sum of the weighted value of all points in N dimensional, based on the inverse of the distance */
            };

            /** Load file options*/
            public: enum LoadFileOption
            {
                LoadFileOptionAppend/** Append data to the table removing duplicates */,
                LoadFileOptionReplace/** Replace data removing duplicates */
            };

            /** Options for dB Factors */
            public: enum DBFactor
            {
                DBFactorAcousticPowerDefault/** acoustic power default */ ,
                DBFactorAcousticPressureDefault/** acoustic pressure default */ 
            };

            /** duplicate value processing options*/
            public: enum DuplicateValueOption
            {
                DuplicateValueOptionNone/** none */ ,
                DuplicateValueOptionAverage/** average */ ,
                DuplicateValueOptionMinimum/** minimum */ ,
                DuplicateValueOptionMaximum/** maximum */ ,
                DuplicateValueOptionFirst/** first */ ,
                DuplicateValueOptionLast/** last */ ,
                DuplicateValueOptionSkip/** skip */ 
            };

            /** Options for structured table data*/
            public: enum StructDataTableType
            {
                StructDataTableTypeRegular/** regular */ ,
                StructDataTableTypeStrict/** strict */ 
            };

            private: FieldTableImpl * m_fieldtable_impl;
            private: friend class  _FieldTableBuilder;
            protected: FieldTable();
            public: ~FieldTable();
            /** Edit the table field.  Specifies the new array of @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink s for 
                    independent and dependent variables, as well as the new double values.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void EditFieldTable
            (
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent expression fields to be associated with the formula field */,
                const std::vector<double> & datapoints /** row based array of double values representing the table; then number of points should equal the number of independent variables * the number of dependent variables * the number of rows. */
            );
            /** Edit the table field complex display.  Specifies the new array of complex display flags for 
                    independent and dependent variables.
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void EditFieldTableComplexDisplay
            (
                const std::vector<bool> & indepVarArrayComplexDisplay /** independent variable complex display flags to be associated with the field */,
                const std::vector<bool> & depVarArrayComplexDisplay /** dependent variable complex display flags to be associated with the field */
            );
            /** Edit the table field complex units array.  
                        Specifies the new array of complex phase unit tags for dependent variables.  
                        A NULL unit in a given index indicates that the corresponding variable is not complex, or if it is complex, that the value
                        is Real/Imaginary, in which both components have the same unit as the variable itself.  
                        In the case where the unit is specified, the complex dep variables in magnitude/phase representation.  
                        In that case the measure of the specified unit must be angle. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void EditFieldTableComplexUnits
            (
                const std::vector<NXOpen::Unit *> & depVarArrayComplexUnits /** dep var array complex units */ 
            );
            /** Specified interpolation method, this method was deprecated in NX7.5.2.
                    
             <br>  @deprecated Deprecated in NX7.5.2.  Use @link NXOpen::Fields::FieldTable::InterpolationMethod NXOpen::Fields::FieldTable::InterpolationMethod @endlink and @link NXOpen::Fields::FieldTable::SetInterpolationMethod NXOpen::Fields::FieldTable::SetInterpolationMethod @endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX7.5.2.  Use NXOpen::Fields::FieldTable::InterpolationMethod NXOpen::Fields::FieldTable::InterpolationMethod @endlink and @link NXOpen::Fields::FieldTable::SetInterpolationMethod NXOpen::Fields::FieldTable::SetInterpolationMethod @endlink  instead.") void SetInterpolation
            (
                int interpolationMethod /** specified interpolation method; @link NXOpen::Fields::FieldTable NXOpen::Fields::FieldTable@endlink  interpolation enum values for builtin methods.  */
            );
            /**Returns  
                    a flag specifying if interpolator is persistent between session 
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PersistentInterpolator
            (
            );
            /**Sets  
                    a flag specifying if interpolator is persistent between session 
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPersistentInterpolator
            (
                bool persistentInterpolator /** persistent interpolator indicator  */
            );
            /** Get the inverse distance weighting (IDW) interpolation options 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void GetIdwOptions
            (
                NXOpen::Fields::FieldEvaluator::InverseDistanceWeightingEnum* nearestOption /** nearest option */,
                double* nearestFraction /** fraction */
            );
            /** Set the inverse distance weighting (IDW) interpolation options 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetIdwOptions
            (
                NXOpen::Fields::FieldEvaluator::InverseDistanceWeightingEnum nearestOption /** nearest option */,
                double nearestFraction /** fraction */
            );
            /**Returns  
                    the approximate nearest neighbor (ANN) interpolation tolerance 
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double AnnTolerance
            (
            );
            /**Sets  
                    the approximate nearest neighbor (ANN) interpolation tolerance 
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAnnTolerance
            (
                double annTolerance /** approximate nearest neighbor (ANN) interpolation tolerance  */
            );
            /**Returns   
                    the interpolation method used when this table data is evaluated.
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldEvaluator::InterpolationEnum InterpolationMethod
            (
            );
            /**Sets   
                    the interpolation method used when this table data is evaluated.
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetInterpolationMethod
            (
                NXOpen::Fields::FieldEvaluator::InterpolationEnum interpolationMethod /** the interpolation method  */
            );
            /** Populate the table from a file replacing or appending data 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: void LoadFromFile
            (
                const NXString & filename /** file to read rows from */,
                NXOpen::Fields::FieldTable::LoadFileOption loadFileOption /** append or replace */
            );
            /** Populate the table from a file replacing or appending data 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            void LoadFromFile
            (
                const char * filename /** file to read rows from */,
                NXOpen::Fields::FieldTable::LoadFileOption loadFileOption /** append or replace */
            );
            /** Returns the values for the given @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink  in this @link NXOpen::Fields::FieldTable NXOpen::Fields::FieldTable@endlink .  
                        The input @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink  should be retrieved from the field using 
                        @link NXOpen::Fields::Field::GetIndependentVariables NXOpen::Fields::Field::GetIndependentVariables@endlink  or @link NXOpen::Fields::Field::GetDependentVariables NXOpen::Fields::Field::GetDependentVariables@endlink . 
                        The values are in the same @link NXOpen::Unit NXOpen::Unit@endlink  as specified on the @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink .
                     @return  the row values for this variable 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetData
            (
                NXOpen::Fields::FieldVariable * variable /** variable whose table values are to be returned */
            );
            /**Returns  the outside table values interpolation method for standard linear interpolation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldEvaluator::ValuesOutsideTableInterpolationEnum ValuesOutsideTableInterpolation
            (
            );
            /**Sets  the outside table values interpolation method for standard linear interpolation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetValuesOutsideTableInterpolation
            (
                NXOpen::Fields::FieldEvaluator::ValuesOutsideTableInterpolationEnum interpolationMethod /** the outside table values interpolation method */
            );
            /**Returns  a value indicating whether to set the linear interpolation shift for field independent value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IndependentValueShiftOption
            (
            );
            /**Sets  a value indicating whether to set the linear interpolation shift for field independent value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIndependentValueShiftOption
            (
                bool shiftOption /** the interpolation shift flag for independent value */
            );
            /**Returns  the linear interpolation shift for field independent value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double IndependentValueShift
            (
            );
            /**Sets  the linear interpolation shift for field independent value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIndependentValueShift
            (
                double shift /** the interpolation shift for independent value */
            );
            /**Returns  a value indicating whether to set the linear interpolation divisor for field independent value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IndependentValueDivisorOption
            (
            );
            /**Sets  a value indicating whether to set the linear interpolation divisor for field independent value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIndependentValueDivisorOption
            (
                bool divisorOption /** the interpolation divisor flag for independent value */
            );
            /**Returns  the linear interpolation divisor for field independent value, the zero value represents no divisor used 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double IndependentValueDivisor
            (
            );
            /**Sets  the linear interpolation divisor for field independent value, the zero value represents no divisor used 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIndependentValueDivisor
            (
                double divisor /** the interpolation divisor for independent value */
            );
            /**Returns  a flag specifying if the table has discontinuites 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool Discontinuities
            (
            );
            /**Returns   
                    the linear/log option used when this table data is evaluated using the linear 1d interpolator.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldEvaluator::LinearLogOptionEnum LinearLogOption
            (
            );
            /**Sets   
                    the linear/log option used when this table data is evaluated using the linear 1d interpolator.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLinearLogOption
            (
                NXOpen::Fields::FieldEvaluator::LinearLogOptionEnum linearOption /** the log option  */
            );
            /**Returns   
                    the Structured data option check used when this table data is in Structured data format.
                    
             <br>  @deprecated Deprecated in NX1847.0.0.   This method no longer supported.Use @link NXOpen::Fields::FieldTable::EditTableLatticeData NXOpen::Fields::FieldTable::EditTableLatticeData@endlink  instead to edit Lattice Data. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.   This method no longer supported.Use NXOpen::Fields::FieldTable::EditTableLatticeData instead to edit Lattice Data.") bool LatticeDataOption
            (
            );
            /**Sets   
                    the Structured data option check used when this table data is in Structured data format.
                    
             <br>  @deprecated Deprecated in NX1847.0.0.   This method no longer supported.Use @link NXOpen::Fields::FieldTable::EditTableLatticeData NXOpen::Fields::FieldTable::EditTableLatticeData@endlink  instead to edit Lattice Data. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.   This method no longer supported.Use NXOpen::Fields::FieldTable::EditTableLatticeData instead to edit Lattice Data.") void SetLatticeDataOption
            (
                bool latticeDataOption /** the lattice data check option  */
            );
            /**Returns   
                    the number of lattice data column option check used when this table data is in lattice format.
                    
             <br>  @deprecated Deprecated in NX1847.0.0.   This method no longer supported.Use @link NXOpen::Fields::FieldTable::EditTableLatticeData NXOpen::Fields::FieldTable::EditTableLatticeData@endlink  instead to edit Lattice Data. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.   This method no longer supported.Use NXOpen::Fields::FieldTable::EditTableLatticeData instead to edit Lattice Data.") int NumLatticeDataColumn
            (
            );
            /**Sets   
                    the number of lattice data column option check used when this table data is in lattice format.
                    
             <br>  @deprecated Deprecated in NX1847.0.0.   This method no longer supported.Use @link NXOpen::Fields::FieldTable::EditTableLatticeData NXOpen::Fields::FieldTable::EditTableLatticeData@endlink  instead to edit Lattice Data. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.   This method no longer supported.Use NXOpen::Fields::FieldTable::EditTableLatticeData instead to edit Lattice Data.") void SetNumLatticeDataColumn
            (
                int numLatticeDataColumn /** the lattice data column number  */
            );
            /** Edit the table field dependent variables.  Specifies the new dependent @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink 
                    array.  If retain number of rows is specified, the total number of rows will remain the same.  Columns with zeros will be added 
                    as necessary, or data will be truncated.  This process will be handled for each set of variables, independent and dependent.
                    Thus, if the number of independent columns increases and the dependent columns decrease, a column of zeros will be added for the
                    new independent variable, and data will be dropped from the dependent values.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void EditTableVariables
            (
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depExpArray /** dependent field variables to be associated with the field */
            );
            /** Created a DbScaling object and returns true if successful 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void EditDbScaling
            (
                double dbScaleFactor /** db scale factor                                            */,
                double dbRefValue /** db ref value                                               */,
                bool isDbScaling /** db_scaling_object is created if true and if it doesnt exit */
            );
            /**Returns  the duplicate value processing option for field independent variable values, the zero value represents no option used/selected 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldTable::DuplicateValueOption DuplicateValueProcessingOption
            (
            );
            /**Sets  the duplicate value processing option for field independent variable values, the zero value represents no option used/selected 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDuplicateValueProcessingOption
            (
                NXOpen::Fields::FieldTable::DuplicateValueOption optionIndex /** optionindex */ 
            );
            /**Returns  the Parameterize Independent Domain option for Table field - toggle switch
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ParameterizeIndependentDomain
            (
            );
            /**Sets  the Parameterize Independent Domain option for Table field - toggle switch
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetParameterizeIndependentDomain
            (
                bool parameterizeIndependentDomain /** parameterizeindependentdomain */ 
            );
            /** Edit the lattice table data.  Specifies lattice type,num of lattice rows,columns and planes.
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void EditTableLatticeData
            (
                NXOpen::Fields::FieldTable::StructDataTableType latticeType /** lattice type */ ,
                int numLatticeRows /** num lattice rows */ ,
                int numLatticeColumns /** num lattice columns */ ,
                int numLatticePlanes /** num lattice planes */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
