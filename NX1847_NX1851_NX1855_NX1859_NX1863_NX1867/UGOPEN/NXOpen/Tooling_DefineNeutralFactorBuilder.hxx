#ifndef NXOpen_TOOLING_DEFINENEUTRALFACTORBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_DEFINENEUTRALFACTORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_DefineNeutralFactorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class DefineNeutralFactorBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Tooling
    {
        class _DefineNeutralFactorBuilderBuilder;
        class DefineNeutralFactorBuilderImpl;
        /** Represeents a @link NXOpen::Tooling::DefineNeutralFactorBuilder NXOpen::Tooling::DefineNeutralFactorBuilder@endlink  to define
            neutral factor according to material and formula in the spreadsheet table.
            
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  DefineNeutralFactorBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Specifies the formula used to calculate the neutral factor value*/
            public: enum FormulaOptions
            {
                FormulaOptionsGeneral/** General formula use the ratio of inner bend radius and thickness */,
                FormulaOptionsBendAllowance/** Bend allowance formula use different formula according to inner bend radius and thickness*/
            };

            private: DefineNeutralFactorBuilderImpl * m_defineneutralfactorbuilder_impl;
            private: friend class  _DefineNeutralFactorBuilderBuilder;
            protected: DefineNeutralFactorBuilder();
            public: ~DefineNeutralFactorBuilder();
            /**Returns  the neutral factor formula option, decides which method used to calculate the neutral factor 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DefineNeutralFactorBuilder::FormulaOptions NeutralFactorFormula
            (
            );
            /**Sets  the neutral factor formula option, decides which method used to calculate the neutral factor 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNeutralFactorFormula
            (
                NXOpen::Tooling::DefineNeutralFactorBuilder::FormulaOptions neutralFactorFormula /** neutralfactorformula */ 
            );
            /**Returns  the part material 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartMaterial
            (
            );
            /**Sets  the part material 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPartMaterial
            (
                const NXString & partMaterial /** partmaterial */ 
            );
            /**Sets  the part material 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            void SetPartMaterial
            (
                const char * partMaterial /** partmaterial */ 
            );
            /**Returns  the neutral factor used to calculate bend developed length 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NeutralFactor
            (
            );
            /**Sets  the neutral factor used to calculate bend developed length 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNeutralFactor
            (
                const NXString & neutralFactor /** neutralfactor */ 
            );
            /**Sets  the neutral factor used to calculate bend developed length 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            void SetNeutralFactor
            (
                const char * neutralFactor /** neutralfactor */ 
            );
            /**Returns  the bend developed length, the length of a unfolded bend feature 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double BendDevelopedLength
            (
            );
            /**Sets  the bend developed length, the length of a unfolded bend feature 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBendDevelopedLength
            (
                double bendDevelopedLength /** benddevelopedlength */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
