#ifndef NXOpen_FEATURES_TRIMCURVE2BUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_TRIMCURVE2BUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_TrimCurve2Builder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_CurveOptions.hxx>
#include <NXOpen/GeometricUtilities_TrimCurveBoundingObjectBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class TrimCurve2Builder;
    }
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveOptions;
    }
    namespace GeometricUtilities
    {
        class TrimCurveBoundingObjectBuilder;
    }
    namespace GeometricUtilities
    {
        class TrimCurveBoundingObjectBuilderList;
    }
    class Section;
    namespace Features
    {
        class _TrimCurve2BuilderBuilder;
        class TrimCurve2BuilderImpl;
        /**
            Represents a @link NXOpen::Features::TrimCurve2 NXOpen::Features::TrimCurve2@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateTrimCurve2FeatureBuilder  NXOpen::Features::FeatureCollection::CreateTrimCurve2FeatureBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CurveExtensionOption </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        CurveOptions.Associative </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        DirectionOption </td> <td> 
         
        Shortest3DDistance </td> </tr> 

        <tr><td> 
         
        KeepOrDiscard </td> <td> 
         
        Keep </td> </tr> 

        <tr><td> 
         
        MakeInputCurvesDashed </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        OperationOption </td> <td> 
         
        Trim </td> </tr> 

        <tr><td> 
         
        PerformExtendedIntersectionCalculation </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        ProcessBoundingObjects </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.1.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  TrimCurve2Builder : public NXOpen::Features::FeatureBuilder
        {
            /** the Trim or Divide selection */
            public: enum Operation
            {
                OperationTrim/** trim */ ,
                OperationDivide/** divide */ 
            };

            /** the Direction type selection */
            public: enum Direction
            {
                DirectionShortest3DDistance/** shortest3ddistance */ ,
                DirectionAlongDirection/** along direction */ 
            };

            /** the Keep or Discard selection */
            public: enum KeepDiscard
            {
                KeepDiscardKeep/** keep */ ,
                KeepDiscardDiscard/** discard */ 
            };

            /** the Curve extension selection */
            public: enum CurveExtension
            {
                CurveExtensionNatural/** natural */ ,
                CurveExtensionLinear/** linear */ ,
                CurveExtensionCircular/** circular */ ,
                CurveExtensionNone/** none */ 
            };

            private: TrimCurve2BuilderImpl * m_trimcurve2builder_impl;
            private: friend class  _TrimCurve2BuilderBuilder;
            protected: TrimCurve2Builder();
            public: ~TrimCurve2Builder();
            /**Returns  the curve to trim 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * CurveToTrim
            (
            );
            /**Returns  the list of bounding objects 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::TrimCurveBoundingObjectBuilderList * BoundingObjectList
            (
            );
            /**Returns  the curve operation type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurve2Builder::Operation OperationOption
            (
            );
            /**Sets  the curve operation type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOperationOption
            (
                NXOpen::Features::TrimCurve2Builder::Operation operationEnumType /** Set operation type*/
            );
            /**Returns  the direction type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurve2Builder::Direction DirectionOption
            (
            );
            /**Sets  the direction type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDirectionOption
            (
                NXOpen::Features::TrimCurve2Builder::Direction directionEnumType /** Set direction option*/
            );
            /**Returns  the user defined vector 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the user defined vector 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** Set direction vector*/
            );
            /**Returns  the keep or discard selected option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurve2Builder::KeepDiscard KeepOrDiscard
            (
            );
            /**Sets  the keep or discard selected option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetKeepOrDiscard
            (
                NXOpen::Features::TrimCurve2Builder::KeepDiscard keepOrDiscardEnumType /** Set keep or discard region status*/
            );
            /**Returns  the make input curves dashed option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool MakeInputCurvesDashed
            (
            );
            /**Sets  the make input curves dashed option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMakeInputCurvesDashed
            (
                bool makeInputCurvesDashedToggleStatus /** Set make input curves dashed status*/
            );
            /**Returns  the curve extension option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurve2Builder::CurveExtension CurveExtensionOption
            (
            );
            /**Sets  the curve extension option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCurveExtensionOption
            (
                NXOpen::Features::TrimCurve2Builder::CurveExtension curveExtensionEnumType /** Set Curve Extesnion Type */
            );
            /**Returns  the process bounding objects option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool ProcessBoundingObjects
            (
            );
            /**Sets  the process bounding objects option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProcessBoundingObjects
            (
                bool processBoundingObjectsToggleStatus /** Set Process Bounding Objects status */
            );
            /**Returns  the Curve Options
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveOptions * CurveOptions
            (
            );
            /** The function sets help point for region select. The region corresponding to help point will be
                    kept/discarded depending on trim type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SelectTrimRegion
            (
                const NXOpen::Point3d & helpPoint /** Help point for region selection */
            );
            /** The function sets help point for region select. The region corresponding to help point will be
                    kept/discarded depending on trim type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void DeselectTrimRegion
            (
                const NXOpen::Point3d & helpPoint /** Help point for region selection */
            );
            /** The function deselects all trim regions 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ResetTrimRegions
            (
            );
            /** The function selects the divide location.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SelectDivideLocation
            (
                const NXOpen::Point3d & helpPoint /** preview point */
            );
            /** The function deselects the divide location.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void DeselectDivideLocation
            (
                const NXOpen::Point3d & helpPoint /** preview point */
            );
            /** The regions are recreated and updated to reflect the change in the boundary curves 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UpdateTrimRegionsAndDivideLocations
            (
            );
            /** Creates an @link NXOpen::GeometricUtilities::TrimCurveBoundingObjectBuilder NXOpen::GeometricUtilities::TrimCurveBoundingObjectBuilder@endlink  object. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::TrimCurveBoundingObjectBuilder * CreateTrimCurveBoundingObjectBuilder
            (
            );
            /**Returns  the perform extended intersection calculation option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool PerformExtendedIntersectionCalculation
            (
            );
            /**Sets  the perform extended intersection calculation option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPerformExtendedIntersectionCalculation
            (
                bool performExtendedIntersectionCalculationToggleStatus /** Set perform extended intersection calculation status*/
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
