#ifndef NXOpen_DISPLAY_CGFXATTRCOLLECTION_HXX_INCLUDED
#define NXOpen_DISPLAY_CGFXATTRCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_CgfxAttrCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Display_CgfxAttributeValueColor3Builder.hxx>
#include <NXOpen/Display_CgfxAttributeValueColor4Builder.hxx>
#include <NXOpen/Display_CgfxAttributeValueFileBuilder.hxx>
#include <NXOpen/Display_CgfxAttributeValueFloat3Builder.hxx>
#include <NXOpen/Display_CgfxAttributeValueFloat4Builder.hxx>
#include <NXOpen/Display_CgfxAttributeValueIntegerBuilder.hxx>
#include <NXOpen/Display_CgfxAttributeValueNumberBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_display_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Display
    {
        class CgfxAttrCollection;
    }
    class BasePart;
    namespace Display
    {
        class CgfxAttr;
    }
    namespace Display
    {
        class CgfxAttributeValueColor3Builder;
    }
    namespace Display
    {
        class CgfxAttributeValueColor4Builder;
    }
    namespace Display
    {
        class CgfxAttributeValueFileBuilder;
    }
    namespace Display
    {
        class CgfxAttributeValueFloat3Builder;
    }
    namespace Display
    {
        class CgfxAttributeValueFloat4Builder;
    }
    namespace Display
    {
        class CgfxAttributeValueIntegerBuilder;
    }
    namespace Display
    {
        class CgfxAttributeValueNumberBuilder;
    }
    class TaggedObject;
    namespace Display
    {
        class CgfxAttrCollectionImpl;
        /**
        Represents a collection @link NXOpen::Display::CgfxAttr NXOpen::Display::CgfxAttr@endlink  objects 
         <br> This class is restricted to being called from a program running during an 
        Interactive NX session.  If run from a non-interactive session it will 
        return NULL. <br> 
         <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
         <br>  @deprecated Deprecated in NX10.0.0.  No alternative provided for this class. <br>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NX_DEPRECATED("Deprecated in NX10.0.0.  No alternative provided for this class.") NXOPENCPP_DISPLAYEXPORT  CgfxAttrCollection : public NXOpen::TaggedObjectCollection
        {
            private: CgfxAttrCollectionImpl * m_cgfxattrcollection_impl;
            private: NXOpen::BasePart* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit CgfxAttrCollection(NXOpen::BasePart *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~CgfxAttrCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Display::CgfxAttrCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Display::CgfxAttr *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Display::CgfxAttrCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_DISPLAYEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_DISPLAYEXPORT  void next();
                NXOpen::Display::CgfxAttrCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a @link NXOpen::Display::CgfxAttributeValueIntegerBuilder NXOpen::Display::CgfxAttributeValueIntegerBuilder@endlink  object 
             <br>  @deprecated Deprecated in NX10.0.0.  No alternative provided for this class. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  No alternative provided for this class.") NXOpen::Display::CgfxAttributeValueIntegerBuilder * CreateAttributeValueIntegerBuilder
            (
                NXOpen::TaggedObject * cgfxAttribute /** If cgfxAttribute is not NULL, then this object will be edited*/
            );
            /** Creates a @link NXOpen::Display::CgfxAttributeValueNumberBuilder NXOpen::Display::CgfxAttributeValueNumberBuilder@endlink  object 
             <br>  @deprecated Deprecated in NX10.0.0.  No alternative provided for this class. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  No alternative provided for this class.") NXOpen::Display::CgfxAttributeValueNumberBuilder * CreateAttributeValueNumberBuilder
            (
                NXOpen::TaggedObject * cgfxAttribute /** If cgfxAttribute is not NULL, then this object will be edited*/
            );
            /** Creates a @link NXOpen::Display::CgfxAttributeValueColor3Builder NXOpen::Display::CgfxAttributeValueColor3Builder@endlink  object 
             <br>  @deprecated Deprecated in NX10.0.0.  No alternative provided for this class. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  No alternative provided for this class.") NXOpen::Display::CgfxAttributeValueColor3Builder * CreateAttributeValueColor3Builder
            (
                NXOpen::TaggedObject * cgfxAttribute /** If cgfxAttribute is not NULL, then this object will be edited*/
            );
            /** Creates a @link NXOpen::Display::CgfxAttributeValueColor4Builder NXOpen::Display::CgfxAttributeValueColor4Builder@endlink  object 
             <br>  @deprecated Deprecated in NX10.0.0.  No alternative provided for this class. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  No alternative provided for this class.") NXOpen::Display::CgfxAttributeValueColor4Builder * CreateAttributeValueColor4Builder
            (
                NXOpen::TaggedObject * cgfxAttribute /** If cgfxAttribute is not NULL, then this object will be edited*/
            );
            /** Creates a @link NXOpen::Display::CgfxAttributeValueFileBuilder NXOpen::Display::CgfxAttributeValueFileBuilder@endlink  object 
             <br>  @deprecated Deprecated in NX10.0.0.  No alternative provided for this class. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  No alternative provided for this class.") NXOpen::Display::CgfxAttributeValueFileBuilder * CreateAttributeValueFileBuilder
            (
                NXOpen::TaggedObject * cgfxAttribute /** If cgfxAttribute is not NULL, then this object will be edited*/
            );
            /** Creates a @link NXOpen::Display::CgfxAttributeValueFloat3Builder NXOpen::Display::CgfxAttributeValueFloat3Builder@endlink  object 
             <br>  @deprecated Deprecated in NX10.0.0.  No alternative provided for this class. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  No alternative provided for this class.") NXOpen::Display::CgfxAttributeValueFloat3Builder * CreateAttributeValueFloat3Builder
            (
                NXOpen::TaggedObject * cgfxAttribute /** If cgfxAttribute is not NULL, then this object will be edited*/
            );
            /** Creates a @link NXOpen::Display::CgfxAttributeValueFloat4Builder NXOpen::Display::CgfxAttributeValueFloat4Builder@endlink  object 
             <br>  @deprecated Deprecated in NX10.0.0.  No alternative provided for this class. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  No alternative provided for this class.") NXOpen::Display::CgfxAttributeValueFloat4Builder * CreateAttributeValueFloat4Builder
            (
                NXOpen::TaggedObject * cgfxAttribute /** If cgfxAttribute is not NULL, then this object will be edited*/
            );
            /** Finds the @link  NXOpen::Display::CgfxAttr   NXOpen::Display::CgfxAttr @endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  cgfx mattex found 
             <br>  @deprecated Deprecated in NX10.0.0.  No alternative provided for this class. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  No alternative provided for this class.") NXOpen::TaggedObject * Find
            (
                const NXString & journalIdentifier /** Identifier to be found */
            );
            /** Finds the @link  NXOpen::Display::CgfxAttr   NXOpen::Display::CgfxAttr @endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  cgfx mattex found 
             <br>  @deprecated Deprecated in NX10.0.0.  No alternative provided for this class. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::TaggedObject * Find
            (
                const char * journalIdentifier /** Identifier to be found */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
