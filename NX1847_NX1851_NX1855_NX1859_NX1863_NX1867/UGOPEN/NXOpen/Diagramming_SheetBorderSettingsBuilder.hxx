#ifndef NXOpen_DIAGRAMMING_SHEETBORDERSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_DIAGRAMMING_SHEETBORDERSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Diagramming_SheetBorderSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_BordersAndZones.hxx>
#include <NXOpen/LineColorFontWidthBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_diagramming_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Diagramming
    {
        class SheetBorderSettingsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class LineColorFontWidthBuilder;
    class NXColor;
    namespace Diagramming
    {
        class _SheetBorderSettingsBuilderBuilder;
        class SheetBorderSettingsBuilderImpl;
        /** The SheetBorderSettings builder 
         <br>  Created in NX11.0.1.  <br>  
        */
        class NXOPENCPP_DIAGRAMMINGEXPORT  SheetBorderSettingsBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: SheetBorderSettingsBuilderImpl * m_sheetbordersettingsbuilder_impl;
            private: friend class  _SheetBorderSettingsBuilderBuilder;
            protected: SheetBorderSettingsBuilder();
            public: ~SheetBorderSettingsBuilder();
            /**Returns  the type of method to display like Standard/Custom 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::Method Method
            (
            );
            /**Sets  the type of method to display like Standard/Custom 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMethod
            (
                NXOpen::Diagramming::Method method /** method */ 
            );
            /**Returns  the flag that indicates if borders are created. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool CreateBorders
            (
            );
            /**Sets  the flag that indicates if borders are created. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCreateBorders
            (
                bool createBorders /** createborders */ 
            );
            /**Returns  the width of border. It should be greater than zero. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double BorderLineWidth
            (
            );
            /**Sets  the width of border. It should be greater than zero. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetBorderLineWidth
            (
                double borderLineWidth /** borderlinewidth */ 
            );
            /**Returns  the color, font and width of inner border line. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * InnerLineCFW
            (
            );
            /**Returns  the color, font and width of outer border line. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * OuterLineCFW
            (
            );
            /**Returns  the flag indicates to display sheet size in border or not 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool DisplaySheetSizeInBorder
            (
            );
            /**Sets  the flag indicates to display sheet size in border or not 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetDisplaySheetSizeInBorder
            (
                bool displaySheetSizeInBorder /** displaysheetsizeinborder */ 
            );
            /**Returns  the horizontal centering mark used to show the type of centering mark like LeftArrow/RightArrow. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::HorizontalCenteringMarkType CenteringMarksHorizontal
            (
            );
            /**Sets  the horizontal centering mark used to show the type of centering mark like LeftArrow/RightArrow. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCenteringMarksHorizontal
            (
                NXOpen::Diagramming::HorizontalCenteringMarkType centeringMarksHorizontal /** centeringmarkshorizontal */ 
            );
            /**Returns  the vertical centering mark  used to show the type of centering mark like TopArrow/BottomArrow. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::VerticalCenteringMarkType CenteringMarksVertical
            (
            );
            /**Sets  the vertical centering mark  used to show the type of centering mark like TopArrow/BottomArrow. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCenteringMarksVertical
            (
                NXOpen::Diagramming::VerticalCenteringMarkType centeringMarksVertical /** centeringmarksvertical */ 
            );
            /**Returns  the length of centering marks extension from inner border. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double CenteringMarksExtension
            (
            );
            /**Sets  the length of centering marks extension from inner border. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCenteringMarksExtension
            (
                double centeringMarksExtension /** centeringmarksextension */ 
            );
            /**Returns  the color and width of centering marks. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * CenteringMarksColorWidth
            (
            );
            /**Returns  the type of arrow style like Open, Closed... 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::ArrowStyleType ArrowStyle
            (
            );
            /**Sets  the type of arrow style like Open, Closed... 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetArrowStyle
            (
                NXOpen::Diagramming::ArrowStyleType arrowStyle /** arrowstyle */ 
            );
            /**Returns  the length of arrow in the borders. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double ArrowLength
            (
            );
            /**Sets  the length of arrow in the borders. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetArrowLength
            (
                double arrowLength /** arrowlength */ 
            );
            /**Returns  the angle of arrow in the borders. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double ArrowAngle
            (
            );
            /**Sets  the angle of arrow in the borders. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetArrowAngle
            (
                double arrowAngle /** arrowangle */ 
            );
            /**Returns  the direction of arrow like Into Sheet or Out of Sheet. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::ArrowDirectionType ArrowDirection
            (
            );
            /**Sets  the direction of arrow like Into Sheet or Out of Sheet. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetArrowDirection
            (
                NXOpen::Diagramming::ArrowDirectionType arrowDirection /** arrowdirection */ 
            );
            /**Returns  the distance between inner border and arrow head. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double DistanceFromInnerBorder
            (
            );
            /**Sets  the distance between inner border and arrow head. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetDistanceFromInnerBorder
            (
                double distanceInFromInnerBorder /** distanceinfrominnerborder */ 
            );
            /**Returns  the type of trimming mark style like Corner or Triangle. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::TrimmingMarkStyleType TrimmingMarkStyle
            (
            );
            /**Sets  the type of trimming mark style like Corner or Triangle. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetTrimmingMarkStyle
            (
                NXOpen::Diagramming::TrimmingMarkStyleType trimmingMarkStyle /** trimmingmarkstyle */ 
            );
            /**Returns  the length of trimming mark. It should be greater than zero. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double TrimmingMarkLength
            (
            );
            /**Sets  the length of trimming mark. It should be greater than zero. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetTrimmingMarkLength
            (
                double trimmingMarkLength /** trimmingmarklength */ 
            );
            /**Returns  the width of trimming mark. It should be greater than zero. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double TrimmingMarkWidth
            (
            );
            /**Sets  the width of trimming mark. It should be greater than zero. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetTrimmingMarkWidth
            (
                double trimmingMarkWidth /** trimmingmarkwidth */ 
            );
            /**Returns  the color of trimming mark. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * TrimmingMarkColor
            (
            );
            /**Sets  the color of trimming mark. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetTrimmingMarkColor
            (
                NXOpen::NXColor * trimmingMarkColor /** trimmingmarkcolor */ 
            );
            /**Returns  the length of centering mark. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double CenteringMarkLength
            (
            );
            /**Sets  the length of centering mark. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCenteringMarkLength
            (
                double centeringMarkLength /** centeringmarklength */ 
            );
            /**Returns  the flag indicates to create trimming marks or not. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool CreateTrimmingMarks
            (
            );
            /**Sets  the flag indicates to create trimming marks or not. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCreateTrimmingMarks
            (
                bool createTrimmingMarks /** createtrimmingmarks */ 
            );
            /**Returns  the length of arrow tail. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double ArrowHeadTail
            (
            );
            /**Sets  the length of arrow tail. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetArrowHeadTail
            (
                double arrowHeadTail /** arrowheadtail */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
