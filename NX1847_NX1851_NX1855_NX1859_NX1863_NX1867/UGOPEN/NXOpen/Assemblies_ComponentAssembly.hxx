#ifndef NXOpen_ASSEMBLIES_COMPONENTASSEMBLY_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_COMPONENTASSEMBLY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_ComponentAssembly.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_Component.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/PartCloseStatus.hxx>
#include <NXOpen/PartLoadStatus.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        class ComponentAssembly;
    }
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Assemblies
    {
        class ArrangementCollection;
    }
    namespace Assemblies
    {
        class ClearanceSetCollection;
    }
    namespace Assemblies
    {
        class Component;
    }
    namespace Assemblies
    {
        class ComponentOrder;
    }
    namespace Assemblies
    {
        class ComponentPattern;
    }
    namespace Assemblies
    {
        class ComponentPatternBuilder;
    }
    namespace Assemblies
    {
        class ComponentPatternCollection;
    }
    namespace Assemblies
    {
        class DrawingExplosionCollection;
    }
    namespace Assemblies
    {
        class ExplosionCollection;
    }
    namespace Assemblies
    {
        class Order;
    }
    namespace Assemblies
    {
        class OrderCollection;
    }
    namespace Assemblies
    {
        class SubsetCollection;
    }
    class BasePart;
    class ErrorList;
    class Expression;
    class NXObject;
    class Part;
    class PartCloseStatus;
    class PartLoadStatus;
    namespace Positioning
    {
        class ComponentConstraintGroup;
    }
    namespace Positioning
    {
        class ComponentConstraintGroupBuilder;
    }
    namespace Positioning
    {
        class ComponentPositioner;
    }
    namespace Positioning
    {
        class MatingConverter;
    }
    class View;
    namespace Assemblies
    {
        class _ComponentAssemblyBuilder;
        class ComponentAssemblyImpl;
        /**
          Represents the set of @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s that make up an
          assembly. Components are arranged in a tree structure, with a single component at the
          root. (See @link NXOpen::Assemblies::ComponentAssembly::RootComponent NXOpen::Assemblies::ComponentAssembly::RootComponent@endlink .) The
          components directly below the root are added to this assembly by calling
          @link NXOpen::Assemblies::ComponentAssembly::AddComponent NXOpen::Assemblies::ComponentAssembly::AddComponent@endlink . These "Top Level" components are
          said to be owned directly by this assembly. Top Level components may themselves have
          subcomponents.

           <br> 
          Certain methods in this class will only operate on Top Level components. For example,
          @link NXOpen::Assemblies::ComponentAssembly::MoveComponent NXOpen::Assemblies::ComponentAssembly::MoveComponent@endlink  will throw an exception if the
          input component is not owned directly by this assembly.  
           <br> 

           <br> 
          Note, however, that input components will be mapped onto the correct component in the
          assembly. See @link NXOpen::Assemblies::ComponentAssembly::MapComponentFromParent NXOpen::Assemblies::ComponentAssembly::MapComponentFromParent@endlink .
           <br> 

           <br> 
          For any methods that specify a component's position, the orientation matrix is in column order. 
          The first column of the matrix specifies the X axis, the second the Y axis, and the third the Z
          axis.
           <br> 
         <br> To obtain an instance of this class, use @link NXOpen::BasePart::ComponentAssembly  NXOpen::BasePart::ComponentAssembly @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_ASSEMBLIESEXPORT  ComponentAssembly : public NXOpen::NXObject
        {
            /** Defines how a component substitution operation is performed.
                 */
            public: enum SubstitutionMode
            {
                SubstitutionModeNonAssociative/** The old component is deleted, and the new one is added */,
                SubstitutionModeSingleComponent/** An associative substitution is performed. As far as possible,
                                                                                        this will attempt to preserve assembly constraints and interpart
                                                                                        links. */,
                SubstitutionModeAll/** An associative substitution is performed on all components that
                                                                                        represent the same prototype part. This effectively substitutes
                                                                                        one child part for a new one. */
            };

            /** Open options for open_components */
            public: enum OpenOption
            {
                OpenOptionComponentOnly/** Open the component but none of its children */,
                OpenOptionImmediateChildren/** Open the immediate children of an already open component */,
                OpenOptionWholeAssembly/** Open the component and all of its children */,
                OpenOptionReapplyRevRule/** Reconfigure and open components based on current revision rules. If this option is used in native mode, it will behave just like Open Component. */
            };

            /** Open Component Status */
            public: enum OpenComponentStatus
            {
                OpenComponentStatusSuccessfullyOpened/** The component was opened as expected */,
                OpenComponentStatusDeletedByOpen/** The component was deleted on load as a result of the open */,
                OpenComponentStatusCouldNotOpen/** The component could not be opened */
            };

            /** Check in and Check out options for components */
            public: enum CheckinCheckoutOption
            {
                CheckinCheckoutOptionDesignElement/** Checks in or Checks out the design element */,
                CheckinCheckoutOptionSourceItem/** Checks in or Checks out the source item that is referenced by a reuse design element or subordinate design element */,
                CheckinCheckoutOptionBoth/** Checks in or Checks out the design element and its referenced source item */,
                CheckinCheckoutOptionDefault/** Check In or Check Out option is determined by the system using whatever option is appropriate for the selected object type. For Reuse design element, the system defaults to checking out both the design element and the underlying item. */
            };

            /** Indicates how close component should handle component parts when they are modified */
            public: enum CloseModified
            {
                CloseModifiedFalse/** Close only unmodified parts, not modified parts */,
                CloseModifiedTrue/** Close all parts, modified and unmodified */
            };

            /** 
                    Defines the component supression states.
                */
            public: enum SuppressedState
            {
                SuppressedStateInherit/** Inherit */,
                SuppressedStateSuppressed/** Suppressed */,
                SuppressedStateUnsuppressed/** Unsuppressed */,
                SuppressedStateSuppressedByExp/** Suppressed by expression */,
                SuppressedStateUnsuppressedByExp/** Unsuppressed by expression */
            };

            /** Option controls whether reordered @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s are placed 
                    before or after the target @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink */
            public: enum OrderTargetLocation
            {
                OrderTargetLocationPlaceBefore/** Move reordered @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s before the target @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  */,
                OrderTargetLocationPlaceAfter/** Move reordered @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s after the target @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  */
            };

            private: ComponentAssemblyImpl * m_componentassembly_impl;
            private: friend class  _ComponentAssemblyBuilder;
            protected: ComponentAssembly();
            public: ~ComponentAssembly();
            /** 
                    Creates a new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly, based on an existing part file.
                 @return  The new Component 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddComponent
            (
                const NXString & partToAdd /** The part that defines the new component */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component */,
                const NXString & componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the
                                                                                                    part_to_add */
            );
            /** 
                    Creates a new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly, based on an existing part file.
                 @return  The new Component 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            NXOpen::Assemblies::Component * AddComponent
            (
                const char * partToAdd /** The part that defines the new component */,
                const char * referenceSetName /** The name of the reference set used to represent the new component */,
                const char * componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the
                                                                                                    part_to_add */
            );
            /** 
                    Creates a new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly, based on an existing part file.
                 @return  The new Component 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddComponent
            (
                const NXString & partToAdd /** The part that defines the new component */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component */,
                const NXString & componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the
                                                                                                    part_to_add */,
                bool uomAsNgc /** Whether to set to non-geometric if with unit-of-measure */
            );
            /** 
                    Creates a new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly, based on an existing part file.
                 @return  The new Component 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            NXOpen::Assemblies::Component * AddComponent
            (
                const char * partToAdd /** The part that defines the new component */,
                const char * referenceSetName /** The name of the reference set used to represent the new component */,
                const char * componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the
                                                                                                    part_to_add */,
                bool uomAsNgc /** Whether to set to non-geometric if with unit-of-measure */
            );
            /** 
                    Creates new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly, based on existing part files.
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void AddComponents
            (
                const std::vector<NXOpen::Part *> & partsToAdd /** The parts that define new components */,
                const NXOpen::Point3d & point /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component */,
                int count /**  number of times each part to be added as component in parent part  */,
                bool scatter /** Scatter the multiple components around the specified location */,
                std::vector<NXOpen::Assemblies::Component *> & components /** The array of components added to the parent part */
            );
            /** 
                    Creates new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly, based on existing part files.
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void AddComponents
            (
                const std::vector<NXOpen::Part *> & partsToAdd /** The parts that define new components */,
                const NXOpen::Point3d & point /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                const char * referenceSetName /** The name of the reference set used to represent the new component */,
                int count /**  number of times each part to be added as component in parent part  */,
                bool scatter /** Scatter the multiple components around the specified location */,
                std::vector<NXOpen::Assemblies::Component *> & components /** The array of components added to the parent part */
            );
            /** 
                    Creates a new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly, based on an existing part file.
                 @return  The new Component 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddComponent
            (
                NXOpen::BasePart * partToAdd /** The part that defines the new component */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component */,
                const NXString & componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the
                                                                                                    part_to_add */
            );
            /** 
                    Creates a new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly, based on an existing part file.
                 @return  The new Component 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            NXOpen::Assemblies::Component * AddComponent
            (
                NXOpen::BasePart * partToAdd /** The part that defines the new component */,
                const char * referenceSetName /** The name of the reference set used to represent the new component */,
                const char * componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the
                                                                                                    part_to_add */
            );
            /** 
                    Creates a new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly as master part.
                 @return  The new Component 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddMasterPartComponent
            (
                const NXString & partToAdd /** The part that defines the new component */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component */,
                const NXString & componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer.
                                                         */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the part_to_add */
            );
            /** 
                    Creates a new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly as master part.
                 @return  The new Component 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            NXOpen::Assemblies::Component * AddMasterPartComponent
            (
                const char * partToAdd /** The part that defines the new component */,
                const char * referenceSetName /** The name of the reference set used to represent the new component */,
                const char * componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer.
                                                         */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the part_to_add */
            );
            /** 
                    Creates a new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly as master part.
                 @return  The new Component 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddMasterPartComponent
            (
                NXOpen::Part * partToAdd /** The part that defines the new component */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component */,
                const NXString & componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer.
                                                         */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the part_to_add */
            );
            /** 
                    Creates a new @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly as master part.
                 @return  The new Component 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            NXOpen::Assemblies::Component * AddMasterPartComponent
            (
                NXOpen::Part * partToAdd /** The part that defines the new component */,
                const char * referenceSetName /** The name of the reference set used to represent the new component */,
                const char * componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer.
                                                         */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the part_to_add */
            );
            /** 
                    Adds a product into workset part at identity location.
                 @return  The new Component 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * InsertProduct
            (
                NXOpen::Part * productPart /** The product being added to the workset */,
                int layer /**  The layer to place the new component on 
                                                                     -1 means use the original layers defined in the component.
                                                                     0 means use the work layer.
                                                                     1-256 means use the specified layer.
                                                                  */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the
                                                                                                    part_to_add */
            );
            /**Returns   @brief  the top-level component, i.e. the component at the root of the component
                    tree.  

               This component corresponds to the part that owns this
                    @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink . The components below this will correspond to
                    parts added by calling @link NXOpen::Assemblies::ComponentAssembly::AddComponent NXOpen::Assemblies::ComponentAssembly::AddComponent@endlink .
                     <br> 
                    Note that this will be NULL if there are no components in the tree. (I.e. if the part
                    that owns this ComponentAssembly is a piece part.)
                     <br> 
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::Component * RootComponent
            (
            );
            /**
                    Substitutes an old component with a new component. The new component represents a new part, but 
                    will be placed in the same location as the original.
                 @return  The new Component that replaces the old one. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * SubstituteComponent
            (
                NXOpen::Assemblies::Component * component /** The old component to be substituted. */,
                NXOpen::BasePart * part /** The new part */,
                const NXString & newName /** The name for the new component */,
                const NXString & referenceSet /** The name of the reference set for the new component */,
                int layer /** The layer for the new component 
                                                                    -1 means use the original layers defined in the component.
                                                                    0 means use the work layer
                                                                    1-256 means use the specified layer.
                                                              */,
                NXOpen::Assemblies::ComponentAssembly::SubstitutionMode mode /** Defines the substitution mode */
            );
            /**
                    Substitutes an old component with a new component. The new component represents a new part, but 
                    will be placed in the same location as the original.
                 @return  The new Component that replaces the old one. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            NXOpen::Assemblies::Component * SubstituteComponent
            (
                NXOpen::Assemblies::Component * component /** The old component to be substituted. */,
                NXOpen::BasePart * part /** The new part */,
                const char * newName /** The name for the new component */,
                const char * referenceSet /** The name of the reference set for the new component */,
                int layer /** The layer for the new component 
                                                                    -1 means use the original layers defined in the component.
                                                                    0 means use the work layer
                                                                    1-256 means use the specified layer.
                                                              */,
                NXOpen::Assemblies::ComponentAssembly::SubstitutionMode mode /** Defines the substitution mode */
            );
            /** Removes a component from this assemebly.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RemoveComponent
            (
                NXOpen::Assemblies::Component * component /** The component to remove. Must be directly owned by this assembly. */
            );
            /** Maps a component in a parent assembly onto a corresponding component in this
                    assembly. For example, given an Axle assembly: 
                     @code 
                                           
                           Axle
                         /      \          
                        /        \         
                     Left        Right     
                     Wheel       Wheel     

                     @endcode  
                    and a Car assembly containing two Axle components:
                     @code 
                     
                                       Car
                                _______ |_______                   
                               /                \                  
                              /                  \                 
                         Front                     Rear            
                         Axle                      Axle            
                       /      \                  /      \          
                      /        \                /        \         
                 Front Left  Front Right    Rear Left   Rear Right 
                   Wheel       Wheel         Wheel       Wheel     

                     @endcode 

                    then calling Axle.MapComponentFromParent with the Front Left Wheel component will
                    return the Left Wheel component. Note that calling Car.MapComponentFromParent on
                    Left Wheel will not work. See @link NXOpen::Assemblies::ComponentAssembly::MapComponentsFromSubassembly NXOpen::Assemblies::ComponentAssembly::MapComponentsFromSubassembly@endlink .
                    

                     <br> 
                    Calling Axle.MapComponent with the Left Wheel component will simply return Left
                    Wheel, i.e. it is a null operation.
                     <br> 

                     <br> 
                    Note that calling this method may load additional assembly data from the Axle part. 
                     <br> 

                 @return  The mapped component. This will be defined in the
                                                                                 component tree of this assembly parameter.
                                                                            
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::Component * MapComponentFromParent
            (
                NXOpen::Assemblies::Component * component /** The component to map. This should be defined in the
                                                                                    tree of a parent assembly which contains this assembly.
                                                                                */
            );
            /** Maps a component in a subassembly onto the corresponding components in this
                    parent assembly. For example, given an Axle assembly: 
                     @code 
                                           
                           Axle
                         /      \          
                        /        \         
                     Left        Right     
                     Wheel       Wheel     

                     @endcode  
                    and a Car assembly containing two Axle components:
                     @code 
                     
                                       Car
                                _______ |_______                   
                               /                \                  
                              /                  \                 
                         Front                     Rear            
                         Axle                      Axle            
                       /      \                  /      \          
                      /        \                /        \         
                 Front Left  Front Right    Rear Left   Rear Right 
                   Wheel       Wheel         Wheel       Wheel     

                     @endcode 

                    then calling Car.MapComponentsFromSubassembly on Left Wheel will return
                    Front Left Wheel and Rear Left Wheel.
                    See also @link NXOpen::Assemblies::ComponentAssembly::MapComponentFromParent NXOpen::Assemblies::ComponentAssembly::MapComponentFromParent@endlink .
                    
                 @return  The mapped components. 
                                                                                     
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Assemblies::Component *> MapComponentsFromSubassembly
            (
                NXOpen::Assemblies::Component * component /** The component to map. This must be defined in a subassembly
                                                                                            of this assembly.
                                                                                         */
            );
            /**Returns 
                    the currently active @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  for this ComponentAssembly
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Arrangement * ActiveArrangement
            (
            );
            /**Sets 
                    the currently active @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  for this ComponentAssembly
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetActiveArrangement
            (
                NXOpen::Assemblies::Arrangement * newArrangement /** The new active @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink . This Arrangement
                                                                                must be defined in this ComponentAssembly.
                                                                            */
            );
            /** Changes the current @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  of the given @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to the
                @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  with the given name.
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ChangeByName
            (
                const NXString & name /** The name of arrangement to change to */,
                const std::vector<NXOpen::Assemblies::Component *> & partOccs /** The @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to be modified */
            );
            /** Changes the current @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  of the given @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to the
                @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  with the given name.
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void ChangeByName
            (
                const char * name /** The name of arrangement to change to */,
                const std::vector<NXOpen::Assemblies::Component *> & partOccs /** The @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to be modified */
            );
            /** Set the default @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  for the given @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink . 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefault
            (
                NXOpen::Assemblies::Arrangement * arrangement /** The new default @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink . */
            );
            /**
                    Suppresses an array of components
                 @return  list of errors encountered during the suppress 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * SuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to be suppressed */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be suppressed.
                                                                                                          These arrangements must be defined in this ComponentAssembly
                                                                                                       */
            );
            /**
                    Suppresses an array of components in all @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  s in this ComponentAssembly
                 @return  list of errors encountered during the suppress 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * SuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to be suppressed */
            );
            /**
                    Suppresses an array of components in all @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  s in this ComponentAssembly
                 @return  list of errors encountered during the suppress 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * SuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to be suppressed */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be unsuppressed */,
                const NXString & expression /** Suppress components if expression evalutes zero else unsuppress components */
            );
            /**
                    Suppresses an array of components in all @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  s in this ComponentAssembly
                 @return  list of errors encountered during the suppress 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            NXOpen::ErrorList * SuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to be suppressed */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be unsuppressed */,
                const char * expression /** Suppress components if expression evalutes zero else unsuppress components */
            );
            /**
                    Unsuppresses an array of components in this ComponentAssembly
                 @return  list of errors encountered during the unsuppress 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * UnsuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to be unsuppressed */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be unsuppressed.
                                                                                                          These arrangements must be defined in this ComponentAssembly
                                                                                                       */
            );
            /**
                    Unsuppresses an array of components in all @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  s in this ComponentAssembly
                 @return  list of errors encountered during the unsuppress 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * UnsuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to be unsuppressed */
            );
            /**
                    Release control of the suppression state of an array of components. The components
                    will no longer have their suppression state controlled by the given arrangements. (Note
                    that it is not an error if the given arrangements do not control the components.)
                 @return  list of errors encountered during the release 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * ReleaseSuppression
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to be released */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be released.
                                                                                                          These arrangements must be defined in this ComponentAssembly
                                                                                                       */
            );
            /**
                    Release control of the suppression state of an array of components. The components
                    will no longer have their suppression state controlled by any of the arrangements
                    in the ComponentAssembly.
                 @return  list of errors encountered during the release 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * ReleaseSuppression
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to be released */
            );
            /** 
                    Convenience method for setting the reference set used to represent a component
                    to be the entire part.
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEntirePartRefset
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly. */
            );
            /** 
                    Convenience method for setting the reference set used to represent a component
                    to be empty
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEmptyRefset
            (
                NXOpen::Assemblies::Component * component /** The component to edit.  Must be directly owned by this assembly. */
            );
            /** 
                    Sets the reference set used to represent each component in an array. This is the equivalent of calling:
                     @code 
                    NXOpen.Assemblies.Component.DirectOwner
                     @endcode 
                     @code 
                    NXOpen.Assemblies.ComponentAssembly.ReplaceReferenceSet
                     @endcode 
                     <br> 
                    on each component in the array. However, this method will ensure that the reference set operations
                    are carried out in the correct order, so that any effects caused by a parent's reference set change will
                    be correctly reflected in the children. If changing reference set on components at various levels in the
                    assembly, use this method.
                     <br> 
                    Note that the names of the default reference sets Empty and Entire Part can be
                    obtained from @link NXOpen::Assemblies::Component::EmptyPartRefsetName NXOpen::Assemblies::Component::EmptyPartRefsetName@endlink  or
                    @link NXOpen::Assemblies::Component::EntirePartRefsetName NXOpen::Assemblies::Component::EntirePartRefsetName@endlink .
                 @return  list of errors encountered during the edit
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ErrorList * ReplaceReferenceSetInOwners
            (
                const NXString & newReferenceSet /** The name of the new reference set */,
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be edited. Each component 
                                                                                                    will have its reference set updated in its
                                                                                                    owning assembly. */
            );
            /** 
                    Sets the reference set used to represent each component in an array. This is the equivalent of calling:
                     @code 
                    NXOpen.Assemblies.Component.DirectOwner
                     @endcode 
                     @code 
                    NXOpen.Assemblies.ComponentAssembly.ReplaceReferenceSet
                     @endcode 
                     <br> 
                    on each component in the array. However, this method will ensure that the reference set operations
                    are carried out in the correct order, so that any effects caused by a parent's reference set change will
                    be correctly reflected in the children. If changing reference set on components at various levels in the
                    assembly, use this method.
                     <br> 
                    Note that the names of the default reference sets Empty and Entire Part can be
                    obtained from @link NXOpen::Assemblies::Component::EmptyPartRefsetName NXOpen::Assemblies::Component::EmptyPartRefsetName@endlink  or
                    @link NXOpen::Assemblies::Component::EntirePartRefsetName NXOpen::Assemblies::Component::EntirePartRefsetName@endlink .
                 @return  list of errors encountered during the edit
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::ErrorList * ReplaceReferenceSetInOwners
            (
                const char * newReferenceSet /** The name of the new reference set */,
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be edited. Each component 
                                                                                                    will have its reference set updated in its
                                                                                                    owning assembly. */
            );
            /** Replaces the reference set used by a component.  Note that the names of the default reference sets Empty and Entire Part can be
                    obtained from @link NXOpen::Assemblies::Component::EmptyPartRefsetName NXOpen::Assemblies::Component::EmptyPartRefsetName@endlink  or
                    @link NXOpen::Assemblies::Component::EntirePartRefsetName NXOpen::Assemblies::Component::EntirePartRefsetName@endlink . 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void ReplaceReferenceSet
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly. */,
                const NXString & newReferenceSet /** The name of the new reference set */
            );
            /** Replaces the reference set used by a component.  Note that the names of the default reference sets Empty and Entire Part can be
                    obtained from @link NXOpen::Assemblies::Component::EmptyPartRefsetName NXOpen::Assemblies::Component::EmptyPartRefsetName@endlink  or
                    @link NXOpen::Assemblies::Component::EntirePartRefsetName NXOpen::Assemblies::Component::EntirePartRefsetName@endlink . 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            void ReplaceReferenceSet
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly. */,
                const char * newReferenceSet /** The name of the new reference set */
            );
            /** Moves a component by specifying a translation and rotation. Note that these are
                    specified in the coordinates of this assembly, which are not necessarily the
                    coordinates of the displayed part. Note that the rotation matrix is expected to 
                    be stored in a column order fashion.
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void MoveComponent
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly  */,
                const NXOpen::Vector3d & translation /** The translation delta */,
                const NXOpen::Matrix3x3 & rotation /** The rotation delta, in column order.  */
            );
            /**Returns  the component positioner for this assembly.  The positioner manages the component constraints.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ComponentPositioner * Positioner
            (
            );
            /** Creates a @link NXOpen::Positioning::MatingConverter NXOpen::Positioning::MatingConverter@endlink  object for this assembly.
                    This can be used to convert Mating Conditions in this part and in its child components
                    to Assembly Constraints. Note that this part need not be the work part for this. 
                 @return  The new Mating Converter 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::MatingConverter * CreateMatingConverter
            (
            );
            /** Delete all the mating conditions in this assembly.  This can be used before creating
                    assembly constraints in the assembly, if the mating conditions are not being converted.
                    Component-component mating conditions and inherited mating conditions are not deleted.
                    Update should be called afterwards.
                
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DeleteMatingConditions
            (
            );
            /** Converts all remembered mating constraints in the part of this assembly to remembered
                    assembly constraints
                
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ConvertRememberedMcs
            (
            );
            /**
                    Sets the component state to Geometric or Non-Geometric.
                    Component which are made non-geometric are undrawn from graphics area.
                
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetNonGeometricState
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly.*/,
                bool nonGeometricState /** True to make component non-geometric, false otherwise */
            );
            /**
                    Gets the component state as Geometric or Non-Geometric. 
                 @return  True if the component is non-geometric, false otherwise 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool GetNonGeometricState
            (
                NXOpen::Assemblies::Component * component /** The component to query. Must be directly owned by this assembly.*/
            );
            /**
                    Gets the quantity type of the components. Returns @link NXOpen::Assemblies::ComponentQuantity NXOpen::Assemblies::ComponentQuantity@endlink .
                 @return  Quantity type an enumeration value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::ComponentQuantity GetComponentQuantityType
            (
                NXOpen::Assemblies::Component * component /** The component to query. Must be directly owned by this assembly.*/
            );
            /**
                    Sets the integer quantity on this component.
                
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetIntegerQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly.*/,
                int integerQuantity /** Integer quantity value */
            );
            /**
                    Gets the value of the integer quantity of component.
                 @return  Integer quantity value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int GetIntegerQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to query. Must be directly owned by this assembly.*/
            );
            /**
                    Sets the real quantity and corresponding units on this component.
                
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetRealQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly.*/,
                double realQuantity /** Real quantity value */,
                const NXString & quantityUnits /** Units */
            );
            /**
                    Sets the real quantity and corresponding units on this component.
                
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetRealQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly.*/,
                double realQuantity /** Real quantity value */,
                const char * quantityUnits /** Units */
            );
            /**
                    Gets the value of real quantity and corresponding units on this component.
                 @return  Real quantity value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: double GetRealQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to query. Must be directly owned by this assembly.*/,
                NXString* units /** Units */
            );
            /**
                    Sets the as-required quantity on this component.
                
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAsRequiredQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly.*/
            );
            /**
                    Gets the as-required quantity on this component.
                 @return  As-Required string "A/R"
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString GetAsRequiredQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly.*/
            );
            /**
                    Given an array of components, creates copies of the components such that each copy is created
                    under the parent assembly of the original component. The original components do not need to be
                    under the same parent assembly as each other.
                     <br> 
                    The number of new components may be different from the original number of components if problems
                    occurred during the copy.
                     <br> 
                 @return  The newly created copies. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Assemblies::Component *> CopyComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be copied. */
            );
            /**
                    Given an array of components and a specified parent this function will transfer the given components to the parent. 
                    The original components do not need to be under the same parent assembly as each other.
                     <br> 
                    The number of new components may be different from the original number of components if problems occurred during the transfer
                     <br> 
                
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RestructureComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & origComponents /** Array of components to be restructured  */,
                NXOpen::Assemblies::Component * newParentComponent /** Destination for restructure  */,
                bool deleteFlag /** Flag to delete original components */,
                std::vector<NXOpen::Assemblies::Component *> & newComponents /** Restructured components */,
                NXOpen::ErrorList ** errorList /** Any errors that occurred during the restructure  */
            );
            /** Given an array of components, open the components using the open_option.  @return  If any components could not be loaded, this object contains the error information. 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PartLoadStatus * OpenComponents
            (
                NXOpen::Assemblies::ComponentAssembly::OpenOption openOption /** The option that controls the open operation */,
                const std::vector<NXOpen::Assemblies::Component *> & componentsToOpen /** Array of components to open  */,
                std::vector<NXOpen::Assemblies::ComponentAssembly::OpenComponentStatus> & openStatus /** Shows the status of the objects in an indexed array according to if they could be opened */
            );
            /** 
                    Given an array of components, close the components. 
                    This close of the components will check for different reasons that the part cannot be closed. 
                    The reasons will be returned in the PartCloseStatus object.    
                 @return  Close status for the parts  
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PartCloseStatus * CloseComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & componentsToClose /** Array of components to close  */,
                NXOpen::BasePart::CloseWholeTree wholeTree /** If true, unloads all components of the part. If false, unloads only the top-level part */,
                NXOpen::Assemblies::ComponentAssembly::CloseModified closeModified /** Behavior of close if component parts are modified. */
            );
            /**
                    Gets the expression controlling the suppression of the component in its
                    controlling arrangement
                 @return  The suppression expression. 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * GetSuppressionExpression
            (
                NXOpen::Assemblies::Component * component /** The component to query.*/
            );
            /**
                    Gets the expression controlling the suppression of the component in the given
                    arrangment
                 @return  The suppression expression. 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * GetSuppressionExpression
            (
                NXOpen::Assemblies::Component * component /** The component to query.*/,
                NXOpen::Assemblies::Arrangement * arrangement /** The arrangement in which to query the suppressed state */
            );
            /**
                    Gets the suppression state of the component in its controlling arrangement
                 @return  The suppressed state 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ComponentAssembly::SuppressedState GetSuppressedState
            (
                NXOpen::Assemblies::Component * component /** The component to query.*/,
                bool* controlled /** Is the suppression state controlled at the level of arrangement? */
            );
            /**
                    Gets the suppression state of the component in the given arrangement.
                 @return  The suppressed state 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ComponentAssembly::SuppressedState GetSuppressedState
            (
                NXOpen::Assemblies::Component * component /** The component to query.*/,
                NXOpen::Assemblies::Arrangement * arrangement /** Arrangements in which components should 
                                                                                             be suppressed.
                                                                                         */,
                bool* controlled /** Is the suppression state controlled at 
                                                        the level of arrangement?
                                                    */
            );
            /**        
                    Creates a @link NXOpen::Assemblies::ComponentPatternBuilder NXOpen::Assemblies::ComponentPatternBuilder@endlink  object 
                    This can be used to create or edit a component pattern.
                
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::ComponentPatternBuilder * CreateComponentPatternBuilder
            (
                NXOpen::Assemblies::ComponentPattern * compPattern /** The pattern definition object will be used in edit */
            );
            /**        
                    Add a pending @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly.
                 @return  Result of loading the
                                                                                                part_to_add 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::PartLoadStatus * AddPendingComponent
            (
                const NXString & partToAdd /** The part that defines the new component */,
                NXOpen::NXObject * pendingComponent /** component to add */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component */,
                const NXString & componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                bool uomAsNgc /** Whether to set to non-geometric if with unit-of-measure */
            );
            /**        
                    Add a pending @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly.
                 @return  Result of loading the
                                                                                                part_to_add 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            NXOpen::PartLoadStatus * AddPendingComponent
            (
                const char * partToAdd /** The part that defines the new component */,
                NXOpen::NXObject * pendingComponent /** component to add */,
                const char * referenceSetName /** The name of the reference set used to represent the new component */,
                const char * componentName /** The name of the new component */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                bool uomAsNgc /** Whether to set to non-geometric if with unit-of-measure */
            );
            /**        
                    Creates a @link NXOpen::Positioning::ComponentConstraintGroupBuilder NXOpen::Positioning::ComponentConstraintGroupBuilder@endlink  object.
                    This can be used to create a constraint group or edit an existing constraint group.
                    The context component decides which displayed constraints are to be used from
                    the member constraints of an existing constraint group. If the context component
                    is NULL the displayed constraints used are in the same part as the member
                    constraints.
                
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ComponentConstraintGroupBuilder * CreateConstraintGroupBuilder
            (
                NXOpen::Positioning::ComponentConstraintGroup * group /** Group to be edited, if NULL then a new group is created */,
                NXOpen::Assemblies::Component * contextComponent /** Context component, can be NULL */
            );
            /**        
                    Checks in array of components as per the option @link NXOpen::Assemblies::ComponentAssembly::CheckinCheckoutOption NXOpen::Assemblies::ComponentAssembly::CheckinCheckoutOption@endlink .
                 @return  Any errors that occurred during the check in  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * CheckinComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & partOccs /** Array of components to check in  */,
                NXOpen::Assemblies::ComponentAssembly::CheckinCheckoutOption checkinInputOption /** Option that controls what to check in */
            );
            /**        
                    Checks out array of components as per the option @link NXOpen::Assemblies::ComponentAssembly::CheckinCheckoutOption NXOpen::Assemblies::ComponentAssembly::CheckinCheckoutOption@endlink .
                 @return  Any errors that occurred during the check out  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * CheckoutComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & partOccs /** Array of components to check out  */,
                NXOpen::Assemblies::ComponentAssembly::CheckinCheckoutOption checkoutInputOption /** Option that controls what to check out*/
            );
            /**        
                    Checks out workset.
                 @return  Any errors that occurred during checking out of workset  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * CheckoutWorkset
            (
            );
            /**        
                    Checks in workset.
                 @return  Any errors that occurred during checking in of workset  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * CheckinWorkset
            (
            );
            /**
                    Checks out all modified objects in the current session. checkedOutObjects collection will be type of @link NXOpen::BasePart NXOpen::BasePart@endlink  or @link  NXOpen::PDM::DesignElementRevision  NXOpen::PDM::DesignElementRevision@endlink 
                 @return  Any errors that occurred during checking out of objects  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * CheckoutAllModifiedObjects
            (
                std::vector<NXOpen::NXObject *> & checkedOutObjects /** Array of NXObjects checked out  */
            );
            /**
                   Returns the checkedout status (checkedout/non checkedout) of all the objects open in NX.
                
             <br>  @deprecated Deprecated in NX12.0.2.  Use @link NXOpen::PDM::PdmSession::GetCheckedoutStatusOfAllObjectsInSession NXOpen::PDM::PdmSession::GetCheckedoutStatusOfAllObjectsInSession@endlink  instead <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX12.0.2.  Use NXOpen::PDM::PdmSession::GetCheckedoutStatusOfAllObjectsInSession instead") void GetCheckedoutStatusOfObjects
            (
                std::vector<NXOpen::NXObject *> & checkedOutObjects /** Array of NXObjects which are open in session and checked out */,
                std::vector<NXOpen::NXObject *> & uncheckedOutObjects /** Array of NXObjects which are open in session but not checkout */
            );
            /** Reorders the array of @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s before or after the target @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink .
                   @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s to reorder and the target @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  should be children of 
                   the same immediate parent.
                
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ReorderComponents
            (
                NXOpen::Assemblies::ComponentOrder * order /**  @link NXOpen::Assemblies::ComponentOrder NXOpen::Assemblies::ComponentOrder@endlink  in which components are reordered */,
                const std::vector<NXOpen::Assemblies::Component *> & componentsToReorder /** Array of components to be reordered  */,
                NXOpen::Assemblies::Component * targetComponent /** Components are moved before or after this component */,
                NXOpen::Assemblies::ComponentAssembly::OrderTargetLocation beforeOrAfter /** Whether to move components before or after the target component */
            );
            /** Assigns a new order to immediate children @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s of parent @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink .
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ReorderChildrenOfParent
            (
                NXOpen::Assemblies::ComponentOrder * order /**  @link NXOpen::Assemblies::ComponentOrder NXOpen::Assemblies::ComponentOrder@endlink  in which children are reordered */,
                NXOpen::Assemblies::Component * parentComponent /** Parent component whose children are reordered */,
                const std::vector<NXOpen::Assemblies::Component *> & componentsToReorder /** Array of children components in new order  */
            );
            /** Returns all @link NXOpen::Assemblies::ComponentOrder NXOpen::Assemblies::ComponentOrder@endlink s available in the part
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetComponentOrders
            (
                std::vector<NXOpen::Assemblies::ComponentOrder *> & orders /** Returns array of @link NXOpen::Assemblies::ComponentOrder NXOpen::Assemblies::ComponentOrder@endlink s in part */
            );
            /**        
                    Move a @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  in this assembly to a pending list.
                    The @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  should be previously in the pending list and
                    just got added into the assembly.
                
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void MoveToPendingComponent
            (
                NXOpen::NXObject * component /** component to move to pending list*/
            );
            /** Returns the active order in the part
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Order * GetActiveOrder
            (
            );
            /**
                      Creates a temporary @link NXOpen::View NXOpen::View@endlink  and shows array of components in it 
                      and treats this as Isolate view till it gets undisplayed. Only one Isolate view can be created
                      for the assembly.
                      Returns @link NXOpen::View NXOpen::View@endlink  which is treated as Isolate View.
                 @return  list of errors encountered during components shown in isolate view 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: NXOpen::ErrorList * CreateIsolateViewWithComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Array of components to be shown in isolate view */,
                NXOpen::View ** view /** Return the isolate view */
            );
            /**
                      Shows array of components in Isolate view @link NXOpen::View NXOpen::View@endlink .
                      If Isolate view doesn't exist then this API doesn't do anything.
                      Returns @link NXOpen::View NXOpen::View@endlink  which is treated as Isolate View.
                 @return  list of errors encountered during components shown in isolate view 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: NXOpen::ErrorList * ShowComponentsInIsolateView
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Array of components to be shown in isolate view */,
                NXOpen::View ** view /** Return the isolate view */
            );
            /**
                      Hides array of components in Isolate view @link NXOpen::View NXOpen::View@endlink .
                      If Isolate view doesn't exist then this API doesn't do anything.
                      Returns @link NXOpen::View NXOpen::View@endlink  which is treated as Isolate View.
                 @return  list of errors encountered during components shown in isolate view 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: NXOpen::ErrorList * HideComponentsInIsolateView
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Array of components to be shown in isolate view */,
                NXOpen::View ** view /** Return the isolate view */
            );


            /** The collection of @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink s defined in the ComponentAssembly 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Assemblies::ArrangementCollection *Arrangements();
            /** The collection of @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink s defined in the ComponentAssembly 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Assemblies::ExplosionCollection *Explosions();
            /** The collection of @link NXOpen::Assemblies::DrawingExplosion NXOpen::Assemblies::DrawingExplosion@endlink s defined in the ComponentAssembly 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::Assemblies::DrawingExplosionCollection *DrawingExplosions();
            /** The collection of @link NXOpen::Assemblies::ComponentPattern NXOpen::Assemblies::ComponentPattern@endlink  defined in the ComponentAssembly 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Assemblies::ComponentPatternCollection *ComponentPatterns();
            /** The collection of @link NXOpen::Assemblies::Subset NXOpen::Assemblies::Subset@endlink s defined in the ComponentAssembly 
             <br>  Created in NX8.5.0.  <br>  
            */
            public: NXOpen::Assemblies::SubsetCollection *Subsets();
            /** The collection of @link NXOpen::Assemblies::ClearanceSet NXOpen::Assemblies::ClearanceSet@endlink s defined in the ComponentAssembly 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Assemblies::ClearanceSetCollection *ClearanceSets();
            /** The collection of @link NXOpen::Assemblies::Order NXOpen::Assemblies::Order@endlink s defined in the ComponentAssembly 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Assemblies::OrderCollection *OrdersSet();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
