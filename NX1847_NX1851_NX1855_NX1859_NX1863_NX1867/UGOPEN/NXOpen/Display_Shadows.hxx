#ifndef NXOpen_DISPLAY_SHADOWS_HXX_INCLUDED
#define NXOpen_DISPLAY_SHADOWS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_Shadows.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_display_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Display
    {
        class Shadows;
    }
    class Builder;
    class SelectNXObjectList;
    namespace Display
    {
        class _ShadowsBuilder;
        class ShadowsImpl;
        /**
            Represents a @link NXOpen::Display::Shadows NXOpen::Display::Shadows@endlink 
             <br> This class is restricted to being called from a program running during an 
            Interactive NX session.  If run from a non-interactive session it will 
            return NULL. <br> 
             <br> To create a new instance of this class, use @link NXOpen::ViewCollection::CreateShadows  NXOpen::ViewCollection::CreateShadows @endlink  <br> 
         <br>  Created in NX7.5.3.  <br>  
        */
        class NXOPENCPP_DISPLAYEXPORT  Shadows : public NXOpen::Builder
        {
            /** Real time type settings - environment_shadow_catcher_only is enabled only in Basic Studio mode */
            public: enum RealTimeState
            {
                RealTimeStateDisabled/** Realtime is disabled */,
                RealTimeStateEnvironmentShadowCatcherOnly/** Realtime Environment or shadow catcher only */,
                RealTimeStateInterObject/** Realtime Inter-object shadows */
            };

            /** Shadows SSAO quality settings */
            public: enum SsaoQualityType
            {
                SsaoQualityTypeLow/** Low quality setting */,
                SsaoQualityTypeMedium/** Medium quality setting */,
                SsaoQualityTypeHigh/** High quality setting */,
                SsaoQualityTypeVeryHigh/** Very High quality setting */
            };

            /** Shadows SSAO contrast settings */
            public: enum SsaoContrastType
            {
                SsaoContrastTypeNone/** no contrast*/,
                SsaoContrastTypeLow/** low contrast*/,
                SsaoContrastTypeMedium/** Medium contrast */,
                SsaoContrastTypeHigh/** High contrast */,
                SsaoContrastTypeExtraHigh/** Extra High contrast */
            };

            private: ShadowsImpl * m_shadows_impl;
            private: friend class  _ShadowsBuilder;
            protected: Shadows();
            public: ~Shadows();
            /**Returns  the Real Time Settings 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::Shadows::RealTimeState RealTimeType
            (
            );
            /**Sets  the Real Time Settings 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetRealTimeType
            (
                NXOpen::Display::Shadows::RealTimeState realTimeType /** realtimetype */ 
            );
            /**Returns  the Overall Shadows 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: bool ShadowsEnabled
            (
            );
            /**Sets  the Overall Shadows 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: void SetShadowsEnabled
            (
                bool shadowsEnabled /** shadowsenabled */ 
            );
            /**Returns  the Soft Shadows 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: bool SoftShadowsEnabled
            (
            );
            /**Sets  the Soft Shadows 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetSoftShadowsEnabled
            (
                bool softShadowsEnabled /** softshadowsenabled */ 
            );
            /**Returns  the Soft Shadows edges (softness) 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: int SoftShadowsEdges
            (
            );
            /**Sets  the Soft Shadows edges (softness) 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetSoftShadowsEdges
            (
                int softShadowsEdges /** softshadowsedges */ 
            );
            /**Returns  the Soft Shadows quality 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: int SoftShadowsQuality
            (
            );
            /**Sets  the Soft Shadows quality 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetSoftShadowsQuality
            (
                int softShadowsQuality /** softshadowsquality */ 
            );
            /**Returns  the Soft Shadows bias offset 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: double SoftShadowsBiasOffset
            (
            );
            /**Sets  the Soft Shadows bias offset 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetSoftShadowsBiasOffset
            (
                double softShadowsBiasOffset /** softshadowsbiasoffset */ 
            );
            /**Returns  the Soft Shadows gradient clamp 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: double SoftShadowsGradientClamp
            (
            );
            /**Sets  the Soft Shadows gradient clamp 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetSoftShadowsGradientClamp
            (
                double softShadowsGradientClamp /** softshadowsgradientclamp */ 
            );
            /**Returns  the shadows SSAO quality 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::Shadows::SsaoQualityType SsaoQuality
            (
            );
            /**Sets  the shadows SSAO quality 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetSsaoQuality
            (
                NXOpen::Display::Shadows::SsaoQualityType shadowsSSAOQuality /** shadowsssaoquality */ 
            );
            /**Returns  the shadows SSAO radius 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: double SsaoRadius
            (
            );
            /**Sets  the shadows SSAO radius 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetSsaoRadius
            (
                double radius /** radius */ 
            );
            /**Returns  the shadows SSAO contrast 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::Shadows::SsaoContrastType SsaoContrast
            (
            );
            /**Sets  the shadows SSAO contrast 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetSsaoContrast
            (
                NXOpen::Display::Shadows::SsaoContrastType contrast /** contrast */ 
            );
            /**Returns  the shadows SSAO Blur Radius 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: double SsaoBlurRadius
            (
            );
            /**Sets  the shadows SSAO Blur Radius 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetSsaoBlurRadius
            (
                double blurRadius /** blurradius */ 
            );
            /**Returns  the shadows SSAO ambient occlusion 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: bool AmbientOcclusion
            (
            );
            /**Sets  the shadows SSAO ambient occlusion 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetAmbientOcclusion
            (
                bool shadowsSSAODisplayEnabled /** shadowsssaodisplayenabled */ 
            );
            /**Returns  the High Quality Image settings 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: bool GenerateHqiShadows
            (
            );
            /**Sets  the High Quality Image settings 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetGenerateHqiShadows
            (
                bool generateHQIShadows /** generatehqishadows */ 
            );
            /**Returns  the Shadow Catcher Selection 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * ShadowCatcherSelection
            (
            );
            /**Returns  the Shadow Catcher 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: bool UseShadowCatcher
            (
            );
            /**Sets  the Shadow Catcher 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetUseShadowCatcher
            (
                bool useShadowCatcher /** useshadowcatcher */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
