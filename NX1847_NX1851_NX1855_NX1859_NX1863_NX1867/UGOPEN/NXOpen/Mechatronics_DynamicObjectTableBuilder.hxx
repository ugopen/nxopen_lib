#ifndef NXOpen_MECHATRONICS_DYNAMICOBJECTTABLEBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_DYNAMICOBJECTTABLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_DynamicObjectTableBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class DynamicObjectTableBuilder;
    }
    class Builder;
    class NXObject;
    namespace Mechatronics
    {
        class _DynamicObjectTableBuilderBuilder;
        class DynamicObjectTableBuilderImpl;
        /**  @brief  Represents a @link NXOpen::Mechatronics::DynamicObjectTableBuilder NXOpen::Mechatronics::DynamicObjectTableBuilder@endlink  builder.  

          
                 DynamicObjectTableBuilder is used to maintain the @link NXOpen::Mechatronics::DynamicObjectTable NXOpen::Mechatronics::DynamicObjectTable@endlink  
                          which is used for dynamic object instantiation. 
                
             <br> To create a new instance of this class, use @link NXOpen::Mechatronics::DynamicObjectTableCollection::CreateDynamicObjectTableBuilder  NXOpen::Mechatronics::DynamicObjectTableCollection::CreateDynamicObjectTableBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  DynamicObjectTableBuilder : public NXOpen::Builder
        {
             /**  @brief  Represents Instance definition structure.  

              
                         The Instance name must be unique in the context of Instance Table.
                    */
            public:
            struct Instance
            {
                public: /** Table Name             */NXString Name;
                public: /** Defining SnapPoint tag */NXOpen::NXObject * TDefiningSnap;
                public: /** Dynamic Object         */NXOpen::NXObject * TDynamicObject;
                public: /** Complying SnapPoint tag*/NXOpen::NXObject * TComplyingSnap;
                public: Instance() :
                    Name(),
                    TDefiningSnap(),
                    TDynamicObject(),
                    TComplyingSnap()
                {
                }
                /** Constructor for the Instance struct. */ 
                public: Instance(const NXString &nameInitial /** Table Name             */, 
                        NXOpen::NXObject * tDefiningSnapInitial /** Defining SnapPoint tag */, 
                        NXOpen::NXObject * tDynamicObjectInitial /** Dynamic Object         */, 
                        NXOpen::NXObject * tComplyingSnapInitial /** Complying SnapPoint tag*/) :
                    Name(nameInitial),
                    TDefiningSnap(tDefiningSnapInitial),
                    TDynamicObject(tDynamicObjectInitial),
                    TComplyingSnap(tComplyingSnapInitial)
                {
                }
            };

            private: DynamicObjectTableBuilderImpl * m_dynamicobjecttablebuilder_impl;
            private: friend class  _DynamicObjectTableBuilderBuilder;
            protected: DynamicObjectTableBuilder();
            public: ~DynamicObjectTableBuilder();
            /**  @brief  Gets all Instances.  

               @return  Array of Instances 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXOpen::Mechatronics::DynamicObjectTableBuilder::Instance> GetInstances
            (
            );
            /**  @brief  Sets all Instances.  

              
                         Each Instance name must be unique in the context of input Instance list. Or the builder will raise an exception. 
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetInstances
            (
                const std::vector<NXOpen::Mechatronics::DynamicObjectTableBuilder::Instance> & instances /** Array of Instances */
            );
            /**Returns   @brief  the name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString Name
            (
            );
            /**Sets   @brief  the name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets   @brief  the name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
