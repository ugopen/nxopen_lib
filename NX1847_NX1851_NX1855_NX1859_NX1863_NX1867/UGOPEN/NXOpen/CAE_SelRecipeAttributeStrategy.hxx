#ifndef NXOpen_CAE_SELRECIPEATTRIBUTESTRATEGY_HXX_INCLUDED
#define NXOpen_CAE_SELRECIPEATTRIBUTESTRATEGY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SelRecipeAttributeStrategy.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/CAE_SelRecipeStrategy.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SelRecipeAttributeStrategy;
    }
    namespace CAE
    {
        class SelRecipeStrategy;
    }
    class Expression;
    class Unit;
    namespace CAE
    {
        class _SelRecipeAttributeStrategyBuilder;
        class SelRecipeAttributeStrategyImpl;
        /** Selection Recipe Attribute Strategy <br> Use the @link NXOpen::CAE::SelRecipeBuilder NXOpen::CAE::SelRecipeBuilder@endlink  class to add strategy.  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SelRecipeAttributeStrategy : public NXOpen::CAE::SelRecipeStrategy
        {
            private: SelRecipeAttributeStrategyImpl * m_selrecipeattributestrategy_impl;
            private: friend class  _SelRecipeAttributeStrategyBuilder;
            protected: SelRecipeAttributeStrategy();
            public: ~SelRecipeAttributeStrategy();
            /**Returns  the presence of the name attribute. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HasNameAttribute
            (
            );
            /**Returns  the name attribute. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString NameAttribute
            (
            );
            /** Sets or adds the name attribute. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNameAttribute
            (
                const NXString & name /** name */ 
            );
            /** Sets or adds the name attribute. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetNameAttribute
            (
                const char * name /** name */ 
            );
            /** Removes the name attribute. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveNameAttribute
            (
            );
            /**Returns  the presence of the color attribute. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HasColorAttribute
            (
            );
            /**Returns  the color attribute. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int ColorAttribute
            (
            );
            /** Sets or adds the color attribute. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetColorAttribute
            (
                int color /** color */ 
            );
            /** Removes the color attribute. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveColorAttribute
            (
            );
            /** Gets the names of all set user attributes. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetUserAttributeNames
            (
                std::vector<NXString> & userAttributeNames /** userattributenames */ 
            );
            /** Gets the presence of the user attribute with given name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool GetHasUserAttributes
            (
                const NXString & attributeName /** attributename */ 
            );
            /** Gets the presence of the user attribute with given name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            bool GetHasUserAttributes
            (
                const char * attributeName /** attributename */ 
            );
            /** Gets the low and high value of user attribute with given name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetUserAttributes
            (
                const NXString & attributeName /** attributename */ ,
                std::vector<NXOpen::NXObject::AttributeInformation> & lowValueAttribute /** lowvalueattribute */ ,
                std::vector<NXOpen::NXObject::AttributeInformation> & highValueAttribute /** highvalueattribute */ 
            );
            /** Gets the low and high value of user attribute with given name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void GetUserAttributes
            (
                const char * attributeName /** attributename */ ,
                std::vector<NXOpen::NXObject::AttributeInformation> & lowValueAttribute /** lowvalueattribute */ ,
                std::vector<NXOpen::NXObject::AttributeInformation> & highValueAttribute /** highvalueattribute */ 
            );
            /** Sets or adds the low and high value of user attribute with given name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUserAttributes
            (
                const NXString & attributeName /** attributename */ ,
                const std::vector<NXOpen::NXObject::AttributeInformation> & lowValueAttributes /** lowvalueattributes */ ,
                const std::vector<NXOpen::NXObject::AttributeInformation> & highValueAttributes /** highvalueattributes */ 
            );
            /** Sets or adds the low and high value of user attribute with given name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetUserAttributes
            (
                const char * attributeName /** attributename */ ,
                const std::vector<NXOpen::NXObject::AttributeInformation> & lowValueAttributes /** lowvalueattributes */ ,
                const std::vector<NXOpen::NXObject::AttributeInformation> & highValueAttributes /** highvalueattributes */ 
            );
            /** Removes the user attribute with given name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveUserAttributes
            (
                const NXString & attributeName /** attributename */ 
            );
            /** Removes the user attribute with given name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void RemoveUserAttributes
            (
                const char * attributeName /** attributename */ 
            );
            /** Clear all attributes 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ClearAllAttributes
            (
            );
            /** Convenience method to set multiple attributes at once. The name and color are optional.
                        It's recommended to use this method in case of setting multiple attributes, to avoid 
                        having the recipe resolve multiple times. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUserAttributes
            (
                bool setNameAttribute /** setnameattribute */ ,
                const NXString & nameAttribute /** nameattribute */ ,
                bool setColorAttribute /** setcolorattribute */ ,
                int colorAttribute /** colorattribute */ ,
                const std::vector<NXOpen::NXObject::AttributeInformation> & lowValueAttributes /** lowvalueattributes */ ,
                const std::vector<NXOpen::NXObject::AttributeInformation> & highValueAttributes /** highvalueattributes */ 
            );
            /** Convenience method to set multiple attributes at once. The name and color are optional.
                        It's recommended to use this method in case of setting multiple attributes, to avoid 
                        having the recipe resolve multiple times. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetUserAttributes
            (
                bool setNameAttribute /** setnameattribute */ ,
                const char * nameAttribute /** nameattribute */ ,
                bool setColorAttribute /** setcolorattribute */ ,
                int colorAttribute /** colorattribute */ ,
                const std::vector<NXOpen::NXObject::AttributeInformation> & lowValueAttributes /** lowvalueattributes */ ,
                const std::vector<NXOpen::NXObject::AttributeInformation> & highValueAttributes /** highvalueattributes */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
