#ifndef NXOpen_CAE_OPTIMIZATION_TBSSHAPERESTRICTAREABUILDER_HXX_INCLUDED
#define NXOpen_CAE_OPTIMIZATION_TBSSHAPERESTRICTAREABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Optimization_TBSShapeRestrictAreaBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Optimization_TBSCheckDOF.hxx>
#include <NXOpen/CAE_Optimization_TBSGroupDefinition.hxx>
#include <NXOpen/CAE_Optimization_TBSShapeLinkCondition.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/CAE_Optimization_TBSRestrictAreaBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Optimization
        {
            class TBSShapeRestrictAreaBuilder;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSCheckDOF;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSGroupDefinition;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSRestrictAreaBuilder;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSShapeLinkCondition;
        }
    }
    class Expression;
    namespace CAE
    {
        namespace Optimization
        {
            class _TBSShapeRestrictAreaBuilderBuilder;
            class TBSShapeRestrictAreaBuilderImpl;
            /** Represents the builder of @link NXOpen::CAE::Optimization::TBSShapeRestrictArea NXOpen::CAE::Optimization::TBSShapeRestrictArea@endlink  <br> To create a new instance of this class, use @link NXOpen::CAE::Optimization::TBSOptimizationManager::CreateShapeRestrictAreaBuilder  NXOpen::CAE::Optimization::TBSOptimizationManager::CreateShapeRestrictAreaBuilder @endlink  <br> 
             <br>  Created in NX8.5.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  TBSShapeRestrictAreaBuilder : public NXOpen::CAE::Optimization::TBSRestrictAreaBuilder
            {
                private: TBSShapeRestrictAreaBuilderImpl * m_tbsshaperestrictareabuilder_impl;
                private: friend class  _TBSShapeRestrictAreaBuilderBuilder;
                protected: TBSShapeRestrictAreaBuilder();
                public: ~TBSShapeRestrictAreaBuilder();
                /**Returns  the nodes to react on the restrictions 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSGroupDefinition * RestrictedNodes
                (
                );
                /**Returns  a value indicating whether to check maximum grow value 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool CheckMaximumGrowValue
                (
                );
                /**Sets  a value indicating whether to check maximum grow value 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetCheckMaximumGrowValue
                (
                    bool isMaxGrowValue /** ismaxgrowvalue */ 
                );
                /**Returns  the maximum grow value 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * MaximumGrowValue
                (
                );
                /**Returns  a value indicating whether to check maximum shrink value 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool CheckMaximumShrinkValue
                (
                );
                /**Sets  a value indicating whether to check maximum shrink value 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetCheckMaximumShrinkValue
                (
                    bool isMaxShrinkValue /** ismaxshrinkvalue */ 
                );
                /**Returns  the maximum shrink value 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * MaximumShrinkValue
                (
                );
                /**Returns  a value indicating whether to check elements for penetration  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool CheckElementGroup
                (
                );
                /**Sets  a value indicating whether to check elements for penetration  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetCheckElementGroup
                (
                    bool checkElements /** checkelements */ 
                );
                /**Returns  the elements checked for penetration  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSGroupDefinition * CheckedElements
                (
                );
                /**Returns  a value indicating whether to accept nodes of boundary condition as constraint 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool CheckBoundaryCondition
                (
                );
                /**Sets  a value indicating whether to accept nodes of boundary condition as constraint 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetCheckBoundaryCondition
                (
                    bool boundaryCondition /** boundarycondition */ 
                );
                /**Returns  a value indicating whether to restrict the dispacement in the coordinate direction of the referenced coordinate system 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool CheckDof
                (
                );
                /**Sets  a value indicating whether to restrict the dispacement in the coordinate direction of the referenced coordinate system 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetCheckDof
                (
                    bool checkDof /** checkdof */ 
                );
                /**Returns  the DOF settings 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSCheckDOF * DofSettings
                (
                );
                /**Returns  a value indicating whether to check link condition 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool CheckLinkCondition
                (
                );
                /**Sets  a value indicating whether to check link condition 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetCheckLinkCondition
                (
                    bool checkLinkCondition /** checklinkcondition */ 
                );
                /**Returns  the link condition 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSShapeLinkCondition * ActLinkConditionButton
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
