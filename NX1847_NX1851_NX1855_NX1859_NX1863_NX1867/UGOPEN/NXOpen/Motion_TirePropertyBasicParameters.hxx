#ifndef NXOpen_MOTION_TIREPROPERTYBASICPARAMETERS_HXX_INCLUDED
#define NXOpen_MOTION_TIREPROPERTYBASICPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_TirePropertyBasicParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ExternalFileReferenceAdapter.hxx>
#include <NXOpen/Motion_ExpressionFunctionBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/IExternalFileReferencer.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class TirePropertyBasicParameters;
    }
    class Expression;
    class ExternalFileReferenceAdapter;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class IExternalFileReferencer;
    namespace Motion
    {
        class ExpressionFunctionBuilder;
    }
    namespace Motion
    {
        class SelectFieldData;
    }
    namespace Motion
    {
        class _TirePropertyBasicParametersBuilder;
        class TirePropertyBasicParametersImpl;
        /** Represents a TirePropertyBasicParameters builder 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  TirePropertyBasicParameters : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder, public virtual NXOpen::IExternalFileReferencer
        {
            /** A constant will be used for the Cornering Stiffness when CorneringType is 'Cornering'.
                        When CorneringType is 'Carpet', a surface will be used from a data table file.
                    */
            public: enum CorneringType
            {
                CorneringTypeCornering/** cornering */ ,
                CorneringTypeCarpet/** carpet */ 
            };

            private: TirePropertyBasicParametersImpl * m_tirepropertybasicparameters_impl;
            private: friend class  _TirePropertyBasicParametersBuilder;
            protected: TirePropertyBasicParameters();
            public: ~TirePropertyBasicParameters();
            /**Returns  the lateral force (cornering) type.
                        This parameter is only used by the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink  class.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::TirePropertyBasicParameters::CorneringType LateralForceType
            (
            );
            /**Sets  the lateral force (cornering) type.
                        This parameter is only used by the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink  class.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetLateralForceType
            (
                NXOpen::Motion::TirePropertyBasicParameters::CorneringType type /** type */ 
            );
            /**Returns  the radius.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Radius
            (
            );
            /**Returns  the friction coefficient between the tire and road.
                        Should be greater than or equal to zero. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * FrictionCoefficient
            (
            );
            /**Returns  the vertical stiffness.
                        It is specified as an @link ExpressionFunctionBuilder  ExpressionFunctionBuilder @endlink , depening on the type a constant (expression) or a function will be used.
                        It is the tire stiffness normal to the road profile. 
                        Vertical stiffness defines tire normal force as a linear (if a constant is selected) or a non-linear (if a function is selected) function of vertical deflection.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ExpressionFunctionBuilder * VerticalStiffness
            (
            );
            /**Returns  the vertical damping.
                        It is used in the normal force calculation. 
                        It is specified as an @link ExpressionFunctionBuilder  ExpressionFunctionBuilder @endlink , depening on the type a constant (expression) or a function will be used.
                        A vertical damping coefficient defines the normal force due to vertical deflection velocity. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ExpressionFunctionBuilder * VerticalDamping
            (
            );
            /**Returns  the rolling resistance coefficient of the tire.
                        It is used to calculate a force as a function of the normal force.
                        This adds to the longitudinal force acting as the tire/road interface. 
                        This represents parasitic longitudinal force due to carcass deformation losses, bearing friction, etc., as a fraction of normal force. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * RollingResistance
            (
            );
            /**Returns  the cornering stiffness constant
                        This parameter is only used in the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink .
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * CorneringStiffness
            (
            );
            /**Returns  the cornering table file.
                        This parameter is only used by the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink (LMS) Tire Property.
                        It is used to input the tire lateral force as a function of the steer slip angle and normal force. 
                        For a "spline explicit" type curve, X is the slip angle, Y is the normal force, and Z is the lateral forces.
                        It is given as a data file.
             <br>  @deprecated Deprecated in NX12.0.1.  CorneringTableProfile <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX12.0.1.  CorneringTableProfile") NXString CorneringTableFile
            (
            );
            /**Sets  the cornering table file.
                        This parameter is only used by the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink (LMS) Tire Property.
                        It is used to input the tire lateral force as a function of the steer slip angle and normal force. 
                        For a "spline explicit" type curve, X is the slip angle, Y is the normal force, and Z is the lateral forces.
                        It is given as a data file.
             <br>  @deprecated Deprecated in NX12.0.1.  CorneringTableProfile <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX12.0.1.  CorneringTableProfile") void SetCorneringTableFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the cornering table file.
                        This parameter is only used by the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink (LMS) Tire Property.
                        It is used to input the tire lateral force as a function of the steer slip angle and normal force. 
                        For a "spline explicit" type curve, X is the slip angle, Y is the normal force, and Z is the lateral forces.
                        It is given as a data file.
             <br>  @deprecated Deprecated in NX12.0.1.  CorneringTableProfile <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetCorneringTableFile
            (
                const char * fileName /** filename */ 
            );
            /**Returns  the cornering table profile.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectFieldData * CorneringTableProfile
            (
            );
            /**Returns  the magic file.
                        This parameter is used only by the @link Motion::TirePropertyMotorcycle Motion::TirePropertyMotorcycle@endlink .
                         <br> 
                        A file containing coefficients for the Magic Formula formulation of lateral force,
                        aligning torque, and longitudinal force. The coefficients are entered in free format, 
                        one-per-line, with the coefficient name first, followed by the value.
                        Blank lines and lines starting with a semicolon (;) or asterisk (*) are ignored.
                        The coefficient names are a single letter (A, B, or C) followed by a one-or two-digit suffix.
                        The values presently used are A0 through A19, B0 through B13, and C0 through C26.
                        The meaning of each coefficient is explained in the section on lateral force above.
                        In addition, several constants can be defined to perform conversions from Simcenter
                        model units to Magic Formula units. KFN converts normal force values, KSS converts steerslip values,
                        KRS converts steerslip values, KCAM converts camber values, KFRC converts output force values,
                        and KTRQ converts output torque values. For instance, a KSS value of 57.2958 might be used to
                        convert a steerslip angle (calculated in radians) to a Magic Formula steerslip angle (in degrees).
                        Likewise, a KTRQ value of 0.11302344 might be used to convert a Magic Formula output torque (calculated in N-m)
                        to a Simcenter torque (in in-lb). Regardless of its use, the constant always represents the conversion
                        factor to Magic Formula units.
                        Example: The following set of lines are valid;
                        This is an example lateral force coefficient
                        A10 1.234
                        * This is an example longitudinal force coefficient
                        B2 5.678E-3
                        This is an example aligning torque coefficient
                        C24 9.0
                        * This is an example conversion factor, converting Simcenter normal forces (lb) to Magic Formula normal forces (kN)
                        KFN 4.449741738D-3  <br> 
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") NXString MagicFile
            (
            );
            /**Sets  the magic file.
                        This parameter is used only by the @link Motion::TirePropertyMotorcycle Motion::TirePropertyMotorcycle@endlink .
                         <br> 
                        A file containing coefficients for the Magic Formula formulation of lateral force,
                        aligning torque, and longitudinal force. The coefficients are entered in free format, 
                        one-per-line, with the coefficient name first, followed by the value.
                        Blank lines and lines starting with a semicolon (;) or asterisk (*) are ignored.
                        The coefficient names are a single letter (A, B, or C) followed by a one-or two-digit suffix.
                        The values presently used are A0 through A19, B0 through B13, and C0 through C26.
                        The meaning of each coefficient is explained in the section on lateral force above.
                        In addition, several constants can be defined to perform conversions from Simcenter
                        model units to Magic Formula units. KFN converts normal force values, KSS converts steerslip values,
                        KRS converts steerslip values, KCAM converts camber values, KFRC converts output force values,
                        and KTRQ converts output torque values. For instance, a KSS value of 57.2958 might be used to
                        convert a steerslip angle (calculated in radians) to a Magic Formula steerslip angle (in degrees).
                        Likewise, a KTRQ value of 0.11302344 might be used to convert a Magic Formula output torque (calculated in N-m)
                        to a Simcenter torque (in in-lb). Regardless of its use, the constant always represents the conversion
                        factor to Magic Formula units.
                        Example: The following set of lines are valid;
                        This is an example lateral force coefficient
                        A10 1.234
                        * This is an example longitudinal force coefficient
                        B2 5.678E-3
                        This is an example aligning torque coefficient
                        C24 9.0
                        * This is an example conversion factor, converting Simcenter normal forces (lb) to Magic Formula normal forces (kN)
                        KFN 4.449741738D-3  <br> 
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::ExternalFileReferenceAdapter::EstablishReference NXOpen::ExternalFileReferenceAdapter::EstablishReference@endlink  <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::ExternalFileReferenceAdapter::EstablishReference") void SetMagicFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the magic file.
                        This parameter is used only by the @link Motion::TirePropertyMotorcycle Motion::TirePropertyMotorcycle@endlink .
                         <br> 
                        A file containing coefficients for the Magic Formula formulation of lateral force,
                        aligning torque, and longitudinal force. The coefficients are entered in free format, 
                        one-per-line, with the coefficient name first, followed by the value.
                        Blank lines and lines starting with a semicolon (;) or asterisk (*) are ignored.
                        The coefficient names are a single letter (A, B, or C) followed by a one-or two-digit suffix.
                        The values presently used are A0 through A19, B0 through B13, and C0 through C26.
                        The meaning of each coefficient is explained in the section on lateral force above.
                        In addition, several constants can be defined to perform conversions from Simcenter
                        model units to Magic Formula units. KFN converts normal force values, KSS converts steerslip values,
                        KRS converts steerslip values, KCAM converts camber values, KFRC converts output force values,
                        and KTRQ converts output torque values. For instance, a KSS value of 57.2958 might be used to
                        convert a steerslip angle (calculated in radians) to a Magic Formula steerslip angle (in degrees).
                        Likewise, a KTRQ value of 0.11302344 might be used to convert a Magic Formula output torque (calculated in N-m)
                        to a Simcenter torque (in in-lb). Regardless of its use, the constant always represents the conversion
                        factor to Magic Formula units.
                        Example: The following set of lines are valid;
                        This is an example lateral force coefficient
                        A10 1.234
                        * This is an example longitudinal force coefficient
                        B2 5.678E-3
                        This is an example aligning torque coefficient
                        C24 9.0
                        * This is an example conversion factor, converting Simcenter normal forces (lb) to Magic Formula normal forces (kN)
                        KFN 4.449741738D-3  <br> 
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::ExternalFileReferenceAdapter::EstablishReference NXOpen::ExternalFileReferenceAdapter::EstablishReference@endlink  <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetMagicFile
            (
                const char * fileName /** filename */ 
            );
            /**Returns  the unique name of the tire property.
                        This must be set after this builder is attached to its owner.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString Name
            (
            );
            /**Sets  the unique name of the tire property.
                        This must be set after this builder is attached to its owner.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the unique name of the tire property.
                        This must be set after this builder is attached to its owner.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
            /**  Returns the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to return the correct external file adapter.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * GetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */
            );
            /**  Sets the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to set the correct reference. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /**  Gets the file definition to use for external file adapter. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString GetExternalFileDefinitionKey
            (
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const NXString & externalFileSpec /** the external file specification. */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const char * externalFileSpec /** the external file specification. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
