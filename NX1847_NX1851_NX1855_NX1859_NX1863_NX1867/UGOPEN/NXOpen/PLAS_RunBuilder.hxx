#ifndef NXOpen_PLAS_RUNBUILDER_HXX_INCLUDED
#define NXOpen_PLAS_RUNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PLAS_RunBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/IAttributeSourceObjectBuilder.hxx>
#include <NXOpen/PDM_LogicalObject.hxx>
#include <NXOpen/libnxopencpp_plas_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PLAS
    {
        class RunBuilder;
    }
    class Builder;
    class ErrorList;
    class IAttributeSourceObjectBuilder;
    class NXObject;
    namespace PDM
    {
        class LogicalObject;
    }
    namespace PLAS
    {
        class _RunBuilderBuilder;
        class RunBuilderImpl;
        /**  @brief  Represents a RunBuilder.  

           <br> To create a new instance of this class, use @link NXOpen::PLAS::PlasManager::CreateRunBuilder  NXOpen::PLAS::PlasManager::CreateRunBuilder @endlink  <br> 
         <br>  Created in NX11.0.1.  <br>  
        */
        class NXOPENCPP_PLASEXPORT  RunBuilder : public NXOpen::Builder, public virtual NXOpen::IAttributeSourceObjectBuilder
        {
            private: RunBuilderImpl * m_runbuilder_impl;
            private: friend class  _RunBuilderBuilder;
            protected: RunBuilder();
            public: ~RunBuilder();
            /**Returns  the line type path ID of the run. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString LineTypePathId
            (
            );
            /**Sets  the line type path ID of the run. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetLineTypePathId
            (
                const NXString & lineTypePathId /** linetypepathid */ 
            );
            /**Sets  the line type path ID of the run. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            void SetLineTypePathId
            (
                const char * lineTypePathId /** linetypepathid */ 
            );
            /**Returns  the pipe specification object of this run. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString PipeSpecPathId
            (
            );
            /**Sets  the pipe specification object of this run. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetPipeSpecPathId
            (
                const NXString & pipeSpecPathId /** pipespecpathid */ 
            );
            /**Sets  the pipe specification object of this run. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            void SetPipeSpecPathId
            (
                const char * pipeSpecPathId /** pipespecpathid */ 
            );
            /**Returns  the application name of the run. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString ObjectApplication
            (
            );
            /**Sets  the application name of the run. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetObjectApplication
            (
                const NXString & objectApplication /** objectapplication */ 
            );
            /**Sets  the application name of the run. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            void SetObjectApplication
            (
                const char * objectApplication /** objectapplication */ 
            );
            /** Gets the known logical object. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::LogicalObject * GetLogicalObject
            (
            );
            /**Returns  whether the run is unassigned 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsUnassigned
            (
            );
            /**Sets  whether the run is unassigned 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUnassigned
            (
                bool isUnassigned /** isunassigned */ 
            );
            /**  Auto assigns the attributes for a given array of objects and returns an array of objects that failed to auto assign.
               
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ErrorList * AutoAssignAttributes
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /**  Auto assigns the attributes for a given object and returns an array of objects that failed to auto assign.
                    properties needs to be created using @link CreateAttributeTitleToNamingPatternMap CreateAttributeTitleToNamingPatternMap@endlink 
               
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ErrorList * AutoAssignAttributesWithNamingPattern
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ ,
                const std::vector<NXOpen::NXObject *> & properties /** properties */ 
            );
            /** Creates a map object of attribute titles to their corresponding naming pattern 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::NXObject * CreateAttributeTitleToNamingPatternMap
            (
                std::vector<NXString> & attributeTitles /** attributetitles */ ,
                std::vector<NXString> & titlePatterns /** titlepatterns */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
