#ifndef NXOpen_CAE_CAEDOFSET_HXX_INCLUDED
#define NXOpen_CAE_CAEDOFSET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CaeDOFSet.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_CaeDOFSetDisplay.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class CaeDOFSet;
    }
    namespace CAE
    {
        class CaeDOFSetDisplay;
    }
    namespace CAE
    {
        class FENode;
    }
    namespace CAE
    {
        class SelectionRecipe;
    }
    class DisplayableObject;
    namespace CAE
    {
        class _CaeDOFSetBuilder;
        class CaeDOFSetImpl;
        /**
         Represents a dofset class @link NXOpen::CAE::CaeDOFSet NXOpen::CAE::CaeDOFSet@endlink .
         <br> To obtain an instance of this object use on of the creator in @link NXOpen::CAE::CaeDOFSetCollection NXOpen::CAE::CaeDOFSetCollection@endlink .  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  CaeDOFSet : public NXOpen::DisplayableObject
        {
            private: CaeDOFSetImpl * m_caedofset_impl;
            private: friend class  _CaeDOFSetBuilder;
            protected: CaeDOFSet();
            public: ~CaeDOFSet();
            /** Sets the label of the CaeDOFSet 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetLabel
            (
                int label /** Label of the DOFSet */
            );
            /** Gets the label of the CaeDOFSet  @return  Label of the DOFSet 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetLabel
            (
            );
            /** Get the nodes in the DOFSet  @return  Array of nodes in the DOFSet @link NXOpen::CAE::FENode NXOpen::CAE::FENode@endlink  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::FENode *> GetNodes
            (
            );
            /** Get the nodes with the given dof value in the DOFSet  @return  Array of nodes @link NXOpen::CAE::FENode NXOpen::CAE::FENode@endlink  in the DOFSet with the dof value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::FENode *> GetNodesWithDof
            (
                bool dof1 /** DOF1 value  */,
                bool dof2 /** DOF2 value  */,
                bool dof3 /** DOF3 value  */,
                bool dof4 /** DOF4 value  */,
                bool dof5 /** DOF5 value  */,
                bool dof6 /** DOF6 value  */
            );
            /** Add nodes to the CaeDOFSet
                    A true for a dof logical entry would mean that the dof is included for that corresponding node.
                    A false would mean that the dof is not included for that node. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddNodes
            (
                const std::vector<NXOpen::CAE::FENode *> & nodes /** Array of nodes to Add @link NXOpen::CAE::FENode NXOpen::CAE::FENode@endlink  */,
                const std::vector<bool> & dof1 /** Array of DOF1 values  */,
                const std::vector<bool> & dof2 /** Array of DOF2 values  */,
                const std::vector<bool> & dof3 /** Array of DOF3 values  */,
                const std::vector<bool> & dof4 /** Array of DOF4 values  */,
                const std::vector<bool> & dof5 /** Array of DOF5 values  */,
                const std::vector<bool> & dof6 /** Array of DOF6 values  */
            );
            /** Add Selection Recipes to the CaeDOFSet
                    A true for a dof logical entry would mean that the dof is included for that corresponding recipe.
                    A false would mean that the dof is not included for that recipe. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddSelectionRecipes
            (
                const std::vector<NXOpen::CAE::SelectionRecipe *> & recipes /** Array of nodes to Add @link NXOpen::CAE::SelectionRecipe NXOpen::CAE::SelectionRecipe@endlink  */,
                const std::vector<bool> & dof1 /** Array of DOF1 values  */,
                const std::vector<bool> & dof2 /** Array of DOF2 values  */,
                const std::vector<bool> & dof3 /** Array of DOF3 values  */,
                const std::vector<bool> & dof4 /** Array of DOF4 values  */,
                const std::vector<bool> & dof5 /** Array of DOF5 values  */,
                const std::vector<bool> & dof6 /** Array of DOF6 values  */
            );
            /** Add nodes and Selection Recipes to the CaeDOFSet
                    A true for a dof logical entry would mean that the dof is included for that corresponding node or Selection Recipe.
                    A false would mean that the dof is not included for that node or Selection Recipe. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddNodesAndSelectionRecipes
            (
                const std::vector<NXOpen::CAE::FENode *> & nodes /** Array of nodes to Add @link NXOpen::CAE::FENode NXOpen::CAE::FENode@endlink  */,
                const std::vector<bool> & ndof1 /** Array of DOF1 values  */,
                const std::vector<bool> & ndof2 /** Array of DOF2 values  */,
                const std::vector<bool> & ndof3 /** Array of DOF3 values  */,
                const std::vector<bool> & ndof4 /** Array of DOF4 values  */,
                const std::vector<bool> & ndof5 /** Array of DOF5 values  */,
                const std::vector<bool> & ndof6 /** Array of DOF6 values  */,
                const std::vector<NXOpen::CAE::SelectionRecipe *> & recipes /** Array of nodes to Add @link NXOpen::CAE::SelectionRecipe NXOpen::CAE::SelectionRecipe@endlink  */,
                const std::vector<bool> & rdof1 /** Array of DOF1 values  */,
                const std::vector<bool> & rdof2 /** Array of DOF2 values  */,
                const std::vector<bool> & rdof3 /** Array of DOF3 values  */,
                const std::vector<bool> & rdof4 /** Array of DOF4 values  */,
                const std::vector<bool> & rdof5 /** Array of DOF5 values  */,
                const std::vector<bool> & rdof6 /** Array of DOF6 values  */
            );
            /** Remove nodes from the CaeDOFSet.
                    If the passed in nodes are not there in the DOF Set, the call does nothing. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveNodes
            (
                const std::vector<NXOpen::CAE::FENode *> & nodes /** Array of nodes to Remove @link NXOpen::CAE::FENode NXOpen::CAE::FENode@endlink  */
            );
            /** Remove Selection Recipes from the CaeDOFSet.
                    If the passed in recipe is not there in the DOF Set, the call does nothing. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveSelectionRecipes
            (
                const std::vector<NXOpen::CAE::SelectionRecipe *> & recipes /** Selection Recipe to Remove @link NXOpen::CAE::SelectionRecipe NXOpen::CAE::SelectionRecipe@endlink  */
            );
            /** Modify the dofs of the passed in nodes in the CaeDOFSet.
                    A true for a dof logical entry would mean that the dof is included for that corresponding node.
                    A false would mean that the dof is not included for that node. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ModifyNodeDofs
            (
                const std::vector<NXOpen::CAE::FENode *> & nodes /** Array of nodes to modify the dofs @link NXOpen::CAE::FENode NXOpen::CAE::FENode@endlink  */,
                const std::vector<bool> & dof1 /** Array of DOF1 values  */,
                const std::vector<bool> & dof2 /** Array of DOF2 values  */,
                const std::vector<bool> & dof3 /** Array of DOF3 values  */,
                const std::vector<bool> & dof4 /** Array of DOF4 values  */,
                const std::vector<bool> & dof5 /** Array of DOF5 values  */,
                const std::vector<bool> & dof6 /** Array of DOF6 values  */
            );
            /** Modify the dofs of the passed in Selection Recipes in the CaeDOFSet.
                    A true for a dof logical entry would mean that the dof is included for that corresponding Selection Recipe.
                    A false would mean that the dof is not included for that Selection Recipe. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ModifySelectionRecipeDofs
            (
                const std::vector<NXOpen::CAE::SelectionRecipe *> & recipes /** Array of Selection Recipes to modify the dofs @link NXOpen::CAE::SelectionRecipe NXOpen::CAE::SelectionRecipe@endlink  */,
                const std::vector<bool> & dof1 /** Array of DOF1 values  */,
                const std::vector<bool> & dof2 /** Array of DOF2 values  */,
                const std::vector<bool> & dof3 /** Array of DOF3 values  */,
                const std::vector<bool> & dof4 /** Array of DOF4 values  */,
                const std::vector<bool> & dof5 /** Array of DOF5 values  */,
                const std::vector<bool> & dof6 /** Array of DOF6 values  */
            );
            /** Remove all nodes from the CaeDOFSet 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveAllNodes
            (
            );
            /** Remove all Selection Recipes from the CaeDOFSet 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveAllSelectionRecipes
            (
            );
            /** Display information of this DOFSet 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void Information
            (
            );
            /** The BC Display object associated with the BC object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeDOFSetDisplay * GetDisplay
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
