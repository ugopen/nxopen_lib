#ifndef NXOpen_FIELDS_COMPLEXSCALARFIELDWRAPPER_HXX_INCLUDED
#define NXOpen_FIELDS_COMPLEXSCALARFIELDWRAPPER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_ComplexScalarFieldWrapper.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class ComplexScalarFieldWrapper;
    }
    class Expression;
    namespace Fields
    {
        class Field;
    }
    class NXObject;
    namespace Fields
    {
        class _ComplexScalarFieldWrapperBuilder;
        class ComplexScalarFieldWrapperImpl;
        /** This class defines a complex value that is internally 
                backed up by a  field or two expressions. 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  ComplexScalarFieldWrapper : public NXOpen::NXObject
        {
            private: ComplexScalarFieldWrapperImpl * m_complexscalarfieldwrapper_impl;
            private: friend class  _ComplexScalarFieldWrapperBuilder;
            protected: ComplexScalarFieldWrapper();
            public: ~ComplexScalarFieldWrapper();
            /** Sets the implementation of the wrapper to the specified expressions 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExpression
            (
                NXOpen::Expression * expression /** existing expressions that will be this wrapper's value */
            );
            /** Returns the indicated implementation if the wrapper is backed up by expressions; 
                        NULL otherwise  @return  existing expression or NULL 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * GetExpression
            (
            );
            /** Sets the implementation of the wrapper to the specified expressions 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImaginaryExpression
            (
                NXOpen::Expression * expression /** existing expressions that will be this wrapper's value */
            );
            /** Returns the indicated implementation if the wrapper is backed up by expressions; 
                        NULL otherwise  @return  existing expression or NULL 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * GetImaginaryExpression
            (
            );
            /** Sets the implementation of the wrapper to the specified field 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetField
            (
                NXOpen::Fields::Field * field /** an existing field that will be this wrapper's value */
            );
            /** Returns the implementation if the wrapper is backed up by a field; 
                        NULL otherwise  @return  existing field or NULL 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::Field * GetField
            (
            );
            /** Sets the implementation of the wrapper to the specified field and scale factor 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFieldWithScaleFactor
            (
                NXOpen::Fields::Field * field /** an existing field that will be this wrapper's value */,
                double scaleFactor /** the field will be multiplied by this scale factor when being evaluated */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
