#ifndef NXOpen_FEATURES_MIRRORBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MIRRORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MirrorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_PatternDefinition.hxx>
#include <NXOpen/GeometricUtilities_PatternReferencePointServiceBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class MirrorBuilder;
    }
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeatureList;
    }
    namespace GeometricUtilities
    {
        class PatternDefinition;
    }
    namespace GeometricUtilities
    {
        class PatternReferencePointServiceBuilder;
    }
    class NXObject;
    class Point;
    namespace Features
    {
        class _MirrorBuilderBuilder;
        class MirrorBuilderImpl;
        /**
            Represents a @link NXOpen::Features::Mirror NXOpen::Features::Mirror@endlink  builder.
              Inputs to this class can be convergent objects.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateMirrorBuilder  NXOpen::Features::FeatureCollection::CreateMirrorBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CsysMirrorOption </td> <td> 
         
        MirrorYAndZ </td> </tr> 

        <tr><td> 
         
        MaintainHelixHandedness </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        MaintainThreadHandedness </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.XOnPathSpacing.NCopies.Value </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.XOnPathSpacing.SpaceType </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.XPathOption </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YDirectionOption </td> <td> 
         
        Section </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YOnPathSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YPathOption </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YSpacing.PitchDistance.Value </td> <td> 
         
        10 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YSpacing.SpaceType </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YSpacing.SpanDistance.Value </td> <td> 
         
        100 (millimeters part), 10 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.NCopies.Value </td> <td> 
         
        12 </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.PitchAngle.Value </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.PitchDistance.Value </td> <td> 
         
        10 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.SpaceType </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.SpanAngle.Value </td> <td> 
         
        360 (millimeters part), 360 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.UsePitchOption </td> <td> 
         
        Angle </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.CreateLastStaggered </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.HorizontalRef.RotationAngle.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.IncludeSeedToggle </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.RadialSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.StaggerType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        PatternService.HelixDefinition.AnglePitch.Value </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        PatternService.HelixDefinition.CountOfInstances.Value </td> <td> 
         
        6 </td> </tr> 

        <tr><td> 
         
        PatternService.HelixDefinition.DirectionType </td> <td> 
         
        Righthand </td> </tr> 

        <tr><td> 
         
        PatternService.HelixDefinition.DistancePitch.Value </td> <td> 
         
        10 (millimeters part), 0.4 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.HelixDefinition.HelixPitch.Value </td> <td> 
         
        50 (millimeters part), 2 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.HelixDefinition.HelixSpan.Value </td> <td> 
         
        100 (millimeters part), 4 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.HelixDefinition.NumberOfTurns.Value </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        PatternService.HelixDefinition.SizeOption </td> <td> 
         
        CountAngleDistance </td> </tr> 

        <tr><td> 
         
        PatternService.PatternFill.FillMargin.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.PatternFill.FillOptions </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        PatternService.PatternFill.SimplifiedBoundaryToggle </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        PatternService.PatternOrientation.AlongOrientationOption </td> <td> 
         
        NormalToPath </td> </tr> 

        <tr><td> 
         
        PatternService.PatternOrientation.CircularOrientationOption </td> <td> 
         
        FollowPattern </td> </tr> 

        <tr><td> 
         
        PatternService.PatternOrientation.FollowFaceProjDirOption </td> <td> 
         
        PatternPlaneNormal </td> </tr> 

        <tr><td> 
         
        PatternService.PatternOrientation.GeneralOrientationOption </td> <td> 
         
        Fixed </td> </tr> 

        <tr><td> 
         
        PatternService.PatternOrientation.HelixOrientationOption </td> <td> 
         
        FollowPattern </td> </tr> 

        <tr><td> 
         
        PatternService.PatternOrientation.LinearOrientationOption </td> <td> 
         
        Fixed </td> </tr> 

        <tr><td> 
         
        PatternService.PatternOrientation.MirrorOrientationOption </td> <td> 
         
        FollowPattern </td> </tr> 

        <tr><td> 
         
        PatternService.PatternOrientation.OrientationOption </td> <td> 
         
        Fixed </td> </tr> 

        <tr><td> 
         
        PatternService.PatternOrientation.PolygonOrientationOption </td> <td> 
         
        FollowPattern </td> </tr> 

        <tr><td> 
         
        PatternService.PatternOrientation.SpiralOrientationOption </td> <td> 
         
        FollowPattern </td> </tr> 

        <tr><td> 
         
        PatternService.PatternType </td> <td> 
         
        Linear </td> </tr> 

        <tr><td> 
         
        PatternService.PolygonDefinition.NumberOfSides.Value </td> <td> 
         
        6 </td> </tr> 

        <tr><td> 
         
        PatternService.PolygonDefinition.PolygonSizeOption </td> <td> 
         
        Inscribed </td> </tr> 

        <tr><td> 
         
        PatternService.PolygonDefinition.PolygonSpacing.NCopies.Value </td> <td> 
         
        4 </td> </tr> 

        <tr><td> 
         
        PatternService.PolygonDefinition.PolygonSpacing.PitchDistance.Value </td> <td> 
         
        25 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.PolygonDefinition.PolygonSpacing.SpaceType </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        PatternService.PolygonDefinition.PolygonSpacing.SpanAngle.Value </td> <td> 
         
        360 </td> </tr> 

        <tr><td> 
         
        PatternService.PolygonDefinition.RadialSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PatternService.PolygonDefinition.RadialSpacing.PitchDistance.Value </td> <td> 
         
        25 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.PolygonDefinition.RadialSpacing.SpanDistance.Value </td> <td> 
         
        100 (millimeters part), 4 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.RectangularDefinition.CreateLastStaggered </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        PatternService.RectangularDefinition.SimplifiedLayoutType </td> <td> 
         
        Square </td> </tr> 

        <tr><td> 
         
        PatternService.RectangularDefinition.StaggerType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        PatternService.RectangularDefinition.XSpacing.NCopies.Value </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        PatternService.RectangularDefinition.YSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PatternService.SpiralDefinition.DirectionType </td> <td> 
         
        Lefthand </td> </tr> 

        <tr><td> 
         
        PatternService.SpiralDefinition.NumberOfTurns.Value </td> <td> 
         
        1 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.SpiralDefinition.RadialPitch.Value </td> <td> 
         
        50 (millimeters part), 2 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.SpiralDefinition.SizeSpiralType </td> <td> 
         
        NumberOfTurns </td> </tr> 

        <tr><td> 
         
        PatternService.SpiralDefinition.TotalAngle.Value </td> <td> 
         
        360 (millimeters part), 360 (inches part) </td> </tr> 

        <tr><td> 
         
        UseInferredReferencePoint (deprecated) </td> <td> 
         
        True </td> </tr> 

        </table>  

         <br>  Created in NX8.0.1.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  MirrorBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** the Coordinate System mirror options */
            public: enum CsysMirrorOptions
            {
                CsysMirrorOptionsMirrorXAndY/** Mirror X and Y and derive Z*/,
                CsysMirrorOptionsMirrorYAndZ/** Mirror Y and Z and derive X*/,
                CsysMirrorOptionsMirrorZAndX/** Mirror X and Z and derive Y*/
            };

            private: MirrorBuilderImpl * m_mirrorbuilder_impl;
            private: friend class  _MirrorBuilderBuilder;
            protected: MirrorBuilder();
            public: ~MirrorBuilder();
            /**Returns  the Features to Mirror 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SelectFeatureList * FeatureList
            (
            );
            /**Returns  the reference point service
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternReferencePointServiceBuilder * ReferencePointService
            (
            );
            /**Returns  the reference point 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link GeometricUtilities::PatternReferencePointServiceBuilder::Point GeometricUtilities::PatternReferencePointServiceBuilder::Point@endlink  instead. <br>  

             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use GeometricUtilities::PatternReferencePointServiceBuilder::Point instead.") NXOpen::Point * ReferencePoint
            (
            );
            /**Sets  the reference point 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link GeometricUtilities::PatternReferencePointServiceBuilder::SetPoint GeometricUtilities::PatternReferencePointServiceBuilder::SetPoint@endlink  instead. <br>  

             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use GeometricUtilities::PatternReferencePointServiceBuilder::SetPoint instead.") void SetReferencePoint
            (
                NXOpen::Point * referencePoint /** referencepoint */ 
            );
            /**Returns  a flag to indicate whether to use reference point inferred from selected feature(s) or not.
                        If 'true', the reference point will be inferred every time the selected feature(s) get modified or updates.
                        If 'false, the reference point provided will be independent of the selected feature(s) but will be associative to the rule by which it was created (e.g. End of Line, Center of Arc). 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link GeometricUtilities::PatternReferencePointServiceBuilder::IsReferencePointInferred GeometricUtilities::PatternReferencePointServiceBuilder::IsReferencePointInferred@endlink  instead. <br>  

             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use GeometricUtilities::PatternReferencePointServiceBuilder::IsReferencePointInferred instead.") bool UseInferredReferencePoint
            (
            );
            /**Sets  a flag to indicate whether to use reference point inferred from selected feature(s) or not.
                        If 'true', the reference point will be inferred every time the selected feature(s) get modified or updates.
                        If 'false, the reference point provided will be independent of the selected feature(s) but will be associative to the rule by which it was created (e.g. End of Line, Center of Arc). 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link GeometricUtilities::PatternReferencePointServiceBuilder::SetReferencePointInferred GeometricUtilities::PatternReferencePointServiceBuilder::SetReferencePointInferred@endlink  instead. <br>  

             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use GeometricUtilities::PatternReferencePointServiceBuilder::SetReferencePointInferred instead.") void SetUseInferredReferencePoint
            (
                bool useInferredReferencePoint /** useinferredreferencepoint */ 
            );
            /**Returns  the @link NXOpen::GeometricUtilities::PatternDefinition NXOpen::GeometricUtilities::PatternDefinition@endlink  object 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternDefinition * PatternService
            (
            );
            /** Sets the references or selections from the input features which are to be reused for mirror.
                        The references for reuse should belong to some input feature which needs to be specified while
                        calling this API. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReferencesToReuse
            (
                NXOpen::Features::Feature * inputFeature /** inputfeature */ ,
                const std::vector<NXOpen::NXObject *> & referencesFromInputFeatures /** referencesfrominputfeatures */ 
            );
            /** Clears all the existing references to reuse so that new references can be added 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ClearReferencesToReuse
            (
            );
            /**Returns  the Coordinate System mirroring option 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MirrorBuilder::CsysMirrorOptions CsysMirrorOption
            (
            );
            /**Sets  the Coordinate System mirroring option 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCsysMirrorOption
            (
                NXOpen::Features::MirrorBuilder::CsysMirrorOptions csysOption /** csysoption */ 
            );
            /**Returns  the option to maintain symbolic thread handedness.
                        If 'true', right-handed threads will be mirrored as right-handed, and left-handed threads will be mirrored as left-handed.
                        If 'false', right-handed threads will be mirrored as left-handed, and left-handed threads will be mirrored as right-handed. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool MaintainThreadHandedness
            (
            );
            /**Sets  the option to maintain symbolic thread handedness.
                        If 'true', right-handed threads will be mirrored as right-handed, and left-handed threads will be mirrored as left-handed.
                        If 'false', right-handed threads will be mirrored as left-handed, and left-handed threads will be mirrored as right-handed. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaintainThreadHandedness
            (
                bool maintainThreadHandedness /** maintainthreadhandedness */ 
            );
            /**Returns  the option to maintain Helix feature handedness.
                        If 'true', right-handed Helix will be mirrored as right-handed, and left-handed Helix will be mirrored as left-handed.
                        If 'false', right-handed Helix will be mirrored as left-handed, and left-handed Helix will be mirrored as right-handed. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool MaintainHelixHandedness
            (
            );
            /**Sets  the option to maintain Helix feature handedness.
                        If 'true', right-handed Helix will be mirrored as right-handed, and left-handed Helix will be mirrored as left-handed.
                        If 'false', right-handed Helix will be mirrored as left-handed, and left-handed Helix will be mirrored as right-handed. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaintainHelixHandedness
            (
                bool maintainHelixHandedness /** maintainhelixhandedness */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
