#ifndef NXOpen_FEATURES_DATUMAXISBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_DATUMAXISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_DatumAxisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Features_DatumBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class DatumAxisBuilder;
    }
    class Direction;
    class DisplayableObject;
    namespace Features
    {
        class DatumBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    class ICurve;
    class Point;
    class Section;
    class SelectICurve;
    class SelectNXObject;
    class SelectNXObjectList;
    namespace Features
    {
        class _DatumAxisBuilderBuilder;
        class DatumAxisBuilderImpl;
        /** Represents a datum axis feature builder. Provides methods to create datum axis thru two points, 
        point and direction and point on curve. Also provides generic method for creation of datum axis feature
         <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateDatumAxisBuilder  NXOpen::Features::FeatureCollection::CreateDatumAxisBuilder @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  DatumAxisBuilder : public NXOpen::Features::DatumBuilder
        {
            /** Specifies the fixed type datum axis going thru only one specific axis or thru all axes. */
            public: enum FixedType
            {
                FixedTypeAll/** Fixed datum axis thru all Axis */,
                FixedTypeX/** Fixed datum axis thru X Axis */,
                FixedTypeY/** Fixed datum axis thru Y Axis */,
                FixedTypeZ/** Fixed datum axis thru Z Axis */
            };

            /** Specifies the distance on the curve as absolute distance or relative distance as percentage */
            public: enum CurveOption
            {
                CurveOptionDistance/** Absolute distance */,
                CurveOptionPercent/** Relative distance as percentage */
            };

            /** Specifies the alternate solution for datum axis using point on curve method only*/
            public: enum AlternateSolution
            {
                AlternateSolutionUndefined/** Not defined */,
                AlternateSolutionTangent/** Indicates the datum axis at tangent to curve */,
                AlternateSolutionNormal/** Datum axis at normal to curve */,
                AlternateSolutionBinormal/** Datum axis at binormal to curve */,
                AlternateSolutionOppositeTangent/** Datum axis at opposite to tangent to curve */,
                AlternateSolutionOppositeNormal/** Datum axis at opposite to normal to curve */,
                AlternateSolutionOppositeBinormal/** Datum axis at opposite to binormal to curve */,
                AlternateSolutionProject/** This direction is calculated by projecting a point selected along a curve
                                                                                        to a line, a datum axis, an edge of a solid, a planar face or a datum plane 
                                                                                    */
            };

            /** Specifies different constraint types for selected geometries */
            public: enum ConstraintType
            {
                ConstraintTypeUndefined/** Not defined */,
                ConstraintTypeCoincident/** Coincident constraint */,
                ConstraintTypeParallel/** Parallel constraint */,
                ConstraintTypePerpendicular/** Perpendicular constraint */,
                ConstraintTypeCenter/** Center constraint */,
                ConstraintTypeTangent/** Tangent constraint */,
                ConstraintTypeDistance/** Distance constraint */,
                ConstraintTypeAngle/** Angle constraint */,
                ConstraintTypeFrenet/** Frenet constraint */
            };

            /** Specifies points for which arclength is to be used. Percentage of arclength is used for points for which 
                arclength option is not selected. Specified for creation of datum axis using thru two points method. */
            public: enum UseArcLength
            {
                UseArcLengthNoPoint/** All points use percentage of arclength */,
                UseArcLengthFirstPoint/** Only first point uses arclength */,
                UseArcLengthSecondPoint/** Only second point uses arclength */,
                UseArcLengthAllPoints/** Both points use arclength */
            };

            /** Two available direction orientations that the user can choose when the Datum Axis type is Point and Direction */
            public: enum DirectionOrientations
            {
                DirectionOrientationsParallelToVector/** Orientation parallel to Direction */,
                DirectionOrientationsPerpendicularToVector/** Orientation perpendicular to Direction */
            };

            /** Available orientations that the user can choose when the Datum Axis type is On Curve Vector */
            public: enum CurveOrientations
            {
                CurveOrientationsTangent/** Orientation at tangent to curve */,
                CurveOrientationsNormal/** Orientation at normal to curve */,
                CurveOrientationsBinormal/** Orientation at binormal to curve */,
                CurveOrientationsPerpendicularToObject/** Orientation at perpendicular to object */,
                CurveOrientationsParallelToObject/** Orientation at parallel to object */
            };

            /** New Datum Axis types in NX5 */
            public: enum Types
            {
                TypesInferred/** Inferred */,
                TypesIntersection/** Datum axis at the intersection of objects*/,
                TypesCurveOrFaceAxis/** Datum axis at the curve or face axis*/,
                TypesOnCurveVector/** Datum axis at vector on curve */,
                TypesXcAxis/** Datum axis thru X axis */,
                TypesYcAxis/** Datum axis thru Y axis */,
                TypesZcAxis/** Datum axis thru Z axis */,
                TypesPointAndDir/** Datum axis thru a point and parallel or perpendicular to direction */,
                TypesTwoPoints/** Datum axis thru two point */,
                TypesFixed/** Indicate the datum axis is fixed */
            };

            private: DatumAxisBuilderImpl * m_datumaxisbuilder_impl;
            private: friend class  _DatumAxisBuilderBuilder;
            protected: DatumAxisBuilder();
            public: ~DatumAxisBuilder();
            /**Returns  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: bool ReverseDirection
            (
            );
            /**Sets  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reverse direction */ 
            );
            /** 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetPointAndDirection
            (
                NXOpen::Point * point /** point */ ,
                NXOpen::Direction * direction /** direction */ 
            );
            /** Sets two points 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetTwoPoints
            (
                NXOpen::Point * point1 /** point1 */ ,
                NXOpen::Point * point2 /** point2 */ ,
                NXOpen::Features::DatumAxisBuilder::UseArcLength useArcLength /** Specify points which use arclength instead of percentage of arclength */
            );
            /** Sets curve or edge and arc length 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetPointOnCurve
            (
                double arcLength /** Arc length */,
                const NXString & constraint /** Constraint expression. Usually same as arc_length */,
                NXOpen::Features::DatumAxisBuilder::AlternateSolution alternateSolution /** Alternate solution */,
                NXOpen::Features::DatumAxisBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::ICurve * curve /** Curve or Edge object */
            );
            /** Sets curve or edge and arc length 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            void SetPointOnCurve
            (
                double arcLength /** Arc length */,
                const char * constraint /** Constraint expression. Usually same as arc_length */,
                NXOpen::Features::DatumAxisBuilder::AlternateSolution alternateSolution /** Alternate solution */,
                NXOpen::Features::DatumAxisBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::ICurve * curve /** Curve or Edge object */
            );
            /** Sets Curve or Edge object and arc length with an extra geometry in picture 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetPointOnCurve
            (
                double arcLength /** Arc length */,
                const NXString & constraint /** Constraint expression. Usually same as arc_length */,
                NXOpen::Features::DatumAxisBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::ICurve * curve /** Curve or Edge object */,
                NXOpen::DisplayableObject * secondGeometry /** Second geometric object */
            );
            /** Sets Curve or Edge object and arc length with an extra geometry in picture 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            void SetPointOnCurve
            (
                double arcLength /** Arc length */,
                const char * constraint /** Constraint expression. Usually same as arc_length */,
                NXOpen::Features::DatumAxisBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::ICurve * curve /** Curve or Edge object */,
                NXOpen::DisplayableObject * secondGeometry /** Second geometric object */
            );
            /** Sets Curve or Edge object and arc length with an extra geometry in picture 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetPointOnCurve
            (
                double arcLength /** Arc length */,
                const NXString & constraint /** Constraint expression. Usually same as arc_length */,
                NXOpen::Features::DatumAxisBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::DisplayableObject * secondGeometry /** Second Geometric object */,
                NXOpen::ICurve * curve /** Curve or Edge object */
            );
            /** Sets Curve or Edge object and arc length with an extra geometry in picture 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            void SetPointOnCurve
            (
                double arcLength /** Arc length */,
                const char * constraint /** Constraint expression. Usually same as arc_length */,
                NXOpen::Features::DatumAxisBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::DisplayableObject * secondGeometry /** Second Geometric object */,
                NXOpen::ICurve * curve /** Curve or Edge object */
            );
            /** Sets two different geometric objects. Possible combinations are:
                <ul>
                    <li> If first constrain is Through Point, then the second contraint can be:
                        <ul>
                            <li>Solid Body Vertex (endpoint) </li>        
                            <li>Edge Midpoint </li>
                        </ul>
                    </li>
                    <li>If first constrain is Intersection of Plane, then the second contraint can be:
                        <ul>  
                            <li>Through the straight edge formed by the intersection of two planes </li>
                        </ul>
                    </li>
                    <li>If first constrain is Through Curve, then the second contraint can be:
                        <ul>       
                            <li>Used with Through Point constraint and along a curve </li>
                        </ul>
                    </li>
                    <li>If first constrain is Perpendicular to object, then the second contraint can be:
                        <ul> 
                            <li>Through Curve and Through Point perpendicular to lines, linear edge, 
                                         datum planes, datum axis, or planar faces </li>
                        </ul>
                    </li>        
                </ul>                              
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetGeometryAndConstraints
            (
                NXOpen::DisplayableObject * geometry1 /** First geometric object */,
                NXOpen::Features::DatumAxisBuilder::ConstraintType geometryConstraintType1 /** Constraint type of first geometry */,
                int constraintAttribute1 /** Constraint attribute value of first geometry VRH alternate_solution_only - only for point on curve*/,
                double constraintValue1 /** Constraint value parameter of first geometry */,
                const NXString & constraint1 /** Constraint attached with first geometric object. 
                                                                                              Set to "0.0" in case value is not specified  */,
                NXOpen::DisplayableObject * geometry2 /** Second geometric object */,
                NXOpen::Features::DatumAxisBuilder::ConstraintType geometryConstraintType2 /** Constraint type of second geometry */,
                int constraintAttribute2 /** Constraint attribute value of second geometry */,
                double constraintValue2 /** Constraint value parameter of second geometry */,
                const NXString & constraint2 /** Constraint attached with second geometric object. 
                                                                                              Set to "0.0" in case value is not specified  */,
                NXOpen::Sense direction /** Flag to specify datum axis direction */
            );
            /** Sets two different geometric objects. Possible combinations are:
                <ul>
                    <li> If first constrain is Through Point, then the second contraint can be:
                        <ul>
                            <li>Solid Body Vertex (endpoint) </li>        
                            <li>Edge Midpoint </li>
                        </ul>
                    </li>
                    <li>If first constrain is Intersection of Plane, then the second contraint can be:
                        <ul>  
                            <li>Through the straight edge formed by the intersection of two planes </li>
                        </ul>
                    </li>
                    <li>If first constrain is Through Curve, then the second contraint can be:
                        <ul>       
                            <li>Used with Through Point constraint and along a curve </li>
                        </ul>
                    </li>
                    <li>If first constrain is Perpendicular to object, then the second contraint can be:
                        <ul> 
                            <li>Through Curve and Through Point perpendicular to lines, linear edge, 
                                         datum planes, datum axis, or planar faces </li>
                        </ul>
                    </li>        
                </ul>                              
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            void SetGeometryAndConstraints
            (
                NXOpen::DisplayableObject * geometry1 /** First geometric object */,
                NXOpen::Features::DatumAxisBuilder::ConstraintType geometryConstraintType1 /** Constraint type of first geometry */,
                int constraintAttribute1 /** Constraint attribute value of first geometry VRH alternate_solution_only - only for point on curve*/,
                double constraintValue1 /** Constraint value parameter of first geometry */,
                const char * constraint1 /** Constraint attached with first geometric object. 
                                                                                              Set to "0.0" in case value is not specified  */,
                NXOpen::DisplayableObject * geometry2 /** Second geometric object */,
                NXOpen::Features::DatumAxisBuilder::ConstraintType geometryConstraintType2 /** Constraint type of second geometry */,
                int constraintAttribute2 /** Constraint attribute value of second geometry */,
                double constraintValue2 /** Constraint value parameter of second geometry */,
                const char * constraint2 /** Constraint attached with second geometric object. 
                                                                                              Set to "0.0" in case value is not specified  */,
                NXOpen::Sense direction /** Flag to specify datum axis direction */
            );
            /** Sets type of fixed datum axis 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetFixedDatumAxis
            (
                NXOpen::Features::DatumAxisBuilder::FixedType type /** Indicates fixed datum axis type */
            );
            /**Returns  the Datum Axis type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::DatumAxisBuilder::Types Type
            (
            );
            /**Sets  the Datum Axis type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetType
            (
                NXOpen::Features::DatumAxisBuilder::Types type /** type */ 
            );
            /**Returns  the objects to define Datum Axis. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesInferred Features::DatumAxisBuilder::TypesInferred@endlink 
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * Objects
            (
            );
            /**Returns  the curve or edge. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesOnCurveVector Features::DatumAxisBuilder::TypesOnCurveVector@endlink  
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectICurve * Curve
            (
            );
            /**Returns  the section. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesOnCurveVector Features::DatumAxisBuilder::TypesOnCurveVector@endlink  
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );
            /** Evaluate the path. If there is no path, create it, otherwise evaluate it. This is used only if the Datum 
                        Axis type is @link Features::DatumAxisBuilder::TypesOnCurveVector Features::DatumAxisBuilder::TypesOnCurveVector@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void EvaluatePath
            (
                NXOpen::Section * section /** section */ 
            );
            /**Returns  the point. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesPointAndDir Features::DatumAxisBuilder::TypesPointAndDir@endlink 
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the point. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesPointAndDir Features::DatumAxisBuilder::TypesPointAndDir@endlink 
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the first point. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesTwoPoints Features::DatumAxisBuilder::TypesTwoPoints@endlink  
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point1
            (
            );
            /**Sets  the first point. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesTwoPoints Features::DatumAxisBuilder::TypesTwoPoints@endlink  
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetPoint1
            (
                NXOpen::Point * point1 /** point1 */ 
            );
            /**Returns  the second point. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesTwoPoints Features::DatumAxisBuilder::TypesTwoPoints@endlink   
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point2
            (
            );
            /**Sets  the second point. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesTwoPoints Features::DatumAxisBuilder::TypesTwoPoints@endlink   
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetPoint2
            (
                NXOpen::Point * point2 /** point2 */ 
            );
            /**Returns  the first object (i.e. a planar face or datum plane). This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesIntersection Features::DatumAxisBuilder::TypesIntersection@endlink 
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * Object1
            (
            );
            /**Returns  the second object (i.e. a planar face or datum plane). This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesIntersection Features::DatumAxisBuilder::TypesIntersection@endlink   
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * Object2
            (
            );
            /**Returns  the curve or face . This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesCurveOrFaceAxis Features::DatumAxisBuilder::TypesCurveOrFaceAxis@endlink  
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * CurveOrFace
            (
            );
            /**Returns  the direction orientation. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesPointAndDir Features::DatumAxisBuilder::TypesPointAndDir@endlink   
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::DatumAxisBuilder::DirectionOrientations DirectionOrientation
            (
            );
            /**Sets  the direction orientation. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesPointAndDir Features::DatumAxisBuilder::TypesPointAndDir@endlink   
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetDirectionOrientation
            (
                NXOpen::Features::DatumAxisBuilder::DirectionOrientations directionOrientation /** directionorientation */ 
            );
            /**Returns  the vector. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesPointAndDir Features::DatumAxisBuilder::TypesPointAndDir@endlink  
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesPointAndDir Features::DatumAxisBuilder::TypesPointAndDir@endlink  
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the arc length. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesOnCurveVector Features::DatumAxisBuilder::TypesOnCurveVector@endlink   
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * ArcLength
            (
            );
            /**Returns  the orientation of vector on a curve. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesOnCurveVector Features::DatumAxisBuilder::TypesOnCurveVector@endlink   
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::DatumAxisBuilder::CurveOrientations CurveOrientation
            (
            );
            /**Sets  the orientation of vector on a curve. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesOnCurveVector Features::DatumAxisBuilder::TypesOnCurveVector@endlink   
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetCurveOrientation
            (
                NXOpen::Features::DatumAxisBuilder::CurveOrientations curveOrientation /** curveorientation */ 
            );
            /**Returns  the alternate solution type. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesOnCurveVector Features::DatumAxisBuilder::TypesOnCurveVector@endlink   
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::DatumAxisBuilder::AlternateSolution AlternateSolutionType
            (
            );
            /**Sets  the alternate solution type. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesOnCurveVector Features::DatumAxisBuilder::TypesOnCurveVector@endlink   
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetAlternateSolutionType
            (
                NXOpen::Features::DatumAxisBuilder::AlternateSolution alternateSolutionType /** alternate solution type */ 
            );
            /**Returns  the orientation object. This is used only if the Datum Axis type is 
                        @link Features::DatumAxisBuilder::TypesOnCurveVector Features::DatumAxisBuilder::TypesOnCurveVector@endlink  
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * OrientationObject
            (
            );
            /**Returns  the datum axis direction. If true, the Datum Axis direction is reversed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsAxisReversed
            (
            );
            /**Sets  the datum axis direction. If true, the Datum Axis direction is reversed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetAxisReversed
            (
                bool isAxisReversed /** isaxisreversed */ 
            );
            /**Returns  the associativity. If true, the Datum Axis is associative 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsAssociative
            (
            );
            /**Sets  the associativity. If true, the Datum Axis is associative 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetAssociative
            (
                bool isAssociative /** isassociative */ 
            );
            /**Returns  the resized distance for the end point. If the value is 0.0, then this datum axis is not resized at end point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double ResizedEndDistance
            (
            );
            /**Sets  the resized distance for the end point. If the value is 0.0, then this datum axis is not resized at end point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetResizedEndDistance
            (
                double resizedEndDistance /** resizedenddistance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
