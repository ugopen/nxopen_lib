#ifndef NXOpen_AME_MANAGEOBJECTTYPEBUILDER_HXX_INCLUDED
#define NXOpen_AME_MANAGEOBJECTTYPEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ManageObjectTypeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ManageObjectTypeBuilder;
    }
    namespace Assemblies
    {
        class Component;
    }
    class Builder;
    class Part;
    namespace AME
    {
        class _ManageObjectTypeBuilderBuilder;
        class ManageObjectTypeBuilderImpl;
        /** Builder class for assigning AD type to @link NXOpen::Part NXOpen::Part@endlink  and  name to @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink   <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateManageObjectTypeBuilder  NXOpen::AME::AMEManager::CreateManageObjectTypeBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ManageObjectTypeBuilder : public NXOpen::Builder
        {
            private: ManageObjectTypeBuilderImpl * m_manageobjecttypebuilder_impl;
            private: friend class  _ManageObjectTypeBuilderBuilder;
            protected: ManageObjectTypeBuilder();
            public: ~ManageObjectTypeBuilder();
            /** Assigns AD Type to input parts 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AssignNewType
            (
                const std::vector<NXOpen::Part *> & parts /** parts */ ,
                const NXString & newType /** newtype */ 
            );
            /** Assigns AD Type to input parts 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void AssignNewType
            (
                const std::vector<NXOpen::Part *> & parts /** parts */ ,
                const char * newType /** newtype */ 
            );
            /** Removes AD Type from input parts 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveType
            (
                const std::vector<NXOpen::Part *> & parts /** parts */ 
            );
            /** Assigns new name to the input component 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RenameComponent
            (
                NXOpen::Assemblies::Component * partOccurrence /** partoccurrence */ ,
                const NXString & name /** name */ 
            );
            /** Assigns new name to the input component 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void RenameComponent
            (
                NXOpen::Assemblies::Component * partOccurrence /** partoccurrence */ ,
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
