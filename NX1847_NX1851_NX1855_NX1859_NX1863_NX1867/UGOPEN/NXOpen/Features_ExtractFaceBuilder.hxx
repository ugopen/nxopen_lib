#ifndef NXOpen_FEATURES_EXTRACTFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_EXTRACTFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ExtractFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_ReplAsstBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class ExtractFaceBuilder;
    }
    namespace Assemblies
    {
        namespace ProductInterface
        {
            class InterfaceObject;
        }
    }
    class Face;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class ReplAsstBuilder;
    }
    class ScCollector;
    class SelectDisplayableObjectList;
    class SelectFace;
    class SelectFaceList;
    class SelectObjectList;
    class TaggedObject;
    namespace Features
    {
        class _ExtractFaceBuilderBuilder;
        class ExtractFaceBuilderImpl;
        /**
            Represents a @link NXOpen::Features::ExtractFace NXOpen::Features::ExtractFace@endlink  builder.
              Inputs to this class can be convergent objects.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateExtractFaceBuilder  NXOpen::Features::FeatureCollection::CreateExtractFaceBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngleTolerance </td> <td> 
         
        45.0 </td> </tr> 

        <tr><td> 
         
        Associative </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        CopyThreads </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        DeleteHoles </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        FixAtCurrentTimestamp </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        InheritDisplayProperties </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        IsPsmOutputBody </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        MakePositionIndependent </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        ReplacementAssistant.OneToOne </td> <td> 
         
        True </td> </tr> 

        </table>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  ExtractFaceBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** enum for feature type being extracted */
            public: enum ExtractType
            {
                ExtractTypeFace/** type to extract face */,
                ExtractTypeRegionOfFaces/** type to extract region */,
                ExtractTypeBody/** type to extract body */
            };

            /** enum for scope of part*/
            public: enum ParentPartType
            {
                ParentPartTypeWorkPart/** intra part mode */,
                ParentPartTypeOtherPart/** inter part mode */,
                ParentPartTypePositionIndependent/** position independent mode */
            };

            /** enum for face option type */
            public: enum FaceOptionType
            {
                FaceOptionTypeSingleFace/** single face type*/,
                FaceOptionTypeAdjacentFaces/** adjacent face type */,
                FaceOptionTypeAllBodyFaces/** all faces of body option*/,
                FaceOptionTypeFaceChain/** selection intent option*/
            };

            /** type of resulting surface */
            public: enum FaceSurfaceType
            {
                FaceSurfaceTypeSameAsOriginal/** extracted surface is the same as the original surface */,
                FaceSurfaceTypePolynomialCubic/** extracted surface is a cubic polynomial approximation of the original surface */,
                FaceSurfaceTypeGeneralBSurface/** extracted surface is a B-surface approximation of the original surface */
            };

            /** enum for feature option type */
            public: enum FeatureOptionType
            {
                FeatureOptionTypeOneFeatureForAllBodies/** An option to create one extracted or linked body feature for all selected bodies as body collector */,
                FeatureOptionTypeSeparateFeatureForEachBody/** An option to create a separate extracted or linked body feature per single body */
            };

            private: ExtractFaceBuilderImpl * m_extractfacebuilder_impl;
            private: friend class  _ExtractFaceBuilderBuilder;
            protected: ExtractFaceBuilder();
            public: ~ExtractFaceBuilder();
            /**Returns  the type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::ExtractType Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetType
            (
                NXOpen::Features::ExtractFaceBuilder::ExtractType type /** type */ 
            );
            /**Returns  the source part type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::ParentPartType ParentPart
            (
            );
            /**Sets  the source part type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetParentPart
            (
                NXOpen::Features::ExtractFaceBuilder::ParentPartType parentPart /** parentpart */ 
            );
            /**Returns  the face option type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::FaceOptionType FaceOption
            (
            );
            /**Sets  the face option type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFaceOption
            (
                NXOpen::Features::ExtractFaceBuilder::FaceOptionType faceOptionType /** faceoptiontype */ 
            );
            /**Returns  the faces 
             <br>  @deprecated Deprecated in NX7.5.0.  Use @link NXOpen::Features::ExtractFaceBuilder::ObjectToExtract NXOpen::Features::ExtractFaceBuilder::ObjectToExtract@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX7.5.0.  Use NXOpen::Features::ExtractFaceBuilder::ObjectToExtract instead.") NXOpen::SelectFaceList * FacesToExtract
            (
            );
            /**Returns  a list of the extracted objects. The objects in the list are @link NXOpen::Face NXOpen::Face@endlink  objects. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * ObjectToExtract
            (
            );
            /**Returns  the face chain containing the faces to extract 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FaceChain
            (
            );
            /** Returns the face chain direction sense for a given face in the face chain 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetFaceChainDirectionSense
            (
                NXOpen::Face * face /** face */ 
            );
            /** Flip the face chain direction sense
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void FlipFaceChainDirectionSense
            (
                NXOpen::Face * face /** face */ 
            );
            /**Returns  the Replacement Assistant builder. Call Enter() to enter or re-enter into the mapping environment. 
                        Enter() needs to be executed before invoking any map creation or automatic mapping APIs.
                        The maps inferred internally (internal identifier reuse, inherited from parent and siblings) will
                        be populated when Enter() is executed for the first time after selecting a replacement entity.
                        Call Exit() to exit the mapping environment. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::GeometricUtilities::ReplAsstBuilder * ReplacementAssistant
            (
            );
            /**Returns  the option specifying whether to reverse the face normals for the extracted faces. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool FaceReverseDirection
            (
            );
            /**Sets  the option specifying whether to reverse the face normals for the extracted faces. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFaceReverseDirection
            (
                bool faceNormal /** facenormal */ 
            );
            /**Returns  the seed face for the face chain 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * SeedFace
            (
            );
            /**Returns  the option that specifies whether to reverse the face normals of the extracted faces relative to the seed face chain 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool SeedReverseDirection
            (
            );
            /**Sets  the option that specifies whether to reverse the face normals of the extracted faces relative to the seed face chain 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSeedReverseDirection
            (
                bool seedNormal /** seednormal */ 
            );
            /**Returns  the boundary faces 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * BoundaryFaces
            (
            );
            /**Returns  the traverse interior edges 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool TraverseInteriorEdges
            (
            );
            /**Sets  the traverse interior edges 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTraverseInteriorEdges
            (
                bool traverseInteriorEdges /** traverseinterioredges */ 
            );
            /**Returns  the use tangent angles 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseTangentEdgeAngles
            (
            );
            /**Sets  the use tangent angles 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUseTangentEdgeAngles
            (
                bool useTangentAngles /** usetangentangles */ 
            );
            /**Returns  the angle Tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle Tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the bodies 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::ExtractFaceBuilder::ExtractBodyCollector NXOpen::Features::ExtractFaceBuilder::ExtractBodyCollector@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::ExtractFaceBuilder::ExtractBodyCollector instead.") NXOpen::SelectObjectList * BodyToExtract
            (
            );
            /**Returns  the feature option type 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::FeatureOptionType FeatureOption
            (
            );
            /**Sets  the feature option type 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatureOption
            (
                NXOpen::Features::ExtractFaceBuilder::FeatureOptionType featureOptionType /** featureoptiontype */ 
            );
            /**Returns  a collection of bodies to extract 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ExtractBodyCollector
            (
            );
            /**Returns  the option to specify if the extracted faces should have the face normals reversed from the selected input bodies. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool BodyReverseDirection
            (
            );
            /**Sets  the option to specify if the extracted faces should have the face normals reversed from the selected input bodies. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetBodyReverseDirection
            (
                bool bodyNormal /** bodynormal */ 
            );
            /**Returns  the option that specifies whether the extract face operation is associative 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the option that specifies whether the extract face operation is associative 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the option specifying whether to fix the extract face operation at the current timestamp 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool FixAtCurrentTimestamp
            (
            );
            /**Sets  the option specifying whether to fix the extract face operation at the current timestamp 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFixAtCurrentTimestamp
            (
                bool fixAtTimestamp /** fixattimestamp */ 
            );
            /**Returns  the option to specify if holes should be deleted from the extracted faces 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool DeleteHoles
            (
            );
            /**Sets  the option to specify if holes should be deleted from the extracted faces 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDeleteHoles
            (
                bool deleteHoles /** deleteholes */ 
            );
            /**Returns  the option to specify if the original faces should be hidden 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool HideOriginal
            (
            );
            /**Sets  the option to specify if the original faces should be hidden 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetHideOriginal
            (
                bool hideOriginal /** hideoriginal */ 
            );
            /**Returns  the surface type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::FaceSurfaceType SurfaceType
            (
            );
            /**Sets  the surface type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSurfaceType
            (
                NXOpen::Features::ExtractFaceBuilder::FaceSurfaceType surfaceType /** surfacetype */ 
            );
            /**Returns  the option to specify that the extracted faces should be position independent 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool MakePositionIndependent
            (
            );
            /**Sets  the option to specify that the extracted faces should be position independent 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMakePositionIndependent
            (
                bool makePositionIndependent /** makepositionindependent */ 
            );
            /**Returns  the inherit display properties from source option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool InheritDisplayProperties
            (
            );
            /**Sets  the inherit display properties from source option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetInheritDisplayProperties
            (
                bool inheritDisplayProperties /** inheritdisplayproperties */ 
            );
            /** Commits the feature and set create on the fly flag  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::Feature * CommitCreateOnTheFly
            (
            );
            /** Prints wave browser type information about link 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void GetWaveLinkInformation
            (
                NXString* info /** queried wave information */,
                bool* xformExists /** true if there is a transform */,
                NXOpen::Point3d* xformOrigin /** transformation origin */,
                NXOpen::Matrix3x3* xformOrientation /** transformation matrix */,
                double* xformScale /** transformation scale */
            );
            /**Returns  the option specifying if the results from this builder should be associated
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * FrecAtTimeStamp
            (
            );
            /**Sets  the option specifying if the results from this builder should be associated
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFrecAtTimeStamp
            (
                NXOpen::Features::Feature * terminalFrec /** terminal frec */ 
            );
            /**Returns  the copy threads option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CopyThreads
            (
            );
            /**Sets  the copy threads option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCopyThreads
            (
                bool copyThreads /** copythreads */ 
            );
            /**Returns  the PSM Body Output option 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsPsmOutputBody
            (
            );
            /**Sets  the PSM Body Output option 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") */
            public: void SetPsmOutputBody
            (
                bool psmBodyOutput /** psmbodyoutput */ 
            );
            /** Causes the recreation of vector for help dir 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void RecreateVectorOfHelpDirVector
            (
            );
            /** Gets selected product interface objects 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetProductInterfaceObjects
            (
                std::vector<NXOpen::Assemblies::ProductInterface::InterfaceObject *> & selectedObjects /** items in list */
            );
            /** Sets selected product interface objects 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetProductInterfaceObjects
            (
                const std::vector<NXOpen::Assemblies::ProductInterface::InterfaceObject *> & selectedObjects /** items in list */
            );
            /**Returns  the source part occurrence 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * SourcePartOccurrence
            (
            );
            /**Sets  the source part occurrence 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSourcePartOccurrence
            (
                NXOpen::TaggedObject * sourcePartOcc /** sourcepartocc */ 
            );
            /** Gets source part occurrences 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetSourcePartOccurrences
            (
                std::vector<NXOpen::TaggedObject *> & sourcePartOccurrences /** sourcepartoccurrences */ 
            );
            /** Sets source part occurrences 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSourcePartOccurrences
            (
                const std::vector<NXOpen::TaggedObject *> & sourcePartOccurrences /** sourcepartoccurrences */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
