#ifndef NXOpen_FEATURES_STYLEDCORNERBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_STYLEDCORNERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_StyledCornerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_DepthSkewBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/GeometricUtilities_Rebuild.hxx>
#include <NXOpen/GeometricUtilities_TangentMagnitudeBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class StyledCornerBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class DepthSkewBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace GeometricUtilities
    {
        class Rebuild;
    }
    namespace GeometricUtilities
    {
        class TangentMagnitudeBuilder;
    }
    class ScCollector;
    namespace Features
    {
        class _StyledCornerBuilderBuilder;
        class StyledCornerBuilderImpl;
        /**
            Represents a @link NXOpen::Features::StyledCorner NXOpen::Features::StyledCorner@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateStyledCornerBuilder  NXOpen::Features::FeatureCollection::CreateStyledCornerBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BottomShapeControlMethods </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        CurveControl </td> <td> 
         
        TopBaseCurve </td> </tr> 

        <tr><td> 
         
        G0Tolerance </td> <td> 
         
        0.01 </td> </tr> 

        <tr><td> 
         
        G1Tolerance </td> <td> 
         
        0.1 </td> </tr> 

        <tr><td> 
         
        G2Tolerance </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        InteriorCurveType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        TopShapeControlMethods </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        TrimAndSewMethod </td> <td> 
         
        TrimBlends </td> </tr> 

        <tr><td> 
         
        TrimCurve1Type </td> <td> 
         
        TangentContinuous </td> </tr> 

        <tr><td> 
         
        TrimCurve2Type </td> <td> 
         
        TangentContinuous </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  StyledCornerBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Trim curve types */
            public: enum TrimCurveTypes
            {
                TrimCurveTypesTangentContinuous/** Tangent continuous type */,
                TrimCurveTypesLineProjection/** Line projection type */,
                TrimCurveTypesIsoparametric/** Isoparametric type */
            };

            /** Intertior curve type */
            public: enum InteriorCurveTypes
            {
                InteriorCurveTypesNone/** No interior curve */,
                InteriorCurveTypesIsoCurveU/** Iso u type */,
                InteriorCurveTypesIsoCurveV/** Iso v type */,
                InteriorCurveTypesIsoCurveUV/** Iso u and iso v type */
            };

            /** Curve control types */
            public: enum CurveControlTypes
            {
                CurveControlTypesTopBaseCurve/** Use top curve  */,
                CurveControlTypesBottomBridgeCurve/** Use bottom curve */,
                CurveControlTypesIsoCurveU/** Use iso u curve */,
                CurveControlTypesIsoCurveV/** Use iso v curve */
            };

            /** Shape control types */
            public: enum ShapeControlMethodsTypes
            {
                ShapeControlMethodsTypesNone/** No shape control */,
                ShapeControlMethodsTypesDepthAndSkew/** Depth and skew */,
                ShapeControlMethodsTypesTangentMagnitude/** Tangent and magnitude */,
                ShapeControlMethodsTypesTemplateBridgeCurve/** Template bridge curve */
            };

            /** Trim and attach method types */
            public: enum TrimAndSewMethodTypes
            {
                TrimAndSewMethodTypesNoTrim/** No trim */,
                TrimAndSewMethodTypesTrimBlends/** Trim all blends */,
                TrimAndSewMethodTypesTrimAll/** Trim blends and base wall */,
                TrimAndSewMethodTypesTrimAndAttachBlends/** Trim and attach blends */,
                TrimAndSewMethodTypesTrimAndAttachAll/** Trim and attach blends and base wall */
            };

            private: StyledCornerBuilderImpl * m_styledcornerbuilder_impl;
            private: friend class  _StyledCornerBuilderBuilder;
            protected: StyledCornerBuilder();
            public: ~StyledCornerBuilder();
            /**Returns  the input blend1 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * InputBlend1
            (
            );
            /**Returns  the input blend2 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * InputBlend2
            (
            );
            /**Returns  the input blend3 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * InputBlend3
            (
            );
            /**Returns  the base faces 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BaseFaces
            (
            );
            /**Returns  the trim curve1 type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StyledCornerBuilder::TrimCurveTypes TrimCurve1Type
            (
            );
            /**Sets  the trim curve1 type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetTrimCurve1Type
            (
                NXOpen::Features::StyledCornerBuilder::TrimCurveTypes trimCurve1Type /** trimcurve1type */ 
            );
            /**Returns  the trim curve2 type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StyledCornerBuilder::TrimCurveTypes TrimCurve2Type
            (
            );
            /**Sets  the trim curve2 type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetTrimCurve2Type
            (
                NXOpen::Features::StyledCornerBuilder::TrimCurveTypes trimCurve2Type /** trimcurve2type */ 
            );
            /**Returns  the interior curve type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StyledCornerBuilder::InteriorCurveTypes InteriorCurveType
            (
            );
            /**Sets  the interior curve type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetInteriorCurveType
            (
                NXOpen::Features::StyledCornerBuilder::InteriorCurveTypes interiorCurveType /** interiorcurvetype */ 
            );
            /**Returns  the curve control 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StyledCornerBuilder::CurveControlTypes CurveControl
            (
            );
            /**Sets  the curve control 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetCurveControl
            (
                NXOpen::Features::StyledCornerBuilder::CurveControlTypes curveControl /** curvecontrol */ 
            );
            /**Returns  the top curve start point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * TopCurveStartPoint
            (
            );
            /**Returns  the top curve end point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * TopCurveEndPoint
            (
            );
            /**Returns  the iso u curve start point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * IsoUCurveStartPoint
            (
            );
            /**Returns  the iso u curve end point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * IsoUCurveEndPoint
            (
            );
            /**Returns  the iso v curve start point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * IsoVCurveStartPoint
            (
            );
            /**Returns  the iso v curve end point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * IsoVCurveEndPoint
            (
            );
            /**Returns  the top shape control methods 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StyledCornerBuilder::ShapeControlMethodsTypes TopShapeControlMethods
            (
            );
            /**Sets  the top shape control methods 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetTopShapeControlMethods
            (
                NXOpen::Features::StyledCornerBuilder::ShapeControlMethodsTypes topShapeControlMethods /** topshapecontrolmethods */ 
            );
            /**Returns  the bottom shape control methods 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StyledCornerBuilder::ShapeControlMethodsTypes BottomShapeControlMethods
            (
            );
            /**Sets  the bottom shape control methods 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetBottomShapeControlMethods
            (
                NXOpen::Features::StyledCornerBuilder::ShapeControlMethodsTypes bottomShapeControlMethods /** bottomshapecontrolmethods */ 
            );
            /**Returns  the iso u shape control methods 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StyledCornerBuilder::ShapeControlMethodsTypes IsoUShapeControlMethods
            (
            );
            /**Sets  the iso u shape control methods 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetIsoUShapeControlMethods
            (
                NXOpen::Features::StyledCornerBuilder::ShapeControlMethodsTypes isoUShapeControlMethods /** isoushapecontrolmethods */ 
            );
            /**Returns  the iso v shape control methods 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StyledCornerBuilder::ShapeControlMethodsTypes IsoVShapeControlMethods
            (
            );
            /**Sets  the iso v shape control methods 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetIsoVShapeControlMethods
            (
                NXOpen::Features::StyledCornerBuilder::ShapeControlMethodsTypes isoVShapeControlMethods /** isovshapecontrolmethods */ 
            );
            /**Returns  the top depth skew 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DepthSkewBuilder * TopDepthSkew
            (
            );
            /**Returns  the iso u depth skew 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DepthSkewBuilder * IsoUDepthSkew
            (
            );
            /**Returns  the iso v depth skew 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DepthSkewBuilder * IsoVDepthSkew
            (
            );
            /**Returns  the top tangent magnitude 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::TangentMagnitudeBuilder * TopTangentMagnitude
            (
            );
            /**Returns  the bottom tangent magnitude 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::TangentMagnitudeBuilder * BottomTangentMagnitude
            (
            );
            /**Returns  the iso u tangent magnitude 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::TangentMagnitudeBuilder * IsoUTangentMagnitude
            (
            );
            /**Returns  the iso v tangent magnitude 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::TangentMagnitudeBuilder * IsoVTangentMagnitude
            (
            );
            /**Returns  the trim curve1 continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * TrimCurve1Continuity
            (
            );
            /**Returns  the trim curve2 continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * TrimCurve2Continuity
            (
            );
            /**Returns  the top base curve continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * TopBaseCurveContinuity
            (
            );
            /**Returns  the bottom bridge curve continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * BottomBridgeCurveContinuity
            (
            );
            /**Returns  the trim and sew method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StyledCornerBuilder::TrimAndSewMethodTypes TrimAndSewMethod
            (
            );
            /**Sets  the trim and sew method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetTrimAndSewMethod
            (
                NXOpen::Features::StyledCornerBuilder::TrimAndSewMethodTypes trimAndSewMethod /** trimandsewmethod */ 
            );
            /**Returns  the trim curve rebuild data 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Rebuild * TrimCurveRebuildData
            (
            );
            /**Returns  the base curve rebuild data 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Rebuild * BaseCurveRebuildData
            (
            );
            /**Returns  the g0 tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double G0Tolerance
            (
            );
            /**Sets  the g0 tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetG0Tolerance
            (
                double g0Tolerance /** g0tolerance */ 
            );
            /**Returns  the g1 tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double G1Tolerance
            (
            );
            /**Sets  the g1 tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetG1Tolerance
            (
                double g1Tolerance /** g1tolerance */ 
            );
            /**Returns  the g2 tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double G2Tolerance
            (
            );
            /**Sets  the g2 tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetG2Tolerance
            (
                double g2Tolerance /** g2tolerance */ 
            );
            /** Gets the path in current position and sets it in builder. Call this before using the OnPathDimensionBuilder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateOnPathDimPath
            (
                NXOpen::Features::StyledCornerBuilder::CurveControlTypes curveControlOption /** Determines which OnPathDimensionBuilder to update */,
                int startEndIndex /** 0=start, 1=end */
            );
            /** Reset to triangular corner 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ResetToTriangularCorner
            (
            );
            /** Set number of sides of the corner 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetNumCornerSides
            (
                int numSides /** 3 or 4 */
            );
            /** Updates corner data. Various parameters are involved in the creation of corner surface. 
                        When all the parameters are used with their initial values, this method needs to be called 
                        to preprocess internal corner data in order to create corner surface. When a parameter is changed, 
                        this method needs to be called in order to update internal corner data that was preprocessed. 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateCornerData
            (
                bool inputFaceChanged /** If blend or base face changed  */,
                bool resetToTriangleCorner /** If resetting to 3-sided corner */
            );
            /**Returns  the flag indicating to apply to all constraints 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeAllBoundaryConstraints
            (
            );
            /**Sets  the flag indicating to apply to all constraints 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetChangeAllBoundaryConstraints
            (
                bool changeAllBoundaryConstraints /** changeallboundaryconstraints */ 
            );
            /**Returns  the flag indicating input face change 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: bool InputChanged
            (
            );
            /**Sets  the flag indicating input face change 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetInputChanged
            (
                bool inputChanged /** inputchanged */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
