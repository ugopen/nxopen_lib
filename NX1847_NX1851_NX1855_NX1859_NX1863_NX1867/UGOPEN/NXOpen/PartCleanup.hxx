#ifndef NXOpen_PARTCLEANUP_HXX_INCLUDED
#define NXOpen_PARTCLEANUP_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PartCleanup.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class PartCleanup;
    class PartCleanupImpl;
    /** Provides utilities to to eliminate certain inaccessible
    objects from the part file. To use this utility, first create an instance
    of this class by calling @link Session::NewPartCleanup Session::NewPartCleanup@endlink .
    Then, set any part cleanup actions that you wish to be performed by setting
    the appropriate properties on this class. By default, all the properties are
    set to "false" or "none". Once all the properties are set, then call the
    @link PartCleanup::DoCleanup PartCleanup::DoCleanup@endlink  method to actually perform
    the cleanup action.

    For more information on what the various part cleanup options do, see the
    Part Cleanup Options Dialog section of the Gateway Help.

     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  PartCleanup : public NXOpen::TransientObject
    {
        /** Which parts to clean up */
        public: enum CleanupParts
        {
            CleanupPartsWork/** clean up the work part only */,
            CleanupPartsComponents/** clean up the work part and
                                                              its components */,
            CleanupPartsAll/** clean up all loaded parts */
        };

        /** Which empty groups to clean up */
        public: enum DeleteGroups
        {
            DeleteGroupsNone/** delete none of the empty groups */,
            DeleteGroupsUnnamed/** delete only the unnamed empty groups */,
            DeleteGroupsAll/** delete all the empty groups */
        };

        /** Assembly display clean up action */
        public: enum ResetComponentDisplayAction
        {
            ResetComponentDisplayActionNo/** do nothing */,
            ResetComponentDisplayActionRemoveRedundantChanges/** only remove changes that will not affect current display. */,
            ResetComponentDisplayActionRemoveAllChanges/** remove all changes */
        };

        private: PartCleanupImpl * m_partcleanup_impl;
        /// \cond NX_NO_DOC 
        public: explicit PartCleanup(void *ptr);
        /// \endcond 
        /** Free resources associated with the instance. After this method
            is called, it is illegal to use the object.  In .NET, this method
            is automatically called when the object is deleted by the garbage
            collector. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~PartCleanup();
        /**Sets  the option that specifies what parts will be cleaned up when
            @link PartCleanup::DoCleanup PartCleanup::DoCleanup@endlink  is called. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPartsToCleanup
        (
            NXOpen::PartCleanup::CleanupParts cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies what parts will be cleaned up when
            @link PartCleanup::DoCleanup PartCleanup::DoCleanup@endlink  is called. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartCleanup::CleanupParts PartsToCleanup
        (
        );
        /**Sets  the option that specifies what empty groups should be
            deleted. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetGroupsToDelete
        (
            NXOpen::PartCleanup::DeleteGroups cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies what empty groups should be
            deleted. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartCleanup::DeleteGroups GroupsToDelete
        (
        );
        /**Sets  the option that specifies whether to turn off highlighting for
            all displayable objects in the displayed part. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTurnOffHighlighting
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to turn off highlighting for
            all displayable objects in the displayed part. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool TurnOffHighlighting
        (
        );
        /**Sets  the option that specifies whether to delete all extraneous
            objects from the work part 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDeleteUnusedObjects
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to delete all extraneous
            objects from the work part 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool DeleteUnusedObjects
        (
        );
        /**Sets  the option that specifies whether to delete expressions that are
            not used in the part. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDeleteUnusedExpressions
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to delete expressions that are
            not used in the part. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool DeleteUnusedExpressions
        (
        );
        /**Sets  the option that specifies whether to perform solid cleanup. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCleanupFeatureData
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to perform solid cleanup. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool CleanupFeatureData
        (
        );
        /**Sets  the option that specifies whether to fix off-plane sketch curves. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFixOffplaneSketchCurves
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to fix off-plane sketch curves. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool FixOffplaneSketchCurves
        (
        );
        /**Sets  the option that specifies whether to cleanup mating data. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCleanupMatingData
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to cleanup mating data. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool CleanupMatingData
        (
        );
        /**Sets  the option that specifies whether to cleanup assembly constraints. 
         <br>  Created in NX7.5.5.  <br>  
         <br> License requirements : None */
        public: void SetCleanupAssemblyConstraints
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to cleanup assembly constraints. 
         <br>  Created in NX7.5.5.  <br>  
         <br> License requirements : None */
        public: bool CleanupAssemblyConstraints
        (
        );
        /**Sets  the option that specifies whether to delete or fix any corrupt
            internal CAM objects. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCleanupCAMObjects
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to delete or fix any corrupt
            internal CAM objects. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool CleanupCAMObjects
        (
        );
        /**Sets  the option that specifies whether to perform drafting cleanup. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCleanupDraftingObjects
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to perform drafting cleanup. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool CleanupDraftingObjects
        (
        );
        /**Sets  the option that specifies whether to remove character fonts
            that are not used in any drafting text in the current part. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDeleteUnusedFonts
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to remove character fonts
            that are not used in any drafting text in the current part. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool DeleteUnusedFonts
        (
        );
        /**Sets  the option that specifies whether to remove character fonts
            that are not used in any drafting text in the current part. 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDeleteUnusedUnits
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to remove character fonts
            that are not used in any drafting text in the current part. 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: bool DeleteUnusedUnits
        (
        );
        /**Sets  the option that specifies whether to remove assembly-specific
            geometry in component parts. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetResetComponentDisplay
        (
            NXOpen::PartCleanup::ResetComponentDisplayAction cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to remove assembly-specific
            geometry in component parts. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartCleanup::ResetComponentDisplayAction ResetComponentDisplay
        (
        );
        /**Sets  the option that specifies whether to delete all spreadsheets from
            the part file. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDeleteSpreadSheetData
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to delete all spreadsheets from
            the part file. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool DeleteSpreadSheetData
        (
        );
        /**Sets  the option that specifies whether to delete Visual Editor data
            from the part file. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDeleteVisualEditorData
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to delete Visual Editor data
            from the part file. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool DeleteVisualEditorData
        (
        );
        /**Sets  the option that specifies whether to delete all materials
            from the part file. 
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: void SetDeleteMaterials
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to delete all materials
            from the part file. 
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: bool DeleteMaterials
        (
        );
        /**Sets  the option that specifies whether to delete duplicate light source objects
            from the part file. 
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: void SetDeleteDuplicateLights
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to delete duplicate light source objects
            from the part file. 
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: bool DeleteDuplicateLights
        (
        );
        /**Sets  the option that specifies whether or not to delete all inter-part links
                where one or more components in that inter-part link have been removed. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDeleteBrokenInterpartLinks
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether or not to delete all inter-part links
                where one or more components in that inter-part link have been removed. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool DeleteBrokenInterpartLinks
        (
        );
        /** Actually performs the part cleanup operation according to the
            properties set on this object 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void DoCleanup
        (
        );
        /** Resets all the properties back to the default values (i.e. everything
            turned off). 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Reset
        (
        );
        /**Sets  the option which determines if the routing part cleanup option should be performed.
         <br>  Created in NX7.5.4.  <br>  
         <br> License requirements : None */
        public: void SetCleanupRoutingData
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option which determines if the routing part cleanup option should be performed.
         <br>  Created in NX7.5.4.  <br>  
         <br> License requirements : None */
        public: bool CleanupRoutingData
        (
        );
        /**Sets  the option that specifies whether to delete all invalid user attributes
            from the part file. 
         <br>  Created in NX8.0.3.  <br>  
         <br> License requirements : None */
        public: void SetDeleteInvalidAttributes
        (
            bool cleanupOption /** cleanup option */ 
        );
        /**Returns  the option that specifies whether to delete all invalid user attributes
            from the part file. 
         <br>  Created in NX8.0.3.  <br>  
         <br> License requirements : None */
        public: bool DeleteInvalidAttributes
        (
        );
        /**Sets  the option which determines if the motion cleanup option should be performed.
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCleanupMotionData
        (
            bool cleanupOption /** cleanupoption */ 
        );
        /**Returns  the option which determines if the motion cleanup option should be performed.
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: bool CleanupMotionData
        (
        );
        /**Sets  the option that specifies whether to delete all unused edge/face references in extract features
            from the part file. 
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        public: void SetDeleteUnusedExtractReferences
        (
            bool opt /** opt */ 
        );
        /**Returns  the option that specifies whether to delete all unused edge/face references in extract features
            from the part file. 
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        public: bool DeleteUnusedExtractReferences
        (
        );
        /**Sets  the option that specifies if the part family data cleanup should be performed.
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCleanupPartFamilyData
        (
            bool cleanupOption /** cleanupoption */ 
        );
        /**Returns  the option that specifies if the part family data cleanup should be performed.
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: bool CleanupPartFamilyData
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
