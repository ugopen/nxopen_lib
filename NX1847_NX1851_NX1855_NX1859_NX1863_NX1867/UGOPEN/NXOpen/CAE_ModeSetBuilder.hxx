#ifndef NXOpen_CAE_MODESETBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODESETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModeSetBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AlternateFemRepresentationSourceBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ModeSetBuilder;
    }
    namespace CAE
    {
        class AlternateFemRepresentationSourceBuilder;
    }
    namespace CAE
    {
        class _ModeSetBuilderBuilder;
        class ModeSetBuilderImpl;
        /**  @brief  Represents a @link NXOpen::CAE::ModeSetBuilder NXOpen::CAE::ModeSetBuilder@endlink  
            which can be used to create ModeSets.  

           <br> Not support KF.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ModeSetBuilder : public NXOpen::CAE::AlternateFemRepresentationSourceBuilder
        {
            private: ModeSetBuilderImpl * m_modesetbuilder_impl;
            private: friend class  _ModeSetBuilderBuilder;
            protected: ModeSetBuilder();
            public: ~ModeSetBuilder();
            /** Get the mode sets available in the source file of the @link NXOpen::CAE::ModeSet NXOpen::CAE::ModeSet@endlink    @return  The available mode set names. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXString> GetAvailableModesets
            (
            );
            /** Select the mode set that should be used. 
                    The name should be one retrieved from @link CAE::ModeSetBuilder::GetAvailableModesets CAE::ModeSetBuilder::GetAvailableModesets@endlink . 
                    Should be called if @link CAE::ModeSetBuilder::GetAvailableModesets CAE::ModeSetBuilder::GetAvailableModesets@endlink  returns several mode sets.
                    This method is mandatory. If this method is not called, the mode set name corresponding to the empty string will be selected 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SelectModeset
            (
                const NXString & modeSetName /** The mode set name. */
            );
            /** Select the mode set that should be used. 
                    The name should be one retrieved from @link CAE::ModeSetBuilder::GetAvailableModesets CAE::ModeSetBuilder::GetAvailableModesets@endlink . 
                    Should be called if @link CAE::ModeSetBuilder::GetAvailableModesets CAE::ModeSetBuilder::GetAvailableModesets@endlink  returns several mode sets.
                    This method is mandatory. If this method is not called, the mode set name corresponding to the empty string will be selected 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SelectModeset
            (
                const char * modeSetName /** The mode set name. */
            );
            /** Allow the modes to be renumbered in case there are modes with the same index in the modeset 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetModesCanBeRenumbered
            (
                bool allowRenumbering /** Allow renumbering flag. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
