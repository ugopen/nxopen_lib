#ifndef NXOpen_DIE_FLANGETASKBUILDER_HXX_INCLUDED
#define NXOpen_DIE_FLANGETASKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_FlangeTaskBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class FlangeTaskBuilder;
    }
    class Body;
    class DisplayableObject;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class ILocation;
    class IProfile;
    class Point;
    class View;
    namespace Die
    {
        class _FlangeTaskBuilderBuilder;
        class FlangeTaskBuilderImpl;
        /** Represents a Flange Task feature builder.  <br> This sub feature is created via the main feature builder.  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  FlangeTaskBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Settings for the cam type of the flange task. */
            public: enum CamTypes
            {
                CamTypesDirect/** Direct */,
                CamTypesAerialConventional/** Aerial Cam - Conventional Fill */,
                CamTypesBaseConventional/** Base Mounted Cam - Conventional Fill */,
                CamTypesAerialRotary/** Aerial Cam - Rotary Fill */,
                CamTypesBellCrank/** Bell Crank */
            };

            /** Settings for the springback type of the flange task. */
            public: enum SpringbackTypes
            {
                SpringbackTypesConstant/** Constant */,
                SpringbackTypesLaw/** Law Controlled */
            };

            /** Settings for the pierce type of the flange task. */
            public: enum PierceTypes
            {
                PierceTypesGage/** Use Gage tolerance. */,
                PierceTypesCritical/** Use Critical tolerance. */,
                PierceTypesStandard/** Use Standard tolerance. */
            };

            private: FlangeTaskBuilderImpl * m_flangetaskbuilder_impl;
            private: friend class  _FlangeTaskBuilderBuilder;
            protected: FlangeTaskBuilder();
            public: ~FlangeTaskBuilder();
            /**Returns  the tipped product of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Features::Feature * TippedProduct
            (
            );
            /**Sets  the tipped product of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTippedProduct
            (
                NXOpen::Features::Feature * tippedProduct /** The tip of the operation where the flange
                                                                                   task resides. */
            );
            /** Sets the region bounds of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetRegionBounds
            (
                NXOpen::Die::DirectionOption direction /** Profile direction */,
                const std::vector<NXOpen::IProfile *> & profileEntries /** Profile entries that make up the 
                                                                                                              boundary of the flange task */
            );
            /** Gets the region bounds of the flange task  @return  Profile entries that make up the 
                                                                                                       boundary of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::IProfile *> GetRegionBounds
            (
                NXOpen::Die::DirectionOption* direction /** Profile direction */
            );
            /**Returns  the keep point in the region of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Point * PointInRegion
            (
            );
            /**Sets  the keep point in the region of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetPointInRegion
            (
                NXOpen::Point * pointInRegion /** point in region */ 
            );
            /**Returns  the cam direction of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ILocation * CamDirection
            (
            );
            /**Sets  the cam direction of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCamDirection
            (
                NXOpen::ILocation * camDirection /** cam direction */ 
            );
            /** Sets the shape detail of the flange task for profiles 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetShapeDetail
            (
                NXOpen::Die::DirectionOption direction /** Profile direction */,
                const std::vector<NXOpen::IProfile *> & profileEntries /** Profile entries */
            );
            /** Gets the shape detail of the flange task for profiles  @return  Profile entries 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::IProfile *> GetShapeDetail
            (
                NXOpen::Die::DirectionOption* direction /** Profile direction */
            );
            /** Sets the shape detail of the form task for bodies 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetShapeDetail
            (
                const std::vector<NXOpen::Body *> & bodies /** bodies */
            );
            /** Gets the shape detail of the form task for bodies  @return  bodies 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::Body *> GetShapeDetail
            (
            );
            /** Sets the associative objects of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAssociativeObjects
            (
                const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
            );
            /** Gets the associative objects of the flange task  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::DisplayableObject *> GetAssociativeObjects
            (
            );
            /** Sets the camera views of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraViews
            (
                const std::vector<NXOpen::View *> & objects /** objects */ 
            );
            /** Gets the camera views of the flange task  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::View *> GetCameraViews
            (
            );
            /**Returns  the finish operation of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool FinishOperation
            (
            );
            /**Sets  the finish operation of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFinishOperation
            (
                bool finishOperation /** finish operation */ 
            );
            /**Returns  the pierce and extrude setting of the flange task. 
                    True indicates that the flange task is a pierce and extrude type. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool PierceAndExtrude
            (
            );
            /**Sets  the pierce and extrude setting of the flange task. 
                    True indicates that the flange task is a pierce and extrude type. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetPierceAndExtrude
            (
                bool pierceAndExtrude /** pierce and extrude */ 
            );
            /**Returns  the display rotated items setting of the flange task. 
                    True indicates that the reference point and cam direction objects should be created and displayed in the die face feature. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool DisplayRotatedItems
            (
            );
            /**Sets  the display rotated items setting of the flange task. 
                    True indicates that the reference point and cam direction objects should be created and displayed in the die face feature. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDisplayRotatedItems
            (
                bool displaySetting /** display setting */ 
            );
            /**Returns  the pierce type of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::FlangeTaskBuilder::PierceTypes PierceType
            (
            );
            /**Sets  the pierce type of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetPierceType
            (
                NXOpen::Die::FlangeTaskBuilder::PierceTypes pierceType /** pierce type */ 
            );
            /**Returns  the cam type of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::FlangeTaskBuilder::CamTypes CamType
            (
            );
            /**Sets  the cam type of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCamType
            (
                NXOpen::Die::FlangeTaskBuilder::CamTypes camType /** cam type */ 
            );
            /**Returns  the springback type of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::FlangeTaskBuilder::SpringbackTypes SpringbackType
            (
            );
            /**Sets  the springback type of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetSpringbackType
            (
                NXOpen::Die::FlangeTaskBuilder::SpringbackTypes springbackType /** springback type */ 
            );
            /**Returns  the springback angle of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXString SpringbackAngle
            (
            );
            /**Sets  the springback angle of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetSpringbackAngle
            (
                const NXString & springbackAngle /** expression string */
            );
            /**Sets  the springback angle of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            void SetSpringbackAngle
            (
                const char * springbackAngle /** expression string */
            );
            /**Returns  the angle tolerance of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angle tolerance */ 
            );
            /**Returns  the distance tolerance of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distance tolerance */ 
            );
            /** Sets the detailed description of the flange task 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDetails
            (
                std::vector<NXString> & strings /** detail strings */
            );
            /** Gets the detailed description of the flange task  @return  detail strings 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetDetails
            (
            );
            /** Gets the camera layer settings and xmlp data  @return  1 layer setting string for each camera object. 
                                                                           the string needs to be 256 characters long 
                                                                           (one for each user layer) with either 0 for off
                                                                           or 1 for on. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetCameraLayerAndXmlp
            (
                std::vector<NXString> & xmlpData /** xmlp data */
            );
            /** Sets the camera layer settings and xmlp data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraLayerAndXmlp
            (
                std::vector<NXString> & layerSettings /** 1 layer setting string for each camera object. 
                                                                               the string needs to be 256 characters long 
                                                                               (one for each user layer) with either 0 for off
                                                                               or 1 for on. */,
                std::vector<NXString> & xmlpData /** xmlp data */
            );
            /** Sets the names of the camera 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraNames
            (
                std::vector<NXString> & strings /** each string contains the name of a camera object */
            );
            /** Gets the names of the camera  @return  each string contains the name of a camera object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetCameraNames
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
