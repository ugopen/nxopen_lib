#ifndef NXOpen_GATEWAY_IMAGEEXPORTBUILDER_HXX_INCLUDED
#define NXOpen_GATEWAY_IMAGEEXPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Gateway_ImageExportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Gateway
    {
        class ImageExportBuilder;
    }
    class Builder;
    namespace Gateway
    {
        class _ImageExportBuilderBuilder;
        class ImageExportBuilderImpl;
        /**
             @brief 
                Captures the image in the active graphics window (or in a rectangular region of the active
                graphics window), and then exports/saves the image in a file of a specified format.
             

         
            
                This class can be used to export an image file that contains the contents of the
                active graphics window.  The image may be limited to a rectangular region of the display
                via @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode@endlink .
                @link Gateway::ImageExportBuilder::FileFormats Gateway::ImageExportBuilder::FileFormats@endlink  enumerates
                the file formats exported images may be saved in.
                The background of the exported image may be changed to any
                of the options available in
                @link Gateway::ImageExportBuilder::BackgroundOptions Gateway::ImageExportBuilder::BackgroundOptions@endlink .
                After configuring the image export, an image file is saved by calling the Commit
                method.
            
             <br> To create a new instance of this class, use @link NXOpen::UI::CreateImageExportBuilder  NXOpen::UI::CreateImageExportBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BackgroundOption </td> <td> 
         
        Original </td> </tr> 

        <tr><td> 
         
        FileFormat </td> <td> 
         
        Png </td> </tr> 

        </table>  

         <br>  Created in NX12.0.1.  <br>  
        */
        class NXOPENUICPPEXPORT  ImageExportBuilder : public NXOpen::Builder
        {
            /**
                     @brief 
                        The format of the exported image file.
                     

             
                    */
            public: enum FileFormats
            {
                FileFormatsPng/** PNG File Format */,
                FileFormatsJpg/** JPG File Format */,
                FileFormatsGif/** GIF File Format */,
                FileFormatsTiff/** Compressed TIFF File Format*/,
                FileFormatsBmp/** BMP File Format (Windows Only) */,
                FileFormatsXwd/** XWD File Format (Unix Only) */
            };

            /**
                     @brief 
                        The background style of the captured image.
                     

             
                    */
            public: enum BackgroundOptions
            {
                BackgroundOptionsOriginal/** Use the currently displayed background */,
                BackgroundOptionsCustomColor/** Use the solid color set by @link Gateway::ImageExportBuilder::SetCustomBackgroundColor Gateway::ImageExportBuilder::SetCustomBackgroundColor@endlink  */,
                BackgroundOptionsTransparent/** Use a transparent background (only available in PNG and TIFF file formats) */
            };

            private: ImageExportBuilderImpl * m_imageexportbuilder_impl;
            private: friend class  _ImageExportBuilderBuilder;
            protected: ImageExportBuilder();
            public: ~ImageExportBuilder();
            /**Returns 
                     @brief 
                        a boolean value that, if true, indicates that a rectangular region of the graphics window will be captured, rather than the entire graphics window.
                     

             
                    
                        The region used to generate the image file is defined using @link Gateway::ImageExportBuilder::SetRegionTopLeftPoint Gateway::ImageExportBuilder::SetRegionTopLeftPoint@endlink ,
                        @link Gateway::ImageExportBuilder::SetRegionWidth Gateway::ImageExportBuilder::SetRegionWidth@endlink  and @link Gateway::ImageExportBuilder::SetRegionHeight Gateway::ImageExportBuilder::SetRegionHeight@endlink .
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool RegionMode
            (
            );
            /**Sets 
                     @brief 
                        a boolean value that, if true, indicates that a rectangular region of the graphics window will be captured, rather than the entire graphics window.
                     

             
                    
                        The region used to generate the image file is defined using @link Gateway::ImageExportBuilder::SetRegionTopLeftPoint Gateway::ImageExportBuilder::SetRegionTopLeftPoint@endlink ,
                        @link Gateway::ImageExportBuilder::SetRegionWidth Gateway::ImageExportBuilder::SetRegionWidth@endlink  and @link Gateway::ImageExportBuilder::SetRegionHeight Gateway::ImageExportBuilder::SetRegionHeight@endlink .
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetRegionMode
            (
                bool regionMode /** regionmode */ 
            );
            /**
                     @brief 
                        Returns the top left point of the region of the graphics window that will be captured if
                        @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  is true.
                     

             
                    
                        This value is a window coordinate.  See
                        @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  for more information on capturing
                        a region of the graphics window.
                    
                     @return  Array of 2 int values representing the x and y window coordinate of the top left point of the captured region 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetRegionTopLeftPoint
            (
            );
            /**
                     @brief 
                        Sets the top left point of the region of the graphics window that will be captured if
                        @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  is true.
                     

             
                    
                        This value is a window coordinate.  See
                        @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  for more information on capturing
                        a region of the graphics window.
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetRegionTopLeftPoint
            (
                const std::vector<int> & regionTopLeftPoint /** Array of 2 int values representing the x and y window coordinate of the top left point of the captured region */
            );
            /**Returns 
                     @brief 
                        the width of the region of the graphics window that will be captured if
                        @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  is true.
                     

             
                    
                        See @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  for
                        more information on capturing a region of the graphics window.
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: int RegionWidth
            (
            );
            /**Sets 
                     @brief 
                        the width of the region of the graphics window that will be captured if
                        @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  is true.
                     

             
                    
                        See @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  for
                        more information on capturing a region of the graphics window.
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetRegionWidth
            (
                int regionWidth /** regionwidth */ 
            );
            /**Returns 
                     @brief 
                        the height of the region of the graphics window that will be captured if
                        @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  is true.
                     

             
                    
                        See @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  for
                        more information on capturing a region of the graphics window.
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: int RegionHeight
            (
            );
            /**Sets 
                     @brief 
                        the height of the region of the graphics window that will be captured if
                        @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  is true.
                     

             
                    
                        See @link Gateway::ImageExportBuilder::RegionMode Gateway::ImageExportBuilder::RegionMode @endlink and @link Gateway::ImageExportBuilder::SetRegionMode Gateway::ImageExportBuilder::SetRegionMode @endlink  for
                        more information on capturing a region of the graphics window.
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetRegionHeight
            (
                int regionHeight /** regionheight */ 
            );
            /**Returns 
                     @brief 
                        the file format of the exported image file.
                     

             
                    
                        The exported image may be stored in any of the file formats enumerated in
                        @link Gateway::ImageExportBuilder::FileFormats Gateway::ImageExportBuilder::FileFormats@endlink .  Please note that transparency is only
                        available in TIFF and PNG formats.
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Gateway::ImageExportBuilder::FileFormats FileFormat
            (
            );
            /**Sets 
                     @brief 
                        the file format of the exported image file.
                     

             
                    
                        The exported image may be stored in any of the file formats enumerated in
                        @link Gateway::ImageExportBuilder::FileFormats Gateway::ImageExportBuilder::FileFormats@endlink .  Please note that transparency is only
                        available in TIFF and PNG formats.
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetFileFormat
            (
                NXOpen::Gateway::ImageExportBuilder::FileFormats fileFormat /** fileformat */ 
            );
            /**Returns 
                     @brief 
                        the full path of the exported image file.
                     

             
                    
                        This value should be set to the desired destination of the exported image file.
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXString FileName
            (
            );
            /**Sets 
                     @brief 
                        the full path of the exported image file.
                     

             
                    
                        This value should be set to the desired destination of the exported image file.
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetFileName
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets 
                     @brief 
                        the full path of the exported image file.
                     

             
                    
                        This value should be set to the desired destination of the exported image file.
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            void SetFileName
            (
                const char * fileName /** filename */ 
            );
            /**Returns 
                     @brief 
                        the background style used when capturing the image.
                     

             
                    
                        The image may be captured with any of the background styles enumerated in
                        @link Gateway::ImageExportBuilder::BackgroundOptions Gateway::ImageExportBuilder::BackgroundOptions@endlink .  If the Custom Color background
                        option is used, the background color may be specified with
                        @link Gateway::ImageExportBuilder::SetCustomBackgroundColor Gateway::ImageExportBuilder::SetCustomBackgroundColor@endlink .
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Gateway::ImageExportBuilder::BackgroundOptions BackgroundOption
            (
            );
            /**Sets 
                     @brief 
                        the background style used when capturing the image.
                     

             
                    
                        The image may be captured with any of the background styles enumerated in
                        @link Gateway::ImageExportBuilder::BackgroundOptions Gateway::ImageExportBuilder::BackgroundOptions@endlink .  If the Custom Color background
                        option is used, the background color may be specified with
                        @link Gateway::ImageExportBuilder::SetCustomBackgroundColor Gateway::ImageExportBuilder::SetCustomBackgroundColor@endlink .
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetBackgroundOption
            (
                NXOpen::Gateway::ImageExportBuilder::BackgroundOptions backgroundOption /** backgroundoption */ 
            );
            /**
                     @brief 
                        Returns the background color the image will be captured with if
                        @link Gateway::ImageExportBuilder::BackgroundOption Gateway::ImageExportBuilder::BackgroundOption @endlink and @link Gateway::ImageExportBuilder::SetBackgroundOption Gateway::ImageExportBuilder::SetBackgroundOption @endlink  is set to Custom Color.
                     

             
                    
                        
                    
                     @return  Array of 3 RGB values, each between 0 and 1 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetCustomBackgroundColor
            (
            );
            /**
                     @brief 
                        Sets the background color the image will be captured with if
                        @link Gateway::ImageExportBuilder::BackgroundOption Gateway::ImageExportBuilder::BackgroundOption @endlink and @link Gateway::ImageExportBuilder::SetBackgroundOption Gateway::ImageExportBuilder::SetBackgroundOption @endlink  is set to Custom Color.
                     

             
                    
                        
                    
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCustomBackgroundColor
            (
                const std::vector<double> & customBackgroundColor /** Array of 3 RGB values, each between 0 and 1 */
            );
            /**Returns 
                     @brief 
                        a boolean value that, if true, indicates the image will be captured with antialiasing disabled and edge emphasis enabled.
                     

             
                    
                        When capturing an image with many edges, such as a wireframe view of a part, antialiasing may cause thin edges to blur with the
                        background of the image.  This effect may be particularly noticeable when using a transparent background.  Disabling antialiasing
                        and enabling edge emphasis helps to eliminate this blurring at the cost of a more pixelated image.
                        
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool EnhanceEdges
            (
            );
            /**Sets 
                     @brief 
                        a boolean value that, if true, indicates the image will be captured with antialiasing disabled and edge emphasis enabled.
                     

             
                    
                        When capturing an image with many edges, such as a wireframe view of a part, antialiasing may cause thin edges to blur with the
                        background of the image.  This effect may be particularly noticeable when using a transparent background.  Disabling antialiasing
                        and enabling edge emphasis helps to eliminate this blurring at the cost of a more pixelated image.
                        
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetEnhanceEdges
            (
                bool enhanceEdges /** enhanceedges */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
