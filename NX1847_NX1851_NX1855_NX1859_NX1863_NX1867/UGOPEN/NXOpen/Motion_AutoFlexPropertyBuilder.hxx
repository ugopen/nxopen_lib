#ifndef NXOpen_MOTION_AUTOFLEXPROPERTYBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_AUTOFLEXPROPERTYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_AutoFlexPropertyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class AutoFlexPropertyBuilder;
    }
    class Builder;
    class DisplayableObject;
    class Expression;
    namespace Motion
    {
        class Link;
    }
    namespace Motion
    {
        class MotionObject;
    }
    namespace Motion
    {
        class SelectLink;
    }
    class PhysicalMaterial;
    class SelectNXObjectList;
    namespace Motion
    {
        class _AutoFlexPropertyBuilderBuilder;
        class AutoFlexPropertyBuilderImpl;
        /** Represents a builder of automatic flex property object  <br> To create a new instance of this class, use @link NXOpen::Motion::AutoFlexPropertyCollection::CreateAutoFlexPropertyBuilder  NXOpen::Motion::AutoFlexPropertyCollection::CreateAutoFlexPropertyBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        EnableFrequencyRangeLower </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        EnableFrequencyRangeUpper </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        EnableNormalModeCount </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        EnableStrain </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        EnableStress </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        NormalModeCount </td> <td> 
         
        10 </td> </tr> 

        <tr><td> 
         
        ProcessOption </td> <td> 
         
        Automatic </td> </tr> 

        <tr><td> 
         
        SolverOption </td> <td> 
         
        NXNastran </td> </tr> 

        </table>  

         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  AutoFlexPropertyBuilder : public NXOpen::Builder
        {
            /** AutoFlexProperty process type */
            public: enum ProcessType
            {
                ProcessTypeAutomatic/** automatic */ ,
                ProcessTypeInteractive/** interactive */ 
            };

            /** AutoFlexProperty solver type */
            public: enum SolverType
            {
                SolverTypeNXNastran/** nxnastran */ 
            };

            private: AutoFlexPropertyBuilderImpl * m_autoflexpropertybuilder_impl;
            private: friend class  _AutoFlexPropertyBuilderBuilder;
            protected: AutoFlexPropertyBuilder();
            public: ~AutoFlexPropertyBuilder();
            /**Returns  the selection link 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::SelectLink * Link
            (
            );
            /**Returns  the selection geometry 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * Geometry
            (
            );
            /**Returns  the thickness expression 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Thickness
            (
            );
            /**Returns  the material 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PhysicalMaterial * Material
            (
            );
            /**Sets  the material 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaterial
            (
                NXOpen::PhysicalMaterial * material /** material */ 
            );
            /**Returns  the toggle of normal mode count 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableNormalModeCount
            (
            );
            /**Sets  the toggle of normal mode count 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableNormalModeCount
            (
                bool enableNormalModeCount /** enablenormalmodecount */ 
            );
            /**Returns  the normal mode count 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int NormalModeCount
            (
            );
            /**Sets  the normal mode count 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetNormalModeCount
            (
                int normalModeCount /** normalmodecount */ 
            );
            /**Returns  the toggle of lower frequency range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableFrequencyRangeLower
            (
            );
            /**Sets  the toggle of lower frequency range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableFrequencyRangeLower
            (
                bool enableFrequencyRangeLower /** enablefrequencyrangelower */ 
            );
            /**Returns  the frequency range lower expression
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FrequencyRangeLower
            (
            );
            /**Returns  the toggle of upper frequency range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableFrequencyRangeUpper
            (
            );
            /**Sets  the toggle of upper frequency range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableFrequencyRangeUpper
            (
                bool enableFrequencyRangeUpper /** enablefrequencyrangeupper */ 
            );
            /**Returns  the frequency range upper expression
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FrequencyRangeUpper
            (
            );
            /**Returns  the toggle stress 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableStress
            (
            );
            /**Sets  the toggle stress 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableStress
            (
                bool toggleStress /** togglestress */ 
            );
            /**Returns  the toggle strain 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableStrain
            (
            );
            /**Sets  the toggle strain 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableStrain
            (
                bool toggleStrain /** togglestrain */ 
            );
            /**Returns  the FEM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FemPartName
            (
            );
            /**Sets  the FEM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFemPartName
            (
                const NXString & femName /** femname */ 
            );
            /**Sets  the FEM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetFemPartName
            (
                const char * femName /** femname */ 
            );
            /**Returns  the SIM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SimPartName
            (
            );
            /**Sets  the SIM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSimPartName
            (
                const NXString & simName /** simname */ 
            );
            /**Sets  the SIM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetSimPartName
            (
                const char * simName /** simname */ 
            );
            /**Returns  the solution name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SolutionName
            (
            );
            /**Sets  the solution name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSolutionName
            (
                const NXString & solutionName /** solutionname */ 
            );
            /**Sets  the solution name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetSolutionName
            (
                const char * solutionName /** solutionname */ 
            );
            /**Returns  the process option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AutoFlexPropertyBuilder::ProcessType ProcessOption
            (
            );
            /**Sets  the process option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetProcessOption
            (
                NXOpen::Motion::AutoFlexPropertyBuilder::ProcessType processOption /** processoption */ 
            );
            /**Returns  the solver option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AutoFlexPropertyBuilder::SolverType SolverOption
            (
            );
            /**Sets  the solver option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSolverOption
            (
                NXOpen::Motion::AutoFlexPropertyBuilder::SolverType solverOption /** solveroption */ 
            );
            /** Get link connections 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetLinkConnections
            (
                NXOpen::Motion::Link * link /** link */ ,
                std::vector<NXOpen::Motion::MotionObject *> & connectionObjects /** connectionobjects */ 
            );
            /** Get link connection targets 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetConnectionTargets
            (
                NXOpen::Motion::MotionObject * connection /** connection */ ,
                std::vector<NXOpen::DisplayableObject *> & connectionTargets /** connectiontargets */ 
            );
            /** Set connection target list 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetConnectionTargets
            (
                NXOpen::Motion::MotionObject * connection /** connection */ ,
                const std::vector<NXOpen::DisplayableObject *> & connectionTargets /** connectiontargets */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
