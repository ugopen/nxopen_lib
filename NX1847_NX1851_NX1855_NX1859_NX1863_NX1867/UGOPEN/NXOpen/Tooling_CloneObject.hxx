#ifndef NXOpen_TOOLING_CLONEOBJECT_HXX_INCLUDED
#define NXOpen_TOOLING_CLONEOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_CloneObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/Tooling_ClonePart.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class CloneObject;
    }
    class Part;
    namespace Tooling
    {
        class ClonePart;
    }
    namespace Tooling
    {
        /** Part file type, .sim, .fem etc.  */
        enum ToolingCloneparttype
        {
            ToolingCloneparttypePrtType/** Normal NX part */,
            ToolingCloneparttypeSimType/** CAE .sim part */,
            ToolingCloneparttypeFemType/** CAE .fem part */,
            ToolingCloneparttypeFemIdealizedType/** CAE Idealized part for .fem */,
            ToolingCloneparttypeDrawingType/** Drawing part */
        };

        /** Clone action type */
        enum ToolingCloneaction
        {
            ToolingCloneactionInNative/** Clone part in native environment */,
            ToolingCloneactionImportToTeamcenter/** Import part from native to Teamcenter */,
            ToolingCloneactionExportToNative/** Export part from Teamcenter to native */,
            ToolingCloneactionInTeamcenter/** Clone part in Teamcenter environment */
        };

        /** Clone method */
        enum ToolingClonemethod
        {
            ToolingClonemethodUseLogFile/** Use clone log file method */,
            ToolingClonemethodRename/** Use part rename method */ = 2,
            ToolingClonemethodSaveAs/** Use part save as method */
        };

    }
    namespace Tooling
    {
        class CloneObjectImpl;
        /** Represents the clone operation in Add Reusable Component Builder. 
              <br> To create an instance of this object use @link NXOpen::Tooling::AddReusablePart::CreateCloneObject NXOpen::Tooling::AddReusablePart::CreateCloneObject@endlink   <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  CloneObject : public NXOpen::TransientObject
        {
            private: CloneObjectImpl * m_cloneobject_impl;
            /// \cond NX_NO_DOC 
            public: explicit CloneObject(void *ptr);
            /// \endcond 
            /** Destructs the class. 
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~CloneObject();
            /** Adds the part/assembly to be cloned. 
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void AddAssembly
            (
                const NXString & assemName /** Project assembly name */
            );
            /** Adds the part/assembly to be cloned. 
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void AddAssembly
            (
                const char * assemName /** Project assembly name */
            );
            /** Adds the part/assembly to be cloned. 
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void AddAssembly
            (
                NXOpen::Part * part /** The assembly to be cloned.*/
            );
            /** Creates a new clone part item. 
                      @return  the new @link NXOpen::Tooling::ClonePart NXOpen::Tooling::ClonePart@endlink  instance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ClonePart * CreateClonePartItem
            (
                const NXString & partName /** clone part name */
            );
            /** Creates a new clone part item. 
                      @return  the new @link NXOpen::Tooling::ClonePart NXOpen::Tooling::ClonePart@endlink  instance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Tooling::ClonePart * CreateClonePartItem
            (
                const char * partName /** clone part name */
            );
            /** Performs the clone operation. 
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Commit
            (
            );
            /** Find the part item to be cloned by giving part name  @return  The returned @link NXOpen::Tooling::ClonePart NXOpen::Tooling::ClonePart@endlink  instance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ClonePart * FindClonePartItem
            (
                const NXString & partName /** clone part name */
            );
            /** Find the part item to be cloned by giving part name  @return  The returned @link NXOpen::Tooling::ClonePart NXOpen::Tooling::ClonePart@endlink  instance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Tooling::ClonePart * FindClonePartItem
            (
                const char * partName /** clone part name */
            );
            /** Find the part item to be cloned by giving index 
                      @return  The returned @link NXOpen::Tooling::ClonePart NXOpen::Tooling::ClonePart@endlink  instance 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ClonePart * FindClonePartItemByIndex
            (
                int index /** index */
            );
            /**Returns  the destination folder
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OutputFolder
            (
            );
            /**Sets  the destination folder
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOutputFolder
            (
                const NXString & outputFolder /** If this folder is not set, it will use the folder of display part */
            );
            /**Sets  the destination folder
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetOutputFolder
            (
                const char * outputFolder /** If this folder is not set, it will use the folder of display part */
            );
            /**Returns  the clone method
                     
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ToolingClonemethod CloneMethod
            (
            );
            /**Sets  the clone method
                     
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCloneMethod
            (
                NXOpen::Tooling::ToolingClonemethod cloneMethod /** clonemethod */ 
            );
            /** Adds other part (FEM, SIM part etc.) to be cloned
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void AddAssociatedPart
            (
                const NXString & clonedPartName /** part name */,
                NXOpen::Tooling::ToolingCloneparttype fileType /** part file type */
            );
            /** Adds other part (FEM, SIM part etc.) to be cloned
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void AddAssociatedPart
            (
                const char * clonedPartName /** part name */,
                NXOpen::Tooling::ToolingCloneparttype fileType /** part file type */
            );
            /** Sets the next number of clone object.
                     
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: void SetNextNumber
            (
                int nextNumber /** next number */
            );
            /** Builds the cloned part name (item id, item name, revision id) etc.
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void BuildClonePartItems
            (
                std::vector<NXOpen::Tooling::ClonePart *> & clonedPartItems /** Cloned part items */
            );
            /** Builds the cloned part name (item id, item name, revision id) etc with no cloned part items output.
                     
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void BuildAllClonePartItems
            (
            );
            /** Builds all the cloned part names for Concept Design 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void BuildAllConceptPartItems
            (
            );
            /** Saves the clone action start number to the root part of an assembly  
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void SaveCloneStartNumber
            (
            );
            /** Sets the project name.
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetProjectName
            (
                const NXString & projName /** projname */ 
            );
            /** Sets the project name.
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            void SetProjectName
            (
                const char * projName /** projname */ 
            );
            /** Sets the name rule.
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetNameRule
            (
                const NXString & nameRule /** namerule */ 
            );
            /** Sets the name rule.
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            void SetNameRule
            (
                const char * nameRule /** namerule */ 
            );
            /** Synchronize the previous number with current.
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SyncPartNumber
            (
            );
            /** Restore start number.
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void RestorePartNumber
            (
            );
            /** Uses the item type which is same as original source item.
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetKeepItemType
            (
                bool keepItemType /** Keep the same item type or not */
            );
            /** Sets the default item type.
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetDefaultItemType
            (
                const NXString & defaultItemType /** Default item type */
            );
            /** Sets the default item type.
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            void SetDefaultItemType
            (
                const char * defaultItemType /** Default item type */
            );
            /** Sets the name rule (refer to the Customer Defaults).
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetDefaultNameRule
            (
                const NXString & nameRule /** Naming rule */
            );
            /** Sets the name rule (refer to the Customer Defaults).
                     
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            void SetDefaultNameRule
            (
                const char * nameRule /** Naming rule */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
