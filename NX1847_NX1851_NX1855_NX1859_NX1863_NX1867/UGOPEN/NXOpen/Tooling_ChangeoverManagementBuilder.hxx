#ifndef NXOpen_TOOLING_CHANGEOVERMANAGEMENTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_CHANGEOVERMANAGEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ChangeoverManagementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ChangeoverManagementBuilder;
    }
    namespace Assemblies
    {
        class SelectComponent;
    }
    namespace Assemblies
    {
        class SelectComponentList;
    }
    class Builder;
    namespace Tooling
    {
        class _ChangeoverManagementBuilderBuilder;
        class ChangeoverManagementBuilderImpl;
        /** Represents a @link NXOpen::Tooling::ChangeoverManagementBuilder NXOpen::Tooling::ChangeoverManagementBuilder@endlink  to support changeover workflow management.  <br> To create a new instance of this class, use @link NXOpen::Tooling::WorkflowManagementCollection::CreateChangeoverManagementBuilder  NXOpen::Tooling::WorkflowManagementCollection::CreateChangeoverManagementBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AddComponentsExclusively </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RenameComponent </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ChangeoverManagementBuilder : public NXOpen::Builder
        {
            /** Specifies the types of changeover management. */
            public: enum Types
            {
                TypesCreate/** the create mode */,
                TypesManage/** the manage mode */
            };

            private: ChangeoverManagementBuilderImpl * m_changeovermanagementbuilder_impl;
            private: friend class  _ChangeoverManagementBuilderBuilder;
            protected: ChangeoverManagementBuilder();
            public: ~ChangeoverManagementBuilder();
            /**Returns  the selection of product for which to create changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponent * SelectProduct
            (
            );
            /**Returns  the name of the to-be-created changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ChangeoverName
            (
            );
            /**Sets  the name of the to-be-created changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetChangeoverName
            (
                const NXString & changeoverName /** changeovername */ 
            );
            /**Sets  the name of the to-be-created changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetChangeoverName
            (
                const char * changeoverName /** changeovername */ 
            );
            /**Returns  the option to rename the components of the to-be-created changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool RenameComponent
            (
            );
            /**Sets  the option to rename the components of the to-be-created changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRenameComponent
            (
                bool renameComponent /** renamecomponent */ 
            );
            /**Returns  the exclusive adding 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool AddComponentsExclusively
            (
            );
            /**Sets  the exclusive adding 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAddComponentsExclusively
            (
                bool addComponentsExclusively /** addcomponentsexclusively */ 
            );
            /** Set the selected changeover as current used one. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void UseArrangement
            (
            );
            /** Rename the selected changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void RenameArrangement
            (
            );
            /** Delete the selected changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteArrangement
            (
                bool removeComponents /** removecomponents */ 
            );
            /**Returns  the new name of the selected changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewChangeoverName
            (
            );
            /**Sets  the new name of the selected changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewChangeoverName
            (
                const NXString & newChangeoverName /** newchangeovername */ 
            );
            /**Sets  the new name of the selected changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetNewChangeoverName
            (
                const char * newChangeoverName /** newchangeovername */ 
            );
            /**Returns  the selection of components to be added to or removed from a changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponentList * SelectComponents
            (
            );
            /** Add selected components to the selected changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void AddToChangeover
            (
            );
            /** Remove selected components from the selected changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveFromChangeover
            (
            );
            /**Returns  the type of changeover management. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ChangeoverManagementBuilder::Types Type
            (
            );
            /**Sets  the type of changeover management. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::ChangeoverManagementBuilder::Types type /** type */ 
            );
            /**Returns  the name of the cloned product pack used to create a new changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ClonedProductName
            (
            );
            /**Sets  the name of the cloned product pack used to create a new changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetClonedProductName
            (
                const NXString & clonedProductName /** clonedproductname */ 
            );
            /**Sets  the name of the cloned product pack used to create a new changeover. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetClonedProductName
            (
                const char * clonedProductName /** clonedproductname */ 
            );
            /**Returns  the name of the selected changeover arrangement. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedArrangementName
            (
            );
            /**Sets  the name of the selected changeover arrangement. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedArrangementName
            (
                const NXString & arrangementName /** arrangementname */ 
            );
            /**Sets  the name of the selected changeover arrangement. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetSelectedArrangementName
            (
                const char * arrangementName /** arrangementname */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
