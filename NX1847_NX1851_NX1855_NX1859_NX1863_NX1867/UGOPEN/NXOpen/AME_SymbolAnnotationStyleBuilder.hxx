#ifndef NXOpen_AME_SYMBOLANNOTATIONSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_AME_SYMBOLANNOTATIONSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_SymbolAnnotationStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_SymbolAnnotations.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TextColorFontWidthBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class SymbolAnnotationStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class TextColorFontWidthBuilder;
    namespace AME
    {
        class _SymbolAnnotationStyleBuilderBuilder;
        class SymbolAnnotationStyleBuilderImpl;
        /** Represents a re-usable component for Symbol annotation styles  <br> This object does not need a creator.  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  SymbolAnnotationStyleBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: SymbolAnnotationStyleBuilderImpl * m_symbolannotationstylebuilder_impl;
            private: friend class  _SymbolAnnotationStyleBuilderBuilder;
            protected: SymbolAnnotationStyleBuilder();
            public: ~SymbolAnnotationStyleBuilder();
            /**Returns  the color font width 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TextColorFontWidthBuilder * ColorFontWidth
            (
            );
            /**Returns  the height 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::Height Height
            (
            );
            /**Sets  the height 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetHeight
            (
                NXOpen::AME::Height height /** height */ 
            );
            /**Returns  the bold 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool Bold
            (
            );
            /**Sets  the bold 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetBold
            (
                bool bold /** bold */ 
            );
            /**Returns  the italics 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool Italics
            (
            );
            /**Sets  the italics 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetItalics
            (
                bool italics /** italics */ 
            );
            /**Returns  the underline 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool Underline
            (
            );
            /**Sets  the underline 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetUnderline
            (
                bool underline /** underline */ 
            );
            /**Returns  the overline 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool Overline
            (
            );
            /**Sets  the overline 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetOverline
            (
                bool overline /** overline */ 
            );
            /**Returns  the justification 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AmeSymbolAnnotationJustification Justification
            (
            );
            /**Sets  the justification 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetJustification
            (
                NXOpen::AME::AmeSymbolAnnotationJustification justification /** justification */ 
            );
            /**Returns  the lettering angle 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AmeSymbolAnnotationLetteringangle LetteringAngle
            (
            );
            /**Sets  the lettering angle 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetLetteringAngle
            (
                NXOpen::AME::AmeSymbolAnnotationLetteringangle letteringAngle /** letteringangle */ 
            );
            /**Returns  the anchor 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AmeSymbolAnnotationAnchor Anchor
            (
            );
            /**Sets  the anchor 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAnchor
            (
                NXOpen::AME::AmeSymbolAnnotationAnchor anchor /** anchor */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
