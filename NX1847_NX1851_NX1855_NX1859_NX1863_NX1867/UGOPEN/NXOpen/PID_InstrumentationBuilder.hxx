#ifndef NXOpen_PID_INSTRUMENTATIONBUILDER_HXX_INCLUDED
#define NXOpen_PID_INSTRUMENTATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_InstrumentationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_DataType.hxx>
#include <NXOpen/Diagramming_Node.hxx>
#include <NXOpen/Diagramming_SheetElement.hxx>
#include <NXOpen/Diagramming_TextStyleBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PDM_ElementGroup.hxx>
#include <NXOpen/PID_DataType.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libpidopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        class InstrumentationBuilder;
    }
    class Builder;
    namespace Diagramming
    {
        class Node;
    }
    namespace Diagramming
    {
        class SheetElement;
    }
    namespace Diagramming
    {
        class TextStyleBuilder;
    }
    class NXObject;
    namespace PLAS
    {
        class Run;
    }
    namespace PID
    {
        class _InstrumentationBuilderBuilder;
        class InstrumentationBuilderImpl;
        /** Represents a @link PID::InstrumentationSymbol PID::InstrumentationSymbol@endlink  and @link PID::Instrumentation PID::Instrumentation@endlink builder  <br> To create a new instance of this class, use @link NXOpen::PID::PidManager::CreateInstrumentationBuilder  NXOpen::PID::PidManager::CreateInstrumentationBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        SymbolSize </td> <td> 
         
        15 </td> </tr> 

        </table>  

         <br>  Created in NX1847.0.0.  <br>  
        */
        class PIDOPENCPPEXPORT  InstrumentationBuilder : public NXOpen::Builder
        {
            private: InstrumentationBuilderImpl * m_instrumentationbuilder_impl;
            private: friend class  _InstrumentationBuilderBuilder;
            protected: InstrumentationBuilder();
            public: ~InstrumentationBuilder();
            /**Returns  the instrumentation type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::InstrumentationType InstrumentationType
            (
            );
            /**Sets  the instrumentation type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetInstrumentationType
            (
                NXOpen::PID::InstrumentationType type /** type */ 
            );
            /**Returns  the symbol type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::InstrumentationSymbolType SymbolType
            (
            );
            /**Sets  the symbol type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetSymbolType
            (
                NXOpen::PID::InstrumentationSymbolType symbolType /** symboltype */ 
            );
            /** Gets the instrumentation location.  @return  the instrumentation location. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point2d GetLocation
            (
            );
            /** Sets the instrumentation location. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetLocation
            (
                const NXOpen::Point2d & location /** the instrumentation location. */
            );
            /**Returns  the measured variable 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MeasurementVariable
            (
            );
            /**Sets  the measured variable 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetMeasurementVariable
            (
                const NXString & measurementVariable /** measurementvariable */ 
            );
            /**Sets  the measured variable 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetMeasurementVariable
            (
                const char * measurementVariable /** measurementvariable */ 
            );
            /**Returns  the function 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FunctionId
            (
            );
            /**Sets  the function 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetFunctionId
            (
                const NXString & functionId /** functionid */ 
            );
            /**Sets  the function 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetFunctionId
            (
                const char * functionId /** functionid */ 
            );
            /**Returns  the owning control loop option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::InstrumentationControlLoopType OwningControlLoopType
            (
            );
            /**Sets  the owning control loop option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetOwningControlLoopType
            (
                NXOpen::PID::InstrumentationControlLoopType type /** type */ 
            );
            /**Returns  the control loop.  Used under manager mode or instrumentation non-lightweight mode. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PLAS::Run * OwningControlLoop
            (
            );
            /**Sets  the control loop.  Used under manager mode or instrumentation non-lightweight mode. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetOwningControlLoop
            (
                NXOpen::PLAS::Run * controlLoop /** controlloop */ 
            );
            /**Returns  the control loop name. Used under native mode or instrumentation lightweight mode. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ControlLoopName
            (
            );
            /**Sets  the control loop name. Used under native mode or instrumentation lightweight mode. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetControlLoopName
            (
                const NXString & controlLoopName /** controlloopname */ 
            );
            /**Sets  the control loop name. Used under native mode or instrumentation lightweight mode. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetControlLoopName
            (
                const char * controlLoopName /** controlloopname */ 
            );
            /**Returns  the symbol size 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: double SymbolSize
            (
            );
            /**Sets  the symbol size 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetSymbolSize
            (
                double symbolSize /** symbolsize */ 
            );
            /**Returns  the text style 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::TextStyleBuilder * TextStyle
            (
            );
            /** Sets connection location for the inline symbol. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeSymbol NXOpen::PID::InstrumentationTypeSymbol@endlink  and the instrument is inserted into one pipe.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetInlineSymbolLocation
            (
                NXOpen::NXObject * pipe /** @link NXOpen::PID::NativePipe NXOpen::PID::NativePipe@endlink  or @link NXOpen::PID::Pipe NXOpen::PID::Pipe@endlink */,
                const NXString & connectionId /** connectionid */ ,
                int segementId /** segementid */ ,
                double percent /** percent */ 
            );
            /** Sets connection location for the inline symbol. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeSymbol NXOpen::PID::InstrumentationTypeSymbol@endlink  and the instrument is inserted into one pipe.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetInlineSymbolLocation
            (
                NXOpen::NXObject * pipe /** @link NXOpen::PID::NativePipe NXOpen::PID::NativePipe@endlink  or @link NXOpen::PID::Pipe NXOpen::PID::Pipe@endlink */,
                const char * connectionId /** connectionid */ ,
                int segementId /** segementid */ ,
                double percent /** percent */ 
            );
            /** Gets connection location for the inline symbol. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeSymbol NXOpen::PID::InstrumentationTypeSymbol@endlink  and the instrument is inserted into one pipe.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetInlineSymbolLocation
            (
                NXOpen::NXObject ** pipe /** @link NXOpen::PID::NativePipe NXOpen::PID::NativePipe@endlink  or @link NXOpen::PID::Pipe NXOpen::PID::Pipe@endlink */,
                NXString* connectionId /** connectionid */ ,
                int* segementId /** segementid */ ,
                double* percent /** percent */ 
            );
            /** Gets new pipe after inserting an inline symbol. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeSymbol NXOpen::PID::InstrumentationTypeSymbol@endlink  and the instrument is inserted into one pipe.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetNewInlineConnection
            (
                NXOpen::NXObject ** pipe /** @link NXOpen::PID::NativePipe NXOpen::PID::NativePipe@endlink  or @link NXOpen::PID::Pipe NXOpen::PID::Pipe@endlink */,
                NXString* connectionId /** connectionid */ 
            );
            /** Set the attached instrument symbol. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeSymbol NXOpen::PID::InstrumentationTypeSymbol@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetAttachedInstrumentSymbol
            (
                const NXString & fromPortId /** fromportid */ ,
                NXOpen::NXObject * toInstrumentSymbol /** @link NXOpen::PID::InstrumentationSymbol NXOpen::PID::InstrumentationSymbol@endlink  or @link NXOpen::PID::Instrumentation NXOpen::PID::Instrumentation@endlink */,
                const NXString & toPortId /** toportid */ 
            );
            /** Set the attached instrument symbol. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeSymbol NXOpen::PID::InstrumentationTypeSymbol@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetAttachedInstrumentSymbol
            (
                const char * fromPortId /** fromportid */ ,
                NXOpen::NXObject * toInstrumentSymbol /** @link NXOpen::PID::InstrumentationSymbol NXOpen::PID::InstrumentationSymbol@endlink  or @link NXOpen::PID::Instrumentation NXOpen::PID::Instrumentation@endlink */,
                const char * toPortId /** toportid */ 
            );
            /** Detaches the instrumentation from its attachments. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeSymbol NXOpen::PID::InstrumentationTypeSymbol@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void Detach
            (
            );
            /** Get the node object of the instrumentation. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::Node * GetNode
            (
            );
            /**Returns  the option to use leader. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeAnnotation NXOpen::PID::InstrumentationTypeAnnotation@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool LeaderUsed
            (
            );
            /**Sets  the option to use leader. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeAnnotation NXOpen::PID::InstrumentationTypeAnnotation@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetLeaderUsed
            (
                bool isLeaderUsed /** isleaderused */ 
            );
            /** Gets the reference object and point of the instrumentation annotation. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeAnnotation NXOpen::PID::InstrumentationTypeAnnotation@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetLeaderTerminator
            (
                NXOpen::Diagramming::SheetElement ** reference /** reference */ ,
                NXOpen::Point2d* point /** the instrumentation annotation's leader point. */,
                int* connectionSegementId /** connectionsegementid */ 
            );
            /** Sets the reference object and point of the instrumentation annotation. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeAnnotation NXOpen::PID::InstrumentationTypeAnnotation@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetLeaderTerminator
            (
                NXOpen::Diagramming::SheetElement * reference /** reference */ ,
                const NXOpen::Point2d & point /** the instrumentation annotation's leader point. */,
                int connectionSegementId /** connectionsegementid */ 
            );
            /**Returns  the stub length of this leader line. The negative value is not expected, and only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeAnnotation NXOpen::PID::InstrumentationTypeAnnotation@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: double LeaderStubLength
            (
            );
            /**Sets  the stub length of this leader line. The negative value is not expected, and only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeAnnotation NXOpen::PID::InstrumentationTypeAnnotation@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetLeaderStubLength
            (
                double stubLength /** stublength */ 
            );
            /**Returns  the stub sides of this leader line. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeAnnotation NXOpen::PID::InstrumentationTypeAnnotation@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::DiagrammingStubsides LeaderStubSide
            (
            );
            /**Sets  the stub sides of this leader line. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeAnnotation NXOpen::PID::InstrumentationTypeAnnotation@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetLeaderStubSide
            (
                NXOpen::Diagramming::DiagrammingStubsides stubSides /** stubsides */ 
            );
            /**Returns  the arrow type of the end arrow. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeAnnotation NXOpen::PID::InstrumentationTypeAnnotation@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::DiagrammingArrowtype LeaderArrowhead
            (
            );
            /**Sets  the arrow type of the end arrow. Only used when the instrumentation type is @link NXOpen::PID::InstrumentationTypeAnnotation NXOpen::PID::InstrumentationTypeAnnotation@endlink 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetLeaderArrowhead
            (
                NXOpen::Diagramming::DiagrammingArrowtype arrowTypeOption /** arrowtypeoption */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
