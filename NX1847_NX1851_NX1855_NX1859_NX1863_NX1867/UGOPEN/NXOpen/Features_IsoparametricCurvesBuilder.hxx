#ifndef NXOpen_FEATURES_ISOPARAMETRICCURVESBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_ISOPARAMETRICCURVESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_IsoparametricCurvesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_GeometricConstraintDataManager.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class IsoparametricCurvesBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class GeometricConstraintDataManager;
    }
    class Point;
    class SelectDisplayableObject;
    namespace Features
    {
        class _IsoparametricCurvesBuilderBuilder;
        class IsoparametricCurvesBuilderImpl;
        /**
            Represents a @link NXOpen::Features::IsoparametricCurves NXOpen::Features::IsoparametricCurves@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateIsoparametricCurvesBuilder  NXOpen::Features::FeatureCollection::CreateIsoparametricCurvesBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Associative </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        IsSpacingEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsSwitchDirection </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsUEnabled </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        IsVEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Number </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        Placement </td> <td> 
         
        Uniform </td> </tr> 

        <tr><td> 
         
        Spacing </td> <td> 
         
        25 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  IsoparametricCurvesBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Curve direction options */
            public: enum DirectionTypes
            {
                DirectionTypesIsoU/** Iso U direction */,
                DirectionTypesIsoV/** Iso V direction */,
                DirectionTypesIsoUV/** Iso U and Iso V direction */
            };

            /** Curve creation options */
            public: enum PlacementTypes
            {
                PlacementTypesUniform/** Insert curves uniformly */,
                PlacementTypesThroughPoints/** Insert curves through points */,
                PlacementTypesBetweenPoints/** Insert curves between points */
            };

            private: IsoparametricCurvesBuilderImpl * m_isoparametriccurvesbuilder_impl;
            private: friend class  _IsoparametricCurvesBuilderBuilder;
            protected: IsoparametricCurvesBuilder();
            public: ~IsoparametricCurvesBuilder();
            /**Returns  the select object for faces 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * SelectObject
            (
            );
            /**Returns  the direction type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::IsoparametricCurvesBuilder::DirectionTypes Direction
            (
            );
            /**Sets  the direction type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDirection
            (
                NXOpen::Features::IsoparametricCurvesBuilder::DirectionTypes direction /** direction */ 
            );
            /**Returns  the placement type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::IsoparametricCurvesBuilder::PlacementTypes Placement
            (
            );
            /**Sets  the placement type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPlacement
            (
                NXOpen::Features::IsoparametricCurvesBuilder::PlacementTypes placement /** placement */ 
            );
            /**Returns  the constraint manager. Allows definition of key points to be used to control curve creation. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GeometricConstraintDataManager * ConstraintManager
            (
            );
            /**Returns  the is u enabled 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsUEnabled
            (
            );
            /**Sets  the is u enabled 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUEnabled
            (
                bool isUEnabled /** isuenabled */ 
            );
            /**Returns  the is v enabled 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsVEnabled
            (
            );
            /**Sets  the is v enabled 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetVEnabled
            (
                bool isVEnabled /** isvenabled */ 
            );
            /**Returns  the number of curves 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int Number
            (
            );
            /**Sets  the number of curves 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNumber
            (
                int number /** number */ 
            );
            /**Returns  the is spacing enabled 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSpacingEnabled
            (
            );
            /**Sets  the is spacing enabled 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSpacingEnabled
            (
                bool isSpacingEnabled /** isspacingenabled */ 
            );
            /**Returns  the spacing to use when spacing is enabled 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Spacing
            (
            );
            /**Sets  the spacing to use when spacing is enabled 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSpacing
            (
                double spacing /** spacing */ 
            );
            /**Returns  the is switch direction 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSwitchDirection
            (
            );
            /**Sets  the is switch direction 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSwitchDirection
            (
                bool isSwitchDirection /** isswitchdirection */ 
            );
            /**Returns  the associative state. Disables feature creation when false 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative state. Disables feature creation when false 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /** Sets key points that are selected or will be moved 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetActivePoints
            (
                const std::vector<NXOpen::Point *> & points /** Key points */,
                NXOpen::Point * masterPoint /** Point which user actually moves to move a group of selected points */
            );
            /** Sets key points that are selected or will be moved 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UpdateIsoparametricCurves
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
