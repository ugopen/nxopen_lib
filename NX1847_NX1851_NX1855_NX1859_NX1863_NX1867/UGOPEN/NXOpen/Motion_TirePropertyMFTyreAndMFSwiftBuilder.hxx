#ifndef NXOpen_MOTION_TIREPROPERTYMFTYREANDMFSWIFTBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_TIREPROPERTYMFTYREANDMFSWIFTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_TirePropertyMFTyreAndMFSwiftBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ExternalFileReferenceAdapter.hxx>
#include <NXOpen/IExternalFileReferencer.hxx>
#include <NXOpen/Motion_TirePropertyBuilder.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class TirePropertyMFTyreAndMFSwiftBuilder;
    }
    class Expression;
    class ExternalFileReferenceAdapter;
    class IExternalFileReferencer;
    namespace Motion
    {
        class TirePropertyBuilder;
    }
    namespace Motion
    {
        class _TirePropertyMFTyreAndMFSwiftBuilderBuilder;
        class TirePropertyMFTyreAndMFSwiftBuilderImpl;
        /**  @brief Represents a Builder for Motion MF-Tyre and MF-Swift Tire Property. 

          <br> To create a new instance of this class, use @link NXOpen::Motion::TirePropertyMFTyreAndMFSwiftCollection::CreateTirePropertyMftyreAndMfswiftBuilder  NXOpen::Motion::TirePropertyMFTyreAndMFSwiftCollection::CreateTirePropertyMftyreAndMfswiftBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ContactMethod </td> <td> 
         
        SmoothRoad </td> </tr> 

        <tr><td> 
         
        Dynamics </td> <td> 
         
        SteadyState </td> </tr> 

        <tr><td> 
         
        Iswitch.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        IswitchDefinition </td> <td> 
         
        Detailed </td> </tr> 

        <tr><td> 
         
        Lkx.Value </td> <td> 
         
        1.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        Lky.Value </td> <td> 
         
        1.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        Lkyc.Value </td> <td> 
         
        1.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        Lkzc.Value </td> <td> 
         
        1.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        Lmux.Value </td> <td> 
         
        1.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        Lmuy.Value </td> <td> 
         
        1.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        Ltr.Value </td> <td> 
         
        1.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        SlipForces </td> <td> 
         
        NoMagicFormula </td> </tr> 

        <tr><td> 
         
        StaticHold </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        StaticRadius.Value </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        <tr><td> 
         
        StaticVerticalStiffness.Value </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        <tr><td> 
         
        TireSide </td> <td> 
         
        Left </td> </tr> 

        <tr><td> 
         
        TrackSide </td> <td> 
         
        Left </td> </tr> 

        <tr><td> 
         
        VerticalDamping.Value </td> <td> 
         
        1.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        VerticalStiffness.Value </td> <td> 
         
        1.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  TirePropertyMFTyreAndMFSwiftBuilder : public NXOpen::Motion::TirePropertyBuilder, public virtual NXOpen::IExternalFileReferencer
        {
            /**  @brief The Track Side type. 

              */
            public: enum TrackSideType
            {
                TrackSideTypeLeft/** left */ ,
                TrackSideTypeRight/** right */ 
            };

            /**  @brief The Iswitch Definition type. 

              */
            public: enum IswitchDefinitionType
            {
                IswitchDefinitionTypeDetailed/** detailed */ ,
                IswitchDefinitionTypeInteger/** integer */ 
            };

            /**  @brief The Tire Side type. 

              */
            public: enum TireSideType
            {
                TireSideTypeLeft/** left */ ,
                TireSideTypeRight/** right */ ,
                TireSideTypeSymmetric/** symmetric */ ,
                TireSideTypeMirrored/** mirrored */ 
            };

            /**  @brief The Slip Forces type. 

              */
            public: enum SlipForcesType
            {
                SlipForcesTypeNoMagicFormula/** no magic formula */ ,
                SlipForcesTypeLongitudinal/** longitudinal */ ,
                SlipForcesTypeLateral/** lateral */ ,
                SlipForcesTypeUncombined/** uncombined */ ,
                SlipForcesTypeCombined/** combined */ ,
                SlipForcesTypeTurnSlip/** turn slip */ 
            };

            /**  @brief The Dynamics type. 

              */
            public: enum DynamicsType
            {
                DynamicsTypeSteadyState/** steady state */ ,
                DynamicsTypeRelaxationLinear/** relaxation linear */ ,
                DynamicsTypeRelaxationNonLinear/** relaxation non linear */ ,
                DynamicsTypeRigidRing/** rigid ring */ ,
                DynamicsTypeRigidRingWithInitStatics/** rigid ring with init statics */ 
            };

            /**  @brief The Contact Method type. 

              */
            public: enum ContactMethodType
            {
                ContactMethodTypeSmoothRoad/** smooth road */ ,
                ContactMethodTypeCircularCrossSection/** circular cross section */ ,
                ContactMethodTypeMovingRoad/** moving road */ ,
                ContactMethodTypeRoad2D/** road2d */ ,
                ContactMethodTypeRoad3D/** road3d */ 
            };

            private: TirePropertyMFTyreAndMFSwiftBuilderImpl * m_tirepropertymftyreandmfswiftbuilder_impl;
            private: friend class  _TirePropertyMFTyreAndMFSwiftBuilderBuilder;
            protected: TirePropertyMFTyreAndMFSwiftBuilder();
            public: ~TirePropertyMFTyreAndMFSwiftBuilder();
            /**Returns   @brief the MF-Tyre and MF-Swift file. 

             
                        
                            This is a file containing information describing the MF-Tyre and MF-Swift tire.
                        
                    
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") NXString MFTyreAndMFSwiftFile
            (
            );
            /**Sets   @brief the MF-Tyre and MF-Swift file. 

             
                        
                            This is a file containing information describing the MF-Tyre and MF-Swift tire.
                        
                    
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") void SetMFTyreAndMFSwiftFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets   @brief the MF-Tyre and MF-Swift file. 

             
                        
                            This is a file containing information describing the MF-Tyre and MF-Swift tire.
                        
                    
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetMFTyreAndMFSwiftFile
            (
                const char * fileName /** filename */ 
            );
            /**Returns   @brief the track side. 

             
                        
                            Only used in combination with a 'Road Profile' Road Element
                            that specifies road height vs. traveled distance.
                            The *.rdf road profile file contains 2 tracks,
                            a left track for left wheels and a right track for right wheels.
                        
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::TrackSideType TrackSide
            (
            );
            /**Sets   @brief the track side. 

             
                        
                            Only used in combination with a 'Road Profile' Road Element
                            that specifies road height vs. traveled distance.
                            The *.rdf road profile file contains 2 tracks,
                            a left track for left wheels and a right track for right wheels.
                        
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTrackSide
            (
                NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::TrackSideType trackSide /** trackside */ 
            );
            /**Returns   @brief the iswitch definition. 

             
                        
                            If set to @link NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::IswitchDefinitionTypeDetailed NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::IswitchDefinitionTypeDetailed@endlink ,
                            4 parameters are used to specify iswitch:
                            <ul>
                                <li>@link NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::TireSideType NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::TireSideType@endlink ,</li>
                                <li>@link NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::SlipForcesType NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::SlipForcesType@endlink ,</li>
                                <li>@link NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::DynamicsType NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::DynamicsType@endlink  and</li>
                                <li>@link NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::ContactMethodType NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::ContactMethodType@endlink .</li>
                            </ul>
                            Otherwise it is specified as an integer value.
                        
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::IswitchDefinitionType IswitchDefinition
            (
            );
            /**Sets   @brief the iswitch definition. 

             
                        
                            If set to @link NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::IswitchDefinitionTypeDetailed NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::IswitchDefinitionTypeDetailed@endlink ,
                            4 parameters are used to specify iswitch:
                            <ul>
                                <li>@link NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::TireSideType NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::TireSideType@endlink ,</li>
                                <li>@link NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::SlipForcesType NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::SlipForcesType@endlink ,</li>
                                <li>@link NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::DynamicsType NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::DynamicsType@endlink  and</li>
                                <li>@link NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::ContactMethodType NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::ContactMethodType@endlink .</li>
                            </ul>
                            Otherwise it is specified as an integer value.
                        
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetIswitchDefinition
            (
                NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::IswitchDefinitionType iswitchDef /** iswitchdef */ 
            );
            /**Returns   @brief the Iswitch. 

             
                        It is a Tire model usage flag. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Iswitch
            (
            );
            /**Returns   @brief the tire side. 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::TireSideType TireSide
            (
            );
            /**Sets   @brief the tire side. 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTireSide
            (
                NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::TireSideType tireSide /** tireside */ 
            );
            /**Returns   @brief the slip forces type. 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::SlipForcesType SlipForces
            (
            );
            /**Sets   @brief the slip forces type. 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSlipForces
            (
                NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::SlipForcesType slipForces /** slipforces */ 
            );
            /**Returns   @brief the dynamics type. 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::DynamicsType Dynamics
            (
            );
            /**Sets   @brief the dynamics type. 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDynamics
            (
                NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::DynamicsType dynamics /** dynamics */ 
            );
            /**Returns   @brief the contact method. 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::ContactMethodType ContactMethod
            (
            );
            /**Sets   @brief the contact method. 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetContactMethod
            (
                NXOpen::Motion::TirePropertyMFTyreAndMFSwiftBuilder::ContactMethodType contactMethod /** contactmethod */ 
            );
            /**Returns   @brief the Vertical Stiffness scaling coefficient. 

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * VerticalStiffness
            (
            );
            /**Returns   @brief the Vertical Damping scaling coefficient. 

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * VerticalDamping
            (
            );
            /**Returns   @brief the LMUX scaling coefficient. 

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Lmux
            (
            );
            /**Returns   @brief the LMUY scaling coefficient. 

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Lmuy
            (
            );
            /**Returns   @brief the LKX scaling coefficient. 

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Lkx
            (
            );
            /**Returns   @brief the LKY scaling coefficient. 

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Lky
            (
            );
            /**Returns   @brief the LTR scaling coefficient. 

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Ltr
            (
            );
            /**Returns   @brief the LKZC scaling coefficient. 

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Lkzc
            (
            );
            /**Returns   @brief the LKYC scaling coefficient. 

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Lkyc
            (
            );
            /**Returns   @brief the Static Radius. 

             
                        
                            It is used for static analysis only.
                            Specifies the tire radius only used in static equilibrating force calculations.
                        
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * StaticRadius
            (
            );
            /**Returns   @brief the static vertical stiffness. 

             
                        
                            It specifies the vertical stiffness only used
                            in static equilibrating force calculations.
                        
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * StaticVerticalStiffness
            (
            );
            /**Returns   @brief the static hold. 

             
                        
                            It is used for static analysis only.
                            If set to true, it holds the tire in position.
                        
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool StaticHold
            (
            );
            /**Sets   @brief the static hold. 

             
                        
                            It is used for static analysis only.
                            If set to true, it holds the tire in position.
                        
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticHold
            (
                bool staticHold /** statichold */ 
            );
            /**Returns   @brief the name. 

             
                        
                            It is a unique name within tire properties.
                        
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString Name
            (
            );
            /**Sets   @brief the name. 

             
                        
                            It is a unique name within tire properties.
                        
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets   @brief the name. 

             
                        
                            It is a unique name within tire properties.
                        
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**  Returns the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to return the correct external file adapter.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * GetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */
            );
            /**  Sets the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to set the correct reference. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /**  Gets the file definition to use for external file adapter. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString GetExternalFileDefinitionKey
            (
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const NXString & externalFileSpec /** the external file specification. */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const char * externalFileSpec /** the external file specification. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
