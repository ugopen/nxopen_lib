#ifndef NXOpen_ROUTING_ELECTRICAL_PATHARRANGEMENTBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_ELECTRICAL_PATHARRANGEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Electrical_PathArrangementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        namespace Electrical
        {
            class PathArrangementBuilder;
        }
    }
    namespace Assemblies
    {
        class Component;
    }
    class Builder;
    namespace Routing
    {
        class Port;
    }
    class TaggedObject;
    namespace Routing
    {
        namespace Electrical
        {
            class _PathArrangementBuilderBuilder;
            class PathArrangementBuilderImpl;
            /** Builder class to manage Path Arrangements.
                 <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreatePathArrangementBuilder  NXOpen::Routing::RouteManager::CreatePathArrangementBuilder @endlink  <br> 
             <br>  Created in NX10.0.3.  <br>  
            */
            class NXOPENCPP_ROUTINGEXPORT  PathArrangementBuilder : public NXOpen::Builder
            {
                private: PathArrangementBuilderImpl * m_patharrangementbuilder_impl;
                private: friend class  _PathArrangementBuilderBuilder;
                protected: PathArrangementBuilder();
                public: ~PathArrangementBuilder();
                /**Returns  the component part that contains the prototype of the extract port that is used as the reference
                            port. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: NXOpen::Assemblies::Component * PrototypePortPartOccurrence
                (
                );
                /**Sets  the component part that contains the prototype of the extract port that is used as the reference
                            port. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: void SetPrototypePortPartOccurrence
                (
                    NXOpen::Assemblies::Component * partOcc /** partocc */ 
                );
                /**Returns  the prototype of the extract port that is used as the reference port. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: NXOpen::Routing::Port * PrototypePort
                (
                );
                /**Sets  the prototype of the extract port that is used as the reference port. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: void SetPrototypePort
                (
                    NXOpen::Routing::Port * port /** port */ 
                );
                /**Returns  the port on which the offset is based when defining the path arrangement. The port property
                            can be either a port or a port occurrence. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: NXOpen::TaggedObject * ReferencePort
                (
                );
                /**Sets  the port on which the offset is based when defining the path arrangement. The port property
                            can be either a port or a port occurrence. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: void SetReferencePort
                (
                    NXOpen::TaggedObject * port /** port */ 
                );
                /**Returns  the harness component in the context of the part that was used to create the extracted port. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: NXOpen::Assemblies::Component * HarnessPartOccurrence
                (
                );
                /**Sets  the harness component in the context of the part that was used to create the extracted port. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: void SetHarnessPartOccurrence
                (
                    NXOpen::Assemblies::Component * partOcc /** partocc */ 
                );
                /** Clears the builder data associated with stored harness, namely the ReferencePort and
                         * the HarnessOccurrence, along with internal data. Note that the PrototypePortPartOccurrence
                         * and the PrototypePort are not cleared with this call.  
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: void ClearHarnessData
                (
                );
                /** Deletes path arrangement through builder 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: void DeletePathArrangement
                (
                );
                /** Retrieves the Path Arrangement object based on the data stored in the builder. If one does not
                            yet exist, a new one will be created. The retrieved object is stored internally in the biuilder.
                            This method is called after setting HarnessPartOccurrence and ReferencePort 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: void EstablishPathArrangement
                (
                );
                /** Sets a new origin for the point on the harness path. This point should be in the
                            context of the current root part. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: void SetPathArrangementOrigin
                (
                    const NXOpen::Point3d & point /** Origin of the path arrangement in the context of the root part. */
                );
                /** Initializes builder from arranged port 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : routing_base ("Routing Basic") */
                public: void InitializeBuilderFromArrangedPort
                (
                    NXOpen::Routing::Port * port /** Routing port whose associated path arrangement object is used to populate the data in the builder */
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
