#ifndef NXOpen_PDM_SMARTSAVEBUILDER_HXX_INCLUDED
#define NXOpen_PDM_SMARTSAVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_SmartSaveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AttributePropertiesBuilder.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/IAttributeSourceObjectBuilder.hxx>
#include <NXOpen/PDM_AlternateIdManager.hxx>
#include <NXOpen/PDM_ErrorMessageHandler.hxx>
#include <NXOpen/Session.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class SmartSaveBuilder;
    }
    class Builder;
    class ErrorList;
    class IAttributeSourceObjectBuilder;
    class NXObject;
    namespace PDM
    {
        class AlternateIdManager;
    }
    namespace PDM
    {
        class ErrorMessageHandler;
    }
    namespace PDM
    {
        class LogicalObject;
    }
    namespace PDM
    {
        class SmartSaveObject;
    }
    namespace PDM
    {
        class _SmartSaveBuilderBuilder;
        class SmartSaveBuilderImpl;
        /** TODO: Add a documentation comment describing this class.
            The comment must be placed inside  and should describe conceptually
            what this class represents or does.  Don't use a comment that just states
            something that would be obvious if the comment didn't exist.
            Such comments add no value for the customer. <br> To create a new instance of this class, use @link NXOpen::PDM::PdmSession::CreateSmartSaveBuilderWithContext  NXOpen::PDM::PdmSession::CreateSmartSaveBuilderWithContext @endlink  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  SmartSaveBuilder : public NXOpen::Builder, public virtual NXOpen::IAttributeSourceObjectBuilder
        {
            /** Represents an File Save type 
             <br>  Created in NX11.0.0.  <br>  
            */
            public: enum SaveType
            {
                SaveTypeSave/** File Save */,
                SaveTypeSaveAll/** File SaveAll */,
                SaveTypeSavePreciseAssembly/** File SavePreciseAssembly */,
                SaveTypeSaveWorkPartOnly/** File SaveWorkPartOnly */,
                SaveTypeSaveAndClose/** File Save And Close */,
                SaveTypeSaveDesignElements/** Save Design Elements */
            };

            private: SmartSaveBuilderImpl * m_smartsavebuilder_impl;
            private: friend class  _SmartSaveBuilderBuilder;
            protected: SmartSaveBuilder();
            public: ~SmartSaveBuilder();
            /** Gets the smart save objects for the modified objects in session. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void GetSmartSaveObjects
            (
                std::vector<NXOpen::PDM::SmartSaveObject *> & smartSaveObjects /** smartsaveobjects */ 
            );
            /** Updates the given smart save objects after operation type change. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void OnOperationTypeChanged
            (
                const std::vector<NXOpen::PDM::SmartSaveObject *> & smartSaveObjects /** the objects for which operation type is changed*/,
                NXOpen::AttributePropertiesBuilder::OperationType operationType /** the new operation type */
            );
            /** Returns operation failures 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ErrorList * GetOperationFailures
            (
            );
            /** Clears operation failures if any 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void ClearValidationFailures
            (
            );
            /** Updates the smart save objects with valid operation type and dependencies 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateSmartSaveObjectsOnBuilder
            (
            );
            /** Checks whether smart save operation can be performed with default operation type set 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool CanPerformDefaultSave
            (
            );
            /**Returns  the debug dump enabled 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool DebugDumpEnabled
            (
            );
            /**Sets  the debug dump enabled 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDebugDumpEnabled
            (
                bool debugDumpEnabled /** debugdumpenabled */ 
            );
            /**Returns  the new debug sort enabled 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool UseNewSortForDebug
            (
            );
            /**Sets  the new debug sort enabled 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetUseNewSortForDebug
            (
                bool useNewSortForDebug /** usenewsortfordebug */ 
            );
            /** Validates whether the save operation can be performed on the smart save objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ValidateSmartSaveObjects
            (
            );
            /** Create new specifications for Logical Objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateSpecificationsForSmartSaveObjects
            (
                const std::vector<NXOpen::PDM::SmartSaveObject *> & smartSaveObjects /** smartsaveobjects */ 
            );
            /** Returns ErrorMessageHandler 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::ErrorMessageHandler * GetErrorMessageHandler
            (
                bool refresh /** refresh */ 
            );
            /**  Assign or remove projects to/from objects
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void AssignRemoveProjects
            (
                const std::vector<NXOpen::PDM::SmartSaveObject *> & smartSaveObjects /** Array of objects to assign/remove projects to */,
                std::vector<NXString> & projectNames /** names of the projects to assign */,
                const std::vector<NXOpen::Session::ProjectAssignmentState> & assignmentStates /** assignment states */
            );
            /**  Gets CLI names of Change Notice associated with Objects involved in Save operation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetAssociatedChangeNoticeNames
            (
                const std::vector<NXOpen::PDM::SmartSaveObject *> & smartSaveObjects /** smartsaveobjects */ 
            );
            /** Create an instance of a NXOpen.PDM.AlternateIdManager which will be used to create alternate ID information while creating the new part.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::AlternateIdManager * GetAlternateIDManager
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ 
            );
            /**  Auto assigns the attributes for a given array of objects and returns an array of objects that failed to auto assign.
               
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ErrorList * AutoAssignAttributes
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /**  Auto assigns the attributes for a given object and returns an array of objects that failed to auto assign.
                    properties needs to be created using @link CreateAttributeTitleToNamingPatternMap CreateAttributeTitleToNamingPatternMap@endlink 
               
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ErrorList * AutoAssignAttributesWithNamingPattern
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ ,
                const std::vector<NXOpen::NXObject *> & properties /** properties */ 
            );
            /** Creates a map object of attribute titles to their corresponding naming pattern 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::NXObject * CreateAttributeTitleToNamingPatternMap
            (
                std::vector<NXString> & attributeTitles /** attributetitles */ ,
                std::vector<NXString> & titlePatterns /** titlepatterns */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
