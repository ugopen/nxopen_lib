#ifndef NXOpen_FEATURES_FEATURE_HXX_INCLUDED
#define NXOpen_FEATURES_FEATURE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_Feature.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/IFitTo.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/IProfile.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class Feature;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Expression;
    namespace Features
    {
        class IContainerFeature;
    }
    class IFitTo;
    class INXObject;
    class IProfile;
    class NXColor;
    class NXObject;
    class Section;
    namespace Features
    {
        class _FeatureBuilder;
        class FeatureImpl;
        /** Represents a feature on a part  <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  Feature : public NXOpen::NXObject, public virtual NXOpen::IProfile, public virtual NXOpen::IFitTo
        {
            /** Boolean operation type. */
            public: enum BooleanType
            {
                BooleanTypeCreate/** Create */,
                BooleanTypeUnite/** Unite */,
                BooleanTypeSubtract/** Subtract */,
                BooleanTypeIntersect/** Intersect */,
                BooleanTypeEmbossNormalSide/** Emboss, keep tool on normal side of sheet */ = 8,
                BooleanTypeEmbossOppositeNormalSide/** Emboss, keep tool opposite of normal side of sheet */
            };

            /** Diagnostic type */
            public: enum DiagnosticType
            {
                DiagnosticTypeInformation/** Information alert */ = 1,
                DiagnosticTypeWarning/** Warning */
            };

            private: FeatureImpl * m_feature_impl;
            private: friend class  _FeatureBuilder;
            protected: Feature();
            public: ~Feature();
            /** Returns the expressions created by the feature. The order in which expressions are returned is not significant and may change  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: std::vector<NXOpen::Expression *> GetExpressions
            (
            );
            /** Returns the immediate parent features. The order in which parents are returned is not significant and may change  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> GetParents
            (
            );
            /** Returns the immediate child features. The order in which children are returned is not significant and may change  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: std::vector<NXOpen::Features::Feature *> GetChildren
            (
            );
            /** Returns all immediate child features. The order in which children are returned is not significant and may change  @return  
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: std::vector<NXOpen::Features::Feature *> GetAllChildren
            (
            );
            /**Returns  the algorithm version of the feature 
             <br>  @deprecated Deprecated in NX8.5.0.  Algorithm version is for internal use only. There is no replacement for this method. <br>  

             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NX_DEPRECATED("Deprecated in NX8.5.0.  Algorithm version is for internal use only. There is no replacement for this method.") int AlgorithmVersion
            (
            );
            /**Returns  the location of the feature 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Point3d Location
            (
            );
            /**Returns  the timestamp of the feature 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int Timestamp
            (
            );
            /**Returns  the feature type 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FeatureType
            (
            );
            /** Highlight the body created by the feature 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void Highlight
            (
            );
            /** Unhighlight the body created by the feature 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void Unhighlight
            (
            );
            /** Make current feature 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void MakeCurrentFeature
            (
            );
            /** Show the body created by the feature. The feature curves are to be moved to work layer if the curves are non-selectable when move_curves is true.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void ShowBody
            (
                bool moveCurves /** move curves */ 
            );
            /** Show the body created by the parent feature. The parent curves of feature are to be moved to work layer if the curves are non-selectable when move_curves is true.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void ShowParents
            (
                bool moveCurves /** move curves */ 
            );
            /** Hide the body created by the feature 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void HideBody
            (
            );
            /** Hide the body created by the parent feature 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void HideParents
            (
            );
            /** Suppress the feature 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void Suppress
            (
            );
            /** Unsuppress the feature 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void Unsuppress
            (
            );
            /**Returns  the suppression status of the feature 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool Suppressed
            (
            );
            /** Returns the entities created by the feature. The order in which entities are returned is not significant and may change.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: std::vector<NXOpen::NXObject *> GetEntities
            (
            );
            /** Returns the feature error messages. error_messages can be NULL. The order in which error messags are returned is not significant and may change  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetFeatureErrorMessages
            (
            );
            /** Returns the feature informational messages. info_messages can be NULL. The order in which informational messags are returned is not significant and may change @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetFeatureInformationalMessages
            (
            );
            /** Delete all informational alerts from the features 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteInformationalAlerts
            (
            );
            /** Delete all warning alerts from the features 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteWarningAlerts
            (
            );
            /** Returns the feature warning messages. warning_messages can be NULL. The order in which warning messags are returned is not significant and may change  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetFeatureWarningMessages
            (
            );
            /** Returns the feature clue messages. clue_messages can be NULL. The order in which clue messags are returned is not significant and may change  @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetFeatureClueMessages
            (
            );
            /** Delete all clue alerts from the features 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void DeleteClueAlerts
            (
            );
            /** Returns both clue and hint messages of the feature. num_clueHint can be NULL. The order in which clue and hint messags are returned is not significant and may change  @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetFeatureClueHintMessages
            (
            );
            /** Returns the feature hint messages. hint_messages can be NULL. The order in which hint messags are returned is not significant and may change  @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetFeatureHintMessages
            (
            );
            /** Delete all clue alerts from the features 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void DeleteHintAlerts
            (
            );
            /** Make the parent sketch internal if referenced only by this feature. 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void MakeSketchInternal
            (
            );
            /** Make the parent sketch external for reuse by other features. 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void MakeSketchExternal
            (
            );
            /** Remove all the feature faces before a NoHistory mode edit. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void RemoveForEdit
            (
                bool dependent /** dependent */ 
            );
            /** Remove Local feature parameters in history free mode. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void RemoveParameters
            (
            );
            /**Returns  true if the feature is internal. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: bool IsInternal
            (
            );
            /** Show all feature dimensions of a feature. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void ShowDimensions
            (
            );
            /** Returns the displayed name of the feature.  @return  displayed name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetFeatureName
            (
            );
            /** Queries a feature for list of its sections. The order in which sections are returned is not significant and may change  @return  Array of sections 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: std::vector<NXOpen::Section *> GetSections
            (
            );
            /** Set a feature group as active group. If input is NULL, set no feature group active 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetGroupActive
            (
                bool active /** active */ 
            );
            /** Log a diagnostic alert for this feature 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void LogDiagnostic
            (
                int errorCode /** errorcode */ ,
                const NXString & message /** message */ ,
                NXOpen::Features::Feature::DiagnosticType diagnosticType /** diagnostictype */ 
            );
            /** Log a diagnostic alert for this feature 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            void LogDiagnostic
            (
                int errorCode /** errorcode */ ,
                const char * message /** message */ ,
                NXOpen::Features::Feature::DiagnosticType diagnosticType /** diagnostictype */ 
            );
            /**Returns  true if the feature is a contained feature. If it is a contained feature, use the property @link NXOpen::Features::Feature::ContainerFeature NXOpen::Features::Feature::ContainerFeature@endlink  to get the container feature for this feature. 
             <br>  @deprecated Deprecated in NX9.0.0.  Use  @link NXOpen::Features::Feature::ContainerFeature NXOpen::Features::Feature::ContainerFeature@endlink  and check if it is NULL instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use  NXOpen::Features::Feature::ContainerFeature and check if it is NULL instead.") bool IsContainedFeature
            (
            );
            /**Returns  the container feature for this feature. Will be set to NULL if this feature is not a contained feature. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::IContainerFeature * ContainerFeature
            (
            );
            /** Change Boolean Type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void ChangeBooleanType
            (
            );
            /** The feature color  @return  
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * GetFeatureColor
            (
            );
            /** Break Wave Link Feature  @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: bool BreakWaveLink
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
