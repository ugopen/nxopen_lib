#ifndef NXOpen_ANNOTATIONS_HOLECALLOUTSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_HOLECALLOUTSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_HoleCalloutSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class HoleCalloutSettingsBuilder;
    }
    namespace Annotations
    {
        class StyleBuilder;
    }
    namespace Assemblies
    {
        class Component;
    }
    namespace Features
    {
        class Feature;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class View;
    namespace Annotations
    {
        class _HoleCalloutSettingsBuilderBuilder;
        class HoleCalloutSettingsBuilderImpl;
        /** Represents a @link NXOpen::Annotations::HoleCalloutSettingsBuilder NXOpen::Annotations::HoleCalloutSettingsBuilder@endlink , this builder contains list(s) of parameter(s) for feature(s).
            Each feature is categorized under a feature type, indicated by @link NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype@endlink .
            For each feature, parameter(s) are arranged in an array, with a starting index of zero. <br> This is a sub-builder class and cannot be directly instantiated  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  HoleCalloutSettingsBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** This reprensent the option that indicates a type of hole features.*/
            public: enum Featuretype
            {
                FeaturetypeGeneralHole/** general hole */ ,
                FeaturetypeDrillSizeHole/** drill size hole */ ,
                FeaturetypeScrewClearanceHole/** screw clearance hole */ ,
                FeaturetypeThreadedHole/** threaded hole */ ,
                FeaturetypeSymbolicThread/** symbolic thread */ ,
                FeaturetypeNone/** none */ 
            };

            /** This reprensent the option that indicates a type of hole feature parameters.*/
            public: enum Parametertype
            {
                ParametertypeDiameter/** diameter */ ,
                ParametertypeDepth/** depth */ ,
                ParametertypeCounterBoreDiameter/** counter bore diameter */ ,
                ParametertypeCounterBoreDepth/** counter bore depth */ ,
                ParametertypeCounterSinkDiameter/** counter sink diameter */ ,
                ParametertypeCounterSinkAngle/** counter sink angle */ ,
                ParametertypeTaperAngle/** taper angle */ ,
                ParametertypePatternFeatureCount/** pattern feature count */ ,
                ParametertypeScrewSize/** screw size */ ,
                ParametertypeFit/** fit */ ,
                ParametertypeLineBreak/** line break */ ,
                ParametertypeThreadSize/** thread size */ ,
                ParametertypeThreadDepth/** thread depth */ ,
                ParametertypePitch/** pitch */ ,
                ParametertypeAngle/** angle */ ,
                ParametertypeMinorDiameter/** minor diameter */ ,
                ParametertypeMajorDiameter/** major diameter */ ,
                ParametertypeTapDrillDiameter/** tap drill diameter */ ,
                ParametertypeCallout/** callout */ ,
                ParametertypeLength/** length */ ,
                ParametertypeShaftSize/** shaft size */ ,
                ParametertypeNone/** none */ 
            };

            /** This reprensent the option that indicates the position for the leader to attach to.*/
            public: enum LeaderAttachment
            {
                LeaderAttachmentTop/** top */ ,
                LeaderAttachmentBelowBottomExtendedToMaximum/** below bottom extended to maximum */ ,
                LeaderAttachmentBelowTopExtendedToMaximum/** below top extended to maximum */ 
            };

            private: HoleCalloutSettingsBuilderImpl * m_holecalloutsettingsbuilder_impl;
            private: friend class  _HoleCalloutSettingsBuilderBuilder;
            protected: HoleCalloutSettingsBuilder();
            public: ~HoleCalloutSettingsBuilder();
            /** Gets the list of features.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype> GetListOfFeatures
            (
            );
            /** Gets the list of parameters for feature type.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> GetListOfParameters
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ 
            );
            /** Reorder the parameters based on the input. This function only works if all input parameters exist in the builder and all builder parameters exist in the input.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: bool ReorderParameters
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                const std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> & parameters /** parameters */ 
            );
            /** If the position of the nth hole feature parameter of feature type can be shifted up, shifts it up by one.
                    To shift up the third parameter of feature type @link NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole@endlink , for instance, use the API:
                    @link NXOpen::Annotations::HoleCalloutSettingsBuilder::ShiftUp NXOpen::Annotations::HoleCalloutSettingsBuilder::ShiftUp@endlink (@link NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole@endlink , 2)
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void ShiftUp
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ 
            );
            /** If the position of the nth hole feature parameter of feature type can be shifted down, shifts it down by one.
                    To shift down the first parameter of feature type @link NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole@endlink , for instance, use the API:
                    @link NXOpen::Annotations::HoleCalloutSettingsBuilder::ShiftDown NXOpen::Annotations::HoleCalloutSettingsBuilder::ShiftDown@endlink (@link NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole@endlink , 0)
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void ShiftDown
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ 
            );
            /** If a line break can be inserted immediately after the nth hole feature parameter of feature type, inserts a line break at that position.
                    To insert a line break after the fourth parameter of feature type @link NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole@endlink , for instance, use the API:
                    @link NXOpen::Annotations::HoleCalloutSettingsBuilder::InsertLineBreak NXOpen::Annotations::HoleCalloutSettingsBuilder::InsertLineBreak@endlink (@link NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole@endlink , 3)
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void InsertLineBreak
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ 
            );
            /** If the nth hole feature parameter of feature type is a line break and it can be deleted, deletes it.
                    To delete the second parameter of feature type @link NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole@endlink , for instance, use the API:
                    @link NXOpen::Annotations::HoleCalloutSettingsBuilder::DeleteLineBreak NXOpen::Annotations::HoleCalloutSettingsBuilder::DeleteLineBreak@endlink (@link NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole@endlink , 1)
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void DeleteLineBreak
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ 
            );
            /** Gets the display status of the nth hole feature parameter of feature type.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetNthParameterDisplay
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ 
            );
            /** Sets the display status of the nth hole feature parameter of feature type.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetNthParameterDisplay
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ ,
                bool parameterDisplay /** parameterdisplay */ 
            );
            /** Sets the parameter expression of the nth hole feature parameter of feature type.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNthParameterValue
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ ,
                const NXString & value /** value */ 
            );
            /** Sets the parameter expression of the nth hole feature parameter of feature type.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetNthParameterValue
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ ,
                const char * value /** value */ 
            );
            /** Gets the parameter expression of the nth hole feature parameter of feature type.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetNthParameterValue
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ 
            );
            /** Gets the parameter string representation of the nth hole feature parameter of feature type.
                    Differs from @link NXOpen::Annotations::HoleCalloutSettingsBuilder::GetNthParameterValue NXOpen::Annotations::HoleCalloutSettingsBuilder::GetNthParameterValue@endlink  in that certain parameters which do not have a parameter value still have
                    a string representation. This API will return that string representation instead of an empty string.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString GetNthParameterValueString
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ 
            );
            /** If the prefix of the nth hole feature parameter of feature type can be edited, sets its prefix.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetNthParameterPrefix
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ ,
                std::vector<NXString> & lines /** List of new lines */
            );
            /** If the nth hole feature parameter of feature type can have prefix, gets its prefix. @return  List of lines 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetNthParameterPrefix
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ 
            );
            /** If the suffix of the nth hole feature parameter of feature type can be edited, sets its suffix.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetNthParameterSuffix
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ ,
                std::vector<NXString> & lines /** List of new lines */
            );
            /** If the nth hole feature parameter of feature type can have suffix, gets its suffix. @return  List of lines 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetNthParameterSuffix
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ 
            );
            /** Gets the parameter style of the nth hole feature parameter of feature type.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::StyleBuilder * GetNthParameterStyle
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                int nth /** nth */ 
            );
            /** Reset the builder data based on a feature if the feature is a hole feature.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void ResetFromFeature
            (
                NXOpen::Features::Feature * feature /** feature */ ,
                NXOpen::Assemblies::Component * partOccurrence /** partoccurrence */ ,
                NXOpen::View * view /** view */ ,
                const NXOpen::Point3d & pickPoint /** selected object point*/
            );
            /** Gets the parameter space factor, which defines the horizontal space between parameters.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double GetParameterSpaceFactor
            (
            );
            /** Sets the parameter space factor, which defines the horizontal space between parameters. The parameter space factor cannot be less than zero.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetParameterSpaceFactor
            (
                double parameterSpaceFactor /** parameterspacefactor */ 
            );
            /** Gets the line space factor, which defines the vertical space between parameters.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double GetLineSpaceFactor
            (
            );
            /** Sets the line space factor, which defines the vertical space between parameters. The line space factor cannot be less than zero.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLineSpaceFactor
            (
                double lineSpaceFactor /** linespacefactor */ 
            );
            /** Gets the leader attachment, which decides where the leader is attached to the call out.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::HoleCalloutSettingsBuilder::LeaderAttachment GetLeaderAttachment
            (
            );
            /** Sets the leader attachment, which decides where the leader is attached to the call out.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLeaderAttachment
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::LeaderAttachment leaderAttachment /** leaderattachment */ 
            );
            /** Get Through Hole Text String.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetThroughHoleTextOfType
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ 
            );
            /** Set Through Hole Text String. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetThroughHoleTextOfType
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                const NXString & throughHoleTextString /** throughholetextstring */ 
            );
            /** Set Through Hole Text String. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetThroughHoleTextOfType
            (
                NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType /** featuretype */ ,
                const char * throughHoleTextString /** throughholetextstring */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
