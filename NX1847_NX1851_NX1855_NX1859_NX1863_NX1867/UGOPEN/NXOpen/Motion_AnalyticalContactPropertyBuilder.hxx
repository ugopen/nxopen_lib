#ifndef NXOpen_MOTION_ANALYTICALCONTACTPROPERTYBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_ANALYTICALCONTACTPROPERTYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_AnalyticalContactPropertyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion_CustomizedMaterialBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class AnalyticalContactPropertyBuilder;
    }
    class Builder;
    class Expression;
    namespace Motion
    {
        class CustomizedMaterialBuilder;
    }
    namespace Motion
    {
        class MotionFunction;
    }
    namespace Motion
    {
        class SelectFieldData;
    }
    namespace Motion
    {
        class _AnalyticalContactPropertyBuilderBuilder;
        class AnalyticalContactPropertyBuilderImpl;
        /** Represents a @link Motion::AnalyticalContactProperty Motion::AnalyticalContactProperty@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Motion::AnalyticalContactPropertyCollection::CreateAnalyticalContactPropertyBuilder  NXOpen::Motion::AnalyticalContactPropertyCollection::CreateAnalyticalContactPropertyBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DampingValue.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        FirstCustomizedMaterial.Density.Value </td> <td> 
         
        7.8e-6 (millimeters part), 7.3e-4 (inches part) </td> </tr> 

        <tr><td> 
         
        FirstCustomizedMaterial.PoissonRatio.Value </td> <td> 
         
        0.3 </td> </tr> 

        <tr><td> 
         
        FirstCustomizedMaterial.YoungModulus.Value </td> <td> 
         
        2e+8 (millimeters part), 2.9e+7 (inches part) </td> </tr> 

        <tr><td> 
         
        FrictionCoefficientOption </td> <td> 
         
        Expression </td> </tr> 

        <tr><td> 
         
        FrictionCoefficientValue.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RestitutionCoefficient.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        StiffnessValue.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        TransitionVelocity.Value </td> <td> 
         
        10 (millimeters part), 0.393701 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  AnalyticalContactPropertyBuilder : public NXOpen::Builder
        {
            /** Friction Coefficient Type */
            public: enum FrictionCoefficientType
            {
                FrictionCoefficientTypeExpression/** expression */ ,
                FrictionCoefficientTypeFunction/** function */ ,
                FrictionCoefficientTypeProfile/** profile */ 
            };

            /** Stiffness Type */
            public: enum StiffnessType
            {
                StiffnessTypeExpression/** expression */ ,
                StiffnessTypeFunction/** function */ ,
                StiffnessTypeProfile/** profile */ ,
                StiffnessTypeExpressionAndFunction/** expression and function */ ,
                StiffnessTypeExpressionAndProfile/** expression and profile */ 
            };

            /** Damping Type */
            public: enum DampingType
            {
                DampingTypeExpression/** expression */ ,
                DampingTypeFunction/** function */ ,
                DampingTypeProfile/** profile */ ,
                DampingTypeExpressionAndFunction/** expression and function */ ,
                DampingTypeExpressionAndProfile/** expression and profile */ 
            };

            private: AnalyticalContactPropertyBuilderImpl * m_analyticalcontactpropertybuilder_impl;
            private: friend class  _AnalyticalContactPropertyBuilderBuilder;
            protected: AnalyticalContactPropertyBuilder();
            public: ~AnalyticalContactPropertyBuilder();
            /**Returns  the first customized material 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::CustomizedMaterialBuilder * FirstCustomizedMaterial
            (
            );
            /**Returns  the second customized material 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::CustomizedMaterialBuilder * SecondCustomizedMaterial
            (
            );
            /**Returns  the restitution coefficient 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * RestitutionCoefficient
            (
            );
            /**Returns  the stiffness value 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * StiffnessValue
            (
            );
            /**Returns  the stiffness function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::MotionFunction * StiffnessCurve
            (
            );
            /**Sets  the stiffness function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStiffnessCurve
            (
                NXOpen::Motion::MotionFunction * stiffnessCurve /** stiffnesscurve */ 
            );
            /**Returns  the damping value 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * DampingValue
            (
            );
            /**Returns  the damping function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::MotionFunction * DampingCurve
            (
            );
            /**Sets  the damping function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDampingCurve
            (
                NXOpen::Motion::MotionFunction * dampingCurve /** dampingcurve */ 
            );
            /**Returns  the friction coefficient option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::AnalyticalContactPropertyBuilder::FrictionCoefficientType FrictionCoefficientOption
            (
            );
            /**Sets  the friction coefficient option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFrictionCoefficientOption
            (
                NXOpen::Motion::AnalyticalContactPropertyBuilder::FrictionCoefficientType frictionCoefficient /** frictioncoefficient */ 
            );
            /**Returns  the friction coefficient value 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * FrictionCoefficientValue
            (
            );
            /**Returns  the friction coefficient function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::MotionFunction * FrictionCoefficientCurve
            (
            );
            /**Sets  the friction coefficient function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFrictionCoefficientCurve
            (
                NXOpen::Motion::MotionFunction * frictionCoefficient /** frictioncoefficient */ 
            );
            /**Returns  the transition velocity 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * TransitionVelocity
            (
            );
            /**Returns  the name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the stiffness type.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AnalyticalContactPropertyBuilder::StiffnessType StiffnessOption
            (
            );
            /**Sets  the stiffness type.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStiffnessOption
            (
                NXOpen::Motion::AnalyticalContactPropertyBuilder::StiffnessType type /** type */ 
            );
            /**Returns  the stiffness Profile.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectFieldData * StiffnessProfile
            (
            );
            /**Returns  the damping type.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AnalyticalContactPropertyBuilder::DampingType DampingOption
            (
            );
            /**Sets  the damping type.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDampingOption
            (
                NXOpen::Motion::AnalyticalContactPropertyBuilder::DampingType type /** type */ 
            );
            /**Returns  the damping Profile.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectFieldData * DampingProfile
            (
            );
            /**Returns  the friction coefficient Profile.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectFieldData * FrictionCoefficientProfile
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
