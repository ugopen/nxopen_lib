#ifndef NXOpen_CAE_DURSPECIALISTRESULTTABLETOGGLES_HXX_INCLUDED
#define NXOpen_CAE_DURSPECIALISTRESULTTABLETOGGLES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurSpecialistResultTableToggles.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DurSpecialistResultTableToggles;
    }
    namespace CAE
    {
        class DurSpecialistResultTableTogglesImpl;
        /** Represents a @link NXOpen::CAE::DurSpecialistResultTableToggles NXOpen::CAE::DurSpecialistResultTableToggles@endlink .  <br> To create a new instance of this class, use @link NXOpen::CAE::DurSpecialistSolutionCollection::CreateResultToggles  NXOpen::CAE::DurSpecialistSolutionCollection::CreateResultToggles @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DurSpecialistResultTableToggles : public NXOpen::TransientObject
        {
            private: DurSpecialistResultTableTogglesImpl * m_durspecialistresulttabletoggles_impl;
            /// \cond NX_NO_DOC 
            public: explicit DurSpecialistResultTableToggles(void *ptr);
            /// \endcond 
            /**Returns  the toggle that determines whether or not to show cyclic fatigue damage results in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleCyclicFatigueDamage
            (
            );
            /**Sets  the toggle that determines whether or not to show cyclic fatigue damage results in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleCyclicFatigueDamage
            (
                bool toggleCyclicFatigueDamage /** togglecyclicfatiguedamage */ 
            );
            /**Returns  the toggle that determines whether or not to show fatigue life results in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleFatigueLife
            (
            );
            /**Sets  the toggle that determines whether or not to show fatigue life results in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleFatigueLife
            (
                bool toggleFatigueLife /** togglefatiguelife */ 
            );
            /**Returns  the toggle that determines whether or not to show fatigue lifetime results in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleFatigueLifetime
            (
            );
            /**Sets  the toggle that determines whether or not to show fatigue lifetime results in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleFatigueLifetime
            (
                bool toggleFatigueLifetime /** togglefatiguelifetime */ 
            );
            /**Returns  the toggle that determines whether or not to show max. stress amplitude results in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleMaxStressAmplitude
            (
            );
            /**Sets  the toggle that determines whether or not to show max. stress amplitude results in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleMaxStressAmplitude
            (
                bool toggleMaxStressAmplitude /** togglemaxstressamplitude */ 
            );
            /**Returns  the toggle that determines whether or not to show mean stress results in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleMeanStress
            (
            );
            /**Sets  the toggle that determines whether or not to show mean stress results in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleMeanStress
            (
                bool toggleMeanStress /** togglemeanstress */ 
            );
            /**Returns  the toggle that determines whether or not to show min. safety factors in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleMinSafetyFactor
            (
            );
            /**Sets  the toggle that determines whether or not to show min. safety factors in the table(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleMinSafetyFactor
            (
                bool toggleMinSafetyFactor /** toggleminsafetyfactor */ 
            );
            /**Returns  the toggle that determines whether or not to show a summary of critical results for all local definitions 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleLocalDefinition
            (
            );
            /**Sets  the toggle that determines whether or not to show a summary of critical results for all local definitions 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleLocalDefinition
            (
                bool toggleLocalDefinition /** togglelocaldefinition */ 
            );
            /**Returns  the toggle that determines whether or not to show a summary of critical results for all events 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleEvent
            (
            );
            /**Sets  the toggle that determines whether or not to show a summary of critical results for all events 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleEvent
            (
                bool toggleEvent /** toggleevent */ 
            );
            /**Returns  the toggle that determines whether or not to show a summary of critical results for all time steps 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleResultStep
            (
            );
            /**Sets  the toggle that determines whether or not to show a summary of critical results for all time steps 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleResultStep
            (
                bool toggleResultStep /** toggleresultstep */ 
            );
            /**Returns  the toggle that determines whether or not to show a summary of critical results for single events 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleSingleEventResults
            (
            );
            /**Sets  the toggle that determines whether or not to show a summary of critical results for single events 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleSingleEventResults
            (
                bool toggleSingleEventResults /** togglesingleeventresults */ 
            );
            /**Returns  the toggle that determines whether or not to show a summary of critical results for repeated events 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleRepeatedEventResults
            (
            );
            /**Sets  the toggle that determines whether or not to show a summary of critical results for repeated events 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleRepeatedEventResults
            (
                bool toggleRepeatedEventResults /** togglerepeatedeventresults */ 
            );
            /**Returns  the toggle that determines whether or not to show a summary of critical results for accumulated events 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleAccumulatedEventResults
            (
            );
            /**Sets  the toggle that determines whether or not to show a summary of critical results for accumulated events 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToggleAccumulatedEventResults
            (
                bool toggleAccumulatedEventResults /** toggleaccumulatedeventresults */ 
            );
            /** Frees the object from memory.  After this method is called,
                        it is illegal to use the object. In .NET, this method is automatically
                        called when the object is deleted by the garbage collector. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~DurSpecialistResultTableToggles();
            /** Deletes the result table toggles entity. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void Delete
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
