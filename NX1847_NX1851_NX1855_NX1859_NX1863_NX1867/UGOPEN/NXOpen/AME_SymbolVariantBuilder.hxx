#ifndef NXOpen_AME_SYMBOLVARIANTBUILDER_HXX_INCLUDED
#define NXOpen_AME_SYMBOLVARIANTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_SymbolVariantBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class SymbolVariantBuilder;
    }
    class Builder;
    namespace AME
    {
        class _SymbolVariantBuilderBuilder;
        class SymbolVariantBuilderImpl;
        /** Represents a Symbol Variant creation class Builder   <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateSymbolVariantBuilder  NXOpen::AME::AMEManager::CreateSymbolVariantBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  SymbolVariantBuilder : public NXOpen::Builder
        {
            /** represents the type of Symbol Variant */
            public: enum Variant
            {
                VariantA/** a */ ,
                VariantB/** b */ ,
                VariantC/** c */ ,
                VariantD/** d */ ,
                VariantE/** e */ ,
                VariantF/** f */ ,
                VariantG/** g */ ,
                VariantH/** h */ ,
                VariantContactBlockInPath/** contact block in path */ ,
                VariantContactBlockOnComponent/** contact block on component */ 
            };

            private: SymbolVariantBuilderImpl * m_symbolvariantbuilder_impl;
            private: friend class  _SymbolVariantBuilderBuilder;
            protected: SymbolVariantBuilder();
            public: ~SymbolVariantBuilder();
            /**Returns  the variant type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SymbolVariantBuilder::Variant SymbolVariant
            (
            );
            /**Sets  the variant type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSymbolVariant
            (
                NXOpen::AME::SymbolVariantBuilder::Variant symbolVariant /** symbolvariant */ 
            );
            /**Returns  the variant description 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString Description
            (
            );
            /**Sets  the variant description 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets  the variant description 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /**Returns  the flag for edit mode 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool EditMode
            (
            );
            /**Sets  the flag for edit mode 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetEditMode
            (
                bool editMode /** editmode */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
