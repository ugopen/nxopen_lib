#ifndef NXOpen_AME_PLCVENDORSYMBOLBUILDER_HXX_INCLUDED
#define NXOpen_AME_PLCVENDORSYMBOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PlcVendorSymbolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_PlcTypes.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PlcVendorSymbolBuilder;
    }
    namespace AME
    {
        class SelectAMEBaseNode;
    }
    class Builder;
    namespace AME
    {
        class _PlcVendorSymbolBuilderBuilder;
        class PlcVendorSymbolBuilderImpl;
        /** Represents a Subnet creation class Builder  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreatePlcVendorSymbolBuilder  NXOpen::AME::AMEManager::CreatePlcVendorSymbolBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PlcVendorSymbolBuilder : public NXOpen::Builder
        {
            private: PlcVendorSymbolBuilderImpl * m_plcvendorsymbolbuilder_impl;
            private: friend class  _PlcVendorSymbolBuilderBuilder;
            protected: PlcVendorSymbolBuilder();
            public: ~PlcVendorSymbolBuilder();
            /**Returns  the selection ParentObject (parent of the plc symbol) 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNode * SelectionChannel
            (
            );
            /**Returns  the EnumDataLength 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int EnumDataLength
            (
            );
            /**Sets  the EnumDataLength 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnumDataLength
            (
                int enum01 /** enum01 */ 
            );
            /**Returns  the Indicator 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Indicator
            (
            );
            /**Sets  the Indicator 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIndicator
            (
                const NXString & indicator /** indicator */ 
            );
            /**Sets  the Indicator 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetIndicator
            (
                const char * indicator /** indicator */ 
            );
            /**Returns  the byte 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int ByteOffset
            (
            );
            /**Sets  the byte 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByteOffset
            (
                int byteOffset /** byteoffset */ 
            );
            /**Returns  the bit 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int BitOffset
            (
            );
            /**Sets  the bit 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBitOffset
            (
                int bitOffset /** bitoffset */ 
            );
            /**Returns  the type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::AME::PlcDataType DataType
            (
            );
            /**Sets  the type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDataType
            (
                NXOpen::AME::PlcDataType type /** type */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
