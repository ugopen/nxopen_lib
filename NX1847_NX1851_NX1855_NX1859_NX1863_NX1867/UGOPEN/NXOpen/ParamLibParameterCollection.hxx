#ifndef NXOpen_PARAMLIBPARAMETERCOLLECTION_HXX_INCLUDED
#define NXOpen_PARAMLIBPARAMETERCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ParamLibParameterCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ParamLibParameterCollection;
    class ParamLibParameterLibraryManager;
    class ParamLibParameter;
    class ParamLibLibraryManagerBuilder;
    class ParamLibParameterBuilder;
    class ParamLibParameterListBuilder;
    class ParamLibParameterCollectionImpl;
    /**  @brief  Represents the collection of all @link ParamLibParameter ParamLibParameter@endlink  objects in this Part. 

       <br> To obtain an instance of this class, refer to @link NXOpen::ParamLibParameterLibraryManager  NXOpen::ParamLibParameterLibraryManager @endlink  <br> 
     <br>  Created in NX1847.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ParamLibParameterCollection : public NXOpen::TaggedObjectCollection
    {
        private: ParamLibParameterCollectionImpl * m_paramlibparametercollection_impl;
        private: NXOpen::ParamLibParameterLibraryManager* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit ParamLibParameterCollection(NXOpen::ParamLibParameterLibraryManager *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~ParamLibParameterCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::ParamLibParameterCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::ParamLibParameter *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(nullptr), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::ParamLibParameterCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * () const;
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::ParamLibParameterCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Finds the @link NXOpen::ParamLibParameter NXOpen::ParamLibParameter@endlink  with the given identifier as recorded in a journal.
                An exception will be thrown if no object can be found with the given journal identifier.  @return  parameter found 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameter * FindObject
        (
            const NXString & journalIdentifier /** Identifier to be found */
        );
        /** Finds the @link NXOpen::ParamLibParameter NXOpen::ParamLibParameter@endlink  with the given identifier as recorded in a journal.
                An exception will be thrown if no object can be found with the given journal identifier.  @return  parameter found 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::ParamLibParameter * FindObject
        (
            const char * journalIdentifier /** Identifier to be found */
        );
        /** Creates a @link NXOpen::ParamLibParameterListBuilder NXOpen::ParamLibParameterListBuilder@endlink  that controls the parameters list UI block look and feel as well as capturing the interactions so the values/settings can be journaled.
                 @return  created @link NXOpen::ParamLibParameterListBuilder NXOpen::ParamLibParameterListBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameterListBuilder * CreateListBlockBuilder
        (
        );
        /** Creates a @link NXOpen::ParamLibParameterListBuilder NXOpen::ParamLibParameterListBuilder@endlink  that controls the parameters list UI block look and feel as well as capturing the interactions so the values/settings can be journaled.
                 @return  created @link NXOpen::ParamLibParameterListBuilder NXOpen::ParamLibParameterListBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameterListBuilder * CreateListBlockBuilder1
        (
            std::vector<NXString> & pcLibTypeNeuNames /** Array of neutral names of valid parameter library types */
        );
        /** Creates a ParamLibParameterBuilder used to edit parameters.
                 @return  created @link NXOpen::ParamLibParameterBuilder NXOpen::ParamLibParameterBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameterBuilder * CreateParameterEditBuilder
        (
            NXOpen::ParamLibParameter * parameterTag /** @link NXOpen::ParamLibParameter NXOpen::ParamLibParameter@endlink  to be edited   */
        );
        /** Creates a ParamLibParameterBuilder used to inspect parameters.
                 @return  created @link NXOpen::ParamLibParameterBuilder NXOpen::ParamLibParameterBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameterBuilder * CreateParameterInspectBuilder
        (
            NXOpen::ParamLibParameter * parameterTag /** @link NXOpen::ParamLibParameter NXOpen::ParamLibParameter@endlink  to be inspected   */
        );
        /** Creates a ParamLibParameterBuilder used to create a parameter of a given type of a given type of parameter library.
                 @return  created @link NXOpen::ParamLibParameterBuilder NXOpen::ParamLibParameterBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameterBuilder * CreateParameterBuilder
        (
            const NXString & libTypeNeutralName /** Neutral name of parameter library type  */,
            int parameterType /** Type of @link NXOpen::ParamLibParameter NXOpen::ParamLibParameter@endlink  to be created  */
        );
        /** Creates a ParamLibParameterBuilder used to create a parameter of a given type of a given type of parameter library.
                 @return  created @link NXOpen::ParamLibParameterBuilder NXOpen::ParamLibParameterBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::ParamLibParameterBuilder * CreateParameterBuilder
        (
            const char * libTypeNeutralName /** Neutral name of parameter library type  */,
            int parameterType /** Type of @link NXOpen::ParamLibParameter NXOpen::ParamLibParameter@endlink  to be created  */
        );
        /** Creates a ParamLibLibraryManagerBuilder used by the parameter library manager UI to control the look and feel as well as capturing the interactions so the values/settings can be journaled.
                 @return  created @link NXOpen::ParamLibLibraryManagerBuilder NXOpen::ParamLibLibraryManagerBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibLibraryManagerBuilder * CreateParameterLibmgrBuilder
        (
            std::vector<NXString> & pcLibTypeNeuNames /** Array of neutral names of valid parameter library types */
        );
        /** Creates a non-editable parameter in the part from a parameter library file definition.  The parameter is identified by the library name and the unique parameter name.  
                    If the library name is not fully qualified, it will attempt to find a parameter library with this name in the current directory, followed by the specified 
                    customer defaults values for the user and site parameter libraries. If the customer defaults are using the file format, it will look in the directory where 
                    the specified file is located.
                 @return  the loaded parameter  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameter * LoadFromParamplLibrary
        (
            const NXString & libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const NXString & parameterName /** the parameter name */
        );
        /** Creates a non-editable parameter in the part from a parameter library file definition.  The parameter is identified by the library name and the unique parameter name.  
                    If the library name is not fully qualified, it will attempt to find a parameter library with this name in the current directory, followed by the specified 
                    customer defaults values for the user and site parameter libraries. If the customer defaults are using the file format, it will look in the directory where 
                    the specified file is located.
                 @return  the loaded parameter  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::ParamLibParameter * LoadFromParamplLibrary
        (
            const char * libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const char * parameterName /** the parameter name */
        );
        /** Creates a non-editable parameter in the part from a NX parameter library parameter definition.
                 @return  the loaded parameter  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameter * LoadFromNxparampllibrary
        (
            const NXString & parameterName /** the unique parameter name from within this Library */
        );
        /** Creates a non-editable parameter in the part from a NX parameter library parameter definition.
                 @return  the loaded parameter  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::ParamLibParameter * LoadFromNxparampllibrary
        (
            const char * parameterName /** the unique parameter name from within this Library */
        );
        /** Checks if a library parameter is loaded into a part file or not. If it is, the loaded parameter is returned.
                 @return  the loaded parameter  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameter * GetLoadedLibraryParameter
        (
            const NXString & pcLibName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const NXString & pcParamName /** the parameter name */
        );
        /** Checks if a library parameter is loaded into a part file or not. If it is, the loaded parameter is returned.
                 @return  the loaded parameter  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::ParamLibParameter * GetLoadedLibraryParameter
        (
            const char * pcLibName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const char * pcParamName /** the parameter name */
        );
        /** Creates an editable parameter (copy) in the part from a library parameter definition.
                 @return  the copied parameter  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameter * CopyParameterFromLibrary
        (
            const NXString & libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const NXString & libraryReference /** the parameter name/identifier */
        );
        /** Creates an editable parameter (copy) in the part from a library parameter definition.
                 @return  the copied parameter  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::ParamLibParameter * CopyParameterFromLibrary
        (
            const char * libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const char * libraryReference /** the parameter name/identifier */
        );
        /** Creates an editable parameter (copy) in the part from a library parameter definition.
                 @return  the copied parameter  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameter * CopyParameterFromLibrary
        (
            const NXString & libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const NXString & libraryReference /** the parameter name/identifier */,
            bool retainParentPedigree /** true indicates that the copied parameter should retain information about what library parameter it came from */
        );
        /** Creates an editable parameter (copy) in the part from a library parameter definition.
                 @return  the copied parameter  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::ParamLibParameter * CopyParameterFromLibrary
        (
            const char * libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const char * libraryReference /** the parameter name/identifier */,
            bool retainParentPedigree /** true indicates that the copied parameter should retain information about what library parameter it came from */
        );
        /** Writes out parameters to a parameter library file. These parameters can be local parameter definitions or parameter definitions from other parameter libraries.
                    The combination of the parameter name and library name identify a parameter definition. If the parameter definition is for a local parameter, the name is 
                    specified and the library name is specified as "". Write access is needed for the Exported library. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void OutputParametersToLibrary
        (
            std::vector<NXString> & pcParamNames /** Array of identifiers of the parameters to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the parameter names */,
            const NXString & pcExportedLibName /** The library to write the parameter definitions to           */
        );
        /** Writes out parameters to a parameter library file. These parameters can be local parameter definitions or parameter definitions from other parameter libraries.
                    The combination of the parameter name and library name identify a parameter definition. If the parameter definition is for a local parameter, the name is 
                    specified and the library name is specified as "". Write access is needed for the Exported library. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void OutputParametersToLibrary
        (
            std::vector<NXString> & pcParamNames /** Array of identifiers of the parameters to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the parameter names */,
            const char * pcExportedLibName /** The library to write the parameter definitions to           */
        );
        /** Writes out parameters to a parameter library file. These parameters can be local parameter definitions or parameter definitions
                    from other parameter libraries. The combination of the parameter name and library name identify a parameter definition. If
                    the parameter definition is for a local parameter, the name is specified and the library name is specified as "". Write access
                    is needed for the Exported library. If the bUpdateLibraryReferences is set to true, the NX model is updated to
                    reflect the exported library as the library the parameter is now referenced in. Each parameter can have its own bUpdateLibraryReferences
                    in this version of the JA call.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void ExportParametersToLibrary
        (
            std::vector<NXString> & pcParamNames /** Array of identifiers of the parameters to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the parameter names */,
            const NXString & pcExportedLibName /** The library to write the parameter definitions to            */,
            const std::vector<bool> & bUpdateLibraryReference /** true indicates that the library reference of loaded/local parameters should now refer to the exported library, false indicates the library reference should remain unchanged */
        );
        /** Writes out parameters to a parameter library file. These parameters can be local parameter definitions or parameter definitions
                    from other parameter libraries. The combination of the parameter name and library name identify a parameter definition. If
                    the parameter definition is for a local parameter, the name is specified and the library name is specified as "". Write access
                    is needed for the Exported library. If the bUpdateLibraryReferences is set to true, the NX model is updated to
                    reflect the exported library as the library the parameter is now referenced in. Each parameter can have its own bUpdateLibraryReferences
                    in this version of the JA call.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void ExportParametersToLibrary
        (
            std::vector<NXString> & pcParamNames /** Array of identifiers of the parameters to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the parameter names */,
            const char * pcExportedLibName /** The library to write the parameter definitions to            */,
            const std::vector<bool> & bUpdateLibraryReference /** true indicates that the library reference of loaded/local parameters should now refer to the exported library, false indicates the library reference should remain unchanged */
        );
        /** Writes out parameters to a parameter library file. These parameters can be local parameter definitions or parameter definitions
                    from other parameter libraries. The combination of the parameter name and library name identify a parameter definition. If
                    the parameter definition is for a local parameter, the name is specified and the library name is specified as "". Write access
                    is needed for the Exported library.  If the bUpdateLibraryReferences is set to true, the NX model is updated to
                    reflect the exported library as the library the parameter is now referenced in.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void ExportParametersToLibrary
        (
            std::vector<NXString> & pcParamNames /** Array of identifiers of the parameters to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the parameter names */,
            const NXString & pcExportedLibName /** The library to write the parameter definitions to           */,
            bool bUpdateLibraryReference /** true indicates that the library reference of loaded/local parameters should now refer to the exported library, false indicates the library reference should remain unchanged */
        );
        /** Writes out parameters to a parameter library file. These parameters can be local parameter definitions or parameter definitions
                    from other parameter libraries. The combination of the parameter name and library name identify a parameter definition. If
                    the parameter definition is for a local parameter, the name is specified and the library name is specified as "". Write access
                    is needed for the Exported library.  If the bUpdateLibraryReferences is set to true, the NX model is updated to
                    reflect the exported library as the library the parameter is now referenced in.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void ExportParametersToLibrary
        (
            std::vector<NXString> & pcParamNames /** Array of identifiers of the parameters to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the parameter names */,
            const char * pcExportedLibName /** The library to write the parameter definitions to           */,
            bool bUpdateLibraryReference /** true indicates that the library reference of loaded/local parameters should now refer to the exported library, false indicates the library reference should remain unchanged */
        );
        /** Updates the parameters in a parameter library file. Write access is needed for this operation.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateParametersInLibrary
        (
            const std::vector<NXOpen::ParamLibParameter *> & tEditedParam /** Array of loaded parameter tags  */,
            std::vector<NXString> & pParamNames /** Array of the parameter names which match the name in the library that should take the properties of the corresponding parameter (tEditedParam) */,
            const NXString & pcLibName /** Library to modify */
        );
        /** Updates the parameters in a parameter library file. Write access is needed for this operation.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void UpdateParametersInLibrary
        (
            const std::vector<NXOpen::ParamLibParameter *> & tEditedParam /** Array of loaded parameter tags  */,
            std::vector<NXString> & pParamNames /** Array of the parameter names which match the name in the library that should take the properties of the corresponding parameter (tEditedParam) */,
            const char * pcLibName /** Library to modify */
        );
        /** Deletes the parameters from a parameter library file. Write access is needed for this operation.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteParametersFromLibrary
        (
            std::vector<NXString> & pParamNames /** Arrays of identifiers of the parameters to be deleted from the library */,
            const NXString & pcLibName /** Library to modify */
        );
        /** Deletes the parameters from a parameter library file. Write access is needed for this operation.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void DeleteParametersFromLibrary
        (
            std::vector<NXString> & pParamNames /** Arrays of identifiers of the parameters to be deleted from the library */,
            const char * pcLibName /** Library to modify */
        );
        /** Displays the property values for the specified library parameter in the information window.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void InfoLibraryParameter
        (
            const NXString & pcLibAr /** the library name  */,
            const NXString & pcParamNameAr /** the parameter name */
        );
        /** Displays the property values for the specified library parameter in the information window.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void InfoLibraryParameter
        (
            const char * pcLibAr /** the library name  */,
            const char * pcParamNameAr /** the parameter name */
        );
        /** Writes the property values for the specified library parameter to a file.  
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void InfoLibraryParameterToFile
        (
            const NXString & pcLibAr /** the library name  */,
            const NXString & pcParamNameAr /** the parameter name */,
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const NXString & pcFileName /** the full path including filename of file where the information should be written */
        );
        /** Writes the property values for the specified library parameter to a file.  
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void InfoLibraryParameterToFile
        (
            const char * pcLibAr /** the library name  */,
            const char * pcParamNameAr /** the parameter name */,
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const char * pcFileName /** the full path including filename of file where the information should be written */
        );
        /** Returns the parameters used in the part.  @return  Parameters used 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::ParamLibParameter *> GetUsedParameters
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
