#ifndef NXOpen_LAYOUT2D_COMPONENT_HXX_INCLUDED
#define NXOpen_LAYOUT2D_COMPONENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Layout2d_Component.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Layout2d_Types.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_layout2d_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Layout2d
    {
        class Component;
    }
    class DisplayableObject;
    namespace Layout2d
    {
        class ComponentDefinition;
    }
    class Sketch;
    namespace Layout2d
    {
        class _ComponentBuilder;
        class ComponentImpl;
        /** Represents the Component object.  <br> To create or edit an instance of this class, use @link NXOpen::Layout2d::DefineComponentBuilder  NXOpen::Layout2d::DefineComponentBuilder @endlink  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_LAYOUT2DEXPORT  Component : public NXOpen::DisplayableObject
        {
            private: ComponentImpl * m_component_impl;
            private: friend class  _ComponentBuilder;
            protected: Component();
            public: ~Component();
            /** Activates the component. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void Activate
            (
            );
            /** Deactivates the component. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void Deactivate
            (
            );
            /**Returns  the active state of 2D Component. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: bool IsActive
            (
            );
            /** Updates the component and all of its sub components. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void Update
            (
            );
            /**Returns  the lock update status of 2D Component.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: bool LockUpdateStatus
            (
            );
            /**Sets  the lock update status of 2D Component.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetLockUpdateStatus
            (
                bool lock /** lock */ 
            );
            /** Exits the component active status without committing the changes. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void ExitActivate
            (
            );
            /** Returns an array of specified members in this component 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void GetMembers
            (
                NXOpen::Layout2d::Layout2dComponentMemberType memberType /** membertype */ ,
                std::vector<NXOpen::DisplayableObject *> & members /** members */ 
            );
            /** Transforms the component given a rotation matrix and a translation vector
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void Transform
            (
                const NXOpen::Matrix3x3 & rotation /** rotation */ ,
                const NXOpen::Vector3d & translation /** translation */ 
            );
            /** Sets the absolute transform on a component, given a rotation matrix and a translation vector
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetTransform
            (
                const NXOpen::Matrix3x3 & rotation /** rotation */ ,
                const NXOpen::Vector3d & translation /** translation */ 
            );
            /** Gets the absolute transform of a component, as a rotation matrix and a translation vector
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void GetTransform
            (
                NXOpen::Matrix3x3* rotation /** rotation */ ,
                NXOpen::Vector3d* translation /** translation */ 
            );
            /** Add an array of specified curves from top level sketch to this component 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void AddExistingCurves
            (
                const std::vector<NXOpen::DisplayableObject *> & curves /** curves */ 
            );
            /** Gets the component definition of a component 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::ComponentDefinition * GetDefinition
            (
            );
            /** Gets the anchor point of a component if it exist 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: bool GetAnchorPoint
            (
                NXOpen::Point3d* anchorPoint /** anchorpoint */ 
            );
            /** Gets the component definition name of a component 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXString GetDefinitionName
            (
            );
            /** Gets the path of the component definition 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXString GetDefinitionPath
            (
            );
            /** Gets the location of the component definition 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::Layout2dDefinitionLocation GetDefinitionLocation
            (
            );
            /** Activates the component while in edit in isolation task environment and
                        returns component internal sketch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Sketch * ActivateInIsolation
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
