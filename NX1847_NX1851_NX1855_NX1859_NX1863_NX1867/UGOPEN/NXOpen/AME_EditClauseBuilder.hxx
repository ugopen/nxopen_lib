#ifndef NXOpen_AME_EDITCLAUSEBUILDER_HXX_INCLUDED
#define NXOpen_AME_EDITCLAUSEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_EditClauseBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_SelectClassificationBuilder.hxx>
#include <NXOpen/AME_SelectionBaseDefinitionBuilder.hxx>
#include <NXOpen/AME_SelectionEngineeringObjectDefinitionBuilder.hxx>
#include <NXOpen/AME_MultipleObjectsBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class EditClauseBuilder;
    }
    namespace AME
    {
        class AMEQuery;
    }
    namespace AME
    {
        class MultipleObjectsBuilder;
    }
    namespace AME
    {
        class QueryClause;
    }
    namespace AME
    {
        class SelectAMEBaseNode;
    }
    namespace AME
    {
        class SelectClassificationBuilder;
    }
    namespace AME
    {
        class SelectionBaseDefinitionBuilder;
    }
    namespace AME
    {
        class SelectionEngineeringObjectDefinitionBuilder;
    }
    namespace AME
    {
        class _EditClauseBuilderBuilder;
        class EditClauseBuilderImpl;
        /** Naming Rule Builder  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateEditClauseBuilder  NXOpen::AME::AMEManager::CreateEditClauseBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AllAspects </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        AspectOperator </td> <td> 
         
        Under </td> </tr> 

        <tr><td> 
         
        ClassificationOperator </td> <td> 
         
        As </td> </tr> 

        <tr><td> 
         
        ClauseOperatorType </td> <td> 
         
        And </td> </tr> 

        <tr><td> 
         
        ReuseLibraryOperator </td> <td> 
         
        OfType </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  EditClauseBuilder : public NXOpen::AME::MultipleObjectsBuilder
        {
            /** the type of object to be used for edit clause*/
            public: enum Types
            {
                TypesClassification/** classification */ ,
                TypesLibraryObject/** library object */ ,
                TypesAspect/** aspect */ ,
                TypesProperty/** property */ ,
                TypesPort/** port */ ,
                TypesProductAssignment/** product assignment */ ,
                TypesParentProperty/** parent property */ 
            };

            /** the query operator */
            public: enum Operator
            {
                OperatorAs/** as */ ,
                OperatorUnder/** under */ ,
                OperatorOfType/** of type */ 
            };

            /** the clause operator*/
            public: enum QueryClauseOperatorType
            {
                QueryClauseOperatorTypeAnd/** and */ ,
                QueryClauseOperatorTypeOr/** or */ ,
                QueryClauseOperatorTypeNone/** none */ 
            };

            /** the property applied to*/
            public: enum QueryPropertyAppliedTo
            {
                QueryPropertyAppliedToClassification/** classification */ ,
                QueryPropertyAppliedToLibraryObject/** library object */ ,
                QueryPropertyAppliedToAspect/** aspect */ ,
                QueryPropertyAppliedToGeneral/** general */ ,
                QueryPropertyAppliedToTag/** tag */ 
            };

            /** the property of aspect*/
            public: enum QueryPropertyOfCategory
            {
                QueryPropertyOfCategoryFunctionAspect/** function aspect */ ,
                QueryPropertyOfCategoryLocationAspect/** location aspect */ ,
                QueryPropertyOfCategoryProductAspect/** product aspect */ 
            };

            /** the property of classification or library item*/
            public: enum QueryPropertyOfClassLibCategory
            {
                QueryPropertyOfClassLibCategoryType/** type */ ,
                QueryPropertyOfClassLibCategoryProduct/** product */ 
            };

            /** the math operators*/
            public: enum MathOperatorsType
            {
                MathOperatorsTypeIsEqual/** is equal */ ,
                MathOperatorsTypeIsNotEqual/** is not equal */ ,
                MathOperatorsTypeIsGreaterThanOrEqual/** is greater than or equal */ ,
                MathOperatorsTypeIsGreaterThan/** is greater than */ ,
                MathOperatorsTypeIsLessThanOrEqual/** is less than or equal */ ,
                MathOperatorsTypeIsLessThan/** is less than */ 
            };

            /** the property applied to*/
            public: enum QueryPortCondition
            {
                QueryPortConditionExists/** exists */ ,
                QueryPortConditionIsConnected/** is connected */ 
            };

            /** the value true/false*/
            public: enum QueryConnectedValue
            {
                QueryConnectedValueTrue/** true */ ,
                QueryConnectedValueFalse/** false */ 
            };

            /** the product assignment operator applied to*/
            public: enum ProductAssignmentOperator
            {
                ProductAssignmentOperatorEqual/** equal */ ,
                ProductAssignmentOperatorNotEqual/** not equal */ 
            };

            /** the product assignment value applied to*/
            public: enum ProductAssignmentValue
            {
                ProductAssignmentValueTrue/** true */ ,
                ProductAssignmentValueFalse/** false */ 
            };

            /** the selected aspect for parent property*/
            public: enum ParentPropertyAspect
            {
                ParentPropertyAspectFunctionAspect/** function aspect */ ,
                ParentPropertyAspectLocationAspect/** location aspect */ ,
                ParentPropertyAspectProductAspect/** product aspect */ ,
                ParentPropertyAspectAutomationAspect/** automation aspect */ 
            };

            private: EditClauseBuilderImpl * m_editclausebuilder_impl;
            private: friend class  _EditClauseBuilderBuilder;
            protected: EditClauseBuilder();
            public: ~EditClauseBuilder();
            /**Returns  the selected classification 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectClassificationBuilder * SelectClassification
            (
            );
            /**Returns  the engineering object definition
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link SelectLibraryObject SelectLibraryObject@endlink  instead. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use SelectLibraryObject instead.") NXOpen::AME::SelectionEngineeringObjectDefinitionBuilder * SelectFromMemberSelect
            (
            );
            /**Returns  the engineering object definition or product definition
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectionBaseDefinitionBuilder * SelectLibraryObject
            (
            );
            /**Returns  the selected aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNode * SelectAspect
            (
            );
            /**Returns  the query operator for Classification object
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::Operator ClassificationOperator
            (
            );
            /**Sets  the query operator for Classification object
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetClassificationOperator
            (
                NXOpen::AME::EditClauseBuilder::Operator classificationOperator /** classificationoperator */ 
            );
            /**Returns  the all aspects option status whether ON or OFF 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool AllAspects
            (
            );
            /**Sets  the all aspects option status whether ON or OFF 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAllAspects
            (
                bool toggleAllAspects /** toggleallaspects */ 
            );
            /**Returns  the query operator for Aspect object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::Operator AspectOperator
            (
            );
            /**Sets  the query operator for Aspect object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAspectOperator
            (
                NXOpen::AME::EditClauseBuilder::Operator aspectOperator /** aspectoperator */ 
            );
            /**Returns  the query operator for Reuse Library object
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::Operator ReuseLibraryOperator
            (
            );
            /**Sets  the query operator for Reuse Library object
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetReuseLibraryOperator
            (
                NXOpen::AME::EditClauseBuilder::Operator reuseLibraryOperator /** reuselibraryoperator */ 
            );
            /**Returns  the type of object to be used for edit clause
                        @link NXOpen::AME::EditClauseBuilder::Type NXOpen::AME::EditClauseBuilder::Type@endlink 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::Types Type
            (
            );
            /**Sets  the type of object to be used for edit clause
                        @link NXOpen::AME::EditClauseBuilder::Type NXOpen::AME::EditClauseBuilder::Type@endlink 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetType
            (
                NXOpen::AME::EditClauseBuilder::Types type /** type */ 
            );
            /**Returns  the condition type
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::Types ConditionType
            (
            );
            /**Sets  the condition type
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetConditionType
            (
                NXOpen::AME::EditClauseBuilder::Types conditionType /** conditiontype */ 
            );
            /** Set the property
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetProperty
            (
                int index /** index */ ,
                const NXString & propertyName /** propertyname */ 
            );
            /** Set the property
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetProperty
            (
                int index /** index */ ,
                const char * propertyName /** propertyname */ 
            );
            /** Set the property operator
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPropertyOperator
            (
                int index /** index */ ,
                const NXString & propertyOperator /** propertyoperator */ 
            );
            /** Set the property operator
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPropertyOperator
            (
                int index /** index */ ,
                const char * propertyOperator /** propertyoperator */ 
            );
            /** Set the property value
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPropertyValue
            (
                int index /** index */ ,
                const NXString & propertyValue /** propertyvalue */ 
            );
            /** Set the property value
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPropertyValue
            (
                int index /** index */ ,
                const char * propertyValue /** propertyvalue */ 
            );
            /**Returns  the clause operator of query
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::QueryClauseOperatorType ClauseOperatorType
            (
            );
            /**Sets  the clause operator of query
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetClauseOperatorType
            (
                NXOpen::AME::EditClauseBuilder::QueryClauseOperatorType clauseOperator /** clauseoperator */ 
            );
            /**Returns  the selected query clause
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::QueryClause * SelectedQueryClause
            (
            );
            /**Sets  the selected query clause
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSelectedQueryClause
            (
                NXOpen::AME::QueryClause * selectedClause /** selectedclause */ 
            );
            /**Returns  the query object
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AMEQuery * SelectedQuery
            (
            );
            /**Sets  the query object
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSelectedQuery
            (
                NXOpen::AME::AMEQuery * selectedQuery /** selectedquery */ 
            );
            /**Returns  the property applied to
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::QueryPropertyAppliedTo PropertyAppliedTo
            (
            );
            /**Sets  the property applied to
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPropertyAppliedTo
            (
                NXOpen::AME::EditClauseBuilder::QueryPropertyAppliedTo propertyAppliedTo /** propertyappliedto */ 
            );
            /**Returns  the property of
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int PropertyOfCategory
            (
            );
            /**Sets  the property of
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPropertyOfCategory
            (
                int propertyOfCategory /** propertyofcategory */ 
            );
            /**Returns  the math operatos
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::MathOperatorsType MathOperator
            (
            );
            /**Sets  the math operatos
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetMathOperator
            (
                NXOpen::AME::EditClauseBuilder::MathOperatorsType mathOperatorsType /** mathoperatorstype */ 
            );
            /**Returns  the value count
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int ValueCount
            (
            );
            /**Sets  the value count
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetValueCount
            (
                int valueCount /** valuecount */ 
            );
            /**Returns  the port operator
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::QueryPortCondition PortCondition
            (
            );
            /**Sets  the port operator
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPortCondition
            (
                NXOpen::AME::EditClauseBuilder::QueryPortCondition portCondition /** portcondition */ 
            );
            /**Returns  the port domain
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString PortDomain
            (
            );
            /**Sets  the port domain
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPortDomain
            (
                const NXString & portDomain /** portdomain */ 
            );
            /**Sets  the port domain
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPortDomain
            (
                const char * portDomain /** portdomain */ 
            );
            /**Returns  the port sub type
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString SubType
            (
            );
            /**Sets  the port sub type
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSubType
            (
                const NXString & subType /** subtype */ 
            );
            /**Sets  the port sub type
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetSubType
            (
                const char * subType /** subtype */ 
            );
            /**Returns  the value true/false
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::QueryConnectedValue ConnectedValue
            (
            );
            /**Sets  the value true/false
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetConnectedValue
            (
                NXOpen::AME::EditClauseBuilder::QueryConnectedValue connectedValue /** connectedvalue */ 
            );
            /**Returns  the query operator for product assignment object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::ProductAssignmentOperator ProductAssigmentOperator
            (
            );
            /**Sets  the query operator for product assignment object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetProductAssigmentOperator
            (
                NXOpen::AME::EditClauseBuilder::ProductAssignmentOperator productAssigmentOperator /** productassigmentoperator */ 
            );
            /**Returns  the query value for product assignment object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::ProductAssignmentValue ProductAssigmentValue
            (
            );
            /**Sets  the query value for product assignment object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetProductAssigmentValue
            (
                NXOpen::AME::EditClauseBuilder::ProductAssignmentValue productAssigmentValue /** productassigmentvalue */ 
            );
            /**Returns  the query value for product assignment object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int NumberOfConnectedPorts
            (
            );
            /**Sets  the query value for product assignment object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetNumberOfConnectedPorts
            (
                int numberOfConnectedPorts /** numberofconnectedports */ 
            );
            /**Returns  the selected aspect for parent property 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder::ParentPropertyAspect ParentPropertySelectedAspect
            (
            );
            /**Sets  the selected aspect for parent property 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetParentPropertySelectedAspect
            (
                NXOpen::AME::EditClauseBuilder::ParentPropertyAspect parentPropertySelectedAspect /** parentpropertyselectedaspect */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
