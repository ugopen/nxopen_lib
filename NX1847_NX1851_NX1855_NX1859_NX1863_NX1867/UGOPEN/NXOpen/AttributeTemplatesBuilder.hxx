#ifndef NXOpen_ATTRIBUTETEMPLATESBUILDER_HXX_INCLUDED
#define NXOpen_ATTRIBUTETEMPLATESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AttributeTemplatesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AttributePropertiesBaseBuilder.hxx>
#include <NXOpen/DateBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class AttributeTemplatesBuilder;
    class Builder;
    class DateBuilder;
    class _AttributeTemplatesBuilderBuilder;
    class AttributeTemplatesBuilderImpl;
    /**
        Represents an @link NXOpen::AttributeTemplatesBuilder NXOpen::AttributeTemplatesBuilder@endlink  to be used when creating attribute
        templates.  An attribute template is optional for an attribute and lives in the depository.  It's
        main purpose is to provide extra data to further describe a referencing attribute.  All attributes 
        that are created from a template will take on the characteristics of the template, most notable the 
        title, type, and units (for templates of type number only).  The template contains
        other data, such as input assisting data (ranges and lists of values) to be used when creating a 
        value on the attribute.  The template may also contain a category, which allows attributes
        to be grouped together and easily sorted.  A note may also be set on a template to provide further
        description about a referencing attribute.
        
        Each template must contain a unique title and a type.  If the type is number, then the units
        must also be set.  All other data is optional.
        
        There are six types of attribute templates: Null, Boolean, Integer, Number, String, and Date.  Each
        type requires a title, type, and can optionally contain a note and a category.  Other data varies
        depending on the type.  Below describes the differences betweeen the types.
        
        Null - No other data can be set for a template of type Null.
        
        Boolean - A default boolean can be set to True or False.  This can be set by calling SetDefaultBoolean.
        
        Integer - A default integer can be set to assist when creating an attribute referencing an integer
                  template.  The integer type also allows for constraints to be set.  If the constraint is 
                  set to Range, then the min integer and max integer need to be set to define the range.  
                  If the constraint is set to List, then the value integer list will need to be set to 
                  define the acceptable list of values.  If constraint is set to None, then no constraints 
                  will be enforced.  The default value must comply with all constraints in order for the 
                  template to be created successfully.
                  
        Number - A default floating point number and constraints can be set in the exact same fashion as 
                 with the integer, the only difference being that the number fields will be used instead 
                 of the integer fields.  The units must be set to define the template's measure.  Only 
                 the measure (Length, Area, Volume, etc) is considered required information, the units 
                 themselves (mm, kg, etc) will only be used along with the default value as input 
                 assistance when creating an attribute referencing a number template.
                 
        String - A default string can be set.  The string type also allows for a list of values to be set
                 as input assistance.  To do this, the constraint must be set to List and the string list
                 will need to be populated with the desired values.  The string type does not allow for the
                 constraint to be set to Range, it must be set to either List or None.  The default string
                 must be contained in the list of values if Constraint is set to List.
                 
        Date - No other data can be set for a template of type Date.  The current date will always be used
               as input assistance when creating an attribute referencing a date template.
                 
        This class will also allow for the import and export of attribute templates.  The export feature
        will save all templates currently in the depository to an external catalog file so they can be imported 
        at a later time to another part file.  To use this feature, the catalog filename must be set to 
        specify the external file.  Similarly, the import feature will take all templates contained in
        the specified catalog file and instantiate them in the part.  If the title, type, or measure of an 
        imported template conflicts with a template already in the depository, then the template will not be 
        imported.  If the optional data of an imported template conflicts with a template already in the
        depository, then the data from the imported template will overwrite the data in the depository.
         <br> To create a new instance of this class, use @link NXOpen::PropertiesManager::CreateAttributeTemplatesBuilder  NXOpen::PropertiesManager::CreateAttributeTemplatesBuilder @endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    Constraint </td> <td> 
     
    None </td> </tr> 

    <tr><td> 
     
    CopyAttributeOnObjectCopy </td> <td> 
     
    True </td> </tr> 

    <tr><td> 
     
    DataType </td> <td> 
     
    String </td> </tr> 

    <tr><td> 
     
    DefaultBoolean </td> <td> 
     
    True </td> </tr> 

    <tr><td> 
     
    DefaultInteger </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    DefaultNumber </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    MaxInteger </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    MaxNumber </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    MinInteger </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    MinNumber </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    ProxyAttributeForLocking </td> <td> 
     
     </td> </tr> 

    </table>  

     <br>  Created in NX8.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  AttributeTemplatesBuilder : public NXOpen::Builder
    {
        /** Specifies the templates option when setting or displaying templates.  */
        public: enum TemplatesOptions
        {
            TemplatesOptionsPart/** Templates currently residing in the part */,
            TemplatesOptionsCatalog/** Templates currently residing in the loaded catalog.  These are initially loaded from the external file specified
                                                                                     in customer defaults and can be managed using Import and Export.  Each template in the catalog can be
                                                                                     defined as persistent or transient.  A persistent template will be copied into the part when an attribute
                                                                                     is created.  A transient template will assist in the creation of an attribute but will not be stored in the part. */
        };

        /** Specifies the constraint data associated with the template.  All constraints are enabled for templates
                    of type integer, number, string, and date. */
        public: enum ConstraintOptions
        {
            ConstraintOptionsNone/** No constraint data, no further action is needed */,
            ConstraintOptionsUpperLimit/** This template has an upper limit but no lower limit.  The max value must be set.  Available for integer, number, string, and date types. */,
            ConstraintOptionsLowerLimit/** This template has a lower limit but no upper limit.  The min value must be set.  Available for integer, number, string, and date types. */,
            ConstraintOptionsUpperAndLowerLimit/** This template has a lower limit and an upper limit.  The min and max must also be set.  Available for integer, number, string, and date types. */,
            ConstraintOptionsList/** List of values, the value list must also be set.  Only available for integer, number, and string types. */
        };

        /** Specifies the default value for a template of type Boolean. */
        public: enum DefaultBooleanOptions
        {
            DefaultBooleanOptionsTrue/** True */,
            DefaultBooleanOptionsFalse/** False */
        };

        /** Specifies the available access keys that determine which objects will have access to this attribute template. */
        public: enum AccessKey
        {
            AccessKeyPart/** This attribute template will be accessible by parts */,
            AccessKeyReferenceSet/** This attribute template will be accessible by reference sets */,
            AccessKeyComponentInstance/** This attribute template will be accessible by component instances */,
            AccessKeyComponentOccurrence/** This attribute template will be accessible by component occurrences */,
            AccessKeyObjects/** This attribute template will be accessible by all non-part related objects including solids, features, etc */
        };

        private: AttributeTemplatesBuilderImpl * m_attributetemplatesbuilder_impl;
        private: friend class  _AttributeTemplatesBuilderBuilder;
        protected: AttributeTemplatesBuilder();
        public: ~AttributeTemplatesBuilder();
        /**Returns  the templates option.  This option determines which set of templates will be modified. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AttributeTemplatesBuilder::TemplatesOptions Templates
        (
        );
        /**Sets  the templates option.  This option determines which set of templates will be modified. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTemplates
        (
            NXOpen::AttributeTemplatesBuilder::TemplatesOptions dataType /** datatype */ 
        );
        /**Returns  the title.  This is the identifier of the template and must be unique. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Title
        (
        );
        /**Sets  the title.  This is the identifier of the template and must be unique. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTitle
        (
            const NXString & title /** title */ 
        );
        /**Sets  the title.  This is the identifier of the template and must be unique. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetTitle
        (
            const char * title /** title */ 
        );
        /**Returns  the data type.  Must be set for each template and cannot be changed once the template has been created. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions DataType
        (
        );
        /**Sets  the data type.  Must be set for each template and cannot be changed once the template has been created. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDataType
        (
            NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions dataType /** datatype */ 
        );
        /**Returns  the constraint.  Informs the template which method of constraints to use.  If constraints are used
                    the default value must satisfy the given constraints.  Constraints are supported by templates of type 
                    Integer, Number, String, and Date. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AttributeTemplatesBuilder::ConstraintOptions Constraint
        (
        );
        /**Sets  the constraint.  Informs the template which method of constraints to use.  If constraints are used
                    the default value must satisfy the given constraints.  Constraints are supported by templates of type 
                    Integer, Number, String, and Date. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetConstraint
        (
            NXOpen::AttributeTemplatesBuilder::ConstraintOptions constraint /** constraint */ 
        );
        /**Returns  the min integer.  Only to be set if the data type is Integer and the constraint specifies a lower limit.
                    The default integer value must be greater than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: int MinInteger
        (
        );
        /**Sets  the min integer.  Only to be set if the data type is Integer and the constraint specifies a lower limit.
                    The default integer value must be greater than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMinInteger
        (
            int minInteger /** mininteger */ 
        );
        /**Returns  the max integer.  Only to be set if the data type is Integer and the constraint specifies an upper limit.
                    The default integer value must be less than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: int MaxInteger
        (
        );
        /**Sets  the max integer.  Only to be set if the data type is Integer and the constraint specifies an upper limit.
                    The default integer value must be less than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMaxInteger
        (
            int maxInteger /** maxinteger */ 
        );
        /**Returns  the min number.  Only to be set if the data type is Number and the constraint specifies a lower limit.
                    The default number value must be greater than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: double MinNumber
        (
        );
        /**Sets  the min number.  Only to be set if the data type is Number and the constraint specifies a lower limit.
                    The default number value must be greater than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMinNumber
        (
            double minNumber /** minnumber */ 
        );
        /**Returns  the max number.  Only to be set if the data type is Number and the constraint specifies an upper limit.
                    The default number value must be less than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: double MaxNumber
        (
        );
        /**Sets  the max number.  Only to be set if the data type is Number and the constraint specifies an upper limit.
                    The default number value must be less than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMaxNumber
        (
            double maxNumber /** maxnumber */ 
        );
        /**Returns  the min string.  Only to be set if the data type is String and the constraint specifies a lower limit. 
                    The default string value must be greater than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString MinString
        (
        );
        /**Sets  the min string.  Only to be set if the data type is String and the constraint specifies a lower limit. 
                    The default string value must be greater than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMinString
        (
            const NXString & minString /** minstring */ 
        );
        /**Sets  the min string.  Only to be set if the data type is String and the constraint specifies a lower limit. 
                    The default string value must be greater than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetMinString
        (
            const char * minString /** minstring */ 
        );
        /**Returns  the max string.  Only to be set if the data type is String and the constraint specifies an upper limit. 
                    The default string value must be less than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString MaxString
        (
        );
        /**Sets  the max string.  Only to be set if the data type is String and the constraint specifies an upper limit. 
                    The default string value must be less than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMaxString
        (
            const NXString & maxString /** maxstring */ 
        );
        /**Sets  the max string.  Only to be set if the data type is String and the constraint specifies an upper limit. 
                    The default string value must be less than or equal to this value. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetMaxString
        (
            const char * maxString /** maxstring */ 
        );
        /**Returns  the date constraint.  Only used if the data type is Date.  The default date must
                    satisfy the constraints defined by this object.  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DateBuilder * DateConstraint
        (
        );
        /** Returns the integer list.  Only valid if the type is Integer and the contraint is set to list. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetIntegerList
        (
        );
        /** Sets the integer list.  Must be set if the type is Integer and the contraint is set to list. 
                    The default integer value must be contained in this list. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIntegerList
        (
            const std::vector<NXString> & integerList /** integerlist */ 
        );
        /** Returns the number list.  Only valid if the type is Number and the contraint is set to list. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetNumberList
        (
        );
        /** Sets the number list.  Must be set if the type is Number and the contraint is set to list. 
                    The default number value must be contained in this list. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNumberList
        (
            const std::vector<NXString> & numberList /** numberlist */ 
        );
        /** Returns the string list.  Only valid if the type is String and the contraint is set to list. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetStringList
        (
        );
        /** Sets the string list.  Must be set if the type is String and the contraint is set to list. 
                    The default string value must be contained in this list. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetStringList
        (
            const std::vector<NXString> & stringList /** stringlist */ 
        );
        /**Returns  the default number.  Optional if the constraint is set to None, otherwise it must satisfy the constraint data. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: double DefaultNumber
        (
        );
        /**Sets  the default number.  Optional if the constraint is set to None, otherwise it must satisfy the constraint data. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDefaultNumber
        (
            double defaultNumber /** defaultnumber */ 
        );
        /**Returns  the units.  Represents the units associated with a template of type Number. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Units
        (
        );
        /**Sets  the units.  Represents the units associated with a template of type Number. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUnits
        (
            const NXString & units /** units */ 
        );
        /**Sets  the units.  Represents the units associated with a template of type Number. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetUnits
        (
            const char * units /** units */ 
        );
        /**Returns  the default integer.  Optional if the constraint is set to None, otherwise it must satisfy the constraint data. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: int DefaultInteger
        (
        );
        /**Sets  the default integer.  Optional if the constraint is set to None, otherwise it must satisfy the constraint data. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDefaultInteger
        (
            int defaultInteger /** defaultinteger */ 
        );
        /**Returns  the default boolean.  Optional default value for a template of type Boolean. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AttributeTemplatesBuilder::DefaultBooleanOptions DefaultBoolean
        (
        );
        /**Sets  the default boolean.  Optional default value for a template of type Boolean. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDefaultBoolean
        (
            NXOpen::AttributeTemplatesBuilder::DefaultBooleanOptions defaultBoolean /** defaultboolean */ 
        );
        /**Returns  the default string.  Optional if the constraint is set to None, otherwise it must satisfy the constraint data. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString DefaultString
        (
        );
        /**Sets  the default string.  Optional if the constraint is set to None, otherwise it must satisfy the constraint data. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDefaultString
        (
            const NXString & defaultString /** defaultstring */ 
        );
        /**Sets  the default string.  Optional if the constraint is set to None, otherwise it must satisfy the constraint data. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetDefaultString
        (
            const char * defaultString /** defaultstring */ 
        );
        /**Returns  the default date.  Optional if no date constraints exists, otherwise it must satisfy the constraint data. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DateBuilder * DefaultDate
        (
        );
        /**Returns  the category.  Optional category for templates of all types.  This allows for templates to be grouped together. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Category
        (
        );
        /**Sets  the category.  Optional category for templates of all types.  This allows for templates to be grouped together. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCategory
        (
            const NXString & category /** category */ 
        );
        /**Sets  the category.  Optional category for templates of all types.  This allows for templates to be grouped together. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetCategory
        (
            const char * category /** category */ 
        );
        /**Returns  the proxy attribute for locking. This must be PDM attribute available in the Access Control List. This
                        functionality is available only in managed mode. Specify relevent proxy attribute based on
                        @link NXOpen::AttributeTemplatesBuilder::TemplatesOptions NXOpen::AttributeTemplatesBuilder::TemplatesOptions@endlink .
                    
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString ProxyAttributeForLocking
        (
        );
        /**Sets  the proxy attribute for locking. This must be PDM attribute available in the Access Control List. This
                        functionality is available only in managed mode. Specify relevent proxy attribute based on
                        @link NXOpen::AttributeTemplatesBuilder::TemplatesOptions NXOpen::AttributeTemplatesBuilder::TemplatesOptions@endlink .
                    
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetProxyAttributeForLocking
        (
            const NXString & proxyAttributeForLocking /** proxyattributeforlocking */ 
        );
        /**Sets  the proxy attribute for locking. This must be PDM attribute available in the Access Control List. This
                        functionality is available only in managed mode. Specify relevent proxy attribute based on
                        @link NXOpen::AttributeTemplatesBuilder::TemplatesOptions NXOpen::AttributeTemplatesBuilder::TemplatesOptions@endlink .
                    
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetProxyAttributeForLocking
        (
            const char * proxyAttributeForLocking /** proxyattributeforlocking */ 
        );
        /** Returns the note.  Optional data for templates of all types. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetNote
        (
        );
        /** Sets the note.  Optional data for templates of all types. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNote
        (
            const std::vector<NXString> & note /** note */ 
        );
        /**Returns  the enforced constraints.  Determines if the template constraints will be enforced. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool EnforcedConstraints
        (
        );
        /**Sets  the enforced constraints.  Determines if the template constraints will be enforced. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetEnforcedConstraints
        (
            bool enforcedConstraints /** enforcedconstraints */ 
        );
        /**Returns  the persistent flag.  If a template is marked as persistent, then the template will be saved
                    with the part when a template attribute is created.  This flag is only used when editing templates 
                    in the catalog file, during which the default is false.  If editing templates in the part, the
                    template will be created in the part, making it persistent by definition. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool Persistent
        (
        );
        /**Sets  the persistent flag.  If a template is marked as persistent, then the template will be saved
                    with the part when a template attribute is created.  This flag is only used when editing templates 
                    in the catalog file, during which the default is false.  If editing templates in the part, the
                    template will be created in the part, making it persistent by definition. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPersistent
        (
            bool persistent /** persistent */ 
        );
        /** Imports templates from a specified external catalog.  The current catalog of templates will be erased
                    and replaced with the templates from the external catalog.  Import will not instantiate templates 
                    in the part, it only modifies what templates are currently available in the loaded catalog.
                    
                    The catalog filename must be set to the location of the external catalog on disk.  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void ImportCatalog
        (
        );
        /** Exports templates to a specified external catalog.  All templates from the loaded catalog
                    will be saved to disk at the location specified by the catalog filename.  Any templates
                    the previously existed in the external catalog will be deleted.
                    
                    The catalog filename must be set to the location of the external catalog on disk. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void ExportCatalog
        (
        );
        /** Update templates in the part from the external catalog defined in customer defaults.  The title and 
                    type must match for the update to take place.  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateTemplates
        (
        );
        /**Returns  the catalog filename.  Used during import and export of catalogs.  This should be set
                    to a full path location on disk.  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString CatalogFilename
        (
        );
        /**Sets  the catalog filename.  Used during import and export of catalogs.  This should be set
                    to a full path location on disk.  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCatalogFilename
        (
            const NXString & catalogFilename /** catalogfilename */ 
        );
        /**Sets  the catalog filename.  Used during import and export of catalogs.  This should be set
                    to a full path location on disk.  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetCatalogFilename
        (
            const char * catalogFilename /** catalogfilename */ 
        );
        /** Delete an attribute template by specifying the title and type of the template.  
                    The template will be deleted from the depository specified by the current 
                    Templates Option.  The deleted flag will return true if the template was
                    successfully deleted. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool Delete
        (
            const NXString & title /** title */ ,
            NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions type /** type */ 
        );
        /** Delete an attribute template by specifying the title and type of the template.  
                    The template will be deleted from the depository specified by the current 
                    Templates Option.  The deleted flag will return true if the template was
                    successfully deleted. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        bool Delete
        (
            const char * title /** title */ ,
            NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions type /** type */ 
        );
        /**Returns  the flag specifying whether the attribute should be copied when the object is copied. If false, the attribute copy is disallowed.
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool CopyAttributeOnObjectCopy
        (
        );
        /**Sets  the flag specifying whether the attribute should be copied when the object is copied. If false, the attribute copy is disallowed.
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCopyAttributeOnObjectCopy
        (
            bool copyAttributeOnObjectCopy /** copyattributeonobjectcopy */ 
        );
        /**Returns  the Alias.  This is the alias or synonym for the title of the template and must be unique. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Alias
        (
        );
        /**Sets  the Alias.  This is the alias or synonym for the title of the template and must be unique. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAlias
        (
            const NXString & alias /** alias */ 
        );
        /**Sets  the Alias.  This is the alias or synonym for the title of the template and must be unique. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetAlias
        (
            const char * alias /** alias */ 
        );
        /**Returns  the flag specifying if an attribute can contain multiple values.
                    If true, then any attributes created from this template will be treated as a VLA (variable length array)
                    and will support multiple values. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool AllowMultipleValues
        (
        );
        /**Sets  the flag specifying if an attribute can contain multiple values.
                    If true, then any attributes created from this template will be treated as a VLA (variable length array)
                    and will support multiple values. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAllowMultipleValues
        (
            bool array /** array */ 
        );
        /**Returns  the flag specifying if the attribute should be locked on save.
                    If true, then any attributes created from this template will become locked when the part is saved (and reloaded). 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool LockOnSave
        (
        );
        /**Sets  the flag specifying if the attribute should be locked on save.
                    If true, then any attributes created from this template will become locked when the part is saved (and reloaded). 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLockOnSave
        (
            bool lockOnSave /** lockonsave */ 
        );
        /** Get the access keys.  The access keys define which objects will have access to this attribute template. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::AttributeTemplatesBuilder::AccessKey> GetAccessKeys
        (
        );
        /** Set the access keys.  The access keys define which objects will have access to this attribute template. 
                    If no access keys are provided, the attribute template will be visible to all objects. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAccessKeys
        (
            const std::vector<NXOpen::AttributeTemplatesBuilder::AccessKey> & accessKeys /** accesskeys */ 
        );
        /** Add a new access key to the list of access keys.  If this access key alreadys exists, it will not be added. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void AddAccessKey
        (
            NXOpen::AttributeTemplatesBuilder::AccessKey accessKey /** accesskey */ 
        );
        /** Remove an access key from the list of access keys. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void RemoveAccessKey
        (
            NXOpen::AttributeTemplatesBuilder::AccessKey accessKey /** accesskey */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
