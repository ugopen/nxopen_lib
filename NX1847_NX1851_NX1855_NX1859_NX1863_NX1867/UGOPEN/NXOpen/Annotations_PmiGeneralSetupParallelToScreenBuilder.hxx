#ifndef NXOpen_ANNOTATIONS_PMIGENERALSETUPPARALLELTOSCREENBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_PMIGENERALSETUPPARALLELTOSCREENBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_PmiGeneralSetupParallelToScreenBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class PmiGeneralSetupParallelToScreenBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _PmiGeneralSetupParallelToScreenBuilderBuilder;
        class PmiGeneralSetupParallelToScreenBuilderImpl;
        /** Represents a NXOpen.Annotations.PmiGeneralSetupParallelToScreenBuilder 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  PmiGeneralSetupParallelToScreenBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: PmiGeneralSetupParallelToScreenBuilderImpl * m_pmigeneralsetupparalleltoscreenbuilder_impl;
            private: friend class  _PmiGeneralSetupParallelToScreenBuilderBuilder;
            protected: PmiGeneralSetupParallelToScreenBuilder();
            public: ~PmiGeneralSetupParallelToScreenBuilder();
            /**Returns  the option which determines whether or not to display supported PMI as parallel to screen.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayParallelToScreen
            (
            );
            /**Sets  the option which determines whether or not to display supported PMI as parallel to screen.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDisplayParallelToScreen
            (
                bool displayParallelToScreen /** displayparalleltoscreen */ 
            );
            /**Returns  the option which determines while panning and zooming whether or not to lock the display (size and location) relative
                        to the graphics area for PMI displayed as parallel to screen. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool LockSizeAndPosition
            (
            );
            /**Sets  the option which determines while panning and zooming whether or not to lock the display (size and location) relative
                        to the graphics area for PMI displayed as parallel to screen. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLockSizeAndPosition
            (
                bool lockSizeAndPosition /** locksizeandposition */ 
            );
            /**Returns  the value which determines the list of PMI types which will have parallel to screen capabilities enabled 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int EnabledPmiTypes
            (
            );
            /**Sets  the value which determines the list of PMI types which will have parallel to screen capabilities enabled 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetEnabledPmiTypes
            (
                int enabledPmiTypes /** enabledpmitypes */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
