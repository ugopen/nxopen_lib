#ifndef NXOpen_EXPRESSIONCOLLECTION_HXX_INCLUDED
#define NXOpen_EXPRESSIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ExpressionCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/SuppressByExpressionBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ExpressionCollection;
    class BasePart;
    class Expression;
    namespace Assemblies
    {
        class Component;
    }
    class InterpartExpressionsBuilder;
    class NXObject;
    class ReplaceExpressionsBuilder;
    class SuppressByExpressionBuilder;
    class Unit;
    class ExpressionCollectionImpl;
    /** Represents a collection of expressions.  <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ExpressionCollection : public NXOpen::TaggedObjectCollection
    {
        /** Identifies the type of expression desired. In some cases, the types might
            overlap. For example, a system expression might also be considered a user
            expression if the original creator has been deleted from the part. */
        public: enum Type
        {
            TypeAll/** All types of expressions. */,
            TypeAttribute/** Expresion linked to an attribute. */,
            TypeInterpart/** Interpart Expression. */,
            TypeMeasure/** Measure Expression. */,
            TypeSystem/** System Expression (created by a NX object or through one of the system APIs). */,
            TypeUser/** User Expression (not owned directly by an NX object. */,
            TypeUserAndGeometry/** User Expression including geometric expressions. */,
            TypeUserExcludeSystem/** User Expression excluding system expressions. */
        };

        /** Indicates the mode for importing expressions. */
        public: enum ImportMode
        {
            ImportModeReplace/** Overwrite existing expressions if the imported values differ */,
            ImportModeDontReplace/** Don't overwrite existing expressions. New expressions are created */,
            ImportModeDeleteImports/** Delete all expressions in the imported file */
        };

        /** Indicates the mode for exporting expressions. */
        public: enum ExportMode
        {
            ExportModeWorkPart/** All expressions in the given part */,
            ExportModeAllInAssyTree/** All expressions in the given part, and in its components */,
            ExportModeAllParts/** All expressions in All parts in the session */
        };

        /** Indicates the mode for sorting expressions. */
        public: enum SortType
        {
            SortTypeAlphaNum/** Alphabetic order, with numbers in numerical order */,
            SortTypeTimeStamp/** Creation order - earliest first */,
            SortTypeReverseTimeStamp/** Creation order - latest first */
        };

        private: ExpressionCollectionImpl * m_expressioncollection_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit ExpressionCollection(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~ExpressionCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::ExpressionCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Expression *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(nullptr), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::ExpressionCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * () const;
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::ExpressionCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Creates an expression  @return  the new expression 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * Create
        (
            const NXString & string /** the equation for the expression.  Must be in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z". */
        );
        /** Creates an expression  @return  the new expression 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Expression * Create
        (
            const char * string /** the equation for the expression.  Must be in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z". */
        );
        /** Creates an expression with units.  @return  the new expression 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * CreateWithUnits
        (
            const NXString & string /** the equation for the expression.  Must be in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z". */,
            NXOpen::Unit * unitType /** units for the expression */
        );
        /** Creates an expression with units.  @return  the new expression 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Expression * CreateWithUnits
        (
            const char * string /** the equation for the expression.  Must be in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z". */,
            NXOpen::Unit * unitType /** units for the expression */
        );
        /** Creates a system expression.  After creating a system expression, you should
            associate it with an object, such as a sketch dimension.  System expressions are
            deleted when the object they are associated with is deleted.  @return  the new expression 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * CreateSystemExpression
        (
            const NXString & string /** the equation or right-hand-side for the expression.
                                               You can specify a name for the equation by providing a
                                               string in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z".  If you do not
                                               provide a name, a name will be assigned automatically.
                                               For example, if the string is "1.2 * y + z", a
                                               name will be assigned automatically. */
        );
        /** Creates a system expression.  After creating a system expression, you should
            associate it with an object, such as a sketch dimension.  System expressions are
            deleted when the object they are associated with is deleted.  @return  the new expression 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Expression * CreateSystemExpression
        (
            const char * string /** the equation or right-hand-side for the expression.
                                               You can specify a name for the equation by providing a
                                               string in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z".  If you do not
                                               provide a name, a name will be assigned automatically.
                                               For example, if the string is "1.2 * y + z", a
                                               name will be assigned automatically. */
        );
        /** Creates a system expression with units.  After creating a system expression, you should
            associate it with an object, such as a sketch dimension.  System expressions are
            deleted when the object they are associated with is deleted.  @return  the new expression 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * CreateSystemExpressionWithUnits
        (
            const NXString & string /** the equation or right-hand-side for the expression.
                                               You can specify a name for the equation by providing a
                                               string in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z".  If you do not
                                               provide a name, a name will be assigned automatically.
                                               For example, if the string is "1.2 * y + z", a
                                               name will be assigned automatically. */,
            NXOpen::Unit * unitType /** units for the expression */
        );
        /** Creates a system expression with units.  After creating a system expression, you should
            associate it with an object, such as a sketch dimension.  System expressions are
            deleted when the object they are associated with is deleted.  @return  the new expression 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Expression * CreateSystemExpressionWithUnits
        (
            const char * string /** the equation or right-hand-side for the expression.
                                               You can specify a name for the equation by providing a
                                               string in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z".  If you do not
                                               provide a name, a name will be assigned automatically.
                                               For example, if the string is "1.2 * y + z", a
                                               name will be assigned automatically. */,
            NXOpen::Unit * unitType /** units for the expression */
        );
        /** Creates an expression of the specified type.  @return  the new expression 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * CreateExpression
        (
            const NXString & expressionType /** The type of the expression, such as "Number", "String", "Boolean", "Integer", "Point" and "Vector" */,
            const NXString & string /** the equation for the expression.  Must be in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z". */
        );
        /** Creates an expression of the specified type.  @return  the new expression 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Expression * CreateExpression
        (
            const char * expressionType /** The type of the expression, such as "Number", "String", "Boolean", "Integer", "Point" and "Vector" */,
            const char * string /** the equation for the expression.  Must be in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z". */
        );
        /** Creates a system expression of the specified type.  After creating a system expression,
            you should associate it with an object, such as a sketch dimension.  System expressions are
            deleted when the object they are associated with is deleted.  @return  the new expression 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * CreateSystemExpression
        (
            const NXString & expressionType /** The type of the expression, such as "Number", "String", "Boolean", "Integer", "Point" and "Vector" */,
            const NXString & string /** the equation or right-hand-side for the expression.
                                               You can specify a name for the equation by providing a
                                               string in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z".  If you do not
                                               provide a name, a name will be assigned automatically.
                                               For example, if the string is "1.2 * y + z", a
                                               name will be assigned automatically. */
        );
        /** Creates a system expression of the specified type.  After creating a system expression,
            you should associate it with an object, such as a sketch dimension.  System expressions are
            deleted when the object they are associated with is deleted.  @return  the new expression 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Expression * CreateSystemExpression
        (
            const char * expressionType /** The type of the expression, such as "Number", "String", "Boolean", "Integer", "Point" and "Vector" */,
            const char * string /** the equation or right-hand-side for the expression.
                                               You can specify a name for the equation by providing a
                                               string in the format: name = right_hand_side.
                                               For example, "x = 1.2 * y + z".  If you do not
                                               provide a name, a name will be assigned automatically.
                                               For example, if the string is "1.2 * y + z", a
                                               name will be assigned automatically. */
        );
        /** Edits an expression. Note, there is no difference between this method and
            editing the expression via @link NXOpen::Expression::SetRightHandSide NXOpen::Expression::SetRightHandSide@endlink 
            if the ExpressionCollection is owned by the part that owns the expression. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Edit
        (
            NXOpen::Expression * expression /** The expression to be edited,
                         Note: if this expression is not owned by the part that owns
                         the ExpressionCollection, a new expression will be created
                         in the part that owns the ExpressionCollection */,
            const NXString & newRightHandSide /** What you want to change the expression to */
        );
        /** Edits an expression. Note, there is no difference between this method and
            editing the expression via @link NXOpen::Expression::SetRightHandSide NXOpen::Expression::SetRightHandSide@endlink 
            if the ExpressionCollection is owned by the part that owns the expression. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void Edit
        (
            NXOpen::Expression * expression /** The expression to be edited,
                         Note: if this expression is not owned by the part that owns
                         the ExpressionCollection, a new expression will be created
                         in the part that owns the ExpressionCollection */,
            const char * newRightHandSide /** What you want to change the expression to */
        );
        /** Edits an expression with units. Changing the units on an existing expression
            is only allowed when the expression is not referenced yet.

             <br> Note, if you do not change the units, there is no difference between this method and
            editing the expression via @link NXOpen::Expression::SetRightHandSide NXOpen::Expression::SetRightHandSide@endlink 
            if the ExpressionCollection is owned by the part that owns the expression.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void EditWithUnits
        (
            NXOpen::Expression * expression /** The expression to be edited,
                         Note: if this expression is not owned by the part that owns
                         the ExpressionCollection, a new expression will be created
                         in the part that owns the ExpressionCollection */,
            NXOpen::Unit * unitType /** units for the expression */,
            const NXString & newRightHandSide /** What you want to change the expression to */
        );
        /** Edits an expression with units. Changing the units on an existing expression
            is only allowed when the expression is not referenced yet.

             <br> Note, if you do not change the units, there is no difference between this method and
            editing the expression via @link NXOpen::Expression::SetRightHandSide NXOpen::Expression::SetRightHandSide@endlink 
            if the ExpressionCollection is owned by the part that owns the expression.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void EditWithUnits
        (
            NXOpen::Expression * expression /** The expression to be edited,
                         Note: if this expression is not owned by the part that owns
                         the ExpressionCollection, a new expression will be created
                         in the part that owns the ExpressionCollection */,
            NXOpen::Unit * unitType /** units for the expression */,
            const char * newRightHandSide /** What you want to change the expression to */
        );
        /** Deletes an expression 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Delete
        (
            NXOpen::Expression * expression /** The expression to be deleted */
        );
        /** Finds the @link  NXOpen::Expression   NXOpen::Expression @endlink  with the given identifier as recorded in a journal.
            An object may not return the same value as its JournalIdentifier in different versions of
            the software. However newer versions of the software should find the same object when
            FindObject is passed older versions of its journal identifier. In general, this method
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  Expression found 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * FindObject
        (
            const NXString & journalIdentifier /** Identifier to be found */
        );
        /** Finds the @link  NXOpen::Expression   NXOpen::Expression @endlink  with the given identifier as recorded in a journal.
            An object may not return the same value as its JournalIdentifier in different versions of
            the software. However newer versions of the software should find the same object when
            FindObject is passed older versions of its journal identifier. In general, this method
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  Expression found 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Expression * FindObject
        (
            const char * journalIdentifier /** Identifier to be found */
        );
        /** Imports expressions from a file. Input a file specification.  When calling this method, changes are not applied to the system
            until @link Update::DoUpdate Update::DoUpdate@endlink  is called.  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void ImportFromFile
        (
            const NXString & fileName /** File name specification to import expressions from */,
            NXOpen::ExpressionCollection::ImportMode importMode /** import mode */,
            bool* expModified /** TRUE if any expressions were affected by the import */,
            std::vector<NXString> & errorMessages /** translated list of error messages */
        );
        /** Imports expressions from a file. Input a file specification.  When calling this method, changes are not applied to the system
            until @link Update::DoUpdate Update::DoUpdate@endlink  is called.  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void ImportFromFile
        (
            const char * fileName /** File name specification to import expressions from */,
            NXOpen::ExpressionCollection::ImportMode importMode /** import mode */,
            bool* expModified /** TRUE if any expressions were affected by the import */,
            std::vector<NXString> & errorMessages /** translated list of error messages */
        );
        /** Exports the expressions to a text file, or, if 'file_name' is NULL,
            list the expressions in the listing window. Throws an exception
            if there is any error.
             <br>  NOTE: if the file already exists, an exception is thrown and the
                   file is not overwritten. <br> 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void ExportToFile
        (
            NXOpen::ExpressionCollection::ExportMode exportMode /** export mode */,
            const NXString & fileName /** File name specification to export expressions into. */,
            NXOpen::ExpressionCollection::SortType sortType /** How to sort the exported expressions */
        );
        /** Exports the expressions to a text file, or, if 'file_name' is NULL,
            list the expressions in the listing window. Throws an exception
            if there is any error.
             <br>  NOTE: if the file already exists, an exception is thrown and the
                   file is not overwritten. <br> 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void ExportToFile
        (
            NXOpen::ExpressionCollection::ExportMode exportMode /** export mode */,
            const char * fileName /** File name specification to export expressions into. */,
            NXOpen::ExpressionCollection::SortType sortType /** How to sort the exported expressions */
        );
        /** Returns a list of parts that are referenced from expressions in the part "owning_part". @return  array of part names 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetInterpartReferences
        (
        );
        /** Returns a list of parts that are referenced from expressions in the part "owning_part".
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void GetInterpartReferencesWithDisplayNames
        (
            std::vector<NXString> & referencedPartNames /** array of internal part names */,
            std::vector<NXString> & referencedDispNames /** array of display part names */
        );
        /** Interface for collaborative design  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void GetInterpartReferencesFor4gd
        (
            std::vector<NXString> & referencedPartNames /** array of internal part names */,
            std::vector<NXString> & referencedDispNames /** array of display part names */,
            std::vector<NXOpen::NXObject *> & referencedParts /** array of occ parts and part occs */
        );
        /** Removes the interpart references from a part. If a part name
            is given, then it removes the references to that part. If part_name
            is NULL, it removes all references to all parts.

             <br> References on the RHS are replaced by a numerical value, References
            on the LHS are deleted. E.g.  <br> 

                 <br> x = comp::len + z  --\> x = 3 + z <br> 

                 <br> comp::height=5  --\> (deleted) <br> 

             <br> The function returns TRUE is any references were removed, and FALSE
            otherwise.   <br>   @return  whether any changes were made 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool RemoveInterpartReferences
        (
            const NXString & partName /** Part name to remove references for */
        );
        /** Removes the interpart references from a part. If a part name
            is given, then it removes the references to that part. If part_name
            is NULL, it removes all references to all parts.

             <br> References on the RHS are replaced by a numerical value, References
            on the LHS are deleted. E.g.  <br> 

                 <br> x = comp::len + z  --\> x = 3 + z <br> 

                 <br> comp::height=5  --\> (deleted) <br> 

             <br> The function returns TRUE is any references were removed, and FALSE
            otherwise.   <br>   @return  whether any changes were made 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        bool RemoveInterpartReferences
        (
            const char * partName /** Part name to remove references for */
        );
        /** Changes all of the references in the part "owning_part" from expressions
            in the part "old_part_name" to expressions in the part "new_part_name".
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void ChangeInterpartReferences
        (
            const NXString & oldPartName /** Part name whose references are being replaced */,
            const NXString & newPartName /** New part name to reference */
        );
        /** Changes all of the references in the part "owning_part" from expressions
            in the part "old_part_name" to expressions in the part "new_part_name".
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void ChangeInterpartReferences
        (
            const char * oldPartName /** Part name whose references are being replaced */,
            const char * newPartName /** New part name to reference */
        );
        /** Changes all of the references in the part "owning_part" from expressions
            in the part "old_part_name" to expressions in the part "new_part_name".
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void ChangeInterpartReferences
        (
            const NXString & oldPartName /** Part name whose references are being replaced */,
            const NXString & newPartName /** New part name to reference */,
            bool doUpdate /** Do update if true */,
            bool doChecking /** Do checking if true */
        );
        /** Changes all of the references in the part "owning_part" from expressions
            in the part "old_part_name" to expressions in the part "new_part_name".
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        void ChangeInterpartReferences
        (
            const char * oldPartName /** Part name whose references are being replaced */,
            const char * newPartName /** New part name to reference */,
            bool doUpdate /** Do update if true */,
            bool doChecking /** Do checking if true */
        );
        /** Interface for collaborative design 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void ChangeInterpartReferencesFor4gd
        (
            NXOpen::Assemblies::Component * targetPartOccTag /** Part occ of target part */,
            const NXString & oldSourcePartName /** Part name whose references are being replaced */,
            NXOpen::Assemblies::Component * newSourcePartOccTag /** Part occ of new source part */,
            bool doUpdate /** Do update if true */,
            bool doChecking /** Do checking if true */
        );
        /** Interface for collaborative design 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        void ChangeInterpartReferencesFor4gd
        (
            NXOpen::Assemblies::Component * targetPartOccTag /** Part occ of target part */,
            const char * oldSourcePartName /** Part name whose references are being replaced */,
            NXOpen::Assemblies::Component * newSourcePartOccTag /** Part occ of new source part */,
            bool doUpdate /** Do update if true */,
            bool doChecking /** Do checking if true */
        );
        /** Returns an array of visible "Number" expressions in the part.   @return  array of "Number" expressions 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::Expression *> GetVisibleExpressions
        (
        );
        /** Changes the name of the expression. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Rename
        (
            NXOpen::Expression * expression /** expression to be renamed */,
            const NXString & newName /** new name of the expression */
        );
        /** Changes the name of the expression. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void Rename
        (
            NXOpen::Expression * expression /** expression to be renamed */,
            const char * newName /** new name of the expression */
        );
        /** Changes the name of the expression without marking system expressions as user expressions. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SystemRename
        (
            NXOpen::Expression * expression /** expression to be renamed */,
            const NXString & newName /** new name of the expression */
        );
        /** Changes the name of the expression without marking system expressions as user expressions. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SystemRename
        (
            NXOpen::Expression * expression /** expression to be renamed */,
            const char * newName /** new name of the expression */
        );
        /** Replaces references to an expression with another expression. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void Replace
        (
            const NXString & currentName /** current expression name */,
            const NXString & replaceName /** replace expression name */
        );
        /** Replaces references to an expression with another expression. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        void Replace
        (
            const char * currentName /** current expression name */,
            const char * replaceName /** replace expression name */
        );
        /** Creates a @link NXOpen::SuppressByExpressionBuilder NXOpen::SuppressByExpressionBuilder@endlink   @return  SuppressByExpressionBuilder object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SuppressByExpressionBuilder * CreateSuppressByExpressionBuilder
        (
        );
        /** Creates a system string expression from a reference string in Drafting Note format.  Only
            expressions (X) and attributes (W) are supported.  
            
            Here is how the control character sequences need to be formatted:
            Expressions - Xm.n\@exp_name
            Part Attributes - W\@attr_title
            Object Attributes - W!obj_id\@attr_title
             @return  the new expression 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * CreateSystemExpressionFromReferenceString
        (
            const NXString & reference /** the reference string in Drafting Note format */
        );
        /** Creates a system string expression from a reference string in Drafting Note format.  Only
            expressions (X) and attributes (W) are supported.  
            
            Here is how the control character sequences need to be formatted:
            Expressions - Xm.n\@exp_name
            Part Attributes - W\@attr_title
            Object Attributes - W!obj_id\@attr_title
             @return  the new expression 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        NXOpen::Expression * CreateSystemExpressionFromReferenceString
        (
            const char * reference /** the reference string in Drafting Note format */
        );
        /** Get the attribute expression of the specified attribute title/type.  @return  the attribute expression 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * GetAttributeExpression
        (
            NXOpen::NXObject * object /** The object of the attribute */,
            const NXString & title /** The title of the attribute */,
            NXOpen::NXObject::AttributeType type /** The type of the attribute */,
            int index /** The array index if the attribute is an array (use -1 otherwise) */
        );
        /** Get the attribute expression of the specified attribute title/type.  @return  the attribute expression 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Expression * GetAttributeExpression
        (
            NXOpen::NXObject * object /** The object of the attribute */,
            const char * title /** The title of the attribute */,
            NXOpen::NXObject::AttributeType type /** The type of the attribute */,
            int index /** The array index if the attribute is an array (use -1 otherwise) */
        );
        /** Replace the attribute expression of the specified attribute title/type. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void ReplaceAttributeExpression
        (
            NXOpen::Expression * expression /** the attribute expression */,
            NXOpen::NXObject * object /** The object of the attribute */,
            const NXString & title /** The title of the attribute */,
            NXOpen::NXObject::AttributeType type /** The type of the attribute */,
            int index /** The array index if the attribute is an array (use -1 otherwise) */
        );
        /** Replace the attribute expression of the specified attribute title/type. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void ReplaceAttributeExpression
        (
            NXOpen::Expression * expression /** the attribute expression */,
            NXOpen::NXObject * object /** The object of the attribute */,
            const char * title /** The title of the attribute */,
            NXOpen::NXObject::AttributeType type /** The type of the attribute */,
            int index /** The array index if the attribute is an array (use -1 otherwise) */
        );
        /** Creates interpart expressions. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::InterpartExpressionsBuilder * CreateInterpartExpressionsBuilder
        (
        );
        /** Replace expressions. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ReplaceExpressionsBuilder * CreateReplaceExpressionsBuilder
        (
        );
        /** Creates the right hand side name for an interpart expression reference. 
                For example, if the destination part is A and the source expression is X 
                from part B then NX will create/return the expression for the A::x 
                interpart expression reference.
             @return  right hand side name 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXString AskInterpartRhsName
        (
            NXOpen::Expression * sourceExpression /** expression in source part */
        );
        /** Creates the left hand side name for an overriding interpart expression reference.
                For example, if the destination part is A and the source expression is X 
                from part B then NX will create/return the expression for the A::x 
                overrdding interpart expression reference.
             @return  left hand side name 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXString AskInterpartLhsName
        (
            NXOpen::Expression * sourceExpression /** expression in source part */
        );
        /** Replaces the old right hand side interpart expression references with those of the
                new right hand side interpart expression.  For example, replacing x="A"::x with
                y="B"::y with result in right hand interpart expression x="B"::y and expression y=x.
            
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void ReplaceRhsInterpartExpression
        (
            NXOpen::Expression * oldRhsIpe /** right hand side interpart expression to be replaced */,
            NXOpen::Expression * newRhsIpe /** right hand side interpart expression to be replaced with */
        );
        /** Returns an array of expressions in the part of the specified @link NXOpen::ExpressionCollection::Type NXOpen::ExpressionCollection::Type@endlink .   @return  array of "Number" expressions 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::Expression *> GetExpressionsOfType
        (
            NXOpen::ExpressionCollection::Type type /** @link NXOpen::ExpressionCollection::Type NXOpen::ExpressionCollection::Type@endlink  of the expression. */,
            bool visibleOnly /** Fister to get only visible expressions. */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
