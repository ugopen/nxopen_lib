#ifndef NXOpen_CAE_SOLIDPROPERTYCHECKBUILDER_HXX_INCLUDED
#define NXOpen_CAE_SOLIDPROPERTYCHECKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SolidPropertyCheckBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SolidPropertyCheckBuilder;
    }
    class Builder;
    namespace CAE
    {
        class FEElement;
    }
    namespace CAE
    {
        class Mesh;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class CoordinateSystem;
    class Expression;
    class TaggedObject;
    class Unit;
    namespace CAE
    {
        class _SolidPropertyCheckBuilderBuilder;
        class SolidPropertyCheckBuilderImpl;
        /**
            Represents a @link NXOpen::CAE::SolidPropertyCheckBuilder NXOpen::CAE::SolidPropertyCheckBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::CAE::ModelCheckManager::CreateSolidPropertyCheckBuilder  NXOpen::CAE::ModelCheckManager::CreateSolidPropertyCheckBuilder @endlink  <br> 
         <br>  Created in NX5.0.1.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SolidPropertyCheckBuilder : public NXOpen::Builder
        {
            /** User Specified output unit */
            public: enum UserUnit
            {
                UserUnitDefaultUnit/** Load unit = same as system default unit*/,
                UserUnitKgMilli/** mass = kg, cg = mm, volume = mm^3 mmoi = kg-mm^2*/,
                UserUnitLbmIn/** mass = lbm, cg = in, volume = in^3 mmoi = lbm-in^2*/,
                UserUnitLbfInSec/** mass = lbf-sec^2/in, cg = in, volume = in^3 mmoi = lbf-in-sec^2*/
            };

            /** Coupled Solution output option */
            public: enum CoupledSolutionOutput
            {
                CoupledSolutionOutputStructural/** structural results */,
                CoupledSolutionOutputThermal/** thermal results */
            };

            /** Solid property value request type */
            public: enum ValueRequest
            {
                ValueRequestVolume/** volume */,
                ValueRequestTotalMass/** total mass */,
                ValueRequestStructuralMass/** structural mass */,
                ValueRequestNonStructuralMass/** non-structural mass */,
                ValueRequestSurfaceArea/** surface area */,
                ValueRequestTotalMassThermalCapacitance/** total mass thermal capacitance */,
                ValueRequestStructuralMassThermalCapacitance/** structural mass thermal capacitance */,
                ValueRequestNonStructuralMassThermalCapacitance/** non-structural mass thermal capacitance */,
                ValueRequestLength/** length */
            };

            private: SolidPropertyCheckBuilderImpl * m_solidpropertycheckbuilder_impl;
            private: friend class  _SolidPropertyCheckBuilderBuilder;
            protected: SolidPropertyCheckBuilder();
            public: ~SolidPropertyCheckBuilder();
            /**Returns  the reference csys 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * ReferenceCsys
            (
            );
            /**Sets  the reference csys 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetReferenceCsys
            (
                NXOpen::CoordinateSystem * referenceCsys /** referencecsys */ 
            );
            /**Returns  the output result unit  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SolidPropertyCheckBuilder::UserUnit UserSpecifiedUnit
            (
            );
            /**Sets  the output result unit  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetUserSpecifiedUnit
            (
                NXOpen::CAE::SolidPropertyCheckBuilder::UserUnit userSpecifiedUnit /** userspecifiedunit */ 
            );
            /**Returns  the output mass split option option 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: bool DisplayCgOption
            (
            );
            /**Sets  the output mass split option option 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetDisplayCgOption
            (
                bool displayCG /** displaycg */ 
            );
            /**Returns  the selected elements 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * Elements
            (
            );
            /**Returns  the output mass split option option 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: bool SplitMass
            (
            );
            /**Sets  the output mass split option option 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSplitMass
            (
                bool splitMass /** splitmass */ 
            );
            /**Returns  the output mass split option option 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: bool DefaultTemperatureOption
            (
            );
            /**Sets  the output mass split option option 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetDefaultTemperatureOption
            (
                bool defaultTemperatureOption /** defaulttemperatureoption */ 
            );
            /**Returns  the output temperature option in C
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EvaluationTemparature
            (
            );
            /**Returns  the detail output option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool OutputOption
            (
            );
            /**Sets  the detail output option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetOutputOption
            (
                bool outputOpt /** outputopt */ 
            );
            /**Sets  the coupled solution output option 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCoupledSolutionOption
            (
                NXOpen::CAE::SolidPropertyCheckBuilder::CoupledSolutionOutput coupledSolutionOpt /** coupledsolutionopt */ 
            );
            /**Returns  the coupled solution output option 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SolidPropertyCheckBuilder::CoupledSolutionOutput CoupledSolutionOption
            (
            );
            /**Sets  the mesh option 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMeshOption
            (
                bool meshOpt /** meshopt */ 
            );
            /**Returns  the mesh option 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool MeshOption
            (
            );
            /**Sets  the mesh object 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMeshObject
            (
                NXOpen::CAE::Mesh * meshObj /** meshobj */ 
            );
            /**Returns  the mesh object 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::Mesh * MeshObject
            (
            );
            /**Sets  the group option 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGroupOption
            (
                bool groupOpt /** groupopt */ 
            );
            /**Returns  the group option 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool GroupOption
            (
            );
            /**Sets  the group object 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGroupObject
            (
                NXOpen::TaggedObject * groupObj /** groupobj */ 
            );
            /**Returns  the group object 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::TaggedObject * GroupObject
            (
            );
            /**Sets  the value request option 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetValueRequestOption
            (
                bool valReqOpt /** valreqopt */ 
            );
            /**Returns  the value request option 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool ValueRequestOption
            (
            );
            /** The elements to be applied for value request 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementsForValueRequest
            (
                const std::vector<NXOpen::CAE::FEElement *> & elements /** elements */ 
            );
            /** The solid property values 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void GetSolidPropertyValues
            (
                const std::vector<NXOpen::CAE::SolidPropertyCheckBuilder::ValueRequest> & valueTypes /** valuetypes */ ,
                std::vector<NXOpen::Unit *> & valueUnits /** valueunits */ ,
                std::vector<double> & values /** values */ 
            );
            /** The center of gravity 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Vector3d GetCenterOfGravity
            (
                NXOpen::Unit ** cgUnit /** cgunit */ 
            );
            /** The center of gravity moment of inertia 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Matrix3x3 GetCenterOfGravityMomentOfInertia
            (
                NXOpen::Unit ** mmoiUnit /** mmoiunit */ 
            );
            /** The global moment of inertia 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Matrix3x3 GetGlobalMomentOfInertia
            (
                NXOpen::Unit ** mmoiUnit /** mmoiunit */ 
            );
            /** The reference csys moment of inertia 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Matrix3x3 GetReferenceCsysMomentOfInertia
            (
                NXOpen::Unit ** mmoiUnit /** mmoiunit */ 
            );
            /** The principal moment of inertia 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Matrix3x3 GetPrincipalMomentOfInertia
            (
                NXOpen::Unit ** mmoiUnit /** mmoiunit */ 
            );
            /** The principal axes 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Matrix3x3 GetPrincipalAxes
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
