#ifndef NXOpen_PID_LIBRARYAUTHORINGBUILDER_HXX_INCLUDED
#define NXOpen_PID_LIBRARYAUTHORINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_LibraryAuthoringBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DiagrammingLibraryAuthor_LineTypeBuilder.hxx>
#include <NXOpen/DiagrammingLibraryAuthor_PipeStockBuilder.hxx>
#include <NXOpen/DiagrammingLibraryAuthor_Symbol2DBuilder.hxx>
#include <NXOpen/DiagrammingLibraryAuthor_Symbol3DBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libpidopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        class LibraryAuthoringBuilder;
    }
    class Builder;
    namespace DiagrammingLibraryAuthor
    {
        class AttributeHolder;
    }
    namespace DiagrammingLibraryAuthor
    {
        class LineTypeBuilder;
    }
    namespace DiagrammingLibraryAuthor
    {
        class LineTypeBuilderList;
    }
    namespace DiagrammingLibraryAuthor
    {
        class PipeStockBuilder;
    }
    namespace DiagrammingLibraryAuthor
    {
        class Symbol2DBuilder;
    }
    namespace DiagrammingLibraryAuthor
    {
        class Symbol3DBuilder;
    }
    namespace PID
    {
        class _LibraryAuthoringBuilderBuilder;
        class LibraryAuthoringBuilderImpl;
        /**  @brief  Represents a LibraryAuthoringBuilder.  

          
                Calling @link Builder::Commit Builder::Commit@endlink  on this builder will only return NULL.  <br> To create a new instance of this class, use @link NXOpen::PID::PidManager::CreateLibraryAuthoringBuilder  NXOpen::PID::PidManager::CreateLibraryAuthoringBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Symbol2D.Image.CaptureMethod </td> <td> 
         
        GraphicsArea </td> </tr> 

        <tr><td> 
         
        Symbol2D.Image.Format </td> <td> 
         
        Bmp </td> </tr> 

        <tr><td> 
         
        Symbol2D.Image.Size </td> <td> 
         
        Pixels64 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.1.  <br>  
        */
        class PIDOPENCPPEXPORT  LibraryAuthoringBuilder : public NXOpen::Builder
        {
            private: LibraryAuthoringBuilderImpl * m_libraryauthoringbuilder_impl;
            private: friend class  _LibraryAuthoringBuilderBuilder;
            protected: LibraryAuthoringBuilder();
            public: ~LibraryAuthoringBuilder();
            /** Selects the all symbols in the folder by the 2D symbol ID 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SelectFolder
            (
                const NXString & classId /** classid */ ,
                const NXString & symbolId /** symbolid */ 
            );
            /** Selects the all symbols in the folder by the 2D symbol ID 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SelectFolder
            (
                const char * classId /** classid */ ,
                const char * symbolId /** symbolid */ 
            );
            /** Selects one 2D symbol or 3D symbol by the symbol ID 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SelectSymbol
            (
                const NXString & symbolId /** symbolid */ 
            );
            /** Selects one 2D symbol or 3D symbol by the symbol ID 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SelectSymbol
            (
                const char * symbolId /** symbolid */ 
            );
            /**Returns  the symbol 2D sub-builder. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::DiagrammingLibraryAuthor::Symbol2DBuilder * Symbol2D
            (
            );
            /**Returns  the symbol 3D sub-builder. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::DiagrammingLibraryAuthor::Symbol3DBuilder * Symbol3D
            (
            );
            /**Returns  the pipe stock sub-builder. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::DiagrammingLibraryAuthor::PipeStockBuilder * PipeStock
            (
            );
            /** Creates a new line type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::DiagrammingLibraryAuthor::LineTypeBuilder * CreateLineType
            (
            );
            /**Returns  the list of line types. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::DiagrammingLibraryAuthor::LineTypeBuilderList * LineTypes
            (
            );
            /** Gets the symbol objects which have user attributes of the symbol. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetSymbolObjects
            (
                std::vector<NXOpen::DiagrammingLibraryAuthor::AttributeHolder *> & symbolObjects /** the symbol objects */
            );
            /** Creates a new 3D symbol  @return  the symbol object 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::DiagrammingLibraryAuthor::AttributeHolder * Create3DSymbol
            (
                const NXString & instanceId /** instanceid */ ,
                const NXString & partId /** partid */ ,
                const NXString & partName /** partname */ ,
                const NXString & numberName /** numbername */ 
            );
            /** Creates a new 3D symbol  @return  the symbol object 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            NXOpen::DiagrammingLibraryAuthor::AttributeHolder * Create3DSymbol
            (
                const char * instanceId /** instanceid */ ,
                const char * partId /** partid */ ,
                const char * partName /** partname */ ,
                const char * numberName /** numbername */ 
            );
            /** Deletes the 3D symbol which is new created 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void Delete3DSymbol
            (
                NXOpen::DiagrammingLibraryAuthor::AttributeHolder * symbolObject /** the symbol object,
                                only accept the object which is got by @link NXOpen::PID::LibraryAuthoringBuilder::Create3DSymbol NXOpen::PID::LibraryAuthoringBuilder::Create3DSymbol@endlink  */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
