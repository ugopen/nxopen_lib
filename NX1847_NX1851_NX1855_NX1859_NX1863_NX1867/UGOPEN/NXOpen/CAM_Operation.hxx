#ifndef NXOpen_CAM_OPERATION_HXX_INCLUDED
#define NXOpen_CAM_OPERATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_Operation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CAMSetup.hxx>
#include <NXOpen/CAM_CutRegionsData.hxx>
#include <NXOpen/CAM_GougeCheckResults.hxx>
#include <NXOpen/CAM_Move.hxx>
#include <NXOpen/CAM_CAMObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class Operation;
    }
    namespace CAM
    {
        class CAMFeature;
    }
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class CutRegionsData;
    }
    namespace CAM
    {
        namespace FBM
        {
            class Feature;
        }
    }
    namespace CAM
    {
        class GougeCheckResults;
    }
    namespace CAM
    {
        class Move;
    }
    namespace CAM
    {
        class MoveCollection;
    }
    namespace CAM
    {
        class NCGroup;
    }
    namespace CAM
    {
        class ToolPathEditorBuilder;
    }
    class NXObject;
    namespace CAM
    {
        class _OperationBuilder;
        class OperationImpl;
        /** Represents an operation  <br> To create or edit an instance of this class, use @link NXOpen::CAM::OperationBuilder  NXOpen::CAM::OperationBuilder @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  Operation : public NXOpen::CAM::CAMObject
        {
            private: OperationImpl * m_operation_impl;
            private: friend class  _OperationBuilder;
            protected: Operation();
            public: ~Operation();
            /** Returns the append move 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void AppendMove
            (
                NXOpen::CAM::Move * move /** move */ 
            );
            /** Returns the insert move 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void InsertMove
            (
                NXOpen::CAM::Move * insertAfter /** insert after */ ,
                NXOpen::CAM::Move * move /** move */ 
            );
            /** Get the valid User Defined Move Types  @return  User Defined Move Types 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetUserDefinedMoveTypes
            (
            );
            /** Create Tool Path Editor Move builder  @return  array of new objects 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ToolPathEditorBuilder * CreateToolPathEditorBuilder
            (
            );
            /** Returns toolpath time in minutes   @return  the toolpath time in minutes 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: double GetToolpathTime
            (
            );
            /** Sets toolpath time in seconds  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolpathTime
            (
                double time /** the toolpath time in seconds */
            );
            /** Returns toolpath length in Part units (mm or inch)  @return  the toolpath length in Part units (mm or inch) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: double GetToolpathLength
            (
            );
            /** Sets toolpath length in Part units (mm or inch) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolpathLength
            (
                double length /** the toolpath length in Part units (mm or inch) */
            );
            /** Returns toolpath cutting time in seconds  @return  the toolpath cutting time in seconds 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: double GetToolpathCuttingTime
            (
            );
            /** Sets toolpath cutting time in seconds 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolpathCuttingTime
            (
                double time /** the toolpath cutting time in seconds */
            );
            /** Returns toolpath cutting length in Part units (mm or inch)  @return  the toolpath cutting length in Part units (mm or inch) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: double GetToolpathCuttingLength
            (
            );
            /** Sets toolpath cutting length in Part units (mm or inch) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolpathCuttingLength
            (
                double length /** the toolpath cutting length in Part units (mm or inch) */
            );
            /** Get parent @return  the operation parent 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NCGroup * GetParent
            (
                NXOpen::CAM::CAMSetup::View branch /**  branch from which to get the operation parent */
            );
            /** Unlink instance
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void UnlinkInstance
            (
            );
            /** Get input ipw for the operation. It is the callers responsibility to free the returned faceted body after use.  @return  the ipw as a faceted body
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::NXObject * GetInputIpw
            (
            );
            /** Insert a machining feature to machine and returns an in process feature  @return  the in process feature  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FBM::Feature * InsertFeature
            (
                NXOpen::CAM::CAMFeature * tagMachiningFeature /** the machining feature */
            );
            /** Remove a machining feature 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void RemoveFeature
            (
                NXOpen::CAM::CAMFeature * tagFeature /** the machining feature */
            );
            /** Get the in process feature type 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: NXString GetInProcessFeatureType
            (
            );
            /** Set the in process feature type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInProcessFeatureType
            (
                const NXString & type /** type */ 
            );
            /** Set the in process feature type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetInProcessFeatureType
            (
                const char * type /** type */ 
            );
            /** Set machining area 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMachiningArea
            (
                const NXString & type /** type */ 
            );
            /** Set machining area 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetMachiningArea
            (
                const char * type /** type */ 
            );
            /**Returns  the gouge check status 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool GougeCheckStatus
            (
            );

            /// \cond NX_NO_DOC 
            /** Perform Gouge Checking 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::GougeCheckResults * PerformGougeCheck
            (
                NXOpen::CAM::GougeCheckResults::Option gougeOption /** gouge checking option */
            );

            /// \endcond 
            /**Returns  the Gouge check Results 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::GougeCheckResults * GougeCheckResults
            (
            );

            /// \cond NX_NO_DOC 
            /** Reset Gouge Checking 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void ResetGougeChecking
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Performs Spike Checking 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void PerformSpikeCheck
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Cut Regions Data 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::CutRegionsData * CutRegionsData
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Save Master Tool Path for AutoQC  
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SaveMasterPath
            (
                bool inThePart /** save the master path in the same part if true, else in master part*/
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Load Master Tool Path from a specified part  @return  true if master path loading was successful 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool LoadMasterPathFromPart
            (
                const NXString & masterPathPartName /** Part file with master path */
            );
            /** Load Master Tool Path from a specified part  @return  true if master path loading was successful 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            bool LoadMasterPathFromPart
            (
                const char * masterPathPartName /** Part file with master path */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Load Master Tool Path  @return  true if master path loading was successful 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool LoadMasterPath
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Has Master Tool Path  @return  true if master path exists 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool HasMasterPath
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Delete Master Tool Path 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void DeleteMasterPath
            (
            );

            /// \endcond 
            /**Returns  the indicator to show if the operation has other instances 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool HasOtherInstances
            (
            );
            /** Get the other instances of the operation
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: std::vector<NXOpen::CAM::Operation *> GetOtherInstances
            (
            );
            /**Returns  the indicator to show if the operation is the source for tool path divide 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool IsFirstOfDivide
            (
            );
            /**Returns  the indicator to show if the operation is result of tool path divide
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool IsDivided
            (
            );
            /** Get the divided operations from tool path divide of this operation
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: std::vector<NXOpen::CAM::Operation *> GetDividedOperations
            (
            );
            /** Get the first source operation of the divided operation @return  the first operation for divide
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::Operation * GetFirstOfDivide
            (
            );

            /// \cond NX_NO_DOC 
            /** Is the Operation Additive  @return  true if the operation is additive 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool IsAdditive
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Compare Path  @return  true if the paths compare OK 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool ComparePath
            (
                double positionTolerance /** the position tolerance */,
                double angleTolerance /** the tool axis angle tolerance */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Compare Path  @return  true if the paths compare OK 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool ComparePath
            (
                double positionTolerance /** the position tolerance */,
                double angleTolerance /** the tool axis angle tolerance */,
                bool exactCompare /** binary comparison */,
                bool realCompare /** real/snake comparison */,
                bool tubeCompare /** tube comparison */
            );

            /// \endcond 
            /** Is the operation a mirrored operation?  @return  true if the operation is mirror 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool IsMirror
            (
            );
            /** Is the cut direction of the mirror operation maintained?  @return  true if the mirror operation maintains cut direction 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool IsMaintainCutDirection
            (
            );
            /** Is the cut angle of the mirror operation maintained?  @return  true if the mirror operation maintains cut angle 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool IsMaintainCutAngle
            (
            );


            /** Represents Move Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAM::MoveCollection *CAMMoveCollection();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
