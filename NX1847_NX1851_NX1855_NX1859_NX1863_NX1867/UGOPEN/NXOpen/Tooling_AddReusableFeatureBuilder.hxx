#ifndef NXOpen_TOOLING_ADDREUSABLEFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_ADDREUSABLEFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_AddReusableFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_CopyPasteBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class AddReusableFeatureBuilder;
    }
    class Builder;
    namespace Features
    {
        class CopyPasteBuilder;
    }
    namespace Tooling
    {
        class _AddReusableFeatureBuilderBuilder;
        class AddReusableFeatureBuilderImpl;
        /** Represents a @link NXOpen::Tooling::AddReusableFeatureBuilder NXOpen::Tooling::AddReusableFeatureBuilder@endlink   <br> To create a new instance of this class, use @link NXOpen::Tooling::AddReusableFeatureCollection::CreateBuilder  NXOpen::Tooling::AddReusableFeatureCollection::CreateBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        LayerOption </td> <td> 
         
        Work </td> </tr> 

        <tr><td> 
         
        SpecifiedLayer </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  AddReusableFeatureBuilder : public NXOpen::Builder
        {
            /** Represents the layer option type */
            public: enum LayerOptionType
            {
                LayerOptionTypeWork/** Work Layer */,
                LayerOptionTypeOriginal/** Original Layer */,
                LayerOptionTypeAsSpecified/** As Specified Layer */
            };

            private: AddReusableFeatureBuilderImpl * m_addreusablefeaturebuilder_impl;
            private: friend class  _AddReusableFeatureBuilderBuilder;
            protected: AddReusableFeatureBuilder();
            public: ~AddReusableFeatureBuilder();
            /** Returns the copy paste builder
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::CopyPasteBuilder * GetCopyPasteBuilder
            (
            );
            /** Gets the user expressions value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetUserExpressions
            (
                std::vector<NXString> & userExpressionsName /** User expressions Name */,
                std::vector<NXString> & userExpressionsValue /** User expressions Value */
            );
            /** Sets the user expressions value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUserExpressions
            (
                std::vector<NXString> & userExpressionsName /** User expressions Name */,
                std::vector<NXString> & userExpressionsValue /** User expressions Value */
            );
            /**Returns  the layer option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AddReusableFeatureBuilder::LayerOptionType LayerOption
            (
            );
            /**Sets  the layer option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetLayerOption
            (
                NXOpen::Tooling::AddReusableFeatureBuilder::LayerOptionType layerOption /** layeroption */ 
            );
            /**Returns  the specified layer 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int SpecifiedLayer
            (
            );
            /**Sets  the specified layer 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSpecifiedLayer
            (
                int specifiedLayer /** specifiedlayer */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
