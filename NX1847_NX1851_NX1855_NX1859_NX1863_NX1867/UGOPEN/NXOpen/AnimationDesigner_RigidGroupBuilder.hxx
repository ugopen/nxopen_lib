#ifndef NXOpen_ANIMATIONDESIGNER_RIGIDGROUPBUILDER_HXX_INCLUDED
#define NXOpen_ANIMATIONDESIGNER_RIGIDGROUPBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AnimationDesigner_RigidGroupBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libanimationdesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AnimationDesigner
    {
        class RigidGroupBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Direction;
    class Expression;
    class NXColor;
    class Point;
    class SelectNXObjectList;
    namespace AnimationDesigner
    {
        class _RigidGroupBuilderBuilder;
        class RigidGroupBuilderImpl;
        /** Represents a @link NXOpen::AnimationDesigner::RigidGroupBuilder NXOpen::AnimationDesigner::RigidGroupBuilder@endlink .  <br> To create a new instance of this class, use @link NXOpen::AnimationDesigner::RigidGroupCollection::CreateRigidGroupBuilder  NXOpen::AnimationDesigner::RigidGroupCollection::CreateRigidGroupBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class ANIMATIONDESIGNEROPENCPPEXPORT  RigidGroupBuilder : public NXOpen::Builder
        {
            /** the mass property options. */
            public: enum MassPropertiesOption
            {
                MassPropertiesOptionAutomatic/** automatic */,
                MassPropertiesOptionUserDefined/** user defined */
            };

            /** the creation types. */
            public: enum CreationTypes
            {
                CreationTypesCombine/** Combine selections into one Rigid Group */,
                CreationTypesSeparate/** Create a Rigid Group for each selection */
            };

            /** the color options. */
            public: enum ColorOptions
            {
                ColorOptionsSpecifyColor/** Assigns a color to the group */,
                ColorOptionsAutomaticColor/** Auto-assigns a color to each group */,
                ColorOptionsNoColor/** Assigns no color to the groups */
            };

            private: RigidGroupBuilderImpl * m_rigidgroupbuilder_impl;
            private: friend class  _RigidGroupBuilderBuilder;
            protected: RigidGroupBuilder();
            public: ~RigidGroupBuilder();
            /**Returns  the geometries. This can be @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink ,
                        @link NXOpen::Point NXOpen::Point@endlink , @link NXOpen::Body NXOpen::Body@endlink , @link NXOpen::Curve NXOpen::Curve@endlink ,
                        @link NXOpen::CoordinateSystem NXOpen::CoordinateSystem@endlink , @link NXOpen::DatumAxis NXOpen::DatumAxis@endlink ,
                        @link NXOpen::DatumPlane NXOpen::DatumPlane@endlink , @link NXOpen::Annotations::Pmi NXOpen::Annotations::Pmi@endlink ,
                        Line Designer Connectors, etc. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::SelectNXObjectList * Geometry
            (
            );
            /**Returns  the auto-calculate mass property flag which is used to indicate whether
                        all mass properties are calculated by system. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::RigidGroupBuilder::MassPropertiesOption MassProperty
            (
            );
            /**Sets  the auto-calculate mass property flag which is used to indicate whether
                        all mass properties are calculated by system. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetMassProperty
            (
                NXOpen::AnimationDesigner::RigidGroupBuilder::MassPropertiesOption massProperty /** massproperty */ 
            );
            /**Returns  the mass center point. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Point * MassCenterPoint
            (
            );
            /**Sets  the mass center point. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetMassCenterPoint
            (
                NXOpen::Point * center /** center */ 
            );
            /**Returns  the orientation. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::CoordinateSystem * Orientation
            (
            );
            /**Sets  the orientation. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetOrientation
            (
                NXOpen::CoordinateSystem * orientation /** orientation */ 
            );
            /**Returns  the mass. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Expression * Mass
            (
            );
            /**Returns  the inertia Ixx. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Expression * InertiaIxx
            (
            );
            /**Returns  the inertia Iyy. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Expression * InertiaIyy
            (
            );
            /**Returns  the inertia Izz. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Expression * InertiaIzz
            (
            );
            /**Returns  the inertia Ixy. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Expression * InertiaIxy
            (
            );
            /**Returns  the inertia Ixz. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Expression * InertiaIxz
            (
            );
            /**Returns  the inertia Iyz. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Expression * InertiaIyz
            (
            );
            /**Returns  the linear velocity. It is only used when linear velocity is not zero. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Direction * LinearVelocityDirection
            (
            );
            /**Sets  the linear velocity. It is only used when linear velocity is not zero. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetLinearVelocityDirection
            (
                NXOpen::Direction * dir /** dir */ 
            );
            /**Returns  the linear velocity magnitude. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Expression * LinearVelocityMagnitude
            (
            );
            /**Returns  the angular velocity direction. It is only used when angular velocity is not zero. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Direction * AngularVelocityDirection
            (
            );
            /**Sets  the angular velocity direction. It is only used when angular velocity is not zero. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetAngularVelocityDirection
            (
                NXOpen::Direction * dir /** dir */ 
            );
            /**Returns  the angular velocity magnitude. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Expression * AngularVelocityMagnitude
            (
            );
            /**Returns  the creation type. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::RigidGroupBuilder::CreationTypes CreationType
            (
            );
            /**Sets  the creation type. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetCreationType
            (
                NXOpen::AnimationDesigner::RigidGroupBuilder::CreationTypes creationType /** creationtype */ 
            );
            /**Returns  the color option. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::RigidGroupBuilder::ColorOptions ColorOption
            (
            );
            /**Sets  the color option. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetColorOption
            (
                NXOpen::AnimationDesigner::RigidGroupBuilder::ColorOptions colorOption /** coloroption */ 
            );
            /**Returns  the color. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::NXColor * Color
            (
            );
            /**Sets  the color. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the name. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
