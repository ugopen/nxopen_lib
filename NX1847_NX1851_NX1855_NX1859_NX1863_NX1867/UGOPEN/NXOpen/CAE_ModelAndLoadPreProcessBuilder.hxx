#ifndef NXOpen_CAE_MODELANDLOADPREPROCESSBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELANDLOADPREPROCESSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelAndLoadPreProcessBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ModelAndLoadPreProcessBuilder;
    }
    class Builder;
    namespace CAE
    {
        class _ModelAndLoadPreProcessBuilderBuilder;
        class ModelAndLoadPreProcessBuilderImpl;
        /**
            Builds a @link NXOpen::CAE::ModelAndLoadPreProcess NXOpen::CAE::ModelAndLoadPreProcess@endlink  object which 
            represets a data processing meta solution.
             <br> To create a new instance of this class, use @link NXOpen::CAE::ModelAndLoadPreProcessor::CreateBuilder  NXOpen::CAE::ModelAndLoadPreProcessor::CreateBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Memory </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        NumThreads </td> <td> 
         
        4 </td> </tr> 

        <tr><td> 
         
        UseEnvVar </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        UseModelDirForSolverTempFiles </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ModelAndLoadPreProcessBuilder : public NXOpen::Builder
        {
            private: ModelAndLoadPreProcessBuilderImpl * m_modelandloadpreprocessbuilder_impl;
            private: friend class  _ModelAndLoadPreProcessBuilderBuilder;
            protected: ModelAndLoadPreProcessBuilder();
            public: ~ModelAndLoadPreProcessBuilder();
            /**Returns  the meta solution name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString MetaSolutionName
            (
            );
            /**Sets  the meta solution name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMetaSolutionName
            (
                const NXString & title /** title */ 
            );
            /**Sets  the meta solution name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetMetaSolutionName
            (
                const char * title /** title */ 
            );
            /**Returns  the use env var 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseEnvVar
            (
            );
            /**Sets  the use env var 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUseEnvVar
            (
                bool useEnvVar /** useenvvar */ 
            );
            /**Returns  the solver path 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SolverPath
            (
            );
            /**Sets  the solver path 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSolverPath
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the solver path 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetSolverPath
            (
                const char * filename /** filename */ 
            );
            /**Returns  the use model dir for solver temp files 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseModelDirForSolverTempFiles
            (
            );
            /**Sets  the use model dir for solver temp files 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUseModelDirForSolverTempFiles
            (
                bool useModelDirForSolverTempFiles /** usemodeldirforsolvertempfiles */ 
            );
            /**Returns  the temp dir 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TempDir
            (
            );
            /**Sets  the temp dir 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTempDir
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the temp dir 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetTempDir
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the memory 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: double Memory
            (
            );
            /**Sets  the memory 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMemory
            (
                double memory /** memory */ 
            );
            /**Returns  the num threads 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int NumThreads
            (
            );
            /**Sets  the num threads 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNumThreads
            (
                int numThreads /** numthreads */ 
            );
            /**Returns  the option "Run Job in Foreground" 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool RunInForeground
            (
            );
            /**Sets  the option "Run Job in Foreground" 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetRunInForeground
            (
                bool runInForeground /** runinforeground */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
