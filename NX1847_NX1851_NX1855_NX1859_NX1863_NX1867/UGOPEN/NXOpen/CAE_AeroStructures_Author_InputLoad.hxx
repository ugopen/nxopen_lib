#ifndef NXOpen_CAE_AEROSTRUCTURES_AUTHOR_INPUTLOAD_HXX_INCLUDED
#define NXOpen_CAE_AEROSTRUCTURES_AUTHOR_INPUTLOAD_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AeroStructures_Author_InputLoad.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_FEElement.hxx>
#include <NXOpen/CAE_FENode.hxx>
#include <NXOpen/CAE_Result.hxx>
#include <NXOpen/GeneralScalarTable.hxx>
#include <NXOpen/CAE_AeroStructures_Author_InputParameter.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace AeroStructures
        {
            namespace Author
            {
                class InputLoad;
            }
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            namespace Author
            {
                class InputParameter;
            }
        }
    }
    namespace CAE
    {
        class FEElement;
    }
    namespace CAE
    {
        class FENode;
    }
    class GeneralScalarTable;
    class Unit;
    namespace CAE
    {
        namespace AeroStructures
        {
            namespace Author
            {
                class _InputLoadBuilder;
                class InputLoadImpl;
                /**  @brief  represent a load input parameter  

                   <br> No support for KF  <br> 
                 <br>  Created in NX12.0.0.  <br>  
                */
                class NXOPENCPP_CAEEXPORT  InputLoad : public NXOpen::CAE::AeroStructures::Author::InputParameter
                {
                    /** the support type */
                    public: enum LoadSupportType
                    {
                        LoadSupportTypeNone/** Not available (the aggregation has been done at the calculation level, Values/GetValues() will return a vector of aggregated values) */,
                        LoadSupportTypeNode/** Node (the method has aggregated values that have been extracted per node, Values/GetValues() will return a table of values) */,
                        LoadSupportTypeElement/** Element (the method has aggregated values that have been extracted per element, Values/GetValues() will return a table of values) */
                    };

                    private: InputLoadImpl * m_inputload_impl;
                    private: friend class  _InputLoadBuilder;
                    protected: InputLoad();
                    public: ~InputLoad();
                    /**Returns  the support type 
                     <br>  Created in NX12.0.0.  <br>  
                     <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                    public: NXOpen::CAE::AeroStructures::Author::InputLoad::LoadSupportType SupportType
                    (
                    );
                    /** Get support nodes 
                     <br>  Created in NX12.0.0.  <br>  
                     <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                    public: void GetNodes
                    (
                        std::vector<NXOpen::CAE::FENode *> & nodeArray /** the list of support nodes, if available */
                    );
                    /** Get support elements 
                     <br>  Created in NX12.0.0.  <br>  
                     <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                    public: void GetElements
                    (
                        std::vector<NXOpen::CAE::FEElement *> & elementArray /** the list of support elements, if available */
                    );
                    /**Returns  the quantity 
                     <br>  Created in NX12.0.0.  <br>  
                     <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                    public: NXOpen::CAE::Result::Quantity Quantity
                    (
                    );
                    /**Returns  the values 
                     <br>  Created in NX12.0.0.  <br>  
                     <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                    public: NXOpen::GeneralScalarTable * Values
                    (
                    );
                    /**Returns  the unit type. 
                     <br>  Created in NX12.0.0.  <br>  
                     <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                    public: NXOpen::Unit * Unit
                    (
                    );
                    /** Get value using a specific unit type.  @return  either a one- or two-dimensional array of doubles 
                     <br>  Created in NX12.0.0.  <br>  
                     <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                    public: NXOpen::GeneralScalarTable * GetValues
                    (
                        NXOpen::Unit * unitType /** the unit in which the value must be converted if necessary*/
                    );
                };
            }
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
