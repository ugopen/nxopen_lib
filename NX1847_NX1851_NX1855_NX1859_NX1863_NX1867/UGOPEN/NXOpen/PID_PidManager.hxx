#ifndef NXOpen_PID_PIDMANAGER_HXX_INCLUDED
#define NXOpen_PID_PIDMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_PidManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_Partition.hxx>
#include <NXOpen/Diagramming_Sheet.hxx>
#include <NXOpen/Diagramming_SheetElement.hxx>
#include <NXOpen/PDM_ConnectionElementRevision.hxx>
#include <NXOpen/PDM_CrossSheetReference.hxx>
#include <NXOpen/PDM_ElementGroup.hxx>
#include <NXOpen/PDM_LogicalElementRevision.hxx>
#include <NXOpen/PDM_OrderedElementGroup.hxx>
#include <NXOpen/PDM_SheetRevision.hxx>
#include <NXOpen/PID_AutomaticTable.hxx>
#include <NXOpen/PID_AutomaticTableBuilder.hxx>
#include <NXOpen/PID_BulkEditBuilder.hxx>
#include <NXOpen/PID_DesignContextBuilder.hxx>
#include <NXOpen/PID_EquipmentBuilder.hxx>
#include <NXOpen/PID_FileNewApplicationBuilder.hxx>
#include <NXOpen/PID_FlowDirectionArrow.hxx>
#include <NXOpen/PID_FlowDirectionArrowBuilder.hxx>
#include <NXOpen/PID_InstrumentationBuilder.hxx>
#include <NXOpen/PID_LibraryAuthoringBuilder.hxx>
#include <NXOpen/PID_OffSheetConnectorBuilder.hxx>
#include <NXOpen/PID_PipeBuilder.hxx>
#include <NXOpen/PID_PortEquipmentBuilder.hxx>
#include <NXOpen/PID_PreferencesBuilder.hxx>
#include <NXOpen/PID_SheetTemplateBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libpidopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        class PidManager;
    }
    class Session;
    namespace Assemblies
    {
        class Partition;
    }
    namespace Diagramming
    {
        class Sheet;
    }
    namespace Diagramming
    {
        class SheetElement;
    }
    class NXObject;
    namespace PDM
    {
        class OrderedElementGroup;
    }
    namespace PID
    {
        class AutomaticTable;
    }
    namespace PID
    {
        class AutomaticTableBuilder;
    }
    namespace PID
    {
        class BulkEditBuilder;
    }
    namespace PID
    {
        class DesignContextBuilder;
    }
    namespace PID
    {
        class Equipment;
    }
    namespace PID
    {
        class EquipmentBuilder;
    }
    namespace PID
    {
        class FileNewApplicationBuilder;
    }
    namespace PID
    {
        class FlowDirectionArrow;
    }
    namespace PID
    {
        class FlowDirectionArrowBuilder;
    }
    namespace PID
    {
        class InstrumentationBuilder;
    }
    namespace PID
    {
        class LibraryAuthoringBuilder;
    }
    namespace PID
    {
        class OffSheetConnector;
    }
    namespace PID
    {
        class OffSheetConnectorBuilder;
    }
    namespace PID
    {
        class Pipe;
    }
    namespace PID
    {
        class PipeBuilder;
    }
    namespace PID
    {
        class PortEquipment;
    }
    namespace PID
    {
        class PortEquipmentBuilder;
    }
    namespace PID
    {
        class PreferencesBuilder;
    }
    namespace PID
    {
        class Sheet;
    }
    namespace PID
    {
        class SheetTemplateBuilder;
    }
    namespace PLAS
    {
        class Run;
    }
    class Part;
    namespace PID
    {
        class PidManagerImpl;
        /** A manager to deal with all objects.  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX11.0.1.  <br>  
        */
        class PIDOPENCPPEXPORT  PidManager
        {
            private: PidManagerImpl * m_pidmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PidManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static PidManager* thePidManager;
            /** Returns the PidManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static PidManager* GetPidManager(NXOpen::Session *owner);
            public: ~PidManager();
            /** Creates a @link NXOpen::PID::EquipmentBuilder NXOpen::PID::EquipmentBuilder@endlink . 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::EquipmentBuilder * CreateEquipmentBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::Equipment * equipment /** @link NXOpen::PID::Equipment NXOpen::PID::Equipment@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::PID::InstrumentationBuilder NXOpen::PID::InstrumentationBuilder@endlink . 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::InstrumentationBuilder * CreateInstrumentationBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::NXObject * instrumentation /** @link NXOpen::PID::InstrumentationSymbol NXOpen::PID::InstrumentationSymbol@endlink  or @link NXOpen::PID::Instrumentation NXOpen::PID::Instrumentation@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::PID::PortEquipmentBuilder NXOpen::PID::PortEquipmentBuilder@endlink . 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::PortEquipmentBuilder * CreatePortEquipmentBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::PortEquipment * portEquipment /** @link NXOpen::PID::PortEquipment NXOpen::PID::PortEquipment@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::PID::PipeBuilder NXOpen::PID::PipeBuilder@endlink . 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::PipeBuilder * CreatePipeBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::Pipe * pipe /** @link Diagramming::Connection Diagramming::Connection@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::PID::FlowDirectionArrowBuilder NXOpen::PID::FlowDirectionArrowBuilder@endlink . 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::FlowDirectionArrowBuilder * CreateFlowDirectionArrowBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::PID::FlowDirectionArrow * flowDirectionArrow /** @link NXOpen::PID::FlowDirectionArrow NXOpen::PID::FlowDirectionArrow@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::PID::PreferencesBuilder NXOpen::PID::PreferencesBuilder@endlink . 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::PreferencesBuilder * CreatePreferencesBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::Sheet * sheet /** sheet */ 
            );
            /** Creates a @link NXOpen::PID::BulkEditBuilder NXOpen::PID::BulkEditBuilder@endlink  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::BulkEditBuilder * CreateBulkEditBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::PID::OffSheetConnectorBuilder NXOpen::PID::OffSheetConnectorBuilder@endlink . 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::OffSheetConnectorBuilder * CreateOffSheetConnectorBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::OffSheetConnector * oscObject /** @link Diagramming::Annotation Diagramming::Annotation@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::PID::FileNewApplicationBuilder NXOpen::PID::FileNewApplicationBuilder@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::FileNewApplicationBuilder * CreateFilenewapplicationBuilder
            (
            );
            /** Creates a @link NXOpen::PID::DesignContextBuilder NXOpen::PID::DesignContextBuilder@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::DesignContextBuilder * CreateDesignContextBuilder
            (
            );
            /** Delete Sheet Elements. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void DeleteSheetElements
            (
                const std::vector<NXOpen::Diagramming::SheetElement *> & sheetElementsDel /** Sheet Elements to be checked*/
            );
            /** Opens a @link NXOpen::PID::Sheet NXOpen::PID::Sheet@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void OpenSheet
            (
                NXOpen::PID::Sheet * sheet /** sheet */ 
            );
            /** Opens a @link NXOpen::PID::Sheet NXOpen::PID::Sheet@endlink  without displaying the sheet. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void OpenSheetQuietly
            (
                NXOpen::PID::Sheet * sheet /** sheet */ 
            );
            /** Loads a @link NXOpen::Assemblies::Partition NXOpen::Assemblies::Partition@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void LoadSystem
            (
                NXOpen::Assemblies::Partition * system /** system */ 
            );
            /** Creates a @link NXOpen::PID::SheetTemplateBuilder NXOpen::PID::SheetTemplateBuilder@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::SheetTemplateBuilder * CreateSheetTemplateBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::Diagramming::Sheet * sheet /** sheet */ 
            );
            /** Creates a @link NXOpen::PID::LibraryAuthoringBuilder NXOpen::PID::LibraryAuthoringBuilder@endlink . 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::LibraryAuthoringBuilder * CreateLibraryAuthoringBuilder
            (
                NXOpen::Part * part /** the part that will own the object */
            );
            /** Enter Library Authoring Tool. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void EnterLibraryAuthoring
            (
            );
            /** Exit Library Authoring Tool. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void ExitLibraryAuthoring
            (
            );
            /** Exports @link NXOpen::PDM::ElementGroup NXOpen::PDM::ElementGroup@endlink  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void ExportRunNative
            (
                const std::vector<NXOpen::NXObject *> & runTags /** The runs to be exported */,
                const NXString & destination /** The destination folder */
            );
            /** Exports @link NXOpen::PDM::ElementGroup NXOpen::PDM::ElementGroup@endlink  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void ExportRunNative
            (
                const std::vector<NXOpen::NXObject *> & runTags /** The runs to be exported */,
                const char * destination /** The destination folder */
            );
            /** Exports @link NXOpen::PDM::ElementGroup NXOpen::PDM::ElementGroup@endlink  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void ExportRunManaged
            (
                const std::vector<NXOpen::NXObject *> & runTags /** The runs to be exported */,
                const NXString & destination /** The destination folder */
            );
            /** Exports @link NXOpen::PDM::ElementGroup NXOpen::PDM::ElementGroup@endlink  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void ExportRunManaged
            (
                const std::vector<NXOpen::NXObject *> & runTags /** The runs to be exported */,
                const char * destination /** The destination folder */
            );
            /** Moves branch from one run to another. the original branch will be destroyed 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PDM::OrderedElementGroup * ReparentBranch
            (
                NXOpen::PLAS::Run * sourceRun /** sourcerun */ ,
                NXOpen::PLAS::Run * destinationRun /** destinationrun */ ,
                NXOpen::PDM::OrderedElementGroup * oldbranch /** oldbranch */ 
            );
            /** Convert an unassigned run to normal one
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void ConvertUnassignedRunToNormalRun
            (
                NXOpen::PLAS::Run * run /** run */ 
            );
            /** Creates a @link NXOpen::PID::AutomaticTableBuilder NXOpen::PID::AutomaticTableBuilder@endlink . 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::AutomaticTableBuilder * CreateAutomaticTableBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::AutomaticTable * table /** @link NXOpen::PID::AutomaticTable NXOpen::PID::AutomaticTable@endlink  to be edited, if NULL then create a new one */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
