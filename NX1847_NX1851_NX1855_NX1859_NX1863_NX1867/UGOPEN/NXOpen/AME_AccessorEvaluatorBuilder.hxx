#ifndef NXOpen_AME_ACCESSOREVALUATORBUILDER_HXX_INCLUDED
#define NXOpen_AME_ACCESSOREVALUATORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_AccessorEvaluatorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_BaseEvaluatorBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class AccessorEvaluatorBuilder;
    }
    namespace AME
    {
        class BaseEvaluatorBuilder;
    }
    namespace AME
    {
        class _AccessorEvaluatorBuilderBuilder;
        class AccessorEvaluatorBuilderImpl;
        /** Evaluates an object based on a property value or an index  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateAccessorEvaluatorBuilder  NXOpen::AME::AMEManager::CreateAccessorEvaluatorBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  AccessorEvaluatorBuilder : public NXOpen::AME::BaseEvaluatorBuilder
        {
            /** Choices for access type either by an index or property */
            public: enum AccessType
            {
                AccessTypeProperty/** property */ ,
                AccessTypeIndex/** index */ 
            };

            /** Choices for position to be either begin, end or defined by index */
            public: enum PositionTypeValue
            {
                PositionTypeValueBegin/** begin */ ,
                PositionTypeValueEnd/** end */ ,
                PositionTypeValueIndex/** index */ 
            };

            private: AccessorEvaluatorBuilderImpl * m_accessorevaluatorbuilder_impl;
            private: friend class  _AccessorEvaluatorBuilderBuilder;
            protected: AccessorEvaluatorBuilder();
            public: ~AccessorEvaluatorBuilder();
            /**Returns  the access type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AccessorEvaluatorBuilder::AccessType AccessTypeValue
            (
            );
            /**Sets  the access type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAccessTypeValue
            (
                NXOpen::AME::AccessorEvaluatorBuilder::AccessType accessType /** accesstype */ 
            );
            /**Returns  the comparative value given by user 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString CompareValue
            (
            );
            /**Sets  the comparative value given by user 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetCompareValue
            (
                const NXString & compareValue /** comparevalue */ 
            );
            /**Sets  the comparative value given by user 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetCompareValue
            (
                const char * compareValue /** comparevalue */ 
            );
            /**Returns  the property name given by the user 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString PropertyName
            (
            );
            /**Sets  the property name given by the user 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPropertyName
            (
                const NXString & propertyName /** propertyname */ 
            );
            /**Sets  the property name given by the user 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPropertyName
            (
                const char * propertyName /** propertyname */ 
            );
            /**Returns  the position value given by the user 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AccessorEvaluatorBuilder::PositionTypeValue PositionValue
            (
            );
            /**Sets  the position value given by the user 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPositionValue
            (
                NXOpen::AME::AccessorEvaluatorBuilder::PositionTypeValue positionValue /** positionvalue */ 
            );
            /**Returns  the object index value given by the user 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int ObjectPosition
            (
            );
            /**Sets  the object index value given by the user 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetObjectPosition
            (
                int objectPosition /** objectposition */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
