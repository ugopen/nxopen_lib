#ifndef NXOpen_AME_GENERATEREPORTSBUILDER_HXX_INCLUDED
#define NXOpen_AME_GENERATEREPORTSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_GenerateReportsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class GenerateReportsBuilder;
    }
    class Builder;
    namespace AME
    {
        class _GenerateReportsBuilderBuilder;
        class GenerateReportsBuilderImpl;
        /** Comment <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateGenerateReportsBuilder  NXOpen::AME::AMEManager::CreateGenerateReportsBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  GenerateReportsBuilder : public NXOpen::Builder
        {
            private: GenerateReportsBuilderImpl * m_generatereportsbuilder_impl;
            private: friend class  _GenerateReportsBuilderBuilder;
            protected: GenerateReportsBuilder();
            public: ~GenerateReportsBuilder();
            /**Returns  the generate to project toggle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool GenerateToProjectToggle
            (
            );
            /**Sets  the generate to project toggle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetGenerateToProjectToggle
            (
                bool generateToProjectToggle /** generatetoprojecttoggle */ 
            );
            /**Returns  the generate to system toggle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool GenerateToSystemToggle
            (
            );
            /**Sets  the generate to system toggle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetGenerateToSystemToggle
            (
                bool generateToSystemToggle /** generatetosystemtoggle */ 
            );
            /**Returns  the native folder browser 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString NativeFolderBrowser
            (
            );
            /**Sets  the native folder browser 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetNativeFolderBrowser
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the native folder browser 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetNativeFolderBrowser
            (
                const char * foldername /** foldername */ 
            );
            /** The function updates the report rule status 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateReportRuleStatus
            (
                int ruleTag /** ruletag */ ,
                bool status /** status */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
