#ifndef NXOpen_DRAWINGS_VIEWSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ViewSettingsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drawings
    {
        class _ViewSettingsBuilderBuilder;
        class ViewSettingsBuilderImpl;
        /**
            Represents a @link Drawings::ViewSettingsBuilder Drawings::ViewSettingsBuilder@endlink .
            This class queries and sets settings specific to drawings data which will get converted to PMI.s
            
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ViewSettingsBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** enum is used to list out different rendering style types */
            public: enum RenderingStyleEnum
            {
                RenderingStyleEnumShaded/** shaded */ ,
                RenderingStyleEnumDrawingViewSetting/** drawing view setting */ 
            };

            private: ViewSettingsBuilderImpl * m_viewsettingsbuilder_impl;
            private: friend class  _ViewSettingsBuilderBuilder;
            protected: ViewSettingsBuilder();
            public: ~ViewSettingsBuilder();
            /**Returns  the convert annotation  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ConvertAnnotation
            (
            );
            /**Sets  the convert annotation  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetConvertAnnotation
            (
                bool convertAnnotation /** convertannotation */ 
            );
            /**Returns  the section geometry tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double SectionGeometryTolerance
            (
            );
            /**Sets  the section geometry tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSectionGeometryTolerance
            (
                double sectionGeometryTolerance /** sectiongeometrytolerance */ 
            );
            /**Returns  the prefix string 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Prefix
            (
            );
            /**Sets  the prefix string 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPrefix
            (
                const NXString & prefix /** prefix */ 
            );
            /**Sets  the prefix string 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetPrefix
            (
                const char * prefix /** prefix */ 
            );
            /**Returns  the add sheet name  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool AddSheetName
            (
            );
            /**Sets  the add sheet name  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAddSheetName
            (
                bool addSheetName /** addsheetname */ 
            );
            /**Returns  the add sheet number 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool AddSheetNumber
            (
            );
            /**Sets  the add sheet number 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAddSheetNumber
            (
                bool addSheetNumber /** addsheetnumber */ 
            );
            /**Returns  the separator string 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Separator
            (
            );
            /**Sets  the separator string 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSeparator
            (
                const NXString & separator /** separator */ 
            );
            /**Sets  the separator string 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetSeparator
            (
                const char * separator /** separator */ 
            );
            /**Returns  the rendering style 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewSettingsBuilder::RenderingStyleEnum RenderingStyle
            (
            );
            /**Sets  the rendering style 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetRenderingStyle
            (
                NXOpen::Drawings::ViewSettingsBuilder::RenderingStyleEnum renderingStyle /** renderingstyle */ 
            );
            /**Returns  the apply crosshatch To section view  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ApplyCrosshatchToSectionView
            (
            );
            /**Sets  the apply crosshatch To section view  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetApplyCrosshatchToSectionView
            (
                bool applyCrosshatchToSectionView /** applycrosshatchtosectionview */ 
            );
            /**Returns  the use assembly crosshatch  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseAssemblyCrosshatch
            (
            );
            /**Sets  the use assembly crosshatch  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetUseAssemblyCrosshatch
            (
                bool useAssemblyCrosshatch /** useassemblycrosshatch */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
