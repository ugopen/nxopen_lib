#ifndef NXOpen_CAE_DATAREADEROPTIONBASE_HXX_INCLUDED
#define NXOpen_CAE_DATAREADEROPTIONBASE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DataReaderOptionBase.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DataReaderDatabaseOptions.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DataReaderOptionBase;
    }
    namespace CAE
    {
        class _DataReaderOptionBaseBuilder;
        class DataReaderOptionBaseImpl;
        /**  @brief  Base class for the all the option types exposed by the data reader. The GetType() 
            method can be used to determine the exact option type to which to cast this object.
             

          <br>   <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DataReaderOptionBase : public NXOpen::TaggedObject
        {
            private: DataReaderOptionBaseImpl * m_datareaderoptionbase_impl;
            private: friend class  _DataReaderOptionBaseBuilder;
            protected: DataReaderOptionBase();
            public: ~DataReaderOptionBase();
            /**Returns  the option type. Use this to know to which option subtype this oject
                    can be cast.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DataReaderDatabaseOptions::OptionType Type
            (
            );
            /**Returns  the option name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Returns  the option description. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Description
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
