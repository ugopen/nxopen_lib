#ifndef NXOpen_UNITCOLLECTION_HXX_INCLUDED
#define NXOpen_UNITCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UnitCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class UnitCollection;
    class BasePart;
    class Unit;
    class UnitCollectionImpl;
    /** Provides methods for manipulating the units in a part  <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  UnitCollection : public NXOpen::TaggedObjectCollection
    {
        /** Specifies a set of units to be used as defaults for data entry or object information
                For each measure, a unit type will be selected that matches the specified choice.

                The choice affects these dimensions:
                    Lenth
                    Mass
                    Force
                    Angle
                    Temperature
                    Delta Temperature

                These dimensions are not affected:
                    Electric Charge (A-sec)
                    Luminous Intensity (cd)
                    Amount of Substance (mol)

                 NOTE: 
                    Only the SI unit set is an internally consistent set of units. For example,
                    the unit for Force (N) is used in all the metric sets, but since it's defined as
                    kg*m/s^2, it's compatible only with kg and m, which are used in the SI set.
                    Similarly, the unit deg is used for all the sets except the SI set.
            */
        public: enum UnitDefaults
        {
            UnitDefaultsLbmInLbfDegF/** Usual choice for inch parts. */,
            UnitDefaultsLbmFtLbfDegF/** Not supported for data entry units */,
            UnitDefaultsGMmNDegC/** Not supported for data entry units */,
            UnitDefaultsGCmNDegC/** Not supported for data entry units */,
            UnitDefaultsKgMNRadK/** SI compatibility */,
            UnitDefaultsKgMmNDegC/** Usual choice for mm parts */
        };

        private: UnitCollectionImpl * m_unitcollection_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit UnitCollection(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~UnitCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::UnitCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Unit *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(nullptr), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::UnitCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * () const;
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::UnitCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Set a choice of default set of units for data entry in the given part.
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDefaultDataEntryUnits
        (
            NXOpen::UnitCollection::UnitDefaults defaults /** defaults */ 
        );
        /** Get the choice of default set of units for data entry in the given part 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::UnitCollection::UnitDefaults GetDefaultDataEntryUnits
        (
        );
        /** Set a choice of default set of units for object information in the given part 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDefaultObjectInformationUnits
        (
            NXOpen::UnitCollection::UnitDefaults defaults /** defaults */ 
        );
        /** Get the choice of default set of units for object information in the given part 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::UnitCollection::UnitDefaults GetDefaultObjectInformationUnits
        (
        );
        /** Finds the @link  Unit   Unit @endlink  with the given name.  @return  Unit found 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Unit * FindObject
        (
            const NXString & name /** Name to be found */
        );
        /** Finds the @link  Unit   Unit @endlink  with the given name.  @return  Unit found 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Unit * FindObject
        (
            const char * name /** Name to be found */
        );
        /** Finds the list of different types of measures available in the system.
                 <br> Types of measures include length, area and volume <br>  @return  Array of names of measures 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetMeasures
        (
        );
        /** Finds the unit types that are available for a given measure  @return  Array of units for a given measurement type 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::Unit *> GetMeasureTypes
        (
            const NXString & measureName /** the type of measure */
        );
        /** Finds the unit types that are available for a given measure  @return  Array of units for a given measurement type 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        std::vector<NXOpen::Unit *> GetMeasureTypes
        (
            const char * measureName /** the type of measure */
        );
        /** Find the base unit type for a given measure.
                The returned unit type depends on whether the part is an inch or millimeter part.  @return  base unit 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Unit * GetBase
        (
            const NXString & measureName /** the type of measure */
        );
        /** Find the base unit type for a given measure.
                The returned unit type depends on whether the part is an inch or millimeter part.  @return  base unit 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Unit * GetBase
        (
            const char * measureName /** the type of measure */
        );
        /** Convert a value from one unit of measure to another  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: double Convert
        (
            NXOpen::Unit * initialUnitType /** initial measurement unit */,
            NXOpen::Unit * targetUnitType /** target measurement unit */,
            double initialValue /** initial value */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
