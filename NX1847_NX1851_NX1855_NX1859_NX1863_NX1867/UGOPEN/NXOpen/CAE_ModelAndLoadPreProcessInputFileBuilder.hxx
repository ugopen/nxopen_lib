#ifndef NXOpen_CAE_MODELANDLOADPREPROCESSINPUTFILEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELANDLOADPREPROCESSINPUTFILEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelAndLoadPreProcessInputFileBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DataReaderDatabaseOptions.hxx>
#include <NXOpen/CAE_ModelAndLoadPreProcessOperationBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ModelAndLoadPreProcessInputFileBuilder;
    }
    namespace CAE
    {
        class DataReaderDatabaseOptions;
    }
    namespace CAE
    {
        class ModelAndLoadPreProcessOperationBuilder;
    }
    namespace CAE
    {
        class _ModelAndLoadPreProcessInputFileBuilderBuilder;
        class ModelAndLoadPreProcessInputFileBuilderImpl;
        /**
            Builds a @link NXOpen::CAE::ModelAndLoadPreProcessInputFile NXOpen::CAE::ModelAndLoadPreProcessInputFile@endlink  object which 
            represets an operation.
             <br> There is no kf creator for this.  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ModelAndLoadPreProcessInputFileBuilder : public NXOpen::CAE::ModelAndLoadPreProcessOperationBuilder
        {
            /** The quantity for the dataset*/
            public: enum Quantity
            {
                QuantityPressure/** pressure */ ,
                QuantityDisplacement/** displacement */ ,
                QuantityVelocity/** velocity */ ,
                QuantityAcceleration/** acceleration */ ,
                QuantityMassDensity/** mass density */ ,
                QuantitySpeedOfSound/** speed of sound */ ,
                QuantityForce/** force */ ,
                QuantityTemperature/** temperature */ 
            };

            /** The location for the dataset*/
            public: enum Location
            {
                LocationNode/** node */ ,
                LocationElement/** element */ ,
                LocationMotionElement/** motion element */ 
            };

            /** The sorting for the dataset*/
            public: enum Sorting
            {
                SortingVectors/** vectors */ ,
                SortingFunctions/** functions */ 
            };

            private: ModelAndLoadPreProcessInputFileBuilderImpl * m_modelandloadpreprocessinputfilebuilder_impl;
            private: friend class  _ModelAndLoadPreProcessInputFileBuilderBuilder;
            protected: ModelAndLoadPreProcessInputFileBuilder();
            public: ~ModelAndLoadPreProcessInputFileBuilder();
            /**Returns  the select file 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FilePath
            (
            );
            /**Sets  the select file 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFilePath
            (
                const NXString & filePath /** filepath */ 
            );
            /**Sets  the select file 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetFilePath
            (
                const char * filePath /** filepath */ 
            );
            /**Returns  the database options 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DataReaderDatabaseOptions * DatabaseOptions
            (
            );
            /** Refreshes the data set list. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RefreshDataSets
            (
            );
            /** Select query. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetQuerySelected
            (
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Quantity quantity /** quantity */ ,
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Location location /** location */ ,
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Sorting sorting /** sorting */ ,
                const NXString & name /** name */ ,
                bool selected /** selected */ 
            );
            /** Select query. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetQuerySelected
            (
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Quantity quantity /** quantity */ ,
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Location location /** location */ ,
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Sorting sorting /** sorting */ ,
                const char * name /** name */ ,
                bool selected /** selected */ 
            );
            /** Sets query target storage name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetQueryTargetStorageName
            (
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Quantity quantity /** quantity */ ,
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Location location /** location */ ,
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Sorting sorting /** sorting */ ,
                const NXString & name /** name */ ,
                const NXString & targetStorageName /** targetstoragename */ 
            );
            /** Sets query target storage name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetQueryTargetStorageName
            (
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Quantity quantity /** quantity */ ,
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Location location /** location */ ,
                NXOpen::CAE::ModelAndLoadPreProcessInputFileBuilder::Sorting sorting /** sorting */ ,
                const char * name /** name */ ,
                const char * targetStorageName /** targetstoragename */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
