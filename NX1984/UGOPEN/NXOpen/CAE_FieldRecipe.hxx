#ifndef NXOpen_CAE_FIELDRECIPE_HXX_INCLUDED
#define NXOpen_CAE_FIELDRECIPE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_FieldRecipe.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_FieldTable.hxx>
#include <NXOpen/CAE_ProbeOutputRecipe.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class FieldRecipe;
    }
    namespace CAE
    {
        class ProbeOutputRecipe;
    }
    class Direction;
    namespace Fields
    {
        class FieldVariable;
    }
    namespace Fields
    {
        class SpatialMap;
    }
    namespace CAE
    {
        class _FieldRecipeBuilder;
        class FieldRecipeImpl;
        /**
                Represents a @link NXOpen::CAE::FieldRecipe NXOpen::CAE::FieldRecipe@endlink 
             <br> To obtain the object of this class use @link NXOpen::CAE::ResultProbe::GetOutputRecipe NXOpen::CAE::ResultProbe::GetOutputRecipe@endlink   <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  FieldRecipe : public NXOpen::CAE::ProbeOutputRecipe
        {
            private: FieldRecipeImpl * m_fieldrecipe_impl;
            private: friend class  _FieldRecipeBuilder;
            protected: FieldRecipe();
            public: ~FieldRecipe();
            /** Get Independent variables of field recipe @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::Fields::FieldVariable *> GetIndependentVars
            (
            );
            /** Set Independent variables of field recipe
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIndependentVars
            (
                const std::vector<NXOpen::Fields::FieldVariable *> & inputVars /** inputvars */ 
            );
            /** Get Dependent Variable of field recipe @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Fields::FieldVariable * GetDependentVar
            (
            );
            /** Set Dependent variable of field recipe
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDependentVar
            (
                NXOpen::Fields::FieldVariable * inputVar /** inputvar */ 
            );
            /** Get spatial map
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Fields::SpatialMap * GetSpatialMap
            (
            );
            /** Set spatial map
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSpatialMap
            (
                NXOpen::Fields::SpatialMap * spatialMap /** spatialmap */ 
            );
            /** Get duplicate value processing option
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Fields::FieldTable::DuplicateValueOption GetDuplicateValueOption
            (
            );
            /** Set duplicate value processing option
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDuplicateValueOption
            (
                NXOpen::Fields::FieldTable::DuplicateValueOption duplicate /** duplicate */ 
            );
            /** Get Direction for length domain.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Direction * GetLengthDirection
            (
            );
            /** Set Direction for length domain.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetLengthDirection
            (
                NXOpen::Direction * direction /** direction */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
