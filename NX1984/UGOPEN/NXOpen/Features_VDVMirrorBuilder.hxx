#ifndef NXOpen_FEATURES_VDVMIRRORBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VDVMIRRORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VDVMirrorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class VDVMirrorBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    class ScCollector;
    class Section;
    class SelectNXObjectList;
    namespace Features
    {
        class _VDVMirrorBuilderBuilder;
        class VDVMirrorBuilderImpl;

        /// \cond NX_NO_DOC 
        /**
            Represents a @link Features::VDVMirror Features::VDVMirror@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::AVDACollection::CreateVdvmirrorBuilder  NXOpen::Features::AVDACollection::CreateVdvmirrorBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Calotte.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        CurvatureChange.Value </term> <description> 
         
        1e-10 </description> </item> 

        <item><term> 
         
        MirrorClass </term> <description> 
         
        UserDefined </description> </item> 

        <item><term> 
         
        MirrorLocation </term> <description> 
         
        Inside </description> </item> 

        <item><term> 
         
        MirrorRadius.Value </term> <description> 
         
        1200 (millimeters part), 47.244 (inches part) </description> </item> 

        <item><term> 
         
        MirrorType </term> <description> 
         
        Planar </description> </item> 

        </list> 

         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  VDVMirrorBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Used to indicate the location of mirror*/
            public: enum MirrorLocations
            {
                MirrorLocationsInside/** inside */ ,
                MirrorLocationsDriverSide/** driver side */ ,
                MirrorLocationsPassengerSide/** passenger side */ 
            };

            /** Used to indicate the class of mirror*/
            public: enum MirrorClasses
            {
                MirrorClassesClassI/** class i */ ,
                MirrorClassesClassII/** class ii */ ,
                MirrorClassesClassIII/** class iii */ ,
                MirrorClassesClassIV/** class iv */ ,
                MirrorClassesClassV/** class v */ ,
                MirrorClassesClassVI/** class vi */ ,
                MirrorClassesClassVII/** class vii */ ,
                MirrorClassesUserDefined/** user defined */ 
            };

            /** Used to indicate the shape of Mirror surface*/
            public: enum MirrorTypes
            {
                MirrorTypesPlanar/** planar */ ,
                MirrorTypesSpherical/** spherical */ ,
                MirrorTypesAspherical/** aspherical */ 
            };

            private: VDVMirrorBuilderImpl * m_vdvmirrorbuilder_impl;
            private: friend class  _VDVMirrorBuilderBuilder;
            protected: VDVMirrorBuilder();
            public: ~VDVMirrorBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the mirror location 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VDVMirrorBuilder::MirrorLocations MirrorLocation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the mirror location 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : vehicle_des_val (" Vehicle Design and Validation") */
            public: void SetMirrorLocation
            (
                NXOpen::Features::VDVMirrorBuilder::MirrorLocations mirrorLocation /** mirrorlocation */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the mirror class 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VDVMirrorBuilder::MirrorClasses MirrorClass
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the mirror class 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : vehicle_des_val (" Vehicle Design and Validation") */
            public: void SetMirrorClass
            (
                NXOpen::Features::VDVMirrorBuilder::MirrorClasses mirrorClass /** mirrorclass */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Returns the user remark 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetUserRemarks
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the user remark 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : vehicle_des_val (" Vehicle Design and Validation") */
            public: void SetUserRemarks
            (
                const std::vector<NXString> & userRemarks /** userremarks */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the mirror type 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VDVMirrorBuilder::MirrorTypes MirrorType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the mirror type 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : vehicle_des_val (" Vehicle Design and Validation") */
            public: void SetMirrorType
            (
                NXOpen::Features::VDVMirrorBuilder::MirrorTypes mirrorType /** mirrortype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the mirror radius 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MirrorRadius
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the calotte 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Calotte
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the curvature change 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CurvatureChange
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the mirror face 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * MirrorFace
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the facet body that represents the closed mirror profile. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * MirrorFacetBodies
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the pivot point 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PivotPoint
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the pivot point 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : vehicle_des_val (" Vehicle Design and Validation") */
            public: void SetPivotPoint
            (
                NXOpen::Point * pivotPoint /** pivotpoint */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the prime point 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PrimePoint
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the prime point 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : vehicle_des_val (" Vehicle Design and Validation") */
            public: void SetPrimePoint
            (
                NXOpen::Point * primePoint /** primepoint */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the bezel curve 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * BezelCurve
            (
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
