#ifndef NXOpen_AME_GENERALNAMINGRULEBUILDER_HXX_INCLUDED
#define NXOpen_AME_GENERALNAMINGRULEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_GeneralNamingRuleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Tooling_SelectReuseLibraryItemBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class GeneralNamingRuleBuilder;
    }
    class Builder;
    namespace Tooling
    {
        class SelectReuseLibraryItemBuilder;
    }
    namespace AME
    {
        class _GeneralNamingRuleBuilderBuilder;
        class GeneralNamingRuleBuilderImpl;
        /** Assign general naming rule set <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateGeneralNamingRuleBuilder  NXOpen::AME::AMEManager::CreateGeneralNamingRuleBuilder @endlink  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  GeneralNamingRuleBuilder : public NXOpen::Builder
        {
            private: GeneralNamingRuleBuilderImpl * m_generalnamingrulebuilder_impl;
            private: friend class  _GeneralNamingRuleBuilderBuilder;
            protected: GeneralNamingRuleBuilder();
            public: ~GeneralNamingRuleBuilder();
            /**Returns  the library UDT selection
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Tooling::SelectReuseLibraryItemBuilder * SelectedItem
            (
            );
            /**Returns  the option to automatically rename AD object and its aspect names to mechanical/layout name upon mapping 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ExternalObjectsOnMapping
            (
            );
            /**Sets  the option to automatically rename AD object and its aspect names to mechanical/layout name upon mapping 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetExternalObjectsOnMapping
            (
                bool externalObjectsOnMapping /** externalobjectsonmapping */ 
            );
            /**Returns  the option to automatically rename its aspect names to mechanical/layout name upon mapping 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ApplyAspectNamingRule
            (
            );
            /**Sets  the option to automatically rename its aspect names to mechanical/layout name upon mapping 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetApplyAspectNamingRule
            (
                bool aspectNamingRule /** aspectnamingrule */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
