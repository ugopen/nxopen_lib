#ifndef NXOpen_TOOLING_LAYOUTMANAGEMENTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_LAYOUTMANAGEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_LayoutManagementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_ModlMotion.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_ToolingManager.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class LayoutManagementBuilder;
    }
    class Builder;
    class Direction;
    namespace GeometricUtilities
    {
        class ModlMotion;
    }
    class NXObject;
    class Point;
    class SelectBodyList;
    class SelectNXObjectList;
    namespace Tooling
    {
        class _LayoutManagementBuilderBuilder;
        class LayoutManagementBuilderImpl;
        /** Layout Management Builder of Engineering Die Wizard  <br> To create a new instance of this class, use @link NXOpen::Tooling::LayoutManagementCollection::CreateLayoutManagementBuilder  NXOpen::Tooling::LayoutManagementCollection::CreateLayoutManagementBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        MoveToStationEnum </term> <description> 
         
        Op00 </description> </item> 

        <item><term> 
         
        RepositionMotion.DeltaEnum </term> <description> 
         
        ReferenceWcsWorkPart </description> </item> 

        <item><term> 
         
        RepositionMotion.DeltaXc.Value </term> <description> 
         
        0.0 </description> </item> 

        <item><term> 
         
        RepositionMotion.DeltaYc.Value </term> <description> 
         
        0.0 </description> </item> 

        <item><term> 
         
        RepositionMotion.DeltaZc.Value </term> <description> 
         
        0.0 </description> </item> 

        <item><term> 
         
        StationDistance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        StationEnum </term> <description> 
         
        One </description> </item> 

        <item><term> 
         
        StationNameStr </term> <description> 
         
        station </description> </item> 

        <item><term> 
         
        StationNumber </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  LayoutManagementBuilder : public NXOpen::Builder
        {
            /** Specifies the station items */
            public: enum StationItems
            {
                StationItemsOne/** Define station number -- 01 */,
                StationItemsTwo/** Define station number -- 02 */,
                StationItemsThree/** Define station number -- 03 */
            };

            /** Specifies the destination station enumerations */
            public: enum MoveToStationEnumeration
            {
                MoveToStationEnumerationOp00/** Define station number -- OP00 */,
                MoveToStationEnumerationOp10/** Define station number -- OP10 */,
                MoveToStationEnumerationOp20/** Define station number -- OP20 */
            };

            private: LayoutManagementBuilderImpl * m_layoutmanagementbuilder_impl;
            private: friend class  _LayoutManagementBuilderBuilder;
            protected: LayoutManagementBuilder();
            public: ~LayoutManagementBuilder();
            /**Returns  the reference point 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ReferencePoint
            (
            );
            /**Sets  the reference point 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetReferencePoint
            (
                NXOpen::Point * referencePoint /** referencepoint */ 
            );
            /**Returns  the total station number of engineering die layout
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int StationNumber
            (
            );
            /**Sets  the total station number of engineering die layout
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStationNumber
            (
                int stationNumber /** stationnumber */ 
            );
            /**Returns  the station distance of engineering die
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double StationDistance
            (
            );
            /**Sets  the station distance of engineering die
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStationDistance
            (
                double stationDistance /** stationdistance */ 
            );
            /**Returns  the station number definition of engineering die 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LayoutManagementBuilder::StationItems StationEnum
            (
            );
            /**Sets  the station number definition of engineering die 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStationEnum
            (
                NXOpen::Tooling::LayoutManagementBuilder::StationItems stationEnum /** stationenum */ 
            );
            /**Returns  the select object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectObject
            (
            );
            /** Add objects to the specified station 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void AddObject
            (
            );
            /** Remove objects from the specified station 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveObject
            (
            );
            /** Move objects to the specified station 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void MoveToStation
            (
            );
            /**Returns  the move to station enum 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LayoutManagementBuilder::MoveToStationEnumeration MoveToStationEnum
            (
            );
            /**Sets  the move to station enum 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMoveToStationEnum
            (
                NXOpen::Tooling::LayoutManagementBuilder::MoveToStationEnumeration moveToStationEnum /** movetostationenum */ 
            );
            /**Returns  the station name definition of engineering die 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StationNameStr
            (
            );
            /**Sets  the station name definition of engineering die 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStationNameStr
            (
                const NXString & stationNameStr /** stationnamestr */ 
            );
            /**Sets  the station name definition of engineering die 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetStationNameStr
            (
                const char * stationNameStr /** stationnamestr */ 
            );
            /**Returns  the select entity to add into the station 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectEntityAdd
            (
            );
            /**Returns  the select entity to remove from the station 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectEntityRemove
            (
            );
            /**Returns  the specify die tip to define the forming direction
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SpecifyDieTip
            (
            );
            /**Sets  the specify die tip to define the forming direction
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecifyDieTip
            (
                NXOpen::Direction * specifyDieTip /** specifydietip */ 
            );
            /**Returns  the select bodies to reposition 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * BodiesReposition
            (
            );
            /**Returns  the reposition motion 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlMotion * RepositionMotion
            (
            );
            /** Add station after 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void AddStationAfter
            (
                NXOpen::NXObject * currentStationPart /** currentstationpart */ 
            );
            /** Delete station part 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteStationPart
            (
                NXOpen::NXObject * stationPart /** stationpart */ 
            );
            /** Increase station parts 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void IncreaseStationParts
            (
            );
            /** Decrease station parts 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void DecreaseStationParts
            (
            );
            /** Update station 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateStation
            (
                NXOpen::NXObject * stationPartOcc /** station part occ */,
                const NXString & newStationName /** new station name */,
                double newDistance /** new distance */
            );
            /** Update station 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void UpdateStation
            (
                NXOpen::NXObject * stationPartOcc /** station part occ */,
                const char * newStationName /** new station name */,
                double newDistance /** new distance */
            );
            /** Create a layout with views 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateLayoutWithViews
            (
            );
            /** Exit station management 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ExitStationManagement
            (
            );
            /** Create PMI note 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePmiNote
            (
            );
            /** Create PMI for the new created station 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePMIForNewStation
            (
            );
            /**Returns  the new created station part. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * NewStationPart
            (
            );
            /**Sets  the new created station part. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewStationPart
            (
                NXOpen::NXObject * newStationPartTag /** newstationparttag */ 
            );
            /**Returns  the wizard type data. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Tooling::ToolingApplication WizardType
            (
            );
            /**Sets  the wizard type data. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWizardType
            (
                NXOpen::Tooling::ToolingApplication wizardType /** wizardtype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
