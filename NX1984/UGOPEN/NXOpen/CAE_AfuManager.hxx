#ifndef NXOpen_CAE_AFUMANAGER_HXX_INCLUDED
#define NXOpen_CAE_AFUMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AfuManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AfuAbscissaHeaderInfo.hxx>
#include <NXOpen/CAE_AfuData.hxx>
#include <NXOpen/CAE_AfuHeaderId.hxx>
#include <NXOpen/CAE_AfuOrdinateHeaderInfo.hxx>
#include <NXOpen/CAE_AfuZHeaderInfo.hxx>
#include <NXOpen/CAE_XYFunctionDataTypes.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class AfuManager;
    }
    class Session;
    namespace CAE
    {
        class AfuAbscissaHeaderInfo;
    }
    namespace CAE
    {
        class AfuData;
    }
    namespace CAE
    {
        class AfuDataConvertor;
    }
    namespace CAE
    {
        class AfuDataCreator;
    }
    namespace CAE
    {
        class AfuHeaderId;
    }
    namespace CAE
    {
        class AfuMathOperation;
    }
    namespace CAE
    {
        class AfuOrdinateHeaderInfo;
    }
    namespace CAE
    {
        class AfuZHeaderInfo;
    }
    namespace CAE
    {
        class AfuManagerImpl;
        /**  @brief  Provides methods to manipulate AFU file or AFU record  

           <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  AfuManager
        {
            /** This enumeration defines the write modes for a file */
            public: enum WritingFileMode
            {
                WritingFileModeOverride/** Opens an empty file for writing. If the given file exists, its contents are destroyed. */,
                WritingFileModeAppend/** Opens a file for appending data to the end of the file */
            };

            /** This enumeration defines the user requested functions types to be read from the puch file*/
            public: enum RequestedMeasureType
            {
                RequestedMeasureTypeDisplacement/** Displacement */,
                RequestedMeasureTypeVelocity/** Velocity     */,
                RequestedMeasureTypeAcceleration/** Acceleration */,
                RequestedMeasureTypePressure/** Pressure     */
            };

            private: AfuManagerImpl * m_afumanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit AfuManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~AfuManager();
            /** Creates a new AFU record.
                    Application type and usage type are specified to
                    set the function data type of the AFU record.
                    Timestamp is outputted.
                     @return  Time stamp string indicates when the record was created 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CreateRecord
            (
                NXOpen::CAE::XyFunctionMacroType macroType /** Application type of AFU record used */,
                NXOpen::CAE::XyFunctionGeneralType dataType /** Usage type of AFU record used */,
                NXOpen::CAE::AfuData * afuData /** Afu record data */
            );
            /** Creates a AFU records from punch file. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateRecordsFromPunchFile
            (
                const NXString & sourcePchFileNames /** Source PCH file */,
                const NXString & destinationAfuFileName /** Destination AFU file */,
                const std::vector<NXOpen::CAE::AfuManager::RequestedMeasureType> & requestedFunctions /** Refer JA_AFU_MANAGER_requested_measure_type */
            );
            /** Creates a AFU records from punch file. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            void CreateRecordsFromPunchFile
            (
                const char * sourcePchFileNames /** Source PCH file */,
                const char * destinationAfuFileName /** Destination AFU file */,
                const std::vector<NXOpen::CAE::AfuManager::RequestedMeasureType> & requestedFunctions /** Refer JA_AFU_MANAGER_requested_measure_type */
            );
            /** Edits an existing AFU record.
                    Application type and usage type are specified to set
                    the function data type of the AFU record.
                    Timestamp is outputted.
                     @return  Time stamp string indicates when the record was last edited 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EditRecord
            (
                NXOpen::CAE::XyFunctionMacroType macroType /** Application type of AFU record used */,
                NXOpen::CAE::XyFunctionGeneralType dataType /** Usage type of AFU record used */,
                int afuRecordIndex /** Index of the AFU record in the AFU file. Must begin with 1 */,
                NXOpen::CAE::AfuData * afuData /** Afu record data */
            );
            /** Copies multiple AFU records to an AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void CopyRecords
            (
                std::vector<NXString> & sourceAfuFileNames /** the AFU files to be copied */,
                const std::vector<int> & recordIndexes /** Indexes of the AFU records to be copied. Each index Must begin with 1 */,
                const NXString & destinationAfuFileName /** Destination AFU file */
            );
            /** Copies multiple AFU records to an AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void CopyRecords
            (
                std::vector<NXString> & sourceAfuFileNames /** the AFU files to be copied */,
                const std::vector<int> & recordIndexes /** Indexes of the AFU records to be copied. Each index Must begin with 1 */,
                const char * destinationAfuFileName /** Destination AFU file */
            );
            /** Deletes multiple AFU records from an AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteRecords
            (
                const NXString & afuFileName /** AFU file name */,
                const std::vector<int> & afuRecordIndexes /** Indexes of the AFU records to be deleted from the AFU file. (Indexes begin with 1) */
            );
            /** Deletes multiple AFU records from an AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void DeleteRecords
            (
                const char * afuFileName /** AFU file name */,
                const std::vector<int> & afuRecordIndexes /** Indexes of the AFU records to be deleted from the AFU file. (Indexes begin with 1) */
            );
            /** Returns the AFU record data  @return  Time stamp string indicates the last time the AFU record was edited 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetAfuData
            (
                const NXString & afuFileName /** AFU file name */,
                int recordIndex /** Index of the AFU record in the AFU file. Must begin with 1*/,
                NXOpen::CAE::AfuData ** afuData /** AFU record data */
            );
            /** Returns the AFU record data  @return  Time stamp string indicates the last time the AFU record was edited 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            NXString GetAfuData
            (
                const char * afuFileName /** AFU file name */,
                int recordIndex /** Index of the AFU record in the AFU file. Must begin with 1*/,
                NXOpen::CAE::AfuData ** afuData /** AFU record data */
            );
            /** Creates an AFU record data object with specified axis definition  @return  AFU record data 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * CreateAfuData
            (
                NXOpen::CAE::AfuData::AbscissaType abscissaType /** Abscissa specific data type */
            );
            /** Creates a new empty AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateNewAfuFile
            (
                const NXString & afuFileName /** AFU file name */
            );
            /** Creates a new empty AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void CreateNewAfuFile
            (
                const char * afuFileName /** AFU file name */
            );
            /** Deletes an AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteAfuFile
            (
                const NXString & afuFileName /** AFU file name */
            );
            /** Deletes an AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void DeleteAfuFile
            (
                const char * afuFileName /** AFU file name */
            );
            /** Imports the data from an external file to create AFU records.
                        Currently supports CSV, MAT, DAC, RPCIII, UNV58, Samcef Des files.
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void ImportAfu
            (
                const NXString & importFileName /** The file name to be imported */,
                const NXString & afuFileName /** AFU file name */
            );
            /** Imports the data from an external file to create AFU records.
                        Currently supports CSV, MAT, DAC, RPCIII, UNV58, Samcef Des files.
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void ImportAfu
            (
                const char * importFileName /** The file name to be imported */,
                const char * afuFileName /** AFU file name */
            );
            /** Exports an AFU record to an external file file.
                        Currently supports CSV, MAT, DAC and UNV58 files.
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void ExportAfu
            (
                const NXString & afuFileName /** AFU file name */,
                int recordIndex /** Index of the AFU record to be exported */,
                const NXString & exportFileName /** The file name to be exported */
            );
            /** Exports an AFU record to an external file file.
                        Currently supports CSV, MAT, DAC and UNV58 files.
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void ExportAfu
            (
                const char * afuFileName /** AFU file name */,
                int recordIndex /** Index of the AFU record to be exported */,
                const char * exportFileName /** The file name to be exported */
            );
            /** Renames an AFU record 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void RenameRecord
            (
                const NXString & afuFileName /** AFU file name */,
                int recordIndex /** Index of the AFU record in the AFU file. Must begin with 1. */,
                const NXString & newRecordName /** New record name */
            );
            /** Renames an AFU record 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void RenameRecord
            (
                const char * afuFileName /** AFU file name */,
                int recordIndex /** Index of the AFU record in the AFU file. Must begin with 1. */,
                const char * newRecordName /** New record name */
            );
            /** Returns record indices of all records in an AFU file  @return  Index array of all records in the AFU file. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetRecordIndexes
            (
                const NXString & afuFileName /** AFU file name*/
            );
            /** Returns record indices of all records in an AFU file  @return  Index array of all records in the AFU file. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            std::vector<int> GetRecordIndexes
            (
                const char * afuFileName /** AFU file name*/
            );
            /** Lists the AFU record information to listing window or a specified output file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void ListRecordInformation
            (
                const NXString & afuFileName /** AFU file name */,
                int recordIndex /** Index of the AFU record to be listed */,
                bool listPointData /** List control flag. If true, the record XY data will be listed. Otherwise only AFU header information is listed. */,
                const NXString & outputFileName /** Output file to which the record information is written. If NULL, the information is only outputted to the listing window.*/,
                NXOpen::CAE::AfuManager::WritingFileMode mode /** Output file write mode: Overwrite or Append, only valid when output file name is not NULL.*/
            );
            /** Lists the AFU record information to listing window or a specified output file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void ListRecordInformation
            (
                const char * afuFileName /** AFU file name */,
                int recordIndex /** Index of the AFU record to be listed */,
                bool listPointData /** List control flag. If true, the record XY data will be listed. Otherwise only AFU header information is listed. */,
                const char * outputFileName /** Output file to which the record information is written. If NULL, the information is only outputted to the listing window.*/,
                NXOpen::CAE::AfuManager::WritingFileMode mode /** Output file write mode: Overwrite or Append, only valid when output file name is not NULL.*/
            );
            /** Lists record information of all records in an AFU file to listing window or a specified output file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void ListFileInformation
            (
                const NXString & afuFileName /** AFU file name */,
                bool listPointData /** List Control Flag. If true, the record data will be listed. Otherwise only AFU record header information is listed. */,
                const NXString & outputFileName /** Output file name which the record information is written. If NULL, the information is only outputted to the listing window*/,
                NXOpen::CAE::AfuManager::WritingFileMode mode /** Output file write mode: Overwrite or Append, only valid when output file name is not NULL.*/
            );
            /** Lists record information of all records in an AFU file to listing window or a specified output file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void ListFileInformation
            (
                const char * afuFileName /** AFU file name */,
                bool listPointData /** List Control Flag. If true, the record data will be listed. Otherwise only AFU record header information is listed. */,
                const char * outputFileName /** Output file name which the record information is written. If NULL, the information is only outputted to the listing window*/,
                NXOpen::CAE::AfuManager::WritingFileMode mode /** Output file write mode: Overwrite or Append, only valid when output file name is not NULL.*/
            );
            /** Exports all records in an AFU file to an external file.
                        Currently supports RPCIII and UNV58 files.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void ExportAfuFile
            (
                const NXString & afuFileName /** AFU file name */,
                const NXString & exportFileName /** The file name to be exported */
            );
            /** Exports all records in an AFU file to an external file.
                        Currently supports RPCIII and UNV58 files.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void ExportAfuFile
            (
                const char * afuFileName /** AFU file name */,
                const char * exportFileName /** The file name to be exported */
            );
            /** Creates a new AFU record.
                    Application type and usage type are NOT specified.
                    The function data type of the AFU record
                    will be set by @link CAE::AfuData::SetFunctionDataType CAE::AfuData::SetFunctionDataType@endlink .
                    Timestamp is NOT outputted.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateRecord
            (
                NXOpen::CAE::AfuData * afuData /** Afu record data */
            );
            /** Edits an existing AFU record.
                    Application type and usage type are NOT specified.
                    The function data type of the AFU record
                    will be set by @link CAE::AfuData::SetFunctionDataType CAE::AfuData::SetFunctionDataType@endlink .
                    Timestamp is NOT outputted.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void EditRecord
            (
                int afuRecordIndex /** Index of the AFU record in the AFU file. Must begin with 1 */,
                NXOpen::CAE::AfuData * afuData /** Afu record data */
            );
            /** Creates a header id object of an AFU record  @return  the header id data of an AFU record 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuHeaderId * CreateAfuHeaderId
            (
            );
            /** Returns the measure text of unit enumeration like "Displacement", "Time" etc.  @return  Measure text 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetAfuUnitTypeText
            (
                NXOpen::CAE::XyFunctionUnit unit /** Unit enumeration */
            );
            /** Returns the unit text of unit enumeration like "mm", "sec" etc.  @return  Unit text 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetAfuUnitText
            (
                NXOpen::CAE::XyFunctionUnit unit /** Unit enumeration */
            );
            /** Creates an abscissa header information data object of an AFU record  @return  Abscissa header information data @link NXOpen::CAE::AfuAbscissaHeaderInfo NXOpen::CAE::AfuAbscissaHeaderInfo@endlink  to be created
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuAbscissaHeaderInfo * CreateAfuAbscissaHeaderInfo
            (
            );
            /** Creates an ordindate header information data object of an AFU record  @return  Ordindate header information data @link NXOpen::CAE::AfuOrdinateHeaderInfo NXOpen::CAE::AfuOrdinateHeaderInfo@endlink  to be created
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuOrdinateHeaderInfo * CreateAfuOrdinateHeaderInfo
            (
            );
            /** Create a Z axis header information data object of an AFU record  @return  Z axis header information data @link NXOpen::CAE::AfuZHeaderInfo NXOpen::CAE::AfuZHeaderInfo@endlink  to be created
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuZHeaderInfo * CreateAfuZHeaderInfo
            (
            );


            /** Contains FFT operations for AFU data 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::AfuDataConvertor *AfuDataConvertor();
            /** Contains Creator for AFU data 
             <br>  Created in NX1899.0.0.  <br>  
            */
            public: NXOpen::CAE::AfuDataCreator *AfuDataCreator();
            /** Contains Math Operations for AFU data 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::AfuMathOperation *AfuMathOperation();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
