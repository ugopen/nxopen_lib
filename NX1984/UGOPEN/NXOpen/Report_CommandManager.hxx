#ifndef NXOpen_REPORT_COMMANDMANAGER_HXX_INCLUDED
#define NXOpen_REPORT_COMMANDMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Report_CommandManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Report_Command.hxx>
#include <NXOpen/Report_CommandImporter.hxx>
#include <NXOpen/Report_CommandLibrary.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_report_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Report
    {
        class CommandManager;
    }
    namespace Report
    {
        class ReportManager;
    }
    namespace Report
    {
        class Command;
    }
    namespace Report
    {
        class CommandBuilder;
    }
    namespace Report
    {
        class CommandImporter;
    }
    namespace Report
    {
        class CommandLibrary;
    }
    class TaggedObject;
    namespace Report
    {
        class CommandManagerImpl;
        /** Represents the command manager.  <br> Not support KF.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_REPORTEXPORT  CommandManager
        {
            private: CommandManagerImpl * m_commandmanager_impl;
            private: NXOpen::Report::ReportManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit CommandManager(NXOpen::Report::ReportManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~CommandManager();
            /** Export selected commands to a library folder zip file. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void ExportCommandsToLibraryFile
            (
                const std::vector<NXOpen::Report::Command *> & pCommands /** pcommands */ ,
                const NXString & libraryFile /** Library folder zip file name with full path */
            );
            /** Export selected commands to a library folder zip file. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void ExportCommandsToLibraryFile
            (
                const std::vector<NXOpen::Report::Command *> & pCommands /** pcommands */ ,
                const char * libraryFile /** Library folder zip file name with full path */
            );
            /** Gets all command libraries. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void GetCommandLibraries
            (
                std::vector<NXOpen::Report::CommandLibrary *> & pCommandLibraries /** pcommandlibraries */ 
            );
            /** Creates the command builder.  @return   
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Report::CommandBuilder * CreateCommandBuilder
            (
                NXOpen::Report::CommandLibrary * commandLibrary /** commandlibrary */ ,
                NXOpen::Report::Command * command /** command */ 
            );
            /** Creates a transient object @link  NXOpen::Report::CommandImporter   NXOpen::Report::CommandImporter @endlink  to import
                        the selected commands of a command library file to a command library. The object
                        should be destroyed after finishing import. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Report::CommandImporter * NewCommandImporter
            (
                NXOpen::Report::CommandLibrary * pCommandLibrary /** pcommandlibrary */ ,
                const NXString & libraryFile /**  Library folder zip file name with full path */
            );
            /** Creates a transient object @link  NXOpen::Report::CommandImporter   NXOpen::Report::CommandImporter @endlink  to import
                        the selected commands of a command library file to a command library. The object
                        should be destroyed after finishing import. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Report::CommandImporter * NewCommandImporter
            (
                NXOpen::Report::CommandLibrary * pCommandLibrary /** pcommandlibrary */ ,
                const char * libraryFile /**  Library folder zip file name with full path */
            );
            /** Finds the @link TaggedObject TaggedObject@endlink  with the given identifier as recorded in a journal.  @return  Object found, or null if no such object exists 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * Find
            (
                const NXString & journalIdentifier /** Identifier of the @link TaggedObject TaggedObject@endlink  to be found */
            );
            /** Finds the @link TaggedObject TaggedObject@endlink  with the given identifier as recorded in a journal.  @return  Object found, or null if no such object exists 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::TaggedObject * Find
            (
                const char * journalIdentifier /** Identifier of the @link TaggedObject TaggedObject@endlink  to be found */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
