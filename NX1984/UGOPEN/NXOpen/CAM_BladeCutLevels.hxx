#ifndef NXOpen_CAM_BLADECUTLEVELS_HXX_INCLUDED
#define NXOpen_CAM_BLADECUTLEVELS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_BladeCutLevels.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class BladeCutLevels;
    }
    class Builder;
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class _BladeCutLevelsBuilder;
        class BladeCutLevelsImpl;
        /** Represents a Blade Cut Levels Builder  <br> This is an abstract class and cannot be instantiated.  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  BladeCutLevels : public NXOpen::Builder
        {
            /** Available types for Depth Mode */
            public: enum DepthModeTypes
            {
                DepthModeTypesOffsetsFromHub/** Offsets from Hub */,
                DepthModeTypesOffsetsFromShroud/** Offsets from Shroud */,
                DepthModeTypesOffsetsAlongToolAxis/** Offsets along Tool Axis */,
                DepthModeTypesInterpolateFromShroudToHub/** Interpolate from Shroud to Hub */
            };

            /** Available types for Hub Extensions */
            public: enum HubExtensionsTypes
            {
                HubExtensionsTypesNone/** None */,
                HubExtensionsTypesToPreviousDepth/** To Previous Depth */,
                HubExtensionsTypesToTrailingEdge/** To Trailing Edge */
            };

            /** Available types for Depth per Cut */
            public: enum DepthPerCutTypes
            {
                DepthPerCutTypesConstant/** Constant */,
                DepthPerCutTypesScallop/** Scallop */
            };

            /** Available types for Range Depth */
            public: enum RangeDepthTypes
            {
                RangeDepthTypesAutomatic/** Automatic */,
                RangeDepthTypesSpecify/** Specify */,
                RangeDepthTypesMultiStripes/** multi stripes */
            };

            /** available types for stripe level */
            public: enum StripeTypes
            {
                StripeTypesTop/** top */,
                StripeTypesIntermediate/** intermediate */,
                StripeTypesBottom/** bottom */
            };

            /** Available types for Incomplete Levels */
            public: enum IncompleteLevelsTypes
            {
                IncompleteLevelsTypesOutputAndWarn/** Output and Warn */,
                IncompleteLevelsTypesOmit/** Omit */
            };

            private: BladeCutLevelsImpl * m_bladecutlevels_impl;
            private: friend class  _BladeCutLevelsBuilder;
            protected: BladeCutLevels();
            public: ~BladeCutLevels();
            /**Returns  the depth mode 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BladeCutLevels::DepthModeTypes DepthMode
            (
            );
            /**Sets  the depth mode 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDepthMode
            (
                NXOpen::CAM::BladeCutLevels::DepthModeTypes depthMode /** the depth mode */
            );
            /**Returns  the hub extensions 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BladeCutLevels::HubExtensionsTypes HubExtensions
            (
            );
            /**Sets  the hub extensions 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetHubExtensions
            (
                NXOpen::CAM::BladeCutLevels::HubExtensionsTypes hubExtensions /** the hub extensions */
            );
            /**Returns  the depth per cut 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BladeCutLevels::DepthPerCutTypes DepthPerCut
            (
            );
            /**Sets  the depth per cut 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDepthPerCut
            (
                NXOpen::CAM::BladeCutLevels::DepthPerCutTypes depthPerCut /** the depth per cut */
            );
            /**Returns  the distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * Distance
            (
            );
            /**Returns  the scallop distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ScallopDistance
            (
            );
            /**Returns  the range depth 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BladeCutLevels::RangeDepthTypes RangeDepth
            (
            );
            /**Sets  the range depth 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRangeDepth
            (
                NXOpen::CAM::BladeCutLevels::RangeDepthTypes rangeDepth /** the range depth */
            );
            /**Returns  the number of cuts 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfCuts
            (
            );
            /**Sets  the number of cuts 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfCuts
            (
                int numberOfCuts /** the number of cuts */
            );
            /**Returns  the stripe type 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BladeCutLevels::StripeTypes StripeType
            (
            );
            /**Sets  the stripe type 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStripeType
            (
                NXOpen::CAM::BladeCutLevels::StripeTypes stripeType /** the stripe type */
            );
            /**Returns  the stripe start percent 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: double StripeStartPercent
            (
            );
            /**Sets  the stripe start percent 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStripeStartPercent
            (
                double stripeStart /** the stripe start percent */
            );
            /**Returns  the stripe end percent 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: double StripeEndPercent
            (
            );
            /**Sets  the stripe end percent 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStripeEndPercent
            (
                double stripeEnd /** the stripe end percent */
            );
            /**Returns  the start % 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double StartPercent
            (
            );
            /**Sets  the start % 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartPercent
            (
                double start /** the start % */
            );
            /**Returns  the end % 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double EndPercent
            (
            );
            /**Sets  the end % 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEndPercent
            (
                double end /** the end % */
            );
            /**Returns  the toggle for finish pass at start of top stripe 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool FinishPassAtStart
            (
            );
            /**Sets  the toggle for finish pass at start of top stripe 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFinishPassAtStart
            (
                bool finishPassAtStart /** to finish pass at start */
            );
            /**Returns  the toggle for finish pass at end of bottom stripe 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool FinishPassAtEnd
            (
            );
            /**Sets  the toggle for finish pass at end of bottom stripe 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFinishPassAtEnd
            (
                bool finishPassAtEnd /** to finish pass at end */
            );
            /**Returns  the Reduce Depth per Cut when Embeded toggle
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ReduceDepthPerCutWhenEmbeded
            (
            );
            /**Sets  the Reduce Depth per Cut when Embeded toggle
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReduceDepthPerCutWhenEmbeded
            (
                bool reduceDepthPerCut /** If reduce depth per Cut when embeded */
            );
            /**Returns  the Number of Intermediate Cuts
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfIntermediateCuts
            (
            );
            /**Sets  the Number of Intermediate Cuts
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfIntermediateCuts
            (
                int numOfIntemCuts /** the number of intemediate cuts */
            );
            /**Returns  the Incomplete levels
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BladeCutLevels::IncompleteLevelsTypes IncompleteLevels
            (
            );
            /**Sets  the Incomplete levels
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIncompleteLevels
            (
                NXOpen::CAM::BladeCutLevels::IncompleteLevelsTypes incompleteLevels /** the incomplete levels*/
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
