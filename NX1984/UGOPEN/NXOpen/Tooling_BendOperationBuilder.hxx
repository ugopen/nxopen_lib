#ifndef NXOpen_TOOLING_BENDOPERATIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_BENDOPERATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_BendOperationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_DefineNeutralFactorBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class BendOperationBuilder;
    }
    namespace Assemblies
    {
        class SelectComponent;
    }
    class Body;
    class Builder;
    class SelectEdgeList;
    class SelectFaceList;
    namespace Tooling
    {
        class DefineNeutralFactorBuilder;
    }
    namespace Tooling
    {
        class _BendOperationBuilderBuilder;
        class BendOperationBuilderImpl;
        /**Represents a @link NXOpen::Tooling::BendOperationBuilder NXOpen::Tooling::BendOperationBuilder@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Tooling::BendOperationCollection::CreateBendOperationBuilder  NXOpen::Tooling::BendOperationCollection::CreateBendOperationBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AlternateResult </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        BendAngle1 </term> <description> 
         
        30 </description> </item> 

        <item><term> 
         
        BendAngle2 </term> <description> 
         
        30 </description> </item> 

        <item><term> 
         
        BendAngle3 </term> <description> 
         
        30 </description> </item> 

        <item><term> 
         
        BendAngle4 </term> <description> 
         
        30 </description> </item> 

        <item><term> 
         
        BendAngle5 </term> <description> 
         
        30 </description> </item> 

        <item><term> 
         
        BendDevLength </term> <description> 
         
        0.0 </description> </item> 

        <item><term> 
         
        BendNeutralFactor </term> <description> 
         
        0.4 </description> </item> 

        <item><term> 
         
        BendNumPrebends </term> <description> 
         
        Two </description> </item> 

        <item><term> 
         
        DefineNeutralFactor.BendDevelopedLength </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        DefineNeutralFactor.NeutralFactor </term> <description> 
         
        0.40 </description> </item> 

        <item><term> 
         
        DefineNeutralFactor.NeutralFactorFormula </term> <description> 
         
        General </description> </item> 

        <item><term> 
         
        DefineNeutralFactor.PartMaterial </term> <description> 
         
        08 </description> </item> 

        <item><term> 
         
        FixTabFlangePosition </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        KeepRadiusFixed </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OverbendAngle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OverbendOption </term> <description> 
         
        ResizeBendAngle </description> </item> 

        <item><term> 
         
        RestorePosition </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  BendOperationBuilder : public NXOpen::Builder
        {
            /** unbend operations. */
            public: enum Types
            {
                TypesUnbend/** unbend operation */,
                TypesRebend/** rebend operation */,
                TypesPrebend/** prebend operation */,
                TypesOverbend/** overbend operation */
            };

            /** The number of children bends of prebend. */
            public: enum Prebend
            {
                PrebendTwo/** two prebends */,
                PrebendThree/** three prebends */,
                PrebendFour/** four prebends */,
                PrebendFive/** five prebends */,
                PrebendSix/** six prebends */
            };

            /** The overbend option. */
            public: enum OverbendOptions
            {
                OverbendOptionsResizeBendAngle/** overbend by resize bend angle */,
                OverbendOptionsResizeBendRadius/** overbend by resize bend radius */
            };

            private: BendOperationBuilderImpl * m_bendoperationbuilder_impl;
            private: friend class  _BendOperationBuilderBuilder;
            protected: BendOperationBuilder();
            public: ~BendOperationBuilder();
            /**Returns  the work part. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponent * WorkPart
            (
            );
            /**Returns  the selection of bends. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * SelectedBend
            (
            );
            /**Returns  the reference objects. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectEdgeList * ReferObject
            (
            );
            /**Returns  the switch to set if use an alternate result. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool AlternateResult
            (
            );
            /**Sets  the switch to set if use an alternate result. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAlternateResult
            (
                bool alternateResult /** alternateresult */ 
            );
            /**Returns  the resize radius. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ResizeRadius
            (
            );
            /**Sets  the resize radius. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetResizeRadius
            (
                bool resizeRadius /** resizeradius */ 
            );
            /**Returns  the overbend angle. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double OverbendAngle
            (
            );
            /**Sets  the overbend angle. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOverbendAngle
            (
                double overbendAngle /** overbendangle */ 
            );
            /**Returns  the keep radius fixed. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool KeepRadiusFixed
            (
            );
            /**Sets  the keep radius fixed. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetKeepRadiusFixed
            (
                bool keepRadiusFixed /** keepradiusfixed */ 
            );
            /**Returns  the overbend radius. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double OverbendRadius
            (
            );
            /**Sets  the overbend radius. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOverbendRadius
            (
                double overbendRadius /** overbendradius */ 
            );
            /**Returns  the type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BendOperationBuilder::Types Type
            (
            );
            /**Sets  the type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::BendOperationBuilder::Types type /** type */ 
            );
            /**Returns  the base body. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Body * BaseBody
            (
            );
            /**Sets  the base body. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBaseBody
            (
                NXOpen::Body * baseBody /** basebody */ 
            );
            /**Returns  the operation of k factor for a single bend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BendNeutralFactor
            (
            );
            /**Sets  the operation of k factor for a single bend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendNeutralFactor
            (
                double kFactor /** kfactor */ 
            );
            /**Returns  the operation to developed length of a bend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BendDevLength
            (
            );
            /**Sets  the operation to developed length of a bend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendDevLength
            (
                double devLength /** devlength */ 
            );
            /**Returns  the number of prebends. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BendOperationBuilder::Prebend BendNumPrebends
            (
            );
            /**Sets  the number of prebends. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendNumPrebends
            (
                NXOpen::Tooling::BendOperationBuilder::Prebend numBends /** numbends */ 
            );
            /**Returns  the first angle of prebend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BendAngle1
            (
            );
            /**Sets  the first angle of prebend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendAngle1
            (
                double angle1 /** angle1 */ 
            );
            /**Returns  the second angle of prebend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BendAngle2
            (
            );
            /**Sets  the second angle of prebend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendAngle2
            (
                double angle2 /** angle2 */ 
            );
            /**Returns  the third angle of prebend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BendAngle3
            (
            );
            /**Sets  the third angle of prebend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendAngle3
            (
                double angle3 /** angle3 */ 
            );
            /**Returns  the fourth angle of prebend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BendAngle4
            (
            );
            /**Sets  the fourth angle of prebend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendAngle4
            (
                double angle4 /** angle4 */ 
            );
            /**Returns  the fifth angle of prebend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BendAngle5
            (
            );
            /**Sets  the fifth angle of prebend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendAngle5
            (
                double angle5 /** angle5 */ 
            );
            /**Returns  the overbend option 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BendOperationBuilder::OverbendOptions OverbendOption
            (
            );
            /**Sets  the overbend option 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOverbendOption
            (
                NXOpen::Tooling::BendOperationBuilder::OverbendOptions overbendOption /** overbendoption */ 
            );
            /**Returns  the switch to set if fixed tab or flange position while resize bend radius. 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: bool FixTabFlangePosition
            (
            );
            /**Sets  the switch to set if fixed tab or flange position while resize bend radius. 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFixTabFlangePosition
            (
                bool fixTabFlangePosition /** fixtabflangeposition */ 
            );
            /**Returns  the switch to set whether restore the overbend part position. 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: bool RestorePosition
            (
            );
            /**Sets  the switch to set whether restore the overbend part position. 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRestorePosition
            (
                bool restorePosition /** restoreposition */ 
            );
            /**Returns  the define neutral factor builder which contains new neutral factor, part material and bend developed length 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DefineNeutralFactorBuilder * DefineNeutralFactor
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
