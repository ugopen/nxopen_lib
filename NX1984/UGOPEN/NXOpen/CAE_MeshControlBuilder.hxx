#ifndef NXOpen_CAE_MESHCONTROLBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MESHCONTROLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_MeshControlBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class MeshControlBuilder;
    }
    class Builder;
    namespace CAE
    {
        class MeshControl;
    }
    class Expression;
    class NXObject;
    class SelectNXObjectList;
    namespace CAE
    {
        class _MeshControlBuilderBuilder;
        class MeshControlBuilderImpl;
        /**
            Represents a @link NXOpen::CAE::MeshControl NXOpen::CAE::MeshControl@endlink 
             <br> To create a new instance of this class, use @link NXOpen::CAE::MeshControlCollection::CreateBuilder  NXOpen::CAE::MeshControlCollection::CreateBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AspectRatio.Value </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        BlBodySelectionToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CylinderAxialElementSize.Value </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        CylinderAxialNumElements </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        CylinderAxialNumElementsExp.Value </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        CylinderCircularNumElements </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        CylinderCircularNumElementsExp.Value </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        CylinderCircularNumPerQuarter </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        CylinderCircularNumPerQuarterExp.Value </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        CylinderMaxAngle.Value </term> <description> 
         
        360 </description> </item> 

        <item><term> 
         
        CylinderMaxRadius.Value </term> <description> 
         
        10 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        CylinderMinAngle.Value </term> <description> 
         
        150 </description> </item> 

        <item><term> 
         
        CylinderMinRadius.Value </term> <description> 
         
        5 (millimeters part), 2 (inches part) </description> </item> 

        <item><term> 
         
        FilletCircumMinElementSize.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        FilletCircumNumberElements </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        FilletCircumNumberElementsExp.Value </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        FilletCircumTargetElemSize.Value </term> <description> 
         
        5 (millimeters part), 5 (inches part) </description> </item> 

        <item><term> 
         
        FilletElementSize.Value </term> <description> 
         
        5 (millimeters part), 5 (inches part) </description> </item> 

        <item><term> 
         
        FilletMaxAngle.Value </term> <description> 
         
        150 </description> </item> 

        <item><term> 
         
        FilletMaxRadius.Value </term> <description> 
         
        3 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        FilletMinAngle.Value </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FilletMinRadius.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        FirstLayerThickness.Value </term> <description> 
         
        1 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        GrowthRate </term> <description> 
         
        1.0 </description> </item> 

        <item><term> 
         
        HoleMaxRadius.Value </term> <description> 
         
        10 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        HoleMinRadius.Value </term> <description> 
         
        5 (millimeters part), 2 (inches part) </description> </item> 

        <item><term> 
         
        MappedNumberOfLayers </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        MappedNumberOfLayersExp.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        NumOfElementsExp.Value </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        NumberOfLayers </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        NumberOfLayersExp.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        PointIndividualLayerThickness.Value </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        PointNumberOfElements.Value </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        PointNumberOfLayers.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        SelectionFilterToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SpacingNumberOfElements </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        SpacingNumberOfElementsExp.Value </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        TotalThickness.Value </term> <description> 
         
        1 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        WeldDirection </term> <description> 
         
        Both </description> </item> 

        <item><term> 
         
        WeldNumberOfLayers </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        WeldNumberOfLayersExp.Value </term> <description> 
         
        2 </description> </item> 

        </list> 

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  MeshControlBuilder : public NXOpen::Builder
        {
            /** the mesh control types */
            public: enum Types
            {
                TypesEdgeDensityNumber/** edge density number */ ,
                TypesEdgeDensitySize/**@link NXOpen::CAE::MeshControlBuilder::SizeTypes NXOpen::CAE::MeshControlBuilder::SizeTypes@endlink */,
                TypesEdgeDensityChordal/** edge density chordal */ ,
                TypesEdgeDensityProgression/**@link NXOpen::CAE::MeshControlBuilder::ProgressionTypes NXOpen::CAE::MeshControlBuilder::ProgressionTypes@endlink */,
                TypesFaceDensitySize/** face density size */ ,
                TypesWeldRow/** weld row */ ,
                TypesMappedHoles/** mapped holes */ ,
                TypesFilletDensity/** fillet density */ ,
                TypesCylinderDensity/** cylinder density */ ,
                TypesBoundaryLayers/** boundary layers */ ,
                TypesPointDensity/** point density */ ,
                TypesBoundingVolumeDensity/** bounding volume density */ ,
                TypesTypesLastValue/** types last value */ 
            };

            /** the mesh control size subtypes. */
            public: enum SizeTypes
            {
                SizeTypesAll/** all */ ,
                SizeTypesStart/** start */ ,
                SizeTypesEnd/** end */ ,
                SizeTypesStartAndEnd/** start and end */ ,
                SizeTypesLastValue/** last value */ 
            };

            /** the mesh control progression subtypes. */
            public: enum ProgressionTypes
            {
                ProgressionTypesStart/** start */ ,
                ProgressionTypesEnd/** end */ ,
                ProgressionTypesCenter/** center */ ,
                ProgressionTypesLastValue/** last value */ 
            };

            /** the mesh control weld row direction subtypes. */
            public: enum WeldSide
            {
                WeldSideBoth/** both */ ,
                WeldSideSide1/** side1 */ ,
                WeldSideSide2/** side2 */ 
            };

            /** the sizing subtypes for weld row and mapped holes. */
            public: enum SizingType
            {
                SizingTypeNone/** none */ ,
                SizingTypeByNumber/** by number */ ,
                SizingTypeBySize/** by size */ 
            };

            /** the fillet subtypes. */
            public: enum FilletType
            {
                FilletTypeAllTypes/** all types */ ,
                FilletTypeInsideRadius/** inside radius */ ,
                FilletTypeOutsideRadius/** outside radius */ 
            };

            /** the fillet subtypes for size on axial direction. */
            public: enum FilletAxialElementSizeType
            {
                FilletAxialElementSizeTypeNone/** none */ ,
                FilletAxialElementSizeTypeSize/** size */ 
            };

            /** the fillet subtypes for size on circumference. */
            public: enum FilletCircumferenceSizeType
            {
                FilletCircumferenceSizeTypeNone/** none */ ,
                FilletCircumferenceSizeTypeAngle/** angle */ ,
                FilletCircumferenceSizeTypeSize/** size */ 
            };

            /** the cylinder subtypes for size on axial direction. */
            public: enum CylinderAxialElementSizeType
            {
                CylinderAxialElementSizeTypeNone/** none */ ,
                CylinderAxialElementSizeTypeNumber/** number */ ,
                CylinderAxialElementSizeTypeSize/** size */ 
            };

            /** the cylinder subtypes for size on circumference. */
            public: enum CylinderCircularSizeType
            {
                CylinderCircularSizeTypeNone/** none */ ,
                CylinderCircularSizeTypeByAngle/** by angle */ ,
                CylinderCircularSizeTypeNumber/** number */ 
            };

            /** the height defined by options. */
            public: enum HeightDefinedByOption
            {
                HeightDefinedByOptionTotalThickness/** total thickness */ ,
                HeightDefinedByOptionGrowthRate/** growth rate */ 
            };

            private: MeshControlBuilderImpl * m_meshcontrolbuilder_impl;
            private: friend class  _MeshControlBuilderBuilder;
            protected: MeshControlBuilder();
            public: ~MeshControlBuilder();
            /**Returns  the selection 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::SelectNXObjectList * Selection
            (
            );
            /**Returns  the type of mesh control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshControlBuilder::Types MainType
            (
            );
            /**Sets  the type of mesh control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMainType
            (
                NXOpen::CAE::MeshControlBuilder::Types type /** type */ 
            );
            /**Returns  the size type of mesh control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshControlBuilder::SizeTypes SizeSubtype
            (
            );
            /**Sets  the size type of mesh control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSizeSubtype
            (
                NXOpen::CAE::MeshControlBuilder::SizeTypes type /** type */ 
            );
            /**Returns  the progression or bias starting type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshControlBuilder::ProgressionTypes ProgressionSubtype
            (
            );
            /**Sets  the progression or bias starting type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetProgressionSubtype
            (
                NXOpen::CAE::MeshControlBuilder::ProgressionTypes type /** type */ 
            );
            /**Returns  the number of elements defined on edge. Valid for following types:
                        @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityNumber NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityNumber@endlink , 
                        @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityProgression NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityProgression@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int NumOfElements
            (
            );
            /**Sets  the number of elements defined on edge. Valid for following types:
                        @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityNumber NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityNumber@endlink , 
                        @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityProgression NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityProgression@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNumOfElements
            (
                int numOfElements /** numofelements */ 
            );
            /**Returns  the number of elements expression 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * NumOfElementsExp
            (
            );
            /**Returns  the value stored in Size field. This field represents:
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensitySize NXOpen::CAE::MeshControlBuilder::TypesEdgeDensitySize@endlink  
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesFaceDensitySize NXOpen::CAE::MeshControlBuilder::TypesFaceDensitySize@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * OverallSize
            (
            );
            /**Returns  the value stored in start size field. This field represents:
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensitySize NXOpen::CAE::MeshControlBuilder::TypesEdgeDensitySize@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * StartSize
            (
            );
            /**Returns  the value stored in end size field. This field represents:
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensitySize NXOpen::CAE::MeshControlBuilder::TypesEdgeDensitySize@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * EndSize
            (
            );
            /**Returns  the value stored in chordal tolerance field. This field represents:
                        Tolerance for @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityChordal NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityChordal@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * ChordalTolerance
            (
            );
            /**Returns  the value stored in geometric ratio field. This field represents:
                        Ratio for @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityProgression NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityProgression@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * GeometricRatio
            (
            );
            /**Returns  the value stored in edge fraction field. This field represents:
                        Fraction for @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityProgression NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityProgression@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * EdgeFraction
            (
            );
            /** The calculate Auto Size method.
                        This computes and populates num of elements and size fields based auto 
                        element size computation. Selected geometry is used in computation. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AutoSize
            (
            );
            /** The intialization method for editing mesh control. 
                        This method is to be used if builder is created in create mode and then user wants to edit a mesh control.
                        This method populates all required mesh control data for editing purpose 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void LoadMeshControlData
            (
                NXOpen::CAE::MeshControl * tMeshControl /** tmeshcontrol */ 
            );
            /**Returns  the select weld face 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::SelectNXObjectList * SelectWeldFace
            (
            );
            /**Returns  the weld direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshControlBuilder::WeldSide WeldDirection
            (
            );
            /**Sets  the weld direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetWeldDirection
            (
                NXOpen::CAE::MeshControlBuilder::WeldSide weldDirection /** welddirection */ 
            );
            /**Returns  the scar edge to define weld direction  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::NXObject * WeldDirectionScarEdge
            (
            );
            /**Sets  the scar edge to define weld direction  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetWeldDirectionScarEdge
            (
                NXOpen::NXObject * tScarEdge /** tscaredge */ 
            );
            /**Returns  the weld offset 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * WeldOffset
            (
            );
            /**Returns  the weld number of layers 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int WeldNumberOfLayers
            (
            );
            /**Sets  the weld number of layers 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetWeldNumberOfLayers
            (
                int weldNumberOfLayers /** weldnumberoflayers */ 
            );
            /**Returns  the weldNumberOfLayersExp 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * WeldNumberOfLayersExp
            (
            );
            /** Create weld face definition  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int AddWeldFaceDefinition
            (
            );
            /** Delete weld face definition 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void DeleteWeldFaceDefinitions
            (
                const std::vector<int> & piFaceDefinitions /** pifacedefinitions */ 
            );
            /** Auto create face definitions 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<int> AutoCreateWeldFaceDefinitions
            (
            );
            /** Get weld face definitions 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<int> GetWeldFaceDefinitions
            (
            );
            /** Set current weld face definition 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetWeldFaceDefinition
            (
                int iFaceDefinition /** ifacedefinition */ 
            );
            /**Returns  the mapped offset 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * MappedOffset
            (
            );
            /**Returns  the mapped number of layers 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int MappedNumberOfLayers
            (
            );
            /**Sets  the mapped number of layers 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMappedNumberOfLayers
            (
                int mappedNumberOfLayers /** mappednumberoflayers */ 
            );
            /**Returns  the mappedNumberOfLayersExp 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MappedNumberOfLayersExp
            (
            );
            /**Returns  the sizing option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshControlBuilder::SizingType SizingOption
            (
            );
            /**Sets  the sizing option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSizingOption
            (
                NXOpen::CAE::MeshControlBuilder::SizingType sizingOption /** sizingoption */ 
            );
            /**Returns  the spacing number of elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int SpacingNumberOfElements
            (
            );
            /**Sets  the spacing number of elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSpacingNumberOfElements
            (
                int spacingNumberOfElements /** spacingnumberofelements */ 
            );
            /**Returns  the spacing number of elements Exp 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SpacingNumberOfElementsExp
            (
            );
            /**Returns  the spacing element size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * SpacingElementSize
            (
            );
            /**Returns  the selection filter toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool SelectionFilterToggle
            (
            );
            /**Sets  the selection filter toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectionFilterToggle
            (
                bool selectionFilterToggle /** selectionfiltertoggle */ 
            );
            /**Returns  the hole min radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HoleMinRadius
            (
            );
            /**Returns  the hole max radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HoleMaxRadius
            (
            );
            /**Returns  the hole free edges only filter toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool HoleFreeEdgesToggle
            (
            );
            /**Sets  the hole free edges only filter toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHoleFreeEdgesToggle
            (
                bool holeFreeEdgesToggle /** holefreeedgestoggle */ 
            );
            /**Returns  the hole allow non circular holes filter toggle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool HoleAllowNonCircularHolesToggle
            (
            );
            /**Sets  the hole allow non circular holes filter toggle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHoleAllowNonCircularHolesToggle
            (
                bool holeAllowNonCircularHolesToggle /** holeallownoncircularholestoggle */ 
            );
            /**Returns  the fillet min radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FilletMinRadius
            (
            );
            /**Returns  the fillet max radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FilletMaxRadius
            (
            );
            /**Returns  the fillet min angle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FilletMinAngle
            (
            );
            /**Returns  the fillet max angle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FilletMaxAngle
            (
            );
            /**Returns  the fillet method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::MeshControlBuilder::FilletType FilletMethod
            (
            );
            /**Sets  the fillet method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetFilletMethod
            (
                NXOpen::CAE::MeshControlBuilder::FilletType filletMethod /** filletmethod */ 
            );
            /**Returns  the cylinder min radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CylinderMinRadius
            (
            );
            /**Returns  the cylinder max radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CylinderMaxRadius
            (
            );
            /**Returns  the cylinder min angle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CylinderMinAngle
            (
            );
            /**Returns  the cylinder max angle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CylinderMaxAngle
            (
            );
            /**Returns  the selection cylinder freeze geometry option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool CylinderFreezeGeometryOption
            (
            );
            /**Sets  the selection cylinder freeze geometry option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCylinderFreezeGeometryOption
            (
                bool selectionCylinderFreezeGeometryOption /** selectioncylinderfreezegeometryoption */ 
            );
            /**Returns  the Distributed Chain Selection Option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool DistributeOnChainOption
            (
            );
            /**Sets  the Distributed Chain Selection Option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDistributeOnChainOption
            (
                bool distributeOnChainOption /** distributeonchainoption */ 
            );
            /**Returns  the cylinder axial element size option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::MeshControlBuilder::FilletAxialElementSizeType FilletAxialElementSizeOption
            (
            );
            /**Sets  the cylinder axial element size option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetFilletAxialElementSizeOption
            (
                NXOpen::CAE::MeshControlBuilder::FilletAxialElementSizeType filletAxialElementSizeOption /** filletaxialelementsizeoption */ 
            );
            /**Returns  the fillet element size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FilletElementSize
            (
            );
            /**Returns  the fillet circum size option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::MeshControlBuilder::FilletCircumferenceSizeType FilletCircumSizeOption
            (
            );
            /**Sets  the fillet circum size option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetFilletCircumSizeOption
            (
                NXOpen::CAE::MeshControlBuilder::FilletCircumferenceSizeType filletCircumSizeOption /** filletcircumsizeoption */ 
            );
            /**Returns  the fillet circum number elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int FilletCircumNumberElements
            (
            );
            /**Sets  the fillet circum number elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetFilletCircumNumberElements
            (
                int filletCircumNumberElements /** filletcircumnumberelements */ 
            );
            /**Returns  the filletCircumNumberElementsExp 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FilletCircumNumberElementsExp
            (
            );
            /**Returns  the fillet circum target elem size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FilletCircumTargetElemSize
            (
            );
            /**Returns  the fillet circum min element size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FilletCircumMinElementSize
            (
            );
            /**Returns  the cylinder axial element size option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::MeshControlBuilder::CylinderAxialElementSizeType CylinderAxialElementSizeOption
            (
            );
            /**Sets  the cylinder axial element size option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCylinderAxialElementSizeOption
            (
                NXOpen::CAE::MeshControlBuilder::CylinderAxialElementSizeType cylinderAxialElementSizeOption /** cylinderaxialelementsizeoption */ 
            );
            /**Returns  the cylinder axial num elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int CylinderAxialNumElements
            (
            );
            /**Sets  the cylinder axial num elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCylinderAxialNumElements
            (
                int cylinderAxialNumElements /** cylinderaxialnumelements */ 
            );
            /**Returns  the cylinder axial num elements Exp 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CylinderAxialNumElementsExp
            (
            );
            /**Returns  the cylinder axial element size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CylinderAxialElementSize
            (
            );
            /**Returns  the cylinder circular size option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::MeshControlBuilder::CylinderCircularSizeType CylinderCircularSizeOption
            (
            );
            /**Sets  the cylinder circular size option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCylinderCircularSizeOption
            (
                NXOpen::CAE::MeshControlBuilder::CylinderCircularSizeType cylinderCircularSizeOption /** cylindercircularsizeoption */ 
            );
            /**Returns  the cylinder circular num by degrees 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int CylinderCircularNumPerQuarter
            (
            );
            /**Sets  the cylinder circular num by degrees 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCylinderCircularNumPerQuarter
            (
                int cylinderCircularNumPerQuarter /** cylindercircularnumperquarter */ 
            );
            /**Returns  the cylinderCircularNumPerQuarterExp 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CylinderCircularNumPerQuarterExp
            (
            );
            /**Returns  the cylinder circular num elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int CylinderCircularNumElements
            (
            );
            /**Sets  the cylinder circular num elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCylinderCircularNumElements
            (
                int cylinderCircularNumElements /** cylindercircularnumelements */ 
            );
            /**Returns  the cylinder circular num elements Exp 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CylinderCircularNumElementsExp
            (
            );
            /**Returns  the aspect ratio 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * AspectRatio
            (
            );
            /** To resolve conflicting or existing mesh control when creating new mesh controls
                        if fDoNotOverwriteExisting is false then the existing lower order mesh controls will be overwritten
                        if it is set to true then the geometry will be removed from creating new mesh control. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void ResolveConflicts
            (
                bool fDoNotOverwriteExisting /** fdonotoverwriteexisting */ 
            );
            /** Commits the creation of the @link NXOpen::CAE::MeshControl NXOpen::CAE::MeshControl@endlink  objects
                        or Commits the changes made to the @link NXOpen::CAE::MeshControl NXOpen::CAE::MeshControl@endlink 
                      @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<NXOpen::CAE::MeshControl *> CommitDensities
            (
            );
            /**Returns  the body selection for boundary layer 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::SelectNXObjectList * BlBodySelection
            (
            );
            /**Returns  the boundary layer body selection toggle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool BlBodySelectionToggle
            (
            );
            /**Sets  the boundary layer body selection toggle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetBlBodySelectionToggle
            (
                bool blBodySelectionToggle /** blbodyselectiontoggle */ 
            );
            /**Returns  the number of layers 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int NumberOfLayers
            (
            );
            /**Sets  the number of layers 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNumberOfLayers
            (
                int numberOfLayers /** numberoflayers */ 
            );
            /**Returns  the number of layers expression 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * NumberOfLayersExp
            (
            );
            /**Returns  the layer thickness 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * FirstLayerThickness
            (
            );
            /**Returns  the height defined by option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshControlBuilder::HeightDefinedByOption HeightDefinedBy
            (
            );
            /**Sets  the height defined by option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetHeightDefinedBy
            (
                NXOpen::CAE::MeshControlBuilder::HeightDefinedByOption heightDefinedByOption /** heightdefinedbyoption */ 
            );
            /**Returns  the total thickness 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * TotalThickness
            (
            );
            /**Returns  the growth rate 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: double GrowthRate
            (
            );
            /**Sets  the growth rate 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGrowthRate
            (
                double growthRate /** growthrate */ 
            );
            /**Returns  the value stored in element size field. This field represents:
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesPointDensity NXOpen::CAE::MeshControlBuilder::TypesPointDensity@endlink  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * PointElementSize
            (
            );
            /**Returns  the value stored in radius of influence field. This field represents:
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesPointDensity NXOpen::CAE::MeshControlBuilder::TypesPointDensity@endlink  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * PointRadiusOfInfluence
            (
            );
            /**Returns  the spot weld option. This field represents:
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesPointDensity NXOpen::CAE::MeshControlBuilder::TypesPointDensity@endlink 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool PointSpotWeldStatus
            (
            );
            /**Sets  the spot weld option. This field represents:
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesPointDensity NXOpen::CAE::MeshControlBuilder::TypesPointDensity@endlink 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPointSpotWeldStatus
            (
                bool spotWeldStatus /** spotweldstatus */ 
            );
            /**Returns  the Layer thickness table option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool PointLayerThicknessOption
            (
            );
            /**Sets  the Layer thickness table option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPointLayerThicknessOption
            (
                bool pointLayerThicknessOption /** pointlayerthicknessoption */ 
            );
            /**Returns  the minimum element size option. This field represents:
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityNumber NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityNumber@endlink 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumElementSizeOption
            (
            );
            /**Sets  the minimum element size option. This field represents:
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityNumber NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityNumber@endlink 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumElementSizeOption
            (
                bool minimumElementSizeOption /** minimumelementsizeoption */ 
            );
            /**Returns  the minimum element size. This field represents:
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityNumber NXOpen::CAE::MeshControlBuilder::TypesEdgeDensityNumber@endlink  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * MinimumElementSize
            (
            );
            /**Returns  the value stored in element size field. This field represents:
                        Size  for @link NXOpen::CAE::MeshControlBuilder::TypesBoundingVolumeDensity NXOpen::CAE::MeshControlBuilder::TypesBoundingVolumeDensity@endlink  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * BoundingVolumeDensityElementSize
            (
            );
            /**Returns  the bounding volume body selection, This is optional and Bodies selected must be inside or crossing the selected selection recipe 
                        Body selection  for @link NXOpen::CAE::MeshControlBuilder::TypesBoundingVolumeDensity NXOpen::CAE::MeshControlBuilder::TypesBoundingVolumeDensity@endlink  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::SelectNXObjectList * BoundingVolumeBodySelection
            (
            );
            /**Returns  the number of elements surrounding spot weld 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * PointNumberOfElements
            (
            );
            /**Returns  the number of layers surrounding spot weld 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * PointNumberOfLayers
            (
            );
            /**Returns  the individual layer thickness 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PointIndividualLayerThickness
            (
            );
            /** Set point density spot weld layer thickness definition at index to thickness  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurrentPointLayerThicknessDefinition
            (
                int iLayerId /** ilayerid */ 
            );
            /**Returns  the adjust depth for mapped holes 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool MappedAdjustDepth
            (
            );
            /**Sets  the adjust depth for mapped holes 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMappedAdjustDepth
            (
                bool adjustDepth /** adjustdepth */ 
            );
            /**Returns  the flag for apply to surfaces only option for bounding volume 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool BoundingVolumeApplyToSurfacesOnly
            (
            );
            /**Sets  the flag for apply to surfaces only option for bounding volume 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoundingVolumeApplyToSurfacesOnly
            (
                bool applyToSurfacesOnly /** applytosurfacesonly */ 
            );
            /**Returns  the flag for apply shape imprints for mapped holes 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool MappedApplyShapeImprints
            (
            );
            /**Sets  the flag for apply shape imprints for mapped holes 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMappedApplyShapeImprints
            (
                bool applyShapeImprints /** applyshapeimprints */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
