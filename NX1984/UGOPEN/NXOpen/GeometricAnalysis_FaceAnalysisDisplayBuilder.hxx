#ifndef NXOpen_GEOMETRICANALYSIS_FACEANALYSISDISPLAYBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_FACEANALYSISDISPLAYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_FaceAnalysisDisplayBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_DisplayResolutionBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class FaceAnalysisDisplayBuilder;
    }
    namespace GeometricUtilities
    {
        class DisplayResolutionBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricAnalysis
    {
        class _FaceAnalysisDisplayBuilderBuilder;
        class FaceAnalysisDisplayBuilderImpl;
        /** Represents a set of display settings used by Face Analysis. 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICANALYSISEXPORT  FaceAnalysisDisplayBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Represents color legend type in display. */
            public: enum ColorLegendOptions
            {
                ColorLegendOptionsBlend/** Blended color display. */,
                ColorLegendOptionsSharp/** Sharp color display. */
            };

            /** The option indicating number of colors to be used for display. */
            public: enum ColorsOptions
            {
                ColorsOptionsTwo/** Display in 2  colors. */,
                ColorsOptionsThree/** Display in 3  colors. */,
                ColorsOptionsFour/** Display in 4  colors. */,
                ColorsOptionsFive/** Display in 5  colors. */,
                ColorsOptionsSix/** Display in 6  colors. */,
                ColorsOptionsSeven/** Display in 7  colors. */,
                ColorsOptionsEight/** Display in 8  colors. */,
                ColorsOptionsNine/** Display in 9  colors. */,
                ColorsOptionsTen/** Display in 10 colors. */,
                ColorsOptionsEleven/** Display in 11 colors. */,
                ColorsOptionsTwelve/** Display in 12 colors. */
            };

            private: FaceAnalysisDisplayBuilderImpl * m_faceanalysisdisplaybuilder_impl;
            private: friend class  _FaceAnalysisDisplayBuilderBuilder;
            protected: FaceAnalysisDisplayBuilder();
            public: ~FaceAnalysisDisplayBuilder();
            /**Returns  the color legend option. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceAnalysisDisplayBuilder::ColorLegendOptions ColorLegendOption
            (
            );
            /**Sets  the color legend option. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetColorLegendOption
            (
                NXOpen::GeometricAnalysis::FaceAnalysisDisplayBuilder::ColorLegendOptions colorLegendOption /** colorlegendoption */ 
            );
            /**Returns  the number of colors. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceAnalysisDisplayBuilder::ColorsOptions NumberOfColors
            (
            );
            /**Sets  the number of colors. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNumberOfColors
            (
                NXOpen::GeometricAnalysis::FaceAnalysisDisplayBuilder::ColorsOptions numberOfColors /** numberofcolors */ 
            );
            /**Returns  the display resolution. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DisplayResolutionBuilder * DisplayResolution
            (
            );
            /**Returns  the flag indicating if facets should be shown. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool CanShowFacet
            (
            );
            /**Sets  the flag indicating if facets should be shown. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCanShowFacet
            (
                bool canShowFacet /** canshowfacet */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
