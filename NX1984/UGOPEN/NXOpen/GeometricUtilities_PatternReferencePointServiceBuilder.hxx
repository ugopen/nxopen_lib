#ifndef NXOpen_GEOMETRICUTILITIES_PATTERNREFERENCEPOINTSERVICEBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_PATTERNREFERENCEPOINTSERVICEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_PatternReferencePointServiceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class PatternReferencePointServiceBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    namespace GeometricUtilities
    {
        class _PatternReferencePointServiceBuilderBuilder;
        class PatternReferencePointServiceBuilderImpl;
        /** Pattern Reference Point is a service which enables the employing client to compute the reference point for pattern instance locations. 
             The reference point can be inferred or user-selected 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  PatternReferencePointServiceBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: PatternReferencePointServiceBuilderImpl * m_patternreferencepointservicebuilder_impl;
            private: friend class  _PatternReferencePointServiceBuilderBuilder;
            protected: PatternReferencePointServiceBuilder();
            public: ~PatternReferencePointServiceBuilder();
            /**Returns  the reference point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the reference point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the reference point inferred flag.
                        This flag states whether the reference point is inferred from selected entites or not.
                        If 'true', the reference point will be inferred every time the selected entities get modified or updated.
                        If 'false', the reference point provided by the user will be independent of the selected entities
                        but will be associative to the rule by which it was created (e.g. End of Line, Center of Arc). 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsReferencePointInferred
            (
            );
            /**Sets  the reference point inferred flag.
                        This flag states whether the reference point is inferred from selected entites or not.
                        If 'true', the reference point will be inferred every time the selected entities get modified or updated.
                        If 'false', the reference point provided by the user will be independent of the selected entities
                        but will be associative to the rule by which it was created (e.g. End of Line, Center of Arc). 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetReferencePointInferred
            (
                bool isReferencePointInferred /** isreferencepointinferred */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
