#ifndef NXOpen_MECHATRONICS_DISTANCESENSORBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_DISTANCESENSORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_DistanceSensorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class DistanceSensorBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    namespace Mechatronics
    {
        class SelectRigidBody;
    }
    class Point;
    namespace Mechatronics
    {
        class _DistanceSensorBuilderBuilder;
        class DistanceSensorBuilderImpl;
        /**  @brief  Represents a @link NXOpen::Mechatronics::DistanceSensor NXOpen::Mechatronics::DistanceSensor@endlink  builder.  

           <br> To create a new instance of this class, use @link NXOpen::Mechatronics::DistanceSensorCollection::CreateDistanceSensorBuilder  NXOpen::Mechatronics::DistanceSensorCollection::CreateDistanceSensorBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  DistanceSensorBuilder : public NXOpen::Builder
        {
            /**  @brief  the Measure types.  

              */
            public: enum OutputMeasureType
            {
                OutputMeasureTypeConstant/** MEASURE_UNITLESS */,
                OutputMeasureTypeVoltage/** MEASURE_VOLTAGE */,
                OutputMeasureTypeCurrent/** MEASURE_ELECTRIC_CURRENT  */
            };

            private: DistanceSensorBuilderImpl * m_distancesensorbuilder_impl;
            private: friend class  _DistanceSensorBuilderBuilder;
            protected: DistanceSensorBuilder();
            public: ~DistanceSensorBuilder();
            /**Returns   @brief  the Rigid Body. This can be a @link NXOpen::Mechatronics::RigidBody NXOpen::Mechatronics::RigidBody@endlink  If there is a rigid body, then the sensor will move with the rigid body. 

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::SelectRigidBody * RigidBody
            (
            );
            /**Returns   @brief  the direction. The Distance Sensor has the scope of a cone. The direction is the vector of the cone.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Direction * Direction
            (
            );
            /**Sets   @brief  the direction. The Distance Sensor has the scope of a cone. The direction is the vector of the cone.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetDirection
            (
                NXOpen::Direction * direction /** direction */ 
            );
            /**Returns   @brief  the point. Sensor Reference Point, also used as start point to measure the distance  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Point * Point
            (
            );
            /**Sets   @brief  the point. Sensor Reference Point, also used as start point to measure the distance  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns   @brief  the open angle. The angle between the cone surface and the Direction. 

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns   @brief  the range of distance sensor. Also as the height of the cone  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * Range
            (
            );
            /**Returns   @brief  the option of highlight on collision. If the highlight is true, then the sensor will
                    be highlighted when it is collided or triggered during simulation.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool HighlightOnCollision
            (
            );
            /**Sets   @brief  the option of highlight on collision. If the highlight is true, then the sensor will
                    be highlighted when it is collided or triggered during simulation.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetHighlightOnCollision
            (
                bool highlight /** highlight */ 
            );
            /**Returns   @brief  the category. It should be between 0 and 16.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int Category
            (
            );
            /**Sets   @brief  the category. It should be between 0 and 16.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetCategory
            (
                int category /** category */ 
            );
            /**Returns   @brief  the use scale flag, which is used to control if the distance sensor includes scale parameters.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool UseScale
            (
            );
            /**Sets   @brief  the use scale flag, which is used to control if the distance sensor includes scale parameters.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetUseScale
            (
                bool useScale /** usescale */ 
            );
            /**Returns   @brief  the measure type.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::DistanceSensorBuilder::OutputMeasureType MeasureType
            (
            );
            /**Sets   @brief  the measure type.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetMeasureType
            (
                NXOpen::Mechatronics::DistanceSensorBuilder::OutputMeasureType measureType /** measuretype */ 
            );
            /**Returns   @brief  the lower output range used to scale the distance data. Its measure type contains constant, voltage, current  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * LowerOutputRange
            (
            );
            /**Returns   @brief  the upper output range used to scale the distance data.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * UpperOutputRange
            (
            );
            /**Returns   @brief  the name.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString Name
            (
            );
            /**Sets   @brief  the name.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets   @brief  the name.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
