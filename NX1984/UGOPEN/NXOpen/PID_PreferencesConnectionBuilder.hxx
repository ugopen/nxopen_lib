#ifndef NXOpen_PID_PREFERENCESCONNECTIONBUILDER_HXX_INCLUDED
#define NXOpen_PID_PREFERENCESCONNECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_PreferencesConnectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_DataType.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libpidopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        class PreferencesConnectionBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace PID
    {
        class _PreferencesConnectionBuilderBuilder;
        class PreferencesConnectionBuilderImpl;
        /**
            Represents a PreferencesConnectionBuilder
            
         <br>  Created in NX11.0.1.  <br>  
        */
        class PIDOPENCPPEXPORT  PreferencesConnectionBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: PreferencesConnectionBuilderImpl * m_preferencesconnectionbuilder_impl;
            private: friend class  _PreferencesConnectionBuilderBuilder;
            protected: PreferencesConnectionBuilder();
            public: ~PreferencesConnectionBuilder();
            /**Returns  the allow non-orthogonal connections.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: bool AllowNonOrthogonalConnections
            (
            );
            /**Sets  the allow non-orthogonal connections.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetAllowNonOrthogonalConnections
            (
                bool allowNonOrthogonal /** allownonorthogonal */ 
            );
            /**Returns  the minimum segment length.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double MinimumSegmentLength
            (
            );
            /**Sets  the minimum segment length.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetMinimumSegmentLength
            (
                double length /** length */ 
            );
            /**Returns  the jumper type. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::Diagramming::DiagrammingJumpertype JumperType
            (
            );
            /**Sets  the jumper type. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetJumperType
            (
                NXOpen::Diagramming::DiagrammingJumpertype jumperType /** jumpertype */ 
            );
            /**Returns  the jumper gap.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double JumperGap
            (
            );
            /**Sets  the jumper gap.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetJumperGap
            (
                double gap /** gap */ 
            );
            /**Returns  the jumper priority use line type.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: bool JumperPriorityUseLineType
            (
            );
            /**Sets  the jumper priority use line type.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetJumperPriorityUseLineType
            (
                bool useLineType /** uselinetype */ 
            );
            /**Returns  the jumper priority type. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::Diagramming::DiagrammingJumperprioritytype JumperPriority
            (
            );
            /**Sets  the jumper priority type. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetJumperPriority
            (
                NXOpen::Diagramming::DiagrammingJumperprioritytype jumperPriorityType /** jumperprioritytype */ 
            );
            /**Returns  the snap angle 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double SnapAngle
            (
            );
            /**Sets  the snap angle 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetSnapAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the arrow style.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::Diagramming::DiagrammingFlowdirectionarrowstyle ArrowStyle
            (
            );
            /**Sets  the arrow style.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetArrowStyle
            (
                NXOpen::Diagramming::DiagrammingFlowdirectionarrowstyle style /** style */ 
            );
            /**Returns  the arrow size.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double ArrowSize
            (
            );
            /**Sets  the arrow size.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetArrowSize
            (
                double size /** size */ 
            );
            /**Returns  the tee size.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double TeeSize
            (
            );
            /**Sets  the tee size.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetTeeSize
            (
                double size /** size */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
