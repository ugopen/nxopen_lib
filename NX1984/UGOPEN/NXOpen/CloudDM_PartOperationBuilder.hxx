#ifndef NXOpen_CLOUDDM_PARTOPERATIONBUILDER_HXX_INCLUDED
#define NXOpen_CLOUDDM_PARTOPERATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CloudDM_PartOperationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/IAttributeSourceObjectBuilder.hxx>
#include <NXOpen/libnxopencpp_clouddm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CloudDM
    {
        class PartOperationBuilder;
    }
    class BasePart;
    class Builder;
    namespace CloudDM
    {
        class PartOperationObject;
    }
    class ErrorList;
    class IAttributeSourceObjectBuilder;
    class NXObject;
    namespace CloudDM
    {
        class _PartOperationBuilderBuilder;
        class PartOperationBuilderImpl;

        /// \cond NX_NO_DOC 
        /** Represents a builder class that collects Cloud properties while performing cloud part operations like create, revise, saveas  <br> To create a new instance of this class, use @link NXOpen::CloudDM::DataManager::CreatePartOperationBuilder  NXOpen::CloudDM::DataManager::CreatePartOperationBuilder @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CLOUDDMEXPORT  PartOperationBuilder : public NXOpen::Builder, public virtual NXOpen::IAttributeSourceObjectBuilder
        {
            /** Indicates Cloud part operation for which attributes are being collected. 
             <br>  Created in NX1926.0.0.  <br>  
            */

            /// \cond NX_NO_DOC 
            public: enum OperationType
            {
                OperationTypeCreateSpecification/** create specification */ ,
                OperationTypeNamePart/** name part */ ,
                OperationTypeMakeUnique/** make unique */ ,
                OperationTypeRevise/** revise */ ,
                OperationTypeSaveAs/** save as */ ,
                OperationTypeMirror/** mirror */ ,
                OperationTypeMax/** max */ 
            };


            /// \endcond 
            private: PartOperationBuilderImpl * m_partoperationbuilder_impl;
            private: friend class  _PartOperationBuilderBuilder;
            protected: PartOperationBuilder();
            public: ~PartOperationBuilder();

            /// \cond NX_NO_DOC 
            /** Sets the cloud operation type for which attributes are being collected.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOperationType
            (
                NXOpen::CloudDM::PartOperationBuilder::OperationType optype /** Operation type for which attributes are being collected.*/
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Returns the cloud option operation type for which attributes are being collected.  @return  Operation type for which attributes are being collected.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CloudDM::PartOperationBuilder::OperationType GetOperationType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the source parts for builder. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSourceParts
            (
                const std::vector<NXOpen::BasePart *> & sourceParts /** sourceparts */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates the part operation objects for the source parts 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePartOperationObjects
            (
                std::vector<NXOpen::CloudDM::PartOperationObject *> & partOperationObjects /** partoperationobjects */ ,
                std::vector<NXString> & errorMsgs /** errormsgs */ ,
                int* status /** status */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Validates the part operation objects for the specified operation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ValidatePartOperationObjects
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the Target path on builder. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetPath
            (
                const NXString & targetPath /** targetpath */ 
            );
            /** Sets the Target path on builder. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetTargetPath
            (
                const char * targetPath /** targetpath */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Returns part operation failures 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ErrorList * GetOperationFailures
            (
            );

            /// \endcond 
            /**  Auto assigns the attributes for a given array of objects and returns an array of objects that failed to auto assign.
               
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ErrorList * AutoAssignAttributes
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /**  Auto assigns the attributes for a given object and returns an array of objects that failed to auto assign.
                    properties needs to be created using @link CreateAttributeTitleToNamingPatternMap CreateAttributeTitleToNamingPatternMap@endlink 
               
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ErrorList * AutoAssignAttributesWithNamingPattern
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ ,
                const std::vector<NXOpen::NXObject *> & properties /** properties */ 
            );
            /** Creates a map object of attribute titles to their corresponding naming pattern 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::NXObject * CreateAttributeTitleToNamingPatternMap
            (
                std::vector<NXString> & attributeTitles /** attributetitles */ ,
                std::vector<NXString> & titlePatterns /** titlepatterns */ 
            );
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
