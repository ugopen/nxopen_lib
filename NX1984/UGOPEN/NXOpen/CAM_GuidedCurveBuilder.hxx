#ifndef NXOpen_CAM_GUIDEDCURVEBUILDER_HXX_INCLUDED
#define NXOpen_CAM_GUIDEDCURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_GuidedCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class GuidedCurveBuilder;
    }
    namespace CAM
    {
        class CutPatternBuilder;
    }
    namespace CAM
    {
        class CutSideBuilder;
    }
    namespace CAM
    {
        class DmToolPosition;
    }
    namespace CAM
    {
        class GuidedCurveCutOrder;
    }
    namespace CAM
    {
        class GuidingCurvesCutDir;
    }
    namespace CAM
    {
        class PatternTypeBuilder;
    }
    namespace CAM
    {
        class StepoverBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class ICurve;
    class Section;
    class SectionList;
    namespace CAM
    {
        class _GuidedCurveBuilderBuilder;
        class GuidedCurveBuilderImpl;
        /** Represents a Guided Curve Drive Method Builder 
         <br>  Created in NX11.0.1.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  GuidedCurveBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Available types for Guided Curve cut pattern */
            public: enum GcCutPatternTypes
            {
                GcCutPatternTypesParallelLines/** Parallel Lines */
            };

            private: GuidedCurveBuilderImpl * m_guidedcurvebuilder_impl;
            private: friend class  _GuidedCurveBuilderBuilder;
            protected: GuidedCurveBuilder();
            public: ~GuidedCurveBuilder();
            /**Returns  the Pattern Type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PatternTypeBuilder * PatternType
            (
            );

            /// \cond NX_NO_DOC 
            /** Selects curve automatically 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SelectCurveAutomatically
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum gap length
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double MaximumGapLength
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum gap length
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaximumGapLength
            (
                double newValue /** the value of maximum gap length */
            );

            /// \endcond 
            /**Returns  the Drive Curve List
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::SectionList * FromCurveList
            (
            );
            /**Returns  the Cut Pattern 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutPatternBuilder * GcCutPattern
            (
            );
            /**Returns  the Stepover 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::StepoverBuilder * StepoverBuilder
            (
            );
            /**Returns  the Tool Position 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::DmToolPosition * ToolPosition
            (
            );
            /**Returns  the Cut Order 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::GuidedCurveCutOrder * CutOrder
            (
            );
            /**Returns  the Extend Curve to cut area boundaries 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool ExtendGuideCurve
            (
            );
            /**Sets  the Extend Curve to cut area boundaries 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetExtendGuideCurve
            (
                bool newValue /** newvalue */ 
            );
            /**Returns   @brief  the option that specifies whether to smooth corners in tool path for guiding curves drive method.  

              
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool Smoothing
            (
            );
            /**Sets   @brief  the option that specifies whether to smooth corners in tool path for guiding curves drive method.  

              
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetSmoothing
            (
                bool newValue /** True if path smoothing is on */
            );
            /**Returns  the Cut Side 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutSideBuilder * CutSide
            (
            );
            /**Returns  the Cut Dir 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::GuidingCurvesCutDir * CutDir
            (
            );
            /** The bridge curves added to section 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void ValidateCurves
            (
                NXOpen::Section * sectionTag /** sectiontag */ ,
                std::vector<NXOpen::ICurve *> & bridgeCurves /** bridgecurves */ 
            );
            /**Returns  the use face normal toggle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseFaceNormal
            (
            );
            /**Sets  the use face normal toggle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseFaceNormal
            (
                bool newValue /** newvalue */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
