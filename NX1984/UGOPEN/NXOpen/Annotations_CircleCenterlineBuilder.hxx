#ifndef NXOpen_ANNOTATIONS_CIRCLECENTERLINEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_CIRCLECENTERLINEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_CircleCenterlineBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_CircleCenterlineSettingsBuilder.hxx>
#include <NXOpen/Annotations_CenterlineBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class CircleCenterlineBuilder;
    }
    namespace Annotations
    {
        class CenterlineBuilder;
    }
    namespace Annotations
    {
        class CircleCenterlineSettingsBuilder;
    }
    class SelectNXObject;
    class SelectNXObjectList;
    namespace Annotations
    {
        class _CircleCenterlineBuilderBuilder;
        class CircleCenterlineBuilderImpl;
        /** Represents a CircleCenterline Builder  <br> This is an abstract class.  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Settings.Extension </term> <description> 
         
        6.35 (millimeters part), 0.25 (inches part) </description> </item> 

        <item><term> 
         
        Settings.Gap </term> <description> 
         
        1.5875 (millimeters part), 0.0625 (inches part) </description> </item> 

        <item><term> 
         
        Settings.IndividualDistance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        Settings.Size </term> <description> 
         
        3.175 (millimeters part), 0.125 (inches part) </description> </item> 

        <item><term> 
         
        Settings.Width </term> <description> 
         
        Thin </description> </item> 

        </list> 

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  CircleCenterlineBuilder : public NXOpen::Annotations::CenterlineBuilder
        {
            /** the valid enumeration used for the creation types, applicable only while creation
                    Once created type centerpoint will be set for all bolt circle/circular centerline*/
            public: enum Types
            {
                TypesThrough3Points/** Centerline using 3 or More Points Method */,
                TypesCenterpoint/** Centerline using Centerpoint Method */
            };

            private: CircleCenterlineBuilderImpl * m_circlecenterlinebuilder_impl;
            private: friend class  _CircleCenterlineBuilderBuilder;
            protected: CircleCenterlineBuilder();
            public: ~CircleCenterlineBuilder();
            /**Returns  the selction object of the centerline
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * Locations
            (
            );
            /**Returns  the method which returns full or partial circle flag
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool FullCircle
            (
            );
            /**Sets  the method which returns full or partial circle flag
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetFullCircle
            (
                bool fullType /** fulltype */ 
            );
            /**Returns  the method which returns type of centerline 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CircleCenterlineBuilder::Types Type
            (
            );
            /**Sets  the method which returns type of centerline 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetType
            (
                NXOpen::Annotations::CircleCenterlineBuilder::Types method /** method */ 
            );
            /**Returns  the inherit object
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * Inherit
            (
            );
            /**Returns  the settings builder object for the centerline 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CircleCenterlineSettingsBuilder * Settings
            (
            );
            /** Removes location object for a given index from the Select Object List.
                        This method is required for the retained circle centerline case , however the method
                        can be used for removing any object from select object list for the Circle Centerline. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void RemoveLocation
            (
                int index /** Index of the object in the select object list */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
