#ifndef NXOpen_FEATURES_VEHICLEDESIGN_WINDSHIELDVISIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VEHICLEDESIGN_WINDSHIELDVISIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VehicleDesign_WindshieldVisionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_VehicleDesign_ConfigurationBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace VehicleDesign
        {
            class WindshieldVisionBuilder;
        }
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeature;
    }
    namespace Features
    {
        namespace VehicleDesign
        {
            class ConfigurationBuilder;
        }
    }
    class NXColor;
    class Point;
    class ScCollector;
    class SelectNXObjectList;
    namespace Features
    {
        namespace VehicleDesign
        {
            class _WindshieldVisionBuilderBuilder;
            class WindshieldVisionBuilderImpl;
            /**
                Represents a @link Features::VehicleDesign::WindshieldVision Features::VehicleDesign::WindshieldVision@endlink  builder
                 <br> To create a new instance of this class, use @link NXOpen::Features::VehicleDesignCollection::CreateWindshieldVisionBuilder  NXOpen::Features::VehicleDesignCollection::CreateWindshieldVisionBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            AnalysisPrecision </term> <description> 
             
            5 </description> </item> 

            <item><term> 
             
            ArmLengthC </term> <description> 
             
            500 </description> </item> 

            <item><term> 
             
            ArmLengthL </term> <description> 
             
            500 </description> </item> 

            <item><term> 
             
            ArmLengthR </term> <description> 
             
            500 </description> </item> 

            <item><term> 
             
            BladeAngleC </term> <description> 
             
            10 </description> </item> 

            <item><term> 
             
            BladeAngleL </term> <description> 
             
            10 </description> </item> 

            <item><term> 
             
            BladeAngleR </term> <description> 
             
            10 </description> </item> 

            <item><term> 
             
            BladeLengthC </term> <description> 
             
            500 </description> </item> 

            <item><term> 
             
            BladeLengthL </term> <description> 
             
            500 </description> </item> 

            <item><term> 
             
            BladeLengthR </term> <description> 
             
            500 </description> </item> 

            <item><term> 
             
            Configuration.UseStandardLoading </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            DefineSelect </term> <description> 
             
            DefineWiperSystem </description> </item> 

            <item><term> 
             
            EnlargedTestA </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            FlatPattern </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            GenerateValidationLogFile </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            H70value </term> <description> 
             
            360 </description> </item> 

            <item><term> 
             
            L31value </term> <description> 
             
            1300 </description> </item> 

            <item><term> 
             
            OffsetCurves </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            OffsetValue </term> <description> 
             
            25.4 </description> </item> 

            <item><term> 
             
            ParkAngleC </term> <description> 
             
            170 </description> </item> 

            <item><term> 
             
            ParkAngleL </term> <description> 
             
            170 </description> </item> 

            <item><term> 
             
            ParkAngleR </term> <description> 
             
            170 </description> </item> 

            <item><term> 
             
            PatternType </term> <description> 
             
            Tandem </description> </item> 

            <item><term> 
             
            ReducedTestB </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            TestA </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            TestASurface </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            TestB </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            TestBSurface </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            TestCSurface </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            ViewValidationResults </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            W20value </term> <description> 
             
            -350 </description> </item> 

            <item><term> 
             
            WBackangle </term> <description> 
             
            25.0 </description> </item> 

            <item><term> 
             
            WipeAngleC </term> <description> 
             
            90 </description> </item> 

            <item><term> 
             
            WipeAngleL </term> <description> 
             
            90 </description> </item> 

            <item><term> 
             
            WipeAngleR </term> <description> 
             
            90 </description> </item> 

            <item><term> 
             
            WipedA </term> <description> 
             
            1 </description> </item> 

            </list> 

             <br>  Created in NX1926.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  WindshieldVisionBuilder : public NXOpen::Features::FeatureBuilder
            {
                /** Represents options of the VehicleClassification type belong to the SAE_ClassB_Standard and UMTRI Standard. */
                public: enum EnumWsVehicleClassification
                {
                    EnumWsVehicleClassificationTRUCK1020MUTruckCBEandCAE01020mm/** Represents calculating the eye_point by Truck CBE and CAE(0-1020 mm) */,
                    EnumWsVehicleClassificationTRUCK1270MUTruckCBEandCAE10201270mm/** Represents calculating the eye_point by Truck CBE and CAE(1020-1270 mm)*/,
                    EnumWsVehicleClassificationTRUCKUPMUTruckCBEandCAE1270Upmm/** Represents calculating the eye_point by Truck CBE and CAE(1270-Up mm)*/,
                    EnumWsVehicleClassificationBUSESCBEMUBusesCBESchoolandCommercial12701520mm/** Represents calculating the eye_point by Buses CBE-School and Commercial(1270-1520 mm)*/,
                    EnumWsVehicleClassificationBUSESFORWARDMUBusesForwardControlSchoolandCommercial12701520mm/** Represents calculating the eye_point by Buses CBE-School and Commercial(1270-1520 mm)*/,
                    EnumWsVehicleClassificationFORWARDCONTROLMUForwardControlorMultipurposeAll/** Represents calculating the eye_point by Forward Control or Multipurpose  (All)*/,
                    EnumWsVehicleClassificationLIGHTDUTYMULightDutyUtilityVehicleAll/** Represents calculating the eye_point by Light-Duty Utility Vehicle  (All)*/,
                    EnumWsVehicleClassificationVANOPENMUVanMultistopOpen/** Represents calculating the eye_point by Van Multistop  (Open)*/,
                    EnumWsVehicleClassificationTRUCKSCOEMUTrucksCOE1020Upmm/** Represents calculating the eye_point by Trucks COE (1020-Up mm)*/
                };

                /** Represents options of how to generate the V point */
                public: enum EnumWsDefinitionMethod
                {
                    EnumWsDefinitionMethodHipPoinUseHipPointandTorsoAngleECER432014/** Represents generating the V point by the HipPoint and TorsoAngle */,
                    EnumWsDefinitionMethodUseExistingVPoints/** Represents generating the V point by select the exiting V points*/,
                    EnumWsDefinitionMethodUseExistingECEPointsFeatureECER125/** Represents generating the V point by the exiting ECEPointsFeature*/
                };

                /** Represents options of the Vehicle Overall type belong to the FMVSS Standard */
                public: enum EnumWsVehicleOverall
                {
                    EnumWsVehicleOverallOW1520Mm/** Represents calculating the eye_point by vehicle Overall less than 1520mm */,
                    EnumWsVehicleOverallOW1520Mm1630Mm/** Represents calculating the eye_point by vehicle Overall between 1520mm and 1630mm */,
                    EnumWsVehicleOverallOW1630Mm1730Mm/** Represents calculating the eye_point by vehicle Overall between 1630mm and 1730mm */,
                    EnumWsVehicleOverallOW1730Mm/** Represents calculating the eye_point by vehicle Overall more than 1730mm */
                };

                /** Represents options of generating the Wipe Area */
                public: enum EnumWsWipe
                {
                    EnumWsWipeDefineWiperSystem/** Represents generating the Wipe Area by define the parameters*/,
                    EnumWsWipeSelectWipedAera/** Represents generating the Wipe Area by select the exiting Wipe Area*/
                };

                /** Represents options of the Wipe method */
                public: enum EnumWsPatternType
                {
                    EnumWsPatternTypeTandem/** Represents the Wipe Method is Tandem*/,
                    EnumWsPatternTypeOppssite/** Represents the Wipe Method is Oppssite*/,
                    EnumWsPatternTypeSingleArm/** Represents the Wipe Method is Single Arm*/,
                    EnumWsPatternTypeThreeArms/** Represents the Wipe Method is Three Arms*/
                };

                /** Represents user defined population percentile of selected eyellipse feature. */
                public: enum EyePercentile
                {
                    EyePercentilePer95/**Represents selecting 95% eyellipse percentile. */,
                    EyePercentilePer99/**Represents selecting 99% eyellipse percentile. */
                };

                private: WindshieldVisionBuilderImpl * m_windshieldvisionbuilder_impl;
                private: friend class  _WindshieldVisionBuilderBuilder;
                protected: WindshieldVisionBuilder();
                public: ~WindshieldVisionBuilder();
                /**Returns  the Vehicle Design Configuration builder to be referenced in the WINDSHIELD_VISION Area. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::ConfigurationBuilder * Configuration
                (
                );
                /**Sets  the Vehicle Design Configuration builder to be referenced in the WINDSHIELD_VISION Area. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetConfiguration
                (
                    NXOpen::Features::VehicleDesign::ConfigurationBuilder * configuration /** configuration */ 
                );
                /**Returns  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsVehicleClassification NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsVehicleClassification@endlink  for the
                                Vehicle Classification indicates the method to calculate the eye_point. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsVehicleClassification VehicleClassification
                (
                );
                /**Sets  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsVehicleClassification NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsVehicleClassification@endlink  for the
                                Vehicle Classification indicates the method to calculate the eye_point. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetVehicleClassification
                (
                    NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsVehicleClassification vehicleClassification /** vehicleclassification */ 
                );
                /**Returns  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsDefinitionMethod NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsDefinitionMethod@endlink  for the
                                DefintionMethod indicates the method to get the V point. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsDefinitionMethod DefinitionMethod
                (
                );
                /**Sets  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsDefinitionMethod NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsDefinitionMethod@endlink  for the
                                DefintionMethod indicates the method to get the V point. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDefinitionMethod
                (
                    NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsDefinitionMethod definitionMethod /** definitionmethod */ 
                );
                /**Returns  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsVehicleOverall NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsVehicleOverall@endlink  for the
                                Vehicle Overall indicates the method to calculate the eye_point. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: int VehicleOW
                (
                );
                /**Sets  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsVehicleOverall NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsVehicleOverall@endlink  for the
                                Vehicle Overall indicates the method to calculate the eye_point. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetVehicleOW
                (
                    int vehicleOW /** vehicleow */ 
                );
                /**Returns  the select Seating Referring Point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * Sgrp
                (
                );
                /**Sets  the select Seating Referring Point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSgrp
                (
                    NXOpen::Point * sgrp /** sgrp */ 
                );
                /**Returns  the SgRP length coordinate(L31) value 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double L31value
                (
                );
                /**Sets  the SgRP length coordinate(L31) value 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetL31value
                (
                    double l31value /** l31value */ 
                );
                /**Returns  the SgRP width coordinate(W20) value 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double W20value
                (
                );
                /**Sets  the SgRP width coordinate(W20) value 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetW20value
                (
                    double w20value /** w20value */ 
                );
                /**Returns  the SgRP height coordinate(H70) value 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double H70value
                (
                );
                /**Sets  the SgRP height coordinate(H70) value 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetH70value
                (
                    double h70value /** h70value */ 
                );
                /**Returns  the back angle value 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double WBackangle
                (
                );
                /**Sets  the back angle value 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWBackangle
                (
                    double wBackangle /** wbackangle */ 
                );
                /** Shows image of vehicle parameters 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void Imagebutton
                (
                );
                /** Reverts vehicle parameters to base data 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void WsRevertButton
                (
                );
                /**Returns  the select v1 point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * SelectV1
                (
                );
                /**Sets  the select v1 point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSelectV1
                (
                    NXOpen::Point * selectV1 /** selectv1 */ 
                );
                /**Returns  the select v2 point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * SelectV2
                (
                );
                /**Sets  the select v2 point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSelectV2
                (
                    NXOpen::Point * selectV2 /** selectv2 */ 
                );
                /**Returns  the select eyellipse 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::SelectFeature * SelectEyellipse
                (
                );
                /**Returns  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EyePercentile NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EyePercentile@endlink  for the eyellipse percentile to be used. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EyePercentile EyellipsePercentile
                (
                );
                /**Sets  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EyePercentile NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EyePercentile@endlink  for the eyellipse percentile to be used. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetEyellipsePercentile
                (
                    NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EyePercentile eyellipsePercentile /** eyellipsepercentile */ 
                );
                /**Returns  the face select 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * FaceSelect
                (
                );
                /**Sets  the face select 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetFaceSelect
                (
                    NXOpen::ScCollector * selectFaces /** selectfaces */ 
                );
                /**Returns  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsWipe NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsWipe@endlink  for the
                                WindshieldType indicates the method to wipe. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsWipe WindshieldType
                (
                );
                /**Sets  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsWipe NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsWipe@endlink  for the
                                WindshieldType indicates the method to wipe. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWindshieldType
                (
                    NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsWipe windshieldType /** windshieldtype */ 
                );
                /**Returns  the curves select 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * CurvesSelect
                (
                );
                /**Sets  the curves select 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetCurvesSelect
                (
                    NXOpen::ScCollector * curvesSelect /** curvesselect */ 
                );
                /**Returns  the offset value 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double OffsetValue
                (
                );
                /**Sets  the offset value 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetOffsetValue
                (
                    double offsetValue /** offsetvalue */ 
                );
                /**Returns  the wiped area generate 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool WipedA
                (
                );
                /**Sets  the wiped area generate 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWipedA
                (
                    bool wipedA /** wipeda */ 
                );
                /**Returns  the define select option 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsWipe DefineSelect
                (
                );
                /**Sets  the define select option 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDefineSelect
                (
                    NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsWipe defineSelect /** defineselect */ 
                );
                /**Returns  the wipe curves select 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * WipeCurvesSelect
                (
                );
                /**Sets  the wipe curves select 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWipeCurvesSelect
                (
                    NXOpen::ScCollector * wipeCurvesSelect /** wipecurvesselect */ 
                );
                /**Returns  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsPatternType NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsPatternType@endlink  for the
                                PatternType indicates the type of wipe area. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsPatternType PatternType
                (
                );
                /**Sets  the @link NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsPatternType NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsPatternType@endlink  for the
                                PatternType indicates the type of wipe area. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPatternType
                (
                    NXOpen::Features::VehicleDesign::WindshieldVisionBuilder::EnumWsPatternType patternType /** patterntype */ 
                );
                /** Shows image of wipe area parameters 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void WipeIllustration
                (
                );
                /**Returns  the analysis precision 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double AnalysisPrecision
                (
                );
                /**Sets  the analysis precision 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetAnalysisPrecision
                (
                    double analysisPrecision /** analysisprecision */ 
                );
                /**Returns  the left definition pivot point
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * LeftDefinitionP
                (
                );
                /**Sets  the left definition pivot point
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetLeftDefinitionP
                (
                    NXOpen::Point * leftDefinitionP /** leftdefinitionp */ 
                );
                /**Returns  the left arm length  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double ArmLengthL
                (
                );
                /**Sets  the left arm length  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetArmLengthL
                (
                    double armLengthL /** armlengthl */ 
                );
                /**Returns  the left blade length  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double BladeLengthL
                (
                );
                /**Sets  the left blade length  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBladeLengthL
                (
                    double bladeLengthL /** bladelengthl */ 
                );
                /**Returns  the left park angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double ParkAngleL
                (
                );
                /**Sets  the left park angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetParkAngleL
                (
                    double parkAngleL /** parkanglel */ 
                );
                /**Returns  the left wipe angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double WipeAngleL
                (
                );
                /**Sets  the left wipe angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWipeAngleL
                (
                    double wipeAngleL /** wipeanglel */ 
                );
                /**Returns  the left blade angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double BladeAngleL
                (
                );
                /**Sets  the left blade angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBladeAngleL
                (
                    double bladeAngleL /** bladeanglel */ 
                );
                /**Returns  the center definition pivot point 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * CenterDefinitionPoint
                (
                );
                /**Sets  the center definition pivot point 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetCenterDefinitionPoint
                (
                    NXOpen::Point * centerDefinitionPoint /** centerdefinitionpoint */ 
                );
                /**Returns  the center arm length  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: double ArmLengthC
                (
                );
                /**Sets  the center arm length  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetArmLengthC
                (
                    double armLengthC /** armlengthc */ 
                );
                /**Returns  the center blade length  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: double BladeLengthC
                (
                );
                /**Sets  the center blade length  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBladeLengthC
                (
                    double bladeLengthC /** bladelengthc */ 
                );
                /**Returns  the center park angle  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: double ParkAngleC
                (
                );
                /**Sets  the center park angle  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetParkAngleC
                (
                    double parkAngleC /** parkanglec */ 
                );
                /**Returns  the center wipe angle  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: double WipeAngleC
                (
                );
                /**Sets  the center wipe angle  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWipeAngleC
                (
                    double wipeAngleC /** wipeanglec */ 
                );
                /**Returns  the center blade angle  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: double BladeAngleC
                (
                );
                /**Sets  the center blade angle  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBladeAngleC
                (
                    double bladeAngleC /** bladeanglec */ 
                );
                /**Returns  the right definition pivot point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * RightDefinitionP
                (
                );
                /**Sets  the right definition pivot point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetRightDefinitionP
                (
                    NXOpen::Point * rightDefinitionP /** rightdefinitionp */ 
                );
                /**Returns  the right arm length  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double ArmLengthR
                (
                );
                /**Sets  the right arm length  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetArmLengthR
                (
                    double armLengthR /** armlengthr */ 
                );
                /**Returns  the right blade length  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double BladeLengthR
                (
                );
                /**Sets  the right blade length  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBladeLengthR
                (
                    double bladeLengthR /** bladelengthr */ 
                );
                /**Returns  the right park angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double ParkAngleR
                (
                );
                /**Sets  the right park angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetParkAngleR
                (
                    double parkAngleR /** parkangler */ 
                );
                /**Returns  the right wipe angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double WipeAngleR
                (
                );
                /**Sets  the right wipe angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWipeAngleR
                (
                    double wipeAngleR /** wipeangler */ 
                );
                /**Returns  the right blade angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double BladeAngleR
                (
                );
                /**Sets  the right blade angle  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBladeAngleR
                (
                    double bladeAngleR /** bladeangler */ 
                );
                /**Returns  the option to generate the test A area  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool TestA
                (
                );
                /**Sets  the option to generate the test A area  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestA
                (
                    bool testA /** testa */ 
                );
                /**Returns  the test A area color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * TestAColorPicker
                (
                );
                /**Sets  the test A area color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestAColorPicker
                (
                    NXOpen::NXColor * testAColorPicker /** testacolorpicker */ 
                );
                /**Returns  the option to generate the test area A surface 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: bool TestASurface
                (
                );
                /**Sets  the option to generate the test area A surface 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestASurface
                (
                    bool testASurface /** testasurface */ 
                );
                /**Returns  the test area A surface color picker 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * TestASurfaceColor
                (
                );
                /**Sets  the test area A surface color picker 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestASurfaceColor
                (
                    NXOpen::NXColor * testASurfaceColor /** testasurfacecolor */ 
                );
                /**Returns  the option to generate the enlarged test area A 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: bool EnlargedTestA
                (
                );
                /**Sets  the option to generate the enlarged test area A 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetEnlargedTestA
                (
                    bool enlargedTestA /** enlargedtesta */ 
                );
                /**Returns  the enlarged test area A color picker 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * EnlargedTestAColor
                (
                );
                /**Sets  the enlarged test area A color picker 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetEnlargedTestAColor
                (
                    NXOpen::NXColor * enlargedTestAColor /** enlargedtestacolor */ 
                );
                /**Returns  the option to generate the flat pattern Area 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool FlatPattern
                (
                );
                /**Sets  the option to generate the flat pattern Area 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetFlatPattern
                (
                    bool flatPattern /** flatpattern */ 
                );
                /**Returns  the flat color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * FlatColorPicker
                (
                );
                /**Sets  the flat color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetFlatColorPicker
                (
                    NXOpen::NXColor * flatColorPicker /** flatcolorpicker */ 
                );
                /**Returns  the option to generate the test B Area  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool TestB
                (
                );
                /**Sets  the option to generate the test B Area  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestB
                (
                    bool testB /** testb */ 
                );
                /**Returns  the test b Area color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * TestBColorPicker
                (
                );
                /**Sets  the test b Area color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestBColorPicker
                (
                    NXOpen::NXColor * testBColorPicker /** testbcolorpicker */ 
                );
                /**Returns  the option to generate the test area B surface 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: bool TestBSurface
                (
                );
                /**Sets  the option to generate the test area B surface 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestBSurface
                (
                    bool testBSurface /** testbsurface */ 
                );
                /**Returns  the test area B surface color picker 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * TestBSurfaceColor
                (
                );
                /**Sets  the test area B surface color picker 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestBSurfaceColor
                (
                    NXOpen::NXColor * testBSurfaceColor /** testbsurfacecolor */ 
                );
                /**Returns  the option to generate the reduced test area B 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: bool ReducedTestB
                (
                );
                /**Sets  the option to generate the reduced test area B 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetReducedTestB
                (
                    bool reducedTestB /** reducedtestb */ 
                );
                /**Returns  the reduced test area B color picker 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * ReducedTestBColor
                (
                );
                /**Sets  the reduced test area B color picker 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetReducedTestBColor
                (
                    NXOpen::NXColor * reducedTestBColor /** reducedtestbcolor */ 
                );
                /**Returns  the option to generate the offset curves  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool OffsetCurves
                (
                );
                /**Sets  the option to generate the offset curves  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetOffsetCurves
                (
                    bool offsetCurves /** offsetcurves */ 
                );
                /**Returns  the offset curves color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * OffsetCurvesColorPicker
                (
                );
                /**Sets  the offset curves color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetOffsetCurvesColorPicker
                (
                    NXOpen::NXColor * offsetCurvesColorPicker /** offsetcurvescolorpicker */ 
                );
                /**Returns  the option to generate the test C Area  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool TestC
                (
                );
                /**Sets  the option to generate the test C Area  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestC
                (
                    bool testC /** testc */ 
                );
                /**Returns  the test c area color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * TestCColorPicker
                (
                );
                /**Sets  the test c area color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestCColorPicker
                (
                    NXOpen::NXColor * testCColorPicker /** testccolorpicker */ 
                );
                /**Returns  the option to generate the test area C surface 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: bool TestCSurface
                (
                );
                /**Sets  the option to generate the test area C surface 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestCSurface
                (
                    bool testCSurface /** testcsurface */ 
                );
                /**Returns  the test area C surface color picker 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * TestCSurfaceColor
                (
                );
                /**Sets  the test area C surface color picker 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTestCSurfaceColor
                (
                    NXOpen::NXColor * testCSurfaceColor /** testcsurfacecolor */ 
                );
                /**Returns  the test wipe area color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * WiperAreaColorPicker
                (
                );
                /**Sets  the test wipe area color picker 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWiperAreaColorPicker
                (
                    NXOpen::NXColor * wiperAreaColorPicker /** wiperareacolorpicker */ 
                );
                /** Validates the windshield vision zones analysis and shows the validation results. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void ValidationButton
                (
                );
                /**Returns  the indication if the packaging validation gadget is invoked to view the results. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool ViewValidationResults
                (
                );
                /**Sets  the indication if the packaging validation gadget is invoked to view the results. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetViewValidationResults
                (
                    bool viewValidationResults /** viewvalidationresults */ 
                );
                /**Returns  the indication if the validation log file is generated. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool GenerateValidationLogFile
                (
                );
                /**Sets  the indication if the validation log file is generated. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetGenerateValidationLogFile
                (
                    bool generateValidationLogFile /** generatevalidationlogfile */ 
                );
                /**Returns  the facet selection used to identify the facet bodies. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectNXObjectList * FacetBodies
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
