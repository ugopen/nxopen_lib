#ifndef NXOpen_GEOMETRICUTILITIES_LENGTHLIMITPOINTBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_LENGTHLIMITPOINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_LengthLimitPointBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class LengthLimitPointBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace GeometricUtilities
    {
        class _LengthLimitPointBuilderBuilder;
        class LengthLimitPointBuilderImpl;
        /**
            Represents a @link NXOpen::GeometricUtilities::LengthLimitPointBuilder NXOpen::GeometricUtilities::LengthLimitPointBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::GeometricUtilities::PointFacePlaneSelectionBuilder::CreateLengthLimitPointBuilder  NXOpen::GeometricUtilities::PointFacePlaneSelectionBuilder::CreateLengthLimitPointBuilder @endlink  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  LengthLimitPointBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: LengthLimitPointBuilderImpl * m_lengthlimitpointbuilder_impl;
            private: friend class  _LengthLimitPointBuilderBuilder;
            protected: LengthLimitPointBuilder();
            public: ~LengthLimitPointBuilder();
            /**Returns  the @link NXOpen::GeometricUtilities::LengthLimitPointBuilder NXOpen::GeometricUtilities::LengthLimitPointBuilder@endlink  subobject. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * OnPathDim
            (
            );
            /** Destructor for @link NXOpen::GeometricUtilities::LengthLimitPointBuilder NXOpen::GeometricUtilities::LengthLimitPointBuilder@endlink  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void Destroy
            (
            );
            /** Flip the builder path for @link NXOpen::GeometricUtilities::LengthLimitPointBuilder NXOpen::GeometricUtilities::LengthLimitPointBuilder@endlink  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void FlipPath
            (
                bool isStartOfEdge /** isstartofedge */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
