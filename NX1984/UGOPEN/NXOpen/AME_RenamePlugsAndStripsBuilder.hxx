#ifndef NXOpen_AME_RENAMEPLUGSANDSTRIPSBUILDER_HXX_INCLUDED
#define NXOpen_AME_RENAMEPLUGSANDSTRIPSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_RenamePlugsAndStripsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class RenamePlugsAndStripsBuilder;
    }
    namespace AME
    {
        class SelectAMEBaseNodeList;
    }
    class Builder;
    namespace AME
    {
        class _RenamePlugsAndStripsBuilderBuilder;
        class RenamePlugsAndStripsBuilderImpl;
        /** JA class for the Rename Plugs And Strips dialog <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateRenamePlugsAndStripsBuilder  NXOpen::AME::AMEManager::CreateRenamePlugsAndStripsBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        IndexIncrement </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        Merge </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        StartIndex </term> <description> 
         
        1 </description> </item> 

        </list> 

         <br>  Created in NX1926.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  RenamePlugsAndStripsBuilder : public NXOpen::Builder
        {
            private: RenamePlugsAndStripsBuilderImpl * m_renameplugsandstripsbuilder_impl;
            private: friend class  _RenamePlugsAndStripsBuilderBuilder;
            protected: RenamePlugsAndStripsBuilder();
            public: ~RenamePlugsAndStripsBuilder();
            /**Returns  the select node for renaming plugs and strips in product aspect navigator 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNodeList * SelectNode
            (
            );
            /**Returns  the start index 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int StartIndex
            (
            );
            /**Sets  the start index 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetStartIndex
            (
                int startIndex /** startindex */ 
            );
            /**Returns  the index increment 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int IndexIncrement
            (
            );
            /**Sets  the index increment 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetIndexIncrement
            (
                int indexIncrement /** indexincrement */ 
            );
            /**Returns  the bool value which determine if characters are to be merged with sequence number for renaming 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool Merge
            (
            );
            /**Sets  the bool value which determine if characters are to be merged with sequence number for renaming 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetMerge
            (
                bool merge /** merge */ 
            );
            /**Returns  the bool value which determine to allow potential based renaming or not 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool EnablePotential
            (
            );
            /**Sets  the bool value which determine to allow potential based renaming or not 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetEnablePotential
            (
                bool potential /** potential */ 
            );
            /** The potential type list 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPotentialTypeList
            (
                std::vector<NXString> & rowStrings /** rowstrings */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
