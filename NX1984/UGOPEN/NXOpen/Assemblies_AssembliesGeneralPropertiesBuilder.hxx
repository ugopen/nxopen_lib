#ifndef NXOpen_ASSEMBLIES_ASSEMBLIESGENERALPROPERTIESBUILDER_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_ASSEMBLIESGENERALPROPERTIESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_AssembliesGeneralPropertiesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        class AssembliesGeneralPropertiesBuilder;
    }
    namespace Assemblies
    {
        class SelectComponentList;
    }
    class Builder;
    namespace Assemblies
    {
        class _AssembliesGeneralPropertiesBuilderBuilder;
        class AssembliesGeneralPropertiesBuilderImpl;
        /**
            Represents an @link NXOpen::Assemblies::AssembliesGeneralPropertiesBuilder NXOpen::Assemblies::AssembliesGeneralPropertiesBuilder@endlink  to be used for changing the
            general properties of a component.
             <br> To create a new instance of this class, use @link NXOpen::PropertiesManager::CreateAssembliesGeneralPropertiesBuilder  NXOpen::PropertiesManager::CreateAssembliesGeneralPropertiesBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Hidden </term> <description> 
         
        No </description> </item> 

        <item><term> 
         
        IntegerQuantity </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        Layer </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        LayerOption </term> <description> 
         
        OriginalLayer </description> </item> 

        <item><term> 
         
        NonGeometric </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        QuantityType </term> <description> 
         
        Number </description> </item> 

        <item><term> 
         
        RealQuantity </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ReferenceComponent </term> <description> 
         
        No </description> </item> 

        <item><term> 
         
        SpecificColor </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SpecificLineFont </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SpecificPartialShade </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SpecificTranslucency </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SpecificWidth </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_ASSEMBLIESEXPORT  AssembliesGeneralPropertiesBuilder : public NXOpen::Builder
        {
            /** Options for managing the hidden property on the components */
            public: enum HiddenOptions
            {
                HiddenOptionsNo/** Do not hide the objects */,
                HiddenOptionsYes/** Hide the objects */,
                HiddenOptionsMixed/** Objects hidden properties differ and will not change */
            };

            /** Layer options for the components */
            public: enum LayerOptions
            {
                LayerOptionsOriginalLayer/** Objects will be placed on original layer */,
                LayerOptionsSpecifiedLayer/** Objects will be placed on a user specified layer */,
                LayerOptionsMixed/** Objects are on different layers and will not be changed */
            };

            /** Options for setting the reference-only property on the components */
            public: enum ReferenceComponentOptions
            {
                ReferenceComponentOptionsNo/** Objects will be non reference-only components */,
                ReferenceComponentOptionsYes/** Objects will be reference-only components */,
                ReferenceComponentOptionsMixed/** Objects are a mixture of reference-only and non reference-only components, and will not be changed */
            };

            /** Options for assigning the quantity on the components */
            public: enum QuantityOptions
            {
                QuantityOptionsNumber/** Use either the integer or real value to set the quantity */,
                QuantityOptionsAsRequired/** Set the as-required quantity on this component. */,
                QuantityOptionsMixed/** Set the No Change(Mixed) quantity type if selected components have different quantity type and value */
            };

            private: AssembliesGeneralPropertiesBuilderImpl * m_assembliesgeneralpropertiesbuilder_impl;
            private: friend class  _AssembliesGeneralPropertiesBuilderBuilder;
            protected: AssembliesGeneralPropertiesBuilder();
            public: ~AssembliesGeneralPropertiesBuilder();
            /**Returns  the selected object(s) list.  This is the active list of components that will be
                        modified by any changes. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponentList * SelectedObjects
            (
            );
            /**Returns  the hidden option.  The hidden option will be "Yes" if all the objects are hidden, 
                        "No" if all the objects are not hidden, and "Mixed" if there is a combination. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::AssembliesGeneralPropertiesBuilder::HiddenOptions Hidden
            (
            );
            /**Sets  the hidden option.  The hidden option will be "Yes" if all the objects are hidden, 
                        "No" if all the objects are not hidden, and "Mixed" if there is a combination. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHidden
            (
                NXOpen::Assemblies::AssembliesGeneralPropertiesBuilder::HiddenOptions hidden /** hidden */ 
            );
            /**Returns  the layer option.  If specified layer is set, then the layer will be used. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::AssembliesGeneralPropertiesBuilder::LayerOptions LayerOption
            (
            );
            /**Sets  the layer option.  If specified layer is set, then the layer will be used. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLayerOption
            (
                NXOpen::Assemblies::AssembliesGeneralPropertiesBuilder::LayerOptions layerOption /** layeroption */ 
            );
            /**Returns  the layer.  Used if the layer option is set to specified. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int Layer
            (
            );
            /**Sets  the layer.  Used if the layer option is set to specified. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the specific color flag.  The explicit color display property will be discarded from all
                        components. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool SpecificColor
            (
            );
            /**Sets  the specific color flag.  The explicit color display property will be discarded from all
                        components. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecificColor
            (
                bool specificColor /** specificcolor */ 
            );
            /**Returns  the specific line font flag.  The explicit line font display property will be discarded from all
                        components. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: bool SpecificLineFont
            (
            );
            /**Sets  the specific line font flag.  The explicit line font display property will be discarded from all
                        components. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void SetSpecificLineFont
            (
                bool specificLineFont /** specificlinefont */ 
            );
            /**Returns  the specific width flag.  The explicit width display property will be discarded from all
                       components. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: bool SpecificWidth
            (
            );
            /**Sets  the specific width flag.  The explicit width display property will be discarded from all
                       components. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void SetSpecificWidth
            (
                bool specificWidth /** specificwidth */ 
            );
            /**Returns  the specific translucency flag.  The explicit translucency display property will be 
                        discarded from all components. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool SpecificTranslucency
            (
            );
            /**Sets  the specific translucency flag.  The explicit translucency display property will be 
                        discarded from all components. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecificTranslucency
            (
                bool specificTranslucency /** specifictranslucency */ 
            );
            /**Returns  the specific partial shade flag.  The explicit partial shade display property will be 
                        discarded from all components. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool SpecificPartialShade
            (
            );
            /**Sets  the specific partial shade flag.  The explicit partial shade display property will be 
                        discarded from all components. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecificPartialShade
            (
                bool specificPartialShade /** specificpartialshade */ 
            );
            /**Returns  the reference-only component flag.  This option determines whether the components will
                        be reference-only or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::AssembliesGeneralPropertiesBuilder::ReferenceComponentOptions ReferenceComponent
            (
            );
            /**Sets  the reference-only component flag.  This option determines whether the components will
                        be reference-only or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReferenceComponent
            (
                NXOpen::Assemblies::AssembliesGeneralPropertiesBuilder::ReferenceComponentOptions referenceComponent /** referencecomponent */ 
            );
            /**Returns  the non geometric flag.  Sets the components to either geometric or non-geometric. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool NonGeometric
            (
            );
            /**Sets  the non geometric flag.  Sets the components to either geometric or non-geometric. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNonGeometric
            (
                bool nonGeometric /** nongeometric */ 
            );
            /**Returns  the quantity type.  If the quantity type is set to number than either the integer 
                        quantity or the real quantity values will be used.  Otherwise the quantity will
                        be set to as-required. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::AssembliesGeneralPropertiesBuilder::QuantityOptions QuantityType
            (
            );
            /**Sets  the quantity type.  If the quantity type is set to number than either the integer 
                        quantity or the real quantity values will be used.  Otherwise the quantity will
                        be set to as-required. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetQuantityType
            (
                NXOpen::Assemblies::AssembliesGeneralPropertiesBuilder::QuantityOptions quantityType /** quantitytype */ 
            );
            /**Returns  the integer quantity.  This value will be used if the Quantity Type is set to Number
                        and the DB_UNITS attribute is not set. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int IntegerQuantity
            (
            );
            /**Sets  the integer quantity.  This value will be used if the Quantity Type is set to Number
                        and the DB_UNITS attribute is not set. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIntegerQuantity
            (
                int integerQuantity /** integerquantity */ 
            );
            /**Returns  the real quantity.  This value will be used if the Quantity Type is set to Number
                        and the DB_UNITS attribute has been set. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double RealQuantity
            (
            );
            /**Sets  the real quantity.  This value will be used if the Quantity Type is set to Number
                        and the DB_UNITS attribute has been set. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRealQuantity
            (
                double realQuantity /** realquantity */ 
            );
            /** Synchronize the layers on the components 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SynchronizeLayers
            (
            );
            /** Synchronize the display on the components 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SynchronizeDisplay
            (
            );
            /** Synchronize the attributes on the components 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SynchronizeAttributes
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
