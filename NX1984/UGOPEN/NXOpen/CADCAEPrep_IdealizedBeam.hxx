#ifndef NXOpen_CADCAEPREP_IDEALIZEDBEAM_HXX_INCLUDED
#define NXOpen_CADCAEPREP_IDEALIZEDBEAM_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CADCAEPrep_IdealizedBeam.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CADCAEPrep_IBeamSection.hxx>
#include <NXOpen/CADCAEPrep_OrientationByVector.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cadcaeprep_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CADCAEPrep
    {
        class IdealizedBeam;
    }
    namespace CADCAEPrep
    {
        class IBeamSection;
    }
    class Curve;
    class NXObject;
    class PhysicalMaterial;
    namespace CADCAEPrep
    {
        class _IdealizedBeamBuilder;
        class IdealizedBeamImpl;
        /** The object containing the information about the IdealizedBeam to be modified. <br>   <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_CADCAEPREPEXPORT  IdealizedBeam : public NXOpen::NXObject
        {
            private: IdealizedBeamImpl * m_idealizedbeam_impl;
            private: friend class  _IdealizedBeamBuilder;
            protected: IdealizedBeam();
            public: ~IdealizedBeam();
            /**Returns  the physical material 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PhysicalMaterial * Material
            (
            );
            /**Sets  the physical material 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaterial
            (
                NXOpen::PhysicalMaterial * material /** the section material  */
            );
            /**Returns  the section 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CADCAEPrep::IBeamSection * Section
            (
            );
            /**Sets  the section 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSection
            (
                NXOpen::CADCAEPrep::IBeamSection * section /** the section  */
            );
            /**Returns  the associated curve  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Curve * Curve
            (
            );
            /**Returns  the mesh collector prefix. 
                            The mesh collector prefix will be used to create the name of the mesh collector.
                            If several idealized beams share the same mesh collector prefix, all the resulting meshes will be put in the same collector.
                        
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MeshCollectorPrefix
            (
            );
            /**Sets  the mesh collector prefix. 
                            The mesh collector prefix will be used to create the name of the mesh collector.
                            If several idealized beams share the same mesh collector prefix, all the resulting meshes will be put in the same collector.
                        
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMeshCollectorPrefix
            (
                const NXString & meshCollectorPrefix /** the mesh collector prefix  */
            );
            /**Sets  the mesh collector prefix. 
                            The mesh collector prefix will be used to create the name of the mesh collector.
                            If several idealized beams share the same mesh collector prefix, all the resulting meshes will be put in the same collector.
                        
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            void SetMeshCollectorPrefix
            (
                const char * meshCollectorPrefix /** the mesh collector prefix  */
            );
            /** The orientation by vector:
                             The section orientation is determined by the 3d vector parameter OrienVect that corresponds to either the Y axis or Z axis depending on the OrientAxis parameter.
                             The coordinate system of the section is determined as follows:
                                Its X axis correspond to the tagent to the curve
                                Its Y or Z axis direction is given by the projection of OrientVect onto the Y,Z plane. As a consequence OrientVect should not be parallel to X.
                                OrientAxis (ether Y or Z): indicates if the OrientVect is the Y or Z axis
                                IOrientation::FlipY (boolean): flips the section around the Y axis
                                IOrientation::FlipZ (boolean): flips the section around the Z axis             
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void GetOrientationByVector
            (
                NXOpen::Vector3d* orientVect /** orientvect */ ,
                NXOpen::CADCAEPrep::OrientationByVector::OrientAxis* orientAxis /** orientaxis */ ,
                bool* flipY /** flipy */ ,
                bool* flipZ /** flipz */ 
            );
            /** Set the orientation by vector 
                             The section orientation is determined by the 3d vector parameter OrienVect that corresponds to either the Y axis or Z axis depending on the OrientAxis parameter.
                             The coordinate system of the section is determined as follows:
                                Its X axis correspond to the tagent to the curve
                                Its Y or Z axis direction is given by the projection of OrientVect onto the Y,Z plane. As a consequence OrientVect should not be parallel to X.
                                OrientAxis (ether Y or Z): indicates if the OrientVect is the Y or Z axis
                                IOrientation::FlipY (boolean): flips the section around the Y axis
                                IOrientation::FlipZ (boolean): flips the section around the Z axis             
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOrientationByVector
            (
                const NXOpen::Vector3d & orientVect /** orientvect */ ,
                NXOpen::CADCAEPrep::OrientationByVector::OrientAxis orientAxis /** orientaxis */ ,
                bool flipY /** flipy */ ,
                bool flipZ /** flipz */ 
            );
            /**Returns  the OffsetStart: 
                            Offset from the center of the bounding box to the curve start point, in the cross-section CSYS.
                        
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point2d OffsetStart
            (
            );
            /**Sets  the OffsetStart: 
                            Offset from the center of the bounding box to the curve start point, in the cross-section CSYS.
                        
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOffsetStart
            (
                const NXOpen::Point2d & offsetStart /** the OffsetStart */
            );
            /**Returns  the OffsetEnd: 
                            Offset from the center of the bounding box to the curve end point, in the cross-section CSYS.
                        
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point2d OffsetEnd
            (
            );
            /**Sets  the OffsetEnd: 
                            Offset from the center of the bounding box to the curve end point, in the cross-section CSYS.
                        
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOffsetEnd
            (
                const NXOpen::Point2d & offsetEnd /** the OffsetEnd */
            );
            /**Returns  the XOffsetStart:
                            the offset along the curve on start point side; Positive means inside the curve, negative means outside the curve (along the tangent).
                        
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double XOffsetStart
            (
            );
            /**Sets  the XOffsetStart:
                            the offset along the curve on start point side; Positive means inside the curve, negative means outside the curve (along the tangent).
                        
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetXOffsetStart
            (
                double xOffsetStart /** the XOffsetStart */
            );
            /**Returns  the XOffsetEnd:
                            the offset along the curve on end point side; Positive means inside the curve, negative means outside the curve (along the tangent).
                        
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double XOffsetEnd
            (
            );
            /**Sets  the XOffsetEnd:
                            the offset along the curve on end point side; Positive means inside the curve, negative means outside the curve (along the tangent).
                        
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetXOffsetEnd
            (
                double xOffsetEnd /** the XOffsetEnd */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
