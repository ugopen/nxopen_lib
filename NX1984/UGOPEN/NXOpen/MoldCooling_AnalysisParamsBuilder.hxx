#ifndef NXOpen_MOLDCOOLING_ANALYSISPARAMSBUILDER_HXX_INCLUDED
#define NXOpen_MOLDCOOLING_ANALYSISPARAMSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MoldCooling_AnalysisParamsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_moldcooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MoldCooling
    {
        class AnalysisParamsBuilder;
    }
    class Builder;
    class Expression;
    namespace MoldCooling
    {
        class _AnalysisParamsBuilderBuilder;
        class AnalysisParamsBuilderImpl;
        /** Represents a @link MoldCooling::AnalysisParams MoldCooling::AnalysisParams@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::MoldCooling::Manager::CreateAnalysisParamsBuilder  NXOpen::MoldCooling::Manager::CreateAnalysisParamsBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        ConstantTimeStep.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        EndTime.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        FluidMeshResolution </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MeshResolution </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoldTemperature.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        NumTimeSteps </term> <description> 
         
        10 </description> </item> 

        <item><term> 
         
        PartTemperature.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        PhaseChangeActivation </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SimulationType </term> <description> 
         
        SteadyState </description> </item> 

        <item><term> 
         
        TargetTemperature.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        TimeStepOption </term> <description> 
         
        Automatic </description> </item> 

        <item><term> 
         
        TransientTargetType </term> <description> 
         
        EndTime </description> </item> 

        </list> 

         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_MOLDCOOLINGEXPORT  AnalysisParamsBuilder : public NXOpen::Builder
        {
            /** The type of thermal simulation */
            public: enum SimulationTypeEnum
            {
                SimulationTypeEnumSteadyState/** Steady State Simulation */,
                SimulationTypeEnumTransient/** Transient Simulation */
            };

            /** The target type of the transient simulation */
            public: enum TransientTargetEnum
            {
                TransientTargetEnumEndTime/** Stop after end-type is reached */,
                TransientTargetEnumTemperature/** Stop when target temperature is reached */
            };

            /** The time step option */
            public: enum TimeStepOptionEnum
            {
                TimeStepOptionEnumAutomatic/** Use the default automatic time step option */,
                TimeStepOptionEnumNumSteps/** Specify a number of time steps */,
                TimeStepOptionEnumConstant/** Specify a constant time step value */
            };

            private: AnalysisParamsBuilderImpl * m_analysisparamsbuilder_impl;
            private: friend class  _AnalysisParamsBuilderBuilder;
            protected: AnalysisParamsBuilder();
            public: ~AnalysisParamsBuilder();
            /**Returns  the type of simulation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MoldCooling::AnalysisParamsBuilder::SimulationTypeEnum SimulationType
            (
            );
            /**Sets  the type of simulation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetSimulationType
            (
                NXOpen::MoldCooling::AnalysisParamsBuilder::SimulationTypeEnum simulationType /** simulationtype */ 
            );
            /**Returns  the target type of the transient simulation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MoldCooling::AnalysisParamsBuilder::TransientTargetEnum TransientTargetType
            (
            );
            /**Sets  the target type of the transient simulation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetTransientTargetType
            (
                NXOpen::MoldCooling::AnalysisParamsBuilder::TransientTargetEnum transientTargetType /** transienttargettype */ 
            );
            /**Returns  the end time for a transient simulation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EndTime
            (
            );
            /**Returns  the temperature target for a transient simulation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TargetTemperature
            (
            );
            /**Returns  the maximum end time for a temperature target transient simulation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxEndTime
            (
            );
            /**Returns  the time step option 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MoldCooling::AnalysisParamsBuilder::TimeStepOptionEnum TimeStepOption
            (
            );
            /**Sets  the time step option 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetTimeStepOption
            (
                NXOpen::MoldCooling::AnalysisParamsBuilder::TimeStepOptionEnum timeStepOption /** timestepoption */ 
            );
            /**Returns  the number of time steps 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int NumTimeSteps
            (
            );
            /**Sets  the number of time steps 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetNumTimeSteps
            (
                int numTimeSteps /** numtimesteps */ 
            );
            /**Returns  the constant time step value 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ConstantTimeStep
            (
            );
            /**Returns  the phase change activation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool PhaseChangeActivation
            (
            );
            /**Sets  the phase change activation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetPhaseChangeActivation
            (
                bool phaseChangeActivation /** phasechangeactivation */ 
            );
            /**Returns  the initial mold temperature 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MoldTemperature
            (
            );
            /**Returns  the initial part temperature 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PartTemperature
            (
            );
            /**Returns  the mesh size factor 
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link JA_MOLD_COOLING_ANALYSIS_PARAMS_BUILDER_get_MeshResolution JA_MOLD_COOLING_ANALYSIS_PARAMS_BUILDER_get_MeshResolution@endlink  instead. <br>  

             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use JA_MOLD_COOLING_ANALYSIS_PARAMS_BUILDER_get_MeshResolution instead.") int MeshSizeFactor
            (
            );
            /**Sets  the mesh size factor 
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link JA_MOLD_COOLING_ANALYSIS_PARAMS_BUILDER_set_MeshResolution JA_MOLD_COOLING_ANALYSIS_PARAMS_BUILDER_set_MeshResolution@endlink  instead. <br>  

             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use JA_MOLD_COOLING_ANALYSIS_PARAMS_BUILDER_set_MeshResolution instead.") void SetMeshSizeFactor
            (
                int meshSizeFactor /** meshsizefactor */ 
            );
            /**Returns  the mesh resolution 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int MeshResolution
            (
            );
            /**Sets  the mesh resolution 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetMeshResolution
            (
                int meshResolution /** meshresolution */ 
            );
            /**Returns  the fluid mesh resolution 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int FluidMeshResolution
            (
            );
            /**Sets  the fluid mesh resolution 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetFluidMeshResolution
            (
                int fluidMeshResolution /** fluidmeshresolution */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
