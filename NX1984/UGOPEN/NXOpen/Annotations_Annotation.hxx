#ifndef NXOpen_ANNOTATIONS_ANNOTATION_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ANNOTATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_Annotation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_Associativity.hxx>
#include <NXOpen/Annotations_LetteringPreferences.hxx>
#include <NXOpen/Annotations_LineAndArrowPreferences.hxx>
#include <NXOpen/Annotations_SymbolPreferences.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class Annotation;
    }
    namespace Annotations
    {
        class Associativity;
    }
    namespace Annotations
    {
        class LetteringPreferences;
    }
    namespace Annotations
    {
        class LineAndArrowPreferences;
    }
    namespace Annotations
    {
        class SymbolPreferences;
    }
    class DisplayableObject;
    class Point;
    class View;
    class Xform;
    namespace Annotations
    {
        class _AnnotationBuilder;
        class AnnotationImpl;
        /** Represents an annotation / PMI (Product and Manufacturing Information) display instance 
                object.
                 <br> 
                Creation of drafting annotation objects is controlled by drafting license.  <br> 
                 <br> 
                Creation of PMI display instance objects is controlled by geometric_tol license.  <br> 
                 <br> 
                In all edit methods, the changes are not applied to the system until
                an update is performed.  An update can be performed by calling @link Update::DoUpdate Update::DoUpdate@endlink (). <br>         
             <br> This is an abstract class.  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  Annotation : public NXOpen::DisplayableObject
        {
             /** Describes the geometry that an annotation's origin
                    is associated with */
            public:
            struct AssociativeOriginData
            {
                public: /** Type of associativity */NXOpen::Annotations::AssociativeOriginType OriginType;
                public: /** View of associativity for the annotation. 
                                                    Used for @link NXOpen::Annotations::AssociativeOriginTypeRelativeToView NXOpen::Annotations::AssociativeOriginTypeRelativeToView@endlink  */NXOpen::View * View;
                public: /** The member view in which the absolute model
                                                    point lies.  This is used for mapping onto
                                                    the drawing. 
                                                    Used for @link NXOpen::Annotations::AssociativeOriginTypeRelativeToGeometry NXOpen::Annotations::AssociativeOriginTypeRelativeToGeometry@endlink */NXOpen::View * ViewOfGeometry;
                public: /** Absolute point in absolute space the annotation
                                                    is associated with. */NXOpen::Point * PointOnGeometry;
                public: /** Annotation to align with. 
                                                    Used for @link NXOpen::Annotations::AssociativeOriginTypeVerticallyAligned NXOpen::Annotations::AssociativeOriginTypeVerticallyAligned@endlink */NXOpen::Annotations::Annotation * VertAnnotation;
                public: /** Alignment position on
                                                                            vert_annotation to
                                                                            align to. 
                                                                            Used for @link NXOpen::Annotations::AssociativeOriginTypeVerticallyAligned NXOpen::Annotations::AssociativeOriginTypeVerticallyAligned@endlink */NXOpen::Annotations::AlignmentPosition VertAlignmentPosition;
                public: /** Annotation to align with. 
                                                                            Used for @link NXOpen::Annotations::AssociativeOriginTypeHorizontallyAligned NXOpen::Annotations::AssociativeOriginTypeHorizontallyAligned@endlink */NXOpen::Annotations::Annotation * HorizAnnotation;
                public: /** Alignment position on
                                                                            horiz_annotation to
                                                                            align to. 
                                                                            Used for @link NXOpen::Annotations::AssociativeOriginTypeHorizontallyAligned NXOpen::Annotations::AssociativeOriginTypeHorizontallyAligned@endlink */NXOpen::Annotations::AlignmentPosition HorizAlignmentPosition;
                public: /** Alignment annotation.
                                                    Used for @link NXOpen::Annotations::AssociativeOriginTypeAlignedWithArrows NXOpen::Annotations::AssociativeOriginTypeAlignedWithArrows@endlink .*/NXOpen::Annotations::Annotation * AlignedAnnotation;
                public: /** 1 for dimension line 1, 2 for dimension line 2.
                                                    Used for @link NXOpen::Annotations::AssociativeOriginTypeAlignedWithArrows NXOpen::Annotations::AssociativeOriginTypeAlignedWithArrows@endlink */int DimensionLine;
                public: /** The member view in  which the absolute model
                                                    point lies.  This is used for mapping onto
                                                    the drawing.  May be NULL if annotation is
                                                    on the model or the point is on the drawing.
                                                    Used for @link NXOpen::Annotations::AssociativeOriginTypeAtAPoint NXOpen::Annotations::AssociativeOriginTypeAtAPoint@endlink */NXOpen::View * AssociatedView;
                public: /** Origin location of annotation.
                                                    Used for @link NXOpen::Annotations::AssociativeOriginTypeAtAPoint NXOpen::Annotations::AssociativeOriginTypeAtAPoint@endlink */NXOpen::Point * AssociatedPoint;
                public: /** Annotation to align to.
                                                                                @link NXOpen::Annotations::AssociativeOriginTypeOffsetFromText NXOpen::Annotations::AssociativeOriginTypeOffsetFromText@endlink */NXOpen::Annotations::Annotation * OffsetAnnotation;
                public: /** Alignment position
                                                                                on annotation to
                                                                                align with.
                                                                                @link NXOpen::Annotations::AssociativeOriginTypeOffsetFromText NXOpen::Annotations::AssociativeOriginTypeOffsetFromText@endlink */NXOpen::Annotations::AlignmentPosition OffsetAlignmentPosition;
                public: /** X Offset factor from
                                                                                associated point.
                                                                                @link NXOpen::Annotations::AssociativeOriginTypeOffsetFromText NXOpen::Annotations::AssociativeOriginTypeOffsetFromText@endlink */double XOffsetFactor;
                public: /** Y Offset factor from
                                                                                associated point.
                                                                                @link NXOpen::Annotations::AssociativeOriginTypeOffsetFromText NXOpen::Annotations::AssociativeOriginTypeOffsetFromText@endlink */double YOffsetFactor;
                public: /** stack alignment position */ NXOpen::Annotations::StackAlignmentPosition StackAlignmentPosition;
                public: AssociativeOriginData() :
                    OriginType((NXOpen::Annotations::AssociativeOriginType)0),
                    View(),
                    ViewOfGeometry(),
                    PointOnGeometry(),
                    VertAnnotation(),
                    VertAlignmentPosition((NXOpen::Annotations::AlignmentPosition)0),
                    HorizAnnotation(),
                    HorizAlignmentPosition((NXOpen::Annotations::AlignmentPosition)0),
                    AlignedAnnotation(),
                    DimensionLine(),
                    AssociatedView(),
                    AssociatedPoint(),
                    OffsetAnnotation(),
                    OffsetAlignmentPosition((NXOpen::Annotations::AlignmentPosition)0),
                    XOffsetFactor(),
                    YOffsetFactor(),
                    StackAlignmentPosition((NXOpen::Annotations::StackAlignmentPosition)0)
                {
                }
                /** Constructor for the AssociativeOriginData struct. */ 
                public: AssociativeOriginData(NXOpen::Annotations::AssociativeOriginType originTypeInitial /** Type of associativity */, 
                        NXOpen::View * viewInitial /** View of associativity for the annotation. 
                                                            Used for @link NXOpen::Annotations::AssociativeOriginTypeRelativeToView NXOpen::Annotations::AssociativeOriginTypeRelativeToView@endlink  */, 
                        NXOpen::View * viewOfGeometryInitial /** The member view in which the absolute model
                                                            point lies.  This is used for mapping onto
                                                            the drawing. 
                                                            Used for @link NXOpen::Annotations::AssociativeOriginTypeRelativeToGeometry NXOpen::Annotations::AssociativeOriginTypeRelativeToGeometry@endlink */, 
                        NXOpen::Point * pointOnGeometryInitial /** Absolute point in absolute space the annotation
                                                            is associated with. */, 
                        NXOpen::Annotations::Annotation * vertAnnotationInitial /** Annotation to align with. 
                                                            Used for @link NXOpen::Annotations::AssociativeOriginTypeVerticallyAligned NXOpen::Annotations::AssociativeOriginTypeVerticallyAligned@endlink */, 
                        NXOpen::Annotations::AlignmentPosition vertAlignmentPositionInitial /** Alignment position on
                                                                                    vert_annotation to
                                                                                    align to. 
                                                                                    Used for @link NXOpen::Annotations::AssociativeOriginTypeVerticallyAligned NXOpen::Annotations::AssociativeOriginTypeVerticallyAligned@endlink */, 
                        NXOpen::Annotations::Annotation * horizAnnotationInitial /** Annotation to align with. 
                                                                                    Used for @link NXOpen::Annotations::AssociativeOriginTypeHorizontallyAligned NXOpen::Annotations::AssociativeOriginTypeHorizontallyAligned@endlink */, 
                        NXOpen::Annotations::AlignmentPosition horizAlignmentPositionInitial /** Alignment position on
                                                                                    horiz_annotation to
                                                                                    align to. 
                                                                                    Used for @link NXOpen::Annotations::AssociativeOriginTypeHorizontallyAligned NXOpen::Annotations::AssociativeOriginTypeHorizontallyAligned@endlink */, 
                        NXOpen::Annotations::Annotation * alignedAnnotationInitial /** Alignment annotation.
                                                            Used for @link NXOpen::Annotations::AssociativeOriginTypeAlignedWithArrows NXOpen::Annotations::AssociativeOriginTypeAlignedWithArrows@endlink .*/, 
                        int dimensionLineInitial /** 1 for dimension line 1, 2 for dimension line 2.
                                                            Used for @link NXOpen::Annotations::AssociativeOriginTypeAlignedWithArrows NXOpen::Annotations::AssociativeOriginTypeAlignedWithArrows@endlink */, 
                        NXOpen::View * associatedViewInitial /** The member view in  which the absolute model
                                                            point lies.  This is used for mapping onto
                                                            the drawing.  May be NULL if annotation is
                                                            on the model or the point is on the drawing.
                                                            Used for @link NXOpen::Annotations::AssociativeOriginTypeAtAPoint NXOpen::Annotations::AssociativeOriginTypeAtAPoint@endlink */, 
                        NXOpen::Point * associatedPointInitial /** Origin location of annotation.
                                                            Used for @link NXOpen::Annotations::AssociativeOriginTypeAtAPoint NXOpen::Annotations::AssociativeOriginTypeAtAPoint@endlink */, 
                        NXOpen::Annotations::Annotation * offsetAnnotationInitial /** Annotation to align to.
                                                                                        @link NXOpen::Annotations::AssociativeOriginTypeOffsetFromText NXOpen::Annotations::AssociativeOriginTypeOffsetFromText@endlink */, 
                        NXOpen::Annotations::AlignmentPosition offsetAlignmentPositionInitial /** Alignment position
                                                                                        on annotation to
                                                                                        align with.
                                                                                        @link NXOpen::Annotations::AssociativeOriginTypeOffsetFromText NXOpen::Annotations::AssociativeOriginTypeOffsetFromText@endlink */, 
                        double xOffsetFactorInitial /** X Offset factor from
                                                                                        associated point.
                                                                                        @link NXOpen::Annotations::AssociativeOriginTypeOffsetFromText NXOpen::Annotations::AssociativeOriginTypeOffsetFromText@endlink */, 
                        double yOffsetFactorInitial /** Y Offset factor from
                                                                                        associated point.
                                                                                        @link NXOpen::Annotations::AssociativeOriginTypeOffsetFromText NXOpen::Annotations::AssociativeOriginTypeOffsetFromText@endlink */, 
                        NXOpen::Annotations::StackAlignmentPosition stackAlignmentPositionInitial /** stack alignment position */ ) :
                    OriginType(originTypeInitial),
                    View(viewInitial),
                    ViewOfGeometry(viewOfGeometryInitial),
                    PointOnGeometry(pointOnGeometryInitial),
                    VertAnnotation(vertAnnotationInitial),
                    VertAlignmentPosition(vertAlignmentPositionInitial),
                    HorizAnnotation(horizAnnotationInitial),
                    HorizAlignmentPosition(horizAlignmentPositionInitial),
                    AlignedAnnotation(alignedAnnotationInitial),
                    DimensionLine(dimensionLineInitial),
                    AssociatedView(associatedViewInitial),
                    AssociatedPoint(associatedPointInitial),
                    OffsetAnnotation(offsetAnnotationInitial),
                    OffsetAlignmentPosition(offsetAlignmentPositionInitial),
                    XOffsetFactor(xOffsetFactorInitial),
                    YOffsetFactor(yOffsetFactorInitial),
                    StackAlignmentPosition(stackAlignmentPositionInitial)
                {
                }
            };

            private: AnnotationImpl * m_annotation_impl;
            private: friend class  _AnnotationBuilder;
            protected: Annotation();
            public: ~Annotation();
            /**Sets  the origin (location) of the annotation.

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAnnotationOrigin
            (
                const NXOpen::Point3d & origin /** the new location */
            );
            /**Returns  the origin (location) of the annotation.

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d AnnotationOrigin
            (
            );
            /**Returns  a flag indicating whether the origin is associative 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool HasAssociativeOrigin
            (
            );
            /** Gets data that specifies the origin's associativity  @return  associativity data 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::Annotation::AssociativeOriginData GetAssociativeOrigin
            (
                NXOpen::Point3d* origin /** coordinates of the origin */
            );
            /** Associates the annotation's origin to the specified geometry.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAssociativeOrigin
            (
                const NXOpen::Annotations::Annotation::AssociativeOriginData & assocOrigin /** associativity data */,
                const NXOpen::Point3d & origin /** coordinates of the origin */
            );
            /** Returns the lettering preferences for the annotation  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LetteringPreferences * GetLetteringPreferences
            (
            );
            /** Sets the lettering preferences for the annotation.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLetteringPreferences
            (
                NXOpen::Annotations::LetteringPreferences * letteringPrefs /** lettering prefs */ 
            );
            /** Returns the line and arrow preferences for the annotation  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineAndArrowPreferences * GetLineAndArrowPreferences
            (
            );
            /** Sets the line and arrow preferences for the annotation.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLineAndArrowPreferences
            (
                NXOpen::Annotations::LineAndArrowPreferences * lineArrowPrefs /** line arrow prefs */ 
            );
            /** Returns the symbol preferences for the annotation  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SymbolPreferences * GetSymbolPreferences
            (
            );
            /** Sets the symbol preferences for the annotation.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSymbolPreferences
            (
                NXOpen::Annotations::SymbolPreferences * symbolPrefs /** symbol prefs */ 
            );
            /**Sets  the leader orientation for the annotation.

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLeaderOrientation
            (
                NXOpen::Annotations::LeaderOrientation leaderOrientation /** leader orientation */ 
            );
            /**Returns  the leader orientation for the annotation.

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LeaderOrientation LeaderOrientation
            (
            );
            /**Returns  a flag indicating whether the annotation is retained 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsRetained
            (
            );
            /**Returns  the annotation plane.

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Xform * AnnotationPlane
            (
            );
            /**Sets  the annotation plane.

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetAnnotationPlane
            (
                NXOpen::Xform * annotationPlane /** annotation plane */ 
            );
            /**Returns  the number of associativities for the annotation. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfAssociativities
            (
            );
            /** Returns the associativity at specified index. The index starts from 1, and is less than or equal 
                        to the return value from @link NXOpen::Annotations::Annotation::NumberOfAssociativities NXOpen::Annotations::Annotation::NumberOfAssociativities@endlink . @return  Associativity object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::Associativity * GetAssociativity
            (
                int associativityIndex /** Associativity index */
            );
            /** Sets the associativity at specified index.The index starts from 1, and is less than or equal 
                        to the return value from @link NXOpen::Annotations::Annotation::NumberOfAssociativities NXOpen::Annotations::Annotation::NumberOfAssociativities@endlink .
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAssociativity
            (
                int associativityIndex /** Associativity index */,
                NXOpen::Annotations::Associativity * associativity /** Associativity object */
            );
            /** Returns the inferred annotation plane  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Xform * GetInferredAnnotationPlane
            (
                NXOpen::Annotations::PmiDefaultPlane jaDefaultPlane /** ja default plane */ 
            );
            /** Returns the views that the PMI display instance object is displayed in
                        NOTE: This method is only valid for PMI display instance objects.
                              This method will return an empty view list for non-PMI display instance objects.
                              This method will return an empty view list if the PMI object is displayed in all views.  @return  List of views that PMI display instance object is displayed in 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::View *> GetViews
            (
            );
            /** Sets the views that the PMI display instance object is displayed in.
                        NOTE: This method is only valid for PMI display instance objects.
                              This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetViews
            (
                const std::vector<NXOpen::View *> & modelViews /** List of new views to display PMI display instance object in */
            );
            /** Inserts the annotation into a stack.  Annotations that already reside within a stack cannot be inserted
                        into another stack (or the same stack) without first being removed from the stack they are in (attempting
                        to do so will result in no changes to the annotation). The "position" parameter controls where in the stack
                        the annotation will be inserted relative to the "stack" parameter. It is important to note that stacks have
                        a primary column of members. Each member in the primary column can have up to three children (left, right,
                        and below). If you stack an annotation above an existing stack member, the existing member becomes a child
                        of the newly added member. The top most element in the primary column is the "owner" of the stack and all
                        other annotations in the stack move relative to it.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void InsertIntoStack
            (
                NXOpen::Annotations::Annotation * stack /** Annotation in the stack */,
                NXOpen::Annotations::StackAlignmentPosition position /** Alignment position */
            );
            /**Returns  the PMI parallel to screen setting
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool ParallelToScreen
            (
            );
            /**Sets  the PMI parallel to screen setting
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetParallelToScreen
            (
                bool parallelToScreen /** Parallel to Screen Setting */
            );
            /** Removes the annotation from a stack.  Annotations that do not reside within a stack are ignored. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void RemoveFromStack
            (
            );
            /**Returns  the flag indicating whether the annotation is suppressed 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool Suppressed
            (
            );
            /**Returns  the flag indicating whether the annotation is out of date 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsOutOfDate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
