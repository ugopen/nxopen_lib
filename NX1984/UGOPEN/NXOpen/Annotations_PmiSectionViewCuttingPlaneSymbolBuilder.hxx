#ifndef NXOpen_ANNOTATIONS_PMISECTIONVIEWCUTTINGPLANESYMBOLBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_PMISECTIONVIEWCUTTINGPLANESYMBOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_PmiSectionViewCuttingPlaneSymbolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class PmiSectionViewCuttingPlaneSymbolBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace Annotations
    {
        class _PmiSectionViewCuttingPlaneSymbolBuilderBuilder;
        class PmiSectionViewCuttingPlaneSymbolBuilderImpl;
        /**
                Represents a NXOpen.Annotations.PmiSectionViewCuttingPlaneSymbolBuilder
            
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  PmiSectionViewCuttingPlaneSymbolBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** The text plane relative to arrow options for cutting plane symbol */
            public: enum TextPlaneRelativeToArrowOptions
            {
                TextPlaneRelativeToArrowOptionsParallel/** parallel */,
                TextPlaneRelativeToArrowOptionsPerpendicular/** perpendicular */
            };

            /** The arrow direction options for cutting plane symbol */
            public: enum ArrowDirectionOptions
            {
                ArrowDirectionOptionsTowardPlane/** toward plane */,
                ArrowDirectionOptionsAwayfromPlane/** away from plane */
            };

            private: PmiSectionViewCuttingPlaneSymbolBuilderImpl * m_pmisectionviewcuttingplanesymbolbuilder_impl;
            private: friend class  _PmiSectionViewCuttingPlaneSymbolBuilderBuilder;
            protected: PmiSectionViewCuttingPlaneSymbolBuilder();
            public: ~PmiSectionViewCuttingPlaneSymbolBuilder();
            /**Returns  the starting letter for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StartingLetter
            (
            );
            /**Sets  the starting letter for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStartingLetter
            (
                const NXString & startingLetter /** startingletter */ 
            );
            /**Sets  the starting letter for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void SetStartingLetter
            (
                const char * startingLetter /** startingletter */ 
            );
            /**Returns  the section prefix for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SectionPrefix
            (
            );
            /**Sets  the section prefix for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSectionPrefix
            (
                const NXString & sectionPrefix /** sectionprefix */ 
            );
            /**Sets  the section prefix for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void SetSectionPrefix
            (
                const char * sectionPrefix /** sectionprefix */ 
            );
            /**Returns  the color for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * Color
            (
            );
            /**Sets  the color for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the shaded plane for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShadedPlane
            (
            );
            /**Sets  the shaded plane for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetShadedPlane
            (
                bool shadedPlane /** shadedplane */ 
            );
            /**Returns  the text plane relative to arrow option for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PmiSectionViewCuttingPlaneSymbolBuilder::TextPlaneRelativeToArrowOptions TextPlaneRelativeToArrow
            (
            );
            /**Sets  the text plane relative to arrow option for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTextPlaneRelativeToArrow
            (
                NXOpen::Annotations::PmiSectionViewCuttingPlaneSymbolBuilder::TextPlaneRelativeToArrowOptions textPlaneRelativeToArrow /** textplanerelativetoarrow */ 
            );
            /**Returns  the arrow direction for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PmiSectionViewCuttingPlaneSymbolBuilder::ArrowDirectionOptions ArrowDirection
            (
            );
            /**Sets  the arrow direction for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetArrowDirection
            (
                NXOpen::Annotations::PmiSectionViewCuttingPlaneSymbolBuilder::ArrowDirectionOptions arrowDirection /** arrowdirection */ 
            );
            /**Returns  the arrow line length for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowLineLength
            (
            );
            /**Sets  the arrow line length for cutting plane symbol 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetArrowLineLength
            (
                double arrowLineLength /** arrowlinelength */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
