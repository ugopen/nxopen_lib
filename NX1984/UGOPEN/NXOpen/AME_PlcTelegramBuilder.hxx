#ifndef NXOpen_AME_PLCTELEGRAMBUILDER_HXX_INCLUDED
#define NXOpen_AME_PLCTELEGRAMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PlcTelegramBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_PlcTypes.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Tooling_SelectReuseLibraryItemBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PlcTelegramBuilder;
    }
    namespace AME
    {
        class PlcMemoryArea;
    }
    class Builder;
    namespace Tooling
    {
        class SelectReuseLibraryItemBuilder;
    }
    namespace AME
    {
        class _PlcTelegramBuilderBuilder;
        class PlcTelegramBuilderImpl;
        /** something  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreatePlcTelegramBuilder  NXOpen::AME::AMEManager::CreatePlcTelegramBuilder @endlink  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PlcTelegramBuilder : public NXOpen::Builder
        {
            private: PlcTelegramBuilderImpl * m_plctelegrambuilder_impl;
            private: friend class  _PlcTelegramBuilderBuilder;
            protected: PlcTelegramBuilder();
            public: ~PlcTelegramBuilder();
            /**Returns  an enum telegram type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TelegramType TelegramType
            (
            );
            /**Sets  an enum telegram type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetTelegramType
            (
                NXOpen::AME::TelegramType telegramType /** telegramtype */ 
            );
            /**Returns  an enum send/receive type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SendReceiveType SendReceiveType
            (
            );
            /**Sets  an enum send/receive type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSendReceiveType
            (
                NXOpen::AME::SendReceiveType sendReceiveType /** sendreceivetype */ 
            );
            /**Returns  a selection of reuse library item 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Tooling::SelectReuseLibraryItemBuilder * ReuseLibraryItem
            (
            );
            /** Selected Telegram 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSelectedTelegram
            (
                NXOpen::AME::PlcMemoryArea * selectedTelegram /** selectedtelegram */ 
            );
            /** Sets Configuration Type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetConfigurationType
            (
                const NXString & configType /** configtype */ 
            );
            /** Sets Configuration Type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetConfigurationType
            (
                const char * configType /** configtype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
