#ifndef NXOpen_WELD_CUSTOMMANAGER_HXX_INCLUDED
#define NXOpen_WELD_CUSTOMMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_CustomManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Weld_ConnectedPart.hxx>
#include <NXOpen/libnxopencpp_weld_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Weld
    {
        class CustomManager;
    }
    class Session;
    namespace Weld
    {
        class EdgePrep;
    }
    namespace Annotations
    {
        class PmiLineWeld;
    }
    class Curve;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class TaggedObject;
    namespace Weld
    {
        class ConnectedPart;
    }
    namespace Weld
    {
        class DatumIconBuilder;
    }
    namespace Weld
    {
        class JointExitBuilder;
    }
    namespace Weld
    {
        class JointItemBuilder;
    }
    namespace Weld
    {
        class JointmarkElement;
    }
    namespace Weld
    {
        class WeldJointBuilder;
    }
    namespace Weld
    {
        class WeldObjectBuilder;
    }
    namespace Weld
    {
        class WeldPointExitBuilder;
    }
    namespace Weld
    {
        class CustomManagerImpl;
        /** Represents weld interface to customize the creation of welding joint features.

           <br>  
           The "welding joint handler" customization callback is called after the feature is created.
           One can then set edge preparation parameters, change the color of the feature output curve,
           add attributes to the feature, or any additional customization.

           The "variable bevel handler" customization callback is used to define the limits where a welding joint
           should be split at. 
         
           <br> 
           <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_WELDEXPORT  CustomManager : public NXOpen::TaggedObjectCollection
        {
            /** Delete option for @link NXOpen::Weld::CustomManager::DeleteDesignFeatures NXOpen::Weld::CustomManager::DeleteDesignFeatures@endlink . */
            public: enum DeleteOption
            {
                DeleteOptionAll/** Delete all design features under design control feature. */,
                DeleteOptionInputOnly/** Delete only the input design feature. Only valid if design feature is input. */
            };

            /** Source option indicating where @link NXOpen::Annotations::PmiLineWeld NXOpen::Annotations::PmiLineWeld@endlink  was created for input to @link NXOpen::Weld::CustomManager::JointPmiCreated NXOpen::Weld::CustomManager::JointPmiCreated@endlink . */
            public: enum PmiSource
            {
                PmiSourcePreview/** PMI created for Edit Joint Parameters preview. */,
                PmiSourceFabricationPmi/** PMI created in Fabrication PMI dialog. */
            };

            public: /** User defined method that is called whenever a welding joint is created or updated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::Weld::JointExitBuilder *> WeldJointHandler;
            public: /** User defined method that returns the angle divisions for a variable bevel. The first value must be 0.0, and the last value 90.0 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback2<void, NXOpen::Weld::WeldJointBuilder *, NXOpen::Curve *> VariableBevelHandler;
            public: /** User defined method that is called whenever a welding joints are created or edited 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::Weld::WeldObjectBuilder *> ModifyFeatureHandler;
            public: /** User defined method that is called whenever a welding features are created through Weld Point command. 
             <br>  Created in NX8.0.2.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::Weld::WeldPointExitBuilder *> PointExitHandler;
            public: /** Method called from the part navigator to define the datum surface and pin icon. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::Weld::DatumIconBuilder *> DatumIconHandler;
            public: /** User defined method that is called whenever a welding joint is created.  Used to set the joint type for pipe welding application. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::Weld::JointItemBuilder *> PipeJointSetType;
            public: /** User defined method that is called whenever a @link NXOpen::Annotations::PmiLineWeld NXOpen::Annotations::PmiLineWeld@endlink  is created. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<void, NXOpen::Weld::CustomManager::PmiSource, std::vector<NXOpen::Annotations::PmiLineWeld *>, NXOpen::Weld::JointExitBuilder *> JointPmiCreated;
            private: CustomManagerImpl * m_custommanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit CustomManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~CustomManager();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Weld::CustomManager::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Weld::EdgePrep *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Weld::CustomManager *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_WELDEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_WELDEXPORT  void next();
                NXOpen::Weld::CustomManager *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Registers a user defined method that is called whenever a welding joint is created or updated  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int AddWeldJointHandler
            (
                const NXOpen::Weld::CustomManager::WeldJointHandler&  handler /** method to register */
            );
            /** Unregisters the welding joint handler 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveWeldJointHandler
            (
                int id /** identifier for method to unregister */
            );
            /** Registers a user defined method to define variable bevel angles. The method will be called from the Weld Joint user Interface.  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int AddVariableBevelHandler
            (
                const NXOpen::Weld::CustomManager::VariableBevelHandler&  handler /** method to register */
            );
            /** Unregisters the variable bevel handler 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveVariableBevelHandler
            (
                int id /** identifier for method to unregister */
            );
            /** Registers a user defined method to be notified when weld features are created or edited.  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: int AddModifyFeatureHandler
            (
                const NXOpen::Weld::CustomManager::ModifyFeatureHandler&  handler /** method to register */
            );
            /** Unregisters the modify feature handler 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void RemoveModifyFeatureHandler
            (
                int id /** identifier for method to unregister */
            );
            /** Registers a user defined method to be notified when weld point features are created.  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX8.0.2.  <br>  
             <br> License requirements : None */
            public: int AddPointExitHandler
            (
                const NXOpen::Weld::CustomManager::PointExitHandler&  handler /** method to register */
            );
            /** Unregisters the point feature handler 
             <br>  Created in NX8.0.2.  <br>  
             <br> License requirements : None */
            public: void RemovePointExitHandler
            (
                int id /** identifier for method to unregister */
            );
            /** Registers a user defined method to be notified when the part navigator is updating the surface or pin datum icon.  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int AddDatumIconHandler
            (
                const NXOpen::Weld::CustomManager::DatumIconHandler&  handler /** method to register */
            );
            /** Unregisters the datum common icon handler 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveDatumIconHandler
            (
                int id /** identifier for method to unregister */
            );
            /** Registers a user defined method that is called whenever a welding joint is created  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int AddPipeJointSetType
            (
                const NXOpen::Weld::CustomManager::PipeJointSetType&  handler /** method to register */
            );
            /** Unregisters the pipe joint set type handler 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void RemovePipeJointSetType
            (
                int id /** identifier for method to unregister */
            );
            /** Registers a user defined method that is called whenever a @link NXOpen::Annotations::PmiLineWeld NXOpen::Annotations::PmiLineWeld@endlink  is created.  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int AddJointPmiCreated
            (
                const NXOpen::Weld::CustomManager::JointPmiCreated&  handler /** method to register */
            );
            /** Unregisters the user defined method that is called whenever a @link NXOpen::Annotations::PmiLineWeld NXOpen::Annotations::PmiLineWeld@endlink  is created 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveJointPmiCreated
            (
                int id /** identifier for method to unregister */
            );
            /** Method to change display mode of all Weld.PointMarkPoint feature that are fully loaded in an assembly 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void ShowSolids
            (
                bool showSolids /** true to show solids, false to show points. */
            );
            /** Method to search all fully loaded parts for welding objects in an assembly or part file. An array of solids, curves and points can be output 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void LocateWelds
            (
                bool searchEntireAssembly /** searchentireassembly */ ,
                bool wantSolids /** wantsolids */ ,
                bool wantCurves /** wantcurves */ ,
                bool wantPoints /** wantpoints */ ,
                std::vector<NXOpen::NXObject *> & foundObjectsArray /** Array of objects passing the search criteria specified. */
            );
            /** Method to search all fully loaded parts for welding objects in an assembly or part file. An array of solids, curves and points can be output 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void LocateWelds
            (
                bool searchEntireAssembly /** searchentireassembly */ ,
                bool excludeInvisibleComponents /** excludeinvisiblecomponents */ ,
                bool wantSolids /** wantsolids */ ,
                bool wantCurves /** wantcurves */ ,
                bool wantPoints /** wantpoints */ ,
                std::vector<NXOpen::NXObject *> & foundObjectsArray /** Array of objects passing the search criteria specified. */
            );
            /** Method to search all fully loaded parts for welding objects in an assembly or part file. An array of solids, curves and points can be output. Structure welds can also be included in the search. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void LocateWelds
            (
                bool searchEntireAssembly /** searchentireassembly */ ,
                bool excludeInvisibleComponents /** excludeinvisiblecomponents */ ,
                bool wantSolids /** wantsolids */ ,
                bool wantCurves /** wantcurves */ ,
                bool wantPoints /** wantpoints */ ,
                bool wantStructureWelds /** wantstructurewelds */ ,
                std::vector<NXOpen::NXObject *> & foundObjectsArray /** Array of objects passing the search criteria specified. */
            );
            /** Method to convert all legacy weld points to the @link NXOpen::Weld::PointMarkPoint NXOpen::Weld::PointMarkPoint@endlink  class 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void ConvertLegacy
            (
            );
            /** Method to convert selected legacy weld point feature sets to the @link NXOpen::Weld::PointMarkPoint NXOpen::Weld::PointMarkPoint@endlink  class 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void ConvertLegacy
            (
                const std::vector<NXOpen::Features::Feature *> & fsetFeatures /** The pre-NX10 weld feature sets to convert*/
            );
            /** Method to convert weld point feature sets to the @link NXOpen::Weld::PointMarkPoint NXOpen::Weld::PointMarkPoint@endlink  class 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void ConvertLegacy
            (
                const std::vector<NXOpen::Features::Feature *> & fsetFeatures /** The pre-NX10 weld feature sets to convert*/,
                bool createSingleFeatures /** true to create single features with no master feature, false to create a master feature. */
            );
            /** Method to creates Feature Groups to collect individual weld point features that have the same connected part attributes.
               <br> 
               Calling with numWeldFeatures equal to zero will cause all @link NXOpen::Weld::JointmarkElement NXOpen::Weld::JointmarkElement@endlink  in the work part to be grouped.
               Connected parts A-B-C and C-B-A will be in the same group.
               <br>   
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void CreateFeatureGroupsForCommonConnectedParts
            (
                const std::vector<NXOpen::Weld::JointmarkElement *> & weldFeatures /** Individual features (those without a master feature) to group .*/
            );
            /**
              Find the connected part information for the weld feature, curve, point or body.
              @link NXOpen::Weld::CustomManager::LocateWelds NXOpen::Weld::CustomManager::LocateWelds@endlink  can be used to retrieve weld data from a part.
               <br> 
              The data is stored in @link NXOpen::Weld::ConnectedPart NXOpen::Weld::ConnectedPart@endlink  containing the appropriate
              connected part information. If the weld input is an occurrence then a body or part occurences
              will be returned in the output structures for reading the attributes on the connected parts.
               <br>   @return  Connected parts information. NULL if none are found. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::ConnectedPart * AskConnectedParts
            (
                NXOpen::NXObject * weldTag /** Weld feature, curve, point or solid body. */
            );
            /** Method to perform the Weld Impace Analysis command. This will fully load connected parts of the selected objects and generate navigator alert messages if input faces,  or feature specific parameters have changed. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void ImpactAnalysisCheck
            (
                const std::vector<NXOpen::NXObject *> & selectedObjects /** Array of objects to perform an Impact Analysis for. */
            );
            /** Method to approve all alerts generated by the Weld Assistant Impact Analysis command. New alert messages are based on the approved objects. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void ImpactAnalysisConfirm
            (
                const std::vector<NXOpen::NXObject *> & selectedObjects /** Array of objects to approve Impact Analysis alerts for. */
            );
            /** Method to perform check if a features connected parts are missing. This will generate navigator alert messages if connected parts are missing. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void ImpactAnalysisCheckConnectedParts
            (
                const std::vector<NXOpen::NXObject *> & selectedObjects /** Array of objects to check connected parts for. */
            );
            /** Method to convert @link NXOpen::Weld::Transform NXOpen::Weld::Transform@endlink  to their parent type. For example, if a @link NXOpen::Weld::WeldBead NXOpen::Weld::WeldBead@endlink  is
                  the parent, this function will convert the @link NXOpen::Weld::Transform NXOpen::Weld::Transform@endlink  to a @link NXOpen::Weld::WeldBead NXOpen::Weld::WeldBead@endlink  in the location of the  
                  the @link NXOpen::Weld::Transform NXOpen::Weld::Transform@endlink . 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void ConvertTransformWeld
            (
                const std::vector<NXOpen::Features::Feature *> & selectedObjects /** Array of features to convert. */
            );
            /** Delete design features (DF) under a design control element (DCE). Function takes either a DCE or DF as input.
                  If a DCE is passed in, all DFs under the DCE will be deleted. If a DF is passed in, the deletion will be done according to the 
                  setting of @link NXOpen::Weld::CustomManager::DeleteOption NXOpen::Weld::CustomManager::DeleteOption@endlink  
              
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void DeleteDesignFeatures
            (
                NXOpen::Weld::CustomManager::DeleteOption deleteOption /** Option to use if Design Feature is passed in as designObject. */,
                NXOpen::TaggedObject * designObject /** Design Control Element or Design Feature. */
            );
            /** Method to determine if a @link NXOpen::Weld::JointmarkElement NXOpen::Weld::JointmarkElement@endlink  feature has source faces in the weld part.  @return  Indicates if source faces are in the weld part. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: std::vector<bool> HasSourceFacesInWeldPart
            (
                NXOpen::Features::Feature * weldFeature /** The feature to check */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
