#ifndef NXOpen_CAE_PENETRATIONCHECK_TRANSLATENODESBUILDER_HXX_INCLUDED
#define NXOpen_CAE_PENETRATIONCHECK_TRANSLATENODESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PenetrationCheck_TranslateNodesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace PenetrationCheck
        {
            class TranslateNodesBuilder;
        }
    }
    class Builder;
    namespace CAE
    {
        class SelectFENodeList;
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    class Point;
    namespace CAE
    {
        namespace PenetrationCheck
        {
            class _TranslateNodesBuilderBuilder;
            class TranslateNodesBuilderImpl;
            /**
                    Represents a @link NXOpen::CAE::PenetrationCheck::TranslateNodesBuilder NXOpen::CAE::PenetrationCheck::TranslateNodesBuilder@endlink 
                     <br> To create a new instance of this class, use @link NXOpen::CAE::CaePart::CreatePenetrationCheckTranslateNodesBuilder  NXOpen::CAE::CaePart::CreatePenetrationCheckTranslateNodesBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            Distance.Value </term> <description> 
             
            1 (millimeters part), 1 (inches part) </description> </item> 

            <item><term> 
             
            Method </term> <description> 
             
            AlongNodeNormals </description> </item> 

            <item><term> 
             
            MoveAdjacentNodes </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            NumberOfLayers.Value </term> <description> 
             
            3 </description> </item> 

            </list> 

             <br>  Created in NX1926.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  TranslateNodesBuilder : public NXOpen::Builder
            {
                /** the translate method options*/
                public: enum MethodOptions
                {
                    MethodOptionsAlongNodeNormals/** along node normals */ ,
                    MethodOptionsOppositeofNodeNormals/** oppositeof node normals */ ,
                    MethodOptionsAlongDirection/** along direction */ ,
                    MethodOptionsWithOrientation/** with orientation */ ,
                    MethodOptionsPointToPoint/** point to point */ ,
                    MethodOptionsAlignVectors/** align vectors */ ,
                    MethodOptionsScaleModel/** scale model */ 
                };

                private: TranslateNodesBuilderImpl * m_translatenodesbuilder_impl;
                private: friend class  _TranslateNodesBuilderBuilder;
                protected: TranslateNodesBuilder();
                public: ~TranslateNodesBuilder();
                /**Returns  the select nodes 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::SelectFENodeList * SelectNodes
                (
                );
                /**Returns  the method 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::PenetrationCheck::TranslateNodesBuilder::MethodOptions Method
                (
                );
                /**Sets  the method 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetMethod
                (
                    NXOpen::CAE::PenetrationCheck::TranslateNodesBuilder::MethodOptions method /** method */ 
                );
                /**Returns  the direction vector 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Direction * DirectionVector
                (
                );
                /**Sets  the direction vector 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetDirectionVector
                (
                    NXOpen::Direction * directionVector /** directionvector */ 
                );
                /**Returns  the distance 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Distance
                (
                );
                /**Returns  the move adjacent nodes 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool MoveAdjacentNodes
                (
                );
                /**Sets  the move adjacent nodes 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetMoveAdjacentNodes
                (
                    bool moveAdjacentNodes /** moveadjacentnodes */ 
                );
                /**Returns  the number of layers 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * NumberOfLayers
                (
                );
                /**Returns  the csys 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CoordinateSystem * Csys
                (
                );
                /**Sets  the csys 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetCsys
                (
                    NXOpen::CoordinateSystem * csys /** csys */ 
                );
                /**Returns  the x distance 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * XDistance
                (
                );
                /**Returns  the y distance 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * YDistance
                (
                );
                /**Returns  the z distance 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ZDistance
                (
                );
                /**Returns  the t angle 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * TAngle
                (
                );
                /**Returns  the p angle 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * PAngle
                (
                );
                /**Returns  the source point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * PointSource
                (
                );
                /**Sets  the source point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetPointSource
                (
                    NXOpen::Point * sourcePoint /** sourcepoint */ 
                );
                /**Returns  the target point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * PointTarget
                (
                );
                /**Sets  the target point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetPointTarget
                (
                    NXOpen::Point * targetPoint /** targetpoint */ 
                );
                /**Returns  the source vector 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Direction * VectorSource
                (
                );
                /**Sets  the source vector 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetVectorSource
                (
                    NXOpen::Direction * vector /** vector */ 
                );
                /**Returns  the target vector 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Direction * VectorTarget
                (
                );
                /**Sets  the target vector 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetVectorTarget
                (
                    NXOpen::Direction * vector /** vector */ 
                );
                /**Returns  the x scale factor 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double XScaleFactor
                (
                );
                /**Sets  the x scale factor 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetXScaleFactor
                (
                    double scaleFactor /** scalefactor */ 
                );
                /**Returns  the y scale factor 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double YScaleFactor
                (
                );
                /**Sets  the y scale factor 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetYScaleFactor
                (
                    double scaleFactor /** scalefactor */ 
                );
                /**Returns  the z scale factor 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double ZScaleFactor
                (
                );
                /**Sets  the z scale factor 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetZScaleFactor
                (
                    double scaleFactor /** scalefactor */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
