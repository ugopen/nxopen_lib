#ifndef NXOpen_BLOCKSTYLER_SELECTFACETREGION_HXX_INCLUDED
#define NXOpen_BLOCKSTYLER_SELECTFACETREGION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BlockStyler_SelectFacetRegion.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace BlockStyler
    {
        class SelectFacetRegion;
    }
    namespace BlockStyler
    {
        class UIBlock;
    }
    class FacetCollector;
    class TaggedObject;
    namespace BlockStyler
    {
        class _SelectFacetRegionBuilder;
        class SelectFacetRegionImpl;
        /** Represents a Select Region Selection block
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  SelectFacetRegion : public NXOpen::BlockStyler::UIBlock
        {
            private: SelectFacetRegionImpl * m_selectfacetregion_impl;
            private: friend class  _SelectFacetRegionBuilder;
            protected: SelectFacetRegion();
            public: ~SelectFacetRegion();
            /**Returns  the AutomaticProgression
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticProgression
            (
            );
            /**Sets  the AutomaticProgression
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAutomaticProgression
            (
                bool automaticProgression /** automaticprogression */ 
            );
            /**Returns  the BalloonTooltipImage
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BalloonTooltipImage
            (
            );
            /**Sets  the BalloonTooltipImage
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipImage
            (
                const NXString & imageString /** image string */ 
            );
            /**Sets  the BalloonTooltipImage
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetBalloonTooltipImage
            (
                const char * imageString /** image string */ 
            );
            /**Returns  the BalloonTooltipLayout as string
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BalloonTooltipLayoutAsString
            (
            );
            /**Sets  the BalloonTooltipLayout as string
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipLayoutAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the BalloonTooltipLayout as string
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetBalloonTooltipLayoutAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the BalloonTooltipLayout members  @return Value to get from the property. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBalloonTooltipLayoutMembers
            (
            );
            /**Returns  the BalloonTooltipText
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BalloonTooltipText
            (
            );
            /**Sets  the BalloonTooltipText
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipText
            (
                const NXString & balloonTooltipText /** balloon tooltip text */ 
            );
            /**Sets  the BalloonTooltipText
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetBalloonTooltipText
            (
                const char * balloonTooltipText /** balloon tooltip text */ 
            );
            /**Returns  the Bitmap
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Bitmap
            (
            );
            /**Sets  the Bitmap
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBitmap
            (
                const NXString & bitmapString /** bitmap string */ 
            );
            /**Sets  the Bitmap
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetBitmap
            (
                const char * bitmapString /** bitmap string */ 
            );
            /**Returns  the Cue
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Cue
            (
            );
            /**Sets  the Cue
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCue
            (
                const NXString & cue /** cue */ 
            );
            /**Sets  the Cue
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetCue
            (
                const char * cue /** cue */ 
            );
            /** Gets the SelectedFacetRegions @return Value to get from the property
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::TaggedObject *> GetSelectedObjects
            (
            );
            /** Sets the SelectedFacetRegions
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedObjects
            (
                const std::vector<NXOpen::TaggedObject *> & objectVector /**Value to set for the property*/
            );
            /**Returns  the StepStatus as string
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StepStatusAsString
            (
            );
            /**Sets  the StepStatus as string
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStepStatusAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the StepStatus as string
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetStepStatusAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the StepStatus members @return Value to get from the property
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetStepStatusMembers
            (
            );
            /**Returns  the ToolTip
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ToolTip
            (
            );
            /**Sets  the ToolTip
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToolTip
            (
                const NXString & toolTip /** tooltip */ 
            );
            /**Sets  the ToolTip
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetToolTip
            (
                const char * toolTip /** tooltip */ 
            );
            /** Gets the LastDeselectedFacetRegions @return Value to get from the property
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::TaggedObject *> GetLastDeselectedObjects
            (
            );
            /** Gets the LastSelectedFacetRegions @return Value to get from the property
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::TaggedObject *> GetLastSelectedObjects
            (
            );
            /**Returns  the LabelString
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LabelString
            (
            );
            /**Sets  the LabelString
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLabelString
            (
                const NXString & labelString /** labelstring */ 
            );
            /**Sets  the LabelString
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetLabelString
            (
                const char * labelString /** labelstring */ 
            );
            /**Returns  the SupportedFacetTypes.
                     @brief 
                    These are type of facets enabled in filters for select facet region block 
                     

             
                    
                    It returns following bits,
                    <ol>
                    <li> 0x1 if only convergent facets are enabled,</li>
                    <li> 0x2 if only NX facets are enabled,</li>
                    <li> 0x3 if both convergent as well as NX facets are enabled.</li>
                    </ol>
                    
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int SupportedFacetTypes
            (
            );
            /**Sets  the SupportedFacetTypes.
                     @brief 
                    These are type of facets enabled in filters for select facet region block 
                     

             
                    
                    It returns following bits,
                    <ol>
                    <li> 0x1 if only convergent facets are enabled,</li>
                    <li> 0x2 if only NX facets are enabled,</li>
                    <li> 0x3 if both convergent as well as NX facets are enabled.</li>
                    </ol>
                    
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSupportedFacetTypes
            (
                int typesEnabled /**bit value specifying the desired types of facets to enable in filter */
            );
            /**Returns  the FacetCollectionRules.
                     @brief 
                    These are the selection intent rules enabled for the facet selection region block 
                     

             
                    
                    It returns the following bit values,
                    <ol>
                    <li> 0x1 if only Single Facet rule is enabled,</li>
                    <li> 0x2 if only Face Facets rule is enabled,</li>
                    <li> 0x3 if only Flood Fill rule is enabled,</li>
                    <li> 0x4 if only Color Region rule is enabled</li>
                    </ol>
                    
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int EnabledFacetCollectionRules
            (
            );
            /**Sets  the FacetCollectionRules.
                     @brief 
                    These are the selection intent rules enabled for the facet selection region block 
                     

             
                    
                    It returns the following bit values,
                    <ol>
                    <li> 0x1 if only Single Facet rule is enabled,</li>
                    <li> 0x2 if only Face Facets rule is enabled,</li>
                    <li> 0x3 if only Flood Fill rule is enabled,</li>
                    <li> 0x4 if only Color Region rule is enabled</li>
                    </ol>
                    
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnabledFacetCollectionRules
            (
                int rulesEnabled /**bit value specifying enabled facet selection rules */
            );
            /**Returns  the active facet collection rule
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int SelectedFacetCollectionRule
            (
            );
            /**Sets  the active facet collection rule
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedFacetCollectionRule
            (
                int selectedRule /**bit value specifying selected facet selection rule */
            );
            /**Returns  the OwningFacetCollector.
                     @brief 
                    The owning facet collector is an object of class @link FacetCollector FacetCollector@endlink  that holds collected facets of the block
                     

             
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::FacetCollector * FacetCollector
            (
            );
            /**Sets  the OwningFacetCollector.
                     @brief 
                    The owning facet collector is an object of class @link FacetCollector FacetCollector@endlink  that holds collected facets of the block
                     

             
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFacetCollector
            (
                NXOpen::FacetCollector * facetCollector /** the facet collector object holding collection of the block */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
