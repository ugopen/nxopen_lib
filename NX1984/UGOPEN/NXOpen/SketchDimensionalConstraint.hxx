#ifndef NXOpen_SKETCHDIMENSIONALCONSTRAINT_HXX_INCLUDED
#define NXOpen_SKETCHDIMENSIONALCONSTRAINT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SketchDimensionalConstraint.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/SketchConstraint.hxx>
#include <NXOpen/Sketch.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class SketchDimensionalConstraint;
    namespace Annotations
    {
        class Dimension;
    }
    class Expression;
    class NXObject;
    class SketchConstraint;
    class _SketchDimensionalConstraintBuilder;
    class SketchDimensionalConstraintImpl;
    /** Represents a dimensional constraint  <br> To create an instance of this class refer to @link NXOpen::Sketch NXOpen::Sketch@endlink   <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  SketchDimensionalConstraint : public NXOpen::SketchConstraint
    {
        /** Dimension status. */
        public: enum DimensionStateType
        {
            DimensionStateTypeDriving/** Driving dimension */,
            DimensionStateTypeReference/** Reference dimension   */,
            DimensionStateTypeAutomatic/** Automatic dimension - legacy*/,
            DimensionStateTypeConstant/** Constant dimension  */
        };

        /** Dimension Preference for indicating which geometry associated to the dimension should move when the dimension value is changed
                This is only a preference and may not be honored if it conflicts with other sketch constraints */
        public: enum EndBehaviorPreference
        {
            EndBehaviorPreferenceAny/** Either geometry can move. Default value */,
            EndBehaviorPreferenceGeometry1Moves/** The second geometrty is fixed, prefer that dimension moves only the first geometry. */,
            EndBehaviorPreferenceGeometry2Moves/** The first geometry is fixed, prefer that dimension moves only the second geometry. */
        };

        private: SketchDimensionalConstraintImpl * m_sketchdimensionalconstraint_impl;
        private: friend class  _SketchDimensionalConstraintBuilder;
        protected: SketchDimensionalConstraint();
        public: ~SketchDimensionalConstraint();
        /** Returns the geometry associated with the dimension  @return  the geometry associated with the dimension 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::Sketch::DimensionGeometry> GetDimensionGeometry
        (
        );
        /**Returns  the dimension associated with the dimensional constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Annotations::Dimension * AssociatedDimension
        (
        );
        /**Returns  the expression associated with the dimensional constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * AssociatedExpression
        (
        );
        /** Switches the constraint to an alternate solution 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void UseAlternateSolution
        (
        );
        /**Returns  the dimension status. 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchDimensionalConstraint::DimensionStateType DimensionState
        (
        );
        /** Convert the dimension state to driving by creating and adding an expression.
            Caller must call @link NXOpen::Sketch::Update NXOpen::Sketch::Update@endlink  after calling this method 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void SetAsDriving
        (
        );
        /** Convert the dimension state to constant by removing the expression. 
            Caller must call @link NXOpen::Sketch::Update NXOpen::Sketch::Update@endlink  after calling this method 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void RemoveDrivingExpression
        (
        );
        /** Edit the dimension value to change the size or shape of the geometry.
            The dimension should not be a reference or preview dimension. 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void EditDimensionValue
        (
            double newDimValue /** newdimvalue */ 
        );
        /** Set EndBehaviorPreference of dimension constraint. 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void SetEndBehaviorPreference
        (
            NXOpen::SketchDimensionalConstraint::EndBehaviorPreference preference /** preference */ 
        );
        /** Edits the angular dimension such that the angle value will be 360 degrees minus the current value. 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void AlternateAngle
        (
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
