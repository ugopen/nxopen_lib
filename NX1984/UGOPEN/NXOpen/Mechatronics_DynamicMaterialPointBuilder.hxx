#ifndef NXOpen_MECHATRONICS_DYNAMICMATERIALPOINTBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_DYNAMICMATERIALPOINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_DynamicMaterialPointBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class DynamicMaterialPointBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    namespace Mechatronics
    {
        class _DynamicMaterialPointBuilderBuilder;
        class DynamicMaterialPointBuilderImpl;
        /** Represents a point that constrains the guideline for dynamic material.  <br> To create a new instance of this class, use @link NXOpen::Mechatronics::DynamicMaterialBuilder::NewDrivePoint  NXOpen::Mechatronics::DynamicMaterialBuilder::NewDrivePoint @endlink  <br> 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  DynamicMaterialPointBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** the curve types */
            public: enum CurveTypes
            {
                CurveTypesLine/** line */,
                CurveTypesSpline/** spline */
            };

            private: DynamicMaterialPointBuilderImpl * m_dynamicmaterialpointbuilder_impl;
            private: friend class  _DynamicMaterialPointBuilderBuilder;
            protected: DynamicMaterialPointBuilder();
            public: ~DynamicMaterialPointBuilder();
            /**Returns  the drive point. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Point * DrivePoint
            (
            );
            /**Sets  the drive point. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetDrivePoint
            (
                NXOpen::Point * drivePoint /** drivepoint */ 
            );
            /**Returns  the curve type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::DynamicMaterialPointBuilder::CurveTypes CurveType
            (
            );
            /**Sets  the curve type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetCurveType
            (
                NXOpen::Mechatronics::DynamicMaterialPointBuilder::CurveTypes curveType /** curvetype */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
