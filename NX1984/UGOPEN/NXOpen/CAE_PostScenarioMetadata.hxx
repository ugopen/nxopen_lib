#ifndef NXOpen_CAE_POSTSCENARIOMETADATA_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIOMETADATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioMetadata.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostScenarioTypes.hxx>
#include <NXOpen/CAE_PostScenarioVariant.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostScenarioMetadata;
    }
    namespace CAE
    {
        class PostScenarioVariant;
    }
    namespace CAE
    {
    }
    namespace CAE
    {
        class PostScenarioMetadataImpl;
        /**  @brief  This class represents a @link NXOpen::CAE::PostScenarioQueryResults NXOpen::CAE::PostScenarioQueryResults@endlink .  

         
            
                
                 <br> Keys:
                <ul>
                    <li>FunctionClass -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Spectrum</li>
                        <li>Time</li>
                        <li>FRF</li>
                        <li>CrossPower</li>
                        <li>AutoPower</li>
                        <li>PSD</li>
                    </ul></li>
                    <li>SpectrumFormat -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Linear</li>
                        <li>Power</li>
                    </ul></li>
                    <li>SpectrumScaling -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Peak</li>
                        <li>RMS</li>
                    </ul></li>
                    <li>VisualizationSpectrumScaling -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Peak</li>
                        <li>RMS</li>
                    </ul></li>
                    <li>CorrectionMode -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Energy</li>
                        <li>Amplitude</li>
                    </ul></li>
                    <li>VisualizationCorrectionMode -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Energy</li>
                        <li>Amplitude</li>
                    </ul></li>
                    <li>AcousticalWeighting -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>WeightingNone</li>
                        <li>WeightingA</li>
                        <li>WeightingB</li>
                        <li>WeightingC</li>
                        <li>WeightingD</li>
                        <li>WeightingAB</li>
                        <li>WeightingBC</li>
                        <li>WeightingNone</li>
                        <li>WeightingNone</li>
                    </ul></li>
                    <li>EnergyCorrectionFactor -- Double</li>
                    <li>AmplitudeCorrectionFactor -- Double</li>
                    <li>dBOption -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>dbOptionDefault</li>
                        <li>dbOptionLinear</li>
                        <li>dbOptionDB</li>
                    </ul></li>
                    <li>IsDuplicate -- Boolean</li>
                    <li>SelectedComponent -- Component</li>
                    <li>VisualizationTemplate -- Unicode String</li>
                    <li>ComplexOption -- Integer, this is a bit set: <ul>
                        <li> @code Real = 0x1 @endcode </li>
                        <li> @code Imaginary = 0x2 @endcode </li>
                        <li> @code Magnitude = 0x4 @endcode </li>
                        <li> @code Phase = 0x8 @endcode </li>
                        <li> @code SignedMagnitude = 0x10 @endcode </li>
                    </ul></li>
                    <li>Alias -- Unicode String</li>
                    <li>DisplayName -- Unicode String</li>
                    <li>AdditionalLegendColumns_N -- Integer</li>
                    <li>AdditionalLegendColumns_Header_%N -- Unicode String</li>
                    <li>AdditionalLegendColumns_Value_%N -- Unicode String</li>
                    <li>Hide_Record_Name -- Boolean</li>
                    <li>Dependent_Variable_Name -- Unicode String</li>
                    <li>Independent_Variable1_Name -- Unicode String</li>
                    <li>Independent_Variable2_Name -- Unicode String</li>
                    <li>Origin.DataSource -- Unicode String</li>
                    <li>Origin.DataDefinition[0] -- Unicode String</li>
                    <li>HighlightPlot -- Boolean</li>
                    <li>ComponentFilter(DependentVariableName) -- Semicolon separated list of Components as Unicode String</li>
                </ul>
                 <br> 
                
              <br> To create a new instance of this class, use @link NXOpen::CAE::PostScenarioQueryResults::NewMetadata  NXOpen::CAE::PostScenarioQueryResults::NewMetadata @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostScenarioMetadata : public NXOpen::TransientObject
        {
            private: PostScenarioMetadataImpl * m_postscenariometadata_impl;
            /// \cond NX_NO_DOC 
            public: explicit PostScenarioMetadata(void *ptr);
            /// \endcond 
            /** Dispose of this instance. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PostScenarioMetadata();
            /**  @brief Get available keys. 

             
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetKeys
            (
            );
            /** Get the value for a particular key. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioVariant * GetValue
            (
                const NXString & key /** key */ 
            );
            /** Get the value for a particular key. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::PostScenarioVariant * GetValue
            (
                const char * key /** key */ 
            );
            /** Set a key-value pair. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeyValue
            (
                const NXString & key /** key */ ,
                NXOpen::CAE::PostScenarioVariant * values /** values */ 
            );
            /** Set a key-value pair. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetKeyValue
            (
                const char * key /** key */ ,
                NXOpen::CAE::PostScenarioVariant * values /** values */ 
            );
            /**Returns  the signal function class 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioFunctionClass FunctionClass
            (
            );
            /**Sets  the signal function class 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFunctionClass
            (
                NXOpen::CAE::PostScenarioFunctionClass functionClass /** Sets the signal function class. */
            );
            /**Returns  the spectrum format of the contained data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioSpectrumFormat SpectrumFormat
            (
            );
            /**Sets  the spectrum format of the contained data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpectrumFormat
            (
                NXOpen::CAE::PostScenarioSpectrumFormat spectrumFormat /** Sets the spectrum format. */
            );
            /**Returns  the spectrum mode of the contained data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioSpectrumMode SpectrumMode
            (
            );
            /**Sets  the spectrum mode of the contained data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpectrumMode
            (
                NXOpen::CAE::PostScenarioSpectrumMode spectrumMode /** Sets the spectrum mode. */
            );
            /**Returns  the correction mode of the contained data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioCorrectionMode CorrectionMode
            (
            );
            /**Sets  the correction mode of the contained data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCorrectionMode
            (
                NXOpen::CAE::PostScenarioCorrectionMode correctionMode /** Sets the correction mode. */
            );
            /**Returns  the spectrum mode to be applied on the visualization, converting data as needed 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioSpectrumMode VisualizationSpectrumMode
            (
            );
            /**Sets  the spectrum mode to be applied on the visualization, converting data as needed 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVisualizationSpectrumMode
            (
                NXOpen::CAE::PostScenarioSpectrumMode visSpectrumMode /** Sets the visualization spectrum mode. */
            );
            /**Returns  the correction mode to be applied on the visualization, converting data as needed 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioCorrectionMode VisualizationCorrectionMode
            (
            );
            /**Sets  the correction mode to be applied on the visualization, converting data as needed 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVisualizationCorrectionMode
            (
                NXOpen::CAE::PostScenarioCorrectionMode visCorrectionMode /** Sets the visualization correction mode. */
            );
            /**Returns  the acoustical weighting type. The contained data is not weighted,
                        as the weighting is applied on the visualization. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioWeightingType WeightingType
            (
            );
            /**Sets  the acoustical weighting type. The contained data is not weighted,
                        as the weighting is applied on the visualization. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWeightingType
            (
                NXOpen::CAE::PostScenarioWeightingType weightingType /** Sets the weighting type. */
            );
            /**Returns  the energy correction factor specific to the windowing function aplied on the signal, if any 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double EnergyCorrectionFactor
            (
            );
            /**Sets  the energy correction factor specific to the windowing function aplied on the signal, if any 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnergyCorrectionFactor
            (
                double energyCorrectionFactor /** Sets the energy factor. */
            );
            /**Returns  the amplitude correction factor specific to the windowing function aplied on the signal, if any 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double AmplitudeCorrectionFactor
            (
            );
            /**Sets  the amplitude correction factor specific to the windowing function aplied on the signal, if any 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAmplitudeCorrectionFactor
            (
                double amplitudeCorrectionFactor /** Sets the amplitude correction factor. */
            );
            /**Returns  the axis scale 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioAxisScale AxisScale
            (
            );
            /**Sets  the axis scale 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAxisScale
            (
                NXOpen::CAE::PostScenarioAxisScale axisScale /** Sets the axis scale. */
            );
            /**Returns  the selected component 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioVariantComponent SelectedComponent
            (
            );
            /**Sets  the selected component 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedComponent
            (
                NXOpen::CAE::PostScenarioVariantComponent component /** Sets the selected component. */
            );

            /// \cond NX_NO_DOC 
            /** Returns the complex option.  @return  Returns the array of basic complex options that are set. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAE::PostScenarioComplexOption> GetComplexOption
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the complex option. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComplexOption
            (
                const std::vector<NXOpen::CAE::PostScenarioComplexOption> & complexOptions /** Sets the basic complex options given by the array. */
            );

            /// \endcond 
            /**Returns  the flag which indicates the highlighted display state. This functionality is currently only supported by XY Plots. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool HighlightedDisplay
            (
            );
            /**Sets  the flag which indicates the highlighted display state. This functionality is currently only supported by XY Plots. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHighlightedDisplay
            (
                bool highlightDisplay /** highlightdisplay */ 
            );
            /**Returns  the flag which indicates the existence of duplicate functions for the same set of selection variables. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool Duplicate
            (
            );
            /**Sets  the flag which indicates the existence of duplicate functions for the same set of selection variables. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDuplicate
            (
                bool duplicate /** duplicate */ 
            );
            /**Returns  the flag which indicates if the Record Name column is hidden 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool RecordNameHidden
            (
            );
            /**Sets  the flag which indicates if the Record Name column is hidden 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRecordNameHidden
            (
                bool hidden /** hidden */ 
            );

            /// \cond NX_NO_DOC 
            /**Returns   @brief the template with the specified name from the visualization specific location int the kits. 
                                 The defaults are used if the blank/not set is porvided.  

             
                        
                            <li>PostView loads a partial template from kits/ugstructures/post_template and applies it after every plot, when set.</li>
                        
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString VisualizationTemplate
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets   @brief the template with the specified name from the visualization specific location int the kits. 
                                 The defaults are used if the blank/not set is porvided.  

             
                        
                            <li>PostView loads a partial template from kits/ugstructures/post_template and applies it after every plot, when set.</li>
                        
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVisualizationTemplate
            (
                const NXString & visTemplateName /** vistemplatename */ 
            );
            /**Sets   @brief the template with the specified name from the visualization specific location int the kits. 
                                 The defaults are used if the blank/not set is porvided.  

             
                        
                            <li>PostView loads a partial template from kits/ugstructures/post_template and applies it after every plot, when set.</li>
                        
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            void SetVisualizationTemplate
            (
                const char * visTemplateName /** vistemplatename */ 
            );

            /// \endcond 
            /** Returns the origin of a @link NXOpen::CAE::PostScenarioResultGroup NXOpen::CAE::PostScenarioResultGroup@endlink  in the context of a transformation function. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void GetOrigin
            (
                NXString* username /** The user provided name of the data source whose data is present in the current @link NXOpen::CAE::PostScenarioResultGroup NXOpen::CAE::PostScenarioResultGroup@endlink . */,
                NXString* displayName /** The display name of the @link NXOpen::CAE::PostScenarioDataDefinition NXOpen::CAE::PostScenarioDataDefinition@endlink  used to perform the query. */
            );
            /** Sets the origin of a @link NXOpen::CAE::PostScenarioResultGroup NXOpen::CAE::PostScenarioResultGroup@endlink  in the context of a transformation function. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOrigin
            (
                const NXString & username /**  The user provided name of the data source whose data is present in the current @link NXOpen::CAE::PostScenarioResultGroup NXOpen::CAE::PostScenarioResultGroup@endlink .*/,
                const NXString & displayName /** The display name of the @link NXOpen::CAE::PostScenarioDataDefinition NXOpen::CAE::PostScenarioDataDefinition@endlink  used to perform the query. */
            );
            /** Sets the origin of a @link NXOpen::CAE::PostScenarioResultGroup NXOpen::CAE::PostScenarioResultGroup@endlink  in the context of a transformation function. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            void SetOrigin
            (
                const char * username /**  The user provided name of the data source whose data is present in the current @link NXOpen::CAE::PostScenarioResultGroup NXOpen::CAE::PostScenarioResultGroup@endlink .*/,
                const char * displayName /** The display name of the @link NXOpen::CAE::PostScenarioDataDefinition NXOpen::CAE::PostScenarioDataDefinition@endlink  used to perform the query. */
            );
            /**Returns  the first independent name that is used by the file column headers of exported csv files of composed function plots. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CustomizedFirstIndependentColumnName
            (
            );
            /**Sets  the first independent name that is used by the file column headers of exported csv files of composed function plots. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCustomizedFirstIndependentColumnName
            (
                const NXString & firstIndepName /** Sets the first independent name */
            );
            /**Sets  the first independent name that is used by the file column headers of exported csv files of composed function plots. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            void SetCustomizedFirstIndependentColumnName
            (
                const char * firstIndepName /** Sets the first independent name */
            );
            /**Returns  the second independent name that is used by the file column headers of exported csv files of composed function plots. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CustomizedSecondIndependentColumnName
            (
            );
            /**Sets  the second independent name that is used by the file column headers of exported csv files of composed function plots. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCustomizedSecondIndependentColumnName
            (
                const NXString & secondIndepName /** Sets the first second name */
            );
            /**Sets  the second independent name that is used by the file column headers of exported csv files of composed function plots. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            void SetCustomizedSecondIndependentColumnName
            (
                const char * secondIndepName /** Sets the first second name */
            );
            /**Returns  the dependent name that is used by the file column headers of exported csv files of composed function plots. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CustomizedDependentColumnName
            (
            );
            /**Sets  the dependent name that is used by the file column headers of exported csv files of composed function plots. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCustomizedDependentColumnName
            (
                const NXString & depName /** Sets the dependent name */
            );
            /**Sets  the dependent name that is used by the file column headers of exported csv files of composed function plots. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            void SetCustomizedDependentColumnName
            (
                const char * depName /** Sets the dependent name */
            );
            /** Returns the additional columns from the legend of the plot. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void GetAdditionalLegendColumns
            (
                std::vector<NXString> & headers /** The headers of the additional legend columns */,
                std::vector<NXString> & values /** The values of the additional legend columns */
            );
            /** Sets the additional columns form the legend of the plot. 
                     Then number of values given should be the same as the number of headers. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAdditionalLegendColumns
            (
                const std::vector<NXString> & headers /** The headers of the additional legend columns */,
                const std::vector<NXString> & values /** The values of the additional legend columns */
            );
            /**Returns  the Alias metadata key is set in the context of Split Alias or Independent Alias relation (see scenario descriptor xml),
                        and the value will be the name of the alias of the selection variable that determined this plot to be selected.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Alias
            (
            );
            /**Sets  the Alias metadata key is set in the context of Split Alias or Independent Alias relation (see scenario descriptor xml),
                        and the value will be the name of the alias of the selection variable that determined this plot to be selected.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAlias
            (
                const NXString & alias /** Sets the alias */
            );
            /**Sets  the Alias metadata key is set in the context of Split Alias or Independent Alias relation (see scenario descriptor xml),
                        and the value will be the name of the alias of the selection variable that determined this plot to be selected.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            void SetAlias
            (
                const char * alias /** Sets the alias */
            );
            /**Returns  the display name that is applied to the selection variables metadata set by the @link NXOpen::CAE::PostScenarioPlotBuilder::SetSelectionValue NXOpen::CAE::PostScenarioPlotBuilder::SetSelectionValue@endlink  method.
                    The name is displayed alongside the numeric value of the selection variable. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DisplayName
            (
            );
            /**Sets  the display name that is applied to the selection variables metadata set by the @link NXOpen::CAE::PostScenarioPlotBuilder::SetSelectionValue NXOpen::CAE::PostScenarioPlotBuilder::SetSelectionValue@endlink  method.
                    The name is displayed alongside the numeric value of the selection variable. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayName
            (
                const NXString & displayName /** Sets the display name */
            );
            /**Sets  the display name that is applied to the selection variables metadata set by the @link NXOpen::CAE::PostScenarioPlotBuilder::SetSelectionValue NXOpen::CAE::PostScenarioPlotBuilder::SetSelectionValue@endlink  method.
                    The name is displayed alongside the numeric value of the selection variable. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            void SetDisplayName
            (
                const char * displayName /** Sets the display name */
            );

            /// \cond NX_NO_DOC 
            /**  @brief The Component Filter mirrors the specifics of a user selection with regards
                        to which dependent variables or dependent components were selected. 

             

                         <br> In general cases, this will match the data 1:1. It may not match if
                        an aggregation relation was used which aggregated either a dependent
                        selector and/or a component selector. <br> 

                         <br> This property is meaningless if your scenario descriptor has no Aggregation callbacks. <br> 

                         <br> This property is meaningful if your scenario descriptor has an Aggregation callback
                        which aggregates the Dependent or Component selector for a slot and results in
                        possible selection values which would exclude some combinations thereof; this property
                        tells you which ended up being included in the user's selection, and the scenario
                        transformation function may act upon this information. <br> 

                         <br> If your scenario descriptor has an Aggregation callback, but only aggregates regular
                        selection variables, then the Post Scenario framework filters out the plots for you. <br> 
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAE::PostScenarioVariantComponent> GetComponentFilter
            (
                const NXString & dependentVariableID /** dependentvariableid */ 
            );
            /**  @brief The Component Filter mirrors the specifics of a user selection with regards
                        to which dependent variables or dependent components were selected. 

             

                         <br> In general cases, this will match the data 1:1. It may not match if
                        an aggregation relation was used which aggregated either a dependent
                        selector and/or a component selector. <br> 

                         <br> This property is meaningless if your scenario descriptor has no Aggregation callbacks. <br> 

                         <br> This property is meaningful if your scenario descriptor has an Aggregation callback
                        which aggregates the Dependent or Component selector for a slot and results in
                        possible selection values which would exclude some combinations thereof; this property
                        tells you which ended up being included in the user's selection, and the scenario
                        transformation function may act upon this information. <br> 

                         <br> If your scenario descriptor has an Aggregation callback, but only aggregates regular
                        selection variables, then the Post Scenario framework filters out the plots for you. <br> 
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXOpen::CAE::PostScenarioVariantComponent> GetComponentFilter
            (
                const char * dependentVariableID /** dependentvariableid */ 
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
