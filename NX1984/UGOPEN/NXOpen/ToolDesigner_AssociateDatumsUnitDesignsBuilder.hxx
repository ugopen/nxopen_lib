#ifndef NXOpen_TOOLDESIGNER_ASSOCIATEDATUMSUNITDESIGNSBUILDER_HXX_INCLUDED
#define NXOpen_TOOLDESIGNER_ASSOCIATEDATUMSUNITDESIGNSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ToolDesigner_AssociateDatumsUnitDesignsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libtooldesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace ToolDesigner
    {
        class AssociateDatumsUnitDesignsBuilder;
    }
    class Builder;
    class SelectPart;
    class TaggedObject;
    namespace ToolDesigner
    {
        class _AssociateDatumsUnitDesignsBuilderBuilder;
        class AssociateDatumsUnitDesignsBuilderImpl;

        /// \cond NX_NO_DOC 
        /** AssociateDatumsUnitDesignsBuilder   <br> To create a new instance of this class, use @link NXOpen::ToolDesigner::ToolDesignerManager::CreateAssociateDatumsUnitDesignsBuilder  NXOpen::ToolDesigner::ToolDesignerManager::CreateAssociateDatumsUnitDesignsBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        SearchTypes </term> <description> 
         
        Id </description> </item> 

        </list> 

         <br>  Created in NX11.0.1.  <br>  
        */
        class TOOLDESIGNEROPENCPPEXPORT  AssociateDatumsUnitDesignsBuilder : public NXOpen::Builder
        {
            /** SEARCH TYPES Names */

            /// \cond NX_NO_DOC 
            public: enum Type
            {
                TypeId/** id */ ,
                TypeName/** name */ 
            };


            /// \endcond 
            private: AssociateDatumsUnitDesignsBuilderImpl * m_associatedatumsunitdesignsbuilder_impl;
            private: friend class  _AssociateDatumsUnitDesignsBuilderBuilder;
            protected: AssociateDatumsUnitDesignsBuilder();
            public: ~AssociateDatumsUnitDesignsBuilder();

            /// \cond NX_NO_DOC 
            /**  Represents search button 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void PerformSearchButton
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prev Search Button 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void PrevSearchResultsButton
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** GetCurrentSearchResultsPageNumber 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: int GetCurrentSearchResultsPageNumber
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Next Search Button 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void NextSearchResultsButton
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the product selection 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXOpen::SelectPart * ProductSelection
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**The init assaigned datums for product 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void InitAssaignedDatumsForProduct
            (
                std::vector<NXOpen::TaggedObject *> & datums /** datums */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the enum0 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXOpen::ToolDesigner::AssociateDatumsUnitDesignsBuilder::Type SearchTypes
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the enum0 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void SetSearchTypes
            (
                NXOpen::ToolDesigner::AssociateDatumsUnitDesignsBuilder::Type enum0 /** enum0 */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the string0 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXString SearchValue
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the string0 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void SetSearchValue
            (
                const NXString & string0 /** string0 */ 
            );
            /**Sets  the string0 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            void SetSearchValue
            (
                const char * string0 /** string0 */ 
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
