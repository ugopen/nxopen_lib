#ifndef NXOpen_FIELDS_TIMESERIESPROFILEBUILDER_HXX_INCLUDED
#define NXOpen_FIELDS_TIMESERIESPROFILEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_TimeSeriesProfileBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ExternalFileReferenceAdapter.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/IExternalFileReferencer.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class TimeSeriesProfileBuilder;
    }
    class Expression;
    class ExternalFileReferenceAdapter;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class IExternalFileReferencer;
    class Unit;
    namespace Fields
    {
        class _TimeSeriesProfileBuilderBuilder;
        class TimeSeriesProfileBuilderImpl;
        /**  @brief 
                    Represents a builder class for creating and editing an @link NXOpen::Fields::Field NXOpen::Fields::Field@endlink .
                 

         
            
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  TimeSeriesProfileBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder, public virtual NXOpen::IExternalFileReferencer
        {
            /**  @brief 
                        the interpolation method used for the profile
                     

              */
            public: enum InterpolationEnum
            {
                InterpolationEnumLinear/** Linear */,
                InterpolationEnumAkima/** Akima */,
                InterpolationEnumAkima72/** Akima72 */,
                InterpolationEnumCubic/** Cubic */
            };

            private: TimeSeriesProfileBuilderImpl * m_timeseriesprofilebuilder_impl;
            private: friend class  _TimeSeriesProfileBuilderBuilder;
            protected: TimeSeriesProfileBuilder();
            public: ~TimeSeriesProfileBuilder();
            /**Returns   @brief 
                        the external file.
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ExternalFile
            (
            );
            /**Sets   @brief 
                        the external file.
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExternalFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets   @brief 
                        the external file.
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void SetExternalFile
            (
                const char * fileName /** filename */ 
            );
            /**Returns   @brief 
                        the interpolation 
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::TimeSeriesProfileBuilder::InterpolationEnum Interpolation
            (
            );
            /**Sets   @brief 
                        the interpolation 
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInterpolation
            (
                NXOpen::Fields::TimeSeriesProfileBuilder::InterpolationEnum interpolation /** interpolation */ 
            );
            /**Returns   @brief 
                        the user defined unit 
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Unit * UserDefinedUnitType
            (
            );
            /**Sets   @brief 
                        the user defined unit 
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUserDefinedUnitType
            (
                NXOpen::Unit * unitType /** unittype */ 
            );
            /**Returns   @brief 
                        the offset on the x axis.
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Offset
            (
            );
            /**Returns   @brief 
                        the time delta
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TimeDelta
            (
            );
            /**Returns   @brief 
                        the channel name
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ChannelName
            (
            );
            /**Sets   @brief 
                        the channel name
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetChannelName
            (
                const NXString & channelName /** channelname */ 
            );
            /**Sets   @brief 
                        the channel name
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void SetChannelName
            (
                const char * channelName /** channelname */ 
            );
            /**Returns   @brief 
                        the scale factor
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ScaleFactor
            (
            );
            /**Sets   @brief 
                         whether or not the profile has unknown measure 
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetChannelHasMeasureUnknown
            (
                bool channelHasUnknownType /** channelhasunknowntype */ 
            );
            /**Returns   @brief 
                         whether or not the profile has unknown measure 
                         

             
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChannelHasMeasureUnknown
            (
            );
            /**  @brief 
                            If the measure is marked as fixed and is changed, the validation at commit will detect an error and fail.
                         

             
                        
                            It is recommended to call this method when editing a profile that is referenced by another object,
                            which depends on specific measures.
                        
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMeasureFixed
            (
                bool isMeasureFixed /** true, if changed measures should prevent a commit */
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
            /**  Returns the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to return the correct external file adapter.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * GetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */
            );
            /**  Sets the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to set the correct reference. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /**  Gets the file definition to use for external file adapter. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString GetExternalFileDefinitionKey
            (
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const NXString & externalFileSpec /** the external file specification. */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const char * externalFileSpec /** the external file specification. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
