#ifndef NXOpen_TOOLING_RUNSIMULATIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_RUNSIMULATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_RunSimulationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class RunSimulationBuilder;
    }
    class Builder;
    class Expression;
    namespace Tooling
    {
        class _RunSimulationBuilderBuilder;
        class RunSimulationBuilderImpl;
        /** Represents a @link NXOpen::Tooling::RunSimulationBuilder NXOpen::Tooling::RunSimulationBuilder@endlink  to animate the model, 
            analyze the collision and reference. NULL is returned  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateRunSimulationBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateRunSimulationBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AngleExpression.Value </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CheckCollision </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ClearanceCollision </term> <description> 
         
        1.0 (millimeters part), 0.04 (inches part) </description> </item> 

        <item><term> 
         
        CollisionCheckOption </term> <description> 
         
        MeshTriangleIntersection </description> </item> 

        <item><term> 
         
        EndAngle </term> <description> 
         
        359.9 </description> </item> 

        <item><term> 
         
        GotoRun </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        HighlightCollision </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        IgnoreTouching </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        IntervalDimension.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        StartAngle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        StopCheckCollision </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        TimeExpression.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  RunSimulationBuilder : public NXOpen::Builder
        {
            /** Specifies the collision check method */
            public: enum CollisionCheckOptions
            {
                CollisionCheckOptionsFacetBodyDistance/** Measure facet bodies distance to do collision check */,
                CollisionCheckOptionsMeshTriangleIntersection/** Mesh facet body, check the mesh triangle intersection or not */,
                CollisionCheckOptionsSolidBodyIntersection/** Get the solid body, use intersection boolean result to do collision check */
            };

            private: RunSimulationBuilderImpl * m_runsimulationbuilder_impl;
            private: friend class  _RunSimulationBuilderBuilder;
            protected: RunSimulationBuilder();
            public: ~RunSimulationBuilder();
            /**Returns  the goto run angle stores the position in the cycle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double GotoRun
            (
            );
            /**Sets  the goto run angle stores the position in the cycle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetGotoRun
            (
                double gotoRun /** gotorun */ 
            );
            /**Returns  the start angle of the simulation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double StartAngle
            (
            );
            /**Sets  the start angle of the simulation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStartAngle
            (
                double startAngle /** startangle */ 
            );
            /**Returns  the end angle of the simulation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double EndAngle
            (
            );
            /**Sets  the end angle of the simulation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEndAngle
            (
                double endAngle /** endangle */ 
            );
            /**Returns  the angle of the cycle position 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * AngleExpression
            (
            );
            /**Returns  the time in the cycle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TimeExpression
            (
            );
            /**Returns  the interval value of refresh 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * IntervalDimension
            (
            );
            /** Goto the start of the simulation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void GotoStart
            (
            );
            /** Previous simulation result 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void Previous
            (
            );
            /** Play simulation backwards 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void PlayBackwards
            (
            );
            /** Play simulation forwards 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void Play
            (
            );
            /** Next simulation result 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void Next
            (
            );
            /** Run goto end of the simulation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void GotoEnd
            (
            );
            /** Stop simulation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void Stop
            (
            );
            /**Returns  the check collision 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool CheckCollision
            (
            );
            /**Sets  the check collision 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCheckCollision
            (
                bool checkCollision /** checkcollision */ 
            );
            /**Returns  the stop check collision if find next collision 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool StopCheckCollision
            (
            );
            /**Sets  the stop check collision if find next collision 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStopCheckCollision
            (
                bool stopCheckCollision /** stopcheckcollision */ 
            );
            /**Returns  the highlight collision bodies flag 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool HighlightCollision
            (
            );
            /**Sets  the highlight collision bodies flag 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHighlightCollision
            (
                bool highlightCollision /** highlightcollision */ 
            );
            /**Returns  the ignore touching flag 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool IgnoreTouching
            (
            );
            /**Sets  the ignore touching flag 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetIgnoreTouching
            (
                bool ignoreTouching /** ignoretouching */ 
            );
            /**Returns  the clearance value of collision or interference 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double ClearanceCollision
            (
            );
            /**Sets  the clearance value of collision or interference 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetClearanceCollision
            (
                double clearanceCollision /** clearancecollision */ 
            );
            /** Modify the collision by invoking collision configuration dialog 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CollisionConfiguration
            (
            );
            /** List collision changes information in the information window 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CollisionInformation
            (
            );
            /** Reset all ignored settings of the collision 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ResetIgnoredCollision
            (
            );
            /**Returns  the collision check method option 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::RunSimulationBuilder::CollisionCheckOptions CollisionCheckOption
            (
            );
            /**Sets  the collision check method option 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCollisionCheckOption
            (
                NXOpen::Tooling::RunSimulationBuilder::CollisionCheckOptions collisionCheckMethod /** collisioncheckmethod */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
