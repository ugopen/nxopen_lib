#ifndef NXOpen_PID_DATATYPE_HXX_INCLUDED
#define NXOpen_PID_DATATYPE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_DataType.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        /** Represents the symbol source options. 
         <br>  Created in NX11.0.1.  <br>  
        */
        enum SymbolSourceOption
        {
            SymbolSourceOptionReuseLibrary/** from the reuse library. */,
            SymbolSourceOptionExistingSymbol/** from the symbol in document window. */,
            SymbolSourceOptionLogicalElementRevision/** from an existing Logical Element Revision. */
        };

        /** Represents the symbol rotation angle options. 
         <br>  Created in NX11.0.1.  <br>  
        */
        enum RotateAngleOption
        {
            RotateAngleOptionZero/** 0 degree. */,
            RotateAngleOptionNinety/** 90 degree. */,
            RotateAngleOptionOneHundredAndEighty/** 180 degree. */,
            RotateAngleOptionTwoHundredAndSeventy/** 270 degree. */
        };

        /** Represents the connection end type. 
         <br>  Created in NX11.0.1.  <br>  
        */
        enum ConnectionEndType
        {
            ConnectionEndTypeStart/** The start of connection. */,
            ConnectionEndTypeEnd/** The end of connection. */
        };

        /** Represents the port direction option. 
         <br>  Created in NX11.0.1.  <br>  
        */
        enum PortDirectionOption
        {
            PortDirectionOptionInput/** input. */,
            PortDirectionOptionOutput/** output. */,
            PortDirectionOptionBiDirectional/** bi-directional. */
        };

        /**Represents the instrumentation type. 
         <br>  Created in NX1847.0.0.  <br>  
        */
        enum InstrumentationType
        {
            InstrumentationTypeSymbol/** instrumentation symbol. */,
            InstrumentationTypeAnnotation/** instrumentation annotation. */
        };

        /**Represents the instrumentation symbol type. 
         <br>  Created in NX1847.0.0.  <br>  
        */
        enum InstrumentationSymbolType
        {
            InstrumentationSymbolTypeDiscreteInstrumentPrimaryLocation/** discrete instrument and primary location. */,
            InstrumentationSymbolTypeDiscreteInstrumentFieldMounted/** discrete instrument and field mounted. */,
            InstrumentationSymbolTypeDiscreteInstrumentAuxiliaryLocation/** discrete instrument and auxiliary location. */,
            InstrumentationSymbolTypeSharedDisplaySharedControlPrimaryLocation/** shared display, shared control and primary location. */,
            InstrumentationSymbolTypeSharedDisplaySharedControlFieldMounted/** shared display, shared control and field mounted. */,
            InstrumentationSymbolTypeSharedDisplaySharedControlAuxiliaryLocation/** shared display, shared control and auxiliary location. */,
            InstrumentationSymbolTypeComputerFunctionPrimaryLocation/** computer function and primary location. */,
            InstrumentationSymbolTypeComputerFunctionFieldMounted/** computer function and field mounted. */,
            InstrumentationSymbolTypeComputerFunctionAuxiliaryLocation/** computer function and auxiliary location. */,
            InstrumentationSymbolTypeProgrammableLogicControlPrimaryLocation/** programmable logic control and primary location. */,
            InstrumentationSymbolTypeProgrammableLogicControlFieldMounted/** programmable logic control and field mounted. */,
            InstrumentationSymbolTypeProgrammableLogicControlAuxiliaryLocation/** programmable logic control and auxiliary location. */
        };

        /**Represents the pipe discipline type. 
         <br>  Created in NX1847.0.0.  <br>  
        */
        enum PipeDisciplineType
        {
            PipeDisciplineTypePiping/** piping discipline. */,
            PipeDisciplineTypeInstrumentation/** instrumentation discipline. */,
            PipeDisciplineTypeHvac/** HVAC discipline. */
        };

        /**Represents the pipe instrumentation control loop type. 
         <br>  Created in NX1847.0.0.  <br>  
        */
        enum InstrumentationControlLoopType
        {
            InstrumentationControlLoopTypeUnassigned/** unassigned control loop. */,
            InstrumentationControlLoopTypeActive/** active control loop. */,
            InstrumentationControlLoopTypeInferred/** inferred control loop. */,
            InstrumentationControlLoopTypeSpecified/** specified control loop. */
        };

        /**Represents the identification display for the control loop of the instrumentation symbols. 
         <br>  Created in NX1847.0.0.  <br>  
        */
        enum InstrumentationControlLoopDisplay
        {
            InstrumentationControlLoopDisplayId/** control loop Id. */,
            InstrumentationControlLoopDisplayName/** control loop name. */,
            InstrumentationControlLoopDisplayBlank/** no display. */
        };

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
