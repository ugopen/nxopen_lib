#ifndef NXOpen_DISPLAY_ENVIRONMENTBUILDER_HXX_INCLUDED
#define NXOpen_DISPLAY_ENVIRONMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_EnvironmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Display_Image.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_display_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Display
    {
        class EnvironmentBuilder;
    }
    class Builder;
    class Direction;
    namespace Display
    {
        class Image;
    }
    class Expression;
    class Plane;
    class View;
    namespace Display
    {
        class _EnvironmentBuilderBuilder;
        class EnvironmentBuilderImpl;
        /**
            Represents a @link Display::EnvironmentBuilder Display::EnvironmentBuilder@endlink 
            This controls environment image, tone mapping, and stages.
             <br> This class is restricted to being called from a program running during an 
            Interactive NX session.  If run from a non-interactive session it will 
            return NULL. <br> 
             <br> To create a new instance of this class, use @link NXOpen::ViewCollection::CreateEnvironmentBuilder  NXOpen::ViewCollection::CreateEnvironmentBuilder @endlink  <br> 
         <br>  Created in NX10.0.2.  <br>  
        */
        class NXOPENCPP_DISPLAYEXPORT  EnvironmentBuilder : public NXOpen::Builder
        {
            /** lighting image blurr type */
            public: enum ImageBlurType
            {
                ImageBlurTypeNone/** none */ ,
                ImageBlurTypeLow/** low */ ,
                ImageBlurTypeMedium/** medium */ ,
                ImageBlurTypeHigh/** high */ 
            };

            /** up vector type */
            public: enum ImageUpVectorTypes
            {
                ImageUpVectorTypesAlignWithFloorPlane/** align with floor plane */ ,
                ImageUpVectorTypesUserDefined/** user defined */ 
            };

            /** tone mapping type - do not enable until NX11 */
            public: enum ToneMappingTypes
            {
                ToneMappingTypesSystemScene/** system scene */ ,
                ToneMappingTypesUserDefined/** user defined */ 
            };

            /** Represents an index to a ground plane type define */
            public: enum GroundPlaneTypes
            {
                GroundPlaneTypesYz/** Use yz plane for the ground. */,
                GroundPlaneTypesXz/** Use xz plane for the ground. */,
                GroundPlaneTypesXy/** Use xy plane for the ground. */,
                GroundPlaneTypesUserDefined/** Use user defined plane for the ground. */
            };

            /** Represents global finish types for shaded views */
            public: enum GlobalFinishType
            {
                GlobalFinishTypeShinyPlastic/** Shiny Plastic global finish effect */,
                GlobalFinishTypeClassicSatin/** Classic Satin global finish effect */,
                GlobalFinishTypeMattePlastic/** Matte Plastic global finish effect */,
                GlobalFinishTypeFlat/** Flat global finish effect */,
                GlobalFinishTypeUserDefined/** Original global finish effect */
            };

            private: EnvironmentBuilderImpl * m_environmentbuilder_impl;
            private: friend class  _EnvironmentBuilderBuilder;
            protected: EnvironmentBuilder();
            public: ~EnvironmentBuilder();
            /**Returns  the image-based lighting's image builder 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: NXOpen::Display::Image * Image
            (
            );
            /**Sets  the image-based lighting's image builder 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetImage
            (
                NXOpen::Display::Image * imageBuilder /** image builder */ 
            );
            /**Returns  the image filename used for image-based lighting 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: NXString ImageFilename
            (
            );
            /**Sets  the image filename used for image-based lighting 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetImageFilename
            (
                const NXString & imageFileName /** image file name */ 
            );
            /**Sets  the image filename used for image-based lighting 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            void SetImageFilename
            (
                const char * imageFileName /** image file name */ 
            );
            /**Returns  whether image-based lighting (IBL) is enabled 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: bool UseEnvironment
            (
            );
            /**Sets  whether image-based lighting (IBL) is enabled 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetUseEnvironment
            (
                bool useIBL /** useibl */ 
            );
            /**Returns  the environment size expression
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: NXOpen::Expression * SizeExpression
            (
            );
            /**Returns  the image up vector define 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: NXOpen::Display::EnvironmentBuilder::ImageUpVectorTypes ImageUpVectorType
            (
            );
            /**Sets  the image up vector define 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetImageUpVectorType
            (
                NXOpen::Display::EnvironmentBuilder::ImageUpVectorTypes imageUpVector /** imageupvector */ 
            );
            /**Returns  the image up vector direction, relative to the absolute coordinate system 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: NXOpen::Direction * ImageUpVector
            (
            );
            /**Sets  the image up vector direction, relative to the absolute coordinate system 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetImageUpVector
            (
                NXOpen::Direction * imageUpVector /** imageupvector */ 
            );
            /**Returns  the image rotation angle (in degrees) 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: double ImageRotation
            (
            );
            /**Sets  the image rotation angle (in degrees) 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetImageRotation
            (
                double imageRotation /** imagerotation */ 
            );
            /**Returns  whether to fit view to stage 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: bool ViewFitToStage
            (
            );
            /**Sets  whether to fit view to stage 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetViewFitToStage
            (
                bool viewFitToStage /** viewfittostage */ 
            );
            /**Returns  whether to enable ground visibility or not 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: bool GroundVisibility
            (
            );
            /**Sets  whether to enable ground visibility or not 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetGroundVisibility
            (
                bool groundVisibility /** groundvisibility */ 
            );
            /**Returns  the ground orientation define 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::EnvironmentBuilder::GroundPlaneTypes GroundPlaneType
            (
            );
            /**Sets  the ground orientation define 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: void SetGroundPlaneType
            (
                NXOpen::Display::EnvironmentBuilder::GroundPlaneTypes planeType /** planetype */ 
            );
            /**Returns  the specify ground plane 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * SpecifyGroundPlane
            (
            );
            /**Sets  the specify ground plane 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: void SetSpecifyGroundPlane
            (
                NXOpen::Plane * specifyPlane /** specifyplane */ 
            );
            /**Returns  the environment offset expression
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: NXOpen::Expression * OffsetExpression
            (
            );
            /**Returns  whether to enable ground reflection 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: bool GroundReflection
            (
            );
            /**Sets  whether to enable ground reflection 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetGroundReflection
            (
                bool groundReflection /** groundreflection */ 
            );
            /**Returns  the ground reflectivity 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: double Reflectivity
            (
            );
            /**Sets  the ground reflectivity 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetReflectivity
            (
                double reflectivity /** reflectivity */ 
            );
            /**Returns  the intensity of the light effects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: double LightIntensity
            (
            );
            /**Sets  the intensity of the light effects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetLightIntensity
            (
                double lightIntensity /** lightintensity */ 
            );
            /**Returns  the ground glossiness 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: double GroundGlossiness
            (
            );
            /**Sets  the ground glossiness 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetGroundGlossiness
            (
                double groundGlossiness /** groundglossiness */ 
            );
            /** Returns the ground reflection color 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: std::vector<double> GetGroundReflectionColor
            (
            );
            /** Sets the ground reflection color 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetGroundReflectionColor
            (
                const std::vector<double> & groundReflectionColor /** groundreflectioncolor */ 
            );
            /** Saves the attributes and optionally updates the display of image-based lighting 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void CommitAndDisplay
            (
                NXOpen::View * view /** View of the image-based lighting attributes */,
                bool updateIblDisplay /** True if the image-based lighting display should be updated */,
                bool updateEnvCubeDisplay /** True if the cube display should be updated */
            );
            /**Returns  the blurr of the lighting image 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: NXOpen::Display::EnvironmentBuilder::ImageBlurType ImageBlur
            (
            );
            /**Sets  the blurr of the lighting image 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetImageBlur
            (
                NXOpen::Display::EnvironmentBuilder::ImageBlurType imageBlurr /** image blurr */ 
            );
            /**Returns  whether image-based lighting is enabled in Advanced Studio (lwrt) display 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: bool UseLwrtEnvironment
            (
            );
            /**Sets  whether image-based lighting is enabled in Advanced Studio (lwrt) display 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetUseLwrtEnvironment
            (
                bool useLwrtIBL /** uselwrtibl */ 
            );
            /**Returns  whether Advanced Studio display (lwrt) uses individual light sources or image-based lighting for shadow catcher 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: bool UseLightsForShadowCatcherInLwrt
            (
            );
            /**Sets  whether Advanced Studio display (lwrt) uses individual light sources or image-based lighting for shadow catcher 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetUseLightsForShadowCatcherInLwrt
            (
                bool useLightsForShadowCatcherInLwrt /** uselightsforshadowcatcherinlwrt */ 
            );
            /**Returns  the quality of the lwrt image-based lighting light effects 1 to 7 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: double LwrtQuality
            (
            );
            /**Sets  the quality of the lwrt image-based lighting light effects 1 to 7 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetLwrtQuality
            (
                double lwrtQuality /** lwrt quality */ 
            );
            /**Returns  the angle of the lwrt image-based lighting light effects 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: double LwrtAngle
            (
            );
            /**Sets  the angle of the lwrt image-based lighting light effects 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetLwrtAngle
            (
                double lwrtAngle /** lwrt angle */ 
            );
            /**Returns  the intensity of the lwrt image-based lighting light effects 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: double LwrtIntensity
            (
            );
            /**Sets  the intensity of the lwrt image-based lighting light effects 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetLwrtIntensity
            (
                double lwrtIntensity /** lwrt intensity */ 
            );
            /**Returns  the image-based lighting color saturation 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: double ColorSaturation
            (
            );
            /**Sets  the image-based lighting color saturation 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void SetColorSaturation
            (
                double colorSaturation /** color saturation */ 
            );
            /** Updates the data and display for a change to the ground's offset 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void CommitOffset
            (
                NXOpen::View * view /** view */ 
            );
            /** The environment's floor to align with the WCS x-axis 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void FloorXaxis
            (
            );
            /** The environment's floor to align with the WCS y-axis 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void FloorYaxis
            (
            );
            /** The environment's floor to align with the WCS z-axis 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void FloorZaxis
            (
            );
            /** The environment's floor aligns with the given plane. 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : studio_render ("UG STUDIO RENDER") */
            public: void AlignFloorPlane
            (
                NXOpen::Plane * specifyFloorPlane /** specifyfloorplane */ 
            );
            /**Returns  the ground reflection for shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnvironmentShadedViewsShowGroundReflection
            (
            );
            /**Sets  the ground reflection for shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnvironmentShadedViewsShowGroundReflection
            (
                bool enableShadedViewsGroundRefl /** enableshadedviewsgroundrefl */ 
            );
            /**Returns  the ground plane in shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int EnvironmentShadedViewsGroundPlane
            (
            );
            /**Sets  the ground plane in shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnvironmentShadedViewsGroundPlane
            (
                int groundPlane /** ground plane */ 
            );
            /**Returns  the user defined ground plane in shaded mode
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * EnvironmentShadedViewsGroundPlaneCustom
            (
            );
            /**Sets  the user defined ground plane in shaded mode
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnvironmentShadedViewsGroundPlaneCustom
            (
                NXOpen::Plane * groundPlaneCustom /** groundplanecustom */ 
            );
            /**Returns  the global finish in shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int EnvironmentShadedViewsGlobalFinish
            (
            );
            /**Sets  the global finish in shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnvironmentShadedViewsGlobalFinish
            (
                int globalFinish /** global finish */ 
            );
            /**Returns  the ground floor reflectivity in shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double EnvironmentShadedViewsGroundRefReflectivity
            (
            );
            /**Sets  the ground floor reflectivity in shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnvironmentShadedViewsGroundRefReflectivity
            (
                double floorReflectivity /** floor reflectivity */ 
            );
            /**Returns  the ground plane offset in shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double EnvironmentShadedViewsGroundPlaneOffset
            (
            );
            /**Sets  the ground plane offset in shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnvironmentShadedViewsGroundPlaneOffset
            (
                double planeOffset /** plane offset */ 
            );
            /**Returns  the ground plane offset in shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnvironmentShadedViewsFixGroundPlaneOffset
            (
            );
            /**Sets  the ground plane offset in shaded mode 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnvironmentShadedViewsFixGroundPlaneOffset
            (
                bool fixPlaneOffset /** fix plane offset */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
