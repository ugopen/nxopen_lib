#ifndef NXOpen_CAM_THREADTURNINGBUILDER_HXX_INCLUDED
#define NXOpen_CAM_THREADTURNINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ThreadTurningBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_TurningOperationBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class ThreadTurningBuilder;
    }
    namespace CAM
    {
        class CutAngle;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class NcmTurnThreadBuilder;
    }
    namespace CAM
    {
        class ThreadCutParameters;
    }
    namespace CAM
    {
        class TurningOperationBuilder;
    }
    class NXObject;
    namespace CAM
    {
        class _ThreadTurningBuilderBuilder;
        class ThreadTurningBuilderImpl;
        /** Represents a ThreadTurning Builder  <br> To create a new instance of this class, use @link NXOpen::CAM::OperationCollection::CreateThreadTurningBuilder  NXOpen::CAM::OperationCollection::CreateThreadTurningBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  ThreadTurningBuilder : public NXOpen::CAM::TurningOperationBuilder
        {
            /** the input modes */
            public: enum InputModes
            {
                InputModesManual/** Manual */,
                InputModesModelBased/** Model Based */,
                InputModesFromTable/** From Table */
            };

            /** the Infeed modes */
            public: enum InfeedModes
            {
                InfeedModesNone/** None */,
                InfeedModesAuto/** Auto */,
                InfeedModesSpecify/** Specify */
            };

            /** the Infeed Length Types */
            public: enum InfeedLengthTypes
            {
                InfeedLengthTypesAuto/** Auto */,
                InfeedLengthTypesSpecify/** Specify */
            };

            /** the Depth Option types*/
            public: enum DepthOptionTypes
            {
                DepthOptionTypesRootLine/** Root Line */,
                DepthOptionTypesDepthAndAngle/** Depth and Angle */
            };

            private: ThreadTurningBuilderImpl * m_threadturningbuilder_impl;
            private: friend class  _ThreadTurningBuilderBuilder;
            protected: ThreadTurningBuilder();
            public: ~ThreadTurningBuilder();
            /**Returns  the input mode 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ThreadTurningBuilder::InputModes InputMode
            (
            );
            /**Sets  the input mode 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInputMode
            (
                NXOpen::CAM::ThreadTurningBuilder::InputModes inputMode /** the input mode */
            );
            /**Returns  the thread geometry 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * ThreadGeometry
            (
            );
            /**Sets  the thread geometry 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetThreadGeometry
            (
                NXOpen::NXObject * threadGeometry /** the thread geometry */
            );
            /**Returns  the Crest Line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * CrestLine
            (
            );
            /**Sets  the Crest Line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCrestLine
            (
                NXOpen::NXObject * crestLine /** the Crest Line tag*/
            );
            /**Returns  the Crest Line Direction(Start and End Points)
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool CrestLineDirection
            (
            );
            /**Sets  the Crest Line Direction(Start and End Points)
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCrestLineDirection
            (
                bool crestLineDirection /** the Crest Line Direction tag*/
            );
            /**Returns  the Start Offset
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartOffset
            (
            );
            /**Returns  the End Offset
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndOffset
            (
            );
            /**Returns  the crest offset builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * CrestOffset
            (
            );
            /**Returns  the root offset
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * RootOffset
            (
            );
            /**Returns  the infeed mode 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ThreadTurningBuilder::InfeedModes InfeedMode
            (
            );
            /**Sets  the infeed mode 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInfeedMode
            (
                NXOpen::CAM::ThreadTurningBuilder::InfeedModes infeedMode /** the infeed mode */
            );
            /**Returns  the infeed start line angle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * InfeedStartLineAngle
            (
            );
            /**Returns  the infeed move angle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * InfeedMoveAngle
            (
            );
            /**Returns  the infeed length type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ThreadTurningBuilder::InfeedLengthTypes InfeedLengthType
            (
            );
            /**Sets  the infeed length type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInfeedLengthType
            (
                NXOpen::CAM::ThreadTurningBuilder::InfeedLengthTypes infeedLengthType /** the infeed length type */
            );
            /**Returns  the infeed length 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * InfeedLength
            (
            );
            /**Returns  the depth option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ThreadTurningBuilder::DepthOptionTypes DepthOption
            (
            );
            /**Sets  the depth option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDepthOption
            (
                NXOpen::CAM::ThreadTurningBuilder::DepthOptionTypes depthOption /** the depth option */
            );
            /**Returns  the Root Line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * RootLine
            (
            );
            /**Sets  the Root Line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRootLine
            (
                NXOpen::NXObject * rootLine /** the Root Line tag*/
            );
            /**Returns  the Total Depth
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * TotalDepth
            (
            );
            /**Returns  the thread angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutAngle * ThreadAngleBuilder
            (
            );
            /**Returns  the End Line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * EndLine
            (
            );
            /**Sets  the End Line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEndLine
            (
                NXOpen::NXObject * endLine /** the End Line tag*/
            );
            /**Returns  the non-cutting builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmTurnThreadBuilder * NonCuttingBuilder
            (
            );
            /**Returns  the cut parameter object
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ThreadCutParameters * CutParameters
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
