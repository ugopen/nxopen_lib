#ifndef NXOpen_TOOLING_EJECTORRECORDS_HXX_INCLUDED
#define NXOpen_TOOLING_EJECTORRECORDS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_EjectorRecords.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/Tooling_EjectorDesignData.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class EjectorRecords;
    }
    namespace Tooling
    {
        class EjectorDesignData;
    }
    namespace Tooling
    {
        class EjectorRecordsImpl;
        /**
                Represents the ejector record data.
              <br> This object does not need a creator.  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  EjectorRecords : public NXOpen::TransientObject
        {
            private: EjectorRecordsImpl * m_ejectorrecords_impl;
            /// \cond NX_NO_DOC 
            public: explicit EjectorRecords(void *ptr);
            /// \endcond 
            /** Disposes the EjectorRecords object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~EjectorRecords();
            /** Gets the index of the current ejector record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int GetCurrentRecordIndex
            (
            );
            /** Sets the index of the current ejector record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetCurrentRecordIndex
            (
                int index /** index */ 
            );
            /** Adds an ejector record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void AddSingleDesignRecord
            (
                NXOpen::Tooling::EjectorDesignData * designRecord /** A @link NXOpen::Tooling::EjectorDesignData NXOpen::Tooling::EjectorDesignData@endlink  instance */
            );
            /** Inserts a data record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void InsertDesignRecord
            (
                NXOpen::Tooling::EjectorDesignData * designRecord /** A @link NXOpen::Tooling::EjectorDesignData NXOpen::Tooling::EjectorDesignData@endlink  instance */,
                int index /** index */ 
            );
            /** Gets the ejector record by the index  @return  A @link NXOpen::Tooling::EjectorDesignData NXOpen::Tooling::EjectorDesignData@endlink  instance 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::EjectorDesignData * GetSingleDesignRecord
            (
                int index /** index */ 
            );
            /** Adds an ejector record to edit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void AddSingleEditRecord
            (
                NXOpen::Tooling::EjectorDesignData * editRecord /** A @link NXOpen::Tooling::EjectorDesignData NXOpen::Tooling::EjectorDesignData@endlink  instance */
            );
            /** Inserts a data record into the sequence corresponding to index 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void InsertEditRecord
            (
                NXOpen::Tooling::EjectorDesignData * editRecord /** A @link NXOpen::Tooling::EjectorDesignData NXOpen::Tooling::EjectorDesignData@endlink  instance */,
                int index /** index */ 
            );
            /** Gets the selected ejector record by the index  @return  A @link NXOpen::Tooling::EjectorDesignData NXOpen::Tooling::EjectorDesignData@endlink  instance 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::EjectorDesignData * GetSingleEditRecord
            (
                int index /** index */ 
            );
            /** Gets the current ejector record  @return  A @link NXOpen::Tooling::EjectorDesignData NXOpen::Tooling::EjectorDesignData@endlink  instance 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::EjectorDesignData * GetCurrentDesignRecord
            (
            );
            /** Clears the data record all of the ejector pin. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void ClearDesignRecords
            (
            );
            /** Clears the data record of the selected ejector pin. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void ClearEditRecords
            (
            );
            /** Erases the ejector record by the index. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void EraseDesignRecord
            (
                int index /** index */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
