#ifndef NXOpen_CAE_ACOUSTICSANDVIBRATIONCROSSPOWERDATACOMPONENTACCESSOR_HXX_INCLUDED
#define NXOpen_CAE_ACOUSTICSANDVIBRATIONCROSSPOWERDATACOMPONENTACCESSOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AcousticsAndVibrationCrossPowerDataComponentAccessor.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DataReaderDatabaseOptions.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class AcousticsAndVibrationCrossPowerDataComponentAccessor;
    }
    namespace CAE
    {
        class DataReaderDatabaseOptions;
    }
    class NXObject;
    namespace CAE
    {
        class _AcousticsAndVibrationCrossPowerDataComponentAccessorBuilder;
        class AcousticsAndVibrationCrossPowerDataComponentAccessorImpl;
        /**
            Builds a @link NXOpen::CAE::AcousticsAndVibrationCrossPowerDataComponentAccessor NXOpen::CAE::AcousticsAndVibrationCrossPowerDataComponentAccessor@endlink  object
            
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  AcousticsAndVibrationCrossPowerDataComponentAccessor : public NXOpen::NXObject
        {
            /** the SVD Filter Type selection enum */
            public: enum SvdFilterTypeEnum
            {
                SvdFilterTypeEnumRelativeThreshold/** relative threshold */ ,
                SvdFilterTypeEnumNumberOfSingularValues/** number of singular values */ 
            };

            private: AcousticsAndVibrationCrossPowerDataComponentAccessorImpl * m_acousticsandvibrationcrosspowerdatacomponentaccessor_impl;
            private: friend class  _AcousticsAndVibrationCrossPowerDataComponentAccessorBuilder;
            protected: AcousticsAndVibrationCrossPowerDataComponentAccessor();
            public: ~AcousticsAndVibrationCrossPowerDataComponentAccessor();
            /**Returns  the File Path
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FilePath
            (
            );
            /**Sets  the File Path
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFilePath
            (
                const NXString & filePath /** filepath */ 
            );
            /**Sets  the File Path
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetFilePath
            (
                const char * filePath /** filepath */ 
            );
            /**Returns  the database options 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DataReaderDatabaseOptions * DatabaseOptions
            (
            );
            /** Read data from the input file 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ReadFile
            (
            );
            /**Returns  the selected auto power subcase
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedAutoPowerSubcase
            (
            );
            /**Sets  the selected auto power subcase
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSelectedAutoPowerSubcase
            (
                const NXString & selectedAutoPowerSubcase /** selectedautopowersubcase */ 
            );
            /**Sets  the selected auto power subcase
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetSelectedAutoPowerSubcase
            (
                const char * selectedAutoPowerSubcase /** selectedautopowersubcase */ 
            );
            /**Returns  the selected cross power subcase
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedCrossPowerSubcase
            (
            );
            /**Sets  the selected cross power subcase
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSelectedCrossPowerSubcase
            (
                const NXString & selectedCrossPowerSubcase /** selectedcrosspowersubcase */ 
            );
            /**Sets  the selected cross power subcase
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetSelectedCrossPowerSubcase
            (
                const char * selectedCrossPowerSubcase /** selectedcrosspowersubcase */ 
            );
            /**Returns  the automatic node selection 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticNodeSelection
            (
            );
            /**Sets  the automatic node selection 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetAutomaticNodeSelection
            (
                bool automaticNodeSelection /** automaticnodeselection */ 
            );
            /** Set reference nodes 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetReferenceNodes
            (
                const std::vector<int> & nodeIds /** nodeids */ 
            );
            /** Set response nodes 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResponseNodes
            (
                const std::vector<int> & nodeIds /** nodeids */ 
            );
            /**Returns  the SVD relative tolerance in percent 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double SvdRelativeTolerance
            (
            );
            /**Sets  the SVD relative tolerance in percent 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSvdRelativeTolerance
            (
                double svdRelativeTolerance /** svdrelativetolerance */ 
            );
            /**Returns  the number of singular values to use for SVD computation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int SvdNumSingularValues
            (
            );
            /**Sets  the number of singular values to use for SVD computation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSvdNumSingularValues
            (
                int svdNumSingularValues /** svdnumsingularvalues */ 
            );
            /**Returns  the SVD method 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AcousticsAndVibrationCrossPowerDataComponentAccessor::SvdFilterTypeEnum SvdFilterType
            (
            );
            /**Sets  the SVD method 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSvdFilterType
            (
                NXOpen::CAE::AcousticsAndVibrationCrossPowerDataComponentAccessor::SvdFilterTypeEnum quantity /** quantity */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
