#ifndef NXOpen_CAE_POSTSCENARIODESCRIPTORBUILDER_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIODESCRIPTORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioDescriptorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostScenarioTypes.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostScenarioDescriptorBuilder;
    }
    class BasePart;
    class Builder;
    namespace CAE
    {
        class PostScenarioAggregationInput;
    }
    namespace CAE
    {
        class PostScenarioAggregationOutput;
    }
    namespace CAE
    {
        class PostScenarioConfigurationVariableCallbackContext;
    }
    namespace CAE
    {
        class PostScenarioDataMatchOutput;
    }
    namespace CAE
    {
        class PostScenarioDataMatchesInput;
    }
    namespace CAE
    {
        class PostScenarioMessageCollector;
    }
    namespace CAE
    {
        class PostScenarioQueryContext;
    }
    namespace CAE
    {
        class PostScenarioQueryResults;
    }
    namespace CAE
    {
        class PostScenarioSelectionCallbackContext;
    }
    namespace CAE
    {
        class PostScenarioValueCollector;
    }
    namespace CAE
    {
        class _PostScenarioDescriptorBuilderBuilder;
        class PostScenarioDescriptorBuilderImpl;
        /**  @brief  This class represents a builder for Post Scenario Descriptors.  

         

                
                 <br> 
                A @link CAE::PostScenario CAE::PostScenario@endlink  visualization is based on a @link CAE::PostScenarioDescriptor CAE::PostScenarioDescriptor@endlink 
                which acts as a processing template on top of data coming from a @link CAE::DataSource CAE::DataSource@endlink .
                 <br> 
                 <br> 
                This class allows you to define your own scenario descriptors (or, processing templates) to implement
                user-specific advanced post-processing techniques on available data.
                 <br> 
                 <br> 
                A scenario descriptor is made out of two parts:
                <ol>
                <li>a declarative part, in this case an XML file following the scenarios.dtd schema</li>
                <li>an interactive part, in this case a set of NXOpen callbacks</li>
                </ol>
                 <br> 
                 <br> 
                The Scenario-based Data Visualization subsystem performs queries to the specification of your
                XML file and performs the necessary joins. In some cases, the interactive part of your scenario
                descriptor may jump in to pre-process the query parameters. The XML file is used as a basis
                for generating User Interface withing the Scenario-based Data Visualization Navigator.
                 <br> 
                 <br> 
                After a query is performed following a user's choice (or, the choice of an NXOpen Program), your
                main callback, the Transformation Function, is invoked. The input to this callback consists of the
                data sets picked by the user, a context parameter that provides you with any optionally selected
                FE models, and an output parameter which represents the data that will be plotted.
                 <br> 
                 <br> 
                The advantage of this system is that it allows NXOpen programmers to have control over data queries
                against @link CAE::DataSource CAE::DataSource@endlink  objects in order to perform mathematical transformations
                on this data to better help understand the results. Through the @link CAE::DataSource CAE::DataSource@endlink  you
                have access to a number of file formats, and through the available @link CAE::PostScenarioVisualizationDefinition CAE::PostScenarioVisualizationDefinition@endlink 
                your scenario descriptor is empowered to create advanced post-processing visualizations via a common API.
                In this way, data acquisition and data display are abstracted behind a common API, making on-the-fly 
                visualization switching straight forward.
                 <br> 
                 <br> 
                The intention of this API is to be invoked as part of the  @code ufsta @endcode / @code Startup @endcode 
                mechanism of NXOpen Programs (see UGII_USER_DIR/startup), or via File -> Execute -> NXOpen Program
                and File -> Execute -> Unload Shared Library. Feel free to consult the examples in UGII_BASE_DIR/ugopen/SampleNXOpenPrograms
                for the two techniques used to define scenario descriptors as NXOpen plugins.
                 <br> 
                 <br> 
                If using the  @code ufsta @endcode  or  @code Startup @endcode  mechanism, register a Part Open and
                Part Create callback, and use the Scenario Descriptor Builder at part open/creation time to
                ensure you scenario descriptor is available.
                 <br> 
                 <br> 
                If using the File -> Execute -> NXOpen Program mechanism, ensure your NXOpen program has proper
                cleanup code written to gracefully handle File -> Execute -> Unload Shared Library. See the example
                programs for a reference. This mechanism allows you to load scenarios on-the-fly as needed instead
                of loading them all at part creation time; it is most useful for development. Note, not all languages
                are supported by File -> Execute -> NXOpen Program.
                 <br> 
                
              <br> No support for KF.  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostScenarioDescriptorBuilder : public NXOpen::Builder
        {
            public: /** Called to retrieve information about this scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<NXString> DescriptionCallback;
            public: /**  @brief Called to allow the scenario to perform transformations on the queried data. 

             
                    
                        
                         <br> 
                        This callback gets called after data is queried and prepared for your
                        scenario to apply further transformations to it, and to prepare it for
                        your chosen @link CAE::PostScenarioVisualizationDefinition CAE::PostScenarioVisualizationDefinition@endlink .
                         <br> 
                         <br> 
                        It is expected that your transformation callback processes data in <tt>input</tt>
                        conforming to your intrinsic rules, and populates <tt>output</tt> in a way that conforms
                        to the target @link CAE::PostScenarioVisualizationDefinition CAE::PostScenarioVisualizationDefinition@endlink .
                         <br> 
                         <br> 
                        If your scenario does not support or it does not consider the <tt>input</tt> data
                        to be valid at a high level, it is expected that you leave the <tt>output</tt> parameter
                        untouched and log your error message via @link CAE::PostScenarioMessageCollector::Warning CAE::PostScenarioMessageCollector::Warning@endlink 
                        retrievable through @link CAE::PostScenarioQueryContext::MessageCollector CAE::PostScenarioQueryContext::MessageCollector@endlink .
                         <br> 
                        
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback4<void, NXOpen::BasePart *, NXOpen::CAE::PostScenarioQueryResults *, NXOpen::CAE::PostScenarioQueryContext *, NXOpen::CAE::PostScenarioQueryResults *> TransformationCallback;
            public: /**  @brief Called to allow the scenario to perform transformations on deformations of the query data. 

             

                        
                        This callback is used alongside the @link CAE::PostScenarioDescriptorBuilder::TransformationCallback CAE::PostScenarioDescriptorBuilder::TransformationCallback@endlink .
                        It should apply the same type of transformation, on the <tt>deformations</tt> of the queried data, that the
                        @link CAE::PostScenarioDescriptorBuilder::TransformationCallback CAE::PostScenarioDescriptorBuilder::TransformationCallback@endlink  applies and populate the 
                        <tt>output</tt> in a way that conforms to the target @link CAE::PostScenarioVisualizationDefinition CAE::PostScenarioVisualizationDefinition@endlink .
                        Also, the same amount of records, with the same independent and selection variables, but 
                        with a dependent variable that is a displacement with three degrees of freedom, should be 
                        provided as <tt>input</tt>.
                         <br> 
                        If your scenario does not support or it does not consider the <tt>deformations</tt>
                        to be valid at a high level, it is expected that you leave the <tt>output</tt> parameter
                        untouched and log your error message via @link CAE::PostScenarioMessageCollector::Warning CAE::PostScenarioMessageCollector::Warning@endlink 
                        retrievable through @link CAE::PostScenarioQueryContext::MessageCollector CAE::PostScenarioQueryContext::MessageCollector@endlink .
                         <br> 
                        
                      
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback5<void, NXOpen::BasePart *, NXOpen::CAE::PostScenarioQueryResults *, NXOpen::CAE::PostScenarioQueryResults *, NXOpen::CAE::PostScenarioQueryContext *, NXOpen::CAE::PostScenarioQueryResults *> DeformationTransformationCallback;
            public: /**  @brief Called to allow the scenario to perform transformations on the result coordinate systems of the queried data. 

             

                        
                         <br> 
                        This callback is used alongside the @link CAE::PostScenarioDescriptorBuilder::TransformationCallback CAE::PostScenarioDescriptorBuilder::TransformationCallback@endlink .
                        It should apply the same type of transformation, on the <tt>orientations</tt> of the queried data, that the
                        @link CAE::PostScenarioDescriptorBuilder::TransformationCallback CAE::PostScenarioDescriptorBuilder::TransformationCallback@endlink  applies and populate the 
                        <tt>output</tt> in a way that conforms to the target @link CAE::PostScenarioVisualizationDefinition CAE::PostScenarioVisualizationDefinition@endlink .
                        Also, the same amount of records, with the same independent and selection variables, but 
                        with a dependent variable that is a scalar <tt>coordinate system type</tt> variant, should be 
                        provided as <tt>input</tt>. 
                         <br> 
                         <br> 
                        If your scenario does not support or it does not consider the <tt>orientations</tt>
                        to be valid at a high level, it is expected that you leave the <tt>output</tt> parameter
                        untouched and log your error message via @link CAE::PostScenarioMessageCollector::Warning CAE::PostScenarioMessageCollector::Warning@endlink 
                        retrievable through @link CAE::PostScenarioQueryContext::MessageCollector CAE::PostScenarioQueryContext::MessageCollector@endlink .
                         <br> 
                        
                      
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback5<void, NXOpen::BasePart *, NXOpen::CAE::PostScenarioQueryResults *, NXOpen::CAE::PostScenarioQueryResults *, NXOpen::CAE::PostScenarioQueryContext *, NXOpen::CAE::PostScenarioQueryResults *> OrientationTransformationCallback;
            public: /**  @brief This callback is used to retrieve values for choice-type configuration variables 

             
                    
                        
                         <br> 
                        This callback gets called to provide data for <tt>ConfigurationVariable</tt>s of 
                        type <tt>choice</tt> or <tt>multi_choice</tt>.
                         <br> 
                         <br> 
                        It is expected that you return at least one value.
                         <br> 
                         <br> 
                        The effect of a choice configuration variable is that the user will be presented
                        with a list of values when setting up a scenario (see @link CAE::PostScenarioBuilder CAE::PostScenarioBuilder@endlink ).
                        After the user binds values to that variable, your Transformation Functions (see @link CAE::PostScenarioDescriptorBuilder::AddTransformationCallback CAE::PostScenarioDescriptorBuilder::AddTransformationCallback@endlink )
                        will see these values in the @link CAE::PostScenarioConfigurationGroup CAE::PostScenarioConfigurationGroup@endlink . The key
                        will match your variable's name, and the values will be one or more of the values as returned by
                        this callback (depending on whether the type is <tt>choice</tt> or <tt>multi_choice</tt>).
                         <br> 
                        
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<void, NXOpen::BasePart *, NXOpen::CAE::PostScenarioConfigurationVariableCallbackContext *, NXOpen::CAE::PostScenarioValueCollector *> ChoiceProviderCallback;
            public: /**  @brief This callback is used disable variables (c.f. @link CAE::PostScenarioSelectionParameters CAE::PostScenarioSelectionParameters@endlink ) based on the value of configuration variables. 

             
                    
                        
                         <br> 
                        This callback gets called in GUI context to allow graying out some @link CAE::PostScenarioConfigurationVariable CAE::PostScenarioConfigurationVariable@endlink  or @link CAE::PostScenarioVariable CAE::PostScenarioVariable@endlink 
                        based on the value of a @link CAE::PostScenarioConfigurationVariable CAE::PostScenarioConfigurationVariable@endlink .
                         <br> 
                         <br> 
                        This is done in conjunction with the "sensitivity" type relation from the XML descriptor.
                         <br> 
                         <br> 
                        This function returns a boolean True value if the "To" variables are to be disabled.
                         <br> 
                         <br> 
                        The input are the bound values to the "From" @link CAE::PostScenarioConfigurationVariable CAE::PostScenarioConfigurationVariable@endlink .
                         <br> 
                         <br> 
                        Multiple "sensitivity" relations can affect the same "To" variables, in which case the totality of
                        relations trying to disable a "To" variable will be evaluated in a boolean <tt>OR</tt> expression.
                        You can think of this set of relations affecting the same variables as <tt>enabled = R1 NOR R2 NOR R3 ...</tt>
                        which allows you to build more complex interaction between multiple @link CAE::PostScenarioConfigurationVariable CAE::PostScenarioConfigurationVariable@endlink s.
                         <br> 
                         <br> 
                        A disabled @link CAE::PostScenarioVariable CAE::PostScenarioVariable@endlink  implies all values are selected by the GUI.
                         <br> 
                        
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<bool, NXOpen::BasePart *, NXOpen::CAE::PostScenarioConfigurationVariableCallbackContext *, NXOpen::CAE::PostScenarioValueCollector *> SensitivityCallback;
            public: /**  @brief  
                            Called to allow the scenario to override matching data.
                         

             
                   
                        
                             <br> 
                                There are two callbacks using the signature of this callback. That being said, the callback gets called 
                                in two ways :
                                <ol>
                                    <li> 
                                        The DEFAULT_MATCH_OVERRIDE instance is called when scenarios are matched to data source in order to 
                                        generate the  default match. This default match is what the user sees when he creates such a scenario. 
                                    </li>
                                    <li> 
                                        The DATA_DEFINITION_CHANGED_OVERRIDE instance is called whenever the user changes a data source or data 
                                        definition on a slot in the GUI. Called whenever the user changes any data source/data definition 
                                        allocation. The scenario can intervene and change the allocations for the other slots so as to avoid 
                                        any potential 'selected data sources cannot be used to plot data' warnings.
                                        For example, if there is a dependency between two slots to use the same dependent type, and the user 
                                        changes one slot, this callback can update the other slot to a compatible associations.
                                        For the slot that was just changed, the callback will receive only one option (the selected one). 
                                    </li>
                                </ol>
                             <br> 
                             <br> 
                                The callback returns @link NXOpen::CAE::DataMatchOverrideResult::Override NXOpen::CAE::DataMatchOverrideResult::Override@endlink  if there is 
                                an action.
                                Note: the arguments are guaranteed to never be null and are properly initialized objects.
                             <br> 
                             <br> 
                                The callback can return @link NXOpen::CAE::DataMatchOverrideResult::UseDefault NXOpen::CAE::DataMatchOverrideResult::UseDefault@endlink  if an 
                                action needn't be taken.
                                Note: you can use the MessageCollector argument to signal warnings or to write to the listing window. 
                                For example, explaining why matches are impossible.
                                Note: if you return @link NXOpen::CAE::DataMatchOverrideResult::UseDefault NXOpen::CAE::DataMatchOverrideResult::UseDefault@endlink , the output 
                                parameter is ignored.
                                Note: don't use this if you have a mesh definition that accepts a multi selection.
                                NOTE: it is not defined what happens if the output parameter is wrong. Make sure you correctly set OverrideDefaultMatchOutput 
                                correctly, i.e. one association per slot from those listed in matches for each slot. If your code fails to do so, 
                                you must return @link NXOpen::CAE::DataMatchOverrideResult::UseDefault NXOpen::CAE::DataMatchOverrideResult::UseDefault@endlink  to let APPPP handle the case properly.
                             <br> 
                        
                      
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback4<NXOpen::CAE::DataMatchOverrideResult, NXOpen::BasePart *, NXOpen::CAE::PostScenarioDataMatchesInput *, NXOpen::CAE::PostScenarioMessageCollector *, NXOpen::CAE::PostScenarioDataMatchOutput *> OverrideMatchCallback;
            public: /**  @brief 
                            Called to allow scenarios to provide custom behavior for aggregating variables. 
                         

             
                        
                        You will recieve as input information about the variables to aggregate and the available 
                        values. The variables that are being aggregated are described in your scenario XML file under
                        the \<AggregatedSelectionVariable\> element.

                        The resulting aggregated variable will replace the slot variables in the UI. The output must contain the 
                        following information:
                        <ul>
                            <li>The descriptive data about the resulting aggregated variable</li>
                            <li>The resulting aggregated values of the variable</li>
                            <li>Reverse mapping of the aggregated values to the original values for each slot variable in the input</li>
                        </ul>
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback4<void, NXOpen::BasePart *, NXOpen::CAE::PostScenarioAggregationInput *, NXOpen::CAE::PostScenarioMessageCollector *, NXOpen::CAE::PostScenarioAggregationOutput *> AggregationCallback;
            public: /**  @brief 
                                This callback is used to override the default selected value of a certain selection variable.
                          

                         

                        
                                <br> This callback is called when the scenario is first created. <br> 
                                <br> The selectedValues must be populated with values from allValues parameter.
                               Error will be raised by the framework otherwise. <br> 
                        
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback4<void, NXOpen::BasePart *, NXOpen::CAE::PostScenarioValueCollector *, NXOpen::CAE::PostScenarioSelectionCallbackContext *, NXOpen::CAE::PostScenarioValueCollector *> OverrideDefaultSelectionCallback;
            private: PostScenarioDescriptorBuilderImpl * m_postscenariodescriptorbuilder_impl;
            private: friend class  _PostScenarioDescriptorBuilderBuilder;
            protected: PostScenarioDescriptorBuilder();
            public: ~PostScenarioDescriptorBuilder();
            /**Returns  the path to an XML file describing the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString XmlPath
            (
            );
            /**Sets  the path to an XML file describing the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetXmlPath
            (
                const NXString & path /** path */ 
            );
            /**Sets  the path to an XML file describing the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetXmlPath
            (
                const char * path /** path */ 
            );
            /**Returns  the contents of an XML document that describes the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString XmlText
            (
            );
            /**Sets  the contents of an XML document that describes the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetXmlText
            (
                const NXString & text /** text */ 
            );
            /**Sets  the contents of an XML document that describes the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetXmlText
            (
                const char * text /** text */ 
            );
            /**  @brief Add a description callback 

             

                        
                        This callback allows your scenario to summarily describe itself.
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddDescriptionCallback
            (
                const NXOpen::CAE::PostScenarioDescriptorBuilder::DescriptionCallback&  cb /** cb */ 
            );
            /**  @brief Add a transformation callback 

             

                        
                        This callback gets called after data is queried and prepared for your
                        scenario to apply further transformations to it, and to prepare it for
                        your chosen @link CAE::PostScenarioVisualizationDefinition CAE::PostScenarioVisualizationDefinition@endlink .
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddTransformationCallback
            (
                const NXOpen::CAE::PostScenarioDescriptorBuilder::TransformationCallback&  cb /** cb */ 
            );
            /**  @brief Add a deformation transformation callback 

             
                        
                        
                        This callback is used alongsides the @link CAE::PostScenarioDescriptorBuilder::TransformationCallback CAE::PostScenarioDescriptorBuilder::TransformationCallback@endlink , which
                        is processed first, and prepares the deformations for your chosen @link CAE::PostScenarioVisualizationDefinition CAE::PostScenarioVisualizationDefinition@endlink .
                        
                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddDeformationTransformationCallback
            (
                const NXOpen::CAE::PostScenarioDescriptorBuilder::DeformationTransformationCallback&  cb /** cb */ 
            );
            /**  @brief Add an orientation transformation callback 

             

                        
                        This callback allows you to process and apply further transformations
                        to the result coordinate systems.
                        
                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddOrientationTransformationCallback
            (
                const NXOpen::CAE::PostScenarioDescriptorBuilder::OrientationTransformationCallback&  cb /** cb */ 
            );
            /**  @brief Add a choice provider callback 

             

                        
                        The callback is mapped to a Configuration Variable of type <tt>choice</tt> or <tt>multi_choice</tt> by
                        an ID that is unique within this scenario. The same ID must appear in the <tt>callback</tt> attribute of
                        your Configuration Variable in the XML descriptor, as well as in your NXOpen method call. The same
                        ID will appear as a key in the @link CAE::PostScenarioConfigurationGroup CAE::PostScenarioConfigurationGroup@endlink  of your
                        @link CAE::PostScenarioQueryResults CAE::PostScenarioQueryResults@endlink  in your transformation function.
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddChoiceProviderCallback
            (
                const NXString & name /** the ID of this choice provider; this should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::ChoiceProviderCallback&  cb /** cb */ 
            );
            /**  @brief Add a choice provider callback 

             

                        
                        The callback is mapped to a Configuration Variable of type <tt>choice</tt> or <tt>multi_choice</tt> by
                        an ID that is unique within this scenario. The same ID must appear in the <tt>callback</tt> attribute of
                        your Configuration Variable in the XML descriptor, as well as in your NXOpen method call. The same
                        ID will appear as a key in the @link CAE::PostScenarioConfigurationGroup CAE::PostScenarioConfigurationGroup@endlink  of your
                        @link CAE::PostScenarioQueryResults CAE::PostScenarioQueryResults@endlink  in your transformation function.
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void AddChoiceProviderCallback
            (
                const char * name /** the ID of this choice provider; this should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::ChoiceProviderCallback&  cb /** cb */ 
            );
            /**  @brief Add a sensitivity callback 

             

                        
                        The callback is mapped to a Relation by
                        an ID that is unique within this scenario. The same ID must appear in the <tt>Callback</tt> element's id attribute of
                        your Relation in the XML descriptor, as well as in your NXOpen method call. The same
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddSensitivityCallback
            (
                const NXString & name /** the ID of this sensitivity callback; this should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::SensitivityCallback&  cb /** cb */ 
            );
            /**  @brief Add a sensitivity callback 

             

                        
                        The callback is mapped to a Relation by
                        an ID that is unique within this scenario. The same ID must appear in the <tt>Callback</tt> element's id attribute of
                        your Relation in the XML descriptor, as well as in your NXOpen method call. The same
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void AddSensitivityCallback
            (
                const char * name /** the ID of this sensitivity callback; this should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::SensitivityCallback&  cb /** cb */ 
            );
            /**  @brief  
                            Add a default match override callback
                         

             

                        
                            Called when scenarios are matched to data source in order to generate the default match.
                            This default match is what the user sees when he creates such a scenario.
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddDefaultMatchOverrideCallback
            (
                const NXOpen::CAE::PostScenarioDescriptorBuilder::OverrideMatchCallback&  cb /** cb */ 
            );
            /**  @brief  
                            Add a data definition changed override callback
                         

             

                        
                           Called whenever the user changes a data source or data definition on a slot in the GUI. 
                           Also called whenever the user changes any data source/data definition allocation.
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddDataDefinitionChangedOverrideCallback
            (
                const NXOpen::CAE::PostScenarioDescriptorBuilder::OverrideMatchCallback&  cb /** cb */ 
            );
            /**  @brief 
                            Add an aggregation callback.
                         

             

                        
                            The name of this callback is used as a unique ID and must match the "callback" attribute value of your
                            \<AggregatedSelectionVariable\> in your scenario XML.
                        
                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddAggregationCallback
            (
                const NXString & name /** The ID of this aggregation callback. This should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::AggregationCallback&  cb /** The callback. */
            );
            /**  @brief 
                            Add an aggregation callback.
                         

             

                        
                            The name of this callback is used as a unique ID and must match the "callback" attribute value of your
                            \<AggregatedSelectionVariable\> in your scenario XML.
                        
                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void AddAggregationCallback
            (
                const char * name /** The ID of this aggregation callback. This should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::AggregationCallback&  cb /** The callback. */
            );
            /**  @brief 
                            Adds an override default selection callback.
                         

             

                        
                            The name of this callback is used as a unique ID and must match the "overrideDefaultSelectionCallback" attribute value of your
                            \<SelectionVariable\> and/or \<AggregatedSelectionVariable\> in your scenario XML.
                        
                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddOverrideDefaultSelectionCallback
            (
                const NXString & name /** The ID of this override default selection callback. This should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::OverrideDefaultSelectionCallback&  cb /** The callback. */
            );
            /**  @brief 
                            Adds an override default selection callback.
                         

             

                        
                            The name of this callback is used as a unique ID and must match the "overrideDefaultSelectionCallback" attribute value of your
                            \<SelectionVariable\> and/or \<AggregatedSelectionVariable\> in your scenario XML.
                        
                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void AddOverrideDefaultSelectionCallback
            (
                const char * name /** The ID of this override default selection callback. This should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::OverrideDefaultSelectionCallback&  cb /** The callback. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
