#ifndef NXOpen_JTCREATOR_HXX_INCLUDED
#define NXOpen_JTCREATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     JtCreator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ListCreator.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class JtCreator;
    class Builder;
    class ListCreator;
    class ListCreatorList;
    class _JtCreatorBuilder;
    class JtCreatorImpl;
    /**
        Represents a @link NXOpen::JtCreator NXOpen::JtCreator@endlink  to be used when exporting the JT Data
        This class is created using @link NXOpen::PvtransManager NXOpen::PvtransManager@endlink .
        NULL object will be returned from Commit()
         <br> To create a new instance of this class, use @link NXOpen::PvtransManager::CreateJtCreator  NXOpen::PvtransManager::CreateJtCreator @endlink  <br> 
     <br>  Created in NX8.5.0.  <br>  
    */
    class NXOPENCPPEXPORT  JtCreator : public NXOpen::Builder
    {
        /** Chordal Option */
        public: enum ChordalValue
        {
            ChordalValueRelative/**  RELATIVE */,
            ChordalValueAbsolute/**  ABSOLUTE */
        };

        /** JT File Structue */
        public: enum FileStructure
        {
            FileStructurePerPart/**  PER_PART */,
            FileStructureMonolithic/**  MONOLITHIC */,
            FileStructureFullShatter/**  FULL_SHATTER */,
            FileStructureMimic/**  MIMIC */,
            FileStructurePlmxml/**  JTs with PLMXML */,
            FileStructureAp242xml/**  JTs with AP242XML */
        };

        /** JT File Write*/
        public: enum FileWrite
        {
            FileWriteAll/**  ALL */,
            FileWritePartsOnly/**  PARTS_ONLY */,
            FileWriteAssemblyOnly/**  ASM_ONLY */
        };

        /** Include PMI options*/
        public: enum PmiOption
        {
            PmiOptionNone/**  NONE */,
            PmiOptionPartOnly/**  PARTS_ONLY */,
            PmiOptionAsmOnly/**  ASM_ONLY */,
            PmiOptionPartAndAsm/**  PARTS_AND_ASM */,
            PmiOptionThisLevelOnly/**  THIS_LEVEL_ONLY */
        };

        /** refset Options*/
        public: enum RefsetOption
        {
            RefsetOptionDefault/**  DEFAULT */,
            RefsetOptionAll/**  ALL */,
            RefsetOptionAllNamed/**  ALL_NAMED */,
            RefsetOptionAsSpecified/**  AS_SPECIFIED */
        };

        /** Tessellation Option */
        public: enum TessellationOption
        {
            TessellationOptionLw/**  nx lw level */,
            TessellationOptionNx/**  nx level */,
            TessellationOptionDefined/**  defined level */
        };

        /** Texture quality */
        public: enum AdvancedMaterials
        {
            AdvancedMaterialsNone/**  NONE */,
            AdvancedMaterialsLow/**  LOW */,
            AdvancedMaterialsHigh/** HIGH */
        };

        private: JtCreatorImpl * m_jtcreator_impl;
        private: friend class  _JtCreatorBuilder;
        protected: JtCreator();
        public: ~JtCreator();
        /**Returns  the output file - the name of jt file where output is being written 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString OutputJtFile
        (
        );
        /**Sets  the output file - the name of jt file where output is being written 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetOutputJtFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the output file - the name of jt file where output is being written 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetOutputJtFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the ConfigFile file - the name of configuration file which used in translation 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString ConfigFile
        (
        );
        /**Sets  the ConfigFile file - the name of configuration file which used in translation 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetConfigFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the ConfigFile file - the name of configuration file which used in translation 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetConfigFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the chordal option - Specifies wheather the chordal value should be RELATIVE or ABSOLUTE 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JtCreator::ChordalValue ChordalOption
        (
        );
        /**Sets  the chordal option - Specifies wheather the chordal value should be RELATIVE or ABSOLUTE 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetChordalOption
        (
            NXOpen::JtCreator::ChordalValue chordalOption /** chordaloption */ 
        );
        /**Returns  the autolowLOD *- Specifies wheather autoLOW LOD generation is ON or OFF 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool AutolowLod
        (
        );
        /**Sets  the autolowLOD *- Specifies wheather autoLOW LOD generation is ON or OFF 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetAutolowLod
        (
            bool autolowLOD /** autolowlod */ 
        );
        /**Returns  the smartLOD * - Specifies wheather smart LOD generation is ON or OFF 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool SmartLod
        (
        );
        /**Sets  the smartLOD * - Specifies wheather smart LOD generation is ON or OFF 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetSmartLod
        (
            bool smartLOD /** smartlod */ 
        );
        /**Returns  the wireFrame * - Controls translation of wireframe and point entities to JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool WireFrame
        (
        );
        /**Sets  the wireFrame * - Controls translation of wireframe and point entities to JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetWireFrame
        (
            bool wireFrame /** wireframe */ 
        );
        /**Returns  the mergeSheets * - Specifies whether all sheets are written to a single node or separate node in JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool MergeSheets
        (
        );
        /**Sets  the mergeSheets * - Specifies whether all sheets are written to a single node or separate node in JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetMergeSheets
        (
            bool mergeSheets /** mergesheets */ 
        );
        /**Returns  the mergeSolids * - Specifies whether all solids are written to a single node or separate node in JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool MergeSolids
        (
        );
        /**Sets  the mergeSolids * - Specifies whether all solids are written to a single node or separate node in JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetMergeSolids
        (
            bool mergeSolids /** mergesolids */ 
        );
        /**Returns  the preciseGeom * - Specifies whether precise model geometry should be Enabled or Disabled in translated 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool PreciseGeom
        (
        );
        /**Sets  the preciseGeom * - Specifies whether precise model geometry should be Enabled or Disabled in translated 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetPreciseGeom
        (
            bool preciseGeom /** precisegeom */ 
        );
        /**Returns  the appendRefset * - Specifies whether name of the reference set should be appended to the name of component node in JT product structure 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool AppendRefset
        (
        );
        /**Sets  the appendRefset * - Specifies whether name of the reference set should be appended to the name of component node in JT product structure 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetAppendRefset
        (
            bool appendRefset /** appendrefset */ 
        );
        /**Returns  the applytoPMI * - Includes only PMI data in the reference set being translated for translation 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool ApplyPmi
        (
        );
        /**Sets  the applytoPMI * - Includes only PMI data in the reference set being translated for translation 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetApplyPmi
        (
            bool applyPMI /** applypmi */ 
        );
        /**Returns  the advancedMaterial *- Specifies whether advanced material and light information to be written in JT 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JtCreator::AdvancedMaterials AdvancedMaterial
        (
        );
        /**Sets  the advancedMaterial *- Specifies whether advanced material and light information to be written in JT 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetAdvancedMaterial
        (
            NXOpen::JtCreator::AdvancedMaterials advancedMaterial /** advancedmaterial */ 
        );
        /**Returns  the jtFileStructure * - Determines the organization of the JT files on the disk 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JtCreator::FileStructure JtfileStructure
        (
        );
        /**Sets  the jtFileStructure * - Determines the organization of the JT files on the disk 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetJtfileStructure
        (
            NXOpen::JtCreator::FileStructure fileStructure /** filestructure */ 
        );
        /**Returns  the jtWrite * - Allows to choose between writing Assembly and PArt data to the JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JtCreator::FileWrite JtWrite
        (
        );
        /**Sets  the jtWrite * - Allows to choose between writing Assembly and PArt data to the JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetJtWrite
        (
            NXOpen::JtCreator::FileWrite jtfileType /** jtfiletype */ 
        );
        /**Returns  the includePMI * - Specifies which product manufacturing information data is written to JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JtCreator::PmiOption IncludePmi
        (
        );
        /**Sets  the includePMI * - Specifies which product manufacturing information data is written to JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludePmi
        (
            NXOpen::JtCreator::PmiOption includePmi /** includepmi */ 
        );
        /**Returns  the useRefset * - Specifies from which reference the data should be written to JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JtCreator::RefsetOption UseRefset
        (
        );
        /**Sets  the useRefset * - Specifies from which reference the data should be written to JT file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetUseRefset
        (
            NXOpen::JtCreator::RefsetOption useRefset /** userefset */ 
        );
        /** Creates a @link NXOpen::ListCreator NXOpen::ListCreator@endlink  object. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ListCreator * NewLevel
        (
        );
        /**Returns  the lodList - the list containing the lod items 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ListCreatorList * LodList
        (
        );
        /**Returns  the m_lighweightLabel - the lightweight label which needs to be write in to jtfile 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXString LighweightLabel
        (
        );
        /**Sets  the m_lighweightLabel - the lightweight label which needs to be write in to jtfile 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLighweightLabel
        (
            const NXString & labelName /** labelname */ 
        );
        /**Sets  the m_lighweightLabel - the lightweight label which needs to be write in to jtfile 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        void SetLighweightLabel
        (
            const char * labelName /** labelname */ 
        );
        /**Returns  the m_tessOption * - Specifies the type for Level of Details, whether Defined Level or Use NX Resolution 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JtCreator::TessellationOption TessOption
        (
        );
        /**Sets  the m_tessOption * - Specifies the type for Level of Details, whether Defined Level or Use NX Resolution 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTessOption
        (
            NXOpen::JtCreator::TessellationOption tessOption /** tessoption */ 
        );
        /**Returns  the m_jtParts * -  WriteWhichFiles = JTPARTS
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        public: bool JtParts
        (
        );
        /**Sets  the m_jtParts * -  WriteWhichFiles = JTPARTS
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        public: void SetJtParts
        (
            bool jtParts /** jtparts */ 
        );
        /**Returns  the m_asmStructure * -  WriteWhichFiles = JTASSEMBLY
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        public: bool AsmStructure
        (
        );
        /**Sets  the m_asmStructure * -  WriteWhichFiles = JTASSEMBLY
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        public: void SetAsmStructure
        (
            bool asmStructure /** asmstructure */ 
        );
        /**  Loads configuration file settings onto builder 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void LoadConfigSettings
        (
        );
        /**Returns  the m_lightTextureMaterial * -  lightTextureMaterial 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: bool LightTextureMaterial
        (
        );
        /**Sets  the m_lightTextureMaterial * -  lightTextureMaterial 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLightTextureMaterial
        (
            bool lightTextureMaterial /** lighttexturematerial */ 
        );
        /**Returns  the m_kinematics * -  Writes kinematics data into AP242XML 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: bool Kinematics
        (
        );
        /**Sets  the m_kinematics * -  Writes kinematics data into AP242XML 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: void SetKinematics
        (
            bool kinematics /** kinematics */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
