#ifndef NXOpen_CAE_CONNECTIONS_SPRING_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_SPRING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_Spring.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Connections_NodalTarget.hxx>
#include <NXOpen/CAE_Connections_Types.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/CAE_Connections_IConnection.hxx>
#include <NXOpen/CAE_Connections_ICsys.hxx>
#include <NXOpen/CAE_Connections_IMassBothTargets.hxx>
#include <NXOpen/CAE_Connections_IMassPhysicalParams.hxx>
#include <NXOpen/CAE_Connections_INodalTargetsContainer.hxx>
#include <NXOpen/CAE_Connections_INodalTargetsPairing.hxx>
#include <NXOpen/CAE_Connections_IStiffness.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class Spring;
        }
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    namespace CAE
    {
        namespace Connections
        {
            class IConnection;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ICsys;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IMassBothTargets;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IMassPhysicalParams;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class INodalTargetsContainer;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class INodalTargetsPairing;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IStiffness;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class NodalTarget;
        }
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    class INXObject;
    namespace CAE
    {
        namespace Connections
        {
            class _SpringBuilder;
            class SpringImpl;
            /** Spring connection. Use this interface to set/get properties and parameters of the Spring connection.  
             <br>  Created in NX12.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  Spring : public NXOpen::CAE::Connections::IConnection, public virtual NXOpen::CAE::Connections::IStiffness, public virtual NXOpen::CAE::Connections::ICsys, public virtual NXOpen::CAE::Connections::INodalTargetsContainer, public virtual NXOpen::CAE::Connections::INodalTargetsPairing, public virtual NXOpen::CAE::Connections::IMassPhysicalParams, public virtual NXOpen::CAE::Connections::IMassBothTargets
            {
                private: SpringImpl * m_spring_impl;
                private: friend class  _SpringBuilder;
                protected: Spring();
                public: ~Spring();
                /**Returns  the X stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * XStiffnessConstant
                (
                );
                /**Returns  the Y stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * YStiffnessConstant
                (
                );
                /**Returns  the Z stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ZStiffnessConstant
                (
                );
                /**Returns  the RX stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RxStiffnessConstant
                (
                );
                /**Returns  the RY stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RyStiffnessConstant
                (
                );
                /**Returns  the RZ stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RzStiffnessConstant
                (
                );
                /**Returns  the stiffness type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::StiffnessType StiffnessType
                (
                );
                /**Sets  the stiffness type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual void SetStiffnessType
                (
                    NXOpen::CAE::Connections::StiffnessType iStiffnessType /** istiffnesstype */ 
                );
                /** Gets supported stiffness types of connection.  @return  Supported Stiffness Types 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::CAE::Connections::StiffnessType> GetSupportedStiffnessTypes
                (
                );
                /**Returns  the csys type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::CsysType CsysType
                (
                );
                /**Sets  the csys type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetCsysType
                (
                    NXOpen::CAE::Connections::CsysType csysType /** csystype */ 
                );
                /**Returns  the csys 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CoordinateSystem * Csys
                (
                );
                /**Sets  the csys 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetCsys
                (
                    NXOpen::CoordinateSystem * csys /** csys */ 
                );
                /** Gets supported csys types of connection.  @return  Supported CSys Types 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::CAE::Connections::CsysType> GetSupportedCsysTypes
                (
                );
                /** Set the target type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetTargetType
                (
                    int index /** index */ ,
                    NXOpen::CAE::Connections::NodalTargetType type /** type */ 
                );
                /** Get target 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::NodalTarget * GetTarget
                (
                    int index /** index */ 
                );
                /**Returns  the pairing method of targets 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::NodalPairingMethod PairingMethod
                (
                );
                /**Sets  the pairing method of targets 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetPairingMethod
                (
                    NXOpen::CAE::Connections::NodalPairingMethod method /** method */ 
                );
                /**Returns  the pairing search orientation 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Direction * SearchOrientation
                (
                );
                /**Sets  the pairing search orientation 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetSearchOrientation
                (
                    NXOpen::Direction * orientation /** orientation */ 
                );
                /**Returns  the search cone angle 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * SearchConeAngle
                (
                );
                /**Returns  the search range 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * SearchRange
                (
                );
                /**Returns  the mass type 
                 <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::CAE::Connections::IMassType::MassTypeValue NXOpen::CAE::Connections::IMassType::MassTypeValue@endlink  instead. <br>  

                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::CAE::Connections::IMassType::MassTypeValue instead.") virtual NXOpen::CAE::Connections::MassType MassType
                (
                );
                /**Sets  the mass type 
                 <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::CAE::Connections::IMassType::MassTypeValue NXOpen::CAE::Connections::IMassType::MassTypeValue@endlink  instead. <br>  

                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::CAE::Connections::IMassType::MassTypeValue instead.") virtual void SetMassType
                (
                    NXOpen::CAE::Connections::MassType type /** Mass type */
                );
                /**Returns  the mass value 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * Mass
                (
                );
                /**Returns  the isMassOnBothTargets 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool IsMassOnBothTargets
                (
                );
                /**Sets  the isMassOnBothTargets 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetMassOnBothTargets
                (
                    bool isMassOnBothTargets /** ismassonbothtargets */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
