#ifndef NXOpen_TOOLING_AUTODIECOLLECTION_HXX_INCLUDED
#define NXOpen_TOOLING_AUTODIECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_AutoDieCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class AutoDieCollection;
    }
    namespace Tooling
    {
        class ToolingManager;
    }
    namespace Tooling
    {
        class AutoDieGroup;
    }
    namespace Features
    {
        class BodyFeature;
    }
    namespace Features
    {
        class Feature;
    }
    namespace GeometricAnalysis
    {
        class AnalysisObject;
    }
    namespace Tooling
    {
        class DieDesDrawDieBuilder;
    }
    namespace Tooling
    {
        class DieDesDrawPunchBuilder;
    }
    namespace Tooling
    {
        class DieDesPierceInsertBuilder;
    }
    namespace Tooling
    {
        class DieDesignLowerBinderBuilder;
    }
    namespace Tooling
    {
        class DieDesignTrimPostBuilder;
    }
    namespace Tooling
    {
        class DieEngDefineProductOrientationBuilder;
    }
    namespace Tooling
    {
        class DieEngDieTipBuilder;
    }
    namespace Tooling
    {
        class DieEngFormTaskBuilder;
    }
    namespace Tooling
    {
        class DieEngLineupBuilder;
    }
    namespace Tooling
    {
        class DieEngProcessUpdateManagerBuilder;
    }
    namespace Tooling
    {
        class DieEngStampingCarryoverBuilder;
    }
    namespace Tooling
    {
        class DieEngStampingOutputBuilder;
    }
    namespace Tooling
    {
        class DieEngTrimAngleCheckBuilder;
    }
    namespace Tooling
    {
        class DieEngTrimTaskBuilder;
    }
    namespace Tooling
    {
        class LsdynaFormAnalysisResultDisplayBuilder;
    }
    namespace Tooling
    {
        class LsdynaGeometryPreparationBuilder;
    }
    namespace Tooling
    {
        class LsdynaKfileGeneratorBuilder;
    }
    namespace Tooling
    {
        class SetPressModelBuilder;
    }
    namespace Tooling
    {
        class SpindleSliderBuilder;
    }
    namespace Tooling
    {
        class AutoDieCollectionImpl;
        /** Represents a collection of Die Design Draw Punch <br> To obtain an instance of this class, refer to @link NXOpen::Tooling::ToolingManager  NXOpen::Tooling::ToolingManager @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  AutoDieCollection : public NXOpen::TaggedObjectCollection
        {
            private: AutoDieCollectionImpl * m_autodiecollection_impl;
            private: NXOpen::Tooling::ToolingManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit AutoDieCollection(NXOpen::Tooling::ToolingManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~AutoDieCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Tooling::AutoDieCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Tooling::AutoDieGroup *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Tooling::AutoDieCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_TOOLINGEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_TOOLINGEXPORT  void next();
                NXOpen::Tooling::AutoDieCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a Die Design Draw Punch builder. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Tooling::DieDesDrawPunchBuilder * CreateDieDesDrawPunchBuilder
            (
                NXOpen::Features::Feature * featureSet /** feature set */ 
            );
            /** Creates a Die Design Draw Die builder. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Tooling::DieDesDrawDieBuilder * CreateDieDesDrawDieBuilder
            (
                NXOpen::Features::Feature * featureSet /** feature set */ 
            );
            /** Creates the form task feature builder.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::DieEngFormTaskBuilder * CreateDieEngFormTaskBuilder
            (
                NXOpen::Features::Feature * dieEngFormTask /** Form Task to be edited. */
            );
            /** Creates a Die Design Pierce Insert builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieDesPierceInsertBuilder * CreateDieDesPierceInsertBuilder
            (
            );
            /** Creates a Die Engineering Trim Angle Check builder 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::DieEngTrimAngleCheckBuilder * CreateDieEngTrimAngleCheckBuilder
            (
                NXOpen::GeometricAnalysis::AnalysisObject * dieEngTrimAngleCheck /** die eng trim angle check */ 
            );
            /** Creates a formability analysis geometry preparation builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::LsdynaGeometryPreparationBuilder * CreateLsdynaGeometryPreparationBuilder
            (
            );
            /** Creates a LS-Dyna integration builder. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::LsdynaKfileGeneratorBuilder * CreateLsdynaKfileGeneratorBuilder
            (
            );
            /** Creates a LS-Dyna Formability Analysis - Result Display builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::LsdynaFormAnalysisResultDisplayBuilder * CreateLsdynaFormAnalysisResultDisplayBuilder
            (
            );
            /** Creates a Die Design Lower Binder Builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Tooling::DieDesignLowerBinderBuilder * CreateDieDesignLowerBinderBuilder
            (
                NXOpen::Features::Feature * frec /** frec */ 
            );
            /** Creates a Die Design Trim Post Builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Tooling::DieDesignTrimPostBuilder * CreateDieDesignTrimPostBuilder
            (
                NXOpen::Features::Feature * frec /** frec */ 
            );
            /** Creates the stamping carryover feature builder.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::DieEngStampingCarryoverBuilder * CreateDieEngStampingCarryoverBuilder
            (
                NXOpen::Features::BodyFeature * dieEngStampingCarryover /** Stamping Carryover feature to be edited. */
            );
            /** Creates a Stamping Output builder. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::DieEngStampingOutputBuilder * CreateDieEngStampingOutputBuilder
            (
                NXOpen::Features::BodyFeature * frec /** Stamping output feature to be edited. */
            );
            /** Creates a Die Engineer Trim Task Builder 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Tooling::DieEngTrimTaskBuilder * CreateDieEngTrimTaskBuilder
            (
                NXOpen::Features::BodyFeature * frec /** Trim task feature to be edited. */
            );
            /** Creates a Die Engineer Process Update Manager builder. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Tooling::DieEngProcessUpdateManagerBuilder * CreateDieEngProcessUpdateManagerBuilder
            (
                NXOpen::Features::BodyFeature * frec /** Process update manager feature to be edited. */
            );
            /** Creates a Set Press Model builder. 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : nx_dievalidation ("DIE VALIDATION") */
            public: NXOpen::Tooling::SetPressModelBuilder * CreateSetPressModelBuilder
            (
            );
            /** Creates a Spindle Slider builder. 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : nx_dievalidation ("DIE VALIDATION") */
            public: NXOpen::Tooling::SpindleSliderBuilder * CreateSpindleSliderBuilder
            (
            );
            /** Creates a Die Engineer Die Tip Builder 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::DieEngDieTipBuilder * CreateDieEngDieTipBuilder
            (
                NXOpen::Features::Feature * frec /** Die tip feature to be edited. */
            );
            /** Creates a Die Engineer Line Up Builder 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::DieEngLineupBuilder * CreateDieEngLineUpBuilder
            (
                NXOpen::Features::BodyFeature * frec /** Line up feature to be edited. */
            );
            /** Creates a Die Engineer Define Product Orientation builder. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::DieEngDefineProductOrientationBuilder * CreateDieEngDefineProductOrientationBuilder
            (
                NXOpen::Features::Feature * featureSet /** feature set */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
