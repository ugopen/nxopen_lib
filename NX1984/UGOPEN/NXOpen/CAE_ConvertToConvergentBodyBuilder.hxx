#ifndef NXOpen_CAE_CONVERTTOCONVERGENTBODYBUILDER_HXX_INCLUDED
#define NXOpen_CAE_CONVERTTOCONVERGENTBODYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ConvertToConvergentBodyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ConvertToConvergentBodyBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectCAEBodyList;
    }
    namespace CAE
    {
        class _ConvertToConvergentBodyBuilderBuilder;
        class ConvertToConvergentBodyBuilderImpl;
        /** Builder for creating a convergent body from CAE.CAEBody  <br> To create a new instance of this class, use @link NXOpen::CAE::CaePart::CreateConvertToConvergentBodyBuilder  NXOpen::CAE::CaePart::CreateConvertToConvergentBodyBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ConvertToConvergentBodyBuilder : public NXOpen::Builder
        {
            /** Represents the supported export locations of convergent body*/
            public: enum Option
            {
                OptionParentOfFEM/** The immediate parent of the current FEM Part */,
                OptionComponentOfCADBody/** The orginal component inside of assembly that polygon body is derived from in FEM Part */,
                OptionNewPart/** The new part where the convergent body in the FEM part will be exported to*/,
                OptionExistingPart/** The existing part where the convergent body in the FEM part will be exported to */
            };

            private: ConvertToConvergentBodyBuilderImpl * m_converttoconvergentbodybuilder_impl;
            private: friend class  _ConvertToConvergentBodyBuilderBuilder;
            protected: ConvertToConvergentBodyBuilder();
            public: ~ConvertToConvergentBodyBuilder();
            /**Returns  the polygon body selection list inside of FEM part 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectCAEBodyList * BodySelection
            (
            );
            /**Returns  the target option which indicates where the resulting convergent body will be created 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ConvertToConvergentBodyBuilder::Option TargetOption
            (
            );
            /**Sets  the target option which indicates where the resulting convergent body will be created 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetOption
            (
                NXOpen::CAE::ConvertToConvergentBodyBuilder::Option targetOptions /** targetoptions */ 
            );
            /**Returns  a value indicating whether to associate the convergent body to the polygon body or not 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associate
            (
            );
            /**Sets  a value indicating whether to associate the convergent body to the polygon body or not 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociate
            (
                bool associateToggle /** associatetoggle */ 
            );
            /**Returns  the new part file name which is required if @link NXOpen::CAE::ConvertToConvergentBodyBuilder::Option NXOpen::CAE::ConvertToConvergentBodyBuilder::Option@endlink  is set to @link CAE::ConvertToConvergentBodyBuilder::OptionNewPart CAE::ConvertToConvergentBodyBuilder::OptionNewPart@endlink   
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewFile
            (
            );
            /**Sets  the new part file name which is required if @link NXOpen::CAE::ConvertToConvergentBodyBuilder::Option NXOpen::CAE::ConvertToConvergentBodyBuilder::Option@endlink  is set to @link CAE::ConvertToConvergentBodyBuilder::OptionNewPart CAE::ConvertToConvergentBodyBuilder::OptionNewPart@endlink   
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewFile
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the new part file name which is required if @link NXOpen::CAE::ConvertToConvergentBodyBuilder::Option NXOpen::CAE::ConvertToConvergentBodyBuilder::Option@endlink  is set to @link CAE::ConvertToConvergentBodyBuilder::OptionNewPart CAE::ConvertToConvergentBodyBuilder::OptionNewPart@endlink   
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetNewFile
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the existing part file name which is required if @link NXOpen::CAE::ConvertToConvergentBodyBuilder::Option NXOpen::CAE::ConvertToConvergentBodyBuilder::Option@endlink  is set to @link CAE::ConvertToConvergentBodyBuilder::OptionExistingPart CAE::ConvertToConvergentBodyBuilder::OptionExistingPart@endlink   
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ExistingFile
            (
            );
            /**Sets  the existing part file name which is required if @link NXOpen::CAE::ConvertToConvergentBodyBuilder::Option NXOpen::CAE::ConvertToConvergentBodyBuilder::Option@endlink  is set to @link CAE::ConvertToConvergentBodyBuilder::OptionExistingPart CAE::ConvertToConvergentBodyBuilder::OptionExistingPart@endlink   
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExistingFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the existing part file name which is required if @link NXOpen::CAE::ConvertToConvergentBodyBuilder::Option NXOpen::CAE::ConvertToConvergentBodyBuilder::Option@endlink  is set to @link CAE::ConvertToConvergentBodyBuilder::OptionExistingPart CAE::ConvertToConvergentBodyBuilder::OptionExistingPart@endlink   
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetExistingFile
            (
                const char * filename /** filename */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
