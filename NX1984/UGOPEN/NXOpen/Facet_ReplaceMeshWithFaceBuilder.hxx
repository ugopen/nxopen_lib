#ifndef NXOpen_FACET_REPLACEMESHWITHFACEBUILDER_HXX_INCLUDED
#define NXOpen_FACET_REPLACEMESHWITHFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Facet_ReplaceMeshWithFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/FacetCollector.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_facet_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Facet
    {
        class ReplaceMeshWithFaceBuilder;
    }
    class Axis;
    class Builder;
    class Direction;
    class Expression;
    class FacetCollector;
    class Plane;
    class Point;
    namespace Facet
    {
        class _ReplaceMeshWithFaceBuilderBuilder;
        class ReplaceMeshWithFaceBuilderImpl;
        /** Represents a @link NXOpen::Facet::ReplaceMeshWithFaceBuilder NXOpen::Facet::ReplaceMeshWithFaceBuilder@endlink .
            Replace Mesh With Face Builder is a function to facilitate the creation of prismatic faces 
            through selected facet regions and replace that facet region with the analytic face.  <br> To create a new instance of this class, use @link NXOpen::Facet::FacetModelingCollection::CreateReplaceMeshWithFaceBuilder  NXOpen::Facet::FacetModelingCollection::CreateReplaceMeshWithFaceBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        ConeAverageConstrainToDirectionToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ConeConstraintTypes </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        ConeHalfAngle.Value </term> <description> 
         
        45 </description> </item> 

        <item><term> 
         
        CylinderAverageConstrainToDirectionToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CylinderConstraintTypes </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        CylinderOrSphereRadius.Value </term> <description> 
         
        10 (millimeters part), 0.4 (inches part) </description> </item> 

        <item><term> 
         
        HalfAngleToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MaxDeviation.Value </term> <description> 
         
        0.5 (millimeters part), 0.02 (inches part) </description> </item> 

        <item><term> 
         
        MinimumFacetNumber </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        PlaneAverageConstrainToNormalToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        PlaneConstraintTypes </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        RadiusToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ReplaceMeshOn </term> <description> 
         
        OriginalBody </description> </item> 

        <item><term> 
         
        SphereConstraintTypes </term> <description> 
         
        None </description> </item> 

        </list> 

         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_FACETEXPORT  ReplaceMeshWithFaceBuilder : public NXOpen::Builder
        {
            /** Primitive types to divide facet face */
            public: enum Types
            {
                TypesPlane/** Divide facet face to fit the plane */,
                TypesCylinder/** Divide facet face to fit the cylinder */,
                TypesCone/** Divide facet face to fit the cone */,
                TypesSphere/** Divide facet face to fit the sphere */
            };

            /** Constraints for plane */
            public: enum PlaneConstraint
            {
                PlaneConstraintNone/** None constraint for plane */,
                PlaneConstraintOrthogonal/** Orthogonal constraint for plane */,
                PlaneConstraintParallel/** Parallel constraint for plane */,
                PlaneConstraintCoplanar/** Coplanar constraint for plane */,
                PlaneConstraintAverageParallel/** AverageParallel constraint for plane */,
                PlaneConstraintAverageCoplanar/** AverageCoplanar constraint for plane */
            };

            /** Constraints for cylinder */
            public: enum CylinderConstraint
            {
                CylinderConstraintNone/** None constraint for cylinder */,
                CylinderConstraintParallel/** Parallel constraint for cylinder */,
                CylinderConstraintColinear/** Colinear constraint for cylinder */,
                CylinderConstraintAverageParallel/** AverageParallel constraint for cylinder */,
                CylinderConstraintAverageColinear/** AverageColinear constraint for cylinder */
            };

            /** Constraints for cone */
            public: enum ConeConstraint
            {
                ConeConstraintNone/** None constraint for cone */,
                ConeConstraintParallel/** Parallel constraint for cone */,
                ConeConstraintColinear/** Colinear constraint for cone */,
                ConeConstraintAverageParallel/** AverageParallel constraint for cone */,
                ConeConstraintAverageColinear/** AverageColinear constraint for cone */
            };

            /** Constraints for sphere */
            public: enum SphereConstraint
            {
                SphereConstraintNone/** None constraint for sphere */,
                SphereConstraintConcentric/** Concentric constraint for sphere */,
                SphereConstraintAverageConcentric/** AverageConcentric constraint for sphere */
            };

            /** Replace mesh on enum*/
            public: enum ReplaceMeshOnOption
            {
                ReplaceMeshOnOptionOriginalBody/** Replace mesh on original body*/,
                ReplaceMeshOnOptionNewBody/** Replace mesh on new body */
            };

            private: ReplaceMeshWithFaceBuilderImpl * m_replacemeshwithfacebuilder_impl;
            private: friend class  _ReplaceMeshWithFaceBuilderBuilder;
            protected: ReplaceMeshWithFaceBuilder();
            public: ~ReplaceMeshWithFaceBuilder();
            /**Returns  the type of enum which decides method for dividing facet faces
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::ReplaceMeshWithFaceBuilder::Types Type
            (
            );
            /**Sets  the type of enum which decides method for dividing facet faces
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetType
            (
                NXOpen::Facet::ReplaceMeshWithFaceBuilder::Types type /** type */ 
            );
            /**Returns  the face collector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::FacetCollector * FacetCollector
            (
            );
            /**Returns  the plane constraint types 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::ReplaceMeshWithFaceBuilder::PlaneConstraint PlaneConstraintTypes
            (
            );
            /**Sets  the plane constraint types 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetPlaneConstraintTypes
            (
                NXOpen::Facet::ReplaceMeshWithFaceBuilder::PlaneConstraint planeConstraintTypes /** planeconstrainttypes */ 
            );
            /**Returns  the orthogonal or coplanar constraint plane 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * OrthogonalOrCoplanarConstraintPlane
            (
            );
            /**Sets  the orthogonal or coplanar constraint plane 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetOrthogonalOrCoplanarConstraintPlane
            (
                NXOpen::Plane * orthogonalOrCoplanarConstraintPlane /** orthogonalorcoplanarconstraintplane */ 
            );
            /**Returns  the plane parallel constraint normal 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * PlaneParallelConstraintNormal
            (
            );
            /**Sets  the plane parallel constraint normal 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetPlaneParallelConstraintNormal
            (
                NXOpen::Direction * planeParallelConstraintNormal /** planeparallelconstraintnormal */ 
            );
            /**Returns  the cylinder constraint types 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::ReplaceMeshWithFaceBuilder::CylinderConstraint CylinderConstraintTypes
            (
            );
            /**Sets  the cylinder constraint types 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCylinderConstraintTypes
            (
                NXOpen::Facet::ReplaceMeshWithFaceBuilder::CylinderConstraint cylinderConstraintTypes /** cylinderconstrainttypes */ 
            );
            /**Returns  the cylinder parallel constraint vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * CylinderParallelConstraintVector
            (
            );
            /**Sets  the cylinder parallel constraint vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCylinderParallelConstraintVector
            (
                NXOpen::Direction * cylinderParallelConstraintVector /** cylinderparallelconstraintvector */ 
            );
            /**Returns  the cylinder colinear constraint axis 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * CylinderColinearConstraintAxis
            (
            );
            /**Sets  the cylinder colinear constraint axis 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCylinderColinearConstraintAxis
            (
                NXOpen::Axis * cylinderColinearConstraintAxis /** cylindercolinearconstraintaxis */ 
            );
            /**Returns  the cone constraint types 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::ReplaceMeshWithFaceBuilder::ConeConstraint ConeConstraintTypes
            (
            );
            /**Sets  the cone constraint types 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetConeConstraintTypes
            (
                NXOpen::Facet::ReplaceMeshWithFaceBuilder::ConeConstraint coneConstraintTypes /** coneconstrainttypes */ 
            );
            /**Returns  the cone parallel constraint vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ConeParallelConstraintVector
            (
            );
            /**Sets  the cone parallel constraint vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetConeParallelConstraintVector
            (
                NXOpen::Direction * coneParallelConstraintVector /** coneparallelconstraintvector */ 
            );
            /**Returns  the cone colinear constraint axis 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * ConeColinearConstraintAxis
            (
            );
            /**Sets  the cone colinear constraint axis 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetConeColinearConstraintAxis
            (
                NXOpen::Axis * coneColinearConstraintAxis /** conecolinearconstraintaxis */ 
            );
            /**Returns  the sphere constraint types 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::ReplaceMeshWithFaceBuilder::SphereConstraint SphereConstraintTypes
            (
            );
            /**Sets  the sphere constraint types 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetSphereConstraintTypes
            (
                NXOpen::Facet::ReplaceMeshWithFaceBuilder::SphereConstraint sphereConstraintTypes /** sphereconstrainttypes */ 
            );
            /**Returns  the sphere concentric constraint point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * SphereConcentricConstraintPoint
            (
            );
            /**Sets  the sphere concentric constraint point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetSphereConcentricConstraintPoint
            (
                NXOpen::Point * sphereConcentricConstraintPoint /** sphereconcentricconstraintpoint */ 
            );
            /**Returns  the replace mesh on enum 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::ReplaceMeshWithFaceBuilder::ReplaceMeshOnOption ReplaceMeshOn
            (
            );
            /**Sets  the replace mesh on enum 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetReplaceMeshOn
            (
                NXOpen::Facet::ReplaceMeshWithFaceBuilder::ReplaceMeshOnOption replaceMeshOn /** replacemeshon */ 
            );
            /**Returns  the max deviation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxDeviation
            (
            );
            /**Returns  the plane average constrain to normal toggle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlaneAverageConstrainToNormalToggle
            (
            );
            /**Sets  the plane average constrain to normal toggle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetPlaneAverageConstrainToNormalToggle
            (
                bool planeAverageConstrainToNormalToggle /** planeaverageconstraintonormaltoggle */ 
            );
            /**Returns  the plane average constrain to normal vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * PlaneAverageConstrainToNormalVector
            (
            );
            /**Sets  the plane average constrain to normal vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetPlaneAverageConstrainToNormalVector
            (
                NXOpen::Direction * planeAverageConstrainToNormalVector /** planeaverageconstraintonormalvector */ 
            );
            /**Returns  the cylinder average constrain to direction toggle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool CylinderAverageConstrainToDirectionToggle
            (
            );
            /**Sets  the cylinder average constrain to direction toggle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCylinderAverageConstrainToDirectionToggle
            (
                bool cylinderAverageConstrainToDirectionToggle /** cylinderaverageconstraintodirectiontoggle */ 
            );
            /**Returns  the cylinder average constrain to direction vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * CylinderAverageConstrainToDirectionVector
            (
            );
            /**Sets  the cylinder average constrain to direction vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCylinderAverageConstrainToDirectionVector
            (
                NXOpen::Direction * cylinderAverageConstrainToDirectionVector /** cylinderaverageconstraintodirectionvector */ 
            );
            /**Returns  the cone average constrain to direction toggle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool ConeAverageConstrainToDirectionToggle
            (
            );
            /**Sets  the cone average constrain to direction toggle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetConeAverageConstrainToDirectionToggle
            (
                bool coneAverageConstrainToDirectionToggle /** coneaverageconstraintodirectiontoggle */ 
            );
            /**Returns  the cone average constrain to direction vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ConeAverageConstrainToDirectionVector
            (
            );
            /**Sets  the cone average constrain to direction vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetConeAverageConstrainToDirectionVector
            (
                NXOpen::Direction * coneAverageConstrainToDirectionVector /** coneaverageconstraintodirectionvector */ 
            );
            /**Returns  the radius toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool RadiusToggle
            (
            );
            /**Sets  the radius toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetRadiusToggle
            (
                bool radiusToggle /** radiustoggle */ 
            );
            /**Returns  the cylinder or sphere radius 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CylinderOrSphereRadius
            (
            );
            /**Returns  the half angle toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool HalfAngleToggle
            (
            );
            /**Sets  the half angle toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetHalfAngleToggle
            (
                bool halfAngleToggle /** halfangletoggle */ 
            );
            /**Returns  the cone half angle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ConeHalfAngle
            (
            );
            /**Returns  the minimum facet number 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: int MinimumFacetNumber
            (
            );
            /**Sets  the minimum facet number 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetMinimumFacetNumber
            (
                int minimumFacetNumber /** minimumfacetnumber */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
