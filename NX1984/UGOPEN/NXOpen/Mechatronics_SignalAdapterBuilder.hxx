#ifndef NXOpen_MECHATRONICS_SIGNALADAPTERBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_SIGNALADAPTERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_SignalAdapterBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_GenericSignal.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class SignalAdapterBuilder;
    }
    class Builder;
    namespace Mechatronics
    {
        class AdapterFormula;
    }
    namespace Mechatronics
    {
        class AdapterSignal;
    }
    namespace Mechatronics
    {
        class GenericSignal;
    }
    class NXObject;
    class Unit;
    namespace Mechatronics
    {
        class _SignalAdapterBuilderBuilder;
        class SignalAdapterBuilderImpl;
        /**  @brief  Represents a @link NXOpen::Mechatronics::SignalAdapterBuilder NXOpen::Mechatronics::SignalAdapterBuilder@endlink .  

           <br> To create a new instance of this class, use @link NXOpen::Mechatronics::SignalAdapterCollection::CreateSignalAdapterBuilder  NXOpen::Mechatronics::SignalAdapterCollection::CreateSignalAdapterBuilder @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  SignalAdapterBuilder : public NXOpen::Builder
        {
            /**  @brief  the data type.  

              
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::Mechatronics::GenericSignal::DataTypes NXOpen::Mechatronics::GenericSignal::DataTypes@endlink  instead. <br>  
            */
            public: enum NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::Mechatronics::GenericSignal::DataTypes instead.") DataType
            {
                DataTypeBool/** bool   */,
                DataTypeInt/** int    */,
                DataTypeDouble/** double */,
                DataTypeString/** string */
            };

            /**  @brief  Represents the data port type.  

              
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::Mechatronics::GenericSignal::IOTypes NXOpen::Mechatronics::GenericSignal::IOTypes@endlink  instead. <br>  
            */
            public: enum NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::Mechatronics::GenericSignal::IOTypes instead.") DataPortType
            {
                DataPortTypeInput/** Input  */,
                DataPortTypeOutput/** Output */
            };

             /**  @brief  Defines the parameter data.  

              */
            public:
            struct ParameterData
            {
                public: /** Alias Name           */NXString AliasName;
                public: /** Physics Object       */NXOpen::NXObject * PhysicsObject;
                public: /** Physics Property Tag */int PhysicsPropTag;
                public: /** Assigned Formula     */NXOpen::Mechatronics::AdapterFormula * AssignedFormula;
                public: /** Formula Text         */NXString Formula;
                public: /** Comment Text         */NXString Comment;
                public: ParameterData() :
                    AliasName(),
                    PhysicsObject(),
                    PhysicsPropTag(),
                    AssignedFormula(),
                    Formula(),
                    Comment()
                {
                }
                /** Constructor for the ParameterData struct. */ 
                public: ParameterData(const NXString &aliasNameInitial /** Alias Name           */, 
                        NXOpen::NXObject * physicsObjectInitial /** Physics Object       */, 
                        int physicsPropTagInitial /** Physics Property Tag */, 
                        NXOpen::Mechatronics::AdapterFormula * assignedFormulaInitial /** Assigned Formula     */, 
                        const NXString &formulaInitial /** Formula Text         */, 
                        const NXString &commentInitial /** Comment Text         */) :
                    AliasName(aliasNameInitial),
                    PhysicsObject(physicsObjectInitial),
                    PhysicsPropTag(physicsPropTagInitial),
                    AssignedFormula(assignedFormulaInitial),
                    Formula(formulaInitial),
                    Comment(commentInitial)
                {
                }
            };

             /**  @brief  Defines the signal data.  

              
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link NXOpen::Mechatronics::GenericSignal NXOpen::Mechatronics::GenericSignal@endlink  instead. <br>  
            */
            public:
            struct NX_DEPRECATED("Deprecated in NX1953.0.0.  Use NXOpen::Mechatronics::GenericSignal instead.") SignalData
            {
                public: /** Name                */NXString Name;
                public: /** Data Type           */NXOpen::Mechatronics::SignalAdapterBuilder::DataType DataType;
                public: /** Data Port Type      */NXOpen::Mechatronics::SignalAdapterBuilder::DataPortType PortType;
                public: /** Data Value (bool)   */bool BoolValue;
                public: /** Data Value (int)    */int IntValue;
                public: /** Data Value (double) */double DoubleValue;
                public: /** Data Unit           */NXOpen::Unit * Unit;
                public: /** Signal Id           */int SignalId;
                public: /** Edited Signal       */NXOpen::Mechatronics::AdapterSignal * EditedSignal;
                public: /** Assigned Formula    */NXOpen::Mechatronics::AdapterFormula * AssignedFormula;
                public: /** Formula Text        */NXString Formula;
                public: /** Comment Text        */NXString Comment;
                public: SignalData() :
                    Name(),
                    DataType((NXOpen::Mechatronics::SignalAdapterBuilder::DataType)0),
                    PortType((NXOpen::Mechatronics::SignalAdapterBuilder::DataPortType)0),
                    BoolValue(),
                    IntValue(),
                    DoubleValue(),
                    Unit(),
                    SignalId(),
                    EditedSignal(),
                    AssignedFormula(),
                    Formula(),
                    Comment()
                {
                }
                /** Constructor for the SignalData struct. */ 
                public: SignalData(const NXString &nameInitial /** Name                */, 
                        NXOpen::Mechatronics::SignalAdapterBuilder::DataType dataTypeInitial /** Data Type           */, 
                        NXOpen::Mechatronics::SignalAdapterBuilder::DataPortType portTypeInitial /** Data Port Type      */, 
                        bool boolValueInitial /** Data Value (bool)   */, 
                        int intValueInitial /** Data Value (int)    */, 
                        double doubleValueInitial /** Data Value (double) */, 
                        NXOpen::Unit * unitInitial /** Data Unit           */, 
                        int signalIdInitial /** Signal Id           */, 
                        NXOpen::Mechatronics::AdapterSignal * editedSignalInitial /** Edited Signal       */, 
                        NXOpen::Mechatronics::AdapterFormula * assignedFormulaInitial /** Assigned Formula    */, 
                        const NXString &formulaInitial /** Formula Text        */, 
                        const NXString &commentInitial /** Comment Text        */) :
                    Name(nameInitial),
                    DataType(dataTypeInitial),
                    PortType(portTypeInitial),
                    BoolValue(boolValueInitial),
                    IntValue(intValueInitial),
                    DoubleValue(doubleValueInitial),
                    Unit(unitInitial),
                    SignalId(signalIdInitial),
                    EditedSignal(editedSignalInitial),
                    AssignedFormula(assignedFormulaInitial),
                    Formula(formulaInitial),
                    Comment(commentInitial)
                {
                }
            };

             /**  @brief  Defines the signal data version 2.  

              
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::Mechatronics::GenericSignal NXOpen::Mechatronics::GenericSignal@endlink  instead. <br>  
            */
            public:
            struct NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::Mechatronics::GenericSignal instead.") SignalDataV2
            {
                public: /** Name                */NXString Name;
                public: /** Data Type           */NXOpen::Mechatronics::SignalAdapterBuilder::DataType DataType;
                public: /** Data Port Type      */NXOpen::Mechatronics::SignalAdapterBuilder::DataPortType PortType;
                public: /** Data Value (bool)   */bool BoolValue;
                public: /** Data Value (int)    */int IntValue;
                public: /** Data Value (double) */double DoubleValue;
                public: /** Data Value (string) */NXString StringValue;
                public: /** Data Unit           */NXOpen::Unit * Unit;
                public: /** Signal Id           */int SignalId;
                public: /** Edited Signal       */NXOpen::Mechatronics::AdapterSignal * EditedSignal;
                public: /** Assigned Formula    */NXOpen::Mechatronics::AdapterFormula * AssignedFormula;
                public: /** Formula Text        */NXString Formula;
                public: /** Comment Text        */NXString Comment;
                public: SignalDataV2() :
                    Name(),
                    DataType((NXOpen::Mechatronics::SignalAdapterBuilder::DataType)0),
                    PortType((NXOpen::Mechatronics::SignalAdapterBuilder::DataPortType)0),
                    BoolValue(),
                    IntValue(),
                    DoubleValue(),
                    StringValue(),
                    Unit(),
                    SignalId(),
                    EditedSignal(),
                    AssignedFormula(),
                    Formula(),
                    Comment()
                {
                }
                /** Constructor for the SignalDataV2 struct. */ 
                public: SignalDataV2(const NXString &nameInitial /** Name                */, 
                        NXOpen::Mechatronics::SignalAdapterBuilder::DataType dataTypeInitial /** Data Type           */, 
                        NXOpen::Mechatronics::SignalAdapterBuilder::DataPortType portTypeInitial /** Data Port Type      */, 
                        bool boolValueInitial /** Data Value (bool)   */, 
                        int intValueInitial /** Data Value (int)    */, 
                        double doubleValueInitial /** Data Value (double) */, 
                        const NXString &stringValueInitial /** Data Value (string) */, 
                        NXOpen::Unit * unitInitial /** Data Unit           */, 
                        int signalIdInitial /** Signal Id           */, 
                        NXOpen::Mechatronics::AdapterSignal * editedSignalInitial /** Edited Signal       */, 
                        NXOpen::Mechatronics::AdapterFormula * assignedFormulaInitial /** Assigned Formula    */, 
                        const NXString &formulaInitial /** Formula Text        */, 
                        const NXString &commentInitial /** Comment Text        */) :
                    Name(nameInitial),
                    DataType(dataTypeInitial),
                    PortType(portTypeInitial),
                    BoolValue(boolValueInitial),
                    IntValue(intValueInitial),
                    DoubleValue(doubleValueInitial),
                    StringValue(stringValueInitial),
                    Unit(unitInitial),
                    SignalId(signalIdInitial),
                    EditedSignal(editedSignalInitial),
                    AssignedFormula(assignedFormulaInitial),
                    Formula(formulaInitial),
                    Comment(commentInitial)
                {
                }
            };

            private: SignalAdapterBuilderImpl * m_signaladapterbuilder_impl;
            private: friend class  _SignalAdapterBuilderBuilder;
            protected: SignalAdapterBuilder();
            public: ~SignalAdapterBuilder();
            /**  @brief  Gets all parameter data.  

               @return  Array of parameter data 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: std::vector<NXOpen::Mechatronics::SignalAdapterBuilder::ParameterData> GetParameterData
            (
            );
            /**  @brief  Sets all parameter data.  

              
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetParameterData
            (
                const std::vector<NXOpen::Mechatronics::SignalAdapterBuilder::ParameterData> & parameterData /** Array of parameter data */
            );
            /**  @brief  Gets all signal data.  

               @return  Array of signal data 
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link Mechatronics::SignalAdapterBuilder::GetSignals Mechatronics::SignalAdapterBuilder::GetSignals@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use Mechatronics::SignalAdapterBuilder::GetSignals instead.") std::vector<NXOpen::Mechatronics::SignalAdapterBuilder::SignalData> GetSignalData
            (
            );
            /**  @brief  Gets all signal data.  

               @return  Array of signal data 
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::Mechatronics::SignalAdapterBuilder::GetSignals NXOpen::Mechatronics::SignalAdapterBuilder::GetSignals@endlink  instead. <br>  

             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::Mechatronics::SignalAdapterBuilder::GetSignals instead.") std::vector<NXOpen::Mechatronics::SignalAdapterBuilder::SignalDataV2> GetSignalDataV2
            (
            );
            /**  @brief  Gets signals.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void GetSignals
            (
                std::vector<NXOpen::Mechatronics::GenericSignal *> & signalData /** Array of signal */
            );
            /**  @brief  Sets all signal data.  

              
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link Mechatronics::SignalAdapterBuilder::SetSignalDataV2 Mechatronics::SignalAdapterBuilder::SetSignalDataV2@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use Mechatronics::SignalAdapterBuilder::SetSignalDataV2 instead.") void SetSignalData
            (
                const std::vector<NXOpen::Mechatronics::SignalAdapterBuilder::SignalData> & signalData /** Array of signal data */
            );
            /**  @brief  Sets all signal data.  

              
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link Mechatronics::SignalAdapterBuilder::SetSignals Mechatronics::SignalAdapterBuilder::SetSignals@endlink  instead. <br>  

             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NX_DEPRECATED("Deprecated in NX1980.0.0.  Use Mechatronics::SignalAdapterBuilder::SetSignals instead.") void SetSignalDataV2
            (
                const std::vector<NXOpen::Mechatronics::SignalAdapterBuilder::SignalDataV2> & signalData /** Array of signal data */
            );
            /**  @brief  Sets signals.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetSignals
            (
                const std::vector<NXOpen::Mechatronics::GenericSignal *> & signalData /** Array of signal data */
            );
            /**Returns   @brief  the maximum signal id.  

              
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: int MaxSignalId
            (
            );
            /**Sets   @brief  the maximum signal id.  

              
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetMaxSignalId
            (
                int maxSignalId /** maxsignalid */ 
            );
            /**Returns   @brief  the name.  

              
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXString Name
            (
            );
            /**Sets   @brief  the name.  

              
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets   @brief  the name.  

              
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
