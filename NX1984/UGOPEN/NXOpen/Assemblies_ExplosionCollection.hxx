#ifndef NXOpen_ASSEMBLIES_EXPLOSIONCOLLECTION_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_EXPLOSIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_ExplosionCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        class ExplosionCollection;
    }
    namespace Assemblies
    {
        class ComponentAssembly;
    }
    namespace Assemblies
    {
        class Explosion;
    }
    namespace Assemblies
    {
        class ExplosionCollectionImpl;
        /** Represents a collection of explosions  <br> To obtain an instance of this class, refer to @link NXOpen::Assemblies::ComponentAssembly  NXOpen::Assemblies::ComponentAssembly @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ASSEMBLIESEXPORT  ExplosionCollection : public NXOpen::TaggedObjectCollection
        {
            private: ExplosionCollectionImpl * m_explosioncollection_impl;
            private: NXOpen::Assemblies::ComponentAssembly* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ExplosionCollection(NXOpen::Assemblies::ComponentAssembly *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ExplosionCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Assemblies::ExplosionCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Assemblies::Explosion *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Assemblies::ExplosionCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_ASSEMBLIESEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_ASSEMBLIESEXPORT  void next();
                NXOpen::Assemblies::ExplosionCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates an explosion based upon the default arrangement in the given OCC part.
                     @return  the new explosion 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Explosion * Create
            (
                const NXString & explosionName /** Name to be given to the new explosion */
            );
            /** Creates an explosion based upon the default arrangement in the given OCC part.
                     @return  the new explosion 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            NXOpen::Assemblies::Explosion * Create
            (
                const char * explosionName /** Name to be given to the new explosion */
            );
            /** Finds the @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink  with the given identifier as recorded in a journal. 
                        This method should not be used in handwritten code and exists to support record and playback of journals.
                        An exception will be thrown if no object can be found with the given journal identifier.
                     @return  Explosion found, or null if no such Explosion exists.
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::Explosion * FindObject
            (
                const NXString & name /** Name of the Explosion to be found */
            );
            /** Finds the @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink  with the given identifier as recorded in a journal. 
                        This method should not be used in handwritten code and exists to support record and playback of journals.
                        An exception will be thrown if no object can be found with the given journal identifier.
                     @return  Explosion found, or null if no such Explosion exists.
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            NXOpen::Assemblies::Explosion * FindObject
            (
                const char * name /** Name of the Explosion to be found */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
