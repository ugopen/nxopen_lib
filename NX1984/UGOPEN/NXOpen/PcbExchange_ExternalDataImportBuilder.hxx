#ifndef NXOpen_PCBEXCHANGE_EXTERNALDATAIMPORTBUILDER_HXX_INCLUDED
#define NXOpen_PCBEXCHANGE_EXTERNALDATAIMPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PcbExchange_ExternalDataImportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_pcbexchange_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PcbExchange
    {
        class ExternalDataImportBuilder;
    }
    class Builder;
    namespace PcbExchange
    {
        class _ExternalDataImportBuilderBuilder;
        class ExternalDataImportBuilderImpl;
        /** Represents a builder to import external ECAD entities.  <br> To create a new instance of this class, use @link NXOpen::PcbExchange::Manager::CreateExternalDataImportBuilder  NXOpen::PcbExchange::Manager::CreateExternalDataImportBuilder @endlink  <br> 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_PCBEXCHANGEEXPORT  ExternalDataImportBuilder : public NXOpen::Builder
        {
            /** Options for filtering entities to import. */
            public: enum JaPcbExternalDataImportBuilderImportoption
            {
                JaPcbExternalDataImportBuilderImportoptionImport/** Import. */,
                JaPcbExternalDataImportBuilderImportoptionDoNotImport/** Do not import. */
            };

            private: ExternalDataImportBuilderImpl * m_externaldataimportbuilder_impl;
            private: friend class  _ExternalDataImportBuilderBuilder;
            protected: ExternalDataImportBuilder();
            public: ~ExternalDataImportBuilder();
            /**Returns  the ECAD filename to import. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Filename
            (
            );
            /**Sets  the ECAD filename to import. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetFilename
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the ECAD filename to import. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetFilename
            (
                const char * filename /** filename */ 
            );
            /** Queries the list of external entities available from the ECAD file. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void QueryEntities
            (
            );
            /** Returns the layer names.  @return  Layer names. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetLayerNames
            (
            );
            /** Returns whether the layer should be imported.  @return  Import option. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption GetLayerImported
            (
                const NXString & name /** Layer name. */
            );
            /** Returns whether the layer should be imported.  @return  Import option. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption GetLayerImported
            (
                const char * name /** Layer name. */
            );
            /** Sets whether the layer should be imported. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetLayerImported
            (
                const NXString & name /** Layer name. */,
                NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption importOption /** Import option. */
            );
            /** Sets whether the layer should be imported. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetLayerImported
            (
                const char * name /** Layer name. */,
                NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption importOption /** Import option. */
            );
            /** Returns the net names.  @return  Net names. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetNetNames
            (
            );
            /** Returns whether the net should be imported.  @return  Import option. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption GetNetImported
            (
                const NXString & name /** Net name. */
            );
            /** Returns whether the net should be imported.  @return  Import option. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption GetNetImported
            (
                const char * name /** Net name. */
            );
            /** Sets whether the net should be imported. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetNetImported
            (
                const NXString & name /** Net name. */,
                NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption importOption /** Import option. */
            );
            /** Sets whether the net should be imported. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetNetImported
            (
                const char * name /** Net name. */,
                NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption importOption /** Import option. */
            );
            /** Returns the padstack names.  @return  Padstack names. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetPadstackNames
            (
            );
            /** Returns whether the padstack should be imported.  @return  Import option. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption GetPadstackImported
            (
                const NXString & name /** Padstack name. */
            );
            /** Returns whether the padstack should be imported.  @return  Import option. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption GetPadstackImported
            (
                const char * name /** Padstack name. */
            );
            /** Sets whether the padstack should be imported. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") */
            public: void SetPadstackImported
            (
                const NXString & name /** Padstack name. */,
                NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption importOption /** Import option. */
            );
            /** Sets whether the padstack should be imported. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") */
            void SetPadstackImported
            (
                const char * name /** Padstack name. */,
                NXOpen::PcbExchange::ExternalDataImportBuilder::JaPcbExternalDataImportBuilderImportoption importOption /** Import option. */
            );
            /** Returns the part used to model pads in the padstack.  @return  Part file. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetPadstackPart
            (
                const NXString & name /** Padstack name. */
            );
            /** Returns the part used to model pads in the padstack.  @return  Part file. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            NXString GetPadstackPart
            (
                const char * name /** Padstack name. */
            );
            /** Sets the part used to model pads in the padstack. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") */
            public: void SetPadstackPart
            (
                const NXString & name /** Padstack name. */,
                const NXString & part /** Part file. */
            );
            /** Sets the part used to model pads in the padstack. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") */
            void SetPadstackPart
            (
                const char * name /** Padstack name. */,
                const char * part /** Part file. */
            );
            /**Returns  the comma-separated list of values for filtering nets. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NetsFilterString
            (
            );
            /**Sets  the comma-separated list of values for filtering nets. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetNetsFilterString
            (
                const NXString & filter /** filter */ 
            );
            /**Sets  the comma-separated list of values for filtering nets. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetNetsFilterString
            (
                const char * filter /** filter */ 
            );
            /**Returns  the flag indicating whether the filter string for nets is enabled. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool NetsFilterStringEnabled
            (
            );
            /**Sets  the flag indicating whether the filter string for nets is enabled. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetNetsFilterStringEnabled
            (
                bool enabled /** enabled */ 
            );
            /**Returns  the flag indicating whether to show the log. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowLog
            (
            );
            /**Sets  the flag indicating whether to show the log. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetShowLog
            (
                bool showLog /** showlog */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
