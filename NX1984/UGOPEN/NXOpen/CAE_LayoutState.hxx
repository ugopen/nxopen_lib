#ifndef NXOpen_CAE_LAYOUTSTATE_HXX_INCLUDED
#define NXOpen_CAE_LAYOUTSTATE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_LayoutState.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class LayoutState;
    }
    namespace CAE
    {
        class _LayoutStateBuilder;
        class LayoutStateImpl;
        /**  @brief  This is the class representing a layout state.  

           <br> Not support KF.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  LayoutState : public NXOpen::TaggedObject
        {
             /** Represents the paste option of a viewport */
            public:
            struct PasteOption
            {
                public: /** key */ NXString Key;
                public: /** localizedvalue */ NXString LocalizedValue;
                public: /** iconname */ NXString IconName;
                public: /** category */ int Category;
                public: /** parentcommandkey */ NXString ParentCommandKey;
                public: /** tooltip */ NXString Tooltip;
                public: PasteOption() :
                    Key(),
                    LocalizedValue(),
                    IconName(),
                    Category(),
                    ParentCommandKey(),
                    Tooltip()
                {
                }
                /** Constructor for the PasteOption struct. */ 
                public: PasteOption(const NXString &keyInitial /** key */ , 
                        const NXString &localizedValueInitial /** localizedvalue */ , 
                        const NXString &iconNameInitial /** iconname */ , 
                        int categoryInitial /** category */ , 
                        const NXString &parentCommandKeyInitial /** parentcommandkey */ , 
                        const NXString &tooltipInitial /** tooltip */ ) :
                    Key(keyInitial),
                    LocalizedValue(localizedValueInitial),
                    IconName(iconNameInitial),
                    Category(categoryInitial),
                    ParentCommandKey(parentCommandKeyInitial),
                    Tooltip(tooltipInitial)
                {
                }
            };

            /**  Viewport content type */
            public: enum ViewportContentType
            {
                ViewportContentTypeViewport/** viewport content that represents a viewport  */,
                ViewportContentTypePage/** viewport content that represents a page  */,
                ViewportContentTypeCurveOperation/** viewport content that represents a curve operation  */
            };

             /** Represents the content of a viewport */
            public:
            struct ViewportContent
            {
                public: /** name */ NXString Name;
                public: /** type */ NXOpen::CAE::LayoutState::ViewportContentType Type;
                public: /** path */ NXString Path;
                public: ViewportContent() :
                    Name(),
                    Type((NXOpen::CAE::LayoutState::ViewportContentType)0),
                    Path()
                {
                }
                /** Constructor for the ViewportContent struct. */ 
                public: ViewportContent(const NXString &nameInitial /** name */ , 
                        NXOpen::CAE::LayoutState::ViewportContentType typeInitial /** type */ , 
                        const NXString &pathInitial /** path */ ) :
                    Name(nameInitial),
                    Type(typeInitial),
                    Path(pathInitial)
                {
                }
            };

            private: LayoutStateImpl * m_layoutstate_impl;
            private: friend class  _LayoutStateBuilder;
            protected: LayoutState();
            public: ~LayoutState();
            /** Exports the layout state to an external file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void Export
            (
                const NXString & filePath /** filepath */ 
            );
            /** Exports the layout state to an external file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void Export
            (
                const char * filePath /** filepath */ 
            );

            /// \cond NX_NO_DOC 
            /** Exports the layout state to a validation external file.
                        For internal use only. The information exported by this method 
                        cannot be used as viewport description by SetViewportDescription.
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ExportForValidation
            (
                const NXString & filePath /** filepath */ 
            );
            /** Exports the layout state to a validation external file.
                        For internal use only. The information exported by this method 
                        cannot be used as viewport description by SetViewportDescription.
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void ExportForValidation
            (
                const char * filePath /** filepath */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Exports the layout state to a validation external file.
                        For internal use only. The information exported by this method 
                        cannot be used as viewport description by SetViewportDescription.
                        If filters is given, it will be used for the validation. 
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void CustomExportForValidation
            (
                const NXString & filePath /** filepath */ ,
                const std::vector<NXString> & filters /** filters */ 
            );
            /** Exports the layout state to a validation external file.
                        For internal use only. The information exported by this method 
                        cannot be used as viewport description by SetViewportDescription.
                        If filters is given, it will be used for the validation. 
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void CustomExportForValidation
            (
                const char * filePath /** filepath */ ,
                const std::vector<NXString> & filters /** filters */ 
            );

            /// \endcond 
            /** Renames the layout state 
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link NXOpen::CAE::LayoutState::SetName NXOpen::CAE::LayoutState::SetName@endlink  instead. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use NXOpen::CAE::LayoutState::SetName instead.") void Rename
            (
                const NXString & name /** name */ 
            );
            /** Renames the layout state 
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link NXOpen::CAE::LayoutState::SetName NXOpen::CAE::LayoutState::SetName@endlink  instead. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void Rename
            (
                const char * name /** name */ 
            );
            /** Get the viewport contents. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<NXOpen::CAE::LayoutState::ViewportContent> GetViewportContents
            (
            );
            /** Gets the layout information and the datareferences of a given viewport location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString GetViewportDescription
            (
                int viewport /** viewport */ 
            );
            /** Gets the layout information and the datareferences of the given viewport content 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString GetViewportDescription
            (
                const NXOpen::CAE::LayoutState::ViewportContent & viewportContent /** viewportcontent */ 
            );
            /** Sets the layout information and the datareferences to a given viewport location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetViewportDescription
            (
                int viewport /** viewport */ ,
                const NXString & xmloutput /** xmloutput */ 
            );
            /** Sets the layout information and the datareferences to a given viewport location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetViewportDescription
            (
                int viewport /** viewport */ ,
                const char * xmloutput /** xmloutput */ 
            );
            /** Sets the layout information and the datareferences to a given viewport location taking
                        into account the Paste Option given
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetViewportDescriptionWithOption
            (
                int viewport /** viewport */ ,
                const NXString & pasteOption /** pasteoption */ ,
                const NXString & xmloutput /** xmloutput */ 
            );
            /** Sets the layout information and the datareferences to a given viewport location taking
                        into account the Paste Option given
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetViewportDescriptionWithOption
            (
                int viewport /** viewport */ ,
                const char * pasteOption /** pasteoption */ ,
                const char * xmloutput /** xmloutput */ 
            );
            /** The name of the @link NXOpen::CAE::LayoutState NXOpen::CAE::LayoutState@endlink  viewport with the location.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString GetViewportName
            (
                int viewport /** viewport */ 
            );
            /** Sets yhe name of the @link NXOpen::CAE::LayoutState NXOpen::CAE::LayoutState@endlink  viewport with the location.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetViewportName
            (
                int viewport /** viewport */ ,
                const NXString & name /** name */ 
            );
            /** Sets yhe name of the @link NXOpen::CAE::LayoutState NXOpen::CAE::LayoutState@endlink  viewport with the location.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetViewportName
            (
                int viewport /** viewport */ ,
                const char * name /** name */ 
            );
            /** Get the available paste options on the given viewport. 
                        Viewport must be in the Active Layout State.
                        Clipboard content is used to determine the available options.
                        Caller is responsible to free the array and each text of each paste Option
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::LayoutState::PasteOption> GetViewportAvailablePasteOptions
            (
                int viewport /** viewport */ ,
                const NXString & cliboardInformation /** cliboardinformation */ 
            );
            /** Get the available paste options on the given viewport. 
                        Viewport must be in the Active Layout State.
                        Clipboard content is used to determine the available options.
                        Caller is responsible to free the array and each text of each paste Option
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            std::vector<NXOpen::CAE::LayoutState::PasteOption> GetViewportAvailablePasteOptions
            (
                int viewport /** viewport */ ,
                const char * cliboardInformation /** cliboardinformation */ 
            );
            /**Returns  the name of the @link NXOpen::CAE::LayoutState NXOpen::CAE::LayoutState@endlink .
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString Name
            (
            );
            /**Sets  the name of the @link NXOpen::CAE::LayoutState NXOpen::CAE::LayoutState@endlink .
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the @link NXOpen::CAE::LayoutState NXOpen::CAE::LayoutState@endlink .
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
