#ifndef NXOpen_VALIDATE_CHECKMODELWITHINPRINTABLEVOLUMEBUILDER_HXX_INCLUDED
#define NXOpen_VALIDATE_CHECKMODELWITHINPRINTABLEVOLUMEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_CheckModelWithinPrintableVolumeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_DisplayResolutionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Validate_SelectionAndPlacementBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class CheckModelWithinPrintableVolumeBuilder;
    }
    class Builder;
    namespace GeometricUtilities
    {
        class DisplayResolutionBuilder;
    }
    class NXColor;
    namespace Validate
    {
        class SelectionAndPlacementBuilder;
    }
    namespace Validate
    {
        class _CheckModelWithinPrintableVolumeBuilderBuilder;
        class CheckModelWithinPrintableVolumeBuilderImpl;
        /** Represents a @link NXOpen::Validate::CheckModelWithinPrintableVolumeBuilder NXOpen::Validate::CheckModelWithinPrintableVolumeBuilder@endlink   <br> To create a new instance of this class, use @link NXOpen::Validate::AnalysisResultCollection::CreateCheckModelWithinPrintableVolumeBuilder  NXOpen::Validate::AnalysisResultCollection::CreateCheckModelWithinPrintableVolumeBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AutomaticUpdate </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CloseToPrintableVolumeColor </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        DisplayResolutionBuilder.AngleTolerance </term> <description> 
         
        15.0 </description> </item> 

        <item><term> 
         
        DisplayResolutionBuilder.EdgeTolerance </term> <description> 
         
        0.005 </description> </item> 

        <item><term> 
         
        DisplayResolutionBuilder.FaceTolerance </term> <description> 
         
        0.005 </description> </item> 

        <item><term> 
         
        DisplayResolutionBuilder.Resolution </term> <description> 
         
        Standard </description> </item> 

        <item><term> 
         
        DisplayResolutionBuilder.WidthTolerance </term> <description> 
         
        0.3 </description> </item> 

        <item><term> 
         
        DistanceTolerance </term> <description> 
         
        1.0 (millimeters part), 0.04 (inches part) </description> </item> 

        <item><term> 
         
        OutOfPrintableVolumeColor </term> <description> 
         
        186 </description> </item> 

        <item><term> 
         
        PreviewState </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        PrinterDiameter </term> <description> 
         
        200.0 (millimeters part), 8.0 (inches part) </description> </item> 

        <item><term> 
         
        PrinterHeight </term> <description> 
         
        200.0 (millimeters part), 8.0 (inches part) </description> </item> 

        <item><term> 
         
        PrinterLength </term> <description> 
         
        200.0 (millimeters part), 8.0 (inches part) </description> </item> 

        <item><term> 
         
        PrinterWidth </term> <description> 
         
        200.0 (millimeters part), 8.0 (inches part) </description> </item> 

        <item><term> 
         
        WithinPrintableVolumeColor </term> <description> 
         
        36 </description> </item> 

        </list> 

         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  CheckModelWithinPrintableVolumeBuilder : public NXOpen::Builder
        {
            /** Represents the printer shape type */
            public: enum PrinterShapeTypes
            {
                PrinterShapeTypesBlock/** printer volume shape is block */,
                PrinterShapeTypesCylinder/** cylinder */ 
            };

            /** Represents the show type */
            public: enum ShowTypes
            {
                ShowTypesPrinter/** show type is printer */,
                ShowTypesProduct/** product */ ,
                ShowTypesBoth/** both */ 
            };

            private: CheckModelWithinPrintableVolumeBuilderImpl * m_checkmodelwithinprintablevolumebuilder_impl;
            private: friend class  _CheckModelWithinPrintableVolumeBuilderBuilder;
            protected: CheckModelWithinPrintableVolumeBuilder();
            public: ~CheckModelWithinPrintableVolumeBuilder();
            /**Returns  the selection and placement builder
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::SelectionAndPlacementBuilder * SelectionAndPlacement
            (
            );
            /**Returns  the shape type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::CheckModelWithinPrintableVolumeBuilder::PrinterShapeTypes PrinterShapeType
            (
            );
            /**Sets  the shape type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrinterShapeType
            (
                NXOpen::Validate::CheckModelWithinPrintableVolumeBuilder::PrinterShapeTypes printerShapeType /** printershapetype */ 
            );
            /**Returns  the show type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::CheckModelWithinPrintableVolumeBuilder::ShowTypes ShowType
            (
            );
            /**Sets  the show type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowType
            (
                NXOpen::Validate::CheckModelWithinPrintableVolumeBuilder::ShowTypes showType /** showtype */ 
            );
            /**Returns  the printer name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PrinterName
            (
            );
            /**Sets  the printer name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrinterName
            (
                const NXString & printerName /** printername */ 
            );
            /**Sets  the printer name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            void SetPrinterName
            (
                const char * printerName /** printername */ 
            );
            /**Returns  the printer length 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double PrinterLength
            (
            );
            /**Sets  the printer length 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrinterLength
            (
                double printerLength /** printerlength */ 
            );
            /**Returns  the printer width 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double PrinterWidth
            (
            );
            /**Sets  the printer width 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrinterWidth
            (
                double printerWidth /** printerwidth */ 
            );
            /**Returns  the printer height 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double PrinterHeight
            (
            );
            /**Sets  the printer height 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrinterHeight
            (
                double printerHeight /** printerheight */ 
            );
            /**Returns  the printer diameter 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double PrinterDiameter
            (
            );
            /**Sets  the printer diameter 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrinterDiameter
            (
                double printerDiameter /** printerdiameter */ 
            );
            /**Returns  the distance tolerance used to check the product bounding box and the printer bounding box 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance used to check the product bounding box and the printer bounding box 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the printer origin 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d PrinterOrigin
            (
            );
            /**Sets  the printer origin 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrinterOrigin
            (
                const NXOpen::Point3d & printerOrigin /** printerorigin */ 
            );
            /**Returns  the printer orientation 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 PrinterOrientation
            (
            );
            /**Sets  the printer orientation 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrinterOrientation
            (
                const NXOpen::Matrix3x3 & printerOrientation /** printerorientation */ 
            );
            /**Returns  the Within Printable Volume Color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * WithinPrintableVolumeColor
            (
            );
            /**Sets  the Within Printable Volume Color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWithinPrintableVolumeColor
            (
                NXOpen::NXColor * withinPrintableVolumeColor /** withinprintablevolumecolor */ 
            );
            /**Returns  the Close to Printable Volume Color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * CloseToPrintableVolumeColor
            (
            );
            /**Sets  the Close to Printable Volume Color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCloseToPrintableVolumeColor
            (
                NXOpen::NXColor * closetoPrintableVolumeColor /** closetoprintablevolumecolor */ 
            );
            /**Returns  the Out Of Printable Volume Color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OutOfPrintableVolumeColor
            (
            );
            /**Sets  the Out Of Printable Volume Color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOutOfPrintableVolumeColor
            (
                NXOpen::NXColor * outOfPrintableVolumeColor /** outofprintablevolumecolor */ 
            );
            /**Returns  the automatic update toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticUpdate
            (
            );
            /**Sets  the automatic update toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAutomaticUpdate
            (
                bool automaticUpdate /** automaticupdate */ 
            );
            /**Returns  the preview toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool PreviewState
            (
            );
            /**Sets  the preview toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPreviewState
            (
                bool previewState /** previewstate */ 
            );
            /**Returns  the display resolution 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DisplayResolutionBuilder * DisplayResolutionBuilder
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
