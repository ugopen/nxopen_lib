#ifndef NXOpen_TOOLING_COPYSOLIDBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_COPYSOLIDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_CopySolidBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_CloneObject.hxx>
#include <NXOpen/Tooling_ToolingManager.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class CopySolidBuilder;
    }
    namespace Assemblies
    {
        class SelectComponent;
    }
    class Builder;
    class SelectBodyList;
    namespace Tooling
    {
        class CloneObject;
    }
    namespace Tooling
    {
        class _CopySolidBuilderBuilder;
        class CopySolidBuilderImpl;
        /** 
            Represents a @link NXOpen::Tooling::CopySolidBuilder NXOpen::Tooling::CopySolidBuilder@endlink  builder.
             <br> To create a new instance of this class, use @link NXOpen::Tooling::MoldwizardManager::CreateCopySolidBuilder  NXOpen::Tooling::MoldwizardManager::CreateCopySolidBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  CopySolidBuilder : public NXOpen::Builder
        {
            /** Represents the copy destination type */
            public: enum CopyDestinationType
            {
                CopyDestinationTypeNewComponent/** Copy to new component */,
                CopyDestinationTypeExistingComponent/** Copy to existing component */
            };

            /** Represents the original body operation option */
            public: enum OriginalOperationOption
            {
                OriginalOperationOptionNone/** No disposal */,
                OriginalOperationOptionHide/** Hide the original bodies */,
                OriginalOperationOptionMoveToLayer/** Move the original bodies to layer */,
                OriginalOperationOptionDelete/** Delete the original bodies */
            };

            private: CopySolidBuilderImpl * m_copysolidbuilder_impl;
            private: friend class  _CopySolidBuilderBuilder;
            protected: CopySolidBuilder();
            public: ~CopySolidBuilder();
            /**Returns  the solid bodies selected by user
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectBodies
            (
            );
            /**Returns  the parent part occurrence of the part which collects the copied solid bodies.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponent * SelectParentPartOcc
            (
            );
            /**Returns  the multiple components 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool MultipleComponents
            (
            );
            /**Sets  the multiple components 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMultipleComponents
            (
                bool multipleComponents /** multiplecomponents */ 
            );
            /**Returns  the clone client data. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Tooling::CloneObject * CloneObject
            (
            );
            /**Sets  the wizard type data. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWizardType
            (
                NXOpen::Tooling::ToolingApplication wizardType /** wizardtype */ 
            );
            /**Returns  the wizard type data. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Tooling::ToolingApplication WizardType
            (
            );
            /**Returns  the copy to destination type selection. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CopySolidBuilder::CopyDestinationType CopyDestinationSelection
            (
            );
            /**Sets  the copy to destination type selection. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCopyDestinationSelection
            (
                NXOpen::Tooling::CopySolidBuilder::CopyDestinationType copyDestinationType /** copydestinationtype */ 
            );
            /**Returns  the template name list value. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TemplateNameListValue
            (
            );
            /**Sets  the template name list value. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTemplateNameListValue
            (
                const NXString & templateName /** templatename */ 
            );
            /**Sets  the template name list value. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetTemplateNameListValue
            (
                const char * templateName /** templatename */ 
            );
            /**Returns  the destination component which collects the copied solid bodies.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponent * DestinationComponent
            (
            );
            /**Returns  the operation type to original bodies. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CopySolidBuilder::OriginalOperationOption OriginalBodyOperation
            (
            );
            /**Sets  the operation type to original bodies. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOriginalBodyOperation
            (
                NXOpen::Tooling::CopySolidBuilder::OriginalOperationOption originalBodyOperation /** originalbodyoperation */ 
            );
            /**Returns  the layer is to be assigned to the original body
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int OriginalBodyLayer
            (
            );
            /**Sets  the layer is to be assigned to the original body
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOriginalBodyLayer
            (
                int originalBodyLayer /** originalbodylayer */ 
            );
            /**Returns  the associative. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the fix at current timestap. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool FixAtCurrentTimestamp
            (
            );
            /**Sets  the fix at current timestap. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFixAtCurrentTimestamp
            (
                bool fixAtCurrentTimestamp /** fixatcurrenttimestamp */ 
            );
            /** Gets the parent part name from template data base.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXString GetParentFromConfigurationRecord
            (
            );
            /** Updates the origional name and part name of clone part item.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateCloneItemsName
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
