#ifndef NXOpen_SIM_KINEMATICCHANNELBUILDER_HXX_INCLUDED
#define NXOpen_SIM_KINEMATICCHANNELBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_KinematicChannelBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        class KinematicChannelBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace SIM
    {
        class _KinematicChannelBuilderBuilder;
        class KinematicChannelBuilderImpl;
        /** This class is used for add kinematic channel to the channel configuratation list.
                Calling @link Builder::Commit Builder::Commit@endlink  on this builder will only return NULL.
             <br> To create a new instance of this class, use @link NXOpen::SIM::KinematicConfigurator::CreateKinematicChannelBuilder  NXOpen::SIM::KinematicConfigurator::CreateKinematicChannelBuilder @endlink  <br> 
         <br>  Created in NX9.0.3.  <br>  
        */
        class NXOPENCPP_SIMEXPORT  KinematicChannelBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: KinematicChannelBuilderImpl * m_kinematicchannelbuilder_impl;
            private: friend class  _KinematicChannelBuilderBuilder;
            protected: KinematicChannelBuilder();
            public: ~KinematicChannelBuilder();
            /**Returns  the name of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetName
            (
                const NXString & name /** the channel's new name */
            );
            /**Sets  the name of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetName
            (
                const char * name /** the channel's new name */
            );
            /** Gets a list of assigned axes of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void GetAssignedAxes
            (
                std::vector<NXString> & assignedAxes /** the list of assigned axes */
            );
            /** Sets a list of assigned axes of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAssignedAxes
            (
                std::vector<NXString> & assignedAxes /** the list of assigned axes */
            );
            /** Sets an assigned axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAssignedAxis
            (
                const NXString & axisName /** the assigned axis */
            );
            /** Sets an assigned axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAssignedAxis
            (
                const char * axisName /** the assigned axis */
            );
            /** Sets an unassigned axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetUnassignedAxis
            (
                const NXString & axisName /** the unassigned axis */
            );
            /** Sets an unassigned axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetUnassignedAxis
            (
                const char * axisName /** the unassigned axis */
            );
            /** Gets a list of referenced spindles of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void GetReferencedSpindles
            (
                std::vector<NXString> & refSpindles /** the list of referenced spindles */
            );
            /** Sets a list of referenced spindles of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetReferencedSpindles
            (
                std::vector<NXString> & refSpindles /** the list of referenced spindles */
            );
            /** Sets a referenced spindle of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetReferencedSpindle
            (
                const NXString & spindleName /** the referenced spindle */
            );
            /** Sets a referenced spindle of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetReferencedSpindle
            (
                const char * spindleName /** the referenced spindle */
            );
            /** Sets an unreferenced spindle of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetUnreferencedSpindle
            (
                const NXString & spindleName /** the unreferenced spindle */
            );
            /** Sets an unreferenced spindle of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetUnreferencedSpindle
            (
                const char * spindleName /** the unreferenced spindle */
            );
            /** Sets a referenced device of the channel 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetReferencedDevice
            (
                const NXString & deviceName /** the referenced device */
            );
            /** Sets a referenced device of the channel 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetReferencedDevice
            (
                const char * deviceName /** the referenced device */
            );
            /** Sets an unreferenced device of the channel 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetUnreferencedDevice
            (
                const NXString & deviceName /** the unreferenced device */
            );
            /** Sets an unreferenced device of the channel 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetUnreferencedDevice
            (
                const char * deviceName /** the unreferenced device */
            );
            /**Returns  the main spindle of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString MainSpindle
            (
            );
            /**Sets  the main spindle of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetMainSpindle
            (
                const NXString & mainSpindle /** the main spindle */
            );
            /**Sets  the main spindle of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetMainSpindle
            (
                const char * mainSpindle /** the main spindle */
            );
            /**Returns  the geometry X axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString GeometryAxisX
            (
            );
            /**Sets  the geometry X axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetGeometryAxisX
            (
                const NXString & xAxis /** the x axis */
            );
            /**Sets  the geometry X axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetGeometryAxisX
            (
                const char * xAxis /** the x axis */
            );
            /**Returns  the geometry Y axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString GeometryAxisY
            (
            );
            /**Sets  the geometry Y axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetGeometryAxisY
            (
                const NXString & yAxis /** the y axis */
            );
            /**Sets  the geometry Y axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetGeometryAxisY
            (
                const char * yAxis /** the y axis */
            );
            /**Returns  the geometry Z axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString GeometryAxisZ
            (
            );
            /**Sets  the geometry Z axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetGeometryAxisZ
            (
                const NXString & zAxis /** the z axis */
            );
            /**Sets  the geometry Z axis of the channel 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetGeometryAxisZ
            (
                const char * zAxis /** the z axis */
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
