#ifndef NXOpen_TOOLING_LSDYNAFORMANALYSISRESULTDISPLAYBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_LSDYNAFORMANALYSISRESULTDISPLAYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_LsdynaFormAnalysisResultDisplayBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class LsdynaFormAnalysisResultDisplayBuilder;
    }
    class Builder;
    namespace Tooling
    {
        class _LsdynaFormAnalysisResultDisplayBuilderBuilder;
        class LsdynaFormAnalysisResultDisplayBuilderImpl;
        /** Represents a Ly-Dyna Formability Analysis - Result Display builder  <br> To create a new instance of this class, use @link NXOpen::Tooling::AutoDieCollection::CreateLsdynaFormAnalysisResultDisplayBuilder  NXOpen::Tooling::AutoDieCollection::CreateLsdynaFormAnalysisResultDisplayBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AllowableThickening </term> <description> 
         
        0.01 </description> </item> 

        <item><term> 
         
        AllowableThinning </term> <description> 
         
        0.15 </description> </item> 

        <item><term> 
         
        EssentialThinning </term> <description> 
         
        0.05 </description> </item> 

        <item><term> 
         
        FormabilityStrainType </term> <description> 
         
        TopPrincipalStrain </description> </item> 

        <item><term> 
         
        LimitOfFlc </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RValue </term> <description> 
         
        1.82 </description> </item> 

        <item><term> 
         
        SafetyMarginFromFlc </term> <description> 
         
        20 </description> </item> 

        <item><term> 
         
        ShowCracks </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowInadequateStretch </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowRiskOfCracks </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowSevereThinning </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowWrinkles </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowWrinklingTendency </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        State </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        StrainType </term> <description> 
         
        TopMajorPrincipalStrain </description> </item> 

        <item><term> 
         
        StressType </term> <description> 
         
        MaximumInplaneStress </description> </item> 

        </list> 

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  LsdynaFormAnalysisResultDisplayBuilder : public NXOpen::Builder
        {
            /** Options to set stress type to display for stress analysis result. */
            public: enum StressTypeName
            {
                StressTypeNameMaximumInplaneStress/** Display maximum in-plane stress. */,
                StressTypeNameMinimumInplaneStress/** Display minimum in-plane stress. */
            };

            /** Options to set strain type to display for strain analysis result. */
            public: enum StrainTypeName
            {
                StrainTypeNameTopMajorPrincipalStrain/** Display top major principal strain. */,
                StrainTypeNameTopMinorPrincipalStrain/** Display top minor principal strain. */,
                StrainTypeNameBottomMajorPrincipalStrain/** Display bottom major principal strain. */,
                StrainTypeNameBottomMinorPrincipalStrain/** Display bottom minor principal strain. */
            };

            /** Options to set strain type to display for formability analysis result. */
            public: enum FormabilityStrainTypeName
            {
                FormabilityStrainTypeNameTopPrincipalStrain/** Display top principal strain. */,
                FormabilityStrainTypeNameBottomPrincipalStrain/** Display bottom principal strain. */
            };

            private: LsdynaFormAnalysisResultDisplayBuilderImpl * m_lsdynaformanalysisresultdisplaybuilder_impl;
            private: friend class  _LsdynaFormAnalysisResultDisplayBuilderBuilder;
            protected: LsdynaFormAnalysisResultDisplayBuilder();
            public: ~LsdynaFormAnalysisResultDisplayBuilder();
            /** Set all the result files of the analysis result. If d3plot and its subsequent files is added,
                        the subsequent root files with a two letter appendage(d3plotaa, d3plotab, etc.) and their
                        subsequent files(d3plotaa01, d3plotaa02, etc.) should also be added. Otherwise, only the root
                        file with a two letter appendage and its subsequent files should be added. Only add subsequent
                        files is not allowed. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetResultFileNames
            (
                std::vector<NXString> & resultFileNames /** resultfilenames */ 
            );
            /**Returns  the result file folder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ResultFileFolder
            (
            );
            /**Sets  the result file folder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetResultFileFolder
            (
                const NXString & folderName /** foldername */ 
            );
            /**Sets  the result file folder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetResultFileFolder
            (
                const char * folderName /** foldername */ 
            );
            /** Import geometries from analysis result files. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ImportGeometries
            (
            );
            /** Display formability analysis result. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DisplayFormability
            (
            );
            /** Display stress analysis result. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DisplayStress
            (
            );
            /** Display strain analysis result. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DisplayStrain
            (
            );
            /** Display thickness analysis result. It shows the thicknesses of all elements. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DisplayThickness
            (
            );
            /** Display thinning analysis result. It shows the thinning rates of all elements. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DisplayThinning
            (
            );
            /**Returns  the stress type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LsdynaFormAnalysisResultDisplayBuilder::StressTypeName StressType
            (
            );
            /**Sets  the stress type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStressType
            (
                NXOpen::Tooling::LsdynaFormAnalysisResultDisplayBuilder::StressTypeName stressType /** stresstype */ 
            );
            /**Returns  the strain type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LsdynaFormAnalysisResultDisplayBuilder::StrainTypeName StrainType
            (
            );
            /**Sets  the strain type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStrainType
            (
                NXOpen::Tooling::LsdynaFormAnalysisResultDisplayBuilder::StrainTypeName strainType /** straintype */ 
            );
            /**Returns  the formability strain type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LsdynaFormAnalysisResultDisplayBuilder::FormabilityStrainTypeName FormabilityStrainType
            (
            );
            /**Sets  the formability strain type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFormabilityStrainType
            (
                NXOpen::Tooling::LsdynaFormAnalysisResultDisplayBuilder::FormabilityStrainTypeName formabilityStrainType /** formabilitystraintype */ 
            );
            /**Returns  the limit of formability limit curve 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double LimitOfFlc
            (
            );
            /**Sets  the limit of formability limit curve 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetLimitOfFlc
            (
                double limitOfFlc /** limitofflc */ 
            );
            /**Returns  the option to indicate whether to show crack region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowCracks
            (
            );
            /**Sets  the option to indicate whether to show crack region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetShowCracks
            (
                bool showCracks /** showcracks */ 
            );
            /**Returns  the safety margin from flc 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double SafetyMarginFromFlc
            (
            );
            /**Sets  the safety margin from flc 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSafetyMarginFromFlc
            (
                double safetyMarginFromFlc /** safetymarginfromflc */ 
            );
            /**Returns  the option to indicate whether to show risk of cracks region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowRiskOfCracks
            (
            );
            /**Sets  the option to indicate whether to show risk of cracks region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetShowRiskOfCracks
            (
                bool showRiskOfCracks /** showriskofcracks */ 
            );
            /**Returns  the allowable thinning 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double AllowableThinning
            (
            );
            /**Sets  the allowable thinning 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAllowableThinning
            (
                double allowableThinning /** allowablethinning */ 
            );
            /**Returns  the option to indicate whether to show excessive thinning region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowSevereThinning
            (
            );
            /**Sets  the option to indicate whether to show excessive thinning region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetShowSevereThinning
            (
                bool showSevereThinning /** showseverethinning */ 
            );
            /**Returns  the essential thinning 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double EssentialThinning
            (
            );
            /**Sets  the essential thinning 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEssentialThinning
            (
                double essentialThinning /** essentialthinning */ 
            );
            /**Returns  the option to indicate whether to show lack of stretching region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowInadequateStretch
            (
            );
            /**Sets  the option to indicate whether to show lack of stretching region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetShowInadequateStretch
            (
                bool showInadequateStretch /** showinadequatestretch */ 
            );
            /**Returns  the allowable thickening 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double AllowableThickening
            (
            );
            /**Sets  the allowable thickening 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAllowableThickening
            (
                double allowableThickening /** allowablethickening */ 
            );
            /**Returns  the R-value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double RValue
            (
            );
            /**Sets  the R-value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRValue
            (
                double rValue /** rvalue */ 
            );
            /**Returns  the option to indicate whether to show tendency to wrinkle region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowWrinklingTendency
            (
            );
            /**Sets  the option to indicate whether to show tendency to wrinkle region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetShowWrinklingTendency
            (
                bool showWrinklingTendency /** showwrinklingtendency */ 
            );
            /**Returns  the option to indicate whether to show wrinkled region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowWrinkles
            (
            );
            /**Sets  the option to indicate whether to show wrinkled region or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetShowWrinkles
            (
                bool showWrinkles /** showwrinkles */ 
            );
            /**Returns  the index of the state which is currently displayed in graphic window 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int State
            (
            );
            /**Sets  the index of the state which is currently displayed in graphic window 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetState
            (
                int state /** state */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
