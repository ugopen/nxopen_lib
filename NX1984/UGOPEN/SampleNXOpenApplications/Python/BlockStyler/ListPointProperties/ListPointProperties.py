#==============================================================================
#   WARNING!!  This file is overwritten by the Block UI Styler while generating
#   the automation code. Any modifications to this file will be lost after
#   generating the code again.
# 
#        Filename:  D:\workdir\devunits\pesumner_usability_doc\src\NXOpenApps\SampleNXOpenApplications\Python\BlockStyler\ListPointProperties\ListPointProperties.py
# 
#         This file was generated by the NX Block UI Styler
#         Created by: pesumner
#               Version: NX 12
#               Date: 08-10-2016  (Format: mm-dd-yyyy)
#               Time: 13:59 (Format: hh-mm)
# 
#==============================================================================

#==============================================================================
#   Purpose:  This TEMPLATE file contains Python source to guide you in the
#   construction of your Block application dialog. The generation of your
#   dialog file (.dlx extension) is the first step towards dialog construction
#   within NX.  You must now create a NX Open application that
#   utilizes this file (.dlx).
# 
#   The information in this file provides you with the following:
# 
#   1.  Help on how to load and display your Block UI Styler dialog in NX
#       using APIs provided in NXOpen.BlockStyler namespace
#   2.  The empty callback methods (stubs) associated with your dialog items
#       have also been placed in this file. These empty methods have been
#       created simply to start you along with your coding requirements.
#       The method name, argument list and possible return values have already
#       been provided for you.
#==============================================================================

#------------------------------------------------------------------------------
# These imports are needed for the following template code
#------------------------------------------------------------------------------
import NXOpen
import NXOpen.BlockStyler
import NXOpen.UF

#------------------------------------------------------------------------------
# Represents Block Styler application cls
#------------------------------------------------------------------------------
class ListPointProperties:
    # static class members
    theSession = None
    theUI = None
    
    #------------------------------------------------------------------------------
    # Constructor for NX Styler class
    #------------------------------------------------------------------------------
    def __init__(self):
        try:
            self.theSession = NXOpen.Session.GetSession()
            self.theUI = NXOpen.UI.GetUI()
            self.theDlxFileName = "ListPointProperties.dlx"
            self.theDialog = self.theUI.CreateDialog(self.theDlxFileName)
            self.theDialog.AddUpdateHandler(self.update_cb)
            self.theDialog.AddCloseHandler(self.close_cb)
            self.theDialog.AddFilterHandler(self.filter_cb)
            self.theDialog.AddInitializeHandler(self.initialize_cb)
            self.theDialog.AddDialogShownHandler(self.dialogShown_cb)
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            raise ex
        
    
    # ------------------------------- DIALOG LAUNCHING ---------------------------------
    # 
    #     Before invoking this application one needs to open any part/empty part in NX
    #     because of the behavior of the blocks.
    # 
    #     Make sure the dlx file is in one of the following locations:
    #         1.) From where NX session is launched
    #         2.) $UGII_USER_DIR/application
    #         3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    #             recommended. This variable is set to a full directory path to a file 
    #             containing a list of root directories for all custom applications.
    #             e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    # 
    #     You can create the dialog using one of the following way:
    # 
    #     1. Journal Replay
    # 
    #         1) Replay this file through Tool->Journal->Play Menu.
    # 
    #     2. USER EXIT
    # 
    #         1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    #         2) Invoke the Shared Library through File->Execute->NX Open menu.
    # 
    #------------------------------------------------------------------------------
    
    #------------------------------------------------------------------------------
    # This method shows the dialog on the screen
    #------------------------------------------------------------------------------
    def Show(self):
        try:
            self.theDialog.Show()
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
    
    #------------------------------------------------------------------------------
    # Method Name: Dispose
    #------------------------------------------------------------------------------
    def Dispose(self):
        if self.theDialog != None:
            self.theDialog.Dispose()
            self.theDialog = None
    
    #------------------------------------------------------------------------------
    # ---------------------Block UI Styler Callback Functions--------------------------
    #------------------------------------------------------------------------------
    
    #------------------------------------------------------------------------------
    # Callback Name: initialize_cb
    #------------------------------------------------------------------------------
    def initialize_cb(self):
        try:
            self.group0 = self.theDialog.TopBlock.FindBlock("group0")
            self.superPoint0 = self.theDialog.TopBlock.FindBlock("superPoint0")
            self.button0 = self.theDialog.TopBlock.FindBlock("button0")
            self.list_box0 = self.theDialog.TopBlock.FindBlock("list_box0")
            #------------------------------------------------------------------------------
            # Registration of ListBox specific callbacks
            #------------------------------------------------------------------------------
            # self.list_box0.SetAddHandler(self.AddCallback)
            # self.list_box0.SetDeleteHandler(self.DeleteCallback)
            #------------------------------------------------------------------------------
            self.theDialog.TopBlock.Label = "List Point Properties"
            self.group0.Label = "Point Properties"
            self.button0.Label = "Clear Selection"
            
            # Block Specific Properties
            self.superPoint0.AllowConvergentObject = False
            self.superPoint0.AutomaticProgression = False
            self.superPoint0.BlendVirtualCurveOverlay = False
            self.superPoint0.CreateInterpartLink = False
            #self.superPoint0.InterpartSelectionAsString = "Simple"
            #self.superPoint0.InterpartSelectionAsString = "Non-associative Interpart Copy Only"
            self.superPoint0.InterpartSelectionAsString = "Associative and Non-associative Interpart Copy"
            #self.superPoint0.InterpartSelectionAsString = "Associative Interpart Copy"
            #self.superPoint0.LabelString = "Select Point"
            self.superPoint0.LabelString = "Select Points"
            self.superPoint0.ShowFlowDirectionAndOriginCurve = False
            self.superPoint0.SketchOnPath = False
            self.StepStatusAsString = "Required"
            #self.StepStatusAsString = "Optional"
            #self.StepStatusAsString = "Satisfied"

            # Selection Intent Properties
            self.superPoint0.CurveRules = self.SpecifyCurveRules()
            #self.superPoint0.DefaultCurveRulesAsString = "Single Curve"
            #self.superPoint0.DefaultCurveRulesAsString = "Infer Points"
            self.superPoint0.DefaultCurveRulesAsString = "Infer Curves"
            #self.superPoint0.DefaultCurveRulesAsString = "Feature Points"
            # Allow Points (0x8) is the only supported entity type for the SuperPoint block
            self.superPoint0.EntityType = 0x8

            # Snap Properties
            self.superPoint0.PointOverlay = True
            self.superPoint0.SnapPointTypesEnabled = self.SpecifySnapPointTypes()
            self.superPoint0.SnapPointTypesOnByDefault = self.SpecifyDefaultSnapPointTypes()
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
    
    #------------------------------------------------------------------------------
    # Callback Name: dialogShown_cb
    # This callback is executed just before the dialog launch. Thus any value set 
    # here will take precedence and dialog will be launched showing that value. 
    #------------------------------------------------------------------------------
    def dialogShown_cb(self):
        try:
            # ---- Enter your callback code here -----
            pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
    
    #------------------------------------------------------------------------------
    # Callback Name: update_cb
    #------------------------------------------------------------------------------
    def update_cb(self, block):
        try:
            if block == self.superPoint0:
                list_info = []
                objs = self.GetSelectedPoints()
                list_info.append("Number of points selected is {0:d}".format(len(objs)))
                list_info.append("")
                if len(objs) < 5000:
                    for obj in objs:
                        if isinstance(obj, NXOpen.Point):
                            list_info.extend(self.GetPointInfo(obj))
                        else:
                            list_info.append("Object: {}".format(type(obj)))
                self.list_box0.SetListItems(list_info)
            elif block == self.button0:
                self.ClearDialog()
            elif block == self.list_box0:
                pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return 0
    
    #------------------------------------------------------------------------------
    # Callback Name: close_cb
    #------------------------------------------------------------------------------
    def close_cb(self):
        errorCode = 0
        try:
            # ---- Enter your callback code here -----
            pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            errorCode = 1
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return errorCode
    
    #------------------------------------------------------------------------------
    # Callback Name: filter_cb
    #------------------------------------------------------------------------------
    def filter_cb(self, block, selectedObject):
        return NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT
    #------------------------------------------------------------------------------
    # ListBox specific callbacks
    #------------------------------------------------------------------------------
    # def AddCallback (self list_box):
    # 
    # 
    
    # def DeleteCallback(self, list_box):
    # 
    # 
    
    #------------------------------------------------------------------------------
    
    #------------------------------------------------------------------------------
    # Function Name: GetBlockProperties
    # Returns the propertylist of the specified BlockID
    #------------------------------------------------------------------------------
    def GetBlockProperties(self, blockID):
        try:
            return self.theDialog.GetBlockProperties(blockID)
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        return None
        
    def ClearDialog(self):
        selObjs = []
        self.superPoint0.SetSelectedObjects(selObjs)
        info = []
        self.list_box0.SetListItems(info)

    def GetSelectedPoints(self):
        points = []
        objects = self.GetSelectedObjects()
        # Should get one object from the SuperPoint block. This is 
        # a section containing all the selected points.
        if len(objects) == 1:
            section = objects[0]
            if isinstance(section, NXOpen.Section):
                points = self.GetSelectedPointsFromSection(section)
        return points

    def GetSelectedPointsFromSection(self, section):
        """
        The SuperPoint block places all the selected points into a single section.
        You need to traverse through the section data and section element data 
        elements of this section to access the points. This routine does that 
        and returns a list of points.
        """
        points = []
        data_list = section.GetSectionData()
        for section_data in data_list:
            section_elements = section_data.GetSectionElementsData()
            for element in section_elements:
                sectionElement, startConnector, startPoint, endConnector, endPoint = element.GetSectionElementData1()
                if isinstance(sectionElement, NXOpen.Point):
                    points.append(sectionElement)
        return points
        
    def GetSelectedObjects(self):
        try:
            return self.superPoint0.GetSelectedObjects()
        except Exception as ex:
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        return []
        
    def GetPointInfo(self, point):
        info = []
        info.append("Point tag is {}".format(point.Tag))
        pt = point.Coordinates
        info.append("Point location is ({0:.6g}, {1:.6g}, {2:.6g})".format(pt.X, pt.Y, pt.Z))
        info.append("")
        return info

    # Define the allowed curve rules for the CurveRules property in the Super 
    # Point control. Use the Python bitwise operator to combine the desired 
    # curve rule values, then set the CurveRules property of the Super Point 
    # to the result. Documentation explaining the different rules is in the 
    # Selecting objects section of the Fundamentals chapter of the NX Help 
    # Documentation.
    def SpecifyCurveRules(self):
        curve_rules  = 0x1     # Single Curve - Required
        curve_rules |= 0x400   # Feature Points
        curve_rules |= 0x80    # Infer Curves
        return curve_rules

    # Define the enabled snap point types for SnapPointTypesEnabled in the 
    # Super Point control. Use the Python bitwise operator to combine the 
    # desired snap point types, then set the SnapPointTypesEnabled property 
    # of the Super Point to the result. Documentation explaining the different 
    # snap point types is in the Selecting objects section of the Fundamentals 
    # chapter of the NX Help Documentation.
    def SpecifySnapPointTypes(self):
        snap_point_types  = 0
        snap_point_types |= 0x80     # Arc Center
        snap_point_types |= 0x10000  # Bounded Grid Point
        snap_point_types |= 0x20     # Control Point
        #snap_point_types |= 0x40000  # Defining Point
        snap_point_types |= 0x8      # End Point
        snap_point_types |= 0x200    # Existing Point
        #snap_point_types |= 0x20000  # Facet Vertex Point
        #snap_point_types |= 0x2      # Inferred
        snap_point_types |= 0x40     # Intersection
        snap_point_types |= 0x10     # Mid Point
        snap_point_types |= 0x1000   # Point Constructor
        snap_point_types |= 0x400    # Point on Curve
        snap_point_types |= 0x800    # Point on Surface
        #snap_point_types |= 0x8000   # Poles
        snap_point_types |= 0x100    # Quadrant Point
        #snap_point_types |= 0x4      # Screen Position
        #snap_point_types |= 0x4000   # Tangent Point
        #snap_point_types |= 0x2000   # Two-curve Intersection
        #snap_point_types |= 0x1      # User-defined
        return snap_point_types

    # Define the snap point types that are on by default for the 
    # SnapPointTypesOnByDefault property in the Super Point control. 
    # Use the Python bitwise operator to combine the default snap point types, 
    # then set the SnapPointTypesOnByDefault property of the Super Point to 
    # the result. The snap point types set as defaults have to be in the 
    # set of snap point types set in the SnapPointTypesEnabled property.
    # Documentation explaining the different snap point types is in the 
    # Selecting objects section of the Fundamentals chapter of the NX Help
    # Documentation.
    def SpecifyDefaultSnapPointTypes(self):
        snap_point_types  = 0
        snap_point_types |= 0x80     # Arc Center
        #snap_point_types |= 0x10000  # Bounded Grid Point
        #snap_point_types |= 0x20     # Control Point
        #snap_point_types |= 0x40000  # Defining Point
        snap_point_types |= 0x8      # End Point
        snap_point_types |= 0x200    # Existing Point
        #snap_point_types |= 0x20000  # Facet Vertex Point
        #snap_point_types |= 0x2      # Inferred
        #snap_point_types |= 0x40     # Intersection
        snap_point_types |= 0x10     # Mid Point
        #snap_point_types |= 0x1000   # Point Constructor
        #snap_point_types |= 0x400    # Point on Curve
        #snap_point_types |= 0x800    # Point on Surface
        #snap_point_types |= 0x8000   # Poles
        #snap_point_types |= 0x100    # Quadrant Point
        #snap_point_types |= 0x4      # Screen Position
        #snap_point_types |= 0x4000   # Tangent Point
        #snap_point_types |= 0x2000   # Two-curve Intersection
        #snap_point_types |= 0x1      # User-defined
        return snap_point_types
    
def main():
    theListPointProperties = None
    try:
        theListPointProperties =  ListPointProperties()
        #  The following method shows the dialog immediately
        theListPointProperties.Show()
    except Exception as ex:
        # ---- Enter your exception handling code here -----
        NXOpen.UI.GetUI().NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
    finally:
        if theListPointProperties != None:
            theListPointProperties.Dispose()
            theListPointProperties = None
    
if __name__ == '__main__':
    main()

