/*=============================================================================

                    Copyright (c) 2008 Siemens PLM Solutions
                    Unpublished - All rights reserved

===============================================================================
File description: Sample NX/Open Application
===============================================================================

=============================================================================
*/

//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//
//        This file was generated by the NX Block UI Styler
//              Version: NX 11
//              Date: 05-22-2015  (Format: mm-dd-yyyy)
//              Time: 10:50 (Format: hh-mm)
//
//==============================================================================


//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using System.Collections.Generic;
using System.Threading;
using System.Windows.Forms;
//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class TopLevelDialog
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private static NXOpen.BlockStyler.BlockDialog theDialog;
    private static NXOpen.BlockStyler.Group group0;// Block type: Group
    private static NXOpen.BlockStyler.Enumeration enum0;// Block type: Enumeration
    private static NXOpen.BlockStyler.Button button0;// Block type: Button
    private static NXOpen.BlockStyler.ListBox list_box0;// Block type: List Box

    private static List<NXOpen.DisplayableObject>  faceList;

    private static Object finishedLock = new Object();  

    private static bool m_done = false;  // This is used to track the operation is done
                                         // And the dialog can be closed

    private static bool m_testMode = false; // This flag is used to indicate to run the 
                                            // The dialog in test mode.  When the Select
                                            // Face button is pushed, we will pass the 
                                            // JournalIdentifier for the face to select
                                            // And then since this satisfies the condition
                                            // we wait for in SubDialog we call the PerformOK
                                            // button.

    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public TopLevelDialog()
    {
        try
        {
            faceList = new List<NXOpen.DisplayableObject>();
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = "TopLevelDialog.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddCancelHandler(new NXOpen.BlockStyler.BlockDialog.Cancel(cancel_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));

            m_done = false;
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Remove the following conditional definitions:
    //
    //                a) #if USER_EXIT
    //                    #endif//USER_EXIT
    //        2) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        3) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //    3. THROUGH CALLBACK OF ANOTHER DIALOG
    //
    //        1) Remove the following conditional definition:
    //             #if CALLBACK
    //             #endif//CALLBACK
    //        2) Call the following line of code from where ever you want to launch this dialog.
    //             TopLevelDialog.Show_TopLevelDialog();
    //        3) Integrate this file with your main application file.
    //
    //------------------------------------------------------------------------------

    public static void Main()
    {
        TopLevelDialog theTopLevelDialog = null;
        try
        {
            theTopLevelDialog = new TopLevelDialog();
            // The following method shows the dialog immediately

            Thread oThread = new Thread(new ThreadStart(TopLevelDialog.DoPerformOK));

            // Start the thread
            oThread.Start();

            // Spin for a while waiting for the started thread to become
            // alive:
            while (!oThread.IsAlive) ;

            theTopLevelDialog.Show();

            oThread.Join();

        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Thrown Exception", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if(theTopLevelDialog != null)
                theTopLevelDialog.Dispose();
                theTopLevelDialog = null;
        }
    }

    // This method performs the OK button once at least two faces have been selected
    // This dialog has some Sleeps calls in place, so the user can see the updates to the dialog
    // This also means the user could perform the OK button as well.  So to protect against
    // At each step in this method we check to see if the m_done flag has been set, and if so, we return 
    // out of this.
    public static void DoPerformOK()
    {
        try
        {
            //Wait for object count to exceed two
            while (faceList.Count < 2 && !m_done)
            {
                Thread.Sleep(100);
            }

            //If m_done flag is set return from thread
            if (m_done)
            {
                return;
            }
    
            //This sleep is in here so the user can can see the faces selected
            Thread.Sleep(2000);

            if (!m_done)
            {
                //After PerformOK or PerformCancel is called the Show method will return
                //This means you cannot call PerformOK or PerformCancel.
                //And if you call either of them after one of the methods has been called
                //This will put NX in a state of deadlock, as we need to wait for the call
                //To complete, but will we will not process the call as we will be 
                //blocking the main thread in NX
                theDialog.PerformOK();
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            //Do not call the NXOpen method below, as this is method is not thread safe in NX.
            //Instead use the .Net method to show a messagebox instead.
            //theUI.NXMessageBox.Show("Thrown Exception", NXMessageBox.DialogType.Error, ex.Message);
            MessageBox.Show(ex.Message, "Thrown Exception", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation);
        }
        m_done = true;
    }

    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
            enum0 = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("enum0");
            button0 = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button0");
            list_box0 = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("list_box0");
            //------------------------------------------------------------------------------
            //Registration of ListBox specific callbacks
            //------------------------------------------------------------------------------
            //list_box0.SetAddHandler(new NXOpen.BlockStyler.ListBox.AddCallback(AddCallback));
            
            //list_box0.SetDeleteHandler(new NXOpen.BlockStyler.ListBox.DeleteCallback(DeleteCallback));
            
            //------------------------------------------------------------------------------
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
       
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        m_done = true;
        try
        {
            if (faceList != null && faceList.Count != 0)
            { 
                NXOpen.Part workPart = theSession.Parts.Work;
                NXOpen.Part displayPart = theSession.Parts.Display;
                // ----------------------------------------------
                //   Menu: 'Edit->'Selection->'Deselect All
                // ----------------------------------------------
                // ----------------------------------------------
                //   Menu: 'Edit->'Object Display...
                // ----------------------------------------------
                // ----------------------------------------------
                //   Dialog Begin 'Color
                // ----------------------------------------------
                NXOpen.Session.UndoMarkId markId1;
                markId1 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Edit Object Display");

                NXOpen.DisplayModification displayModification1;
                displayModification1 = theSession.DisplayManager.NewDisplayModification();

                displayModification1.ApplyToAllFaces = true;

                displayModification1.ApplyToOwningParts = false;

                String stringOfColor = GetColor();

                NXColor color = theSession.Parts.Work.Colors.Find(stringOfColor);
                displayModification1.NewColor = color.Handle;

                NXOpen.DisplayableObject[] objectsArray = faceList.ToArray();
                

                displayModification1.Apply(objectsArray);

                displayModification1.Dispose();
            }
        }
        catch (Exception ex)
        {
            UI theUI = UI.GetUI();
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    public String GetColor()
    {
        String stringOfColor = enum0.ValueAsString;

        return stringOfColor;

    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == enum0)
            {
                // Do Nothing
            }
            else if(block == button0)
            {
                NXOpen.DisplayableObject objSelected = null;

                NXOpen.Face hardcodeFace = null;

                if(m_testMode)
                { 
                    NXOpen.Part workPart = theSession.Parts.Work;
                    if (faceList.Count == 0)
                    {
                        NXOpen.Features.Block block1 = (NXOpen.Features.Block)workPart.Features.FindObject("BLOCK(1)");
                        hardcodeFace = (NXOpen.Face)block1.FindObject("FACE 2 {(50,0,50) BLOCK(1)}");
                    }
                    else if (faceList.Count == 1)
                    {
                        NXOpen.Features.Block block1 = (NXOpen.Features.Block)workPart.Features.FindObject("BLOCK(1)");
                        hardcodeFace = (NXOpen.Face)block1.FindObject("FACE 6 {(100,50,50) BLOCK(1)}");
                    }
                }

                if(hardcodeFace == null)
                {
                    SubDialog.Show_SubDialog(ref objSelected);
                }
                else
                {
                    SubDialog.Show_SubDialogHardCodedValues(ref objSelected, hardcodeFace);
                }
                

                if(objSelected != null)
                {
                    faceList.Add(objSelected);


                   NXOpen.BlockStyler.PropertyList ListBoxPropList = list_box0.GetProperties();
                   //Report out the Journal Identifiers of the faces selected
                   String[] arrayBoxStrings = ListBoxPropList.GetStrings("ListItems");
                   List<String> listBoxStrings = new List<String>();

                   if (listBoxStrings != null)
                   {
                        for(int i = 0; i < arrayBoxStrings.Length; i++)
                        {
                            listBoxStrings.Add(arrayBoxStrings[i]);
                        }
                   }

                   listBoxStrings.Add(objSelected.JournalIdentifier);

                   ListBoxPropList.SetStrings("ListItems", listBoxStrings.ToArray());

                   ListBoxPropList.Dispose();
                   ListBoxPropList = null;
                }
            }
            else if(block == list_box0)
            {
                //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: cancel_cb
    //------------------------------------------------------------------------------
    public int cancel_cb()
    {
        m_done = true;
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //ListBox specific callbacks
    //------------------------------------------------------------------------------
    //public int  AddCallback (NXOpen.BlockStyler.ListBox list_box)
    //{
    //}
    
    //public int  DeleteCallback(NXOpen.BlockStyler.ListBox list_box)
    //{
    //}
    
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }
    
}
