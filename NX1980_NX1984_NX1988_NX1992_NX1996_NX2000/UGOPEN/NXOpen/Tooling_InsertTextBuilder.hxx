#ifndef NXOpen_TOOLING_INSERTTEXTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_INSERTTEXTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_InsertTextBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_TextBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class InsertTextBuilder;
    }
    class Builder;
    class Edge;
    class Expression;
    class Face;
    class Group;
    class NXColor;
    class NXObject;
    class ScCollector;
    namespace Tooling
    {
        class _InsertTextBuilderBuilder;
        class InsertTextBuilderImpl;
        /** Represents a @link NXOpen::Tooling::InsertTextBuilder NXOpen::Tooling::InsertTextBuilder@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Tooling::MoldwizardManager::CreateInsertTextBuilder  NXOpen::Tooling::MoldwizardManager::CreateInsertTextBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        InsertTextType </term> <description> 
         
        ThroughHole </description> </item> 

        </list> 

         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  InsertTextBuilder : public NXOpen::Builder
        {
            /** the type of text to insert */
            public: enum InsertType
            {
                InsertTypeThroughPoint/** through point */ ,
                InsertTypeThroughHole/** through hole */ 
            };

            /** the text boundary type */
            public: enum TextBoundaryType
            {
                TextBoundaryTypeNone/** none */ ,
                TextBoundaryTypeSlot/** slot */ ,
                TextBoundaryTypeRectangle/** rectangle */ 
            };

            /** the text numbering direction */
            public: enum NumberDirectionOption
            {
                NumberDirectionOptionAlongXAxis/** along xaxis */ ,
                NumberDirectionOptionAlongYAxis/** along yaxis */ 
            };

            /** the text position options */
            public: enum TextPositionOption
            {
                TextPositionOptionTopLeft/** top left */ ,
                TextPositionOptionTopCenter/** top center */ ,
                TextPositionOptionTopRight/** top right */ ,
                TextPositionOptionMiddleLeft/** middle left */ ,
                TextPositionOptionMiddleRight/** middle right */ ,
                TextPositionOptionBottomLeft/** bottom left */ ,
                TextPositionOptionBottomCenter/** bottom center */ ,
                TextPositionOptionBottomRight/** bottom right */ 
            };

            private: InsertTextBuilderImpl * m_inserttextbuilder_impl;
            private: friend class  _InsertTextBuilderBuilder;
            protected: InsertTextBuilder();
            public: ~InsertTextBuilder();
            /**Returns  the insert text type selection. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertTextBuilder::InsertType InsertTextType
            (
            );
            /**Sets  the insert text type selection. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetInsertTextType
            (
                NXOpen::Tooling::InsertTextBuilder::InsertType insertType /** inserttype */ 
            );
            /**Returns  the selected faces 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectFace
            (
            );
            /**Returns  the selected hole edges 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectHoleEdges
            (
            );
            /**Returns  the text rule 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TextRule
            (
            );
            /**Sets  the text rule 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTextRule
            (
                const NXString & textRule /** textrule */ 
            );
            /**Sets  the text rule 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetTextRule
            (
                const char * textRule /** textrule */ 
            );
            /**Returns  the text font 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FontName
            (
            );
            /**Sets  the text font 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFontName
            (
                const NXString & fontName /** Font */
            );
            /**Sets  the text font 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetFontName
            (
                const char * fontName /** Font */
            );
            /** Gets the text script. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TextBuilder::ScriptOptions GetScript
            (
            );
            /** Sets the text script. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetScript
            (
                NXOpen::Features::TextBuilder::ScriptOptions script /** script */ 
            );
            /**Returns  the plate text position 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertTextBuilder::TextPositionOption TextPosition
            (
            );
            /**Sets  the plate text position 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTextPosition
            (
                NXOpen::Tooling::InsertTextBuilder::TextPositionOption plateTextPosition /** platetextposition */ 
            );
            /**Returns  the numbering direction 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertTextBuilder::NumberDirectionOption NumberingDirection
            (
            );
            /**Sets  the numbering direction 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNumberingDirection
            (
                NXOpen::Tooling::InsertTextBuilder::NumberDirectionOption numberingDirection /** numberingdirection */ 
            );
            /**Returns  the font height 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FontHeight
            (
            );
            /**Returns  the offset for text position 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Offset
            (
            );
            /**Returns  the numbering width 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * NumberingWidth
            (
            );
            /**Returns  the text color 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * TextColor
            (
            );
            /**Sets  the text color 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTextColor
            (
                NXOpen::NXColor * textColor /** textcolor */ 
            );
            /**Returns  the boundary type 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertTextBuilder::TextBoundaryType BoundaryType
            (
            );
            /**Sets  the boundary type 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBoundaryType
            (
                NXOpen::Tooling::InsertTextBuilder::TextBoundaryType boundaryType /** boundarytype */ 
            );
            /**Returns  the bounding depth 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BoundingDepth
            (
            );
            /**Returns  the lettering depth 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LetteringDepth
            (
            );
            /**Returns  the boundary color 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BoundaryColor
            (
            );
            /**Sets  the boundary color 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBoundaryColor
            (
                NXOpen::NXColor * boundaryColor /** boundarycolor */ 
            );
            /**Returns  the text origin 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d CsysOrigin
            (
            );
            /**Sets  the text origin 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCsysOrigin
            (
                const NXOpen::Point3d & origin /** origin */ 
            );
            /**Returns  the matrix of text 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 CsysMatrix
            (
            );
            /**Sets  the matrix of text 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCsysMatrix
            (
                const NXOpen::Matrix3x3 & matrix /** matrix */ 
            );
            /** Updates the text list and preview 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateTextPreview
            (
                NXOpen::NXObject * udoTag /** udotag */ 
            );
            /** Updates the text anchor point and csys.  @return  The new created curves group 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Group * UpdateTextLocation
            (
                NXOpen::NXObject * objectTag /** The curves group tag */,
                const NXOpen::Vector3d & moveVector /** The text movement vector */,
                int currentHandle /** The handle type */,
                double angle /** The value of rotation angle */
            );
            /** Creates the atteibute UDO by given attribute name 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXString CreateNewTextUDO
            (
                NXOpen::Face * faceTag /** facetag */ ,
                const NXString & attribute /** attribute */ ,
                NXOpen::NXObject ** udoTag /** udotag */ 
            );
            /** Creates the atteibute UDO by given attribute name 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            NXString CreateNewTextUDO
            (
                NXOpen::Face * faceTag /** facetag */ ,
                const char * attribute /** attribute */ ,
                NXOpen::NXObject ** udoTag /** udotag */ 
            );
            /** Sets the text UDO attribute name 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTextUDOAttributeName
            (
                NXOpen::NXObject * udoTag /** the UDO tag */,
                const NXString & attributeNmae /** the udo attribute name */
            );
            /** Sets the text UDO attribute name 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetTextUDOAttributeName
            (
                NXOpen::NXObject * udoTag /** the UDO tag */,
                const char * attributeNmae /** the udo attribute name */
            );
            /** Sets the text UDO default text 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTextUDODefaultText
            (
                NXOpen::NXObject * udoTag /** the UDO tag */,
                const NXString & text /** text */ ,
                bool previewText /** previewtext */ 
            );
            /** Sets the text UDO default text 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetTextUDODefaultText
            (
                NXOpen::NXObject * udoTag /** the UDO tag */,
                const char * text /** text */ ,
                bool previewText /** previewtext */ 
            );
            /** Sets the text UDO start number 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTextUDOStartNumber
            (
                NXOpen::NXObject * udoTag /** the UDO tag */,
                const NXString & numberStr /** numberstr */ ,
                bool previewText /** previewtext */ 
            );
            /** Sets the text UDO start number 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetTextUDOStartNumber
            (
                NXOpen::NXObject * udoTag /** the UDO tag */,
                const char * numberStr /** numberstr */ ,
                bool previewText /** previewtext */ 
            );
            /** Updates the text UDO client data by type 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateTextUDOClientUIData
            (
                NXOpen::NXObject * udoTag /** the UDO tag */,
                int index /** the update item index */
            );
            /** Adds or removes the selected holes of text UDO client data. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AddOrRemoveUDOSelectedHole
            (
                NXOpen::NXObject * udoTag /** the UDO tag */,
                NXOpen::Edge * holeEdge /** holeedge */ ,
                bool isAdding /** isadding */ 
            );
            /** Sets the selected tree node tags. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectedAttributesTreeNodes
            (
                const std::vector<NXOpen::NXObject *> & nodeTags /** nodetags */ 
            );
            /** Gets text anchor point origin and matrix.  @return  The matrix 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Matrix3x3 GetTextAnchorPointMatrix
            (
                NXOpen::NXObject * objectTag /** The text curve group tag */,
                NXOpen::Point3d* origin /** The origin */
            );
            /** Deletes the text and extrude features by given hole edges. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DeleteTexts
            (
                const std::vector<NXOpen::Edge *> & holeEdges /** holeedges */ 
            );
            /** Sets the last selected face. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetLastSelectedFace
            (
                NXOpen::Face * faceTag /** facetag */ 
            );
            /** Find face holes and record the data of holes. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void RecordFaceHolesData
            (
                NXOpen::Face * faceTag /** facetag */ ,
                bool recordAllHoles /** recordallholes */ ,
                NXOpen::Edge * holeEdge /** holeedge */ ,
                bool isAdding /** isadding */ 
            );
            /**Sets the feature group of engrave features. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEditFeatureGroup
            (
                NXOpen::NXObject * featureGroup /** featuregroup */ 
            );
            /**Initializes data from UDO
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ImplementInitFromUDO
            (
            );
            /** Sets the single text UDO. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSingleTextUDO
            (
                NXOpen::NXObject * udoTag /** udotag */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
