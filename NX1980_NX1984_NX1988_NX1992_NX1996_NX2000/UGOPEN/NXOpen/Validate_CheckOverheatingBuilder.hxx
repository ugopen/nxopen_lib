#ifndef NXOpen_VALIDATE_CHECKOVERHEATINGBUILDER_HXX_INCLUDED
#define NXOpen_VALIDATE_CHECKOVERHEATINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_CheckOverheatingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_DisplayResolutionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Validate_SelectionAndPlacementBuilder.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class CheckOverheatingBuilder;
    }
    class Builder;
    class Expression;
    namespace GeometricUtilities
    {
        class DisplayResolutionBuilder;
    }
    class NXColor;
    namespace Validate
    {
        class SelectionAndPlacementBuilder;
    }
    namespace Validate
    {
        class _CheckOverheatingBuilderBuilder;
        class CheckOverheatingBuilderImpl;
        /** Represents a Check Overheating builder  <br> To create a new instance of this class, use @link NXOpen::Validate::AnalysisResultCollection::CreateCheckOverheatingBuilder  NXOpen::Validate::AnalysisResultCollection::CreateCheckOverheatingBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AutomaticUpdate </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        DisplayResolution.AngleTolerance </term> <description> 
         
        15.0 </description> </item> 

        <item><term> 
         
        DisplayResolution.EdgeTolerance </term> <description> 
         
        0.005 </description> </item> 

        <item><term> 
         
        DisplayResolution.FaceTolerance </term> <description> 
         
        0.005 </description> </item> 

        <item><term> 
         
        DisplayResolution.Resolution </term> <description> 
         
        Standard </description> </item> 

        <item><term> 
         
        DisplayResolution.WidthTolerance </term> <description> 
         
        0.3 </description> </item> 

        <item><term> 
         
        MaximumOverhangAngle.Value </term> <description> 
         
        60 </description> </item> 

        <item><term> 
         
        ShowOnlyOverheatingAreas </term> <description> 
         
        1 </description> </item> 

        </list> 

         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  CheckOverheatingBuilder : public NXOpen::Builder
        {
            private: CheckOverheatingBuilderImpl * m_checkoverheatingbuilder_impl;
            private: friend class  _CheckOverheatingBuilderBuilder;
            protected: CheckOverheatingBuilder();
            public: ~CheckOverheatingBuilder();
            /**Returns  the selection and placement builder
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::SelectionAndPlacementBuilder * SelectionAndPlacement
            (
            );
            /**Returns  the Maximum Overhang Angle  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumOverhangAngle
            (
            );
            /**Returns  the Less Than Max Overhang Angle Color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * NonOverheatingColor
            (
            );
            /**Sets  the Less Than Max Overhang Angle Color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetNonOverheatingColor
            (
                NXOpen::NXColor * nonOverheatingColor /** nonoverheatingcolor */ 
            );
            /**Returns  the More than Max Overhang Angle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OverheatingColor
            (
            );
            /**Sets  the More than Max Overhang Angle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetOverheatingColor
            (
                NXOpen::NXColor * overHeatingColor /** overheatingcolor */ 
            );
            /**Returns  the toggle that show only Overheating Areas 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowOnlyOverheatingAreas
            (
            );
            /**Sets  the toggle that show only Overheating Areas 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetShowOnlyOverheatingAreas
            (
                bool showOnlyOverheat /** showonlyoverheat */ 
            );
            /**Returns  the area that will overheat 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double OverheatingArea
            (
            );
            /**Returns  the toggle that automatic update 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticUpdate
            (
            );
            /**Sets  the toggle that automatic update 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetAutomaticUpdate
            (
                bool automaticUpdate /** automaticupdate */ 
            );
            /**Returns  the display resolution 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DisplayResolutionBuilder * DisplayResolution
            (
            );
            /** Update the checker 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void Update
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
