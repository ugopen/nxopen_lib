#ifndef NXOpen_MOLDCOOLING_CIRCUITPARAMSBUILDER_HXX_INCLUDED
#define NXOpen_MOLDCOOLING_CIRCUITPARAMSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MoldCooling_CircuitParamsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_moldcooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MoldCooling
    {
        class CircuitParamsBuilder;
    }
    class Builder;
    class Expression;
    class PhysicalMaterial;
    namespace MoldCooling
    {
        class _CircuitParamsBuilderBuilder;
        class CircuitParamsBuilderImpl;
        /** Represents a @link MoldCooling::CircuitParams MoldCooling::CircuitParams@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::MoldCooling::Manager::CreateCircuitParamsBuilder  NXOpen::MoldCooling::Manager::CreateCircuitParamsBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        FlowMode </term> <description> 
         
        VolumeFlowRate </description> </item> 

        <item><term> 
         
        InletStaticPressure.Value </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InletTemperature.Value </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InletVolumeFlowRate.Value </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OutletStaticPressure.Value </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_MOLDCOOLINGEXPORT  CircuitParamsBuilder : public NXOpen::Builder
        {
            /** The flow mode */
            public: enum FlowModeOption
            {
                FlowModeOptionVolumeFlowRate/** volume flow rate */ ,
                FlowModeOptionStaticPressureGauge/** static pressure gauge */ 
            };

            private: CircuitParamsBuilderImpl * m_circuitparamsbuilder_impl;
            private: friend class  _CircuitParamsBuilderBuilder;
            protected: CircuitParamsBuilder();
            public: ~CircuitParamsBuilder();
            /**Returns  the name of the thermal parameter object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name of the thermal parameter object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the thermal parameter object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the flow mode 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MoldCooling::CircuitParamsBuilder::FlowModeOption FlowMode
            (
            );
            /**Sets  the flow mode 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetFlowMode
            (
                NXOpen::MoldCooling::CircuitParamsBuilder::FlowModeOption flowMode /** flowmode */ 
            );
            /**Returns  the inlet volume flow rate 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * InletVolumeFlowRate
            (
            );
            /**Returns  the inlet static pressure 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * InletStaticPressure
            (
            );
            /**Returns  the outlet static pressure 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OutletStaticPressure
            (
            );
            /**Returns  the inlet temperature 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * InletTemperature
            (
            );
            /**Returns  the fluid material 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PhysicalMaterial * FluidMaterial
            (
            );
            /**Sets  the fluid material 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetFluidMaterial
            (
                NXOpen::PhysicalMaterial * fluidMaterial /** fluidmaterial */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
