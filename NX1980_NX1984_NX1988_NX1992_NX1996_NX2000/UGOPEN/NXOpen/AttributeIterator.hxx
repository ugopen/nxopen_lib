#ifndef NXOpen_ATTRIBUTEITERATOR_HXX_INCLUDED
#define NXOpen_ATTRIBUTEITERATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AttributeIterator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class AttributeIterator;
    class AttributeIteratorImpl;
    /** This class is used to iterate over the user attributes of an object, with options to restrict or extend such searches 
     <br>  Created in NX11.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  AttributeIterator : public NXOpen::TransientObject
    {
        private: AttributeIteratorImpl * m_attributeiterator_impl;
        /// \cond NX_NO_DOC 
        public: explicit AttributeIterator(void *ptr);
        /// \endcond 
        /** Restrict searches to attributes with the given type.
                Default: no constraint. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludeOnlyType
        (
            NXOpen::NXObject::AttributeType type /** The desired type of the returned attributes (if not @link NXOpen::NXObject::AttributeTypeAny NXOpen::NXObject::AttributeTypeAny@endlink ) */
        );
        /** Restrict searches to attributes with the given category.
                Note: If this function is called with a NULL or empty category, then the search is restricted to attributes that have no assigned category
                      To cancel this restriction, use SetIncludeAllCategories. .
                Default: no constraint.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludeOnlyCategory
        (
            const NXString & category /** The desired category of the returned attributes */
        );
        /** Restrict searches to attributes with the given category.
                Note: If this function is called with a NULL or empty category, then the search is restricted to attributes that have no assigned category
                      To cancel this restriction, use SetIncludeAllCategories. .
                Default: no constraint.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        void SetIncludeOnlyCategory
        (
            const char * category /** The desired category of the returned attributes */
        );
        /** Do not restrict searches to attributes with a previously given category.
                Note: If this function will allow the iterator to return attributes with any or no category. 
                      It can be use to cancel a previous restriction to, for example, attributes with no category. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludeAllCategories
        (
        );
        /** Restrict searches to attributes with the given title.
                Note: If this function is called with a NULL or empty title, then iterator will no longer be restricted to a given title. .
                Default: no constraint.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludeOnlyTitle
        (
            const NXString & title /** The desired title of the returned attributes */
        );
        /** Restrict searches to attributes with the given title.
                Note: If this function is called with a NULL or empty title, then iterator will no longer be restricted to a given title. .
                Default: no constraint.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        void SetIncludeOnlyTitle
        (
            const char * title /** The desired title of the returned attributes */
        );
        /** Widen (or cancel the widening of) searches to attributes that have not been set, but for which the object has associated templates. 
                Default: Unset attributes (not being there) are not included.
                Note: 'unset' attributes are really attribute templates that the object has access to, but the object has no corresponding attributes.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludeAlsoUnset
        (
            bool includeAlsoUnset /** includealsounset */ 
        );
        /** Restricts (or cancel the restriction of) searches to attributes that have not been set, but for which the object has associated templates. 
                Default: no constraint.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludeOnlyUnset
        (
            bool includeOnlyUnset /** includeonlyunset */ 
        );
        /** Restricts searches to array attributes.
                NOTE: Array attributes with no or just one element are included unless otherwise excluded. .
                Default: no constraint.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludeOnlyArrays
        (
            bool includeOnlyArrays /** includeonlyarrays */ 
        );
        /** Rewind the iterator. 
                This allows the iterator to be reused with the same constraints. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void Rewind
        (
        );
        /** Rewind the iterator and return all its constraints to their default values.
                This allows the iterator to be safely reused. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void Reset
        (
        );
        /** Delete the iterator 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~AttributeIterator();
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
