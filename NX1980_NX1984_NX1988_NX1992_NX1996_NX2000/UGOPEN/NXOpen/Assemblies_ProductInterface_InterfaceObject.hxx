#ifndef NXOpen_ASSEMBLIES_PRODUCTINTERFACE_INTERFACEOBJECT_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_PRODUCTINTERFACE_INTERFACEOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_ProductInterface_InterfaceObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        namespace ProductInterface
        {
            class InterfaceObject;
        }
    }
    class NXObject;
    namespace Assemblies
    {
        namespace ProductInterface
        {
            class _InterfaceObjectBuilder;
            class InterfaceObjectImpl;
            /** Represents a Product Interface Object Builder. It creates a product interface object  <br> To create a new instance of this class, use @link NXOpen::Assemblies::ProductInterface::ObjectBuilder::AddProductInterfaceObject  NXOpen::Assemblies::ProductInterface::ObjectBuilder::AddProductInterfaceObject @endlink  <br> 
             <br>  Created in NX5.0.0.  <br>  
            */
            class NXOPENCPP_ASSEMBLIESEXPORT  InterfaceObject : public NXOpen::NXObject
            {
                /** Invalid state of problematic product interface object */
                public: enum InvalidState
                {
                    InvalidStateValid/** product interface has no issue */,
                    InvalidStateSleeping/** product interface is sleep */,
                    InvalidStateIncorrectOrphan/** product interface is in an incorrect orphan state */,
                    InvalidStateSelfReferenced/** product interface references itself */
                };

                /** An enum representing product interface usage types */
                public: enum InterfaceUsageType
                {
                    InterfaceUsageTypeUnknown/** usage type as unknown */,
                    InterfaceUsageTypeOutput/** usage type as output */,
                    InterfaceUsageTypeInput/** usage type as input */,
                    InterfaceUsageTypeKeyPerformanceInterface/** usage type as key performance interface */
                };

                private: InterfaceObjectImpl * m_interfaceobject_impl;
                private: friend class  _InterfaceObjectBuilder;
                protected: InterfaceObject();
                public: ~InterfaceObject();
                /** Returns the type of the input product interface object   @return  type of the product interface object 
                 <br>  Created in NX5.0.1.  <br>  
                 <br> License requirements : None */
                public: NXString GetProductInterfaceObjectType
                (
                );
                /** Returns the underlying NX object referenced by the input product interface object   @return  nx item referenced by the product interface 
                 <br>  Created in NX5.0.1.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXObject * GetProductInterfaceDefiningEntity
                (
                );
                /** Returns the status of the input product interface object   @return  status of the product interface object 
                 <br>  Created in NX5.0.1.  <br>  
                 <br> License requirements : None */
                public: NXString GetProductInterfaceObjectStatus
                (
                );
                /** Sets the user comments on the input product interface object 
                 <br>  Created in NX5.0.1.  <br>  
                 <br> License requirements : None */
                public: void SetUserComments
                (
                    const NXString & userComments /** user comments to be set on the product interface object */
                );
                /** Sets the user comments on the input product interface object 
                 <br>  Created in NX5.0.1.  <br>  
                 <br> License requirements : None */
                void SetUserComments
                (
                    const char * userComments /** user comments to be set on the product interface object */
                );
                /** Returns the user comments on the input product interface object  @return  user comments on the product interface object 
                 <br>  Created in NX5.0.1.  <br>  
                 <br> License requirements : None */
                public: NXString GetUserComments
                (
                );
                /** Removes an object from the product interface set; currently supported types are expressions and geometry  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: void RemoveProductInterfaceObject
                (
                );
                /** Renames an object from the product interface set 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: void RenameProductInterfaceObject
                (
                    const NXString & name /** user defined name to be set on the product interface object, if it is empty reset it to default name */
                );
                /** Renames an object from the product interface set 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                void RenameProductInterfaceObject
                (
                    const char * name /** user defined name to be set on the product interface object, if it is empty reset it to default name */
                );
                /** Check the invalid state of product interface object  @return  The state of product interface object 
                 <br>  Created in NX10.0.1.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Assemblies::ProductInterface::InterfaceObject::InvalidState CheckProductInterfaceObject
                (
                );
                /** Fix the invalid state of product interface object  @return  if true the product interface has an issue and is fixed 
                 <br>  Created in NX10.0.1.  <br>  
                 <br> License requirements : None */
                public: bool FixInvalidProductInterfaceObject
                (
                );
                /** Relate expressions to the product interface 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: void InsertRelatedExpressions
                (
                    const std::vector<NXOpen::NXObject *> & relatedExps /** Expressions to relate to the product interface */
                );
                /** Removes related expression from the product interface object 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: void RemoveRelatedExpression
                (
                    NXOpen::NXObject * relatedExp /** the expression to have a relation to product inerface */
                );
                /** Removes all related expressions from the product interface object  @return  number of expressions removed 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: int RemoveAllRelatedExpressions
                (
                );
                /** Returns all expressions related to the product interface object  @return  expressions related to the product interface 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::NXObject *> GetRelatedExpressions
                (
                );
                /** Returns the usage type of the product interface object  @return  usage type of the product interface object 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Assemblies::ProductInterface::InterfaceObject::InterfaceUsageType GetInterfaceUsageType
                (
                );
                /** Sets the usage type on the product interface object 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetInterfaceUsageType
                (
                    NXOpen::Assemblies::ProductInterface::InterfaceObject::InterfaceUsageType usageType /** usage type to be set on the product interface object */
                );
                /** Breaks referencing link of PI when usage type changes. When the product interface type changed to input or key performance interface. Break link feature and inter part expression referring to the product interface. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: void BreakPIReferencingLinks
                (
                    NXOpen::Assemblies::ProductInterface::InterfaceObject::InterfaceUsageType usageType /** usage type to be set on the product interface object */
                );
                /**Returns  the name of the product interface object 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString ObjectName
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
