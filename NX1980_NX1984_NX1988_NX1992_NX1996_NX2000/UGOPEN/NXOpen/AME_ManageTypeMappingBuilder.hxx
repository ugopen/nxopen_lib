#ifndef NXOpen_AME_MANAGETYPEMAPPINGBUILDER_HXX_INCLUDED
#define NXOpen_AME_MANAGETYPEMAPPINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ManageTypeMappingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_MappingSourceBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ManageTypeMappingBuilder;
    }
    namespace Assemblies
    {
        class Component;
    }
    class Builder;
    class NXObject;
    class TaggedObject;
    namespace AME
    {
        class _ManageTypeMappingBuilderBuilder;
        class ManageTypeMappingBuilderImpl;
        /** This builder class is used to update relevancy information on the external objects.
                This is also used to do the type mapping.
             <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ManageTypeMappingBuilder : public NXOpen::Builder
        {
            /**enum for the domain relevancy status filter*/
            public: enum DomainRelevancy
            {
                DomainRelevancyRelevant/** relevant */ ,
                DomainRelevancyUndefined/** undefined */ ,
                DomainRelevancyIrrelevant/** irrelevant */ 
            };

            private: ManageTypeMappingBuilderImpl * m_managetypemappingbuilder_impl;
            private: friend class  _ManageTypeMappingBuilderBuilder;
            protected: ManageTypeMappingBuilder();
            public: ~ManageTypeMappingBuilder();
            /**Returns  the functions to Get/Set the value of domain relevancy option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ManageTypeMappingBuilder::DomainRelevancy DomainRelevancyOption
            (
            );
            /**Sets  the functions to Get/Set the value of domain relevancy option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDomainRelevancyOption
            (
                NXOpen::AME::ManageTypeMappingBuilder::DomainRelevancy domainRelevancyOption /** domainrelevancyoption */ 
            );
            /** Sets the domain relevancy for the list of external objects 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateDomainRelevancy
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** components */ ,
                NXOpen::AME::ManageTypeMappingBuilder::DomainRelevancy domainRelevancy /** domainrelevancy */ 
            );
            /**Returns  the tag of the external objects source 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::TaggedObject * ExternalObjectsSource
            (
            );
            /**Sets  the tag of the external objects source 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetExternalObjectsSource
            (
                NXOpen::TaggedObject * externalObjectsSource /** externalobjectssource */ 
            );
            /**Returns  the property to use for type mapping 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString PropertyForMapping
            (
            );
            /**Sets  the property to use for type mapping 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPropertyForMapping
            (
                const NXString & propertyName /** propertyname */ 
            );
            /**Sets  the property to use for type mapping 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPropertyForMapping
            (
                const char * propertyName /** propertyname */ 
            );
            /**Returns  the mode to use for type mapping 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::MappingSourceBuilder::MappingMode TypeMappingMode
            (
            );
            /**Sets  the mode to use for type mapping 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetTypeMappingMode
            (
                NXOpen::AME::MappingSourceBuilder::MappingMode mode /** mode */ 
            );
            /** Delete existing type mappings for the list of external objects 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteTypeMapping
            (
                const std::vector<NXOpen::NXObject *> & components /** components */ 
            );
            /** Get list of external objects for type mapping 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXOpen::NXObject *> GetExternalObjects
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
