#ifndef NXOpen_ANIMATIONDESIGNER_MEASUREBUILDER_HXX_INCLUDED
#define NXOpen_ANIMATIONDESIGNER_MEASUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AnimationDesigner_MeasureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libanimationdesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AnimationDesigner
    {
        class MeasureBuilder;
    }
    class Builder;
    class Direction;
    class SelectNXObject;
    class SelectNXObjectList;
    namespace AnimationDesigner
    {
        class _MeasureBuilderBuilder;
        class MeasureBuilderImpl;
        /** Represents a @link NXOpen::AnimationDesigner::MeasureBuilder NXOpen::AnimationDesigner::MeasureBuilder@endlink .  <br> To create a new instance of this class, use @link NXOpen::AnimationDesigner::MeasureCollection::CreateMeasureBuilder  NXOpen::AnimationDesigner::MeasureCollection::CreateMeasureBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class ANIMATIONDESIGNEROPENCPPEXPORT  MeasureBuilder : public NXOpen::Builder
        {
            /** the measure types. */
            public: enum MeasureTypes
            {
                MeasureTypesDistance/** distance */ ,
                MeasureTypesAngle/** angle */ ,
                MeasureTypesMotorParameter/** motor parameter */ 
            };

            /** the motor parameter types. */
            public: enum MotorParameterTypes
            {
                MotorParameterTypesDisplacement/** displacement */ ,
                MotorParameterTypesVelocity/** velocity */ ,
                MotorParameterTypesAcceleration/** acceleration */ 
            };

            private: MeasureBuilderImpl * m_measurebuilder_impl;
            private: friend class  _MeasureBuilderBuilder;
            protected: MeasureBuilder();
            public: ~MeasureBuilder();
            /**Returns  the measure type. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::MeasureBuilder::MeasureTypes MeasureType
            (
            );
            /**Sets  the measure type. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetMeasureType
            (
                NXOpen::AnimationDesigner::MeasureBuilder::MeasureTypes measureType /** measuretype */ 
            );
            /**Returns  the first object list used to be measured with the second object list. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::SelectNXObjectList * List1
            (
            );
            /**Returns  the second object list used to be measured with the first object list. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::SelectNXObjectList * List2
            (
            );
            /**Returns  the first direction used to measure the angle with the second direction. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Direction * Direction1
            (
            );
            /**Sets  the first direction used to measure the angle with the second direction. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetDirection1
            (
                NXOpen::Direction * direction1 /** direction1 */ 
            );
            /**Returns  the second direction used to measure the angle with the first direction. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Direction * Direction2
            (
            );
            /**Sets  the second direction used to measure the angle with the first direction. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetDirection2
            (
                NXOpen::Direction * direction2 /** direction2 */ 
            );
            /**Returns  the motor. This can be a @link NXOpen::AnimationDesigner::SpeedMotor NXOpen::AnimationDesigner::SpeedMotor@endlink 
                        or @link NXOpen::AnimationDesigner::PositionMotor NXOpen::AnimationDesigner::PositionMotor@endlink . 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::SelectNXObject * Motor
            (
            );
            /**Returns  the motor parameter type. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::MeasureBuilder::MotorParameterTypes MotorParameterType
            (
            );
            /**Sets  the motor parameter type. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetMotorParameterType
            (
                NXOpen::AnimationDesigner::MeasureBuilder::MotorParameterTypes motorParameterType /** motorparametertype */ 
            );
            /**Returns  the use vector flag. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: bool UseVector
            (
            );
            /**Sets  the use vector flag. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetUseVector
            (
                bool useVector /** usevector */ 
            );
            /**Returns  the vector. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the name. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
