#ifndef NXOpen_CAE_PENETRATIONCHECK_ANALYSISSET_HXX_INCLUDED
#define NXOpen_CAE_PENETRATIONCHECK_ANALYSISSET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PenetrationCheck_AnalysisSet.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace PenetrationCheck
        {
            class AnalysisSet;
        }
    }
    class INXObject;
    class NXObject;
    namespace CAE
    {
        namespace PenetrationCheck
        {
            class _AnalysisSetBuilder;
            class AnalysisSetImpl;
            /**  @brief  The Penetration Check AnalysisSet class offers means to delete, create, edit, and switch @link NXOpen::CAE::PenetrationCheck::AnalysisSet NXOpen::CAE::PenetrationCheck::AnalysisSet@endlink  instances. 

               <br> Currently we don't support KF at this time.  <br> 
             <br>  Created in NX1926.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  AnalysisSet : public NXOpen::NXObject
            {
                private: AnalysisSetImpl * m_analysisset_impl;
                private: friend class  _AnalysisSetBuilder;
                protected: AnalysisSet();
                public: ~AnalysisSet();
                /** Delete this clearance set 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void DeleteSet
                (
                );
                /** Set this clearance set as active
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void ChangeActiveSet
                (
                );
                /** Set this clearance set as active
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void RunInterferenceCheck
                (
                );
                /** Set this clearance set as active
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void PlotContours
                (
                    int viewIndex /** viewindex */ 
                );
                /** Finds the @link  NXOpen::INXObject   NXOpen::INXObject @endlink  with the given identifier as recorded in a journal. 
                            An object may not return the same value as its JournalIdentifier in different versions of 
                            the software. However newer versions of the software should find the same object when 
                            FindObject is passed older versions of its journal identifier. In general, this method 
                            should not be used in handwritten code and exists to support record and playback of journals.

                            An exception will be thrown if no object can be found with the given journal identifier.  @return  An object matching the journal identifier 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::INXObject * FindObject
                (
                    const NXString & journalIdentifier /** Journal identifier of the object */
                );
                /** Finds the @link  NXOpen::INXObject   NXOpen::INXObject @endlink  with the given identifier as recorded in a journal. 
                            An object may not return the same value as its JournalIdentifier in different versions of 
                            the software. However newer versions of the software should find the same object when 
                            FindObject is passed older versions of its journal identifier. In general, this method 
                            should not be used in handwritten code and exists to support record and playback of journals.

                            An exception will be thrown if no object can be found with the given journal identifier.  @return  An object matching the journal identifier 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::INXObject * FindObject
                (
                    const char * journalIdentifier /** Journal identifier of the object */
                );
                /** Print autotest XML data
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void Print
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
