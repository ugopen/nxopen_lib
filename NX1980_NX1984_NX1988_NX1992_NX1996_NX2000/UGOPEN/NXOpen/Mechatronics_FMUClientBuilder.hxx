#ifndef NXOpen_MECHATRONICS_FMUCLIENTBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_FMUCLIENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_FMUClientBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_SignalBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class FMUClientBuilder;
    }
    class Builder;
    class Part;
    namespace Mechatronics
    {
        class _FMUClientBuilderBuilder;
        class FMUClientBuilderImpl;
        /** Represents a @link Mechatronics::FMUClientBuilder Mechatronics::FMUClientBuilder@endlink  builder  <br> This class is sub-object of another builder, and cannot be directly instantiated.  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  FMUClientBuilder : public NXOpen::Builder
        {
             /**  @brief  Represents FMU signal  definition structure.  

              */
            public:
            struct TagInfo
            {
                public: /** Signal Object       */NXString StrName;
                public: /**Signal Data Type     */NXString DataTypeName;
                public: /**Signal IO Type       */NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType EIOType;
                public: /**Signal index in XML  */int Index;
                public: /**Signal check status  */bool BChecked;
                public: /**Signal value reference  */int ValueReference;
                public: TagInfo() :
                    StrName(),
                    DataTypeName(),
                    EIOType((NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType)0),
                    Index(),
                    BChecked(),
                    ValueReference()
                {
                }
                /** Constructor for the TagInfo struct. */ 
                public: TagInfo(const NXString &strNameInitial /** Signal Object       */, 
                        const NXString &dataTypeNameInitial /**Signal Data Type     */, 
                        NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType eIOTypeInitial /**Signal IO Type       */, 
                        int indexInitial /**Signal index in XML  */, 
                        bool bCheckedInitial /**Signal check status  */, 
                        int valueReferenceInitial /**Signal value reference  */) :
                    StrName(strNameInitial),
                    DataTypeName(dataTypeNameInitial),
                    EIOType(eIOTypeInitial),
                    Index(indexInitial),
                    BChecked(bCheckedInitial),
                    ValueReference(valueReferenceInitial)
                {
                }
            };

             /**  @brief  FMU model definition structure.  

              */
            public:
            struct ModelInfo
            {
                public: /**Model Object Name        */NXString StrName;
                public: /**Model FMI Version        */double ModelVersion;
                public: /**Model Update time        */double NUpdateTime;
                public: /**Model Full Path          */NXString StrFullPath;
                public: ModelInfo() :
                    StrName(),
                    ModelVersion(),
                    NUpdateTime(),
                    StrFullPath()
                {
                }
                /** Constructor for the ModelInfo struct. */ 
                public: ModelInfo(const NXString &strNameInitial /**Model Object Name        */, 
                        double modelVersionInitial /**Model FMI Version        */, 
                        double nUpdateTimeInitial /**Model Update time        */, 
                        const NXString &strFullPathInitial /**Model Full Path          */) :
                    StrName(strNameInitial),
                    ModelVersion(modelVersionInitial),
                    NUpdateTime(nUpdateTimeInitial),
                    StrFullPath(strFullPathInitial)
                {
                }
            };

            private: FMUClientBuilderImpl * m_fmuclientbuilder_impl;
            private: friend class  _FMUClientBuilderBuilder;
            protected: FMUClientBuilder();
            public: ~FMUClientBuilder();
            /**  @brief  Get FMU instance name  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void GetInstanceName
            (
                NXOpen::Part * ownerPart /** ownerpart */ ,
                std::vector<NXString> & name /** name */ 
            );
            /**  @brief  Set FMU instance name  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetInstanceName
            (
                std::vector<NXString> & name /** name */ ,
                const std::vector<NXOpen::Part *> & ownerParts /** ownerparts */ 
            );
            /**  @brief  Set The FMU Model Path  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetModelPath
            (
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const NXString & instanceName /** instancename */ ,
                const NXString & modelPath /** modelpath */ 
            );
            /**  @brief  Set The FMU Model Path  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetModelPath
            (
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const char * instanceName /** instancename */ ,
                const char * modelPath /** modelpath */ 
            );
            /**  @brief  Get The FMU instance Models  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void GetInstanceModels
            (
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const NXString & instanceName /** instancename */ ,
                std::vector<NXOpen::Mechatronics::FMUClientBuilder::ModelInfo> & models /** Models Array of Instance*/
            );
            /**  @brief  Get The FMU instance Models  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void GetInstanceModels
            (
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const char * instanceName /** instancename */ ,
                std::vector<NXOpen::Mechatronics::FMUClientBuilder::ModelInfo> & models /** Models Array of Instance*/
            );
            /**  @brief  Set The FMU instance Models  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetInstanceModels
            (
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const NXString & instanceName /** instancename */ ,
                const std::vector<NXOpen::Mechatronics::FMUClientBuilder::ModelInfo> & models /** Models Array of Instance*/
            );
            /**  @brief  Set The FMU instance Models  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetInstanceModels
            (
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const char * instanceName /** instancename */ ,
                const std::vector<NXOpen::Mechatronics::FMUClientBuilder::ModelInfo> & models /** Models Array of Instance*/
            );
            /**  @brief  Get The Model Tags  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void GetModelSignals
            (
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const NXString & instanceName /** instancename */ ,
                const NXString & modelName /** modelname */ ,
                std::vector<NXOpen::Mechatronics::FMUClientBuilder::TagInfo> & tagInfo /** Tags Array of the Model*/
            );
            /**  @brief  Get The Model Tags  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void GetModelSignals
            (
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const char * instanceName /** instancename */ ,
                const char * modelName /** modelname */ ,
                std::vector<NXOpen::Mechatronics::FMUClientBuilder::TagInfo> & tagInfo /** Tags Array of the Model*/
            );
            /**  @brief  Set The Model Tags 

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetModelSignals
            (
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const NXString & instanceName /** instancename */ ,
                const NXString & modelName /** modelname */ ,
                const std::vector<NXOpen::Mechatronics::FMUClientBuilder::TagInfo> & tagInfo /** Tags Array of the Model*/
            );
            /**  @brief  Set The Model Tags 

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetModelSignals
            (
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const char * instanceName /** instancename */ ,
                const char * modelName /** modelname */ ,
                const std::vector<NXOpen::Mechatronics::FMUClientBuilder::TagInfo> & tagInfo /** Tags Array of the Model*/
            );
            /**Returns   @brief  the selected configuration name.  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedConfigurationName
            (
            );
            /**Sets   @brief  the selected configuration name.  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetSelectedConfigurationName
            (
                const NXString & configurationName /** configurationname */ 
            );
            /**Sets   @brief  the selected configuration name.  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetSelectedConfigurationName
            (
                const char * configurationName /** configurationname */ 
            );
            /**Returns   @brief  the selected configuration part.  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * SelectedConfigurationPart
            (
            );
            /**Sets   @brief  the selected configuration part.  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetSelectedConfigurationPart
            (
                NXOpen::Part * ownerPart /** ownerpart */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
