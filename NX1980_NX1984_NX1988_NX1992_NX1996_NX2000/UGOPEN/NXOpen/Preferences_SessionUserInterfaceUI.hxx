#ifndef NXOpen_PREFERENCES_SESSIONUSERINTERFACEUI_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONUSERINTERFACEUI_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionUserInterfaceUI.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class SessionUserInterfaceUI;
    }
    class UI;
    namespace Preferences
    {
        class SessionUserInterfaceUIImpl;
        /** Represents all UI based session user interface preferneces. Other User Interface settings are 
        available with @link NXOpen::Preferences::SessionUserInterface NXOpen::Preferences::SessionUserInterface@endlink  for settings applicable to session and 
        with @link NXOpen::Preferences::PartUserInterface NXOpen::Preferences::PartUserInterface@endlink  for User Interface Preferences applicable
        to part  <br> To obtain an instance of this class, refer to @link NXOpen::UI  NXOpen::UI @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  SessionUserInterfaceUI
        {
            /** Describes whether the resource bar is displayed on left or right of window */
            public: enum DisplayResourceBar
            {
                DisplayResourceBarLeft/** left */ ,
                DisplayResourceBarRight/** right */ 
            };

            /** Describes whether the speech recognition mode is single shot or continuous */
            public: enum SpeechMode
            {
                SpeechModeSingle/** single */ ,
                SpeechModeContinuous/** continuous */ 
            };

            private: SessionUserInterfaceUIImpl * m_sessionuserinterfaceui_impl;
            private: NXOpen::UI* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SessionUserInterfaceUI(NXOpen::UI *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SessionUserInterfaceUI();
            /**Returns  the save layout at exit flag. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool SaveLayoutAtExit
            (
            );
            /**Sets  the save layout at exit flag. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSaveLayoutAtExit
            (
                bool saveLayoutFlag /** save layout flag */ 
            );
            /**Returns  the home page URL 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXString HomePageURL
            (
            );
            /**Sets  the home page URL 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHomePageURL
            (
                const NXString & homePageUrl /** home page url */ 
            );
            /**Sets  the home page URL 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            void SetHomePageURL
            (
                const char * homePageUrl /** home page url */ 
            );
            /**Returns  the pages automatically fly outflag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool PagesAutomaticallyFlyOut
            (
            );
            /**Sets  the pages automatically fly outflag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPagesAutomaticallyFlyOut
            (
                bool pagesAutomaticallyFlyOut /** pages automatically fly out */ 
            );
            /**Returns  the display resource bar option 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionUserInterfaceUI::DisplayResourceBar DisplayResourceBarOption
            (
            );
            /**Sets  the display resource bar option 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayResourceBarOption
            (
                NXOpen::Preferences::SessionUserInterfaceUI::DisplayResourceBar displayResourceBar /** display resource bar */ 
            );
            /**Returns  the use system precision flag. True uses the system precision 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseSystemPrecision
            (
            );
            /**Sets  the use system precision flag. True uses the system precision 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseSystemPrecision
            (
                bool useSystemPrecision /** use system precision */ 
            );
            /**Returns  the option "Display Alerts on Warnings" gives choice, whether the
                 user wants the Diagnostic alerts appear when 
                 features contain warnings during feature 
                 creation, edit, and update.
                 if the option is true then the diagnostic alerts will appear.
                 if the option is false then diagnostic alerts will not appear.
                 Use @link DisplayAlertsOnInformation DisplayAlertsOnInformation@endlink  for display of
                 alerts on information messages. Alerts are
                 always displayed for errors and display of alerts on errors can not be
                 changed. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayAlertsOnWarnings
            (
            );
            /**Sets  the option "Display Alerts on Warnings" gives choice, whether the
                 user wants the Diagnostic alerts appear when 
                 features contain warnings during feature 
                 creation, edit, and update.
                 if the option is true then the diagnostic alerts will appear.
                 if the option is false then diagnostic alerts will not appear.
                 Use @link DisplayAlertsOnInformation DisplayAlertsOnInformation@endlink  for display of
                 alerts on information messages. Alerts are
                 always displayed for errors and display of alerts on errors can not be
                 changed. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayAlertsOnWarnings
            (
                bool displayAlertsOnWarnings /** preference to
                        display Diagnostic Alerts on Warnings*/
            );
            /**Returns  the option "Display Alerts on Information" gives choice, whether the
                 user wants the Diagnostic alerts appear when 
                 features contain information messages during feature 
                 creation, edit, and update.
                 if the option is true then the diagnostic alerts will appear.
                 if the option is false then diagnostic alerts will not appear.
                 Use @link DisplayAlertsOnWarnings DisplayAlertsOnWarnings@endlink  for display of
                 alerts on warnings. Alerts are
                 always displayed for errors and display of alerts on errors can not be
                 changed. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayAlertsOnInformation
            (
            );
            /**Sets  the option "Display Alerts on Information" gives choice, whether the
                 user wants the Diagnostic alerts appear when 
                 features contain information messages during feature 
                 creation, edit, and update.
                 if the option is true then the diagnostic alerts will appear.
                 if the option is false then diagnostic alerts will not appear.
                 Use @link DisplayAlertsOnWarnings DisplayAlertsOnWarnings@endlink  for display of
                 alerts on warnings. Alerts are
                 always displayed for errors and display of alerts on errors can not be
                 changed. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayAlertsOnInformation
            (
                bool displayAlertsOnInformation /** preference to
                        display Diagnostic Alerts on Information Messages*/
            );
            /**Returns  the confirm undo flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool ConfirmUndo
            (
            );
            /**Sets  the confirm undo flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetConfirmUndo
            (
                bool confirmUndo /** confirm undo */ 
            );
            /**Returns  the pause duration 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int PauseDuration
            (
            );
            /**Sets  the pause duration 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPauseDuration
            (
                int pauseDuration /** pause duration */ 
            );
            /**Returns  the listing decimal places
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int ListingDecimalPlaces
            (
            );
            /**Sets  the listing decimal places
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetListingDecimalPlaces
            (
                int listingDecimalPlaces /** listing decimal places */ 
            );
            /**Returns  the dialog box decimal places 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int DialogBarDecimalPlaces
            (
            );
            /**Sets  the dialog box decimal places 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDialogBarDecimalPlaces
            (
                int dialogBarDecimalPlaces /** dialog bar decimal places */ 
            );
            /**Returns  the dialog bar tracking flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool DialogBarTracking
            (
            );
            /**Sets  the dialog bar tracking flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDialogBarTracking
            (
                bool dialogBarTrackingFlag /** dialog bar tracking flag */ 
            );
            /**Returns  the display dialogs in playback flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayDialogsInPlayback
            (
            );
            /**Sets  the display dialogs in playback flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayDialogsInPlayback
            (
                bool displayDialogInPlaybackFlag /** display dialog in playback flag */ 
            );
            /**Returns  the record all transform flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool RecordAllTransform
            (
            );
            /**Sets  the record all transform flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRecordAllTransform
            (
                bool recordAllTransformFlag /** record all transform flag */ 
            );
            /**Returns  the initial dialog display flag 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool InitialDialogDisplay
            (
            );
            /**Sets  the initial dialog display flag 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInitialDialogDisplay
            (
                bool initialDialogDisplay /** initial dialog display */ 
            );
            /** Resets all dialog box settings 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void ResetDialogBoxSettings
            (
            );
            /**Sets  the speech recognition mode 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpeechRecognitionMode
            (
                NXOpen::Preferences::SessionUserInterfaceUI::SpeechMode listeningModeSingle /** listening mode single */ 
            );
            /**Returns  the speech recognition mode 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionUserInterfaceUI::SpeechMode SpeechRecognitionMode
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
