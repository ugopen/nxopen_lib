#ifndef NXOpen_CAE_POSTSCENARIOVARIABLE_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIOVARIABLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioVariable.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostScenarioTypes.hxx>
#include <NXOpen/CAE_PostScenarioVariant.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostScenarioVariable;
    }
    namespace CAE
    {
        class PostScenarioVariant;
    }
    namespace CAE
    {
        class _PostScenarioVariableBuilder;
        class PostScenarioVariableImpl;
        /**  @brief  A selection variable to which values can be bound in order to define a user selection for a post scenario. See @link NXOpen::CAE::PostScenarioSelectionParameters NXOpen::CAE::PostScenarioSelectionParameters@endlink   

           <br> Not support KF.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostScenarioVariable : public NXOpen::TaggedObject
        {
            /** 
                        Specifies behavior of @link CAE::PostScenarioVariable::SetIterationValues CAE::PostScenarioVariable::SetIterationValues@endlink .
                    */
            public: enum IterationOption
            {
                IterationOptionAll/** Set all values returned by @link CAE::PostScenarioVariable::GetValues CAE::PostScenarioVariable::GetValues@endlink  as iteration values */,
                IterationOptionNone/** Set no iteration values for this variable. */
            };

            private: PostScenarioVariableImpl * m_postscenariovariable_impl;
            private: friend class  _PostScenarioVariableBuilder;
            protected: PostScenarioVariable();
            public: ~PostScenarioVariable();
            /**Returns  the name of this Variable. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Returns  the localized name of this Variable. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DisplayName
            (
            );
            /** 
                        Assign boolean values to this Selection Variable. The assigned values
                        must be a subset of the values returned by GetValues, otherwise an 
                        exception is raised.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AssignBooleanValues
            (
                const std::vector<bool> & values /** values */ 
            );
            /** 
                        Assign integer values to this Selection Variable. The assigned values
                        must be a subset of the values returned by GetValues, otherwise an 
                        exception is raised.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AssignIntegerValues
            (
                const std::vector<int> & values /** values */ 
            );
            /** 
                        Assign double values to this Selection Variable. The assigned values
                        must be a subset of the values returned by GetValues, otherwise an 
                        exception is raised.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AssignDoubleValues
            (
                const std::vector<double> & values /** values */ 
            );
            /** 
                        Assign complex values to this Selection Variable. The assigned values
                        must be a subset of the values returned by GetValues, otherwise an 
                        exception is raised.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AssignComplexValues
            (
                const std::vector<NXOpen::CAE::Complex> & values /** values */ 
            );
            /** 
                        Assign string values to this Selection Variable. The assigned values
                        must be a subset of the values returned by GetValues, otherwise an 
                        exception is raised.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AssignStringValues
            (
                std::vector<NXString> & values /** values */ 
            );
            /** 
                        Assign unicode string values to this Selection Variable. The assigned 
                        values must be a subset of the values returned by GetValues, otherwise 
                        an exception is raised.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AssignUnicodeStringValues
            (
                std::vector<NXString> & values /** values */ 
            );
            /** 
                        Assign variant values to this Selection Variable. The assigned values
                        must be a subset of the values returned by GetValues, otherwise an 
                        exception is raised.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AssignValues
            (
                const std::vector<NXOpen::CAE::PostScenarioVariant *> & values /** values */ 
            );
            /**
                        Assign the default variant values to this Selection Variable. Scenarios can
                        provide custom logic to deduce the default selection. Otherwise first available values will
                        be set by the framework respecting the cardinality restrictions.
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AssignDefaults
            (
            );
            /** 
                        Read the available values of this variable. The returned values have to be disposed explicitely.
                        This returns all the possible values which can be assigned to this PostScenarioVariable.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::PostScenarioVariant *> GetValues
            (
            );
            /** 
                        Retrieve the currently assigned values. The returned values have to be disposed explicitely.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::PostScenarioVariant *> GetAssignedValues
            (
            );
            /**
                     @brief Assign iteration values to this @link CAE::PostScenarioVariable CAE::PostScenarioVariable@endlink . 

             

                    
                     <br> Iteration values enable navigation in contour plot view. <br> 
                     <br> This overload allows you to easily select all values, or none of them. <br> 
                     <br> Note, that this method is complementary to the other overload, in that it provides a convenient way to select all values as iteration values <br> 
                    
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIterationValues
            (
                NXOpen::CAE::PostScenarioVariable::IterationOption behavior /** behavior */ 
            );
            /**
                        Assign iteration values to this @link CAE::PostScenarioVariable CAE::PostScenarioVariable@endlink . 
                        Iteration values enable navigation in contour plot view. 
                        The assigned values must be a subset of the values returned by 
                        @link CAE::PostScenarioVariable::GetValues CAE::PostScenarioVariable::GetValues@endlink .
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIterationValues
            (
                const std::vector<NXOpen::CAE::PostScenarioVariant *> & values /** values */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
