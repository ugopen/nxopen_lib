#ifndef NXOpen_CAE_POSTCOLORBARCOLORPARAMETERS_HXX_INCLUDED
#define NXOpen_CAE_POSTCOLORBARCOLORPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostColorbarColorParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostColorbarColorParameters;
    }
    namespace CAE
    {
        class PostColorbarColorParametersImpl;
        /**  @brief  This class has the information related to post colorbar color control values.
             

          <br> An instance of this class can not be created. To obtain the object use @link NXOpen::CAE::PostColorbar::GetColorParameters NXOpen::CAE::PostColorbar::GetColorParameters@endlink  method.  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostColorbarColorParameters : public NXOpen::TransientObject
        {
            /** Colorbar spectrum schemes */
            public: enum Spectrum
            {
                SpectrumStructural/** structural */ ,
                SpectrumThermal/** thermal */ ,
                SpectrumGrayScale/** gray scale */ ,
                SpectrumStopLight/** stop light */ 
            };

            private: PostColorbarColorParametersImpl * m_postcolorbarcolorparameters_impl;
            /// \cond NX_NO_DOC 
            public: explicit PostColorbarColorParameters(void *ptr);
            /// \endcond 
            /** Gets the spectrum style for the colorbar which is a kind of color scheme used to draw the colorbar scale.  @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostColorbarColorParameters::Spectrum GetSpectrum
            (
            );
            /** Sets the spectrum style to the colorbar which sets the color scheme to draw the colorbar scale
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetSpectrum
            (
                NXOpen::CAE::PostColorbarColorParameters::Spectrum spectrum /** spectrum */ 
            );
            /** Asks the colorbar object if the colorbar spectrum is in inverted state or not.  @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: bool GetInvertSpectrum
            (
            );
            /** Sets the the colorbar spectrum to the inverted state.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetInvertSpectrum
            (
                bool invertspectrum /** invertspectrum */ 
            );
            /** Asks the custom overwrite color setting for the colorbar.
                    This indicates if custom colors have been applied on the colorbar or not.  @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: bool GetCustomOverwriteColor
            (
            );
            /** Sets the custom overwrite color setting for the colorbar. 
                    If this is true then custom colors will be applied to the colorbar and postview.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetCustomOverwriteColor
            (
                bool customoverwritecolor /** customoverwritecolor */ 
            );
            /** Asks the color range for the colorbar. This contains the color ids applied to the colorbar to draw.  @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: std::vector<int> GetColorRange
            (
            );
            /** Sets the color range for the colorbar. This assigns the color ids to be applied to colorbar and postview. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetColorRange
            (
                const std::vector<int> & colorrange /** colorrange */ 
            );
            /** Destroys the object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PostColorbarColorParameters();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
