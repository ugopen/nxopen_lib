#ifndef NXOpen_AME_SYMBOLANNOTATIONBUILDER_HXX_INCLUDED
#define NXOpen_AME_SYMBOLANNOTATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_SymbolAnnotationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class SymbolAnnotationBuilder;
    }
    class Builder;
    class NXObject;
    namespace AME
    {
        class _SymbolAnnotationBuilderBuilder;
        class SymbolAnnotationBuilderImpl;
        /** Represents a Symbol Annotation creation class Builder   <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateSymbolAnnotationBuilder  NXOpen::AME::AMEManager::CreateSymbolAnnotationBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  SymbolAnnotationBuilder : public NXOpen::Builder
        {
            /** Represents orientation of annotation */
            public: enum Orientation
            {
                OrientationHorizontal/** horizontal */ ,
                OrientationVertical/** vertical */ 
            };

            /** Represents anchor of annotation */
            public: enum Anchor
            {
                AnchorTopLeft/** top left */ ,
                AnchorTopCenter/** top center */ ,
                AnchorTopRight/** top right */ ,
                AnchorMiddleLeft/** middle left */ ,
                AnchorMiddleCenter/** middle center */ ,
                AnchorMiddleRight/** middle right */ ,
                AnchorBottomLeft/** bottom left */ ,
                AnchorBottomCenter/** bottom center */ ,
                AnchorBottomRight/** bottom right */ 
            };

            private: SymbolAnnotationBuilderImpl * m_symbolannotationbuilder_impl;
            private: friend class  _SymbolAnnotationBuilderBuilder;
            protected: SymbolAnnotationBuilder();
            public: ~SymbolAnnotationBuilder();
            /**Returns  the orientation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SymbolAnnotationBuilder::Orientation SymbolAnnotationOrientation
            (
            );
            /**Sets  the orientation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSymbolAnnotationOrientation
            (
                NXOpen::AME::SymbolAnnotationBuilder::Orientation orientation /** orientation */ 
            );
            /**Returns  the anchor 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SymbolAnnotationBuilder::Anchor SymbolAnnotationAnchor
            (
            );
            /**Sets  the anchor 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSymbolAnnotationAnchor
            (
                NXOpen::AME::SymbolAnnotationBuilder::Anchor anchor /** anchor */ 
            );
            /**Returns  the symbol annotation point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Point2d SymbolAnnotationPoint
            (
            );
            /**Sets  the symbol annotation point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSymbolAnnotationPoint
            (
                const NXOpen::Point2d & symbolAnnotationPoint /** symbolannotationpoint */ 
            );
            /**Returns  the symbol anchor point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Point2d AnchorPointLocation
            (
            );
            /** Add the checked attribute. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddCheckedAttribute
            (
                const NXString & propertyName /** propertyname */ ,
                NXOpen::NXObject * propertyReference /** propertyreference */ 
            );
            /** Add the checked attribute. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void AddCheckedAttribute
            (
                const char * propertyName /** propertyname */ ,
                NXOpen::NXObject * propertyReference /** propertyreference */ 
            );
            /** Reset the property list. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ResetPropertyList
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
