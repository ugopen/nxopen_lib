#ifndef NXOpen_FEATURES_SHIPDESIGN_SHELLTEMPLATEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHIPDESIGN_SHELLTEMPLATEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShipDesign_ShellTemplateBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace ShipDesign
        {
            class ShellTemplateBuilder;
        }
    }
    class CoordinateSystem;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Plane;
    class ScCollector;
    class SelectIBasePlaneList;
    namespace Features
    {
        namespace ShipDesign
        {
            class _ShellTemplateBuilderBuilder;
            class ShellTemplateBuilderImpl;
            /**
                Used to edit or create a @link NXOpen::Features::ShipDesign::ShellTemplate NXOpen::Features::ShipDesign::ShellTemplate@endlink  feature. The shell templates are defined on a surface by specifying a primary orientation coordinate system.
                The orientation coordinate system is then used to build, or filter, planes used to locate each individual template. There are 2 primary methods for defining the input.
                Manual allows for specific, selected, data to limit various aspects of the build (for example, build with only 1 plane). Inferred allows for the tools to generate data, thus building
                with a minimal of predefined input data.
                 <br> To create a new instance of this class, use @link NXOpen::Features::ShipCollection::CreateShellTemplateBuilder  NXOpen::Features::ShipCollection::CreateShellTemplateBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            CornerCutType </term> <description> 
             
            None </description> </item> 

            <item><term> 
             
            CreateSeparateParts </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            EndXTemplateOffset.Value </term> <description> 
             
            0 (millimeters part), 0 (inches part) </description> </item> 

            <item><term> 
             
            EndYTemplateOffset.Value </term> <description> 
             
            0 (millimeters part), 0 (inches part) </description> </item> 

            <item><term> 
             
            MarkingLinesDirectionType </term> <description> 
             
            XandYDirections </description> </item> 

            <item><term> 
             
            PlaneMethod </term> <description> 
             
            Existing </description> </item> 

            <item><term> 
             
            SightLineCutType </term> <description> 
             
            None </description> </item> 

            <item><term> 
             
            StartXTemplateOffset.Value </term> <description> 
             
            0 (millimeters part), 0 (inches part) </description> </item> 

            <item><term> 
             
            StartYTemplateOffset.Value </term> <description> 
             
            0 (millimeters part), 0 (inches part) </description> </item> 

            <item><term> 
             
            Thickness.Value </term> <description> 
             
            0 (millimeters part), 0 (inches part) </description> </item> 

            <item><term> 
             
            XOffset.Value </term> <description> 
             
            300.0 (millimeters part), 12.0 (inches part) </description> </item> 

            <item><term> 
             
            YOffset.Value </term> <description> 
             
            300.0 (millimeters part), 12.0 (inches part) </description> </item> 

            </list> 

             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  ShellTemplateBuilder : public NXOpen::Features::FeatureBuilder
            {
                /**
                        The option for controlling how the coordinate system for template creation is specified.
                        */
                public: enum Types
                {
                    TypesManual/** Manually specify the coordinate system. */,
                    TypesInferCoordinateSystem/** Derive the coordinate system. */
                };

                /** The option for how the plane locations will be specified as input. */
                public: enum PlaneLocationTypes
                {
                    PlaneLocationTypesExisting/** Use existing planes to define the individual template locations. */,
                    PlaneLocationTypesOffset/** Derive the plane locations from the orientation coordinate system or X and Y specified base planes */
                };

                /** The option for controlling which marking lines are drawn on the plate */
                public: enum MarkingTypes
                {
                    MarkingTypesNone/** Do not draw template marking lines on plate. */,
                    MarkingTypesXDirectionOnly/** Draw X direction template marking lines on plate. */,
                    MarkingTypesYDirectionOnly/** Draw Y direction template marking lines on plate. */,
                    MarkingTypesXandYDirections/** Draw X and Y direction template marking lines on plate. */
                };

                /** The option for creating corner cuts on the templates. */
                public: enum CornerCutTypes
                {
                    CornerCutTypesNone/** Do not add corner cuts. */,
                    CornerCutTypesStart/** Add corner cuts on the start side of each template. */,
                    CornerCutTypesEnd/** Add corner cuts on the end side of each template. */
                };

                /** The option for creating sight line cuts on the templates. */
                public: enum SightLineCutTypes
                {
                    SightLineCutTypesNone/** Do not add sight line cuts. */,
                    SightLineCutTypesTowardStart/** Add sight line cuts from sight line toward the start side of each template. */,
                    SightLineCutTypesTowardEnd/** Add sight line cuts from the sight line toward the end side of each template. */
                };

                private: ShellTemplateBuilderImpl * m_shelltemplatebuilder_impl;
                private: friend class  _ShellTemplateBuilderBuilder;
                protected: ShellTemplateBuilder();
                public: ~ShellTemplateBuilder();
                /**Returns  the surface that the templates will be built to. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * Surface
                (
                );
                /**Returns  the coordinate system defining the origin as well as the X and Y axis for the templates. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CoordinateSystem * CoordinateSystem
                (
                );
                /**Sets  the coordinate system defining the origin as well as the X and Y axis for the templates. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetCoordinateSystem
                (
                    NXOpen::CoordinateSystem * coordinateSystem /** coordinatesystem */ 
                );
                /**Returns  the value identifying how the planes (used for sections) will be specified (See @link NXOpen::Features::ShipDesign::ShellTemplateBuilder::PlaneLocationTypes NXOpen::Features::ShipDesign::ShellTemplateBuilder::PlaneLocationTypes@endlink  for the plane methods). 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::ShellTemplateBuilder::PlaneLocationTypes PlaneMethod
                (
                );
                /**Sets  the value identifying how the planes (used for sections) will be specified (See @link NXOpen::Features::ShipDesign::ShellTemplateBuilder::PlaneLocationTypes NXOpen::Features::ShipDesign::ShellTemplateBuilder::PlaneLocationTypes@endlink  for the plane methods). 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetPlaneMethod
                (
                    NXOpen::Features::ShipDesign::ShellTemplateBuilder::PlaneLocationTypes planeMethod /** planemethod */ 
                );
                /**Returns  the planes specifying both the X and Y orientations of the templates. They will automatically be separated, or grouped, for X and Y as needed.
                        This is only valid when @link NXOpen::Features::ShipDesign::ShellTemplateBuilder::PlaneLocationTypes NXOpen::Features::ShipDesign::ShellTemplateBuilder::PlaneLocationTypes@endlink  is  @link NXOpen::Features::ShipDesign::ShellTemplateBuilder::PlaneLocationTypesExisting NXOpen::Features::ShipDesign::ShellTemplateBuilder::PlaneLocationTypesExisting@endlink . 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectIBasePlaneList * PlaneAutomatic
                (
                );
                /**Returns  the plane specifying the X direction for the coordinate system. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * SpecifyXPlane
                (
                );
                /**Sets  the plane specifying the X direction for the coordinate system. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetSpecifyXPlane
                (
                    NXOpen::Plane * specifyXPlane /** specifyxplane */ 
                );
                /**Returns  the expression defining the value of the offset to apply in the X direction. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * XOffset
                (
                );
                /**Returns  the plane specifying the Y direction for the coordinate system. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * SpecifyYPlane
                (
                );
                /**Sets  the plane specifying the Y direction for the coordinate system. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetSpecifyYPlane
                (
                    NXOpen::Plane * specifyYPlane /** specifyyplane */ 
                );
                /**Returns  the expression defining the value of the offset to apply in the Y direction. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * YOffset
                (
                );
                /**Returns  the expression defining the value of the start offset of the template for set 1 (X). 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * StartXTemplateOffset
                (
                );
                /**Returns  the expression defining the value of the end offset of the template for set 1 (X). 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * EndXTemplateOffset
                (
                );
                /**Returns  the expression defining the value of the start offset of the template for set 2 (Y). 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * StartYTemplateOffset
                (
                );
                /**Returns  the expression defining the value of the end offset of the template for set 2 (Y). 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * EndYTemplateOffset
                (
                );
                /**Returns  the expression defining the value of the thickness of the template. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Thickness
                (
                );
                /**Returns  the modeling distance tolerance. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double DistanceTolerance
                (
                );
                /**Sets  the modeling distance tolerance. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetDistanceTolerance
                (
                    double distanceTolerance /** distancetolerance */ 
                );
                /**Returns  the modeling angle tolerance. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double AngleTolerance
                (
                );
                /**Sets  the modeling angle tolerance. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetAngleTolerance
                (
                    double angleTolerance /** angletolerance */ 
                );
                /**Returns  the value defining how the coordinate system will be defined. See @link NXOpen::Features::ShipDesign::ShellTemplateBuilder::Types NXOpen::Features::ShipDesign::ShellTemplateBuilder::Types@endlink . 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::ShellTemplateBuilder::Types Type
                (
                );
                /**Sets  the value defining how the coordinate system will be defined. See @link NXOpen::Features::ShipDesign::ShellTemplateBuilder::Types NXOpen::Features::ShipDesign::ShellTemplateBuilder::Types@endlink . 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetType
                (
                    NXOpen::Features::ShipDesign::ShellTemplateBuilder::Types type /** type */ 
                );
                /**Returns  the value specifying that the plane for the X direction was user defined. 
                 <br>  Created in NX8.0.1.  <br>  
                 <br> License requirements : None */
                public: bool XPlaneUserDefined
                (
                );
                /**Sets  the value specifying that the plane for the X direction was user defined. 
                 <br>  Created in NX8.0.1.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetXPlaneUserDefined
                (
                    bool xPlaneUserDefined /** xplaneuserdefined */ 
                );
                /**Returns  the value specifying that the plane for the Y direction was user defined. 
                 <br>  Created in NX8.0.1.  <br>  
                 <br> License requirements : None */
                public: bool YPlaneUserDefined
                (
                );
                /**Sets  the value specifying that the plane for the Y direction was user defined. 
                 <br>  Created in NX8.0.1.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetYPlaneUserDefined
                (
                    bool yPlaneUserDefined /** yplaneuserdefined */ 
                );
                /**Returns  the value that determines if separate pars are created 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: bool CreateSeparateParts
                (
                );
                /**Sets  the value that determines if separate pars are created 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetCreateSeparateParts
                (
                    bool createSeparateParts /** createseparateparts */ 
                );
                /**Returns  the template set name assigned to the part attribute 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString TemplateSetName
                (
                );
                /**Sets  the template set name assigned to the part attribute 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetTemplateSetName
                (
                    const NXString & templateSetName /** templatesetname */ 
                );
                /**Sets  the template set name assigned to the part attribute 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                void SetTemplateSetName
                (
                    const char * templateSetName /** templatesetname */ 
                );
                /**Returns  the value that specifies which marking lines are drawn on the plate 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::ShellTemplateBuilder::MarkingTypes MarkingLinesDirectionType
                (
                );
                /**Sets  the value that specifies which marking lines are drawn on the plate 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetMarkingLinesDirectionType
                (
                    NXOpen::Features::ShipDesign::ShellTemplateBuilder::MarkingTypes markingLinesDirectionType /** markinglinesdirectiontype */ 
                );
                /**Returns  the value that specifies if and where to create corner cuts 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::ShellTemplateBuilder::CornerCutTypes CornerCutType
                (
                );
                /**Sets  the value that specifies if and where to create corner cuts 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetCornerCutType
                (
                    NXOpen::Features::ShipDesign::ShellTemplateBuilder::CornerCutTypes cornerCutType /** cornercuttype */ 
                );
                /**Returns  the value that specifies if and where to create sight line cuts 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::ShellTemplateBuilder::SightLineCutTypes SightLineCutType
                (
                );
                /**Sets  the value that specifies if and where to create sight line cuts 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetSightLineCutType
                (
                    NXOpen::Features::ShipDesign::ShellTemplateBuilder::SightLineCutTypes sightLineCutType /** sightlinecuttype */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
