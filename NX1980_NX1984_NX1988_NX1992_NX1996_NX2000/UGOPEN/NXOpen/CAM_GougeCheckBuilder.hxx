#ifndef NXOpen_CAM_GOUGECHECKBUILDER_HXX_INCLUDED
#define NXOpen_CAM_GOUGECHECKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_GougeCheckBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class GougeCheckBuilder;
    }
    class Builder;
    namespace CAM
    {
        class _GougeCheckBuilderBuilder;
        class GougeCheckBuilderImpl;
        /**
            Represents a @link NXOpen::CAM::GougeCheckBuilder NXOpen::CAM::GougeCheckBuilder@endlink . Which is for gouge and collision check.
            When @link Builder::Commit Builder::Commit@endlink  is called NULL will be returned.
             <br> To create a new instance of this class, use @link NXOpen::CAM::CAMSetup::CreateGougeCheckBuilder  NXOpen::CAM::CAMSetup::CreateGougeCheckBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  GougeCheckBuilder : public NXOpen::Builder
        {
            /** the tool shape options */
            public: enum ToolShapeType
            {
                ToolShapeTypeToolParameters/** use tool parameters */,
                ToolShapeTypeSolidAssembly/** use solid assembly  */
            };

            /** the gouge check stock options */
            public: enum GougeCheckStock
            {
                GougeCheckStockAutomatic/** use automatic    */,
                GougeCheckStockUserDefined/** use user defined */
            };

            private: GougeCheckBuilderImpl * m_gougecheckbuilder_impl;
            private: friend class  _GougeCheckBuilderBuilder;
            protected: GougeCheckBuilder();
            public: ~GougeCheckBuilder();
            /**Returns  the check tool and holder. 
                        This is the setting for the gouge checking to check tool and holder.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool CheckToolAndHolder
            (
            );
            /**Sets  the check tool and holder. 
                        This is the setting for the gouge checking to check tool and holder.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCheckToolAndHolder
            (
                bool checkToolAndHolder /** checktoolandholder */ 
            );
            /**Returns  the tool shape. 
                        This is the setting for which tool shape type is used for the gouge checking.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::GougeCheckBuilder::ToolShapeType ToolShape
            (
            );
            /**Sets  the tool shape. 
                        This is the setting for which tool shape type is used for the gouge checking.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolShape
            (
                NXOpen::CAM::GougeCheckBuilder::ToolShapeType type /** the tool shape type */
            );
            /**Returns  the gouge check stock options. 
                        This is the setting for the gouge check stock options.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::GougeCheckBuilder::GougeCheckStock GougeCheckStockOptions
            (
            );
            /**Sets  the gouge check stock options. 
                        This is the setting for the gouge check stock options.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGougeCheckStockOptions
            (
                NXOpen::CAM::GougeCheckBuilder::GougeCheckStock options /** the gouge check stock options */
            );
            /**Returns  the gouge check stock user defined value. 
                        This is the setting when user selects user defined gouge check stock.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double GougeCheckStockUserDefinedValue
            (
            );
            /**Sets  the gouge check stock user defined value. 
                        This is the setting when user selects user defined gouge check stock.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGougeCheckStockUserDefinedValue
            (
                double userDefinedValue /** the gouge check stock user defined value */
            );
            /**Returns  the pause on first gouge or collision. 
                        This is the options to stop the gouge checking when encounter first gouge.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool PauseOnFirstGougeOrCollision
            (
            );
            /**Sets  the pause on first gouge or collision. 
                        This is the options to stop the gouge checking when encounter first gouge.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPauseOnFirstGougeOrCollision
            (
                bool pauseOnFirstGougeOrCollision /** pauseonfirstgougeorcollision */ 
            );
            /**Returns  the stop when limit reached. 
                        This is the options to stop or continue the gouge checking when encounter any gouge.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool StopWhenLimitReached
            (
            );
            /**Sets  the stop when limit reached. 
                        This is the options to stop or continue the gouge checking when encounter any gouge.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopWhenLimitReached
            (
                bool stopWhenLimitReached /** stopwhenlimitreached */ 
            );
            /**Returns  the stop when limit reached maximum limit. 
                        The gouge checking will be stopped when reached the maximum limit.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int StopWhenLimitReachedMaximumLimit
            (
            );
            /**Sets  the stop when limit reached maximum limit. 
                        The gouge checking will be stopped when reached the maximum limit.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopWhenLimitReachedMaximumLimit
            (
                int maximumLimit /** maximumlimit */ 
            );

            /// \cond NX_NO_DOC 
            /**Sets  the check gouge
                        This is the setting to run gouge check
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCheckGouge
            (
                bool checkGouge /** checkgouge */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the check gouge
                        This is the setting to run gouge check
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool CheckGouge
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the check ipw collision
                        This is the setting to run IPW collision checks
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCheckIpwCollision
            (
                bool checkIpwCollision /** checkipwcollision */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the check ipw collision
                        This is the setting to run IPW collision checks
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool CheckIpwCollision
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the check part collision
                        This is the setting to run Part collision checks
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCheckPartCollision
            (
                bool checkPartCollision /** checkpartcollision */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the check part collision
                        This is the setting to run Part collision checks
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool CheckPartCollision
            (
            );

            /// \endcond 
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
