#ifndef NXOpen_FEATURES_SILHOUETTEFLANGEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SILHOUETTEFLANGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SilhouetteFlangeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class SilhouetteFlangeBuilder;
    }
    class Curve;
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeature;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    class ScCollector;
    class Section;
    namespace Features
    {
        class _SilhouetteFlangeBuilderBuilder;
        class SilhouetteFlangeBuilderImpl;
        /**
            Represents a @link NXOpen::Features::SilhouetteFlange NXOpen::Features::SilhouetteFlange@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateSilhouetteFlangeBuilder  NXOpen::Features::FeatureCollection::CreateSilhouetteFlangeBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AngleLaw.Function </term> <description> 
         
        ft </description> </item> 

        <item><term> 
         
        AngleLaw.LawType </term> <description> 
         
        MultiTransition </description> </item> 

        <item><term> 
         
        AngleLaw.Parameter </term> <description> 
         
        t </description> </item> 

        <item><term> 
         
        BaseFactor </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        BasePipeContinuity.ContinuityType </term> <description> 
         
        G1 </description> </item> 

        <item><term> 
         
        CreateCurves </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ExtendFlange </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        FlangeFactor </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FlangePipeContinuity.ContinuityType </term> <description> 
         
        G0 </description> </item> 

        <item><term> 
         
        Gap.Value </term> <description> 
         
        5 (millimeters part), 0.2 (inches part) </description> </item> 

        <item><term> 
         
        LengthLaw.LawType </term> <description> 
         
        MultiTransition </description> </item> 

        <item><term> 
         
        MergeFacesIfPossible </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RadiusLaw.LawType </term> <description> 
         
        MultiTransition </description> </item> 

        <item><term> 
         
        ReferenceDirectionOption </term> <description> 
         
        NormalDraft </description> </item> 

        <item><term> 
         
        ShowPipe </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        TrimBaseFaces </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        Type </term> <description> 
         
        Basic </description> </item> 

        </list> 

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  SilhouetteFlangeBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Silhouette flange creation types */
            public: enum Types
            {
                TypesBasic/** Basic Silhouette Flange */,
                TypesAbsoluteGap/** Absolute gap Silhouette Flange */,
                TypesVisualGap/** Visual gap Silhouette Flange */
            };

            /** Reference direction options */
            public: enum ReferenceDirectionOptions
            {
                ReferenceDirectionOptionsFaceNormal/** Create flange along face normal */,
                ReferenceDirectionOptionsVector/** Create flange along reference vector */,
                ReferenceDirectionOptionsNormalDraft/** Create flange along silhouette curve and face normal */,
                ReferenceDirectionOptionsVectorDraft/** Create flange along silhouette curve and reference vector */
            };

            /** Output surface options */
            public: enum OutputSurfaceOptions
            {
                OutputSurfaceOptionsBlendFlange/** Output blend and flange surfaces */,
                OutputSurfaceOptionsPipeOnly/** Output pipe */,
                OutputSurfaceOptionsFlangeOnly/** Output flange surface */
            };

            private: SilhouetteFlangeBuilderImpl * m_silhouetteflangebuilder_impl;
            private: friend class  _SilhouetteFlangeBuilderBuilder;
            protected: SilhouetteFlangeBuilder();
            public: ~SilhouetteFlangeBuilder();
            /**Returns  the base curves. Base curves must be G1 continuous. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * BaseCurves
            (
            );
            /**Returns  the parent feature. Parent feature must be a Silhouette
                    Flange feature. A @link NXOpen::Features::SilhouetteFlangeBuilder::TypesVisualGap NXOpen::Features::SilhouetteFlangeBuilder::TypesVisualGap@endlink 
                    silhouette flange and its parent Silhouette Flange feature should use parallel vectors as reference direction. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SelectFeature * ParentFeature
            (
            );
            /**Returns  the base faces. The base faces could be from different
                    sheet bodies, but they must be G1 continuous. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BaseFaces
            (
            );
            /**Returns  the reference direction option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SilhouetteFlangeBuilder::ReferenceDirectionOptions ReferenceDirectionOption
            (
            );
            /**Sets  the reference direction option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetReferenceDirectionOption
            (
                NXOpen::Features::SilhouetteFlangeBuilder::ReferenceDirectionOptions referenceDirectionOption /** referencedirectionoption */ 
            );
            /**Returns  the reference faces. If any reference face is selected for
                    @link NXOpen::Features::SilhouetteFlangeBuilder::ReferenceDirectionOptionsFaceNormal NXOpen::Features::SilhouetteFlangeBuilder::ReferenceDirectionOptionsFaceNormal@endlink 
                    case, the normal of reference face is used as the reference
                    direction. Otherwise, the normal of base faces will be used as the reference direction. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ReferenceFaces
            (
            );
            /**Returns  the reference vector 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ReferenceVector
            (
            );
            /**Sets  the reference vector 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetReferenceVector
            (
                NXOpen::Direction * referenceVctor /** referencevctor */ 
            );
            /**Returns  the radius law. The only supported law type is 
                    @link GeometricUtilities::LawBuilder::TypeMultiTransition GeometricUtilities::LawBuilder::TypeMultiTransition@endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * RadiusLaw
            (
            );
            /**Returns  the length law. The only supported law type is 
                    @link GeometricUtilities::LawBuilder::TypeMultiTransition GeometricUtilities::LawBuilder::TypeMultiTransition@endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * LengthLaw
            (
            );
            /**Returns  the angle law. The only supported law type is 
                    @link GeometricUtilities::LawBuilder::TypeMultiTransition GeometricUtilities::LawBuilder::TypeMultiTransition@endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * AngleLaw
            (
            );
            /** Update the spine curve in length/angle/radius laws. All
                    laws use the center line curve of the pipe as the spine curve. This API
                    should be called if the pipe should be reconstructed due to any
                    input change. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void UpdateLawSpine
            (
            );
            /**Returns  the gap 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Gap
            (
            );
            /** A value indicating whether to flip the direction. If the
                    direction is flipped, the pipe is placed to the opposite side of base faces and flange direction is flipped.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetIsDirectionFlipped
            (
            );
            /**Sets a flag indicating if the direction is flipped. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetIsDirectionFlipped
            (
                bool flipDirection /** flipdirection */ 
            );
            /**Returns a value indicating whether to flip the side. If the side
                    is flipped, the pipe is placed to the other side of base
                    curves for Basic Type and 
                    the other side of the pipe of the parent feature for Absolute/Visual Gap Type.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetIsSideFlipped
            (
            );
            /** Sets a value indicating whether to flip the side. If the side
                    is flipped, the pipe is placed to the other side of base
                    curves for Basic Type and 
                    the other side of the pipe of the parent feature for Absolute/Visual Gap Type.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetIsSideFlipped
            (
                bool flipSide /** flipside */ 
            );
            /**Returns  the base pipe continuity. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * BasePipeContinuity
            (
            );
            /**Returns  the base pipe continuity factor. It's used to determine
                    what percentage of the arc will be trimmed away in order to build
                    the transition surface between the base faces and the pipe. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int BaseFactor
            (
            );
            /**Sets  the base pipe continuity factor. It's used to determine
                    what percentage of the arc will be trimmed away in order to build
                    the transition surface between the base faces and the pipe. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetBaseFactor
            (
                int baseFactor /** basefactor */ 
            );
            /**Returns  the flange pipe continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * FlangePipeContinuity
            (
            );
            /**Returns  the flange pipe continuity factor. It's used to determine
                    what percentage of the arc will be trimmed away in order to
                    build the transition surface between the pipe and flange surface. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int FlangeFactor
            (
            );
            /**Sets  the flange pipe continuity factor. It's used to determine
                    what percentage of the arc will be trimmed away in order to
                    build the transition surface between the pipe and flange surface. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetFlangeFactor
            (
                int flangeFactor /** flangefactor */ 
            );
            /**Returns  the output surface option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SilhouetteFlangeBuilder::OutputSurfaceOptions OutputSurfaceOption
            (
            );
            /**Sets  the output surface option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetOutputSurfaceOption
            (
                NXOpen::Features::SilhouetteFlangeBuilder::OutputSurfaceOptions outputSurfaceOption /** outputsurfaceoption */ 
            );
            /**Returns  a value that indicates whether to trim base faces 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool TrimBaseFaces
            (
            );
            /**Sets  a value that indicates whether to trim base faces 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetTrimBaseFaces
            (
                bool trimBaseFaces /** trimbasefaces */ 
            );
            /**Returns  a value that indicates whether to the merge faces if possible  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool MergeFacesIfPossible
            (
            );
            /**Sets  a value that indicates whether to the merge faces if possible  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetMergeFacesIfPossible
            (
                bool mergeFacesIfPossible /** mergefacesifpossible */ 
            );
            /**Returns  a value that indicates whether to extend flange until the
                    boundary edges of the base faces. This option will be enforced
                    if Trim Base Faces option is true. The base faces cannot be
                    trimmed if the pipe does not hit the boundary edges of base faces. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ExtendFlange
            (
            );
            /**Sets  a value that indicates whether to extend flange until the
                    boundary edges of the base faces. This option will be enforced
                    if Trim Base Faces option is true. The base faces cannot be
                    trimmed if the pipe does not hit the boundary edges of base faces. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetExtendFlange
            (
                bool extendFlange /** extendflange */ 
            );
            /**Returns  a value that indicates whether to create curves. When this option is true, the center line curve of the pipe and
                    silhouette flange curve at zero degrees will be output. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateCurves
            (
            );
            /**Sets  a value that indicates whether to create curves. When this option is true, the center line curve of the pipe and
                    silhouette flange curve at zero degrees will be output. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetCreateCurves
            (
                bool createCurves /** createcurves */ 
            );
            /** Return the center curve 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Curve * GetCenterCurve
            (
            );
            /** Return the silhouette curve 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Curve * GetSilhouetteCurve
            (
            );
            /**Returns  a value that indicates whether to show pipe 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowPipe
            (
            );
            /**Sets  a value that indicates whether to show pipe 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetShowPipe
            (
                bool showPipe /** showpipe */ 
            );
            /**Returns  the position tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double PositionTolerance
            (
            );
            /**Sets  the position tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetPositionTolerance
            (
                double positionTolerance /** positiontolerance */ 
            );
            /**Returns  the tangent tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double TangentTolerance
            (
            );
            /**Sets  the tangent tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetTangentTolerance
            (
                double tangentTolerance /** tangenttolerance */ 
            );
            /**Returns  the type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SilhouetteFlangeBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetType
            (
                NXOpen::Features::SilhouetteFlangeBuilder::Types type /** type */ 
            );
            /** Create the tube from the given inputs. The tube must be created before creating any flange surface. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void CreatePipe
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
