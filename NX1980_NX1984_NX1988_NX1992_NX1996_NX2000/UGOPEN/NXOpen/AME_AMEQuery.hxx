#ifndef NXOpen_AME_AMEQUERY_HXX_INCLUDED
#define NXOpen_AME_AMEQUERY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_AMEQuery.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_QueryResult.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class AMEQuery;
    }
    namespace AME
    {
        class AMEEngObject;
    }
    namespace AME
    {
        class QueryClause;
    }
    namespace AME
    {
        class QueryResult;
    }
    class NXObject;
    namespace AME
    {
        class _AMEQueryBuilder;
        class AMEQueryImpl;
        /** The Query Object  <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  AMEQuery : public NXOpen::NXObject
        {
            private: AMEQueryImpl * m_amequery_impl;
            private: friend class  _AMEQueryBuilder;
            protected: AMEQuery();
            public: ~AMEQuery();
            /** Execute query and get engineering objects as result 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ExecuteQuery
            (
                std::vector<NXOpen::AME::AMEEngObject *> & engObjects /** engobjects */ 
            );
            /** Execute query. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ExecuteQuery
            (
                bool isPreview /** Method returns configured number of objects if this flag is set to true, otherwise all.*/,
                std::vector<NXOpen::AME::AMEEngObject *> & engObjects /** engobjects */ 
            );
            /** Execute query and get result 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::QueryResult * ExecuteQuery
            (
            );
            /** Execute query and get result without loading 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::QueryResult * ExecuteQueryWithTargetsWithoutLoading
            (
            );
            /** Remove clause from Query 
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link RemoveClauses RemoveClauses@endlink  instead. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use RemoveClauses instead.") void RemoveClause
            (
                const std::vector<int> & removedClauses /** removedclauses */ 
            );
            /** Remove clauses from Query 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveClauses
            (
                const std::vector<NXOpen::NXObject *> & clauses /** clauses */ 
            );
            /** Group query clauses 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void GroupClauses
            (
                const std::vector<NXOpen::NXObject *> & clauses /** clauses */ 
            );
            /** Ungroup query clauses 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UngroupClauses
            (
                const std::vector<NXOpen::NXObject *> & clauses /** clauses */ 
            );
            /** Insert clause before reference clause 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void InsertClauseBefore
            (
                NXOpen::NXObject * referenceClause /** referenceclause */ ,
                NXOpen::AME::QueryClause * clause /** clause */ 
            );
            /** Change the search scope of query object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ModifySearchScope
            (
                const NXString & text /** text */ 
            );
            /** Change the search scope of query object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void ModifySearchScope
            (
                const char * text /** text */ 
            );
            /** Set preview flag 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPreview
            (
                bool isPreview /** ispreview */ 
            );
            /** Get the Name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString GetName
            (
            );
            /** Set the modified name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetName
            (
                const NXString & text /** text */ 
            );
            /** Set the modified name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetName
            (
                const char * text /** text */ 
            );
            /** Get the description 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString GetDescription
            (
            );
            /** Set the modified description 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDescription
            (
                const NXString & text /** text */ 
            );
            /** Set the modified description 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetDescription
            (
                const char * text /** text */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
