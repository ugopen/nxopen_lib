#ifndef NXOpen_CAM_CREATETOOL_HXX_INCLUDED
#define NXOpen_CAM_CREATETOOL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CreateTool.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class CreateTool;
    }
    class Builder;
    namespace CAM
    {
        class CAMFeature;
    }
    namespace CAM
    {
        class Tool;
    }
    namespace CAM
    {
        class _CreateToolBuilder;
        class CreateToolImpl;

        /// \cond NX_NO_DOC 
        /** Creates a tool creator builder  <br> To create a new instance of this class, use @link NXOpen::CAM::CAMSetup::CreateToolFromFeature  NXOpen::CAM::CAMSetup::CreateToolFromFeature @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  CreateTool : public NXOpen::Builder
        {
            private: CreateToolImpl * m_createtool_impl;
            private: friend class  _CreateToolBuilder;
            protected: CreateTool();
            public: ~CreateTool();

            /// \cond NX_NO_DOC 
            /** Gets the selected feature 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: NXOpen::CAM::CAMFeature * GetFeature
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the selected feature 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetFeature
            (
                NXOpen::CAM::CAMFeature * feature /** feature */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the top extend diameter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: double TopDiameter
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the top extend diameter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetTopDiameter
            (
                double offset /** offset */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the top depth offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: double GetTopDepthOffset
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the top depth offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetTopDepthOffset
            (
                double offset /** offset */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the bottom depth offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: double GetBottomDepthOffset
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the bottom depth offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetBottomDepthOffset
            (
                double offset /** offset */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the depth offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: double GetDepthOffset
            (
                int index /** index */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the depth offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetDepthOffset
            (
                int index /** index */ ,
                double offset /** offset */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the diameter offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: double GetDiameterOffset
            (
                int index /** index */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the diameter offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetDiameterOffset
            (
                int index /** index */ ,
                double offset /** offset */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the depth range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: double GetDepthRange
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the depth range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetDepthRange
            (
                double tolerance /** tolerance */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the diameter range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: double GetDiameterRange
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the diameter range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetDiameterRange
            (
                double tolerance /** tolerance */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the match depth option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: bool MatchDepthOption
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the match depth option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetMatchDepthOption
            (
                bool match /** match */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the machining area names 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: std::vector<NXString> GetMachiningAreaNames
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the machining area active 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: bool GetMachiningAreaActive
            (
                int index /** index */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the machining area active 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetMachiningAreaActive
            (
                int index /** index */ ,
                bool value /** value */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the tool class 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: NXString GetToolClass
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the tool class 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetToolClass
            (
                const NXString & name /** name */ 
            );
            /** Sets the tool class 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void SetToolClass
            (
                const char * name /** name */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the tool template 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: NXString GetToolTemplate
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the tool template 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetToolTemplate
            (
                const NXString & name /** name */ 
            );
            /** Sets the tool template 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void SetToolTemplate
            (
                const char * name /** name */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the searched library tools 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: std::vector<NXString> GetLibTools
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the searched machine tools 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: std::vector<NXOpen::CAM::Tool *> GetMacTools
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates the new tool 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: NXOpen::CAM::Tool * CreateNewTool
            (
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
