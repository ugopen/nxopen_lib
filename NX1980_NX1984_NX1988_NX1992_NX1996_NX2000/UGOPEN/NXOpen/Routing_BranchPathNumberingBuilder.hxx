#ifndef NXOpen_ROUTING_BRANCHPATHNUMBERINGBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_BRANCHPATHNUMBERINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_BranchPathNumberingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class BranchPathNumberingBuilder;
    }
    class Builder;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class _BranchPathNumberingBuilderBuilder;
        class BranchPathNumberingBuilderImpl;
        /** Builder class for Branch Path Numbering. 
             <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreateBranchPathNumberingBuilder  NXOpen::Routing::RouteManager::CreateBranchPathNumberingBuilder @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  BranchPathNumberingBuilder : public NXOpen::Builder
        {
            /** Specifies the sequence method */
            public: enum Sequence
            {
                SequenceNumbers/** 1, 2, 3, and so on */,
                SequenceUpperCase/** A, B, C, and so on */,
                SequenceLowerCase/** a, b, c, and so on */
            };

            private: BranchPathNumberingBuilderImpl * m_branchpathnumberingbuilder_impl;
            private: friend class  _BranchPathNumberingBuilderBuilder;
            protected: BranchPathNumberingBuilder();
            public: ~BranchPathNumberingBuilder();
            /** Set the control point for the start of the labeling sequence 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetControlPoint
            (
                NXOpen::Routing::ControlPoint * controlPoint /** controlpoint */ 
            );
            /** Set the control point for the start of the labeling sequence 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetControlPointFromSegment
            (
                NXOpen::Routing::ISegment * controlPoint /** controlpoint */ 
            );
            /**Returns  the prefix specified in the UI for the labels 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXString Prefix
            (
            );
            /**Sets  the prefix specified in the UI for the labels 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetPrefix
            (
                const NXString & prefix /** prefix */ 
            );
            /**Sets  the prefix specified in the UI for the labels 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            void SetPrefix
            (
                const char * prefix /** prefix */ 
            );
            /**Returns  the suffix specified in the UI for the labels  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXString Suffix
            (
            );
            /**Sets  the suffix specified in the UI for the labels  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetSuffix
            (
                const NXString & suffix /** suffix */ 
            );
            /**Sets  the suffix specified in the UI for the labels  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            void SetSuffix
            (
                const char * suffix /** suffix */ 
            );
            /**Returns  the sequence method specified in the UI for the labels      
                        
                    
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::BranchPathNumberingBuilder::Sequence SequenceMethod
            (
            );
            /**Sets  the sequence method specified in the UI for the labels      
                        
                    
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetSequenceMethod
            (
                NXOpen::Routing::BranchPathNumberingBuilder::Sequence sequenceMethod /** sequencemethod */ 
            );
            /**Returns  the formula specified in the UI to compute the first branch ID for the labeling sequence
                        in order to be valid, the formula must be blank OR contain the phrase "PARENT_BRANCH_ID" 
                    
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXString FirstBranchID
            (
            );
            /**Sets  the formula specified in the UI to compute the first branch ID for the labeling sequence
                        in order to be valid, the formula must be blank OR contain the phrase "PARENT_BRANCH_ID" 
                    
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetFirstBranchID
            (
                const NXString & numberingFirstBranchID /** numberingfirstbranchid */ 
            );
            /**Sets  the formula specified in the UI to compute the first branch ID for the labeling sequence
                        in order to be valid, the formula must be blank OR contain the phrase "PARENT_BRANCH_ID" 
                    
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            void SetFirstBranchID
            (
                const char * numberingFirstBranchID /** numberingfirstbranchid */ 
            );
            /**Returns   the formula specified in the UI to compute the next branch ID for the labeling sequence
                         in order to be valid, the formula must be blank OR contain the phrase "PREVIOUS_BRANCH_ID" 
                    
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXString NextBranchID
            (
            );
            /**Sets   the formula specified in the UI to compute the next branch ID for the labeling sequence
                         in order to be valid, the formula must be blank OR contain the phrase "PREVIOUS_BRANCH_ID" 
                    
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetNextBranchID
            (
                const NXString & nextBranchID /** nextbranchid */ 
            );
            /**Sets   the formula specified in the UI to compute the next branch ID for the labeling sequence
                         in order to be valid, the formula must be blank OR contain the phrase "PREVIOUS_BRANCH_ID" 
                    
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            void SetNextBranchID
            (
                const char * nextBranchID /** nextbranchid */ 
            );
            /**Returns   the toggle specified in the UI on whether to display the labels 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: bool DisplayOnSegments
            (
            );
            /**Sets   the toggle specified in the UI on whether to display the labels 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetDisplayOnSegments
            (
                bool displayOnSegments /** displayonsegments */ 
            );
            /**Returns  the toggle specified in the UI on whether to reassign the labels  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: bool ReassignOnSegments
            (
            );
            /**Sets  the toggle specified in the UI on whether to reassign the labels  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetReassignOnSegments
            (
                bool reassignOnSegments /** reassignonsegments */ 
            );
            /**Returns  the start value for numbers. The default value is "1" if the customer does not call this method  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXString StartValueForNumbers
            (
            );
            /**Sets  the start value for numbers. The default value is "1" if the customer does not call this method  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetStartValueForNumbers
            (
                const NXString & startValueForNumbers /** startvaluefornumbers */ 
            );
            /**Sets  the start value for numbers. The default value is "1" if the customer does not call this method  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            void SetStartValueForNumbers
            (
                const char * startValueForNumbers /** startvaluefornumbers */ 
            );
            /**Returns  the start value for upper case alphabet. The default value is "A" if the customer does not call this method  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXString StartValueForUpperCase
            (
            );
            /**Sets  the start value for upper case alphabet. The default value is "A" if the customer does not call this method  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetStartValueForUpperCase
            (
                const NXString & startValueForUpperCase /** startvalueforuppercase */ 
            );
            /**Sets  the start value for upper case alphabet. The default value is "A" if the customer does not call this method  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            void SetStartValueForUpperCase
            (
                const char * startValueForUpperCase /** startvalueforuppercase */ 
            );
            /**Returns  the start value for lower case alphabet. The default value is "a" if the customer does not call this method  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXString StartValueForLowerCase
            (
            );
            /**Sets  the start value for lower case alphabet. The default value is "a" if the customer does not call this method  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetStartValueForLowerCase
            (
                const NXString & startValueForLowerCase /** startvalueforlowercase */ 
            );
            /**Sets  the start value for lower case alphabet. The default value is "a" if the customer does not call this method  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            void SetStartValueForLowerCase
            (
                const char * startValueForLowerCase /** startvalueforlowercase */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
