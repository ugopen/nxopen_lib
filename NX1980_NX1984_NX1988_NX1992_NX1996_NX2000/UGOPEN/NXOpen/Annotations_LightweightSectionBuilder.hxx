#ifndef NXOpen_ANNOTATIONS_LIGHTWEIGHTSECTIONBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LIGHTWEIGHTSECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LightweightSectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_CuttingPlaneSymbolBuilder.hxx>
#include <NXOpen/Annotations_HatchFillSettingsBuilder.hxx>
#include <NXOpen/Display_DynamicSectionBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class LightweightSectionBuilder;
    }
    namespace Annotations
    {
        class CuttingPlaneSymbolBuilder;
    }
    namespace Annotations
    {
        class HatchFillSettingsBuilder;
    }
    class Curve;
    namespace Display
    {
        class DynamicSectionBuilder;
    }
    class SelectDisplayableObjectList;
    namespace Annotations
    {
        class _LightweightSectionBuilderBuilder;
        class LightweightSectionBuilderImpl;
        /** Represents a @link NXOpen::Annotations::LightweightSection NXOpen::Annotations::LightweightSection@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Annotations::PmiLightweightSectionCollection::CreateLightweightSectionBuilder  NXOpen::Annotations::PmiLightweightSectionCollection::CreateLightweightSectionBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        BoxExtentDelayUpdate </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        CapColorOption </term> <description> 
         
        Any </description> </item> 

        <item><term> 
         
        ClipType </term> <description> 
         
        Section </description> </item> 

        <item><term> 
         
        CurveColorOption </term> <description> 
         
        Any </description> </item> 

        <item><term> 
         
        CuttingPlaneSymbol.DisplayCuttingPlaneSymbol </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CuttingPlaneSymbol.UseTwoArrows </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CuttingPlaneSymbol.ViewNameFormat </term> <description> 
         
        UserDefined </description> </item> 

        <item><term> 
         
        LockPlanes </term> <description> 
         
        true </description> </item> 

        <item><term> 
         
        ShowCap </term> <description> 
         
        true </description> </item> 

        <item><term> 
         
        ShowClip </term> <description> 
         
        true </description> </item> 

        <item><term> 
         
        ShowCurves (deprecated) </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        ShowGrid </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        ShowInterference </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        ShowViewer </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        Type </term> <description> 
         
        OnePlane </description> </item> 

        </list> 

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  LightweightSectionBuilder : public NXOpen::Display::DynamicSectionBuilder
        {
            private: LightweightSectionBuilderImpl * m_lightweightsectionbuilder_impl;
            private: friend class  _LightweightSectionBuilderBuilder;
            protected: LightweightSectionBuilder();
            public: ~LightweightSectionBuilder();
            /**Returns  the objects to section
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * ObjectsToSection
            (
            );
            /**Returns  the save associative curves toggle value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool SaveAssociativeCurves
            (
            );
            /**Sets  the save associative curves toggle value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetSaveAssociativeCurves
            (
                bool saveAssociativeCurvesToggle /** saveassociativecurvestoggle */ 
            );
            /**Returns  the name of the lightweight section view 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ViewName
            (
            );
            /**Sets  the name of the lightweight section view 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetViewName
            (
                const NXString & viewName /** Section name */
            );
            /**Sets  the name of the lightweight section view 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            void SetViewName
            (
                const char * viewName /** Section name */
            );
            /**  Returns the lightweight section view curves 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetSectionCurves
            (
                std::vector<NXOpen::Curve *> & curves /** Array of lightweight section view curves */
            );
            /**Returns  the objects to define the box section type bounding extents
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * BoundingBoxComponents
            (
            );
            /**Returns  the crosshatch settings 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::HatchFillSettingsBuilder * CrosshatchSettings
            (
            );
            /**Returns  the display crosshatch option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayCrosshatch
            (
            );
            /**Sets  the display crosshatch option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetDisplayCrosshatch
            (
                bool displayCrosshatchOption /** displaycrosshatchoption */ 
            );
            /**Returns  the assembly crosshatch option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssemblyCrosshatching
            (
            );
            /**Sets  the assembly crosshatch option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetAssemblyCrosshatching
            (
                bool assemblyCrosshatchingOption /** assemblycrosshatchingoption */ 
            );
            /**Returns  the restrict crosshatch angle to 45 degree option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool RestrictCrosshatch
            (
            );
            /**Sets  the restrict crosshatch angle to 45 degree option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetRestrictCrosshatch
            (
                bool restrictCrosshatchOption /** restrictcrosshatchoption */ 
            );
            /**Returns  the crosshatch adjacency tolerance  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceCrosshatch
            (
            );
            /**Sets  the crosshatch adjacency tolerance  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetToleranceCrosshatch
            (
                double crosshatchAdjacencyTolerance /** crosshatchadjacencytolerance */ 
            );
            /**Returns  the crosshatch pattern defined by  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int PatternDefinedBy
            (
            );
            /**Sets  the crosshatch pattern defined by  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetPatternDefinedBy
            (
                int patternDefinedBy /** patterndefinedby */ 
            );
            /**Returns  the cutting plane symbol
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CuttingPlaneSymbolBuilder * CuttingPlaneSymbol
            (
            );
            /**Returns  the clip coplanar objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ClipCoplanarObjects
            (
            );
            /**Sets  the clip coplanar objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetClipCoplanarObjects
            (
                bool clipCoplanarObjectsOption /** clipcoplanarobjectsoption */ 
            );
            /**Returns  the clip wireframe objects 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool ClipWireframeObjects
            (
            );
            /**Sets  the clip wireframe objects 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetClipWireframeObjects
            (
                bool clipWireframeObjectsOption /** clipwireframeobjectsoption */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
