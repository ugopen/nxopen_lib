#ifndef NXOpen_CAE_PLOTFRFOPTIONSBUILDER_HXX_INCLUDED
#define NXOpen_CAE_PLOTFRFOPTIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PlotFrfOptionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/CAE_CorrelBaseBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PlotFrfOptionsBuilder;
    }
    namespace CAE
    {
        class CorrelBaseBuilder;
    }
    class Expression;
    namespace CAE
    {
        class _PlotFrfOptionsBuilderBuilder;
        class PlotFrfOptionsBuilderImpl;
        /** Represents a @link CAE::PlotFrfOptions CAE::PlotFrfOptions@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::CAE::CorrelFrfSolution::CreatePlotFrfOptionsBuilder  NXOpen::CAE::CorrelFrfSolution::CreatePlotFrfOptionsBuilder @endlink  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PlotFrfOptionsBuilder : public NXOpen::CAE::CorrelBaseBuilder
        {
            /** DOCUMENTATION: TODO! */
            public: enum AveragingFrfOptions
            {
                AveragingFrfOptionsNone/** none */ ,
                AveragingFrfOptionsRMSAverage/** rmsaverage */ ,
                AveragingFrfOptionsRSSSum/** rsssum */ 
            };

            /** DOCUMENTATION: TODO! */
            public: enum FrequencyFrfRange
            {
                FrequencyFrfRangeInferred/** inferred */ ,
                FrequencyFrfRangeReference/** reference */ ,
                FrequencyFrfRangeWork/** work */ ,
                FrequencyFrfRangeUserDefined/** user defined */ 
            };

            /** The frequency range specification for Frac Plots */
            public: enum FracFrequencyRange
            {
                FracFrequencyRangeInferred/** inferred */ ,
                FracFrequencyRangeUserDefined/** user defined */ 
            };

            private: PlotFrfOptionsBuilderImpl * m_plotfrfoptionsbuilder_impl;
            private: friend class  _PlotFrfOptionsBuilderBuilder;
            protected: PlotFrfOptionsBuilder();
            public: ~PlotFrfOptionsBuilder();
            /**Returns  the averaging options 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PlotFrfOptionsBuilder::AveragingFrfOptions AveragingOptions
            (
            );
            /**Sets  the averaging options 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetAveragingOptions
            (
                NXOpen::CAE::PlotFrfOptionsBuilder::AveragingFrfOptions averagingOptions /** averagingoptions */ 
            );
            /**Returns  the work frf dof x 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool WorkFrfDofX
            (
            );
            /**Sets  the work frf dof x 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetWorkFrfDofX
            (
                bool workFrfDofX /** workfrfdofx */ 
            );
            /**Returns  the work frf dof y 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool WorkFrfDofY
            (
            );
            /**Sets  the work frf dof y 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetWorkFrfDofY
            (
                bool workFrfDofY /** workfrfdofy */ 
            );
            /**Returns  the work frf dof z 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool WorkFrfDofZ
            (
            );
            /**Sets  the work frf dof z 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetWorkFrfDofZ
            (
                bool workFrfDofZ /** workfrfdofz */ 
            );
            /**Returns  the input work frf dof x 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool InputWorkFrfDofX
            (
            );
            /**Sets  the input work frf dof x 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetInputWorkFrfDofX
            (
                bool inputWorkFrfDofX /** inputworkfrfdofx */ 
            );
            /**Returns  the input work frf dof y 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool InputWorkFrfDofY
            (
            );
            /**Sets  the input work frf dof y 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetInputWorkFrfDofY
            (
                bool inputWorkFrfDofY /** inputworkfrfdofy */ 
            );
            /**Returns  the input work frf dof z 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool InputWorkFrfDofZ
            (
            );
            /**Sets  the input work frf dof z 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetInputWorkFrfDofZ
            (
                bool inputWorkFrfDofZ /** inputworkfrfdofz */ 
            );
            /**Returns  the frequency range 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PlotFrfOptionsBuilder::FrequencyFrfRange FrequencyRange
            (
            );
            /**Sets  the frequency range 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetFrequencyRange
            (
                NXOpen::CAE::PlotFrfOptionsBuilder::FrequencyFrfRange frequencyRange /** frequencyrange */ 
            );
            /**Returns  the frac frequency range 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PlotFrfOptionsBuilder::FracFrequencyRange FrequencyFracRange
            (
            );
            /**Sets  the frac frequency range 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetFrequencyFracRange
            (
                NXOpen::CAE::PlotFrfOptionsBuilder::FracFrequencyRange frequencyRange /** frequencyrange */ 
            );
            /**Returns  the freq range lower limit 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FreqRangeLowerLimit
            (
            );
            /**Returns  the freq range upper limit 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FreqRangeUpperLimit
            (
            );
            /**Returns  the frac stretch lower limit 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double StretchFactorLowerLimit
            (
            );
            /**Sets  the frac stretch lower limit 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetStretchFactorLowerLimit
            (
                double lowerLimit /** lowerlimit */ 
            );
            /**Returns  the frac stretch upper limit 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double StretchFactorUpperLimit
            (
            );
            /**Sets  the frac stretch upper limit 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetStretchFactorUpperLimit
            (
                double upperLimit /** upperlimit */ 
            );
            /**Returns  the frac stretch increment 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double StretchFactorIncrement
            (
            );
            /**Sets  the frac stretch increment 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetStretchFactorIncrement
            (
                double increment /** increment */ 
            );
            /**Returns  the frac stretch factor 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double StretchFactor
            (
            );
            /**Sets  the frac stretch factor 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetStretchFactor
            (
                double factor /** factor */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
