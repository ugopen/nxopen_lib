#ifndef NXOpen_FEATURES_DEFORMDEFINITIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_DEFORMDEFINITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_DeformDefinitionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class DeformDefinitionBuilder;
    }
    class DisplayableObject;
    class Expression;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class _DeformDefinitionBuilderBuilder;
        class DeformDefinitionBuilderImpl;
        /**
                Used as a place holder for selected member features, expressions and external references for a deform
                definition feature record that is to be created.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateDeformDefinitionBuilder  NXOpen::Features::FeatureCollection::CreateDeformDefinitionBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  DeformDefinitionBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Specifies the way of providing input to expression during deform instantiation. */
            public: enum ExpressionType
            {
                ExpressionTypeExp/** Regular expression. Input can be any value. */,
                ExpressionTypeRange/** Input is within a range of values (integer or double)*/,
                ExpressionTypeOption/** Input is from a set of fixed values. */
            };

            /** Specifies type of range of input values when @link NXOpen::Features::DeformDefinitionBuilder::ExpressionType NXOpen::Features::DeformDefinitionBuilder::ExpressionType@endlink 
                        is @link NXOpen::Features::DeformDefinitionBuilder::ExpressionTypeRange NXOpen::Features::DeformDefinitionBuilder::ExpressionTypeRange@endlink .
                    */
            public: enum RangeType
            {
                RangeTypeInt/** Range of integer numbers. */,
                RangeTypeReal/** Range of fractional numbers. */
            };

             
            public:
            struct JaDeformDefinitionExpData
            {
                public: /** One of the @link NXOpen::Features::DeformDefinitionBuilder::ExpressionType NXOpen::Features::DeformDefinitionBuilder::ExpressionType@endlink  
                                                                values. */int Type;
                public: /** Tag of @link NXOpen::Expression NXOpen::Expression@endlink  object. */NXOpen::Expression * Exp;
                public: /** Name of expression. This will be displayed in UI. */NXString ExpName;
                public: /** Minimum value in range of input values for expression. */NXString LowEnd;
                public: /** Maximum value in range of input values for expression. */NXString HighEnd;
                public: /** One of the @link NXOpen::Features::DeformDefinitionBuilder::RangeType NXOpen::Features::DeformDefinitionBuilder::RangeType@endlink  
                                                                values when type is 
                                                                @link NXOpen::Features::DeformDefinitionBuilder::ExpressionTypeRange NXOpen::Features::DeformDefinitionBuilder::ExpressionTypeRange@endlink .*/int ScaleType;
                public: JaDeformDefinitionExpData() :
                    Type(),
                    Exp(),
                    ExpName(),
                    LowEnd(),
                    HighEnd(),
                    ScaleType()
                {
                }
                /** Constructor for the JaDeformDefinitionExpData struct. */ 
                public: JaDeformDefinitionExpData(int typeInitial /** One of the @link NXOpen::Features::DeformDefinitionBuilder::ExpressionType NXOpen::Features::DeformDefinitionBuilder::ExpressionType@endlink  
                                                                        values. */, 
                        NXOpen::Expression * expInitial /** Tag of @link NXOpen::Expression NXOpen::Expression@endlink  object. */, 
                        const NXString &expNameInitial /** Name of expression. This will be displayed in UI. */, 
                        const NXString &lowEndInitial /** Minimum value in range of input values for expression. */, 
                        const NXString &highEndInitial /** Maximum value in range of input values for expression. */, 
                        int scaleTypeInitial /** One of the @link NXOpen::Features::DeformDefinitionBuilder::RangeType NXOpen::Features::DeformDefinitionBuilder::RangeType@endlink  
                                                                        values when type is 
                                                                        @link NXOpen::Features::DeformDefinitionBuilder::ExpressionTypeRange NXOpen::Features::DeformDefinitionBuilder::ExpressionTypeRange@endlink .*/) :
                    Type(typeInitial),
                    Exp(expInitial),
                    ExpName(expNameInitial),
                    LowEnd(lowEndInitial),
                    HighEnd(highEndInitial),
                    ScaleType(scaleTypeInitial)
                {
                }
            };

            private: DeformDefinitionBuilderImpl * m_deformdefinitionbuilder_impl;
            private: friend class  _DeformDefinitionBuilderBuilder;
            protected: DeformDefinitionBuilder();
            public: ~DeformDefinitionBuilder();
            /** Sets the list of member feature records for deform definition feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMemberFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & memberFrecs /** memberfrecs */ 
            );
            /** Sets data of single expression for deform definition feature. For multiple expressions,
                        this needs to be called multiple times.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExpressionsData
            (
                const NXOpen::Features::DeformDefinitionBuilder::JaDeformDefinitionExpData & expData /** expdata */ ,
                std::vector<NXString> & defineValues /** definevalues */ 
            );
            /** Sets external references for deform definition feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExternalReferences
            (
                const std::vector<NXOpen::DisplayableObject *> & extRefs /** extrefs */ ,
                std::vector<NXString> & refPrompts /** refprompts */ 
            );
            /** Sets name for deform definition feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /** Sets name for deform definition feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetName
            (
                const char * name /** name */ 
            );
            /** Sets help url on deform definition feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHelpUrl
            (
                const NXString & helpUrl /** helpurl */ 
            );
            /** Sets help url on deform definition feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetHelpUrl
            (
                const char * helpUrl /** helpurl */ 
            );
            /** Sets flag which remembers whether existing deform definition feature can be deleted or not.
                        This value is false by default. If false and work part contains deform definition then during 
                        commit, error will be raised and commit operation will be aborted.
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeleteExistingDefinition
            (
                bool deleteExistingDef /** deleteexistingdef */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
