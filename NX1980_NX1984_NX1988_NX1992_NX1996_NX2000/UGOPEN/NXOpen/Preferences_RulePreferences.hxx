#ifndef NXOpen_PREFERENCES_RULEPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_RULEPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_RulePreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class RulePreferences;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        class RulePreferencesImpl;
        /** Provides methods for manipulating the Knowledge Fusion preferences in a session.  <br> To obtain an instance of this class, refer to @link NXOpen::Preferences::SessionPreferences  NXOpen::Preferences::SessionPreferences @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  RulePreferences
        {
             /** Math Function definition for converting base part temperature from relative to absolute. */
            public:
            struct AbsoluteTemperatureConversionDefinition
            {
                public: /** mathfunctionname */ NXString MathFunctionName;
                public: /** This may be optional, but the conversion needs to know up front if it is possible.
                                                    If false, then we can positively rule out some of the operations,
                                                    If true, then the DFA definition must be either Number or Any. */bool CanReturnUnits;
                public: /** Is one of the parameter inputs the optional "base" parameter.
                                                                  For Example: "ceiling", "floor", and "round".
                                                                  canReturnUnits must be true to set. */bool CanHaveOptionalBaseParameter;
                public: /** Is one of the parameter inputs the optional "useUnits" parameter, such as abs or mod? */bool CanHaveOptionalUseUnitsParameter;
                public: /** This is the actual location where the value (true/false, 1/0) may be found to identify if units are impacted.
                                                                      For example: "mod" would have a setting of 2.
                                                                      Default should be 1 (Zero based index) if used.
                                                                      canReturnUnits must be true to set. */int OptionLocation;
                public: /** The math function may return units, but that may be dependent on the parameters whether it actually does.
                                                                    For Example: "abs", "ceiling", "floor", "mod" and "round".
                                                                    canReturnUnits must be true AND (canHaveOptionalBaseParameter OR canHaveOptionalUseUnitsParameter) to set. */bool IsDependentOnOptionalParameter;
                public: /** This identifies the function so that the parameters will not be converted if the optional input is missing.
                                                                        For Example: "ceiling", "floor", "mod" and "round". */bool NotConvertingParameterWithNoOption;
                public: /** This identifies the function so that if the optional parameter is present, but if false/0, then the parameters will not be converted.
                                                                         For Example: "mod" would be true. */bool NotConvertingParameterIfOptionIsOff;
                public: /** This function does not need to be finally adjusted if the expression is unitless. */bool IsFinalAdjustmentNotNeccessaryIfUnitless;
                public: /** Once all the other checks have been performed, if none of them are applicable, then check
                                                                    this setting. If true, then don't allow the conversion to be processed for the parameter.
                                                                    This neccessarily implies that the KF/DFA function handles the conversion internally. */bool DontConvertParameterLastResort;
                public: /** For some functions, if the parameter is missing the temperature dimension, then add Celsius.
                                                                   Note: The following rules apply.
                                                                   1. There must be at least one (1) of the parameters that is alreay "marked" as a temperature.
                                                                   2. None of the parameters can have any other dimension than unitless or temperature.
                                                                   3. There must be at least one (or more) unitless parameters (otherwise no change is needed).
                                                                   Finally, this just adds "[C]" to any numeric parameters. */bool AddCelsiusToMissingParameters;
                public: AbsoluteTemperatureConversionDefinition() :
                    MathFunctionName(),
                    CanReturnUnits(),
                    CanHaveOptionalBaseParameter(),
                    CanHaveOptionalUseUnitsParameter(),
                    OptionLocation(),
                    IsDependentOnOptionalParameter(),
                    NotConvertingParameterWithNoOption(),
                    NotConvertingParameterIfOptionIsOff(),
                    IsFinalAdjustmentNotNeccessaryIfUnitless(),
                    DontConvertParameterLastResort(),
                    AddCelsiusToMissingParameters()
                {
                }
                /** Constructor for the AbsoluteTemperatureConversionDefinition struct. */ 
                public: AbsoluteTemperatureConversionDefinition(const NXString &mathFunctionNameInitial /** mathfunctionname */ , 
                        bool canReturnUnitsInitial /** This may be optional, but the conversion needs to know up front if it is possible.
                                                            If false, then we can positively rule out some of the operations,
                                                            If true, then the DFA definition must be either Number or Any. */, 
                        bool canHaveOptionalBaseParameterInitial /** Is one of the parameter inputs the optional "base" parameter.
                                                                          For Example: "ceiling", "floor", and "round".
                                                                          canReturnUnits must be true to set. */, 
                        bool canHaveOptionalUseUnitsParameterInitial /** Is one of the parameter inputs the optional "useUnits" parameter, such as abs or mod? */, 
                        int optionLocationInitial /** This is the actual location where the value (true/false, 1/0) may be found to identify if units are impacted.
                                                                              For example: "mod" would have a setting of 2.
                                                                              Default should be 1 (Zero based index) if used.
                                                                              canReturnUnits must be true to set. */, 
                        bool isDependentOnOptionalParameterInitial /** The math function may return units, but that may be dependent on the parameters whether it actually does.
                                                                            For Example: "abs", "ceiling", "floor", "mod" and "round".
                                                                            canReturnUnits must be true AND (canHaveOptionalBaseParameter OR canHaveOptionalUseUnitsParameter) to set. */, 
                        bool notConvertingParameterWithNoOptionInitial /** This identifies the function so that the parameters will not be converted if the optional input is missing.
                                                                                For Example: "ceiling", "floor", "mod" and "round". */, 
                        bool notConvertingParameterIfOptionIsOffInitial /** This identifies the function so that if the optional parameter is present, but if false/0, then the parameters will not be converted.
                                                                                 For Example: "mod" would be true. */, 
                        bool isFinalAdjustmentNotNeccessaryIfUnitlessInitial /** This function does not need to be finally adjusted if the expression is unitless. */, 
                        bool dontConvertParameterLastResortInitial /** Once all the other checks have been performed, if none of them are applicable, then check
                                                                            this setting. If true, then don't allow the conversion to be processed for the parameter.
                                                                            This neccessarily implies that the KF/DFA function handles the conversion internally. */, 
                        bool addCelsiusToMissingParametersInitial /** For some functions, if the parameter is missing the temperature dimension, then add Celsius.
                                                                           Note: The following rules apply.
                                                                           1. There must be at least one (1) of the parameters that is alreay "marked" as a temperature.
                                                                           2. None of the parameters can have any other dimension than unitless or temperature.
                                                                           3. There must be at least one (or more) unitless parameters (otherwise no change is needed).
                                                                           Finally, this just adds "[C]" to any numeric parameters. */) :
                    MathFunctionName(mathFunctionNameInitial),
                    CanReturnUnits(canReturnUnitsInitial),
                    CanHaveOptionalBaseParameter(canHaveOptionalBaseParameterInitial),
                    CanHaveOptionalUseUnitsParameter(canHaveOptionalUseUnitsParameterInitial),
                    OptionLocation(optionLocationInitial),
                    IsDependentOnOptionalParameter(isDependentOnOptionalParameterInitial),
                    NotConvertingParameterWithNoOption(notConvertingParameterWithNoOptionInitial),
                    NotConvertingParameterIfOptionIsOff(notConvertingParameterIfOptionIsOffInitial),
                    IsFinalAdjustmentNotNeccessaryIfUnitless(isFinalAdjustmentNotNeccessaryIfUnitlessInitial),
                    DontConvertParameterLastResort(dontConvertParameterLastResortInitial),
                    AddCelsiusToMissingParameters(addCelsiusToMissingParametersInitial)
                {
                }
            };

            private: RulePreferencesImpl * m_rulepreferences_impl;
            private: NXOpen::Preferences::SessionPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit RulePreferences(NXOpen::Preferences::SessionPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~RulePreferences();
            /** Get the search libraries for user classes.  @return  search libraries 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_kf_author ("UG/Knowledge Fusion - Author") OR pts_author ("Product Template Studio (Author)") */
            public: std::vector<NXString> GetSearchLibraries
            (
            );
            /** Set the search libraries for user classes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_kf_author ("UG/Knowledge Fusion - Author") OR pts_author ("Product Template Studio (Author)") */
            public: void SetSearchLibraries
            (
                std::vector<NXString> & userLibraries /** search libraries */
            );
            /** Initialize definition to defaults. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void InitializeDisplayToAbsoluteTemperatureFunctionDefinition
            (
                const NXOpen::Preferences::RulePreferences::AbsoluteTemperatureConversionDefinition & definition /** @link NXOpen::Preferences::RulePreferences::AbsoluteTemperatureConversionDefinition NXOpen::Preferences::RulePreferences::AbsoluteTemperatureConversionDefinition@endlink  */
            );
            /** Add a math function definition to control how the relative to obsolute temperature conversion is done. Must be done before opening the part. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void AddDisplayToAbsoluteTemperatureFunction
            (
                const NXOpen::Preferences::RulePreferences::AbsoluteTemperatureConversionDefinition & definition /** @link NXOpen::Preferences::RulePreferences::AbsoluteTemperatureConversionDefinition NXOpen::Preferences::RulePreferences::AbsoluteTemperatureConversionDefinition@endlink  */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
