#ifndef NXOpen_GEOMETRICANALYSIS_REFLECTIONANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_REFLECTIONANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_ReflectionAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_FaceAnalysisNormalsBuilder.hxx>
#include <NXOpen/GeometricUtilities_DisplayResolutionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class ReflectionAnalysisBuilder;
    }
    class Builder;
    namespace GeometricAnalysis
    {
        class FaceAnalysisNormalsBuilder;
    }
    namespace GeometricUtilities
    {
        class DisplayResolutionBuilder;
    }
    class SelectDisplayableObjectList;
    namespace GeometricAnalysis
    {
        class _ReflectionAnalysisBuilderBuilder;
        class ReflectionAnalysisBuilderImpl;
        /** Represents a Reflection Analysis builder.  <br> To create a new instance of this class, use @link NXOpen::GeometricAnalysis::AnalysisObjectCollectionEx::CreateReflectionAnalysisBuilder  NXOpen::GeometricAnalysis::AnalysisObjectCollectionEx::CreateReflectionAnalysisBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        DisplayResolution.AngleTolerance </term> <description> 
         
        15.0 </description> </item> 

        <item><term> 
         
        DisplayResolution.EdgeTolerance </term> <description> 
         
        0.005 </description> </item> 

        <item><term> 
         
        DisplayResolution.FaceTolerance </term> <description> 
         
        0.005 </description> </item> 

        <item><term> 
         
        DisplayResolution.Resolution </term> <description> 
         
        Standard </description> </item> 

        <item><term> 
         
        DisplayResolution.WidthTolerance </term> <description> 
         
        0.3 </description> </item> 

        <item><term> 
         
        FaceReflectivityScale </term> <description> 
         
        100 </description> </item> 

        <item><term> 
         
        ImagePosition </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        LineNumber </term> <description> 
         
        ThirtyTwo </description> </item> 

        <item><term> 
         
        ShowFacetEdge </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICANALYSISEXPORT  ReflectionAnalysisBuilder : public NXOpen::Builder
        {
            /** The types of images. */
            public: enum Types
            {
                TypesLineImages/** Line image. */,
                TypesSceneImages/** Scene image. */,
                TypesImageFromFile/** Image from file. */
            };

            /** The line image types. */
            public: enum LineImageTypes
            {
                LineImageTypesBlackLines/** Black lines. */,
                LineImageTypesBlackandWhiteLines/** Black and lines. */,
                LineImageTypesColoredLines/** Colored lines. */
            };

            /** The number of reflection lines. */
            public: enum NumberOfLinesOptions
            {
                NumberOfLinesOptionsOne/** 1 reflection line. */,
                NumberOfLinesOptionsTwo/** 2 reflection line. */,
                NumberOfLinesOptionsFour/** 4 reflection line. */,
                NumberOfLinesOptionsEight/** 8 reflection line. */,
                NumberOfLinesOptionsSixteen/** 16 reflection line. */,
                NumberOfLinesOptionsThirtyTwo/** 32 reflection line. */,
                NumberOfLinesOptionsSixtyFour/** 64 reflection line. */,
                NumberOfLinesOptionsOneTwoEight/** 128 reflection line. */,
                NumberOfLinesOptionsTwoFiveSix/** 256 reflection line. */
            };

            /** The reflection line orientation. */
            public: enum LineOrientationType
            {
                LineOrientationTypeHorizontal/** Horizontal. */,
                LineOrientationTypeVertical/** Vertical. */,
                LineOrientationTypeBoth/** Both horizontal and vertical. */
            };

            /** The reflection line thickness. */
            public: enum LineThicknessType
            {
                LineThicknessTypeThin/** Thin. */,
                LineThicknessTypeNormal/** Normal. */,
                LineThicknessTypeThick/** Thick. */
            };

            /** The reflection scene images. */
            public: enum SceneImageType
            {
                SceneImageTypeSimulatedHorizon/** Simulated horizon. */,
                SceneImageTypePhotoHorizon/** Photo horizon. */,
                SceneImageTypeSphericalRoom/** Spherical room. */,
                SceneImageTypeSphericalLightTubesRoom/** Spherical light tubes room. */,
                SceneImageTypeDaytimeHorizon/** Daytime horizon. */,
                SceneImageTypeMagentaSunset/** Magenta sunset. */,
                SceneImageTypeSphericalHorizon/** Spherical horizon. */,
                SceneImageTypeCylindricalRoom/** Cylindrical room. */,
                SceneImageTypeMonochromeHorizon/** Monochrome horizon. */,
                SceneImageTypeSmoothGrayScale/** Smooth gray scale. */,
                SceneImageTypeSharpGrayScale/** Sharp gray scale. */,
                SceneImageTypeSphericalTubes/** Spherical tubes. */
            };

            /** The type of image movement. */
            public: enum ImageMovementTypes
            {
                ImageMovementTypesHorizontal/** Move image in horizonal direction. */,
                ImageMovementTypesVertical/** Move image in vertical direction. */,
                ImageMovementTypesRotate/** Rotate image. */
            };

            /** The reflection image size option. */
            public: enum ImageSizeOption
            {
                ImageSizeOptionKeepCurrent/** Keep current size. */,
                ImageSizeOptionReduceScale/** Reduce scale size. */
            };

            private: ReflectionAnalysisBuilderImpl * m_reflectionanalysisbuilder_impl;
            private: friend class  _ReflectionAnalysisBuilderBuilder;
            protected: ReflectionAnalysisBuilder();
            public: ~ReflectionAnalysisBuilder();
            /**Returns  the face to apply reflection analysis. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * Faces
            (
            );
            /**Returns  the image type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::LineImageTypes LineImageType
            (
            );
            /**Sets  the image type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLineImageType
            (
                NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::LineImageTypes lineImageType /** lineimagetype */ 
            );
            /**Returns  the reflection line number. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::NumberOfLinesOptions LineNumber
            (
            );
            /**Sets  the reflection line number. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLineNumber
            (
                NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::NumberOfLinesOptions lineNumber /** linenumber */ 
            );
            /**Returns  the reflection line orientation. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::LineOrientationType LineOrientation
            (
            );
            /**Sets  the reflection line orientation. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLineOrientation
            (
                NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::LineOrientationType lineOrientation /** lineorientation */ 
            );
            /**Returns  the reflection line thickness. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::LineThicknessType LineThickness
            (
            );
            /**Sets  the reflection line thickness. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLineThickness
            (
                NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::LineThicknessType lineThickness /** linethickness */ 
            );
            /**Returns  the scene image option. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::SceneImageType SceneImageOption
            (
            );
            /**Sets  the scene image option. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSceneImageOption
            (
                NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::SceneImageType sceneImageOption /** sceneimageoption */ 
            );
            /**Returns  the file browser. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FileName
            (
            );
            /**Sets  the file browser. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFileName
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the file browser. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetFileName
            (
                const char * filename /** filename */ 
            );
            /**Returns  the orientation to move reflection lines. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::ImageMovementTypes ImageMovementType
            (
            );
            /**Sets  the orientation to move reflection lines. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImageMovementType
            (
                NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::ImageMovementTypes imageMovementType /** imagemovementtype */ 
            );
            /**Returns  the moving image scale. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int ImagePosition
            (
            );
            /**Sets  the moving image scale. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImagePosition
            (
                int imagePosition /** imageposition */ 
            );
            /**Returns  the reflection analysis normals. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceAnalysisNormalsBuilder * Normals
            (
            );
            /**Returns  the face reflectivity scale from 0 to 100. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int FaceReflectivityScale
            (
            );
            /**Sets  the face reflectivity scale from 0 to 100. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFaceReflectivityScale
            (
                int faceReflectivityScale /** facereflectivityscale */ 
            );
            /**Returns  the image size setting. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::ImageSizeOption ImageSizeSetting
            (
            );
            /**Sets  the image size setting. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImageSizeSetting
            (
                NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::ImageSizeOption imageSizeSetting /** imagesizesetting */ 
            );
            /**Returns  the display resolution. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DisplayResolutionBuilder * DisplayResolution
            (
            );
            /**Returns  the flag indicating if facet edges should be shown. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowFacetEdge
            (
            );
            /**Sets  the flag indicating if facet edges should be shown. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowFacetEdge
            (
                bool showFacetEdge /** showfacetedge */ 
            );
            /**Returns  the reflection analysis type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::Types Type
            (
            );
            /**Sets  the reflection analysis type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::GeometricAnalysis::ReflectionAnalysisBuilder::Types type /** type */ 
            );
            /** Start reflection analysis. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void StartReflectionAnalysis
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
