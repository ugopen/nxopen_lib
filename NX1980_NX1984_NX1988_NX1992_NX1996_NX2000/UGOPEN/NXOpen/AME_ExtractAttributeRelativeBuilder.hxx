#ifndef NXOpen_AME_EXTRACTATTRIBUTERELATIVEBUILDER_HXX_INCLUDED
#define NXOpen_AME_EXTRACTATTRIBUTERELATIVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ExtractAttributeRelativeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_SelectionBaseDefinitionBuilder.hxx>
#include <NXOpen/AttributePropertiesBaseBuilder.hxx>
#include <NXOpen/AME_ExtractAttributeBaseBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ExtractAttributeRelativeBuilder;
    }
    namespace AME
    {
        class ExtractAttributeBaseBuilder;
    }
    namespace AME
    {
        class SelectionBaseDefinitionBuilder;
    }
    class Expression;
    class NXObject;
    class Part;
    namespace AME
    {
        class _ExtractAttributeRelativeBuilderBuilder;
        class ExtractAttributeRelativeBuilderImpl;

        /// \cond NX_NO_DOC 
        /** Create a extract attribute   <br> This object does not need a creator.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ExtractAttributeRelativeBuilder : public NXOpen::AME::ExtractAttributeBaseBuilder
        {
            /** Choices for position to be either begin, end or defined by index */

            /// \cond NX_NO_DOC 
            public: enum ModeValue
            {
                ModeValueSelectProperty/** select property */ ,
                ModeValueManualInput/** manual input */ 
            };


            /// \endcond 
            private: ExtractAttributeRelativeBuilderImpl * m_extractattributerelativebuilder_impl;
            private: friend class  _ExtractAttributeRelativeBuilderBuilder;
            protected: ExtractAttributeRelativeBuilder();
            public: ~ExtractAttributeRelativeBuilder();

            /// \cond NX_NO_DOC 
            /** Creates or gets attribute proxy objects which hold proxy attributes of EngObject 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXOpen::NXObject *> CreateOrGetAttributeproxyObjects
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the expression for the relative formula
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Expression * Expression
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the expression for the relative formula
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetExpression
            (
                NXOpen::Expression * exp /** exp */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the object found by the relative formula
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * ObjectFromExp
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the category name given by the user 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString CategoryName
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the category name given by the user 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetCategoryName
            (
                const NXString & categoryName /** categoryname */ 
            );
            /**Sets  the category name given by the user 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetCategoryName
            (
                const char * categoryName /** categoryname */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the property name given by the user 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString PropertyName
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the property name given by the user 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPropertyName
            (
                const NXString & propertyName /** propertyname */ 
            );
            /**Sets  the property name given by the user 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPropertyName
            (
                const char * propertyName /** propertyname */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the input mode 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ExtractAttributeRelativeBuilder::ModeValue Mode
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the input mode 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetMode
            (
                NXOpen::AME::ExtractAttributeRelativeBuilder::ModeValue modeType /** modetype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the selection base definition builder
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectionBaseDefinitionBuilder * SelectBaseDefinition
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the property type given by the user 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions PropertyDataType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the property type given by the user 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPropertyDataType
            (
                NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions propertyDataType /** propertydatatype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the source expression part. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Part * GetSourceExpressionPart
            (
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
