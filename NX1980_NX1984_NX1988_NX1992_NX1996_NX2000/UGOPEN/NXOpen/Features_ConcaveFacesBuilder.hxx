#ifndef NXOpen_FEATURES_CONCAVEFACESBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_CONCAVEFACESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ConcaveFacesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class ConcaveFacesBuilder;
    }
    class Direction;
    class Expression;
    class Face;
    namespace Features
    {
        class FeatureBuilder;
    }
    class NXColor;
    class Point;
    class ScCollector;
    namespace Features
    {
        class _ConcaveFacesBuilderBuilder;
        class ConcaveFacesBuilderImpl;
        /**
            Represents a Concave Faces builder. These are faces which are concave with respect to the draw direction and whose 
            maximum radii is within the specified range.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateConcaveFacesBuilder  NXOpen::Features::FeatureCollection::CreateConcaveFacesBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Lower.Value </term> <description> 
         
        3 (millimeters part), 0.118 (inches part) </description> </item> 

        <item><term> 
         
        SamplePoints </term> <description> 
         
        4 </description> </item> 

        <item><term> 
         
        Upper.Value </term> <description> 
         
        6 (millimeters part), 0.236 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  ConcaveFacesBuilder : public NXOpen::Features::FeatureBuilder
        {
            private: ConcaveFacesBuilderImpl * m_concavefacesbuilder_impl;
            private: friend class  _ConcaveFacesBuilderBuilder;
            protected: ConcaveFacesBuilder();
            public: ~ConcaveFacesBuilder();
            /**Returns  the collection of all the possible faces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * Faces
            (
            );
            /**Returns  the surface normal vector toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool UseSurfaceNormal
            (
            );
            /**Sets  the surface normal vector toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUseSurfaceNormal
            (
                bool useSuraceNormal /** usesuracenormal */ 
            );
            /**Returns  the reverse normal direction switch 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseNormalDirection
            (
            );
            /**Sets  the reverse normal direction switch 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetReverseNormalDirection
            (
                bool reverseNormalDirection /** reversenormaldirection */ 
            );
            /**Returns  the vector representing the draw direction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DrawDirection
            (
            );
            /**Sets  the vector representing the draw direction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDrawDirection
            (
                NXOpen::Direction * drawDirection /** drawdirection */ 
            );
            /**Returns  the lower limit of the maximum concave range. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Lower
            (
            );
            /**Returns  the upper limit of the maximum concave range. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Upper
            (
            );
            /**Returns  the number of sample points to apply to the analysis. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int SamplePoints
            (
            );
            /**Sets  the number of sample points to apply to the analysis. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSamplePoints
            (
                int samplePoints /** samplepoints */ 
            );
            /**Returns  the title if the face attribute. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString AttributeTitle
            (
            );
            /**Sets  the title if the face attribute. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAttributeTitle
            (
                const NXString & attributeTitle /** attributetitle */ 
            );
            /**Sets  the title if the face attribute. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetAttributeTitle
            (
                const char * attributeTitle /** attributetitle */ 
            );
            /**Returns  the value of the face attribute title. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString AttributeValue
            (
            );
            /**Sets  the value of the face attribute title. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAttributeValue
            (
                const NXString & attributeValue /** attributevalue */ 
            );
            /**Sets  the value of the face attribute title. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetAttributeValue
            (
                const char * attributeValue /** attributevalue */ 
            );
            /**Returns  the color to be applied to the face. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * AttributeColor
            (
            );
            /**Sets  the color to be applied to the face. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAttributeColor
            (
                NXOpen::NXColor * attributeColor /** attributecolor */ 
            );
            /**Returns  the distance tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the group interval value. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double GroupInterval
            (
            );
            /**Sets  the group interval value. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetGroupInterval
            (
                double interval /** interval */ 
            );
            /** The radius values at the point selected on a targeted face, the maximum and minimum radius of the targeted face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CalculatePointCurvature
            (
                NXOpen::Face * faceId /** the targeted face */,
                const NXOpen::Point3d & point /** the point selected on targeted face */,
                double* radius /** the value at point selected */,
                double* minRadius /** the minimum value of targeted face */,
                double* maxRadius /** the maximum value of targeted face */
            );
            /** The targeted faces updated according to the given radius range, number of sample point and group interval changing. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateRadiusFaces
            (
            );
            /** The PMI as a location label created or edited at the point selected on a face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateLocationLabel
            (
                bool edit /** If true edit PMI, false create PMI  */,
                NXOpen::Point * point /** the point selected on targeted face */
            );
            /** Set the color ID for the specified face in tree list
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFaceAttributeColor
            (
                NXOpen::NXColor * attributeColor /** attributecolor */ 
            );
            /** Update selected faces color. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UpdateSelectedFacesColor
            (
            );
            /** Set face indexes in tree list. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTreeSelectedIndex
            (
                const std::vector<int> & indexArray /** indexarray */ 
            );
            /** Set face group attribute title. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFaceGroupAttributeTitle
            (
                const NXString & grpAttributeTitle /** grpattributetitle */ 
            );
            /** Set face group attribute title. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetFaceGroupAttributeTitle
            (
                const char * grpAttributeTitle /** grpattributetitle */ 
            );
            /** Set face group attribute value. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFaceGroupAttributeValue
            (
                const NXString & grpAttributeValue /** grpattributevalue */ 
            );
            /** Set face group attribute value. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetFaceGroupAttributeValue
            (
                const char * grpAttributeValue /** grpattributevalue */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
