#ifndef NXOpen_FEATURES_FITCURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_FITCURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FitCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_GeometricConstraintDataManager.hxx>
#include <NXOpen/GeometricUtilities_CurveExtensionBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class FitCurveBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class GeometricConstraintDataManager;
    }
    namespace GeometricUtilities
    {
        class CurveExtensionBuilder;
    }
    class Point;
    class SelectSpline;
    class SelectTaggedObjectList;
    namespace Features
    {
        class _FitCurveBuilderBuilder;
        class FitCurveBuilderImpl;
        /**
            Represents a @link NXOpen::Features::FitCurve NXOpen::Features::FitCurve@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateFitCurveBuilder  NXOpen::Features::FeatureCollection::CreateFitCurveBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Extender.EndExtensionOption </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        Extender.EndValue.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        Extender.StartExtensionOption </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        Extender.StartValue.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        IsClosedCurve </term> <description> 
         
        true </description> </item> 

        <item><term> 
         
        ProjectionDirectionOption </term> <description> 
         
        Normal </description> </item> 

        <item><term> 
         
        Radius.Value </term> <description> 
         
        50.0 (millimeters part), 2.0 (inches part) </description> </item> 

        <item><term> 
         
        RejectionThreshold.Value </term> <description> 
         
        10.0 (millimeters part), 0.5 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  FitCurveBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Fitting types */
            public: enum Types
            {
                TypesFitSpline/** Fits a spline */,
                TypesFitLine/** Fits a line */,
                TypesFitCircle/** Fits an arc or a circle */,
                TypesFitEllipse/** Fits an ellipse */
            };

            /** Fitting target types */
            public: enum TargetSourceTypes
            {
                TargetSourceTypesInfer/** Infer target from selection*/,
                TargetSourceTypesSpecifiedPoints/** Specified points */,
                TargetSourceTypesChainedPoints/** Chain using one or two points */,
                TargetSourceTypesCurve/** Curve */,
                TargetSourceTypesFace/** Face */,
                TargetSourceTypesFacetBody/** Facet body */
            };

            /** Auxiliary curve projection direction options */
            public: enum ProjectionDirectionOptions
            {
                ProjectionDirectionOptionsXc/** WCS X axis */,
                ProjectionDirectionOptionsYc/** WCS Y axis */,
                ProjectionDirectionOptionsZc/** WCS Z axis */,
                ProjectionDirectionOptionsNormal/** Face normal */,
                ProjectionDirectionOptionsView/** View */,
                ProjectionDirectionOptionsVector/** Vector */
            };

            /** Fitting parameters options */
            public: enum FittingParametersOptions
            {
                FittingParametersOptionsDegreeAndSegments/** Fit to degree and segments */,
                FittingParametersOptionsDegreeAndTolerance/** Fit to degree and tolerance */,
                FittingParametersOptionsTemplateCurve/** Fit to template spline */
            };

            private: FitCurveBuilderImpl * m_fitcurvebuilder_impl;
            private: friend class  _FitCurveBuilderBuilder;
            protected: FitCurveBuilder();
            public: ~FitCurveBuilder();
            /**Returns  the type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FitCurveBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::FitCurveBuilder::Types type /** type */ 
            );
            /**Returns  the target type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FitCurveBuilder::TargetSourceTypes TargetSourceType
            (
            );
            /**Sets  the target type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetSourceType
            (
                NXOpen::Features::FitCurveBuilder::TargetSourceTypes targetSourceType /** targetsourcetype */ 
            );
            /**Returns  the target objects. Inputs to this command can be convergent objects. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * Target
            (
            );
            /**Returns  the flag indicating if all points in the part can be used for chaining 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CanUseAllPointsInPart
            (
            );
            /**Sets  the flag indicating if all points in the part can be used for chaining 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCanUseAllPointsInPart
            (
                bool canUseAllPointsInPart /** canuseallpointsinpart */ 
            );
            /**Returns  the constraint manager 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GeometricConstraintDataManager * ConstraintManager
            (
            );
            /**Returns  the projection direction option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FitCurveBuilder::ProjectionDirectionOptions ProjectionDirectionOption
            (
            );
            /**Sets  the projection direction option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProjectionDirectionOption
            (
                NXOpen::Features::FitCurveBuilder::ProjectionDirectionOptions projectionDirectionOption /** projectiondirectionoption */ 
            );
            /**Returns  the projection direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ProjectionDirection
            (
            );
            /**Sets  the projection direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProjectionDirection
            (
                NXOpen::Direction * projectionDirection /** projectiondirection */ 
            );
            /**Returns  the has radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool HasRadius
            (
            );
            /**Sets  the has radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHasRadius
            (
                bool hasRadius /** hasradius */ 
            );
            /**Returns  the circle radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Radius
            (
            );
            /**Returns  the flag indicating if a full circle or ellipse is to be fitted 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsClosedCurve
            (
            );
            /**Sets  the flag indicating if a full circle or ellipse is to be fitted 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetClosedCurve
            (
                bool isClosed /** isclosed */ 
            );
            /**Returns  the fitting parameters 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FitCurveBuilder::FittingParametersOptions FittingParameters
            (
            );
            /**Sets  the fitting parameters 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFittingParameters
            (
                NXOpen::Features::FitCurveBuilder::FittingParametersOptions fittingParameters /** fittingparameters */ 
            );
            /**Returns  the degree 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int Degree
            (
            );
            /**Sets  the degree 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDegree
            (
                int degree /** degree */ 
            );
            /**Returns  the segments 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int Segments
            (
            );
            /**Sets  the segments 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSegments
            (
                int segments /** segments */ 
            );
            /**Returns  the tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the template curve 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectSpline * TemplateCurve
            (
            );
            /**Returns  the flag indicating if template curve should be kept selected 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CanKeepTemplateSelected
            (
            );
            /**Sets  the flag indicating if template curve should be kept selected 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCanKeepTemplateSelected
            (
                bool canKeepTemplateSelected /** cankeeptemplateselected */ 
            );
            /**Returns  the flag indicating if a closed b-spline is to be fitted 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsClosedBSpline
            (
            );
            /**Sets  the flag indicating if a closed b-spline is to be fitted 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetClosedBSpline
            (
                bool isClosed /** isclosed */ 
            );
            /**Returns  the flag indicating if uniform segments should be created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool HasUniformSegments
            (
            );
            /**Sets  the flag indicating if uniform segments should be created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHasUniformSegments
            (
                bool hasUniformSegments /** hasuniformsegments */ 
            );
            /**Returns  the flag indicating if fitted curve direction should be reversed 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool HasReversedDirection
            (
            );
            /**Sets  the flag indicating if fitted curve direction should be reversed 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHasReversedDirection
            (
                bool hasReversedDirection /** hasreverseddirection */ 
            );
            /**Returns  the extension option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveExtensionBuilder * Extender
            (
            );
            /**Returns  the flag indicating if points beyond a threshold value should be ignored during fitting 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CanRejectPointsAutomatically
            (
            );
            /**Sets  the flag indicating if points beyond a threshold value should be ignored during fitting 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCanRejectPointsAutomatically
            (
                bool rejectPoints /** rejectpoints */ 
            );
            /**Returns  the rejection threshold 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RejectionThreshold
            (
            );
            /**Returns  the flag indicating if a feature should be created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsAssociative
            (
            );
            /**Sets  the flag indicating if a feature should be created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /** Chains all the points in work part based on one selected point and evaluates the curve.
                        Operation is valid for @link NXOpen::Features::FitCurveBuilder::TargetSourceTypesInfer NXOpen::Features::FitCurveBuilder::TargetSourceTypesInfer@endlink  only. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ChainAllPoints
            (
            );
            /** Returns the number of target points that are finally used for fitting 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int GetFinalTargetPointsSize
            (
            );
            /** Returns the target point that are finally used for fitting  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Point * GetFinalTargetPoint
            (
                int index /** index */ 
            );
            /** In case of point targets, makes a target point a positional constraint. In case of other targets, makes
                        one of the specified points a positional constraint 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void MakeConstraint
            (
                NXOpen::Point * point /** One of the original target points to make a constraint of */
            );
            /** Makes existing positional constraint a free target point  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveConstraint
            (
                NXOpen::Point * point /** One of the original target points or one of the constraint manager points to remove a constraint of */
            );
            /** Deletes target points  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void DeleteTargetPoints
            (
                const std::vector<NXOpen::Point *> & points /** One of the original target points or one of the constraint manager points to remove a constraint of */
            );
            /** Evaluates the curve 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void Evaluate
            (
            );
            /** Updates target selection by replacing original point by edited point.
                        When a target point is edited by dragging, the originally selected target
                        point gets replaced by another point representing edited location. Thus
                        it is no longer necessary for original point to remain selected.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UpdateTargetSelectionOnPointEditing
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
