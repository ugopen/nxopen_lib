#ifndef NXOpen_DISPLAY_GRIDCOLLECTION_HXX_INCLUDED
#define NXOpen_DISPLAY_GRIDCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_GridCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/Display_DatumPlaneGrid.hxx>
#include <NXOpen/Display_DatumPlaneGridBuilder.hxx>
#include <NXOpen/Display_PlanarShipGrid.hxx>
#include <NXOpen/Display_PlanarShipGridBuilder.hxx>
#include <NXOpen/Display_PlaneGrid.hxx>
#include <NXOpen/Display_PlaneGridBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_display_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Display
    {
        class GridCollection;
    }
    class BasePart;
    namespace Display
    {
        class Grid;
    }
    class DatumPlane;
    namespace Display
    {
        class DatumPlaneGrid;
    }
    namespace Display
    {
        class DatumPlaneGridBuilder;
    }
    namespace Display
    {
        class PlanarShipGrid;
    }
    namespace Display
    {
        class PlanarShipGridBuilder;
    }
    namespace Display
    {
        class PlaneGrid;
    }
    namespace Display
    {
        class PlaneGridBuilder;
    }
    namespace Display
    {
        class GridCollectionImpl;
        /** Represents a collection of plane grid objects  <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_DISPLAYEXPORT  GridCollection : public NXOpen::TaggedObjectCollection
        {
            private: GridCollectionImpl * m_gridcollection_impl;
            private: NXOpen::BasePart* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit GridCollection(NXOpen::BasePart *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~GridCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Display::GridCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Display::Grid *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Display::GridCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_DISPLAYEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_DISPLAYEXPORT  void next();
                NXOpen::Display::GridCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a @link NXOpen::Display::PlaneGridBuilder NXOpen::Display::PlaneGridBuilder@endlink  object
                        used to build a bounded grid on a plane.
                        
                        If the grid is not NULL, the planar grid object will be edited.
                      @return  plane grid builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::PlaneGridBuilder * CreatePlaneGridBuilder
            (
                NXOpen::Display::PlaneGrid * grid /** If grid is not NULL, 
                                                                                                  then this object will be 
                                                                                                  edited */
            );
            /** Creates a @link NXOpen::Display::DatumPlaneGridBuilder NXOpen::Display::DatumPlaneGridBuilder@endlink  object
                        used to edit the supplied datum plane grid.
                      @return  datum plane grid builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::DatumPlaneGridBuilder * CreateDatumPlaneGridBuilder
            (
                NXOpen::Display::DatumPlaneGrid * grid /** If grid is not NULL, 
                                                                                                            then this object will be 
                                                                                                            edited */
            );
            /** Creates a @link NXOpen::Display::DatumPlaneGridBuilder NXOpen::Display::DatumPlaneGridBuilder@endlink  object 
                        used to build datum plane grids based on the supplied datum plane list.
                      @return  datum plane grid builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::DatumPlaneGridBuilder * CreateDatumPlaneGridBuilder
            (
                const std::vector<NXOpen::DatumPlane *> & datumPlanes /** datum plane list */
            );
            /** Finds the @link NXOpen::Display::Grid NXOpen::Display::Grid@endlink  with the given identifier  
                        as recorded in a journal. An object may not return the same value as 
                        its JournalIdentifier in different versions of the software. However  
                        newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In 
                        general,this method should not be used in handwritten code and exists 
                        to support record and playback of journals.
                         <br> 
                        An exception will be thrown if no object can be found with the given 
                        journal identifier. 
                         <br> 
                     @return  Grid found 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::Grid * FindObject
            (
                const NXString & journalIdentifier /** Identifier to be found */
            );
            /** Finds the @link NXOpen::Display::Grid NXOpen::Display::Grid@endlink  with the given identifier  
                        as recorded in a journal. An object may not return the same value as 
                        its JournalIdentifier in different versions of the software. However  
                        newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In 
                        general,this method should not be used in handwritten code and exists 
                        to support record and playback of journals.
                         <br> 
                        An exception will be thrown if no object can be found with the given 
                        journal identifier. 
                         <br> 
                     @return  Grid found 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Display::Grid * FindObject
            (
                const char * journalIdentifier /** Identifier to be found */
            );
            /** Finds the datum grid associated with the specified datum plane.
                      @return  Datum plane grid. NULL indicates no grid is associated
                                with the datum plane. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::DatumPlaneGrid * GetDatumPlaneGrid
            (
                NXOpen::DatumPlane * datumPlane /** datum plane */
            );
            /** Creates a @link NXOpen::Display::PlanarShipGridBuilder NXOpen::Display::PlanarShipGridBuilder@endlink  object
                        used to build a planar ship grid on a datum plane.

                        If the grid is not NULL, the planar ship grid object will be edited.
                      @return  planar ship grid builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Display::PlanarShipGridBuilder * CreatePlanarShipGridBuilder
            (
                NXOpen::Display::PlanarShipGrid * grid /** If grid is not NULL,
                                                                                                                         this object will be edited */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
