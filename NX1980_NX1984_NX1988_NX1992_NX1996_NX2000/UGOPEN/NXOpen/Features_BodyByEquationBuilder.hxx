#ifndef NXOpen_FEATURES_BODYBYEQUATIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_BODYBYEQUATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_BodyByEquationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class BodyByEquationBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class _BodyByEquationBuilderBuilder;
        class BodyByEquationBuilderImpl;
        /**
            Represents a @link NXOpen::Features::BodyByEquation NXOpen::Features::BodyByEquation@endlink  builder.
            This feature is dependent on either a Symbolica or Maple spreadsheet
            to drive the mathematical representation of the feature body.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateBodyByEquationBuilder  NXOpen::Features::FeatureCollection::CreateBodyByEquationBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Associative </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        StlFileUnits </term> <description> 
         
        Millimeters </description> </item> 

        </list> 

         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  BodyByEquationBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** The option to specify where the NX Maple or Maple worksheet exists. */
            public: enum LocationTypes
            {
                LocationTypesOperatingSystem/** Worksheet is on the native OS file system. */,
                LocationTypesTeamcenter/** Worksheet is in Teamcenter. */,
                LocationTypesEmbedded/** Worksheet is embedded in part. */
            };

            /** The option to specify the size of an STL unit (e.g. selecting Millimeters means that every STL unit is represented as 1 mm within the NX work part).
                    The unit the work part is in does not matter.*/
            public: enum StlFileUnitTypes
            {
                StlFileUnitTypesMeters/** STL unit is meters. */,
                StlFileUnitTypesMillimeters/** STL unit is millimeters. */,
                StlFileUnitTypesInches/** STL unit is inches. */
            };

            private: BodyByEquationBuilderImpl * m_bodybyequationbuilder_impl;
            private: friend class  _BodyByEquationBuilderBuilder;
            protected: BodyByEquationBuilder();
            public: ~BodyByEquationBuilder();
            /**Returns  the source location of the Symbolica or Maple worksheet.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::BodyByEquationBuilder::LocationTypes Location
            (
            );
            /**Sets  the source location of the Symbolica or Maple worksheet.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLocation
            (
                NXOpen::Features::BodyByEquationBuilder::LocationTypes location /** location */ 
            );
            /**Returns  the NX Maple or Maple file.  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FileBrowser
            (
            );
            /**Sets  the NX Maple or Maple file.  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFileBrowser
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the NX Maple or Maple file.  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetFileBrowser
            (
                const char * filename /** filename */ 
            );
            /**Returns  the native OS file browser 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NativeFileBrowser
            (
            );
            /**Sets  the native OS file browser 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNativeFileBrowser
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the native OS file browser 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetNativeFileBrowser
            (
                const char * filename /** filename */ 
            );
            /**Returns  the currently selected embedded worksheet index. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int EmbeddedWorksheet
            (
            );
            /**Sets  the currently selected embedded worksheet index. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEmbeddedWorksheet
            (
                int embeddedWorksheet /** embeddedworksheet */ 
            );
            /**Returns  the option to embed worksheet in part 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool EmbedWorksheet
            (
            );
            /**Sets  the option to embed worksheet in part 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEmbedWorksheet
            (
                bool embedWorksheet /** embedworksheet */ 
            );
            /**Returns  the NX Maple or Maple plot3D variable index to export that defines the surface to be used in this feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int PlotVariableName
            (
            );
            /**Sets  the NX Maple or Maple plot3D variable index to export that defines the surface to be used in this feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPlotVariableName
            (
                int plotVariableName /** plotvariablename */ 
            );
            /**Returns  the option to identify if the feature should associatively update. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the option to identify if the feature should associatively update. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the option to specify the size of an STL unit. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::BodyByEquationBuilder::StlFileUnitTypes StlFileUnits
            (
            );
            /**Sets  the option to specify the size of an STL unit. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStlFileUnits
            (
                NXOpen::Features::BodyByEquationBuilder::StlFileUnitTypes stlFileUnits /** stlfileunits */ 
            );
            /**Returns  the number of input expressions 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int Inputs
            (
            );
            /**Sets  the number of input expressions 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetInputs
            (
                int numInputExpressions /** num input expressions */ 
            );
            /** The array of expressions  @return  array of expressions 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Expression *> GetExpressions
            (
            );
            /** Set the expressions in the Math Interface Builder 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExpressions
            (
                const std::vector<NXOpen::Expression *> & expressions /** array of expressions */
            );
            /** The array of math names  @return  array of names 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetMathNames
            (
            );
            /** Set the math names corresponding to expressions in the Math Interface Builder
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMathNames
            (
                const std::vector<NXString> & names /** array of names */
            );
            /**Returns  the name of the selected sheet inside of a maple workbook file 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Worksheet
            (
            );
            /**Sets  the name of the selected sheet inside of a maple workbook file 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetWorksheet
            (
                const NXString & sheetName /** sheetname */ 
            );
            /**Sets  the name of the selected sheet inside of a maple workbook file 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetWorksheet
            (
                const char * sheetName /** sheetname */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
