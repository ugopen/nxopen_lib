#ifndef NXOpen_CLOUDDM_DATAMANAGER_HXX_INCLUDED
#define NXOpen_CLOUDDM_DATAMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CloudDM_DataManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CloudDM_PartOperationBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_clouddm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CloudDM
    {
        class DataManager;
    }
    class Session;
    namespace CloudDM
    {
        class FileManagement;
    }
    namespace CloudDM
    {
        class PartOperationBuilder;
    }
    namespace CloudDM
    {
        class PartUtils;
    }
    class NXObject;
    namespace CloudDM
    {
        class DataManagerImpl;

        /// \cond NX_NO_DOC 
        /**  @brief  Represents a manager of cloud objects  

          <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_CLOUDDMEXPORT  DataManager
        {

            /// \cond NX_NO_DOC 
             /** Represents the container information */
            public:
            struct ContainerInfo
            {
                public: /** name */ NXString Name;
                public: /** description */ NXString Description;
                public: ContainerInfo() :
                    Name(),
                    Description()
                {
                }
                /** Constructor for the ContainerInfo struct. */ 
                public: ContainerInfo(const NXString &nameInitial /** name */ , 
                        const NXString &descriptionInitial /** description */ ) :
                    Name(nameInitial),
                    Description(descriptionInitial)
                {
                }
            };


            /// \endcond 

            /// \cond NX_NO_DOC 
             /** Represents the input for the Import Parts method */
            public:
            struct ImportPartInput
            {
                public: /** location of file to upload */NXString FilePath;
                public: /** directory path from the root container to place the part */NXString RelativeFilePath;
                public: ImportPartInput() :
                    FilePath(),
                    RelativeFilePath()
                {
                }
                /** Constructor for the ImportPartInput struct. */ 
                public: ImportPartInput(const NXString &filePathInitial /** location of file to upload */, 
                        const NXString &relativeFilePathInitial /** directory path from the root container to place the part */) :
                    FilePath(filePathInitial),
                    RelativeFilePath(relativeFilePathInitial)
                {
                }
            };


            /// \endcond 

            /// \cond NX_NO_DOC 
             /** Holds the newly created design information of the part imported */
            public:
            struct ImportPartDesign
            {
                public: /** inputpart */ NXString InputPart;
                public: /** revisionurn */ NXString RevisionUrn;
                public: /** downloadticket */ NXString DownloadTicket;
                public: ImportPartDesign() :
                    InputPart(),
                    RevisionUrn(),
                    DownloadTicket()
                {
                }
                /** Constructor for the ImportPartDesign struct. */ 
                public: ImportPartDesign(const NXString &inputPartInitial /** inputpart */ , 
                        const NXString &revisionUrnInitial /** revisionurn */ , 
                        const NXString &downloadTicketInitial /** downloadticket */ ) :
                    InputPart(inputPartInitial),
                    RevisionUrn(revisionUrnInitial),
                    DownloadTicket(downloadTicketInitial)
                {
                }
            };


            /// \endcond 
            private: DataManagerImpl * m_datamanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit DataManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static DataManager* theDataManager;
            /** Returns the DataManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static DataManager* GetDataManager(NXOpen::Session *owner);
            public: ~DataManager();

            /// \cond NX_NO_DOC 
            /**
                       Returns the checkedout status (checkedout/non checkedout) of all the Cloud objects open in NX.
                    
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_tcshare ("Cloud File Management") */
            public: void GetCheckedoutStatusOfAllObjectsInSession
            (
                std::vector<NXOpen::NXObject *> & checkedOutObjects /** Array of NXObjects which are open in session and checked out */,
                std::vector<NXOpen::NXObject *> & uncheckedOutObjects /** Array of NXObjects which are open in session but not checked-out */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a new @link NXOpen::CloudDM::PartOperationBuilder NXOpen::CloudDM::PartOperationBuilder@endlink  object.
                        Execution of this API is controlled by Feature Toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CloudDM::PartOperationBuilder * CreatePartOperationBuilder
            (
                NXOpen::CloudDM::PartOperationBuilder::OperationType operation /** operation */ 
            );

            /// \endcond 


            /** Returns the @link NXOpen::CloudDM::FileManagement NXOpen::CloudDM::FileManagement@endlink  belonging to cloud manager 
             <br>  Created in NX1872.0.0.  <br>  
            */
            public: NXOpen::CloudDM::FileManagement *FileManagement();
            /** Returns the @link NXOpen::CloudDM::PartUtils NXOpen::CloudDM::PartUtils@endlink  belonging to cloud manager 
             <br>  Created in NX1872.0.0.  <br>  
            */
            public: NXOpen::CloudDM::PartUtils *PartUtils();
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
