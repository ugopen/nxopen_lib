#ifndef NXOpen_TOOLING_BURRINGINSERTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_BURRINGINSERTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_BurringInsertBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class BurringInsertBuilder;
    }
    class Builder;
    class Expression;
    class ScCollector;
    class Section;
    class SelectBody;
    class TaggedObject;
    namespace Tooling
    {
        class _BurringInsertBuilderBuilder;
        class BurringInsertBuilderImpl;
        /** Progressive Die Wizard  builder to design burring punch and die insert  <br> To create a new instance of this class, use @link NXOpen::Tooling::BurringInsertCollection::CreateBurringInsertBuilder  NXOpen::Tooling::BurringInsertCollection::CreateBurringInsertBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        ArcRadius.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        BurringDirection </term> <description> 
         
        BurringDownwards </description> </item> 

        <item><term> 
         
        CircularOrNonCircular </term> <description> 
         
        Circular </description> </item> 

        <item><term> 
         
        DesignOption </term> <description> 
         
        BurringPunch </description> </item> 

        <item><term> 
         
        EndValue.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        ParentPart </term> <description> 
         
        DieBase </description> </item> 

        <item><term> 
         
        PlateClearanceFirst </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        PlateClearanceSecond </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        PlateClearanceThird </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        PunchHeadHeight.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        StartValue.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        UsePlateClearanceFirst </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        UsePlateClearanceSecond </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        UsePlateClearanceThird </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  BurringInsertBuilder : public NXOpen::Builder
        {
            /** Specifies the burring direction. */
            public: enum BurringDirections
            {
                BurringDirectionsBurringUpwards/** design the burring upwards*/,
                BurringDirectionsBurringDownwards/** design the burring downwards*/
            };

            /** Specifies the design type. */
            public: enum DesignOptions
            {
                DesignOptionsBurringPunch/** design the burring punch*/,
                DesignOptionsBurringDie/** design the burring die*/
            };

            /** Specifies the circular or non-circular type. */
            public: enum CircularOrNonCircularType
            {
                CircularOrNonCircularTypeCircular/** circular */ ,
                CircularOrNonCircularTypeNonCircular/** non circular */ 
            };

            /** Specifies the parent part type. */
            public: enum ParentTypes
            {
                ParentTypesControl/** use PDW project's control part as parent part*/,
                ParentTypesDieBase/** use PDW project's die base part as parent part*/,
                ParentTypesSubDie/** use PDW project's sub-die base as parent part*/,
                ParentTypesDie/** use PDW project's die part as parent part */
            };

            /** Specifies the burring punch type. */
            public: enum BurringPunchTypes
            {
                BurringPunchTypesFirst/** use first type*/,
                BurringPunchTypesSecond/** use second type*/,
                BurringPunchTypesThird/** use third type*/
            };

            private: BurringInsertBuilderImpl * m_burringinsertbuilder_impl;
            private: friend class  _BurringInsertBuilderBuilder;
            protected: BurringInsertBuilder();
            public: ~BurringInsertBuilder();
            /**Returns  the burring face of burring region. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectFaces
            (
            );
            /**Returns  the design option to design punch or die. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BurringInsertBuilder::DesignOptions DesignOption
            (
            );
            /**Sets  the design option to design punch or die. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDesignOption
            (
                NXOpen::Tooling::BurringInsertBuilder::DesignOptions designOption /** designoption */ 
            );
            /**Returns  the burring direction downwards or upwards. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BurringInsertBuilder::BurringDirections BurringDirection
            (
            );
            /**Sets  the burring direction downwards or upwards. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBurringDirection
            (
                NXOpen::Tooling::BurringInsertBuilder::BurringDirections burringDirection /** burringdirection */ 
            );
            /**Returns  the circular or non circular type. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BurringInsertBuilder::CircularOrNonCircularType CircularOrNonCircular
            (
            );
            /**Sets  the circular or non circular type. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCircularOrNonCircular
            (
                NXOpen::Tooling::BurringInsertBuilder::CircularOrNonCircularType circularOrNonCircular /** circularornoncircular */ 
            );
            /**Returns  the parent part to create blank. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BurringInsertBuilder::ParentTypes ParentPart
            (
            );
            /**Sets  the parent part to create blank. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetParentPart
            (
                NXOpen::Tooling::BurringInsertBuilder::ParentTypes parentPart /** parentpart */ 
            );
            /**Returns  the burring punch type to create. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BurringInsertBuilder::BurringPunchTypes BurringPunchType
            (
            );
            /**Sets  the burring punch type to create. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBurringPunchType
            (
                NXOpen::Tooling::BurringInsertBuilder::BurringPunchTypes burringPunchType /** burringpunchtype */ 
            );
            /**Returns  the blank profile to extrude the punch or die. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * BlankProfile
            (
            );
            /**Returns  the start height value of blank. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StartValue
            (
            );
            /**Returns  the end height value of blank. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EndValue
            (
            );
            /**Returns  the arc radius value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ArcRadius
            (
            );
            /**Returns  the punch head height value of blank. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PunchHeadHeight
            (
            );
            /**Returns  the option to use plate clearance first. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceFirst
            (
            );
            /**Sets  the option to use plate clearance first. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceFirst
            (
                bool usePlateClearanceFirst /** useplateclearancefirst */ 
            );
            /**Returns  the value of plate clearance first. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceFirst
            (
            );
            /**Sets  the value of plate clearance first. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceFirst
            (
                double plateClearanceFirst /** plateclearancefirst */ 
            );
            /**Returns  the option to use plate clearance second. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceSecond
            (
            );
            /**Sets  the option to use plate clearance second. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceSecond
            (
                bool usePlateClearanceSecond /** useplateclearancesecond */ 
            );
            /**Returns  the value of plate clearance second. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceSecond
            (
            );
            /**Sets  the value of plate clearance second. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceSecond
            (
                double plateClearanceSecond /** plateclearancesecond */ 
            );
            /**Returns  the option to use plate clearance third. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceThird
            (
            );
            /**Sets  the option to use plate clearance third. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceThird
            (
                bool usePlateClearanceThird /** useplateclearancethird */ 
            );
            /**Returns  the value of plate clearance third. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceThird
            (
            );
            /**Sets  the value of plate clearance third. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceThird
            (
                double plateClearanceThird /** plateclearancethird */ 
            );
            /**Returns  the option whether rename component. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool RenameComponent
            (
            );
            /**Sets  the option whether rename component. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRenameComponent
            (
                bool renameComponent /** renamecomponent */ 
            );
            /**Returns  the parent part name to create blank. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ParentPartName
            (
            );
            /**Sets  the parent part name to create blank. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetParentPartName
            (
                const NXString & parentPart /** Specifies the parent part name */
            );
            /**Sets  the parent part name to create blank. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetParentPartName
            (
                const char * parentPart /** Specifies the parent part name */
            );
            /** Create new component.  @return  the new part instance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * CreateNewComponent
            (
                NXOpen::TaggedObject * parentTag /** the parent part */,
                const NXOpen::Point3d & origin /** the origin point to add */
            );
            /** Extract burring region. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void RevolveSketchedCurve
            (
            );
            /**Returns  the punch or die to edit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * PunchOrDieToEdit
            (
            );
            /** The action to delete the selected punch or die component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DeletePunchOrDieComponent
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
