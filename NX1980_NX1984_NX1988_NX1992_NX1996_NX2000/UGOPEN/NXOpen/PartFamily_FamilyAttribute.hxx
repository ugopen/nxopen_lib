#ifndef NXOpen_PARTFAMILY_FAMILYATTRIBUTE_HXX_INCLUDED
#define NXOpen_PARTFAMILY_FAMILYATTRIBUTE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PartFamily_FamilyAttribute.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_partfamily_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PartFamily
    {
        class FamilyAttribute;
    }
    class NXObject;
    namespace PartFamily
    {
        class _FamilyAttributeBuilder;
        class FamilyAttributeImpl;
        /** This class represents a part family attribute       
             <br> Use @link PartFamily::TemplateManager::GetPartFamilyAttribute PartFamily::TemplateManager::GetPartFamilyAttribute@endlink  to get an instance of this class.
                                   This method will not create a new part family attribute. It will only return attribute that is already created.
                                   To create a new attribute, use @link PartFamily::TemplateManager::AddToChosenAttributes PartFamily::TemplateManager::AddToChosenAttributes@endlink , which
                                   will create an attribute and add to chosen attributes list on template manager. It is not allowed to create
                                   a standalone attribute that is not added to chosen attributes list.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_PARTFAMILYEXPORT  FamilyAttribute : public NXOpen::NXObject
        {
            /** The part family attribute types.
                        These should always be in synch with the UF_fam_attr_types 
                     
             <br>  Created in NX9.0.0.  <br>  
            */
            public: enum AttrType
            {
                AttrTypeText/** text attribute */ = 1,
                AttrTypeNumeric/** numeric attribute */,
                AttrTypeInteger/** integer attribute */,
                AttrTypeDouble/** double attribute */,
                AttrTypeString/** string attribute */,
                AttrTypePart/** part attribute */,
                AttrTypeName/** name attribute */,
                AttrTypeInstance/** instance attribute */,
                AttrTypeExpression/** expression attribute */,
                AttrTypeMirror/** mirror attribute */,
                AttrTypeDensity/** density attribute */,
                AttrTypeFeature/** feature attribute */,
                AttrTypeMass/** asserted mass attribute */,
                AttrTypeMaterial/** material attribute */,
                AttrTypeCofm/** center of mass attribute */,
                AttrTypeUndefined/** undefined attribute type */
            };

            private: FamilyAttributeImpl * m_familyattribute_impl;
            private: friend class  _FamilyAttributeBuilder;
            protected: FamilyAttribute();
            public: ~FamilyAttribute();
            /**Returns  the type of the given attribute 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::PartFamily::FamilyAttribute::AttrType Type
            (
            );
            /**Returns  the value of the given attribute 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXString Value
            (
            );
            /**Returns  the name of the given attribute 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXString Name
            (
            );
            /**Returns  the version of the given attribute 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int Version
            (
            );
            /**Returns  a value indicating whether the attribute is a required attribute.
                        This could be a required creation non key attribute or a required key attribute
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool IsRequired
            (
            );
            /**Returns  a value indicating whether the attribute is an optional attribute.
                        This could be an optional creation non key attribute or an optional key attribute
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool IsOptional
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
