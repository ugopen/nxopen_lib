#ifndef NXOpen_MOTION_SPRINGBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_SPRINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_SpringBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion.hxx>
#include <NXOpen/Motion_ConnectorBuilder.hxx>
#include <NXOpen/Motion_ConnectorBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class SpringBuilder;
    }
    namespace CAE
    {
        class Function;
    }
    class Expression;
    namespace Motion
    {
        class ConnectorBuilder;
    }
    namespace Motion
    {
        class SelectFieldData;
    }
    namespace Motion
    {
        class _SpringBuilderBuilder;
        class SpringBuilderImpl;
        /**
            Represents a SpringBuilder
             <br> To create a new instance of this class, use @link NXOpen::Motion::SpringCollection::CreateSpringBuilder  NXOpen::Motion::SpringCollection::CreateSpringBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        StiffnessType </term> <description> 
         
        Constant </description> </item> 

        </list> 

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  SpringBuilder : public NXOpen::Motion::ConnectorBuilder
        {
            private: SpringBuilderImpl * m_springbuilder_impl;
            private: friend class  _SpringBuilderBuilder;
            protected: SpringBuilder();
            public: ~SpringBuilder();
            /**Returns  the override state of the action link 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ActionLinkOvrCtrl
            (
            );
            /**Sets  the override state of the action link 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActionLinkOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the action origin point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ActionPointOvrCtrl
            (
            );
            /**Sets  the override state of the action origin point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActionPointOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the reaction link 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ReactionLinkOvrCtrl
            (
            );
            /**Sets  the override state of the reaction link 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetReactionLinkOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the reaction origin point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ReactionPointOvrCtrl
            (
            );
            /**Sets  the override state of the reaction origin point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetReactionPointOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the stiffness type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ConnectorCoefficientTypes StiffnessType
            (
            );
            /**Sets  the stiffness type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStiffnessType
            (
                NXOpen::Motion::ConnectorCoefficientTypes stiffnessType /** stiffnesstype */ 
            );
            /**Returns  the function tag. On Adams and Recurdyn, only valid if @link Motion::ConnectorCoefficientTypesSpline Motion::ConnectorCoefficientTypesSpline@endlink  is set
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::Function * StiffnessFunction
            (
            );
            /**Sets  the function tag. On Adams and Recurdyn, only valid if @link Motion::ConnectorCoefficientTypesSpline Motion::ConnectorCoefficientTypesSpline@endlink  is set
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStiffnessFunction
            (
                NXOpen::CAE::Function * function /** function */ 
            );
            /**Returns  the name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the stiffness expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StiffnessExpression
            (
            );
            /**Returns  the torsional stiffness expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TorsionalStiffnessExpression
            (
            );
            /**Returns  the initial length expression for spring which attachs to slide joint
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * InitialLengthExpression
            (
            );
            /**Returns  the create damper toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CreateDamper
            (
            );
            /**Sets  the create damper toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCreateDamper
            (
                bool createDamper /** createdamper */ 
            );
            /**Returns  the coefficient type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ConnectorCoefficientTypes CoefficientType
            (
            );
            /**Sets  the coefficient type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCoefficientType
            (
                NXOpen::Motion::ConnectorCoefficientTypes coefficientType /** coefficienttype */ 
            );
            /**Returns  the translational coefficient expression 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CoefficientExpression
            (
            );
            /**Returns  the torsional coefficient expression 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TorsionalCoefficientExpression
            (
            );
            /**Returns  the function tag. Only valid if @link Motion::ConnectorCoefficientTypesSpline Motion::ConnectorCoefficientTypesSpline@endlink  is set 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::Function * CoefficientFunction
            (
            );
            /**Sets  the function tag. Only valid if @link Motion::ConnectorCoefficientTypesSpline Motion::ConnectorCoefficientTypesSpline@endlink  is set 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCoefficientFunction
            (
                NXOpen::CAE::Function * function /** function */ 
            );
            /**Returns  the damper dname 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString DamperName
            (
            );
            /**Sets  the damper dname 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDamperName
            (
                const NXString & damperName /** dampername */ 
            );
            /**Sets  the damper dname 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetDamperName
            (
                const char * damperName /** dampername */ 
            );
            /**Returns  the length flag, if this flag is set to true, it will not update the preloaded length, if this flag 
                        is set to false, it will update the preloaded length according to the installed length
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool LengthFlag
            (
            );
            /**Sets  the length flag, if this flag is set to true, it will not update the preloaded length, if this flag 
                        is set to false, it will update the preloaded length according to the installed length
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetLengthFlag
            (
                bool lengthFlag /** lengthflag */ 
            );
            /**Returns  the preloaded length expression 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PreloadedLengthExpression
            (
            );
            /**Returns  the preloaded angle expression 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PreloadedAngleExpression
            (
            );
            /**Returns  the actuator force expression 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ActuatorForceExpression
            (
            );
            /**Returns  the actuator moment expression 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ActuatorMomentExpression
            (
            );
            /**Returns  the actuator function tag. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::Function * ActuatorFunction
            (
            );
            /**Sets  the actuator function tag. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActuatorFunction
            (
                NXOpen::CAE::Function * actuatorFunction /** actuatorfunction */ 
            );
            /**Returns  the option of using Customized Solver for damper
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool SpringCustomizedSolver
            (
            );
            /**Sets  the option of using Customized Solver for damper
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSpringCustomizedSolver
            (
                bool springCustomizedSolver /** springcustomizedsolver */ 
            );
            /**Returns  the application direction for damper
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ConnectorBuilder::ApplicationDirection SpringAppDirection
            (
            );
            /**Sets  the application direction for damper
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSpringAppDirection
            (
                NXOpen::Motion::ConnectorBuilder::ApplicationDirection springAppDirection /** springappdirection */ 
            );
            /**Returns  the option of using Customized Solver for damper
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool DamperCustomizedSolver
            (
            );
            /**Sets  the option of using Customized Solver for damper
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDamperCustomizedSolver
            (
                bool customizedSolver /** customizedsolver */ 
            );
            /**Returns  the application direction of damper 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ConnectorBuilder::ApplicationDirection DamperAppDirection
            (
            );
            /**Sets  the application direction of damper 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDamperAppDirection
            (
                NXOpen::Motion::ConnectorBuilder::ApplicationDirection appDirection /** appdirection */ 
            );
            /**Returns  the actuator spline type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ConnectorCoefficientTypes ActuatorType
            (
            );
            /**Sets  the actuator spline type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActuatorType
            (
                NXOpen::Motion::ConnectorCoefficientTypes actuatorType /** actuatortype */ 
            );
            /**Returns  the stiffness 2D profile. Only valid if @link Motion::ConnectorCoefficientTypesProfile2d Motion::ConnectorCoefficientTypesProfile2d@endlink 
                    or @link Motion::ConnectorCoefficientTypesExpressionAndProfile2d Motion::ConnectorCoefficientTypesExpressionAndProfile2d@endlink  is set. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::SelectFieldData * StiffnessCurveProfile
            (
            );
            /**Returns  the stiffness 3D profile. Only valid if @link Motion::ConnectorCoefficientTypesProfile3d Motion::ConnectorCoefficientTypesProfile3d@endlink 
                    or @link Motion::ConnectorCoefficientTypesExpressionAndProfile3d Motion::ConnectorCoefficientTypesExpressionAndProfile3d@endlink  is set. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::SelectFieldData * StiffnessSurfaceProfile
            (
            );
            /**Returns  the actuator profile. Only valid if @link Motion::ConnectorCoefficientTypesProfile2d Motion::ConnectorCoefficientTypesProfile2d@endlink 
                    or @link Motion::ConnectorCoefficientTypesExpressionAndProfile2d Motion::ConnectorCoefficientTypesExpressionAndProfile2d@endlink  is set
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::SelectFieldData * ActuatorCurveProfile
            (
            );
            /**Returns  the coefficient profile 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::SelectFieldData * CoefficientCurveProfile
            (
            );
            /**Returns  the show option of visualization 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowVisualization
            (
            );
            /**Sets  the show option of visualization 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetShowVisualization
            (
                bool showVisualization /** showvisualization */ 
            );
            /**Returns  the coil radius of visualization. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * CoilRadiusExpression
            (
            );
            /**Returns  the wire radius of visualization. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * WireRadiusExpression
            (
            );
            /**Returns  the pitch of visualization. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * PitchExpression
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
