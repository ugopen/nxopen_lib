#ifndef NXOpen_SHIPDESIGN_GENERATOR_HXX_INCLUDED
#define NXOpen_SHIPDESIGN_GENERATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ShipDesign_Generator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_shipdesign_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace ShipDesign
    {
        class Generator;
    }
    namespace ShipDesign
    {
        class ShipSession;
    }
    class Body;
    class DatumPlane;
    class DisplayableObject;
    class TaggedObject;
    namespace ShipDesign
    {
        class GeneratorImpl;
        /** Represents Generator which wrap the ship api for china  <br> To obtain an instance of this class, refer to @link NXOpen::ShipDesign::ShipSession  NXOpen::ShipDesign::ShipSession @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_SHIPDESIGNEXPORT  Generator
        {
            /** Clash status to indicate to show space position relation between two bodies
                    1.Clashes in entities of the same dimension
                    Clash_interfere        Two solid bodies interfere if they share a common volume
                                                        Two faces interfere if they share a common area, or they intersect.
                                                        Two edges interfere if they share a common length, or they intersect.

                    Clash_abut_no_class    Two solid bodies abut when they touch, but do not share a common volume.
                                                        Two faces abut when they share a common curve or point in space which lies on the bounding topology of at least one of the faces.
                                                        Two edges abut when they share a common point in space which lies on the bounding topology of at least one of the edges.

                    Clash_a_in_b
                    Clash_b_in_a           For solids, faces, and edges, one entity is contained when it lies entirely inside the other entity, 
                                                        and their bounding topologies do not touch.
                    2.Clashes in bodies of different dimensions 
                    Clash_interfere        If there is a common point in space that lies within the bounding topology of the two bodies,
                                                        then the bodies are said to interfere.
                    Clash_abut_no_class    If no common point exists, but the bounding topologies of the two bodies touch,
                                                        then the bodies are said to abut.
                    Clash_a_in_b           
                    Clash_b_in_a           If one body lies entirely within the bounding topology of the other, and the bounding topology 
                                                        of the two bodies do not touch then the entity is contained.
                    */
            public: enum ClashType
            {
                ClashTypeNone/** There is no clash between two bodies. */,
                ClashTypeAInB/** Body a is completly in body b, without abut. */,
                ClashTypeBInA/** Body b is completly in body a, without abut. */,
                ClashTypeExists/**Clash exists; only this is requested. */,
                ClashTypeAbutNoClass/** Bounding topologies abut, in/outside unknown. */,
                ClashTypeAbutBInA/** Bounding b topology abuts bounding a topology on the inside. */,
                ClashTypeAbutBOutA/** Bounding b topology abuts bounding a topology on the outside. */,
                ClashTypeInterfere/** Bounding topologies interfere. */
            };

            public: /** Defines the callback function whenever an NX application is entered. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<int> ShipCustomerEnterApplication;
            public: /** Defines the callback function whenever an NX application is exited. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<int> ShipCustomerExitApplication;
            private: GeneratorImpl * m_generator_impl;
            private: NXOpen::ShipDesign::ShipSession* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit Generator(NXOpen::ShipDesign::ShipSession *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~Generator();
            /** Check the clash between two bodys.  @return  O: clash status for body a and body b 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            public: NXOpen::ShipDesign::Generator::ClashType CheckBodyClash
            (
                NXOpen::DisplayableObject * bodyA /** body a */ ,
                NXOpen::DisplayableObject * bodyB /** body b */ 
            );
            /** Get the outline sheet body of input bodies.  @return  O: output outline sheet body 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            public: NXOpen::Body * GetOutlineSheetbody
            (
                const std::vector<NXOpen::Body *> & bodies /** bodies */ ,
                NXOpen::DatumPlane * datumPlane /** datum plane */ 
            );
            /** Gets the spatial relations of the plates based on its positions. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            public: void AskPlatesSpatialRelations
            (
                NXOpen::TaggedObject * hull /** hull */ ,
                const std::vector<NXOpen::TaggedObject *> & inSheets /** insheets */ ,
                double tolerence /** tolerence */ ,
                std::vector<int> & elementIndex /** elementindex */ ,
                std::vector<NXOpen::TaggedObject *> & outElements /** outelements */ 
            );
            /** Gets all intersected plates with the given plates. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            public: void AskIntersectionPlates
            (
                NXOpen::TaggedObject * plate /** plate */ ,
                const std::vector<NXOpen::TaggedObject *> & inSheets /** insheets */ ,
                double tolerence /** tolerence */ ,
                std::vector<NXOpen::TaggedObject *> & outElements /** outelements */ 
            );
            /** Register application callback when application is entered or exited. It is specific for ship customers. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            public: void RegisterApplicationCallback
            (
                const NXString & name /** The name of the application. */,
                const NXOpen::ShipDesign::Generator::ShipCustomerEnterApplication&  enterCallback /** The method called when entering the application */,
                const NXOpen::ShipDesign::Generator::ShipCustomerExitApplication&  exitCallback /** The method called when exiting the application */
            );
            /** Register application callback when application is entered or exited. It is specific for ship customers. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            void RegisterApplicationCallback
            (
                const char * name /** The name of the application. */,
                const NXOpen::ShipDesign::Generator::ShipCustomerEnterApplication&  enterCallback /** The method called when entering the application */,
                const NXOpen::ShipDesign::Generator::ShipCustomerExitApplication&  exitCallback /** The method called when exiting the application */
            );
            /** Creates the ship cargo body based on the input boundary sheets. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            public: void CreateCargo
            (
                const std::vector<NXOpen::TaggedObject *> & inSheets /** insheets */ ,
                double tolerence /** tolerence */ ,
                std::vector<NXOpen::TaggedObject *> & outElements /** outelements */ 
            );
            /** Gets the edges of tool sheet bodies which are laid on a target sheet body 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            public: void GetSheetsEdgesLaidOnTargetSheet
            (
                NXOpen::TaggedObject * outSheet /** outsheet */ ,
                const std::vector<NXOpen::TaggedObject *> & inSheets /** insheets */ ,
                double tolerence /** tolerence */ ,
                std::vector<NXOpen::TaggedObject *> & outElements /** outelements */ 
            );
            /** Creates a progress bar with given title and number of total steps. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            public: void CreateProgress
            (
                int numSteps /** numsteps */ ,
                const NXString & operationName /** operationname */ 
            );
            /** Creates a progress bar with given title and number of total steps. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            void CreateProgress
            (
                int numSteps /** numsteps */ ,
                const char * operationName /** operationname */ 
            );
            /** Deletes the progress bar. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            public: void DeleteProgress
            (
            );
            /** Advances the progress bar. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") */
            public: void AdvanceProgress
            (
                int stepNumber /** stepnumber */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
