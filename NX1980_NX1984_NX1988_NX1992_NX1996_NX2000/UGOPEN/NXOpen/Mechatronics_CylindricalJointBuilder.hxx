#ifndef NXOpen_MECHATRONICS_CYLINDRICALJOINTBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_CYLINDRICALJOINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_CylindricalJointBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Mechatronics_PhysicsJointBuilder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class CylindricalJointBuilder;
    }
    class Direction;
    class Expression;
    namespace Mechatronics
    {
        class PhysicsJointBuilder;
    }
    class Point;
    namespace Mechatronics
    {
        class _CylindricalJointBuilderBuilder;
        class CylindricalJointBuilderImpl;
        /** Represents a @link NXOpen::Mechatronics::CylindricalJoint NXOpen::Mechatronics::CylindricalJoint@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Mechatronics::CylindricalJointCollection::CreateCylindricalJointBuilder  NXOpen::Mechatronics::CylindricalJointCollection::CreateCylindricalJointBuilder @endlink  <br> 
         <br>  Created in NX7.5.1.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  CylindricalJointBuilder : public NXOpen::Mechatronics::PhysicsJointBuilder
        {
            private: CylindricalJointBuilderImpl * m_cylindricaljointbuilder_impl;
            private: friend class  _CylindricalJointBuilderBuilder;
            protected: CylindricalJointBuilder();
            public: ~CylindricalJointBuilder();
            /**Returns  the axis vector. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Direction * AxisVector
            (
            );
            /**Sets  the axis vector. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetAxisVector
            (
                NXOpen::Direction * axisVector /** axisvector */ 
            );
            /**Returns  the anchor point. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Point * AnchorPoint
            (
            );
            /**Sets  the anchor point. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetAnchorPoint
            (
                NXOpen::Point * anchorPoint /** anchorpoint */ 
            );
            /**Returns  the start angle. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * StartAngle
            (
            );
            /**Returns  the offset value. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * Offset
            (
            );
            /**Returns  the linear upper limit option. If the enable is true, then this joint will be
                    applied the upper limit in linear direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool EnableLinearUpperLimit
            (
            );
            /**Sets  the linear upper limit option. If the enable is true, then this joint will be
                    applied the upper limit in linear direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetEnableLinearUpperLimit
            (
                bool enable /** enable */ 
            );
            /**Returns  the linear lower limit option.If the enable is true, then this joint will be
                    applied the lower limit in linear direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool EnableLinearLowerLimit
            (
            );
            /**Sets  the linear lower limit option.If the enable is true, then this joint will be
                    applied the lower limit in linear direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetEnableLinearLowerLimit
            (
                bool enable /** enable */ 
            );
            /**Returns  the linear upper limit. The upper limit setup for joint linear movement. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * LinearUpperLimit
            (
            );
            /**Returns  the linear lower limit. The lower limit setup for joint linear movement. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * LinearLowerLimit
            (
            );
            /**Returns  the angular upper limit option. If the enable is true, then this joint will be
                    applied the upper limit in angular direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool EnableAngularUpperLimit
            (
            );
            /**Sets  the angular upper limit option. If the enable is true, then this joint will be
                    applied the upper limit in angular direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetEnableAngularUpperLimit
            (
                bool enable /** enable */ 
            );
            /**Returns  the angular lower limit option. If the enable is true, then this joint will be
                    applied the lower limit in angular direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool EnableAngularLowerLimit
            (
            );
            /**Sets  the angular lower limit option. If the enable is true, then this joint will be
                    applied the lower limit in angular direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetEnableAngularLowerLimit
            (
                bool enable /** enable */ 
            );
            /**Returns  the angular upper limit. The upper limit setup for joint angular movement. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * AngularUpperLimit
            (
            );
            /**Returns  the angular lower limit. The lower limit setup for joint angular movement. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * AngularLowerLimit
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
