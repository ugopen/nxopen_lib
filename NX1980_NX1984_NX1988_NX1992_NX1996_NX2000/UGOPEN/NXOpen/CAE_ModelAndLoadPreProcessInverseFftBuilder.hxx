#ifndef NXOpen_CAE_MODELANDLOADPREPROCESSINVERSEFFTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELANDLOADPREPROCESSINVERSEFFTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelAndLoadPreProcessInverseFftBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/CAE_ModelAndLoadPreProcessOperationBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ModelAndLoadPreProcessInverseFftBuilder;
    }
    namespace CAE
    {
        class ModelAndLoadPreProcessOperationBuilder;
    }
    class Expression;
    namespace CAE
    {
        class _ModelAndLoadPreProcessInverseFftBuilderBuilder;
        class ModelAndLoadPreProcessInverseFftBuilderImpl;
        /**
            Builds a @link NXOpen::CAE::ModelAndLoadPreProcessInverseFftBuilder NXOpen::CAE::ModelAndLoadPreProcessInverseFftBuilder@endlink  object which 
            represets an operation.
             <br> There is no kf creator for this.  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ModelAndLoadPreProcessInverseFftBuilder : public NXOpen::CAE::ModelAndLoadPreProcessOperationBuilder
        {
            /** Possible types of the frequency range limits */
            public: enum FrequencyLimitEnum
            {
                FrequencyLimitEnumNone/** none */ ,
                FrequencyLimitEnumValue/** value */ ,
                FrequencyLimitEnumSamples/** samples */ 
            };

            private: ModelAndLoadPreProcessInverseFftBuilderImpl * m_modelandloadpreprocessinversefftbuilder_impl;
            private: friend class  _ModelAndLoadPreProcessInverseFftBuilderBuilder;
            protected: ModelAndLoadPreProcessInverseFftBuilder();
            public: ~ModelAndLoadPreProcessInverseFftBuilder();
            /**Returns  the type of specification of the lower-limit 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessInverseFftBuilder::FrequencyLimitEnum FrequencyLowerLimitType
            (
            );
            /**Sets  the type of specification of the lower-limit 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFrequencyLowerLimitType
            (
                NXOpen::CAE::ModelAndLoadPreProcessInverseFftBuilder::FrequencyLimitEnum lowerLimitType /** lowerlimittype */ 
            );
            /**Returns  the lower-limit of the input-signal range, in sample units (when type is FrequencyLimitEnum_Samples) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int FrequencyLowerSampleLimit
            (
            );
            /**Sets  the lower-limit of the input-signal range, in sample units (when type is FrequencyLimitEnum_Samples) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFrequencyLowerSampleLimit
            (
                int lowerSampleLimit /** lowersamplelimit */ 
            );
            /**Returns  the lower limit (when type is FrequencyLimitEnum_Value) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FrequencyLowerValueLimit
            (
            );
            /**Returns  the type of the upper-limit range specification 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessInverseFftBuilder::FrequencyLimitEnum FrequencyUpperLimitType
            (
            );
            /**Sets  the type of the upper-limit range specification 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFrequencyUpperLimitType
            (
                NXOpen::CAE::ModelAndLoadPreProcessInverseFftBuilder::FrequencyLimitEnum upperLimitType /** upperlimittype */ 
            );
            /**Returns  the upper limit, in sample units 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int FrequencyUpperSampleLimit
            (
            );
            /**Sets  the upper limit, in sample units 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFrequencyUpperSampleLimit
            (
                int upperSampleLimit /** uppersamplelimit */ 
            );
            /**Returns  the upper limit (when type is FrequencyLimitEnum_Value) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FrequencyUpperValueLimit
            (
            );
            /**Returns  the flag which enables limiting the lower-range of the resulting time signal 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableLowerTimeLimit
            (
            );
            /**Sets  the flag which enables limiting the lower-range of the resulting time signal 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEnableLowerTimeLimit
            (
                bool enableLowerTimeLimit /** enablelowertimelimit */ 
            );
            /**Returns  the lower limit of the Time range (when enabled) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LowerTimeLimit
            (
            );
            /**Returns  the flag which enables limiting the upper-range of the resulting Time signal 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableUpperTimeLimit
            (
            );
            /**Sets  the flag which enables limiting the upper-range of the resulting Time signal 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEnableUpperTimeLimit
            (
                bool enableUpperTimeLimit /** enableuppertimelimit */ 
            );
            /**Returns  the upper limit of the Time range (when enabled) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UpperTimeLimit
            (
            );
            /**Returns  the allowed relative deviation from the average frequency step, in percent 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the allowed relative deviation from the average frequency step, in percent 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTolerance
            (
                double relativeTolerance /** relativetolerance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
