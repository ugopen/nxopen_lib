#ifndef NXOpen_FIELDS_FIELDFOLDER_HXX_INCLUDED
#define NXOpen_FIELDS_FIELDFOLDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_FieldFolder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_Field.hxx>
#include <NXOpen/CAE_IFolder.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class FieldFolder;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    namespace CAE
    {
        class IFolder;
    }
    namespace Fields
    {
        class Field;
    }
    class INXObject;
    class NXObject;
    namespace Fields
    {
        class _FieldFolderBuilder;
        class FieldFolderImpl;
        /**  @brief  Represents a folder object in the fields   

           <br> To create a new instance of this class, use @link NXOpen::Fields::FieldFolderCollection::CreateFolder  NXOpen::Fields::FieldFolderCollection::CreateFolder @endlink  <br> 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  FieldFolder : public NXOpen::NXObject, public virtual NXOpen::CAE::IFolder
        {
            private: FieldFolderImpl * m_fieldfolder_impl;
            private: friend class  _FieldFolderBuilder;
            protected: FieldFolder();
            public: ~FieldFolder();
            /**Returns  the parent folder 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldFolder * Parent
            (
            );
            /**  Add a child folder 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void AddSubfolder
            (
                NXOpen::Fields::FieldFolder * subfolder /** child folder*/
            );
            /**  Remove a child folder 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveSubfolder
            (
                NXOpen::Fields::FieldFolder * subfolder /** child folder*/
            );
            /**  Add a child folder 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void AddField
            (
                NXOpen::Fields::Field * field /** child object*/
            );
            /**  Remove a child folder 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveField
            (
                NXOpen::Fields::Field * field /** child object*/
            );
            /** Get the parent  @return  parent folder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: virtual NXOpen::CAE::IFolder * GetParent
            (
            );
            /**  Get the children  @return  child folders
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: virtual std::vector<NXOpen::CAE::IFolder *> GetChildren
            (
            );
            /** Get the members @return  members of object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: virtual std::vector<NXOpen::NXObject *> GetMembers
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
