#ifndef NXOpen_CAE_AFUDATA_HXX_INCLUDED
#define NXOpen_CAE_AFUDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AfuData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AfuAbscissaHeaderInfo.hxx>
#include <NXOpen/CAE_AfuHeaderId.hxx>
#include <NXOpen/CAE_AfuOrdinateHeaderInfo.hxx>
#include <NXOpen/CAE_AfuZHeaderInfo.hxx>
#include <NXOpen/CAE_XYFunctionDataTypes.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class AfuData;
    }
    namespace CAE
    {
        class AfuAbscissaHeaderInfo;
    }
    namespace CAE
    {
        class AfuHeaderId;
    }
    namespace CAE
    {
        class AfuOrdinateHeaderInfo;
    }
    namespace CAE
    {
        class AfuZHeaderInfo;
    }
    namespace CAE
    {
        class AfuDataImpl;
        /** the data used to create an AFU Data Record 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  AfuData : public NXOpen::TransientObject
        {
            /** Defines abscissa data type for AFU data record */
            public: enum AbscissaType
            {
                AbscissaTypeEven/** The abscissa value is even and calculated by increment */,
                AbscissaTypeUneven/** The abscissa value is uneven and input by user */
            };

            /** Defines ordinate data type for AFU data record */
            public: enum OrdinateType
            {
                OrdinateTypeReal/** Ordinate Data is a single Real value */,
                OrdinateTypeRealImaginary/** Ordinate Data is Complex with Real and Imaginary values */,
                OrdinateTypeMagnitudePhase/** Ordinate Data is Complex with Amplitude and Phase values*/
            };

            /** Defines data interpolation type for AFU data record */
            public: enum InterpolationType
            {
                InterpolationTypeCubic/** Cubic Interpolation */,
                InterpolationTypeAkima/** Akima Interpolation */,
                InterpolationTypeAkima72/** Akima72 Interpolation */,
                InterpolationTypeLinear/** Linear Interplolation*/
            };

            /** Defines data extrapolation type for AFU data record */
            public: enum ExtrapolationType
            {
                ExtrapolationTypeLinear/** Linear Extrapolation */,
                ExtrapolationTypeParabolic/** Parabolic Extrapolation */
            };

            private: AfuDataImpl * m_afudata_impl;
            /// \cond NX_NO_DOC 
            public: explicit AfuData(void *ptr);
            /// \endcond 
            /** Free the AFU Data transient object memory 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~AfuData();
            /**Sets  the name of AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFileName
            (
                const NXString & afuFileName /** The full name of the AFU file */
            );
            /**Sets  the name of AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void SetFileName
            (
                const char * afuFileName /** The full name of the AFU file */
            );
            /**Returns  the name of AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FileName
            (
            );
            /**Sets  the name of the AFU Data Record 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRecordName
            (
                const NXString & afuRecordName /** The name of AFU Data Record */
            );
            /**Sets  the name of the AFU Data Record 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void SetRecordName
            (
                const char * afuRecordName /** The name of AFU Data Record */
            );
            /**Returns  the name of the AFU Data Record 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RecordName
            (
            );
            /** Set the Abscissa and Ordinate Axis definitions of an AFU Data Record 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAbscissaAndOrdinateAxisDefinition
            (
                NXOpen::CAE::XyFunctionUnit xUnit /** Unit Code of abscissa data */,
                NXOpen::CAE::AfuData::OrdinateType ordinateType /** Ordinate data type */,
                NXOpen::CAE::XyFunctionUnit yUnit /** Unit Code of ordinate data */,
                NXOpen::CAE::XyFunctionUnit yDenominatorUnit /** Unit Code of ordinate data */
            );
            /** Get the Abscissa and Ordinate Axis definitions of an AFU Data Record 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetAbscissaAndOrdinateAxisDefinition
            (
                NXOpen::CAE::AfuData::AbscissaType* abscissaType /** Abscissa specific data type */,
                NXOpen::CAE::XyFunctionUnit* xUnit /** Unit Code of abscissa data */,
                NXOpen::CAE::AfuData::OrdinateType* ordinateType /** Ordinate data type */,
                NXOpen::CAE::XyFunctionUnit* yUnit /** Unit Code of ordinate data */,
                NXOpen::CAE::XyFunctionUnit* yDenominatorUnit /** Unit Code of ordinate data */
            );
            /**Returns  the abscissa spacing type of an AFU Data Record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData::AbscissaType AbscissaSpacingType
            (
            );
            /**Returns  the abscissa unit of an AFU Data Record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::XyFunctionUnit AbscissaUnit
            (
            );
            /**Sets  the abscissa unit of an AFU Data Record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAbscissaUnit
            (
                NXOpen::CAE::XyFunctionUnit xUnit /** x unit */ 
            );
            /**Returns   the ordinate data type of an AFU Data Record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData::OrdinateType OrdinateDataType
            (
            );
            /**Sets   the ordinate data type of an AFU Data Record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOrdinateDataType
            (
                NXOpen::CAE::AfuData::OrdinateType ordinateType /** ordinate type */ 
            );
            /**Returns  the ordinate unit of an AFU Data Record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::XyFunctionUnit OrdinateUnit
            (
            );
            /**Sets  the ordinate unit of an AFU Data Record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOrdinateUnit
            (
                NXOpen::CAE::XyFunctionUnit yUnit /** y unit */ 
            );
            /**Returns  the ordinate second numerator unit of an AFU Data Record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::XyFunctionUnit OrdinateSecondNumeratorUnit
            (
            );
            /**Sets  the ordinate second numerator unit of an AFU Data Record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOrdinateSecondNumeratorUnit
            (
                NXOpen::CAE::XyFunctionUnit ySecondNumeratorUnit /** y second numerator unit */ 
            );
            /**Returns  the ordinate denominator unit of an AFU Data Record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::XyFunctionUnit OrdinateDenominatorUnit
            (
            );
            /**Sets  the ordinate denominator unit of an AFU Data Record 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOrdinateDenominatorUnit
            (
                NXOpen::CAE::XyFunctionUnit yDenominatorUnit /** y denominator unit */ 
            );
            /** Get the Abscissa Information for an AFU Data Record when the abscissa type is even 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void GetEvenData
            (
                double* xMinimum /** Minimum abscissa data value */,
                double* xIncrement /** Abscissa increment */,
                int* numberOfPoints /** Number of abscissa elements */
            );
            /** Set the XY Data of an AFU Data Record when the ordinate type is real 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRealData
            (
                const std::vector<double> & xValues /** Abscissa element data values */,
                const std::vector<double> & yValues /** Ordinate element data values */
            );
            /** Set the XY Data of an AFU Data Record when the ordinate type is real and the absicssa type is even 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRealData
            (
                double xMinimum /** Minimum abscissa data value */,
                double xIncrement /** Abscissa increment */,
                const std::vector<double> & yValues /** Ordinate element data values */
            );
            /** Get the XY Data of an AFU Data Record when the ordinate type is real  @return  Ordinate element data values 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetRealData
            (
                std::vector<double> & xValues /** Abscissa element data values */
            );
            /** Set the XY Data of an AFU record when the ordinate type is Complex 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComplexData
            (
                const std::vector<double> & xValues /** Abscissa element data values*/,
                const std::vector<double> & yValues /** Ordinate element data values for real part or magnitude part */,
                const std::vector<double> & zValues /** Ordinate element data values for imaginary part or phase part */
            );
            /** Set the XY Data of an AFU record when the ordinate type is Complex 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComplexData
            (
                double xMinimum /** Minimum abscissa data value */,
                double xIncrement /** Abscissa increment */,
                const std::vector<double> & yValues /** Ordinate element data values for real part or magnitude part */,
                const std::vector<double> & zValues /** Ordinate element data values for imaginary part or phase part */
            );
            /** Get the XY data of an AFU Data Record when the ordinate type is Complex  @return  Ordinate element data values for imaginary part or phase part 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetComplexData
            (
                std::vector<double> & xValues /** Abscissa element data values*/,
                std::vector<double> & yValues /** Ordinate element data values for real part or magnitude part */
            );
            /**Sets  the data type of the AFU Data Record 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFunctionDataType
            (
                NXOpen::CAE::XyFunctionDataType functionDataType /** The data type of a function in AFU */
            );
            /**Returns  the data type of the AFU Data Record 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::XyFunctionDataType FunctionDataType
            (
            );
            /**Sets  the AFU Header Id data of the AFU Data Record 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAfuHeaderId
            (
                NXOpen::CAE::AfuHeaderId * afuHeaderId /** The AFU Header Id data */
            );
            /**Returns  the AFU Header Id data of the AFU Data Record 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuHeaderId * AfuHeaderId
            (
            );
            /**Sets  the abscissa header information data of the AFU Data Record 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAfuAbscissaHeaderInfo
            (
                NXOpen::CAE::AfuAbscissaHeaderInfo * abscissaHeaderInfo /** Abscissa header information data @link CAE::AfuAbscissaHeaderInfo CAE::AfuAbscissaHeaderInfo@endlink  to be set*/
            );
            /**Returns  the abscissa header information data of the AFU Data Record 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuAbscissaHeaderInfo * AfuAbscissaHeaderInfo
            (
            );
            /**Sets  the ordinate header information data of the AFU Data Record 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAfuOrdinateHeaderInfo
            (
                NXOpen::CAE::AfuOrdinateHeaderInfo * ordinateHeaderInfo /** Ordindate header information data @link CAE::AfuOrdinateHeaderInfo CAE::AfuOrdinateHeaderInfo@endlink  to be set*/
            );
            /**Returns  the ordinate header information data of the AFU Data Record 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuOrdinateHeaderInfo * AfuOrdinateHeaderInfo
            (
            );
            /**Sets  the Z axis header information data of the AFU Data Record 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAfuZHeaderInfo
            (
                NXOpen::CAE::AfuZHeaderInfo * zHeaderInfoP /** Z axis header information data @link CAE::AfuZHeaderInfo CAE::AfuZHeaderInfo@endlink  to be set*/
            );
            /**Returns  the Z axis header information data of the AFU Data Record 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuZHeaderInfo * AfuZHeaderInfo
            (
            );
            /**Sets  the interpolation type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInterpolation
            (
                NXOpen::CAE::AfuData::InterpolationType interpolation /** the interpolation method */
            );
            /**Returns  the interpolation type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData::InterpolationType Interpolation
            (
            );
            /**Sets  the extrapolation type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExtrapolation
            (
                NXOpen::CAE::AfuData::ExtrapolationType extrapolation /** the extrapolation method */
            );
            /**Returns  the extrapolation type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData::ExtrapolationType Extrapolation
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
