#ifndef NXOpen_CAM_TURNNCMSMOOTHING_HXX_INCLUDED
#define NXOpen_CAM_TURNNCMSMOOTHING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TurnNcmSmoothing.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_BaseBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class TurnNcmSmoothing;
    }
    namespace CAM
    {
        class BaseBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class _TurnNcmSmoothingBuilder;
        class TurnNcmSmoothingImpl;

        /// \cond NX_NO_DOC 
        /** Represents the turning ncm smoothing builder 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  TurnNcmSmoothing : public NXOpen::CAM::BaseBuilder
        {
            /** available tolerance types*/

            /// \cond NX_NO_DOC 
            public: enum ToleranceTypeOptions
            {
                ToleranceTypeOptionsFromCutting/** from cutting */ ,
                ToleranceTypeOptionsSpecify/** specify */ 
            };


            /// \endcond 
            private: TurnNcmSmoothingImpl * m_turnncmsmoothing_impl;
            private: friend class  _TurnNcmSmoothingBuilder;
            protected: TurnNcmSmoothing();
            public: ~TurnNcmSmoothing();

            /// \cond NX_NO_DOC 
            /**Returns  the ncm smoothing state 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool SmoothingState
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the ncm smoothing state 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSmoothingState
            (
                bool isActive /** isactive */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the ncm smoothing radius 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * SmoothingRadius
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the ncm tolerance type option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TurnNcmSmoothing::ToleranceTypeOptions ToleranceTypeOption
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the ncm tolerance type option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToleranceTypeOption
            (
                NXOpen::CAM::TurnNcmSmoothing::ToleranceTypeOptions toleranceTypeOption /** tolerancetypeoption */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the ncm tolerance value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ToleranceValue
            (
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
