#ifndef NXOpen_CAE_FEMSIGNALPROCESSINGSIGNALATTRIBUTES_HXX_INCLUDED
#define NXOpen_CAE_FEMSIGNALPROCESSINGSIGNALATTRIBUTES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_FemSignalProcessingSignalAttributes.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_IApplication.hxx>
#include <NXOpen/Fields_IApplicationData.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class FemSignalProcessingSignalAttributes;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    namespace Fields
    {
        class Field;
    }
    namespace Fields
    {
        class IApplication;
    }
    namespace Fields
    {
        class IApplicationData;
    }
    class INXObject;
    class NXObject;
    namespace CAE
    {
        class _FemSignalProcessingSignalAttributesBuilder;
        class FemSignalProcessingSignalAttributesImpl;
        /**  @brief Implementation of the @link NXOpen::Fields::IApplicationData NXOpen::Fields::IApplicationData@endlink . This 
            specific implementation allows to specify signal attributes (like energy/amplitude correction
            factors, acoustical weighting, ...) on a field. Instances of this class are created through the
            @link NXOpen::CAE::FemSignalProcessingApplication NXOpen::CAE::FemSignalProcessingApplication@endlink  object.
             

          <br> Not support KF.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  FemSignalProcessingSignalAttributes : public NXOpen::NXObject, public virtual NXOpen::Fields::IApplicationData
        {
            /** This enum defines the spectrum scaling */
            public: enum SpectrumScalings
            {
                SpectrumScalingsUnknown/** Unkonwn */,
                SpectrumScalingsPeak/** Peak */,
                SpectrumScalingsRms/** RMS */
            };

            /** This enum defines the correction modes */
            public: enum CorrectionModes
            {
                CorrectionModesUnknown/** Unkonwn */,
                CorrectionModesEnergy/** Energy */,
                CorrectionModesAmplitude/** Amplitude */
            };

            /** This enum defines the acoustical weightings */
            public: enum AcousticalWeightings
            {
                AcousticalWeightingsUnknown/** Unkonwn */,
                AcousticalWeightingsNone/** None */,
                AcousticalWeightingsA/** A */,
                AcousticalWeightingsB/** B */,
                AcousticalWeightingsC/** C */,
                AcousticalWeightingsD/** D */,
                AcousticalWeightingsAb/** AB */,
                AcousticalWeightingsBc/** BC */
            };

            private: FemSignalProcessingSignalAttributesImpl * m_femsignalprocessingsignalattributes_impl;
            private: friend class  _FemSignalProcessingSignalAttributesBuilder;
            protected: FemSignalProcessingSignalAttributes();
            public: ~FemSignalProcessingSignalAttributes();
            /**Returns  the spectrum scaling in which the data is encoded.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::FemSignalProcessingSignalAttributes::SpectrumScalings SpectrumScaling
            (
            );
            /**Sets  the spectrum scaling in which the data is encoded.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpectrumScaling
            (
                NXOpen::CAE::FemSignalProcessingSignalAttributes::SpectrumScalings spectrumScaling /** spectrumscaling */ 
            );
            /**Returns  the correction mode in which the data is encoded
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::FemSignalProcessingSignalAttributes::CorrectionModes CorrectionMode
            (
            );
            /**Sets  the correction mode in which the data is encoded
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCorrectionMode
            (
                NXOpen::CAE::FemSignalProcessingSignalAttributes::CorrectionModes correctionMode /** correctionmode */ 
            );
            /**Returns  the energy correction factor
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double EnergyCorrectionFactor
            (
            );
            /**Sets  the energy correction factor
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnergyCorrectionFactor
            (
                double correctionFactor /** correctionfactor */ 
            );
            /**Returns  the amplitude correction factor
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double AmplitudeCorrectionFactor
            (
            );
            /**Sets  the amplitude correction factor
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAmplitudeCorrectionFactor
            (
                double correctionFactor /** correctionfactor */ 
            );
            /**Returns  the acoustical weighting
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::FemSignalProcessingSignalAttributes::AcousticalWeightings AcousticalWeighting
            (
            );
            /**Sets  the acoustical weighting
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAcousticalWeighting
            (
                NXOpen::CAE::FemSignalProcessingSignalAttributes::AcousticalWeightings weighting /** weighting */ 
            );
            /** Returns the application associated with this application data object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Fields::IApplication * GetApplication
            (
            );
            /** Delete the Application Data object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void DeleteApplicationData
            (
            );
            /** Copy the Application Data object to the specified field 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void CopyToField
            (
                NXOpen::Fields::Field * field /** field to copy to */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
