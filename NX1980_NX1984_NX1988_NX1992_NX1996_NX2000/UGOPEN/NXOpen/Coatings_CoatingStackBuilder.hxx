#ifndef NXOpen_COATINGS_COATINGSTACKBUILDER_HXX_INCLUDED
#define NXOpen_COATINGS_COATINGSTACKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Coatings_CoatingStackBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libcoatingsopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Coatings
    {
        class CoatingStackBuilder;
    }
    class Builder;
    namespace Coatings
    {
        class _CoatingStackBuilderBuilder;
        class CoatingStackBuilderImpl;
        /**
             * Defines a builder for creating @link NXOpen::Coatings::CoatingStack NXOpen::Coatings::CoatingStack@endlink  objects, which are
             * used by the Coatings application.
              <br> To create a new instance of this class, use @link NXOpen::Coatings::CoatingStackCollection::CreateCoatingStackBuilder  NXOpen::Coatings::CoatingStackCollection::CreateCoatingStackBuilder @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class COATINGSOPENCPPEXPORT  CoatingStackBuilder : public NXOpen::Builder
        {
            private: CoatingStackBuilderImpl * m_coatingstackbuilder_impl;
            private: friend class  _CoatingStackBuilderBuilder;
            protected: CoatingStackBuilder();
            public: ~CoatingStackBuilder();
            /**Returns  the name of the CoatingStack object. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name of the CoatingStack object. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the CoatingStack object. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the activation status of the CoatingStack object. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsActive
            (
            );
            /**Sets  the activation status of the CoatingStack object. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: void SetActive
            (
                bool isActive /** isactive */ 
            );
            /** Gets the process note attached to the CoatingStack object. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetProcessNote
            (
            );
            /** Sets the process note attached to the CoatingStack object. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: void SetProcessNote
            (
                const std::vector<NXString> & processNote /** processnote */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
