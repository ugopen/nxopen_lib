#ifndef NXOpen_DRAWINGS_VIEWCREATIONWIZARDBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWCREATIONWIZARDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewCreationWizardBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_CustomViewSettingsBuilder.hxx>
#include <NXOpen/Drawings_MultipleViewPlacementBuilder.hxx>
#include <NXOpen/Drawings_OvtBuilder.hxx>
#include <NXOpen/Drawings_ViewScaleBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Preferences_ViewStylePreferencesData.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ViewCreationWizardBuilder;
    }
    class Builder;
    namespace Drawings
    {
        class CustomViewSettingsBuilder;
    }
    namespace Drawings
    {
        class MultipleViewPlacementBuilder;
    }
    namespace Drawings
    {
        class OvtBuilder;
    }
    namespace Drawings
    {
        class ViewScaleBuilder;
    }
    namespace Drawings
    {
        class ViewStyleBuilder;
    }
    class Part;
    namespace Drawings
    {
        class _ViewCreationWizardBuilderBuilder;
        class ViewCreationWizardBuilderImpl;
        /** This builder allows the user to create a Drawing View  <br> To create a new instance of this class, use @link NXOpen::Drawings::DraftingViewCollection::CreateViewCreationWizardBuilder  NXOpen::Drawings::DraftingViewCollection::CreateViewCreationWizardBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AutoScale </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        BackView </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        BaseView </term> <description> 
         
        FRONT </description> </item> 

        <item><term> 
         
        BottomView </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.DelayUpdateOnCreation </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.DelayViewUpdate </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.HiddenLinesFont </term> <description> 
         
        Invisible </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.InterferingSolids </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.RenderTrueHiddenLine </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowAdjacentBlends </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowCenterLines </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowCheckBoundaryStatus </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowEdgesHiddenByEdges </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowHiddenLines </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowSelfHiddenLines </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowSmoothEdgeEndGapsLock </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowSmoothEdges </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowTraceLines </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowUVGrids </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowVIEndGapsLock </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ShowVirtualIntersections </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.SmallFeatures </term> <description> 
         
        Hide </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.ThreadStandard </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        CustomViewSettingsBuilder.TraceLineCreateGapsLock </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ExtractedEdges </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        FrontView </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        IgnoreTitleBlock </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        IsometricView </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        LeftView </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        LockMethod </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        MarginBetweenViews </term> <description> 
         
        5 (millimeters part), 0.25 (inches part) </description> </item> 

        <item><term> 
         
        MarginToBorder </term> <description> 
         
        20 (millimeters part), 0.75 (inches part) </description> </item> 

        <item><term> 
         
        MultipleViewPlacement.OptionType </term> <description> 
         
        Center </description> </item> 

        <item><term> 
         
        MultipleViewPlacement.ViewPlacementCenter.AlignmentMethod </term> <description> 
         
        Infer </description> </item> 

        <item><term> 
         
        MultipleViewPlacement.ViewPlacementCenter.AlignmentOption </term> <description> 
         
        ToView </description> </item> 

        <item><term> 
         
        OptimizeSettings </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        OrientViewTool.AssociativeOrientation </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        PlacementOption </term> <description> 
         
        Automatic </description> </item> 

        <item><term> 
         
        RightView </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SnapShot (deprecated) </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        TopView </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        TrimetricView </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ViewBoundary </term> <description> 
         
        Automatic </description> </item> 

        <item><term> 
         
        ViewRepresentation </term> <description> 
         
        SmartLightweight </description> </item> 

        <item><term> 
         
        ViewScale.Denominator </term> <description> 
         
        1.0 </description> </item> 

        <item><term> 
         
        ViewScale.Numerator </term> <description> 
         
        1.0 </description> </item> 

        <item><term> 
         
        ViewScale.ScaleType </term> <description> 
         
        Ratio </description> </item> 

        <item><term> 
         
        ViewStyle.ViewStyleGeneral.AngleSetting.Angle.Value </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ViewStyle.ViewStyleGeneral.AngleSetting.Associative </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ViewStyle.ViewStyleGeneral.AngleSetting.EvaluationPlane </term> <description> 
         
        DrawingSheet </description> </item> 

        <item><term> 
         
        ViewStyle.ViewStyleOrientation.HingeLine.ReverseDirection </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        ViewStyle.ViewStyleOrientation.HingeLine.VectorOption </term> <description> 
         
        Inferred </description> </item> 

        </list> 

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ViewCreationWizardBuilder : public NXOpen::Builder
        {
            /** The placement option type */
            public: enum Option
            {
                OptionAutomatic/** By Automatic */,
                OptionManual/** By Manual */
            };

            /** The view boundary option type */
            public: enum ViewBoundaryOption
            {
                ViewBoundaryOptionAutomatic/** view boundary Automatic */,
                ViewBoundaryOptionManual/** view boundary Manual */
            };

            /** the view resolution option type */
            public: enum ResolutionOption
            {
                ResolutionOptionCoarse/** view display quality Coarse */,
                ResolutionOptionMedium/** view display quality Medium */,
                ResolutionOptionFine/** view display quality Fine */
            };

            /** the view representation mode */
            public: enum ViewRepresentations
            {
                ViewRepresentationsExact/** View representation mode Exact */,
                ViewRepresentationsSmartLightweight/** View representation mode Lightweight */,
                ViewRepresentationsLightweight/** View representation mode legacy Lightweight */,
                ViewRepresentationsPreNx85Exact/** View representation mode legacy Exact */
            };

            private: ViewCreationWizardBuilderImpl * m_viewcreationwizardbuilder_impl;
            private: friend class  _ViewCreationWizardBuilderBuilder;
            protected: ViewCreationWizardBuilder();
            public: ~ViewCreationWizardBuilder();
            /**Returns  the auto scale 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutoScale
            (
            );
            /**Sets  the auto scale 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAutoScale
            (
                bool autoScale /** autoscale */ 
            );
            /**Returns  the view scale 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewScaleBuilder * ViewScale
            (
            );
            /**Returns  the hidden lines 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool HiddenLines
            (
            );
            /**Sets  the hidden lines 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHiddenLines
            (
                bool hiddenLines /** hiddenlines */ 
            );
            /**Returns  the center lines 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CenterLines
            (
            );
            /**Sets  the center lines 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCenterLines
            (
                bool centerLines /** centerlines */ 
            );
            /**Returns  the silhouettes 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool Silhouettes
            (
            );
            /**Sets  the silhouettes 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSilhouettes
            (
                bool silhouettes /** silhouettes */ 
            );
            /**Returns  the view labels 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ViewLabels
            (
            );
            /**Sets  the view labels 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetViewLabels
            (
                bool dispViewLabels /** dispviewlabels */ 
            );
            /**Returns  the base view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BaseView
            (
            );
            /**Sets  the base view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetBaseView
            (
                const NXString & baseView /** baseview */ 
            );
            /**Sets  the base view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetBaseView
            (
                const char * baseView /** baseview */ 
            );
            /**Returns  the orient view tool 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::OvtBuilder * OrientViewTool
            (
            );
            /**Returns  the front view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool FrontView
            (
            );
            /**Sets  the front view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFrontView
            (
                bool frontView /** frontview */ 
            );
            /**Returns  the top view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool TopView
            (
            );
            /**Sets  the top view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTopView
            (
                bool topView /** topview */ 
            );
            /**Returns  the right view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool RightView
            (
            );
            /**Sets  the right view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetRightView
            (
                bool rightView /** rightview */ 
            );
            /**Returns  the left view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool LeftView
            (
            );
            /**Sets  the left view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLeftView
            (
                bool leftView /** leftview */ 
            );
            /**Returns  the bottom view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool BottomView
            (
            );
            /**Sets  the bottom view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetBottomView
            (
                bool bottomView /** bottomview */ 
            );
            /**Returns  the back view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool BackView
            (
            );
            /**Sets  the back view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetBackView
            (
                bool backView /** backview */ 
            );
            /**Returns  the trimetric view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool TrimetricView
            (
            );
            /**Sets  the trimetric view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTrimetricView
            (
                bool trimetricView /** trimetricview */ 
            );
            /**Returns  the isometric view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsometricView
            (
            );
            /**Sets  the isometric view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetIsometricView
            (
                bool isometricView /** isometricview */ 
            );
            /**Returns  the margin to border 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double MarginToBorder
            (
            );
            /**Sets  the margin to border 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMarginToBorder
            (
                double marginToBorder /** margintoborder */ 
            );
            /**Returns  the margin between views 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double MarginBetweenViews
            (
            );
            /**Sets  the margin between views 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMarginBetweenViews
            (
                double marginBetweenViews /** marginbetweenviews */ 
            );
            /**Returns  the part 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Part * Part
            (
            );
            /**Sets  the part 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPart
            (
                NXOpen::Part * part /** part */ 
            );
            /**Returns  the inherit pmi 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int InheritPMI
            (
            );
            /**Sets  the inherit pmi 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetInheritPMI
            (
                int inheritPMI /** inheritpmi */ 
            );
            /**Returns  the inherit pmi onto drawing 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool InheritPmiOntoDrawing
            (
            );
            /**Sets  the inherit pmi onto drawing 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetInheritPmiOntoDrawing
            (
                bool inheritPmiOntoDrawing /** inheritpmiontodrawing */ 
            );
            /**Returns  the inherit pmi from revolved sketches 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool PmiDimensionFromRevolved
            (
            );
            /**Sets  the inherit pmi from revolved sketches 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPmiDimensionFromRevolved
            (
                bool pmiDimensionFromRevolved /** pmidimensionfromrevolved */ 
            );
            /**Returns  the crosshatch inherited section views 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CrosshatchInheritedSectionViews
            (
            );
            /**Sets  the crosshatch inherited section views 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCrosshatchInheritedSectionViews
            (
                bool crosshatchInheritedSectionViews /** crosshatchinheritedsectionviews */ 
            );
            /**Returns  the pmi types 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int PmiTypes
            (
            );
            /**Sets  the pmi types 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPmiTypes
            (
                int pmiTypes /** pmitypes */ 
            );
            /**Returns  the view style 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewStyleBuilder * ViewStyle
            (
            );
            /**Returns  the multiple view placement 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::MultipleViewPlacementBuilder * MultipleViewPlacement
            (
            );
            /**Returns  the special base view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool SpecialBaseView
            (
            );
            /**Sets  the special base view 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSpecialBaseView
            (
                bool specialBaseView /** specialbaseview */ 
            );
            /**Returns  the placement option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewCreationWizardBuilder::Option PlacementOption
            (
            );
            /**Sets  the placement option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPlacementOption
            (
                NXOpen::Drawings::ViewCreationWizardBuilder::Option placementOption /** placementoption */ 
            );
            /**Returns  the hidden line font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int HiddenLineFont
            (
            );
            /**Sets  the hidden line font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHiddenLineFont
            (
                int hiddenLineFont /** hiddenlinefont */ 
            );
            /**Returns  the hidden line width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int HiddenLineWidth
            (
            );
            /**Sets  the hidden line width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHiddenLineWidth
            (
                int hiddenLineWidth /** hiddenlinewidth */ 
            );
            /**Returns  the hidden line color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int HiddenLineColor
            (
            );
            /**Sets  the hidden line color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHiddenLineColor
            (
                int hiddenLineColor /** hiddenlinecolor */ 
            );
            /**Returns  the view boundary option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewCreationWizardBuilder::ViewBoundaryOption ViewBoundary
            (
            );
            /**Sets  the view boundary option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetViewBoundary
            (
                NXOpen::Drawings::ViewCreationWizardBuilder::ViewBoundaryOption viewBoundaryOption /** viewboundaryoption */ 
            );
            /**Returns  the ignore title block 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IgnoreTitleBlock
            (
            );
            /**Sets  the ignore title block 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetIgnoreTitleBlock
            (
                bool ignoreTitleBlock /** ignoretitleblock */ 
            );
            /**Returns  the optimize view settings 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool OptimizeSettings
            (
            );
            /**Sets  the optimize view settings 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOptimizeSettings
            (
                bool optimizeSettings /** optimizesettings */ 
            );
            /**Returns  the @link NXOpen::Drawings::CustomViewSettingsBuilder NXOpen::Drawings::CustomViewSettingsBuilder@endlink  object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder * CustomViewSettingsBuilder
            (
            );
            /**Returns  the display quality option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewCreationWizardBuilder::ResolutionOption Resolution
            (
            );
            /**Sets  the display quality option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetResolution
            (
                NXOpen::Drawings::ViewCreationWizardBuilder::ResolutionOption resolution /** resolution */ 
            );
            /**Returns  the extracted edges option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ExtractedEdges
            (
            );
            /**Sets  the extracted edges option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetExtractedEdges
            (
                bool extractedEdges /** extractededges */ 
            );
            /**Returns  the snapshot option 
             <br>  @deprecated Deprecated in NX11.0.1.  Use @link NXOpen::Drawings::ViewCreationWizardBuilder::LockMethod NXOpen::Drawings::ViewCreationWizardBuilder::LockMethod@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX11.0.1.  Use NXOpen::Drawings::ViewCreationWizardBuilder::LockMethod instead.") bool SnapShot
            (
            );
            /**Sets  the snapshot option 
             <br>  @deprecated Deprecated in NX11.0.1.  Use @link NXOpen::Drawings::ViewCreationWizardBuilder::SetLockMethod NXOpen::Drawings::ViewCreationWizardBuilder::SetLockMethod@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NX_DEPRECATED("Deprecated in NX11.0.1.  Use NXOpen::Drawings::ViewCreationWizardBuilder::SetLockMethod instead.") void SetSnapShot
            (
                bool snapShot /** snapshot */ 
            );
            /**Returns  the lock method option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::GeneralViewLockmethodOption LockMethod
            (
            );
            /**Sets  the lock method option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLockMethod
            (
                NXOpen::Preferences::GeneralViewLockmethodOption lockMethod /** lockmethod */ 
            );
            /**Returns  the tolerance option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the view representation state 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewCreationWizardBuilder::ViewRepresentations ViewRepresentation
            (
            );
            /**Sets  the view representation state 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetViewRepresentation
            (
                NXOpen::Drawings::ViewCreationWizardBuilder::ViewRepresentations viewRepresentation /** viewrepresentation */ 
            );
            /**Returns  the associative alignment toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool AssociativeAlignment
            (
            );
            /**Sets  the associative alignment toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAssociativeAlignment
            (
                bool associative /** associative */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
