#ifndef NXOpen_AME_MANAGEGLOBALMAPPINGBUILDER_HXX_INCLUDED
#define NXOpen_AME_MANAGEGLOBALMAPPINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ManageGlobalMappingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_ADPropertyData.hxx>
#include <NXOpen/AME_AMEBaseBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ManageGlobalMappingBuilder;
    }
    namespace AME
    {
        class ADPropertyData;
    }
    namespace AME
    {
        class AMEBaseBuilder;
    }
    namespace AME
    {
        class SelectAMEBaseNode;
    }
    namespace AME
    {
        class _ManageGlobalMappingBuilderBuilder;
        class ManageGlobalMappingBuilderImpl;
        /** Represents a ManageGlobalMappingBuilder class Builder   <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateManageGlobalMappingBuilder  NXOpen::AME::AMEManager::CreateManageGlobalMappingBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ManageGlobalMappingBuilder : public NXOpen::AME::AMEBaseBuilder
        {
            private: ManageGlobalMappingBuilderImpl * m_manageglobalmappingbuilder_impl;
            private: friend class  _ManageGlobalMappingBuilderBuilder;
            protected: ManageGlobalMappingBuilder();
            public: ~ManageGlobalMappingBuilder();
            /**Returns  the EClass property node selection 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNode * SelectedEclassProperty
            (
            );
            /**Returns  the selected AD property 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ADPropertyData * AdPropertyData
            (
            );
            /**Sets  the selected AD property 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAdPropertyData
            (
                NXOpen::AME::ADPropertyData * adPropData /** adpropdata */ 
            );
            /** Map selected EClass property with AD Library Object property 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapEClassPropertyToADLibraryObjectProperty
            (
                const NXString & selectedEClassProperty /** selectedeclassproperty */ ,
                const NXString & selectedADPropertyId /** selectedadpropertyid */ ,
                const NXString & selectedADPropertyName /** selectedadpropertyname */ ,
                const NXString & selectedADPropertyDataType /** selectedadpropertydatatype */ 
            );
            /** Map selected EClass property with AD Library Object property 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void MapEClassPropertyToADLibraryObjectProperty
            (
                const char * selectedEClassProperty /** selectedeclassproperty */ ,
                const char * selectedADPropertyId /** selectedadpropertyid */ ,
                const char * selectedADPropertyName /** selectedadpropertyname */ ,
                const char * selectedADPropertyDataType /** selectedadpropertydatatype */ 
            );
            /** Map selected BMECat property with AD Library Object property 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapBMECatPropertyToADLibraryObjectProperty
            (
                const NXString & selectedBMECatProperty /** selectedbmecatproperty */ ,
                const NXString & selectedADPropertyId /** selectedadpropertyid */ ,
                const NXString & selectedADPropertyName /** selectedadpropertyname */ ,
                const NXString & selectedADPropertyDataType /** selectedadpropertydatatype */ 
            );
            /** Map selected BMECat property with AD Library Object property 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void MapBMECatPropertyToADLibraryObjectProperty
            (
                const char * selectedBMECatProperty /** selectedbmecatproperty */ ,
                const char * selectedADPropertyId /** selectedadpropertyid */ ,
                const char * selectedADPropertyName /** selectedadpropertyname */ ,
                const char * selectedADPropertyDataType /** selectedadpropertydatatype */ 
            );
            /** Unmaps selected EClass property with AD Library Object property 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnMapEClassProperty
            (
            );
            /** Unmaps selected BMECat property with AD Library Object property 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnmapBMECatProperty
            (
            );
            /** Map selected EClass property value with AD Library Object property value 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapEClassPropertyValueToAdPropertyValue
            (
                const NXString & selectedEClassValue /** selectedeclassvalue */ ,
                const NXString & selectedADValue /** selectedadvalue */ 
            );
            /** Map selected EClass property value with AD Library Object property value 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void MapEClassPropertyValueToAdPropertyValue
            (
                const char * selectedEClassValue /** selectedeclassvalue */ ,
                const char * selectedADValue /** selectedadvalue */ 
            );
            /** Unmaps selected EClass property value 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnMapEClassPropertyValue
            (
                const NXString & selectedADValue /** selectedadvalue */ 
            );
            /** Unmaps selected EClass property value 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void UnMapEClassPropertyValue
            (
                const char * selectedADValue /** selectedadvalue */ 
            );
            /** Map selected EClass global values with AD Library Object property values
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapEClassGlobalValues
            (
                const NXString & selectedEClassValueListId /** selectedeclassvaluelistid */ ,
                const NXString & selectedEClassValueId /** selectedeclassvalueid */ ,
                const NXString & selAdValueName /** seladvaluename */ 
            );
            /** Map selected EClass global values with AD Library Object property values
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void MapEClassGlobalValues
            (
                const char * selectedEClassValueListId /** selectedeclassvaluelistid */ ,
                const char * selectedEClassValueId /** selectedeclassvalueid */ ,
                const char * selAdValueName /** seladvaluename */ 
            );
            /** Unmaps selected EClass values with AD Library Object property values
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnmapEClassGlobalValue
            (
                const NXString & selectedEClassValueId /** selectedeclassvalueid */ 
            );
            /** Unmaps selected EClass values with AD Library Object property values
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void UnmapEClassGlobalValue
            (
                const char * selectedEClassValueId /** selectedeclassvalueid */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
