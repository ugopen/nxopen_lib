#ifndef NXOpen_SIM_POSTCONFIGURATOR_DEFEDITORBUILDER_HXX_INCLUDED
#define NXOpen_SIM_POSTCONFIGURATOR_DEFEDITORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_PostConfigurator_DefEditorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        namespace PostConfigurator
        {
            class DefEditorBuilder;
        }
    }
    class Builder;
    namespace SIM
    {
        namespace PostConfigurator
        {
            class _DefEditorBuilderBuilder;
            class DefEditorBuilderImpl;
            /** This class is used to create a post definition editor builder.
                        Calling @link Builder::Commit Builder::Commit@endlink  on this builder will only return NULL.
                     <br> This is an abstract class, and cannot be instantiated.  <br> 
             <br>  Created in NX1953.0.0.  <br>  
            */
            class NXOPENCPP_SIMEXPORT  DefEditorBuilder : public NXOpen::Builder
            {
                /** The address leader type */
                public: enum AddressLeaderType
                {
                    AddressLeaderTypeLiteral/** literal */ ,
                    AddressLeaderTypeExpression/** expression */ 
                };

                /** The address trailer type */
                public: enum AddressTrailerType
                {
                    AddressTrailerTypeLiteral/** literal */ ,
                    AddressTrailerTypeExpression/** expression */ 
                };

                /** The address force type */
                public: enum AddressForceType
                {
                    AddressForceTypeOn/** on */ ,
                    AddressForceTypeOnce/** once */ ,
                    AddressForceTypeAlways/** always */ 
                };

                /** The address limit handle */
                public: enum AddressLimitHandleType
                {
                    AddressLimitHandleTypeTruncateValue/** truncate value */ ,
                    AddressLimitHandleTypeWarnUser/** warn user */ ,
                    AddressLimitHandleTypeAbortProcess/** abort process */ 
                };

                /** The block template item type */
                public: enum BlockItemType
                {
                    BlockItemTypeLiteral/** literal */ ,
                    BlockItemTypeAddress/** address */ ,
                    BlockItemTypeTurboAddress/** turbo address */ 
                };

                /** The format type */
                public: enum FormatType
                {
                    FormatTypeNumeric/** numeric */ ,
                    FormatTypeText/** text */ 
                };

                private: DefEditorBuilderImpl * m_defeditorbuilder_impl;
                private: friend class  _DefEditorBuilderBuilder;
                protected: DefEditorBuilder();
                public: ~DefEditorBuilder();
                /** Add new block template to custom def file, replace existing one 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void AddBlockTemplate
                (
                    const NXString & blockTemplateName /** blocktemplatename */ ,
                    std::vector<NXString> & blockAddressName /** blockaddressname */ ,
                    const std::vector<NXOpen::SIM::PostConfigurator::DefEditorBuilder::BlockItemType> & blockItemType /** blockitemtype */ ,
                    std::vector<NXString> & expression /** expression */ ,
                    const std::vector<int> & addressIndex /** addressindex */ ,
                    const std::vector<bool> & isOptional /** isoptional */ ,
                    const std::vector<bool> & hasNoWordSeparator /** hasnowordseparator */ 
                );
                /** Add new block template to custom def file, replace existing one 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void AddBlockTemplate
                (
                    const char * blockTemplateName /** blocktemplatename */ ,
                    std::vector<NXString> & blockAddressName /** blockaddressname */ ,
                    const std::vector<NXOpen::SIM::PostConfigurator::DefEditorBuilder::BlockItemType> & blockItemType /** blockitemtype */ ,
                    std::vector<NXString> & expression /** expression */ ,
                    const std::vector<int> & addressIndex /** addressindex */ ,
                    const std::vector<bool> & isOptional /** isoptional */ ,
                    const std::vector<bool> & hasNoWordSeparator /** hasnowordseparator */ 
                );
                /** Delete block template of custom def file 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void DeleteBlockTemplate
                (
                    const NXString & blockTemplateName /** blocktemplatename */ 
                );
                /** Delete block template of custom def file 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void DeleteBlockTemplate
                (
                    const char * blockTemplateName /** blocktemplatename */ 
                );
                /** Add new address to custom def file, replace existing one 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void AddAddress
                (
                    const NXString & addressName /** addressname */ ,
                    const NXString & formatName /** formatname */ ,
                    const NXString & zeroLimitName /** zerolimitname */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressForceType forceType /** forcetype */ ,
                    const NXString & leader /** leader */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLeaderType leaderType /** leadertype */ ,
                    const NXString & trailer /** trailer */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressTrailerType trailerType /** trailertype */ ,
                    bool maxIsDefine /** maxisdefine */ ,
                    double maxLimit /** maxlimit */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLimitHandleType maxHandeType /** maxhandetype */ ,
                    bool minIsDefine /** minisdefine */ ,
                    double minLimit /** minlimit */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLimitHandleType minHandeType /** minhandetype */ 
                );
                /** Add new address to custom def file, replace existing one 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void AddAddress
                (
                    const char * addressName /** addressname */ ,
                    const char * formatName /** formatname */ ,
                    const char * zeroLimitName /** zerolimitname */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressForceType forceType /** forcetype */ ,
                    const char * leader /** leader */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLeaderType leaderType /** leadertype */ ,
                    const char * trailer /** trailer */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressTrailerType trailerType /** trailertype */ ,
                    bool maxIsDefine /** maxisdefine */ ,
                    double maxLimit /** maxlimit */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLimitHandleType maxHandeType /** maxhandetype */ ,
                    bool minIsDefine /** minisdefine */ ,
                    double minLimit /** minlimit */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLimitHandleType minHandeType /** minhandetype */ 
                );
                /** Add omit to address 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void AddAddressWithOmit
                (
                    const NXString & addressName /** addressname */ ,
                    const NXString & formatName /** formatname */ ,
                    const NXString & zeroLimitName /** zerolimitname */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressForceType forceType /** forcetype */ ,
                    const NXString & leader /** leader */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLeaderType leaderType /** leadertype */ ,
                    const NXString & trailer /** trailer */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressTrailerType trailerType /** trailertype */ ,
                    bool maxIsDefine /** maxisdefine */ ,
                    double maxLimit /** maxlimit */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLimitHandleType maxHandeType /** maxhandetype */ ,
                    bool minIsDefine /** minisdefine */ ,
                    double minLimit /** minlimit */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLimitHandleType minHandeType /** minhandetype */ ,
                    const NXString & omit /** omit */ 
                );
                /** Add omit to address 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void AddAddressWithOmit
                (
                    const char * addressName /** addressname */ ,
                    const char * formatName /** formatname */ ,
                    const char * zeroLimitName /** zerolimitname */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressForceType forceType /** forcetype */ ,
                    const char * leader /** leader */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLeaderType leaderType /** leadertype */ ,
                    const char * trailer /** trailer */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressTrailerType trailerType /** trailertype */ ,
                    bool maxIsDefine /** maxisdefine */ ,
                    double maxLimit /** maxlimit */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLimitHandleType maxHandeType /** maxhandetype */ ,
                    bool minIsDefine /** minisdefine */ ,
                    double minLimit /** minlimit */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::AddressLimitHandleType minHandeType /** minhandetype */ ,
                    const char * omit /** omit */ 
                );
                /** Delete address of custom def file 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void DeleteAddress
                (
                    const NXString & addressName /** addressname */ 
                );
                /** Delete address of custom def file 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void DeleteAddress
                (
                    const char * addressName /** addressname */ 
                );
                /** Delete block address of custom def file 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void DeleteBlockAddress
                (
                    const NXString & blockTemplateName /** blocktemplatename */ ,
                    const NXString & addressName /** addressname */ 
                );
                /** Delete block address of custom def file 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void DeleteBlockAddress
                (
                    const char * blockTemplateName /** blocktemplatename */ ,
                    const char * addressName /** addressname */ 
                );
                /** Add block address to custom def file
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void AddBlockAddress
                (
                    const NXString & blockTemplateName /** blocktemplatename */ ,
                    const NXString & blockAddressName /** blockaddressname */ ,
                    int blockItemType /** blockitemtype */ ,
                    const NXString & expression /** expression */ ,
                    int addressIndex /** addressindex */ ,
                    bool isOptional /** isoptional */ ,
                    bool hasNoWordSeparator /** hasnowordseparator */ 
                );
                /** Add block address to custom def file
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void AddBlockAddress
                (
                    const char * blockTemplateName /** blocktemplatename */ ,
                    const char * blockAddressName /** blockaddressname */ ,
                    int blockItemType /** blockitemtype */ ,
                    const char * expression /** expression */ ,
                    int addressIndex /** addressindex */ ,
                    bool isOptional /** isoptional */ ,
                    bool hasNoWordSeparator /** hasnowordseparator */ 
                );
                /** Add format to custom def file, replace existing one 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void AddFormat
                (
                    const NXString & formatName /** formatname */ ,
                    bool isOutputLeaderPlusSign /** isoutputleaderplussign */ ,
                    bool isOutputLeadingZeros /** isoutputleadingzeros */ ,
                    bool isOutputDecimalPoint /** isoutputdecimalpoint */ ,
                    bool isOutputTrailingZeros /** isoutputtrailingzeros */ ,
                    int visibleDigits /** visibledigits */ ,
                    int visibleDecimals /** visibledecimals */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::FormatType formatType /** formattype */ 
                );
                /** Add format to custom def file, replace existing one 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void AddFormat
                (
                    const char * formatName /** formatname */ ,
                    bool isOutputLeaderPlusSign /** isoutputleaderplussign */ ,
                    bool isOutputLeadingZeros /** isoutputleadingzeros */ ,
                    bool isOutputDecimalPoint /** isoutputdecimalpoint */ ,
                    bool isOutputTrailingZeros /** isoutputtrailingzeros */ ,
                    int visibleDigits /** visibledigits */ ,
                    int visibleDecimals /** visibledecimals */ ,
                    NXOpen::SIM::PostConfigurator::DefEditorBuilder::FormatType formatType /** formattype */ 
                );
                /** Delete format of custom def file 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void DeleteFormat
                (
                    const NXString & formatName /** formatname */ 
                );
                /** Delete format of custom def file 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void DeleteFormat
                (
                    const char * formatName /** formatname */ 
                );
                /**Returns  the current layer. The current layer is editing by DefEditor 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString CurrentLayer
                (
                );
                /**Sets  the current layer. The current layer is editing by DefEditor 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetCurrentLayer
                (
                    const NXString & layerName /** the current layer*/
                );
                /**Sets  the current layer. The current layer is editing by DefEditor 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void SetCurrentLayer
                (
                    const char * layerName /** the current layer*/
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
