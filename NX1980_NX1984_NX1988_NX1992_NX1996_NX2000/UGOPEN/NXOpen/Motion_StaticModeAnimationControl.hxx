#ifndef NXOpen_MOTION_STATICMODEANIMATIONCONTROL_HXX_INCLUDED
#define NXOpen_MOTION_STATICMODEANIMATIONCONTROL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_StaticModeAnimationControl.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion_PostControl.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class StaticModeAnimationControl;
    }
    namespace Motion
    {
        class PostControl;
    }
    namespace Motion
    {
        class _StaticModeAnimationControlBuilder;
        class StaticModeAnimationControlImpl;
        /** Represents the @link NXOpen::Motion::StaticModeAnimationControl NXOpen::Motion::StaticModeAnimationControl@endlink   <br> An instance of this class can not be obtained  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  StaticModeAnimationControl : public NXOpen::Motion::PostControl
        {
            private: StaticModeAnimationControlImpl * m_staticmodeanimationcontrol_impl;
            private: friend class  _StaticModeAnimationControlBuilder;
            protected: StaticModeAnimationControl();
            public: ~StaticModeAnimationControl();
            /** Starts static mode animation analysis process 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void StartSolver
            (
            );
            /** Gets analysis time for static mode analysis, the initial value is the time of the last step.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetAnalysisTime
            (
            );
            /**Returns  the analysis step frame for static mode analysis, the range of the analysis step is between 0 and solution step count - 1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int AnalysisStep
            (
            );
            /**Sets  the analysis step frame for static mode analysis, the range of the analysis step is between 0 and solution step count - 1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAnalysisStep
            (
                int stepNumber /** stepnumber */ 
            );
            /**Returns  the flag if the generated result files will be deleted when eigenvector animation is finished. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool DeleteResultFiles
            (
            );
            /**Sets  the flag if the generated result files will be deleted when eigenvector animation is finished. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDeleteResultFiles
            (
                bool deleteResultFiles /** deleteresultfiles */ 
            );
            /** Calculates the static modes of the current specified step. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void CalculateStaticMode
            (
            );
            /** Gets the count of static modes from static mode calculation 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int GetStaticModeCount
            (
            );
            /**Returns  the current static mode number for the static mode analysis, the range should be between 1 and static modes count 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int CurrentStaticModeNumber
            (
            );
            /**Sets  the current static mode number for the static mode analysis, the range should be between 1 and static modes count 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCurrentStaticModeNumber
            (
                int modeNumber /** modenumber */ 
            );
            /** Gets stiffness value for the input mode number. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetStiffness
            (
                int modeNumber /** modenumber */ 
            );
            /** Gets force value for the input mode number. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetForce
            (
                int modeNumber /** modenumber */ 
            );
            /** Gets max displacement angle for the input mode number. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetMaxDisplacementAngle
            (
                int modeNumber /** modenumber */ 
            );
            /** Gets max angle scaling for the input mode number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetMaxAngleScaling
            (
                int modeNumber /** modenumber */ 
            );
            /** Gets max displacement tanslation for the input mode number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetMaxDisplacementTanslation
            (
                int modeNumber /** modenumber */ 
            );
            /** Gets max tanslation scaling for the input mode number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetMaxTanslationScaling
            (
                int modeNumber /** modenumber */ 
            );
            /** Calculates the animation result for the selected analysis step and the mode number,
                        the input scaling factor can't exceed the max angle scaling and the max translation scaling 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void CalculateAnimationResult
            (
                double scalingFactor /** scalingfactor */ ,
                int numFrames /** numframes */ 
            );
            /** Loads the animation result 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void LoadAnimationResult
            (
            );
            /** Gets the count of animation steps. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int GetAnimationStepCount
            (
            );
            /** Animation play 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationPlay
            (
            );
            /** Animation step forward 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationStepForward
            (
            );
            /** Animation pause 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationPause
            (
            );
            /** Animation step backward 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationStepBackward
            (
            );
            /** Animation step to any step, the range is between 0 and step count - 1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationStepTo
            (
                int stepNumber /** Special step */
            );
            /** Animation stop 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationStop
            (
            );
            /** Finish Eigenvector Animation 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void Finish
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
