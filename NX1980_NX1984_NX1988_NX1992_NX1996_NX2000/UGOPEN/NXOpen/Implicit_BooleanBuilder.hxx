#ifndef NXOpen_IMPLICIT_BOOLEANBUILDER_HXX_INCLUDED
#define NXOpen_IMPLICIT_BOOLEANBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Implicit_BooleanBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Implicit_OperationBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_implicit_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Implicit
    {
        class BooleanBuilder;
    }
    namespace Implicit
    {
        class OperationBuilder;
    }
    class ScCollector;
    namespace Implicit
    {
        class _BooleanBuilderBuilder;
        class BooleanBuilderImpl;
        /**
            Represents an Implicit.BooleanBuilder.
            It will create a boolean operation (Unite, Subtract or Intersect) on the selected bodies.
             <br> This is abstract class.  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_IMPLICITEXPORT  BooleanBuilder : public NXOpen::Implicit::OperationBuilder
        {
            private: BooleanBuilderImpl * m_booleanbuilder_impl;
            private: friend class  _BooleanBuilderBuilder;
            protected: BooleanBuilder();
            public: ~BooleanBuilder();
            /**Returns  the target body 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * TargetBody
            (
            );
            /**Returns  the tool body 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ToolBody
            (
            );
            /**Returns  the create blends option
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::Implicit::BooleanBuilder::BlendFactor NXOpen::Implicit::BooleanBuilder::BlendFactor@endlink  instead. If this returns value greater than 0 means blends were created. <br>  

             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::Implicit::BooleanBuilder::BlendFactor instead. If this returns value greater than 0 means blends were created.") bool CreateBlends
            (
            );
            /**Sets  the create blends option
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::Implicit::BooleanBuilder::BlendFactor NXOpen::Implicit::BooleanBuilder::BlendFactor@endlink  instead. Given any value greater than 0 indicates we need to create blends. <br>  

             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::Implicit::BooleanBuilder::BlendFactor instead. Given any value greater than 0 indicates we need to create blends.") void SetCreateBlends
            (
                bool createBlends /** createblends */ 
            );
            /**Returns  the blend factor 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int BlendFactor
            (
            );
            /**Sets  the blend factor 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetBlendFactor
            (
                int blendFactor /** blendfactor */ 
            );
            /**Returns  the keep target option
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool KeepTarget
            (
            );
            /**Sets  the keep target option
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetKeepTarget
            (
                bool keepTarget /** keeptarget */ 
            );
            /**Returns  the keep tool option
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool KeepTool
            (
            );
            /**Sets  the keep tool option
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetKeepTool
            (
                bool keepTool /** keeptool */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
