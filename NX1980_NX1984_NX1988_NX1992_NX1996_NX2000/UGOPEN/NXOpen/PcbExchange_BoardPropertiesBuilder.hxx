#ifndef NXOpen_PCBEXCHANGE_BOARDPROPERTIESBUILDER_HXX_INCLUDED
#define NXOpen_PCBEXCHANGE_BOARDPROPERTIESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PcbExchange_BoardPropertiesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_pcbexchange_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PcbExchange
    {
        class BoardPropertiesBuilder;
    }
    class Builder;
    class Expression;
    namespace PcbExchange
    {
        class _BoardPropertiesBuilderBuilder;
        class BoardPropertiesBuilderImpl;
        /** Represents a builder to create or edit board properties.  <br> To create a new instance of this class, use @link NXOpen::PcbExchange::Manager::CreateBoardPropertiesBuilder  NXOpen::PcbExchange::Manager::CreateBoardPropertiesBuilder @endlink  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_PCBEXCHANGEEXPORT  BoardPropertiesBuilder : public NXOpen::Builder
        {
            /** Defines the board stackup options. */
            public: enum BoardStackupOption
            {
                BoardStackupOptionFromPart/** from part */ ,
                BoardStackupOptionFromFile/** from file */ ,
                BoardStackupOptionFromODB/** from odb */ 
            };

            /** Defines if materials come from PCB or NX. */
            public: enum MaterialsFromOption
            {
                MaterialsFromOptionPCBMaterialLibrary/** pcbmaterial library */ ,
                MaterialsFromOptionNXMaterialLibrary/** nxmaterial library */ 
            };

            /** Defines the thermal algorithm options. */
            public: enum ThermalAlgorithmOption
            {
                ThermalAlgorithmOptionDiscretized/** discretized */ ,
                ThermalAlgorithmOptionEquivalent/** equivalent */ 
            };

            /** Defines the Structural algorithm option. */
            public: enum StructuralAlgorithmOption
            {
                StructuralAlgorithmOptionEquivalent/** equivalent */ 
            };

            private: BoardPropertiesBuilderImpl * m_boardpropertiesbuilder_impl;
            private: friend class  _BoardPropertiesBuilderBuilder;
            protected: BoardPropertiesBuilder();
            public: ~BoardPropertiesBuilder();
            /**Returns  the thermal algorithm. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::BoardPropertiesBuilder::ThermalAlgorithmOption ThermalAlgorithm
            (
            );
            /**Sets  the thermal algorithm. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetThermalAlgorithm
            (
                NXOpen::PcbExchange::BoardPropertiesBuilder::ThermalAlgorithmOption algorithm /** algorithm */ 
            );
            /**Returns  the structural algorithm. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::BoardPropertiesBuilder::StructuralAlgorithmOption StructuralAlgorithm
            (
            );
            /**Sets  the structural algorithm. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetStructuralAlgorithm
            (
                NXOpen::PcbExchange::BoardPropertiesBuilder::StructuralAlgorithmOption algorithm /** algorithm */ 
            );
            /**Returns  the board stackup. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::BoardPropertiesBuilder::BoardStackupOption BoardStackup
            (
            );
            /**Sets  the board stackup. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetBoardStackup
            (
                NXOpen::PcbExchange::BoardPropertiesBuilder::BoardStackupOption boardStackup /** boardstackup */ 
            );
            /**Returns  the board stackup file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardStackupFile
            (
            );
            /**Sets  the board stackup file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetBoardStackupFile
            (
                const NXString & boardStackupFile /** boardstackupfile */ 
            );
            /**Sets  the board stackup file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetBoardStackupFile
            (
                const char * boardStackupFile /** boardstackupfile */ 
            );
            /**Returns  the board stackup ODB folder. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardStackupODBFolder
            (
            );
            /**Sets  the board stackup ODB folder. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetBoardStackupODBFolder
            (
                const NXString & boardStackupODBFolder /** boardstackupodbfolder */ 
            );
            /**Sets  the board stackup ODB folder. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetBoardStackupODBFolder
            (
                const char * boardStackupODBFolder /** boardstackupodbfolder */ 
            );
            /**Returns  the flag indicating whether to read vias from file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReadViasFromFile
            (
            );
            /**Sets  the flag indicating whether to read vias from file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetReadViasFromFile
            (
                bool readViasFromFile /** readviasfromfile */ 
            );
            /**Returns  the materials source. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::BoardPropertiesBuilder::MaterialsFromOption MaterialsFrom
            (
            );
            /**Sets  the materials source. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetMaterialsFrom
            (
                NXOpen::PcbExchange::BoardPropertiesBuilder::MaterialsFromOption materialsFrom /** materialsfrom */ 
            );
            /**Returns  the dielectric material when materials are from the PCB material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int DielectricPcbMaterial
            (
            );
            /**Sets  the dielectric material when materials are from the PCB material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetDielectricPcbMaterial
            (
                int dielectricPcbMaterial /** dielectricpcbmaterial */ 
            );
            /**Returns  the trace material when materials are from the PCB material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int TracePcbMaterial
            (
            );
            /**Sets  the trace material when materials are from the PCB material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetTracePcbMaterial
            (
                int tracePcbMaterial /** tracepcbmaterial */ 
            );
            /**Returns  the via material when materials are from the PCB material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int ViaPcbMaterial
            (
            );
            /**Sets  the via material when materials are from the PCB material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetViaPcbMaterial
            (
                int viaPcbMaterial /** viapcbmaterial */ 
            );
            /**Returns  the dielectric material when materials are from the NX material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int DielectricNxMaterial
            (
            );
            /**Sets  the dielectric material when materials are from the NX material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetDielectricNxMaterial
            (
                int dielectricNxMaterial /** dielectricnxmaterial */ 
            );
            /**Returns  the trace material when materials are from theNX material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int TraceNxMaterial
            (
            );
            /**Sets  the trace material when materials are from theNX material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetTraceNxMaterial
            (
                int traceNxMaterial /** tracenxmaterial */ 
            );
            /**Returns  the via material when materials are from the NX material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int ViaNxMaterial
            (
            );
            /**Sets  the via material when materials are from the NX material library. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetViaNxMaterial
            (
                int viaNxMaterial /** vianxmaterial */ 
            );
            /**Returns  the flag indicating whether the advanced options are from the part. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool AdvancedOptionsFromPart
            (
            );
            /**Sets  the flag indicating whether the advanced options are from the part. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetAdvancedOptionsFromPart
            (
                bool advancedOptionsFromPart /** advancedoptionsfrompart */ 
            );
            /**Returns  the flag indicating whether the advanced options are from the file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool AdvancedOptionsFromFile
            (
            );
            /**Sets  the flag indicating whether the advanced options are from the file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetAdvancedOptionsFromFile
            (
                bool advancedOptionsFromFile /** advancedoptionsfromfile */ 
            );
            /**Returns  the default hole plating thickness. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DefaultHolePlatingThickness
            (
            );
            /**Returns  the number of calculation points. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfCalculationPoints
            (
            );
            /**Sets  the number of calculation points. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetNumberOfCalculationPoints
            (
                int numberOfCalculationPoints /** numberofcalculationpoints */ 
            );
            /**Returns  the calculation points precision. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int CalculationPointsPrecision
            (
            );
            /**Sets  the calculation points precision. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetCalculationPointsPrecision
            (
                int calculationPointsPrecision /** calculationpointsprecision */ 
            );
            /**Returns  the board property file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardPropertyFile
            (
            );
            /**Sets  the board property file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetBoardPropertyFile
            (
                const NXString & boardPropertyFile /** boardpropertyfile */ 
            );
            /**Sets  the board property file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetBoardPropertyFile
            (
                const char * boardPropertyFile /** boardpropertyfile */ 
            );
            /**Returns  the flag indicating whether to show the calculation report after the calculation. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool ViewCalculationReport
            (
            );
            /**Sets  the flag indicating whether to show the calculation report after the calculation. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetViewCalculationReport
            (
                bool viewCalculationReport /** viewcalculationreport */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
