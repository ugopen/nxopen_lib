#ifndef NXOpen_ANNOTATIONS_HOLETABLESETTINGSHOLEFILTERSBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_HOLETABLESETTINGSHOLEFILTERSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_HoleTableSettingsHoleFiltersBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class HoleTableSettingsHoleFiltersBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _HoleTableSettingsHoleFiltersBuilderBuilder;
        class HoleTableSettingsHoleFiltersBuilderImpl;
        /** Represents a @link NXOpen::Annotations::HoleTableSettingsHoleFiltersBuilder NXOpen::Annotations::HoleTableSettingsHoleFiltersBuilder@endlink  
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  HoleTableSettingsHoleFiltersBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** the Scope enum */
            public: enum ScopeType
            {
                ScopeTypeOneSidedHoles/** One-sided Holes */,
                ScopeTypeTwoSidedHoles/** Two-sided Holes */
            };

            private: HoleTableSettingsHoleFiltersBuilderImpl * m_holetablesettingsholefiltersbuilder_impl;
            private: friend class  _HoleTableSettingsHoleFiltersBuilderBuilder;
            protected: HoleTableSettingsHoleFiltersBuilder();
            public: ~HoleTableSettingsHoleFiltersBuilder();
            /**Returns  the through holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ThroughHoles
            (
            );
            /**Sets  the through holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetThroughHoles
            (
                bool throughHoles /** throughholes */ 
            );
            /**Returns  the blind holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool BlindHoles
            (
            );
            /**Sets  the blind holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetBlindHoles
            (
                bool blindHoles /** blindholes */ 
            );
            /**Returns  the counterbored holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool CounterboredHoles
            (
            );
            /**Sets  the counterbored holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCounterboredHoles
            (
                bool counterboredHoles /** counterboredholes */ 
            );
            /**Returns  the countersunk holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool CountersunkHoles
            (
            );
            /**Sets  the countersunk holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCountersunkHoles
            (
                bool countersunkHoles /** countersunkholes */ 
            );
            /**Returns  the threaded holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ThreadedHoles
            (
            );
            /**Sets  the threaded holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetThreadedHoles
            (
                bool threadedHoles /** threadedholes */ 
            );
            /**Returns  the combination holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool CombinationHoles
            (
            );
            /**Sets  the combination holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCombinationHoles
            (
                bool combinationHoles /** combinationholes */ 
            );
            /**Returns  the wire EDM start holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool WireEDMStartHoles
            (
            );
            /**Sets  the wire EDM start holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetWireEDMStartHoles
            (
                bool wireEDMStartHoles /** wireedmstartholes */ 
            );
            /**Returns  the modeling sketch circles 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ModelingSketchCircles
            (
            );
            /**Sets  the modeling sketch circles 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetModelingSketchCircles
            (
                bool modelingSketchCircles /** modelingsketchcircles */ 
            );
            /**Returns  the drafting sketch circles 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DraftingSketchCircles
            (
            );
            /**Sets  the drafting sketch circles 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDraftingSketchCircles
            (
                bool draftingSketchCircles /** draftingsketchcircles */ 
            );
            /**Returns  the scope 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::HoleTableSettingsHoleFiltersBuilder::ScopeType Scope
            (
            );
            /**Sets  the scope 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetScope
            (
                NXOpen::Annotations::HoleTableSettingsHoleFiltersBuilder::ScopeType scope /** scope */ 
            );
            /**Returns  the countersink angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double CountersinkAngle
            (
            );
            /**Sets  the countersink angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCountersinkAngle
            (
                double countersinkAngle /** countersinkangle */ 
            );
            /**Returns  the nose angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double NoseAngle
            (
            );
            /**Sets  the nose angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetNoseAngle
            (
                double noseAngle /** noseangle */ 
            );
            /**Returns  the include partial holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludePartialHoles
            (
            );
            /**Sets  the include partial holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetIncludePartialHoles
            (
                bool includePartialHoles /** includepartialholes */ 
            );
            /**Returns  the partial hole angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double PartialHoleAngle
            (
            );
            /**Sets  the partial hole angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPartialHoleAngle
            (
                double partialHoleAngle /** partialholeangle */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
