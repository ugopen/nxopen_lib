#ifndef NXOpen_ROUTINGCOMMON_DERIVEDPATHBUILDER_HXX_INCLUDED
#define NXOpen_ROUTINGCOMMON_DERIVEDPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     RoutingCommon_DerivedPathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_routingcommon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace RoutingCommon
    {
        class DerivedPathBuilder;
    }
    class Builder;
    class Section;
    namespace RoutingCommon
    {
        class _DerivedPathBuilderBuilder;
        class DerivedPathBuilderImpl;

        /// \cond NX_NO_DOC 
        /** Builder for creating Routing segments derived from selected modeling curves.  <br> To create a new instance of this class, use @link NXOpen::RoutingCommon::BuilderFactory::CreateDerivedPathBuilder  NXOpen::RoutingCommon::BuilderFactory::CreateDerivedPathBuilder @endlink  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGCOMMONEXPORT  DerivedPathBuilder : public NXOpen::Builder
        {
            /** Defines whether the derived segments should be associative to the original selected curves. */

            /// \cond NX_NO_DOC 
            public: enum AssociativityType
            {
                AssociativityTypeAssociative/** Make the Routing segments associative to the selected curves. */,
                AssociativityTypeCopy/** Make the Routing segments copies of the selected curves. */
            };


            /// \endcond 
            /** Defines whether the selected curves should be hidden or left visible. */

            /// \cond NX_NO_DOC 
            public: enum SelectedCurveStatus
            {
                SelectedCurveStatusVisible/** Leave the selected curves visible. */,
                SelectedCurveStatusHidden/** Hide (blank) the selected curves. */
            };


            /// \endcond 
            private: DerivedPathBuilderImpl * m_derivedpathbuilder_impl;
            private: friend class  _DerivedPathBuilderBuilder;
            protected: DerivedPathBuilder();
            public: ~DerivedPathBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the visible status of the selected curves. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::DerivedPathBuilder::SelectedCurveStatus SelectedCurveVisibility
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the visible status of the selected curves. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetSelectedCurveVisibility
            (
                NXOpen::RoutingCommon::DerivedPathBuilder::SelectedCurveStatus status /** status */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the associativity of the Routing segments created from the selected curves. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::DerivedPathBuilder::AssociativityType Associativity
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the associativity of the Routing segments created from the selected curves. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAssociativity
            (
                NXOpen::RoutingCommon::DerivedPathBuilder::AssociativityType associativity /** associativity */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the number of points to use to approximate unassociative splines. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int NumberOfPoints
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the number of points to use to approximate unassociative splines. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetNumberOfPoints
            (
                int nPoints /** npoints */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the section containing the selected curves. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Section * CurveSelection
            (
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
