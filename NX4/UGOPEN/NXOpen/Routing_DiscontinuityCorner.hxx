#ifndef NXOpen_ROUTING_DISCONTINUITYCORNER_HXX_INCLUDED
#define NXOpen_ROUTING_DISCONTINUITYCORNER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DiscontinuityCorner.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Routing_Corner.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class DiscontinuityCorner;
    }
    namespace Routing
    {
        class Corner;
    }
    namespace Routing
    {
        class SplineSegment;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _DiscontinuityCornerBuilder;
        /** 
                The Routing DiscontinuityCorner defines a position at a routing Control Point
                where two segments meet but are disconnected.
             */
        class NXOPENCPPEXPORT DiscontinuityCorner : public Routing::Corner
        {
            private: friend class  _DiscontinuityCornerBuilder;
            protected: DiscontinuityCorner();
            /** Sets the segments of a discontinuity corner  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDiscCornerSegements
            (
                NXOpen::Routing::SplineSegment * segment1 /** The first segments for the discontinuity corner. */,
                NXOpen::Routing::SplineSegment * segment2 /** The 2nd segments for the discontinuity corner. */
            );
            /** Gets the segments of a discontinuity corner  @return  The segments for the discontinuity corner.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::SplineSegment *> GetDiscCornerSegements
            (
            );
            /** Gets the stocks associated to the discontinuity corner.  @return  Stocks associated to the discontinuity corner  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::Stock *> GetDiscCornerStocks
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
