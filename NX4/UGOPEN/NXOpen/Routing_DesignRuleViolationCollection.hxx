#ifndef NXOpen_ROUTING_DESIGNRULEVIOLATIONCOLLECTION_HXX_INCLUDED
#define NXOpen_ROUTING_DESIGNRULEVIOLATIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DesignRuleViolationCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class DesignRuleViolationCollection;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Routing
    {
        class DesignRuleViolation;
    }
    class NXObject;
    namespace Routing
    {
        /** Represents collections of @link Routing::DesignRuleViolation Routing::DesignRuleViolation@endlink   <br> To obtain an instance of this class, refer to @link RouteManager RouteManager@endlink  <br> */
        class NXOPENCPPEXPORT DesignRuleViolationCollection : public TaggedObjectCollection
        {
            /** Design Rule Mode */
            public: enum Mode
            {
                ModeConcurrent/** Executes design rules on all concurrently logged objects.
                                                              Use LogConcurrent method on @link Routing::RouteManager Routing::RouteManager@endlink  
                                                              to concurrently logged objects and GetConcurrent method to get all the 
                                                              concurrent objects */,
                ModeInteractive/** Execute design rules during next interactive check */,
                ModeBatch/** Executes design rules in a batch process */
            };

            /** Design Rule reason */
            public: enum Reason
            {
                ReasonCreatePath/** */,
                ReasonHealPath/** */,
                ReasonAssignCorner/** */,
                ReasonAssignStock/** */,
                ReasonRemoveStock/** */,
                ReasonStockStyle/** */,
                ReasonPlacePart/** */,
                ReasonCreateFab/** */,
                ReasonQualifyPart/** */,
                ReasonMovePath/** */,
                ReasonCopyPath/** */,
                ReasonDeletePath/** */,
                ReasonSubdivideSeg/** */,
                ReasonSimplifyPath/** */,
                ReasonRemovePart/** */,
                ReasonMovePart/** */,
                ReasonEditCharx/** */,
                ReasonInteractive/** */,
                ReasonBatch/** */,
                ReasonOrientStock/** */,
                ReasonUnifyPath/** */,
                ReasonTransformPath/** */,
                ReasonOffsetPath/** */,
                ReasonAutoRoutePin/** */,
                ReasonManualRoutePin/** */,
                ReasonAutoRouteComp/** */,
                ReasonManualRouteComp/** */
            };

            private: NXOpen::Routing::RouteManager* m_owner;
            public: explicit DesignRuleViolationCollection(NXOpen::Routing::RouteManager *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            class iterator
            {
            public:
                typedef Routing::DesignRuleViolation * value_type;
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Routing::DesignRuleViolationCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                NXOPENCPPEXPORT  value_type operator * ();
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Routing::DesignRuleViolationCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            iterator begin();
            iterator end()
            {
                return iterator(this);
            }
            /** Executes design rules and returns all the violations of the rule  @return  Violations  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::DesignRuleViolation *> ReasonExecuteRule
            (
                NXOpen::Routing::DesignRuleViolationCollection::Mode mode /** Design Rule Mode */,
                NXOpen::Routing::DesignRuleViolationCollection::Reason reason /** Design Rule Reason */,
                const std::vector<NXOpen::NXObject *> & objs /**Objects 
                                                                            to check the design rule violation against*/
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
