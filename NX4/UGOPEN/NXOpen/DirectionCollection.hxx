#ifndef NXOpen_DIRECTIONCOLLECTION_HXX_INCLUDED
#define NXOpen_DIRECTIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DirectionCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Direction.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class DirectionCollection;
    class BasePart;
    class Direction;
    class Conic;
    class DatumAxis;
    class DatumPlane;
    class Edge;
    class Face;
    class ICurve;
    class Line;
    class Point;
    class Scalar;
    class Sketch;
    class Xform;
    /** Represents a collection of @link Direction Direction@endlink s.  <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
    class NXOPENCPPEXPORT DirectionCollection : public TaggedObjectCollection
    {
        private: NXOpen::BasePart* m_owner;
        public: explicit DirectionCollection(NXOpen::BasePart *owner): m_owner(owner)
        {
        }
        public: tag_t Tag() const;
        class iterator
        {
        public:
            typedef Direction * value_type;
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }
            explicit iterator(NXOpen::DirectionCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }
            iterator(const iterator &other)
            {
                copy(other);
            }
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            NXOPENCPPEXPORT  value_type operator * ();
            iterator & operator ++()
            {
                next();
                return *this;
            }
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::DirectionCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        iterator begin();
        iterator end()
        {
            return iterator(this);
        }
        /** Creates a @link Direction Direction@endlink  without parameters.  @return    <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            const NXOpen::Point3d & origin /** */,
            const NXOpen::Vector3d & vector /** */,
            NXOpen::SmartObject::UpdateOption update /** */
        );
        /** Creates a @link Direction Direction@endlink  using a @link Line Line@endlink .  @return    <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Line * line /**  */,
            NXOpen::Sense sense /** */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Creates a @link Direction Direction@endlink  using a linear @link Edge Edge@endlink  or
               the axis of a conical @link Edge Edge@endlink .  @return    <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Edge * edge /** */,
            NXOpen::Sense sense /** */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Creates a @link Direction Direction@endlink  using a @link DatumAxis DatumAxis@endlink .  @return    <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::DatumAxis * datum_axis /**  */,
            NXOpen::Sense sense /** */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Creates a @link Direction Direction@endlink  using two @link Point Point@endlink s.  @return    <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Point * start_point /** */,
            NXOpen::Point * end_point /** */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Creates a @link Direction Direction@endlink  using the normal of a @link Face Face@endlink  or
               the axis of a cylindrical @link Face Face@endlink .  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Face * face /**   */,
            NXOpen::Sense sense /**  */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Creates a @link Direction Direction@endlink  using the normal of a @link DatumPlane DatumPlane@endlink .  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::DatumPlane * plane /**  */,
            NXOpen::Sense sense /**  */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Creates a @link Direction Direction@endlink  using the normal of a @link Sketch Sketch@endlink .  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Sketch * plane /**  */,
            NXOpen::Sense sense /**  */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Creates a @link Direction Direction@endlink  using the axis of a @link Conic Conic@endlink .  @return    <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Conic * conic /**  */,
            NXOpen::Sense sense /** */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Creates a @link Direction Direction@endlink  on a @link ICurve ICurve@endlink  using a
               @link Scalar Scalar@endlink  representing the t parameter.  @return    <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::ICurve * icurve /** @link Curve Curve@endlink  or @link Edge Edge@endlink  */,
            NXOpen::Scalar * t /** */,
            NXOpen::Direction::OnCurveOption option /**  */,
            NXOpen::Sense sense /**  */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Creates a Direction on a @link Face Face@endlink  using two 
               @link Scalar Scalar@endlink s representing the u and v parameters.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Face * face /** */,
            NXOpen::Scalar * u /** */,
            NXOpen::Scalar * v /** */,
            NXOpen::Sense sense /** */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Creates a @link Direction Direction@endlink  using an extract
               @link Direction Direction@endlink  with optional @link Xform Xform@endlink .  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Direction * direction_extract /** */,
            NXOpen::Xform * xform /** Optional Xform */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Creates a @link Direction Direction@endlink  based upon the parameters used
               to define the point. If the direction can be defined solely by the
               point then the vector parameter is ignored.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Point * point /** */,
            const NXOpen::Vector3d & vector /** */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
