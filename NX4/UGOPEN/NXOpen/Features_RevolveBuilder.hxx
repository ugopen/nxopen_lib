#ifndef NXOpen_FEATURES_REVOLVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_REVOLVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_RevolveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class RevolveBuilder;
    }
    class Axis;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class FeatureOffset;
    }
    namespace GeometricUtilities
    {
        class FeatureOptions;
    }
    namespace GeometricUtilities
    {
        class Limits;
    }
    class Section;
    namespace Features
    {
        class _RevolveBuilderBuilder;
        /** Represents a revolve builder. 
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateRevolveBuilder Features::FeatureCollection::CreateRevolveBuilder@endlink  <br> */
        class NXOPENCPPEXPORT RevolveBuilder : public Features::FeatureBuilder
        {
            private: friend class  _RevolveBuilderBuilder;
            protected: RevolveBuilder();
            /**Sets  the section
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSection
            (
                NXOpen::Section * section /** This parameter may not be NULL.*/
            );
            /**Returns  the section
                 <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Section() Section@endlink instead.
            @deprecated
            */
            public: NXOpen::Section * GetSection
            (
            ) { return this->Section(); }
            /**Sets  the revolve axis
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAxis
            (
                NXOpen::Axis * axis /** This parameter may not be NULL.*/
            );
            /**Returns  the revolve axis
                 <br> License requirements : None */
            public: NXOpen::Axis * Axis
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Axis() Axis@endlink instead.
            @deprecated
            */
            public: NXOpen::Axis * GetAxis
            (
            ) { return this->Axis(); }
            /**Returns  the revolve offset
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FeatureOffset * Offset
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Offset() Offset@endlink instead.
            @deprecated
            */
            public: NXOpen::GeometricUtilities::FeatureOffset * GetOffset
            (
            ) { return this->Offset(); }
            /**Returns  the revolve boolean
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link BooleanOperation() BooleanOperation@endlink instead.
            @deprecated
            */
            public: NXOpen::GeometricUtilities::BooleanOperation * GetBooleanOperation
            (
            ) { return this->BooleanOperation(); }
            /**Returns  the revolve tolerance
                 <br> License requirements : None */
            public: double Tolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Tolerance() Tolerance@endlink instead.
            @deprecated
            */
            public: double GetTolerance
            (
            ) { return this->Tolerance(); }
            /**Sets  the revolve tolerance
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** */
            );
            /**Returns  the limit data
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Limits * Limits
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Limits() Limits@endlink instead.
            @deprecated
            */
            public: NXOpen::GeometricUtilities::Limits * GetLimits
            (
            ) { return this->Limits(); }
            /**Returns  the feature options
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FeatureOptions * FeatureOptions
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
