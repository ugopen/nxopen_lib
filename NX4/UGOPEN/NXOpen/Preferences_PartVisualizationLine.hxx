#ifndef NXOpen_PREFERENCES_PARTVISUALIZATIONLINE_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTVISUALIZATIONLINE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartVisualizationLine.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class PartVisualizationLine;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    namespace Preferences
    {
        /** Represents the set of visualization preferences under Line tab applicable to part  <br> To obtain an instance of this class, refer to @link PartPreferences PartPreferences@endlink  <br> */
        class NXOPENCPPEXPORT PartVisualizationLine
        {
            /** Describes whether Line Font Display type is hardware or software. */
            public: enum LineFontDisplayType
            {
                LineFontDisplayTypeSoftware/**  */,
                LineFontDisplayTypeHardware/**  */
            };

            private: NXOpen::Preferences::PartPreferences* m_owner;
            public: explicit PartVisualizationLine(NXOpen::Preferences::PartPreferences *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /**Returns  the line font display. Controls the line font. The Hardware option uses the system graphics library to generate the 
            seven standard line fonts. Selecting hardware line fonts can improve drawing performance and reduce memory consumption. 
            The Software option generates non-solid curves with the values entered for the Dash, Space, and Symbol size.  <br> License requirements : None */
            public: NXOpen::Preferences::PartVisualizationLine::LineFontDisplayType LineFontDisplay
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link LineFontDisplay() LineFontDisplay@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::PartVisualizationLine::LineFontDisplayType GetLineFontDisplay
            (
            ) { return this->LineFontDisplay(); }
            /**Sets  the line font display. Controls the line font. The Hardware option uses the system graphics library to generate the 
            seven standard line fonts. Selecting hardware line fonts can improve drawing performance and reduce memory consumption. 
            The Software option generates non-solid curves with the values entered for the Dash, Space, and Symbol size.  <br> License requirements : None */
            public: void SetLineFontDisplay
            (
                NXOpen::Preferences::PartVisualizationLine::LineFontDisplayType line_font_display /**  */
            );
            /**Returns  the dash size. Sets the length of a segment of a dashed curve.  <br> License requirements : None */
            public: double DashSize
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DashSize() DashSize@endlink instead.
            @deprecated
            */
            public: double GetDashSize
            (
            ) { return this->DashSize(); }
            /**Sets  the dash size. Sets the length of a segment of a dashed curve.  <br> License requirements : None */
            public: void SetDashSize
            (
                double line_dash_size /**  */
            );
            /**Returns  the space size. Sets the distance between two segments of a dashed curve.  <br> License requirements : None */
            public: double SpaceSize
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link SpaceSize() SpaceSize@endlink instead.
            @deprecated
            */
            public: double GetSpaceSize
            (
            ) { return this->SpaceSize(); }
            /**Sets  the space size. Sets the distance between two segments of a dashed curve.  <br> License requirements : None */
            public: void SetSpaceSize
            (
                double line_space_size /**  */
            );
            /**Returns  the symbol size. Controls the displayed size of symbols used in software line fonts.  <br> License requirements : None */
            public: double SymbolSize
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link SymbolSize() SymbolSize@endlink instead.
            @deprecated
            */
            public: double GetSymbolSize
            (
            ) { return this->SymbolSize(); }
            /**Sets  the symbol size. Controls the displayed size of symbols used in software line fonts.  <br> License requirements : None */
            public: void SetSymbolSize
            (
                double line_symbol_size /**  */
            );
            /**Returns  the curve tolerance. Specifies the level of detail for the current Display Mode.  <br> License requirements : None */
            public: double CurveTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link CurveTolerance() CurveTolerance@endlink instead.
            @deprecated
            */
            public: double GetCurveTolerance
            (
            ) { return this->CurveTolerance(); }
            /**Sets  the curve tolerance. Specifies the level of detail for the current Display Mode.  <br> License requirements : None */
            public: void SetCurveTolerance
            (
                double line_curve_tolerance /**  */
            );
            /**Returns  the show widths option. If true, the object width attribute determines the displayed width of lines or curves used 
            to represent an object.If false, all curves are drawn thin, regardless of object width settings.  <br> License requirements : None */
            public: bool ShowWidths
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ShowWidths() ShowWidths@endlink instead.
            @deprecated
            */
            public: bool GetShowWidths
            (
            ) { return this->ShowWidths(); }
            /**Sets  the show widths option. If true, the object width attribute determines the displayed width of lines or curves used 
            to represent an object.If false, all curves are drawn thin, regardless of object width settings.  <br> License requirements : None */
            public: void SetShowWidths
            (
                bool IsShowWidthOn /**  */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
