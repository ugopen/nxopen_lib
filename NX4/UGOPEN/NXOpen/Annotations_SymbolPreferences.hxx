#ifndef NXOpen_ANNOTATIONS_SYMBOLPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_SYMBOLPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_SymbolPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class SymbolPreferences;
    }
    namespace Annotations
    {
        /** Represents symbol preferences */
        class NXOPENCPPEXPORT SymbolPreferences : public TransientObject
        {
            public: explicit SymbolPreferences(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~SymbolPreferences();
            /**Returns  the id symbol size  <br> License requirements : None */
            public: double IdSymbolSize
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link IdSymbolSize() IdSymbolSize@endlink instead.
            @deprecated
            */
            public: double GetIdSymbolSize
            (
            ) { return this->IdSymbolSize(); }
            /**Sets  the id symbol size  <br> License requirements : None */
            public: void SetIdSymbolSize
            (
                double id_symbol_size /** */
            );
            /** Returns the id symbol color, font, and width  @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetIdSymbolCfw
            (
            );
            /** Sets the id symbol color, font, and width   <br> License requirements : None */
            public: void SetIdSymbolCfw
            (
                const NXOpen::Annotations::LineCfw & id_symbol_cfw /** */
            );
            /** Returns the user defined symbol color, font, and width   @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetUserDefinedSymbolCfw
            (
            );
            /** Sets the user defined symbol color, font, and width   <br> License requirements : None */
            public: void SetUserDefinedSymbolCfw
            (
                const NXOpen::Annotations::LineCfw & user_defined_symbol_cfw /** */
            );
            /** Returns the centerline symbol color, font, and width   @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetCenterlineSymbolCfw
            (
            );
            /** Sets the centerline symbol color, font, and width   <br> License requirements : None */
            public: void SetCenterlineSymbolCfw
            (
                const NXOpen::Annotations::LineCfw & centerline_symbol_cfw /** */
            );
            /** Returns the intersection symbol color, font, and width   @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetIntersectionSymbolCfw
            (
            );
            /** Sets the intersection symbol color, font, and width   <br> License requirements : None */
            public: void SetIntersectionSymbolCfw
            (
                const NXOpen::Annotations::LineCfw & intersection_symbol_cfw /** */
            );
            /** Returns the target symbol color, font, and width   @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetTargetSymbolCfw
            (
            );
            /** Sets the target symbol color, font, and width   <br> License requirements : None */
            public: void SetTargetSymbolCfw
            (
                const NXOpen::Annotations::LineCfw & target_symbol_cfw /** */
            );
            /** Returns the gdt symbol color, font, and width   @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetGdtSymbolCfw
            (
            );
            /** Sets the gdt symbol color, font, and width   <br> License requirements : None */
            public: void SetGdtSymbolCfw
            (
                const NXOpen::Annotations::LineCfw & gdt_symbol_cfw /** */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
