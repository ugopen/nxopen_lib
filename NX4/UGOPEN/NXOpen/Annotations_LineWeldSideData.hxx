#ifndef NXOpen_ANNOTATIONS_LINEWELDSIDEDATA_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LINEWELDSIDEDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LineWeldSideData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/LineWelds.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class LineWeldSideData;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        /** Represents line weld side data */
        class NXOPENCPPEXPORT LineWeldSideData : public TransientObject
        {
            public: explicit LineWeldSideData(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~LineWeldSideData();
            /**Returns  the weld finish method  <br> License requirements : None */
            public: NXOpen::Annotations::FinishMethod FinishMethod
            (
            );
            /**Sets  the weld finish method  <br> License requirements : None */
            public: void SetFinishMethod
            (
                NXOpen::Annotations::FinishMethod finish_method /** New finish method */
            );
            /**Returns  the weld supplementary symbol  <br> License requirements : None */
            public: NXOpen::Annotations::SupplementarySymbol SupplementarySymbol
            (
            );
            /**Sets  the weld supplementary symbol  <br> License requirements : None */
            public: void SetSupplementarySymbol
            (
                NXOpen::Annotations::SupplementarySymbol supplementary_symbol /** New supplementary weld symbol */
            );
            /**Returns  the groove angle  <br> License requirements : None */
            public: NXString GrooveAngle
            (
            );
            /**Sets  the groove angle  <br> License requirements : None */
            public: void SetGrooveAngle
            (
                const NXString & groove_angle /** New groove angle */
            );
            /**Returns  the depth or root opening or number of welds as the case may be  <br> License requirements : None */
            public: NXString DepthRootOpeningNumberOfWelds
            (
            );
            /**Sets  the depth or root opening or number of welds as the case may be  <br> License requirements : None */
            public: void SetDepthRootOpeningNumberOfWelds
            (
                const NXString & depth_root_opening_num_weld /** New depth or root opening or number of welds */
            );
            /**Returns  the weld size letter code (ISO and DIN only)  <br> License requirements : None */
            public: NXOpen::Annotations::SizeLetterCode SizeLetterCode
            (
            );
            /**Sets  the weld size letter code (ISO and DIN only)  <br> License requirements : None */
            public: void SetSizeLetterCode
            (
                NXOpen::Annotations::SizeLetterCode size_letter_code /** New size letter code */
            );
            /**Returns  the weld size  <br> License requirements : None */
            public: NXString Size
            (
            );
            /**Sets  the weld size  <br> License requirements : None */
            public: void SetSize
            (
                const NXString & size /** New weld size */
            );
            /**Returns  the elementary weld symbol  <br> License requirements : None */
            public: NXOpen::Annotations::Symbol Symbol
            (
            );
            /**Sets  the elementary weld symbol  <br> License requirements : None */
            public: void SetSymbol
            (
                NXOpen::Annotations::Symbol symbol /** New weld symbol */
            );
            /**Returns  the weld length and pitch   <br> License requirements : None */
            public: NXString LengthPitch
            (
            );
            /**Sets  the weld length and pitch   <br> License requirements : None */
            public: void SetLengthPitch
            (
                const NXString & length_pitch /** New weld length and pitch */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
