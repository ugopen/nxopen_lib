#ifndef NXOpen_ROUTING_OVERSTOCKAPPLICATIONCOLLECTION_HXX_INCLUDED
#define NXOpen_ROUTING_OVERSTOCKAPPLICATIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_OverstockApplicationCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class OverstockApplicationCollection;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Routing
    {
        class OverstockApplication;
    }
    class Expression;
    class Point;
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        /** Available operations to perform for Overstock Applications */
        enum Operation
        {
            OperationCreate/** Create overstock */,
            OperationEdit/** Edit existing overstock */
        };

        /** Available application methods for Overstock Applications for a given Overstock */
        enum Method
        {
            MethodEntireSegments/** Cover all given segments */,
            MethodInterval/** Cover the given segments intermittently */,
            MethodPointToPoint/** Cover the given segments from one point to another */,
            MethodPointAndLength/** Cover the given segments a point for a length */
        };

        /** Available overstock stock types for Overstock Applications for a given Overstock */
        enum StockType
        {
            StockTypeUnknown/** Unknown overstock type */,
            StockTypeFixedCrossSection/** Fixed cross section, e.g., conduit */,
            StockTypeWrapped/** Wrapped, e.g., electrical tape */,
            StockTypeSleeved/** Sleeved, e.g., woven nylon */,
            StockTypeFlagged/** Flagged, e.g., paper flag */
        };

        /** Available application methods for wrapped overstock */
        enum WrapApplicationType
        {
            WrapApplicationTypeUnknown/** Unknown wrap application */,
            WrapApplicationTypeSpot/** Spot wrap application, i.e., 100% overlap */,
            WrapApplicationTypeOverlapped/** Overlapping spiral wrap application, e.g., [0-100)% overlap */,
            WrapApplicationTypeGapped/** Barber pole spiral wrap application, e.g., no overlap */
        };

        /** Available definitions for the point location for the Point and Length application method */
        enum PointDefinition
        {
            PointDefinitionStart/** The point defines the start of the overstock application. */,
            PointDefinitionMiddle/** The point defines the middle of the overstock application. */,
            PointDefinitionEnd/** The point defines the end of the overstock application. */
        };

    }
    namespace Routing
    {
        /** Represents a collection of @link OverstockApplication OverstockApplication@endlink  objects.  <br> To obtain an instance of this class, refer to @link RouteManager RouteManager@endlink  <br> */
        class NXOPENCPPEXPORT OverstockApplicationCollection : public TaggedObjectCollection
        {
            private: NXOpen::Routing::RouteManager* m_owner;
            public: explicit OverstockApplicationCollection(NXOpen::Routing::RouteManager *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            class iterator
            {
            public:
                typedef Routing::OverstockApplication * value_type;
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Routing::OverstockApplicationCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                NXOPENCPPEXPORT  value_type operator * ();
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Routing::OverstockApplicationCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            iterator begin();
            iterator end()
            {
                return iterator(this);
            }
            /** Creates the @link Routing::Method::EntireSegments Routing::Method::EntireSegments@endlink 
                        overstock  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::OverstockApplication * CreateOverstockApplication
            (
                NXOpen::Routing::ControlPoint * start_control_point /** Control Point at the
                                                                                                                           start of the set of
                                                                                                                           segments */,
                const std::vector<NXOpen::Routing::ISegment *> & segments /** Segments to cover with
                                                                                                                       overstock */,
                NXOpen::Routing::CharacteristicList * overstock_part /** */,
                NXOpen::Routing::StockType stock_type /** */,
                NXOpen::Expression * wrap_value /** */
            );
            /** Creates an @link Routing::OverstockApplication Routing::OverstockApplication@endlink  using the Interval method of application.  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::OverstockApplication * CreateOverstockApplication
            (
                NXOpen::Routing::ControlPoint * start_control_point /** Control Point at the start
                                                                                                                    of the set of segments */,
                const std::vector<NXOpen::Routing::ISegment *> & segments /** Segments to cover with overstock */,
                NXOpen::Expression * start_offset /** */,
                NXOpen::Expression * end_offset /** */,
                NXOpen::Expression * piece_length /** */,
                NXOpen::Expression * gap /** */,
                NXOpen::Expression * number_of_pieces /** */,
                NXOpen::Point * start_point /** Point at the start offset
                                                                                                                  location along the set of
                                                                                                                  segments */,
                NXOpen::Routing::CharacteristicList * overstock_part /** */,
                NXOpen::Routing::StockType stock_type /** */,
                NXOpen::Expression * wrap_value /** */
            );
            /** Creates an @link OverstockApplication OverstockApplication@endlink  using the
                        Point to Point method of application.  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::OverstockApplication * CreateOverstockApplication
            (
                NXOpen::Routing::ControlPoint * start_control_point /** Control Point at the
                                                                                                                           start of the set
                                                                                                                           of segments */,
                const std::vector<NXOpen::Routing::ISegment *> & segments /** Segments to cover
                                                                                                                        with overstock */,
                NXOpen::Point * start_point /** point at the start of the piece
                                                                                                             of overstock */,
                NXOpen::Point * end_point /** point at the end of the piece
                                                                                                             of overstock */,
                NXOpen::Routing::CharacteristicList * overstock_part /** */,
                NXOpen::Routing::StockType stock_type /** */,
                NXOpen::Expression * wrap_value /** */
            );
            /** Creates the @link Routing::MethodPointAndLength Routing::MethodPointAndLength@endlink 
                        overstock by the Point and Length method.  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::OverstockApplication * CreateOverstockApplication
            (
                NXOpen::Routing::ControlPoint * start_control_point /** Control Point
                                                                                                                                   at the start of
                                                                                                                                   the set of
                                                                                                                                   segments */,
                const std::vector<NXOpen::Routing::ISegment *> & segments /** Segments to cover
                                                                                                                               with overstock */,
                NXOpen::Point * defining_point /** */,
                NXOpen::Routing::PointDefinition defining_direction /** location of the defining point. */,
                NXOpen::Expression * piece_length /** */,
                NXOpen::Routing::CharacteristicList * overstock_part /** */,
                NXOpen::Routing::StockType stock_type /** */,
                NXOpen::Expression * wrap_value /** */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
