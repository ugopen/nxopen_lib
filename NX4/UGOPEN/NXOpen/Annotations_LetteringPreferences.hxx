#ifndef NXOpen_ANNOTATIONS_LETTERINGPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LETTERINGPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LetteringPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class LetteringPreferences;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        /** Represents lettering preferences */
        class NXOPENCPPEXPORT LetteringPreferences : public TransientObject
        {
            public: explicit LetteringPreferences(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~LetteringPreferences();
            /**Returns  the align position  <br> License requirements : None */
            public: NXOpen::Annotations::AlignmentPosition AlignmentPosition
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AlignmentPosition() AlignmentPosition@endlink instead.
            @deprecated
            */
            public: NXOpen::Annotations::AlignmentPosition GetAlignmentPosition
            (
            ) { return this->AlignmentPosition(); }
            /**Sets  the align position  <br> License requirements : None */
            public: void SetAlignmentPosition
            (
                NXOpen::Annotations::AlignmentPosition align_position /** */
            );
            /**Returns  the horizontal text justification  <br> License requirements : None */
            public: NXOpen::Annotations::TextJustification HorizTextJust
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link HorizTextJust() HorizTextJust@endlink instead.
            @deprecated
            */
            public: NXOpen::Annotations::TextJustification GetHorizTextJust
            (
            ) { return this->HorizTextJust(); }
            /**Sets  the horizontal text justification  <br> License requirements : None */
            public: void SetHorizTextJust
            (
                NXOpen::Annotations::TextJustification horiz_text_just /** */
            );
            /**Returns  the gdt frame height factor  <br> License requirements : None */
            public: double GdtFrameHeightFactor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GdtFrameHeightFactor() GdtFrameHeightFactor@endlink instead.
            @deprecated
            */
            public: double GetGdtFrameHeightFactor
            (
            ) { return this->GdtFrameHeightFactor(); }
            /**Sets  the gdt frame height factor  <br> License requirements : None */
            public: void SetGdtFrameHeightFactor
            (
                double gdt_frame_height_factor /** */
            );
            /**Returns  the angle  <br> License requirements : None */
            public: double Angle
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Angle() Angle@endlink instead.
            @deprecated
            */
            public: double GetAngle
            (
            ) { return this->Angle(); }
            /**Sets  the angle  <br> License requirements : None */
            public: void SetAngle
            (
                double angle /** */
            );
            /**Returns  the dimension/dimension line space factor  <br> License requirements : None */
            public: double DimDimLineSpaceFactor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DimDimLineSpaceFactor() DimDimLineSpaceFactor@endlink instead.
            @deprecated
            */
            public: double GetDimDimLineSpaceFactor
            (
            ) { return this->DimDimLineSpaceFactor(); }
            /**Sets  the dimension/dimension line space factor  <br> License requirements : None */
            public: void SetDimDimLineSpaceFactor
            (
                double dim_dim_line_space_factor /** */
            );
            /**Returns  the dimension/appended text space factor  <br> License requirements : None */
            public: double DimAppendedTextSpaceFactor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DimAppendedTextSpaceFactor() DimAppendedTextSpaceFactor@endlink instead.
            @deprecated
            */
            public: double GetDimAppendedTextSpaceFactor
            (
            ) { return this->DimAppendedTextSpaceFactor(); }
            /**Sets  the dimension/appended text space factor  <br> License requirements : None */
            public: void SetDimAppendedTextSpaceFactor
            (
                double dim_app_text_space_factor /** */
            );
            /**Returns  the dimension/tolerance text space factor  <br> License requirements : None */
            public: double DimToleranceTextSpaceFactor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DimToleranceTextSpaceFactor() DimToleranceTextSpaceFactor@endlink instead.
            @deprecated
            */
            public: double GetDimToleranceTextSpaceFactor
            (
            ) { return this->DimToleranceTextSpaceFactor(); }
            /**Sets  the dimension/tolerance text space factor  <br> License requirements : None */
            public: void SetDimToleranceTextSpaceFactor
            (
                double dim_tol_text_space_factor /** */
            );
            /** Returns the dimension text  @return   <br> License requirements : None */
            public: NXOpen::Annotations::Lettering GetDimensionText
            (
            );
            /** Sets the dimension text  <br> License requirements : None */
            public: void SetDimensionText
            (
                const NXOpen::Annotations::Lettering & dimension_text /** */
            );
            /** Returns the appended text  @return   <br> License requirements : None */
            public: NXOpen::Annotations::Lettering GetAppendedText
            (
            );
            /** Sets the appended text  <br> License requirements : None */
            public: void SetAppendedText
            (
                const NXOpen::Annotations::Lettering & appended_text /** */
            );
            /** Returns the tolerance text  @return   <br> License requirements : None */
            public: NXOpen::Annotations::Lettering GetToleranceText
            (
            );
            /** Sets the tolerance text  <br> License requirements : None */
            public: void SetToleranceText
            (
                const NXOpen::Annotations::Lettering & tolerance_text /** */
            );
            /** Returns the general text  @return   <br> License requirements : None */
            public: NXOpen::Annotations::Lettering GetGeneralText
            (
            );
            /** Sets the general text  <br> License requirements : None */
            public: void SetGeneralText
            (
                const NXOpen::Annotations::Lettering & general_text /** */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
