#ifndef NXOpen_PREFERENCES_PARTMODELING_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTMODELING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartModeling.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class PartModeling;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    namespace Preferences
    {
        /** Represents the set of Modeling preferences applicable to part  <br> To obtain an instance of this class, refer to @link PartPreferences PartPreferences@endlink  <br> */
        class NXOPENCPPEXPORT PartModeling
        {
            /** Describes the units available for representing density */
            public: enum DensityUnitType
            {
                DensityUnitTypeLbPerCuInch/** Unit is pound per cubic inch  */,
                DensityUnitTypeLbPerCuFeet/** Unit is pound per cubic feet */,
                DensityUnitTypeGmPerCuCm/** Unit is gram per cubic centimeter */,
                DensityUnitTypeKgPerCuMeter/** Unit is kg per cubic meter */
            };

            /** Describes whether the curve curvature display is Curvature Comb or radius of Curvature Comb  */
            public: enum CurveCurvatureDisplayType
            {
                CurveCurvatureDisplayTypeComb/** Curve curvature display is Curvature Comb */,
                CurveCurvatureDisplayTypeRadiusOfComb/** Curve curvature display is radius of Curvature Comb */
            };

            /** Describes all available grid resolutions for selection */
            public: enum GridResolutionType
            {
                GridResolutionTypeNone/** No specific selection for grid resolution */,
                GridResolutionTypeCoarse/** Coarse grid resolution */,
                GridResolutionTypeStandard/** Standard grid resolution */,
                GridResolutionTypeFine/** Fine grid resolution */,
                GridResolutionTypeExtraFine/** Extra Fine grid resolution */,
                GridResolutionTypeUltraFine/** Ultra Fine grid resolution */
            };

            private: NXOpen::Preferences::PartPreferences* m_owner;
            public: explicit PartModeling(NXOpen::Preferences::PartPreferences *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /**Returns  the U count for grid lines. It is the number of grid curves in the U direction of the faces of the body  <br> License requirements : None */
            public: int GridLinesUCount
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridLinesUCount() GridLinesUCount@endlink instead.
            @deprecated
            */
            public: int GetGridLinesUCount
            (
            ) { return this->GridLinesUCount(); }
            /**Sets  the U count for grid lines. It is the number of grid curves in the U direction of the faces of the body  <br> License requirements : None */
            public: void SetGridLinesUCount
            (
                int grid_line_u_count /**  */
            );
            /**Returns  the V count for grid lines. It is the number of grid curves in the V direction of the faces of the body   <br> License requirements : None */
            public: int GridLinesVCount
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridLinesVCount() GridLinesVCount@endlink instead.
            @deprecated
            */
            public: int GetGridLinesVCount
            (
            ) { return this->GridLinesVCount(); }
            /**Sets  the V count for grid lines. It is the number of grid curves in the V direction of the faces of the body   <br> License requirements : None */
            public: void SetGridLinesVCount
            (
                int grid_line_v_count /**  */
            );
            /**Returns  the modeling distance tolerance data. This tolerance value is used throughout the Modeling application, 
                such as for creating swept and revolved solid bodies and sectioning solid bodies. For example, when creating 
                sheet bodies, the distance tolerance specifies the maximum allowable distance between corresponding points on 
                the original surface and the resulting B-surface.    <br> License requirements : None */
            public: double DistanceToleranceData
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DistanceToleranceData() DistanceToleranceData@endlink instead.
            @deprecated
            */
            public: double GetDistanceToleranceData
            (
            ) { return this->DistanceToleranceData(); }
            /**Sets  the modeling distance tolerance data. This tolerance value is used throughout the Modeling application, 
                such as for creating swept and revolved solid bodies and sectioning solid bodies. For example, when creating 
                sheet bodies, the distance tolerance specifies the maximum allowable distance between corresponding points on 
                the original surface and the resulting B-surface.    <br> License requirements : None */
            public: void SetDistanceToleranceData
            (
                double dist_tol_data /**  */
            );
            /**Returns  the angle tolerance data. Angle tolerance is the maximum allowable angle between the surface normals at 
                corresponding points, or the maximum allowable angle between curve tangent vectors at corresponding points.  <br> License requirements : None */
            public: double AngleToleranceData
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AngleToleranceData() AngleToleranceData@endlink instead.
            @deprecated
            */
            public: double GetAngleToleranceData
            (
            ) { return this->AngleToleranceData(); }
            /**Sets  the angle tolerance data. Angle tolerance is the maximum allowable angle between the surface normals at 
                corresponding points, or the maximum allowable angle between curve tangent vectors at corresponding points.  <br> License requirements : None */
            public: void SetAngleToleranceData
            (
                double angle_tol_data /**  */
            );
            /**Returns  the density. The value used to set this property must be in
                    the units of the density units preference
                    (that is, the value of @link DensityUnit DensityUnit @endlink and @link SetDensityUnit SetDensityUnit @endlink ).
                    Likewise, the density returned by this property is in the units
                    of the density units preference.  <br> License requirements : None */
            public: double Density
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Density() Density@endlink instead.
            @deprecated
            */
            public: double GetDensity
            (
            ) { return this->Density(); }
            /**Sets  the density. The value used to set this property must be in
                    the units of the density units preference
                    (that is, the value of @link DensityUnit DensityUnit @endlink and @link SetDensityUnit SetDensityUnit @endlink ).
                    Likewise, the density returned by this property is in the units
                    of the density units preference.  <br> License requirements : None */
            public: void SetDensity
            (
                double density /**  */
            );
            /**Returns  the density unit  <br> License requirements : None */
            public: NXOpen::Preferences::PartModeling::DensityUnitType DensityUnit
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DensityUnit() DensityUnit@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::PartModeling::DensityUnitType GetDensityUnit
            (
            ) { return this->DensityUnit(); }
            /**Sets  the density unit  <br> License requirements : None */
            public: void SetDensityUnit
            (
                NXOpen::Preferences::PartModeling::DensityUnitType density_unit /**  */
            );
            /**Returns  the curve curvature display.  <br> License requirements : None */
            public: NXOpen::Preferences::PartModeling::CurveCurvatureDisplayType CurveCurvatureDisplay
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link CurveCurvatureDisplay() CurveCurvatureDisplay@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::PartModeling::CurveCurvatureDisplayType GetCurveCurvatureDisplay
            (
            ) { return this->CurveCurvatureDisplay(); }
            /**Sets  the curve curvature display.  <br> License requirements : None */
            public: void SetCurveCurvatureDisplay
            (
                NXOpen::Preferences::PartModeling::CurveCurvatureDisplayType curve_curvature_display /**  */
            );
            /**Returns  the grid resolution. The six options, None, Coarse, Standard, Fine, Extra Fine and Ultra Fine, produce a grid that 
                is respectively more detailed. The None option shows no grid at all in wireframe mode.  <br> License requirements : None */
            public: NXOpen::Preferences::PartModeling::GridResolutionType GridResolution
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridResolution() GridResolution@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::PartModeling::GridResolutionType GetGridResolution
            (
            ) { return this->GridResolution(); }
            /**Sets  the grid resolution. The six options, None, Coarse, Standard, Fine, Extra Fine and Ultra Fine, produce a grid that 
                is respectively more detailed. The None option shows no grid at all in wireframe mode.  <br> License requirements : None */
            public: void SetGridResolution
            (
                NXOpen::Preferences::PartModeling::GridResolutionType grid_resolution /**  */
            );
            /**Returns  the state of the cut view delay update flag.   <br> License requirements : None */
            public: bool CutViewUpdateDelayed
            (
            );
            /**Sets  the state of the cut view delay update flag.   <br> License requirements : None */
            public: void SetCutViewUpdateDelayed
            (
                bool is_delayed /** The new state of the delay update flag. */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
