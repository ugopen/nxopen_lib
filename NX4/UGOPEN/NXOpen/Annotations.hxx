#ifndef NXOpen_ANNOTATIONS_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Expression;
    namespace Annotations
    {
        /** Represents the horizontal text justification */
        enum TextJustification
        {
            TextJustificationLeft = 1/** */,
            TextJustificationCenter/** */,
            TextJustificationRight/** */
        };

        /** Represents the vertical text justification */
        enum VerticalTextJustification
        {
            VerticalTextJustificationTop = 1/** */,
            VerticalTextJustificationMiddle/** */,
            VerticalTextJustificationBottom/** */
        };

        /** Specifies the site location in the text box which
                can be used to locate a drafting object */
        enum AlignmentPosition
        {
            AlignmentPositionTopLeft = 1/** */,
            AlignmentPositionTopCenter/** */,
            AlignmentPositionTopRight/** */,
            AlignmentPositionMidLeft/** */,
            AlignmentPositionMidCenter/** */,
            AlignmentPositionMidRight/** */,
            AlignmentPositionBottomLeft/** */,
            AlignmentPositionBottomCeneter/** */,
            AlignmentPositionBottomRight/** */
        };

        /** Constants for annotations */
        enum Constants
        {
            ConstantsMaxLeaders = 7/** The maximum number of leaders that an annotation can have */,
            ConstantsMaxLeaderIntermediatePoints = 7/** The maximum number of intermediate points that a leader can have */
        };

        /** Specifies the leader type.  Corresponds to the leader types in the
            UI's Leader Tool */
        enum LeaderType
        {
            LeaderTypeNull = -1/** Should not be used */,
            LeaderTypePlain/** */,
            LeaderTypeAround/** */,
            LeaderTypePlainAligned/** */,
            LeaderTypeAroundAligned/** */,
            LeaderTypeExtension/** */,
            LeaderTypeDatumArrow/** */,
            LeaderTypeDatumExt/** */,
            LeaderTypeDatumDim/** */,
            LeaderTypeGbDatumArrow/** */,
            LeaderTypeGbDatumExt/** */,
            LeaderTypeGbDatumDim/** */,
            LeaderTypeOnAnnotation/** */,
            LeaderTypeOnStub/** */,
            LeaderTypePlainNostub/** */,
            LeaderTypeAlignedNostub/** */,
            LeaderTypeOnCenterline/** */,
            LeaderTypeLast/** Last enum value.  Should not be used. */
        };

        /** Specifies what a leader is attached to */
        enum LeaderAttachment
        {
            LeaderAttachmentNull = -1/** Should not be used */,
            LeaderAttachmentOnObject/** */,
            LeaderAttachmentScreen/** */,
            LeaderAttachmentLast/** Last enum value.  Should not be used. */
        };

        /** Specifies which side the leader will be on */
        enum LeaderSide
        {
            LeaderSideNull = -1/** Should not be used */,
            LeaderSideLeft/** */,
            LeaderSideRight/** */,
            LeaderSideInferred/** */,
            LeaderSideLast/** Last enum value.  Should not be used. */
        };

        /** Specifies the leader's alignment.
                For more information, see the Leader Text Alignment section of Drafting Help. */
        enum LeaderAlignment
        {
            LeaderAlignmentNull = -1/** Should not be used */,
            LeaderAlignmentTop/** */,
            LeaderAlignmentMiddle/** */,
            LeaderAlignmentBottom/** */,
            LeaderAlignmentTextBottomMax/** extend leader to maximum */,
            LeaderAlignmentTextBottomMaxUnderline/** extend leader to maximum, underline all lines */,
            LeaderAlignmentTextBottom/** */,
            LeaderAlignmentTextBottomUnderline/** underline all lines */,
            LeaderAlignmentTextTopMax/** extend leader to maximum */,
            LeaderAlignmentTextTopMaxUnderline/** extend leader to maximum, underline all lines */,
            LeaderAlignmentTextTop/** */,
            LeaderAlignmentTextTopUnderline/** underline all lines */,
            LeaderAlignmentLast/** Last enum value.  Should not be used. */
        };

        /** Specifies the leader's orientation */
        enum LeaderOrientation
        {
            LeaderOrientationFromLeft = 1/** */,
            LeaderOrientationFromRight/** */,
            LeaderOrientationFromTop/** */,
            LeaderOrientationFromBottom/** */,
            LeaderOrientationInferred/** */
        };

        /** Specifies the arrowhead type */
        enum ArrowheadType
        {
            ArrowheadTypeFilledDatumArrow = -2/** */,
            ArrowheadTypeFilledDot/** */,
            ArrowheadTypeFilledArrow/** */,
            ArrowheadTypeClosedArrow/** */,
            ArrowheadTypeOpenArrow/** */,
            ArrowheadTypeCrossArrow/** */,
            ArrowheadTypeDotArrow/** */,
            ArrowheadTypeOriginSymbolArrow/** */,
            ArrowheadTypeNoArrow/** */,
            ArrowheadTypeUnfilledDatumArrow/** */
        };

        /** Specifies the type of associativity for an annotation's origin */
        enum AssociativeOriginType
        {
            AssociativeOriginTypeDrag/** */,
            AssociativeOriginTypeRelativeToView/** */,
            AssociativeOriginTypeRelativeToGeometry/** */,
            AssociativeOriginTypeVerticallyAligned/** */,
            AssociativeOriginTypeHorizontallyAligned/** */,
            AssociativeOriginTypeAlignedWithArrows/** */,
            AssociativeOriginTypeAtAPoint/** */,
            AssociativeOriginTypeOffsetFromText/** */
        };

        /** Specifies the line width*/
        enum LineWidth
        {
            LineWidthNormal = 1/** */,
            LineWidthThick/** */,
            LineWidthThin/** */
        };

        /** Specifies the options for the default PMI annotation plane*/
        enum PmiDefaultPlane
        {
            PmiDefaultPlaneXyOfWcs = 1/** */,
            PmiDefaultPlaneModelView/** */,
            PmiDefaultPlaneLast = 1000/** Placeholder, do not use */
        };

        /** Specifies the associativity point option */
        enum AssociativityPointOption
        {
            AssociativityPointOptionNone/** No point */,
            AssociativityPointOptionControl/** Control point */,
            AssociativityPointOptionArcCenter/** Arc center point */,
            AssociativityPointOptionTangent/** Tangent point */,
            AssociativityPointOptionIntersection/** Intersection point */,
            AssociativityPointOptionScreenPosition/** Screen position */,
            AssociativityPointOptionOnCurve/** Point on curve */,
            AssociativityPointOptionLast/** Last enum value. Should not be used. */
        };

        /** Specifies the associativity line option */
        enum AssociativityLineOption
        {
            AssociativityLineOptionNone/** No line */,
            AssociativityLineOptionExistingLine/** Existing line */,
            AssociativityLineOptionPointVector/** Vector from two points */,
            AssociativityLineOptionExtensionLine/**Extension line */,
            AssociativityLineOptionCenterline/** Centerline -
                                                                              <br> Linear <br> 
                                                                              <br> Bolt circle <br> 
                                                                              <br> Circular <br>  */,
            AssociativityLineOptionAngle/** At angle */,
            AssociativityLineOptionHorizontalRight/** Horizontal right */,
            AssociativityLineOptionHorizontalLeft/** Horizontal left */,
            AssociativityLineOptionVerticalUp/** Vertical up */,
            AssociativityLineOptionVerticalDown/** Vertical down */,
            AssociativityLineOptionBaseLine/** Base line */,
            AssociativityLineOptionLast/** Last enum value. Should not be used. */
        };

         /** Specifies color, font, and width */

        struct LineCfw
        {
            public: /** */int Color;
            public: /** Line font (solid, dashed, etc) */NXOpen::DisplayableObject::ObjectFont Font;
            public: /** */NXOpen::Annotations::LineWidth Width;
            public: LineCfw() :
                Color(),
                Font((NXOpen::DisplayableObject::ObjectFont)0),
                Width((NXOpen::Annotations::LineWidth)0)
            {
            }
            /** Constructor for the LineCfw struct. */ 
            public: LineCfw(int INIT_color /** */, NXOpen::DisplayableObject::ObjectFont INIT_font /** Line font (solid, dashed, etc) */, NXOpen::Annotations::LineWidth INIT_width /** */) :
                Color(INIT_color),
                Font(INIT_font),
                Width(INIT_width)
            {
            }
        };

         /** Specifies color, font, and width for text */

        struct TextCfw
        {
            public: /** */int Color;
            public: /** Character font (blockfont, etc).
                                    The font must be a font that has been
                                    loaded into the part.  The @link FontCollection FontCollection@endlink  class
                                    can be used to load fonts into the part. */int Font;
            public: /** */NXOpen::Annotations::LineWidth Width;
            public: TextCfw() :
                Color(),
                Font(),
                Width((NXOpen::Annotations::LineWidth)0)
            {
            }
            /** Constructor for the TextCfw struct. */ 
            public: TextCfw(int INIT_color /** */, int INIT_font /** Character font (blockfont, etc).
                                    The font must be a font that has been
                                    loaded into the part.  The @link FontCollection FontCollection@endlink  class
                                    can be used to load fonts into the part. */, NXOpen::Annotations::LineWidth INIT_width /** */) :
                Color(INIT_color),
                Font(INIT_font),
                Width(INIT_width)
            {
            }
        };

         /** Specifies lettering data */

        struct Lettering
        {
            public: /** Height of a character */double Size;
            public: /** Multiplier applied to font's standard character spacing */double CharacterSpaceFactor;
            public: /** Aspect ratio for a character */double AspectRatio;
            public: /** Multiplier applied to font's standard line spacing */double LineSpaceFactor;
            public: /**  Color, font, and width for lettering */NXOpen::Annotations::TextCfw Cfw;
            public: Lettering() :
                Size(),
                CharacterSpaceFactor(),
                AspectRatio(),
                LineSpaceFactor(),
                Cfw()
            {
            }
            /** Constructor for the Lettering struct. */ 
            public: Lettering(double INIT_size /** Height of a character */, double INIT_character_space_factor /** Multiplier applied to font's standard character spacing */, double INIT_aspect_ratio /** Aspect ratio for a character */, double INIT_line_space_factor /** Multiplier applied to font's standard line spacing */, NXOpen::Annotations::TextCfw INIT_cfw /**  Color, font, and width for lettering */) :
                Size(INIT_size),
                CharacterSpaceFactor(INIT_character_space_factor),
                AspectRatio(INIT_aspect_ratio),
                LineSpaceFactor(INIT_line_space_factor),
                Cfw(INIT_cfw)
            {
            }
        };

         /** Specifies the value data */

        struct Value
        {
            public: /**  Value of the item */double ItemValue;
            public: /** Expression representing the value. 
                                                                      NULL, if not used. */NXOpen::Expression * ValueExpression;
            public: /** Value precision */int ValuePrecision;
            public: Value() :
                ItemValue(),
                ValueExpression(),
                ValuePrecision()
            {
            }
            /** Constructor for the Value struct. */ 
            public: Value(double INIT_item_value /**  Value of the item */, NXOpen::Expression * INIT_value_expression /** Expression representing the value. 
                                                                      NULL, if not used. */, int INIT_value_precision /** Value precision */) :
                ItemValue(INIT_item_value),
                ValueExpression(INIT_value_expression),
                ValuePrecision(INIT_value_precision)
            {
            }
        };

    }
}
#undef EXPORTLIBRARY
#endif
