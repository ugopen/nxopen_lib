#ifndef NXOpen_ANNOTATIONS_CHAMFERDIMENSIONPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_CHAMFERDIMENSIONPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_ChamferDimensionPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class ChamferDimensionPreferences;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        /** Represents chamfer dimension preferences */
        class NXOPENCPPEXPORT ChamferDimensionPreferences : public TransientObject
        {
            public: explicit ChamferDimensionPreferences(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~ChamferDimensionPreferences();
            /**Returns  the form  <br> License requirements : None */
            public: NXOpen::Annotations::ChamferForm Form
            (
            );
            /**Sets  the form  <br> License requirements : None */
            public: void SetForm
            (
                NXOpen::Annotations::ChamferForm form /** New form */
            );
            /**Returns  the stub type  <br> License requirements : None */
            public: NXOpen::Annotations::ChamferStubType StubType
            (
            );
            /**Sets  the stub type  <br> License requirements : None */
            public: void SetStubType
            (
                NXOpen::Annotations::ChamferStubType type /** New stub type */
            );
            /**Returns  the leader placement relative to the chamfer  <br> License requirements : None */
            public: NXOpen::Annotations::ChamferLeaderPlacement LeaderPlacement
            (
            );
            /**Sets  the leader placement relative to the chamfer  <br> License requirements : None */
            public: void SetLeaderPlacement
            (
                NXOpen::Annotations::ChamferLeaderPlacement leader_placement /** New leader placement relative to chamfer */
            );
            /**Returns  the symbol placement  <br> License requirements : None */
            public: NXOpen::Annotations::ChamferSymbolPlacement SymbolPlacement
            (
            );
            /**Sets  the symbol placement  <br> License requirements : None */
            public: void SetSymbolPlacement
            (
                NXOpen::Annotations::ChamferSymbolPlacement symbol_placement /** New symbol placement */
            );
            /**Returns  the symbol name  <br> License requirements : None */
            public: NXString SymbolName
            (
            );
            /**Sets  the symbol name  <br> License requirements : None */
            public: void SetSymbolName
            (
                const NXString & symbol_name /** New symbol name */
            );
            /**Returns  the space between the text characters or symbols as a factor of the character size  <br> License requirements : None */
            public: double CharacterSpacing
            (
            );
            /**Sets  the space between the text characters or symbols as a factor of the character size  <br> License requirements : None */
            public: void SetCharacterSpacing
            (
                double character_spacing /** New character spacing */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
