#ifndef NXOpen_CAE_AFUMANAGER_HXX_INCLUDED
#define NXOpen_CAE_AFUMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AfuManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/CAE_AfuData.hxx>
#include <NXOpen/CAE_XYFunctionDataTypes.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class AfuManager;
    }
    class Session;
    namespace CAE
    {
        class AfuData;
    }
    namespace CAE
    {
        /** AFU File and Data Record Manager   <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
        class NXOPENCPPEXPORT AfuManager
        {
            /** This enumeration defines the modes of outputting information to a file */
            public: enum WritingFileMode
            {
                WritingFileModeOverride/** Opens an empty file for writing. If the given file exists, its contents are destroyed.  */,
                WritingFileModeAppend/** Opens a file for appending data to the end of the file */
            };

            private: NXOpen::Session* m_owner;
            public: explicit AfuManager(NXOpen::Session *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /** Create a new AFU Data Record  @return  Time stamp string indicates when the record was created  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString CreateRecord
            (
                NXOpen::CAE::XyFunctionMacroType macro_type /** Application type of AFU Data Record used */,
                NXOpen::CAE::XyFunctionGeneralType data_type /** Usage type of AFU Data Record used */,
                NXOpen::CAE::AfuData * afu_data /** Afu data used to create AFU Data Record */
            );
            /** Edit an existing AFU Data Record  @return  Time stamp string indicates when the data record was last edited  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString EditRecord
            (
                NXOpen::CAE::XyFunctionMacroType macro_type /** Application type of AFU Data Record used */,
                NXOpen::CAE::XyFunctionGeneralType data_type /** Usage type of AFU Data Record used */,
                int afu_record_index /** Index of the AFU Data Record in the AFU file. Must begin with 1 */,
                NXOpen::CAE::AfuData * afu_data /** Afu data used to create the AFU Data Record */
            );
            /** Copy multiple AFU Data Records to an AFU file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CopyRecords
            (
                std::vector<NXString> & source_afu_file_names /** List of the AFU Files to be copied (full filenames)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & record_indexes /** Indices of the AFU Data Records to be copied. Each index Must begin with 1 */,
                const NXString & destination_afu_file_name /** Destination AFU file (full filename)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Delete multiple AFU Data Records from an AFU file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void DeleteRecords
            (
                const NXString & afu_file_name /** AFU file full name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & afu_record_indexes /** List of Indices of data records to be deleted from the AFU file. (Indices begin with 1) */
            );
            /** Return data from an AFU Data Record  @return  Time stamp string indicates the last time the AFU Data Record was edited  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString GetAfuData
            (
                const NXString & afu_file_name /** AFU filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int record_index /** Index of the AFU Data Record in the AFU file. Must begin with 1*/,
                NXOpen::CAE::AfuData ** afu_data /** AFU record data queried */
            );
            /** Create an AFU Data Record object  @return  AFU Data Record  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXOpen::CAE::AfuData * CreateAfuData
            (
            );
            /** Create a new empty AFU file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CreateNewAfuFile
            (
                const NXString & afu_file_name /** AFU filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Delete an AFU file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void DeleteAfuFile
            (
                const NXString & afu_file_name /** AFU filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Import AFU Data Records from a CSV, DAC, or RPCIII file.  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void ImportAfu
            (
                const NXString & import_file_name /** Filename for the file to be imported   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & afu_file_name /** AFU Filename to import data into   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Export an AFU Data Record to a CSV, DAC, or RPCIII file.  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void ExportAfu
            (
                const NXString & afu_file_name /** AFU filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int record_index /** Index of the AFU Data Record to be exported */,
                const NXString & export_file_name /** Name fof Export file to put AFU Data Record into   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Rename an AFU Data Record  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void RenameRecord
            (
                const NXString & afu_file_name /** AFU Filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int record_index /** Index of the AFU Data Record in the AFU file. Must begin with 1. */,
                const NXString & new_record_name /** New Data Record name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Return indices of all Data Records in an AFU file  @return  Index array of all Data Records in the AFU file.  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: std::vector<int> GetRecordIndexes
            (
                const NXString & afu_file_name /** AFU Filename  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** List the AFU Data Record information to listing window or a specified output file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void ListRecordInformation
            (
                const NXString & afu_file_name /** AFU Filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int record_index /** Index of the AFU Data Record to be listed */,
                bool list_point_data /** List control flag. If true, the record XY data will be listed. Otherwise only AFU header information is listed. */,
                const NXString & output_file_name /** Output file to which the record information is written. If NULL, the information is only output to the listing window.  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::AfuManager::WritingFileMode mode /** Overwrite or Append Output Mode for file output. Only valid when output file name is not NULL.*/
            );
            /** List header information of all AFU Data Records in an AFU file to listing window or a specified output file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void ListFileInformation
            (
                const NXString & afu_file_name /** AFU filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool list_point_data /** List Control Flag. If true, the record XY data will be listed. Otherwise only AFU header information is listed. */,
                const NXString & output_file_name /** Output file to which the record information is written. If NULL, the information is only output to the listing window  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::AfuManager::WritingFileMode mode /** Overwrite or Append Output Mode for file output. Only valid when output file name is not NULL.*/
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
