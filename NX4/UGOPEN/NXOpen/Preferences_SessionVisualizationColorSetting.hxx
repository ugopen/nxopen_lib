#ifndef NXOpen_PREFERENCES_SESSIONVISUALIZATIONCOLORSETTING_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONVISUALIZATIONCOLORSETTING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionVisualizationColorSetting.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class SessionVisualizationColorSetting;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        /** Represents the set of visualization preferences applicable to entire session <br> To obtain an instance of this class, refer to @link SessionPreferences SessionPreferences@endlink  <br> */
        class NXOPENCPPEXPORT SessionVisualizationColorSetting
        {
            private: NXOpen::Preferences::SessionPreferences* m_owner;
            public: explicit SessionVisualizationColorSetting(NXOpen::Preferences::SessionPreferences *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /**Returns  the work plane emphasis color. Sets the color in which to dim the objects not on the Work Plane  <br> License requirements : None */
            public: int WorkPlaneEmphasisColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link WorkPlaneEmphasisColor() WorkPlaneEmphasisColor@endlink instead.
            @deprecated
            */
            public: int GetWorkPlaneEmphasisColor
            (
            ) { return this->WorkPlaneEmphasisColor(); }
            /**Sets  the work plane emphasis color. Sets the color in which to dim the objects not on the Work Plane  <br> License requirements : None */
            public: void SetWorkPlaneEmphasisColor
            (
                int work_plane_emphasis /**  */
            );
            /**Returns  the assembly work Part emphasis color. Sets the color in which to dim the rest of the assembly, 
            helping to differentiate the Work Part  <br> License requirements : None */
            public: int AssembliesWorkPartEmphasisColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AssembliesWorkPartEmphasisColor() AssembliesWorkPartEmphasisColor@endlink instead.
            @deprecated
            */
            public: int GetAssembliesWorkPartEmphasisColor
            (
            ) { return this->AssembliesWorkPartEmphasisColor(); }
            /**Sets  the assembly work Part emphasis color. Sets the color in which to dim the rest of the assembly, 
            helping to differentiate the Work Part  <br> License requirements : None */
            public: void SetAssembliesWorkPartEmphasisColor
            (
                int assemblies_work_part_emphasis /**  */
            );
            /**Returns  the handles color. Sets the handle color. Unigraphics NX displays all handles using a "handle" color. 
            A session attribute determines the color of handles and applies to all parts in a session.   <br> License requirements : None */
            public: int HandlesColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link HandlesColor() HandlesColor@endlink instead.
            @deprecated
            */
            public: int GetHandlesColor
            (
            ) { return this->HandlesColor(); }
            /**Sets  the handles color. Sets the handle color. Unigraphics NX displays all handles using a "handle" color. 
            A session attribute determines the color of handles and applies to all parts in a session.   <br> License requirements : None */
            public: void SetHandlesColor
            (
                int handles_color /**  */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
