#ifndef NXOpen_FEATURES_OVERCROWNBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_OVERCROWNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_OvercrownBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class OvercrownBuilder;
    }
    class Body;
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    class NXObject;
    class Section;
    namespace Features
    {
        class _OvercrownBuilderBuilder;
        /**
         *  Represents a Overcrown Builder
         */
        class NXOPENCPPEXPORT OvercrownBuilder : public Features::FeatureBuilder
        {
            /** This enum represents the type of Global Shaping Operation */
            public: enum OperationType
            {
                OperationTypeOvercrown/** */,
                OperationTypeStretch/** */,
                OperationTypeOffset/** */
            };

            /** This enum represents the control type of Global Shaping Operation */
            public: enum ControlType
            {
                ControlTypeByFunction/** */,
                ControlTypeBySurface/** */
            };

            /** This enum represents the output type of Global Shaping Operation */
            public: enum OutputType
            {
                OutputTypeSheet/** */,
                OutputTypeSolid/** */
            };

            /** This enum represents the transition type of Global Shaping Operation */
            public: enum TransitionType
            {
                TransitionTypeCurve1/** */,
                TransitionTypeCurve2/** */,
                TransitionTypeLawCurve/** */
            };

            private: friend class  _OvercrownBuilderBuilder;
            protected: OvercrownBuilder();
            /** this Initializes the data
               <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void InitData
            (
            );
            /**Sets  the Type of Global Shaping Operation     
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOperatorOperationType
            (
                NXOpen::Features::OvercrownBuilder::OperationType type /** Type of Global                                                           
                                                                       Shaping Operation */
            );
            /**Sets  the controlling type Global Shaping Operation. Type can be    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOperatorControlType
            (
                NXOpen::Features::OvercrownBuilder::ControlType type /** Control type of                                                                                                                              
                                                               Global Shaping Operation */
            );
            /**Sets  the output type Global Shaping Operation    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOperatorOutputType
            (
                NXOpen::Features::OvercrownBuilder::OutputType type /** Output type of Global                                                                 
                                                                    Shaping Operation */
            );
            /** the target faces for the Global Shaping Operator     
               <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetFaces
            (
                std::vector<NXOpen::NXObject *> & faces /** API_TYPE(Body) target faces */
            );
            /**Sets  the Control Surface when the Global Shaping Operator control is by      
               * “Function”    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetControlSurface
            (
                NXOpen::Body * control /** Control surface */
            );
            /**Sets  the Base Surface when the Global Shaping Operator control is by      
               * “Function”    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBaseSurface
            (
                NXOpen::Body * base /** Base surface */
            );
            /**Sets  the boundary section. When Global Shaping operator control is      
               * is by “Function”, this section bounds the effect of the shape function    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBoundarySection
            (
                NXOpen::Section * section /** boundary section */
            );
            /**Sets  the point in forming region. When Global Shaping operator control is
               * is by “Function”, this point provides the location of maximum influence
               * of shape function    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointInFormingRegion
            (
                NXOpen::NXObject * point /** API_TYPE(Point) Point in forming region */
            );
            /** the point in forming region. When Global Shaping operator control is
               * is by “Function”, this point provides the location of maximum influence
               * of shape function    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCenterPoint
            (
            );
            /** The default direction. When Global Shaping operator control is
               * is by “Function”.
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDefaultDirection
            (
            );
            /**Sets  the direction of deformation. When Global Shaping operator control is
               * is by “Function”, this direction provides the direction of influence
               * of shape function    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDirection
            (
                NXOpen::Direction * direction /** direction */
            );
            /**Sets  the maximum height of deformation. When Global Shaping operator 
               * control is by “Function” this value sets the maximum deformation height     
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHeight
            (
                const NXString & height_expression /** Maximum height of deformation */
            );
            /**Sets  the Transition option for Global Shaping Operator     
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOperatorTransitionType
            (
                NXOpen::Features::OvercrownBuilder::TransitionType type /** Transition type */
            );
            /**Sets  the shape control parameter. When Global Shaping operator       
               * control is by “Function” this value sets the shape control parameter      
               * for the shape function. Value is between 0.0 – 1.0     
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetShapeControl
            (
                double shape /** Shape control value */
            );
            /**Sets  the stretch direction of deformation. When Global Shaping operator 
               * control is by “Function” and the type is “Stretch” this direction 
               * provides the stretch direction    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStretchDirection
            (
                NXOpen::Direction * stretch /** direction */
            );
            /**Sets  the reverse normal flag for the target faces. Used by the  
               *  Variable Offset type.
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseNormal
            (
                int reverse_normal /** */
            );
            /**Returns  the Type of Global Shaping Operation     
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OvercrownBuilder::OperationType OperatorOperationType
            (
            );
            /**Returns  the controlling type Global Shaping Operation. Type can be    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OvercrownBuilder::ControlType OperatorControlType
            (
            );
            /**Returns  the output type Global Shaping Operation    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OvercrownBuilder::OutputType OperatorOutputType
            (
            );
            /** the target faces for the Global Shaping Operator     
                @return  API_TYPE(Body) target faces  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::NXObject *> GetTargetFaces
            (
            );
            /**Returns  the direction of deformation. When Global Shaping operator control is
               * is by “Function”, this direction provides the direction of influence
               * of shape function    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Direction * Direction
            (
            );
            /**Returns  the maximum height of deformation. When Global Shaping operator 
               * control is by “Function” this value sets the maximum deformation height     
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXString Height
            (
            );
            /**Returns  the Transition option for Global Shaping Operator     
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OvercrownBuilder::TransitionType OperatorTransitionType
            (
            );
            /**Returns  the shape control parameter. When Global Shaping operator       
               * control is by “Function” this value sets the shape control parameter      
               * for the shape function. Value is between 0.0 – 1.0     
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double ShapeControl
            (
            );
            /**Returns  the stretch direction of deformation. When Global Shaping operator 
               * control is by “Function” and the type is “Stretch” this direction 
               * provides the stretch direction    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Direction * StretchDirection
            (
            );
            /**Returns  the reverse normal flag for the target faces. Used by the  
               *  Variable Offset type.
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int ReverseNormal
            (
            );
            /**Returns  the boundary section. When Global Shaping operator control is      
               * is by “Function”, this section bounds the effect of the shape function    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Section * BoundarySection
            (
            );
            /**Returns  the point in forming region. When Global Shaping operator control is
               * is by “Function”, this point provides the location of maximum influence
               * of shape function    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::NXObject * PointInFormingRegion
            (
            );
            /**Returns  the Control Surface when the Global Shaping Operator control is by      
               * “Function”    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Body * ControlSurface
            (
            );
            /**Returns  the Base Surface when the Global Shaping Operator control is by      
               * “Function”    
                <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Body * BaseSurface
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
