#ifndef NXOpen_PREFERENCES_ROUTINGSTOCK_HXX_INCLUDED
#define NXOpen_PREFERENCES_ROUTINGSTOCK_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_RoutingStock.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Routing_StockData.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class RoutingStock;
    }
    namespace Preferences
    {
        class RoutingApplicationView;
    }
    namespace Preferences
    {
        /** The Preferences for Routing Stock objects.  These correspond to
                the values represented on the Preferences->Routing dialog, Stock
                property page.  <br> To obtain an instance of this class, refer to @link RoutingApplicationView RoutingApplicationView@endlink  <br> */
        class NXOPENCPPEXPORT RoutingStock
        {
            /** Describes the valid value for stock mode.  */
            public: enum StockModeFlag
            {
                StockModeFlagLegacyStock/** solid body in the work part, no component */,
                StockModeFlagStockAsComponent/** component created with solid body in the component */
            };

            private: NXOpen::Preferences::RoutingApplicationView* m_owner;
            public: explicit RoutingStock(NXOpen::Preferences::RoutingApplicationView *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /**Returns  the default stock style  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::StockStyle DefaultStockStyle
            (
            );
            /**Sets  the default stock style  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDefaultStockStyle
            (
                NXOpen::Routing::StockStyle default_stock_style /** */
            );
            /**Returns  the current routing level/tile  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString CurrentTile
            (
            );
            /**Sets  the current routing level/tile  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetCurrentTile
            (
                const NXString & tile /** */
            );
            /**Returns  the stock creation mode  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Preferences::RoutingStock::StockModeFlag StockMode
            (
            );
            /**Sets  the stock creation mode  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStockMode
            (
                NXOpen::Preferences::RoutingStock::StockModeFlag stock_mode /** */
            );
            /**Returns  the default folder for stock components  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString StockFolder
            (
            );
            /**Sets  the default folder for stock components  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStockFolder
            (
                const NXString & stock_folder /** */
            );
            /**Returns  the delete overstock flag during deletion of last stock covered by
                        the overstock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool DeleteOverstock
            (
            );
            /**Sets  the delete overstock flag during deletion of last stock covered by
                        the overstock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDeleteOverstock
            (
                bool delete_overstock /** */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
