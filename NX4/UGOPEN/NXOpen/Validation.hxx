#ifndef NXOpen_VALIDATION_HXX_INCLUDED
#define NXOpen_VALIDATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Validation;
    class NXObject;
    class _ValidationBuilder;
    /**
     Represents an NX @link Validation Validation@endlink  object.
     <br> To create a new instance of this class, use @link ValidationCollection::Create ValidationCollection::Create@endlink  <br> */
    class NXOPENCPPEXPORT Validation : public NXObject
    {
        /** Specifies result of the validation */
        public: enum Result
        {
            ResultPass/** Validation Pass all checks */,
            ResultInformation/** Validation Pass with information */,
            ResultWarning/** Validation Pass with warning*/,
            ResultFailed/** Validation Failed */,
            ResultUnknown/** Unknown validation result */
        };

        /** Specifies the input type */
        public: enum InputType
        {
            InputTypeKfClass/** Input rules are in a KF class */,
            InputTypeSpreadsheet/** Input rules are from a spreadsheet */,
            InputTypeTextFile/** Input rules are from a text file */,
            InputTypeXml/** Input rules are from XML file */,
            InputTypeTcr/** Input rules are from TcR */,
            InputTypeApplication/** Input rules are from validation applications */,
            InputTypeNum/** Last item define the number of the input source, not used as a type. */
        };

        /** Specifies when to validate */
        public: enum UpdateTime
        {
            UpdateTimeEveryChange/** Every update when the input was changed */,
            UpdateTimeSave/** During save time */
        };

        /** Specifies the map types*/
        public: enum MapType
        {
            MapTypeText/** Text map */,
            MapTypeReal/** Real map */,
            MapTypeInt/** Integer map */,
            MapTypeTime/** Time map */,
            MapTypeTag/** A tag map */,
            MapTypeNone/** map is not define */
        };

        private: friend class  _ValidationBuilder;
        protected: Validation();
        /** Define the update behavior of the validation object <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetUpdateControl
        (
            NXOpen::Validation::UpdateTime update_time /** Sets the time of update */
        );
        /** Add a objects to the validation map  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void Add
        (
            const NXString & key /** Map key */,
            const std::vector<NXOpen::NXObject *> & objs /** Objects to be associate with the key */
        );
        /** Replace objects of a key in the validation map  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void Replace
        (
            const NXString & key /** Map key */,
            const std::vector<NXOpen::NXObject *> & objs /** Objects to be associate with the key */
        );
        /**  Add a text to the validation map  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void Add
        (
            const NXString & key /** Map key */,
            const NXString & text /** Text to be associate with the key */
        );
        /** Add a real to the validation map  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void Add
        (
            const NXString & key /** Map key */,
            double number /** Real to be associate with the key */
        );
        /**  Add a integer to the validation map  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void Add
        (
            const NXString & key /** Map key */,
            int number /** Integer to be associate with the key */
        );
        /** Add a time to the validation map  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void Add
        (
            const NXString & key /** Map key */,
            int day /** Date to be associated with the key */,
            int time /** Time to be associate with the key */
        );
        /** Manualy validate  @return    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Validation::Result Evaluate
        (
        );
        /** The validation result.
                Result is represented as a Name, with the following options:
                    pass : Validation Pass all checks 
                    information : Validation Pass with information 
                    warning : Validation Pass with warning 
                    failed : Validation Failed 
                    unknown : Unknown validation result 
              @return   <br> License requirements : None */
        public: NXOpen::Validation::Result GetCheckResult
        (
        );
        /** Set the result of validation. 
                Result is represented as a Name, with the following options:
                    pass : Validation Pass all checks 
                    information : Validation Pass with information 
                    warning : Validation Pass with warning 
                    failed : Validation Failed 
                    unknown : Unknown validation result 
             <br> License requirements : None */
        public: void SetCheckResult
        (
            NXOpen::Validation::Result result /** */
        );
        /** Get keys  @return  keys in the map  <br> License requirements : None */
        public: std::vector<NXString> GetKeys
        (
        );
        /** Get key type  @return    <br> License requirements : None */
        public: NXOpen::Validation::MapType GetKeyType
        (
            const NXString & key /** Map key */
        );
        /** Set user class name  <br> License requirements : None */
        public: void SetUserClassName
        (
            const NXString & name /** the class name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Lookup a objects to the validation map  @return  objects associate with the key  <br> License requirements : None */
        public: std::vector<NXOpen::NXObject *> Lookup
        (
            const NXString & key /** Map key */
        );
        /** Lookup a real to the validation map  <br> License requirements : None */
        public: void LookupNumber
        (
            const NXString & key /** Map key */,
            double* number /** Number associate with the key */,
            bool* found /** True text found False not found in map */
        );
        /**  Lookup a text to the validation map  <br> License requirements : None */
        public: void LookupText
        (
            const NXString & key /** Map key */,
            NXString* text /** Text associate with the key */,
            bool* found /** True text found False not found in map */
        );
        /** Lookup a integer to the validation map  <br> License requirements : None */
        public: void LookupInteger
        (
            const NXString & key /** Map key */,
            int* number /** Integer associate with the key */,
            bool* found /** True integer found False not found in map */
        );
        /**  Lookup a time to the validation map  <br> License requirements : None */
        public: void LookupTime
        (
            const NXString & key /** Map key */,
            int* day /** Date associate with the key */,
            int* time /** Time associate with the key */,
            bool* found /** True time found False not found in map */
        );
        /** Remove a key from the map  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void Remove
        (
            const NXString & key /** Map key */
        );
        /** The suppress state of the validation  @return  Supress flag true = supress false unsupress  <br> License requirements : None */
        public: bool GetSuppressed
        (
        );
        /**  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetSuppressed
        (
            bool suppress /** Suppress flag true = supress, false = unsupress*/
        );
        /** The initial result.  @return  result of validation object.  <br> License requirements : None */
        public: NXOpen::Validation::Result GetInitialResult
        (
        );
        /** Delete Validaion Object  <br> License requirements : None */
        public: void Delete
        (
        );
        /** Information display on a Validation Object  <br> License requirements : None */
        public: void Information
        (
        );
    };
}
#undef EXPORTLIBRARY
#endif
