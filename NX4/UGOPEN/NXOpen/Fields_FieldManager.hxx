#ifndef NXOpen_FIELDS_FIELDMANAGER_HXX_INCLUDED
#define NXOpen_FIELDS_FIELDMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_FieldManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Fields
    {
        class FieldManager;
    }
    namespace Fields
    {
        class Field;
    }
    namespace Fields
    {
        class FieldDomainCollection;
    }
    namespace Fields
    {
        class FieldExpression;
    }
    namespace Fields
    {
        class FieldVariable;
    }
    class NXObject;
    class Unit;
    namespace Fields
    {
        class _FieldManagerBuilder;
        /**  @brief  Represents the manager class of the Fields  

          */
        class NXOPENCPPEXPORT FieldManager : public NXObject
        {
            private: friend class  _FieldManagerBuilder;
            protected: FieldManager();
            /** Creates a @link Fields::FieldExpression Fields::FieldExpression@endlink  object
                      @return  field  <br> License requirements : None */
            public: NXOpen::Fields::FieldExpression * CreateFieldExpression
            (
                const NXString & field_exp_string /** expression string to be associated with the field   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unit_type /** unit of the field */
            );
            /** Create an independent variable to be added to the field 
                      @return  independent variable created and associated to the field  <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable * CreateIndependentVariable
            (
                NXOpen::Fields::Field * owner_field /** owner field */,
                const NXString & var_name /** name of the independent variable to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unit_type /** unit of the independent variable */,
                bool min_value_set /** logical value whether minimum value set */,
                double min_value /** minimum value of the variable range */,
                bool max_value_set /** logical value whether maximum value set */,
                double max_value /** maximum value of the variable range */,
                bool num_pts_set /** logical value whether num_pts set */,
                int num_pts /** num_pts of the variable range */,
                bool default_value_set /** logical value whether default value set */,
                double default_value /** default value of the variable range */
            );


            private: NXOpen::Fields::FieldDomainCollection *domains;
            /** Returns a collection of Units */
            public: NXOpen::Fields::FieldDomainCollection *Domains()
            {
                return domains;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
