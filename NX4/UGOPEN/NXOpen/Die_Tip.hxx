#ifndef NXOpen_DIE_TIP_HXX_INCLUDED
#define NXOpen_DIE_TIP_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_Tip.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_Feature.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class Tip;
    }
    class Curve;
    class Direction;
    namespace Features
    {
        class Feature;
    }
    class Point;
    namespace Die
    {
        class _TipBuilder;
        /** Represents a Tip feature.  <br> This class supports operations on a Tip feature, see TipBuilder for creation. <br> */
        class NXOPENCPPEXPORT Tip : public Features::Feature
        {
            private: friend class  _TipBuilder;
            protected: Tip();
            /** Creates a copy of the product data in die position. The product data is not visible upon creation. 
                    This method must be called before using the methods @link JA_TIP_delete_die_data JA_TIP_delete_die_data@endlink , 
                    @link JA_TIP_display_die_data JA_TIP_display_die_data@endlink , @link JA_TIP_undisplay_die_data JA_TIP_undisplay_die_data@endlink , 
                    @link JA_TIP_transform_die_point JA_TIP_transform_die_point@endlink , or @link JA_TIP_transform_die_direction JA_TIP_transform_die_direction@endlink .  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void CreateDieData
            (
                bool all_tips /** Create the die position product data of all tips in the operation? */
            );
            /** Deletes the copy of the product data.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void DeleteDieData
            (
            );
            /** Makes the product data in die position visible. The display of the Tip feature is made invisible.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void DisplayDieData
            (
            );
            /** Makes the product data in die position invisible. The display of the Tip feature is made visible.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void UndisplayDieData
            (
            );
            /** Transforms the point from die position to product position.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void TransformDiePoint
            (
                NXOpen::Point * point /** Point to be transformed. */
            );
            /** Transforms the direction from die position to product position.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void TransformDieDirection
            (
                NXOpen::Direction * vector /** Direction to be transformed. */
            );
            /** Sets reference curves in the die tip feature.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetReferenceCurves
            (
                const std::vector<NXOpen::Curve *> & objects /** Curves to be added to the tip */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
