#ifndef NXOpen_FEATURES_SHEETMETAL_MITEROPTIONS_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_MITEROPTIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_MiterOptions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_SheetMetal_MiterOptions.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class MiterOptions;
        }
    }
    class Expression;
    namespace Features
    {
        namespace SheetMetal
        {
            class _MiterOptionsBuilder;
            /** Represents a Miter Data Options builder. Mitre cut is essentially an end treatment to the contour flange feature,
                    which shall prevent merging/interference with the existing or newly placed features in sheet metal.*/
            class NXOPENCPPEXPORT MiterOptions : public TaggedObject
            {
                /** the miter positions options.*/
                public: enum PositionOptions
                {
                    PositionOptionsNone/** no miter */,
                    PositionOptionsStart/** miter is done at the beginning*/,
                    PositionOptionsEnd/** miter is done at the ending */,
                    PositionOptionsBoth/** miter is done both at beginning and ending*/
                };

                /** the miter type options.*/
                public: enum TypeOptions
                {
                    TypeOptionsNormalToSourceFace/** mitering is done along the normal to source face*/,
                    TypeOptionsNormalToThicknessFace/** mitering is done along the normal to thickness face*/
                };

                /** the closed corner type options.*/
                public: enum ClosedCornerTypeOptions
                {
                    ClosedCornerTypeOptionsNone/** Corner is not closed*/,
                    ClosedCornerTypeOptionsOpen/** corner is open*/,
                    ClosedCornerTypeOptionsClosed/** corner is closed completely*/,
                    ClosedCornerTypeOptionsCircularCutout/** corner has a circular cutout in it*/
                };

                private: friend class  _MiterOptionsBuilder;
                protected: MiterOptions();
                /**Returns  the position of miter. <br> License requirements : None */
                public: NXOpen::Features::SheetMetal::MiterOptions::PositionOptions Position
                (
                );
                /**Sets  the position of miter. <br> License requirements : None */
                public: void SetPosition
                (
                    NXOpen::Features::SheetMetal::MiterOptions::PositionOptions miter_position /** */
                );
                /**Returns  the miter start type. <br> License requirements : None */
                public: NXOpen::Features::SheetMetal::MiterOptions::TypeOptions StartType
                (
                );
                /**Sets  the miter start type. <br> License requirements : None */
                public: void SetStartType
                (
                    NXOpen::Features::SheetMetal::MiterOptions::TypeOptions start_type /** */
                );
                /**Returns  the miter end type. <br> License requirements : None */
                public: NXOpen::Features::SheetMetal::MiterOptions::TypeOptions EndType
                (
                );
                /**Sets  the miter end type. <br> License requirements : None */
                public: void SetEndType
                (
                    NXOpen::Features::SheetMetal::MiterOptions::TypeOptions end_type /** */
                );
                /** THE miter start value expression.Positive value adds material and negative v @return   <br> License requirements : None */
                public: NXOpen::Expression * GetStartValue
                (
                );
                /**  <br> License requirements : None */
                public: void SetStartValue
                (
                    const NXString & start_value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** THE miter end value expression. @return   <br> License requirements : None */
                public: NXOpen::Expression * GetEndValue
                (
                );
                /**  <br> License requirements : None */
                public: void SetEndValue
                (
                    const NXString & end_value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /**Returns  the cut type of the sheet. If set to true, mitering is done using the normal cutout method and aims
                        to reduce the small segements that result as part of miter computation, and is carried out on an unbent sheet.
                        Normally, the cut runs through from one bend centre to another.  The sheet is later bent to achieve the desired result. <br> License requirements : None */
                public: bool UseNormalCutoutMethod
                (
                );
                /**Sets  the cut type of the sheet. If set to true, mitering is done using the normal cutout method and aims
                        to reduce the small segements that result as part of miter computation, and is carried out on an unbent sheet.
                        Normally, the cut runs through from one bend centre to another.  The sheet is later bent to achieve the desired result. <br> License requirements : None */
                public: void SetUseNormalCutoutMethod
                (
                    bool cut_type /** */
                );
                /**Returns  the closed corner option type. <br> License requirements : None */
                public: NXOpen::Features::SheetMetal::MiterOptions::ClosedCornerTypeOptions ClosedCornerType
                (
                );
                /**Sets  the closed corner option type. <br> License requirements : None */
                public: void SetClosedCornerType
                (
                    NXOpen::Features::SheetMetal::MiterOptions::ClosedCornerTypeOptions cut_type /** */
                );
                /** THE diameter expression of the closed corner. Applicable only when @link Features::SheetMetal::MiterOptions::ClosedCornerTypeFeatures::SheetMetal::MiterOptions::ClosedCornerType @endlink and @link Features::SheetMetal::MiterOptions::SetClosedCornerTypeFeatures::SheetMetal::MiterOptions::SetClosedCornerType @endlink 
                            is @link Features::SheetMetal::MiterOptions::ClosedCornerTypeOptions::CircularCutout Features::SheetMetal::MiterOptions::ClosedCornerTypeOptions::CircularCutout@endlink . @return   <br> License requirements : None */
                public: NXOpen::Expression * GetClosedCornerDiameter
                (
                );
                /**  <br> License requirements : None */
                public: void SetClosedCornerDiameter
                (
                    const NXString & end_value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
