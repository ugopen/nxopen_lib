#ifndef NXOpen_FEATURES_DATUMPLANEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_DATUMPLANEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_DatumPlaneBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_DatumBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class DatumPlaneBuilder;
    }
    class DatumPlane;
    class Direction;
    class DisplayableObject;
    class Face;
    namespace Features
    {
        class DatumBuilder;
    }
    namespace Features
    {
        class Feature;
    }
    class ICurve;
    class Plane;
    class Point;
    namespace Features
    {
        class _DatumPlaneBuilderBuilder;
        /** Represents a datum plane feature builder. Provides methods to create datum planes 
        thru three points, point and direction and point on curve */
        class NXOPENCPPEXPORT DatumPlaneBuilder : public Features::DatumBuilder
        {
            /** Specifies the fixed type datum plane going thru only one specific plane or thru all planes */
            public: enum FixedType
            {
                FixedTypeAll/** Fixed datum plane thru all planes */,
                FixedTypeXy/** Fixed datum plane thru XY plane */,
                FixedTypeYz/** Fixed datum plane thru YZ plane */,
                FixedTypeZx/** Fixed datum plane thru ZX plane */
            };

            /** Specifies points for which arclength is to be used. Percentage of arclength is used for points for which 
            arclength option is not selected. Specified for creation of datum plane using thru three points method. */
            public: enum UseArcLength
            {
                UseArcLengthNoPoint/** All points use percentage of arclength */,
                UseArcLengthFirstPoint/** Only first point uses arclength */,
                UseArcLengthSecondPoint/** Only second point uses arclength */,
                UseArcLengthThirdPoint/** Only third point uses arclength */,
                UseArcLengthFirstAndSecondPoint/** Only first and second point use arclength */,
                UseArcLengthFirstAndThirdPoint/** Only first and third point use arclength */,
                UseArcLengthSecondAndThirdPoint/** Only second and third point use arclength */,
                UseArcLengthAllPoints/** All points use arclength */
            };

            /** Specifies the distance on the curve as absolute distance or relative distance as percentage */
            public: enum CurveOption
            {
                CurveOptionDistance/** Absolute distance. */,
                CurveOptionPercent/** Relative distance as percentage. */
            };

            /** Specifies the alternate solution for a datum plane using point on curve method */
            public: enum AlternateSolution
            {
                AlternateSolutionTangent/** Indicates the datum plane as tangent to curve */,
                AlternateSolutionNormal/** Datum plane at normal to curve */,
                AlternateSolutionBinormal/** Datum plane at binormal to curve */,
                AlternateSolutionOppositeTangent/** Datum plane at opposite to tangent to curve */,
                AlternateSolutionOppositeNormal/** Datum plane at opposite to normal to curve */,
                AlternateSolutionOppositeBinormal/** Datum plane at opposite to binormal to curve  */,
                AlternateSolutionProject/** This direction is calculated by projecting a point selected along a curve
                                                                                 to a line, a datum axis, an edge of a solid, a planar face or a datum plane 
                                                                                 */,
                AlternateSolutionProjectView/** Datum plane direction is calculated during creation based on the view plane.
                                                                                 The datum plane normal is projected onto the view plane during creation time.
                                                                                 The datum plane normal is maintained constant thereafter
                                                                                 */
            };

            /** Specifies different constraint types of selected geometries */
            public: enum ConstraintType
            {
                ConstraintTypeUndefined/** Not defined */,
                ConstraintTypeCoincident/** Coincident constraint*/,
                ConstraintTypeParallel/** Parallel constraint */,
                ConstraintTypePerpendicular/** Perpendicular constraint */,
                ConstraintTypeCenter/** Center constraint */,
                ConstraintTypeTangent/** Tangent constraint  */,
                ConstraintTypeDistance/** Distance constraint */,
                ConstraintTypeAngle/** Angle constraint  */,
                ConstraintTypeFrenet/** Frenet constraint */
            };

            private: friend class  _DatumPlaneBuilderBuilder;
            protected: DatumPlaneBuilder();
            /** Sets point and direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointAndDirection
            (
                NXOpen::Point * point /** Point */,
                NXOpen::Direction * direction /** Direction */
            );
            /** Sets curve or edge and arc length  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointOnCurve
            (
                double arc_length /** Arc length */,
                const NXString & constraint /** Constraint expression. Usually same as arc_length   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Features::DatumPlaneBuilder::AlternateSolution alternate_solution /** Alternate solution */,
                NXOpen::Features::DatumPlaneBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::ICurve * curve /** curve or edge */
            );
            /** Sets curve or edge and arc length  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointOnCurve
            (
                double arc_length /** Arc length */,
                const NXString & constraint /** Constraint expression. Usually same as arc_length   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Features::DatumPlaneBuilder::AlternateSolution alternate_solution /** Alternate solution */,
                NXOpen::Features::DatumPlaneBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::ICurve * curve /** Curve or edge */,
                NXOpen::Direction * direction /** Direction */
            );
            /** Sets curve or edge object and arc length with other geometry selected.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointOnCurve
            (
                double arc_length /** Arc length */,
                const NXString & constraint /** Constraint expression. Usually same as arc_length   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Features::DatumPlaneBuilder::CurveOption option /** Whether the absolute distance has been selected or relative */,
                NXOpen::ICurve * curve /** Curve or Edge object already created */,
                NXOpen::DisplayableObject * second_geometry /** Second geometric object */
            );
            /** Sets three different points.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreePoints
            (
                NXOpen::Point * point1 /** First point */,
                NXOpen::Point * point2 /** Second point */,
                NXOpen::Point * point3 /** Third point */,
                NXOpen::Features::DatumPlaneBuilder::UseArcLength use_arc_length /** Specify points which use arclength instead of percentage of arclength */
            );
            /** Sets one face object and offset  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFaceAndOffset
            (
                NXOpen::Face * face /** Face object */,
                double offset_value /** Offset double parameter */,
                const NXString & expression /** Offset string parameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets two different geometric objects. Possible combinations are: 
                 <list type="table">
                 <item>
                    <term>First Constraint</term>        
                    <description>Second Constraint </description> 
                 </item>
                 <item>
                    <term>Through Datum Axis  </term>    
                    <description>Through Axis Through Edge and Linear Geometry Through Face Axis Through Point Angle to Plane</description>
                 </item>
                 <item>
                    <term>Through Solid Edge and Linear Geometry </term>   
                    <description> Through Axis Through Edge and Linear Geometry Through Face Axis Through Point Angle to Plane</description>
                 </item>
                 <item>
                    <term>Through Face Axis</term>             
                    <description>Through Axis Through Edge and Linear Geometry Through Face Axis Through Point Angle to Plane</description>
                 </item>
                 <item>
                    <term>Through Point</term>                
                    <description>Through Axis Through Edge and Linear Geometry Parallel to Plane Perpendicular to Curve 
                                 Parallel to Surface?s Tangent Plane </description>
                 </item>
                 <item>
                    <term>Angle to Plane</term>                    
                    <description>Through Axis Through Edge and Linear Geometry Through Face Axis</description>
                 </item>
                 <item>
                    <term>Tangent to Face</term>               
                    <description>Through Point Angle to Plane, 0 Deg Angle to Plane, 90 Deg Tangent to Face</description>
                 </item>
                 <item>
                    <term>Through Curve</term>                  
                    <description>Through Point Perpendicular to View Plane </description>
                 </item>
                 </list>
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetGeometryAndConstraints
            (
                NXOpen::DisplayableObject * geometry_1 /** First geometric object  */,
                NXOpen::Features::DatumPlaneBuilder::ConstraintType geometry_constraint_type_1 /** Constraint type of first geometry */,
                int constraint_attribute_1 /** Constraint attribute value of first geometry */,
                double constraint_value_1 /** Constraint value parameter of first geometry */,
                const NXString & constraint_1 /** Constraint attached with first geometric object. 
                                                                                           Set to "0.0" in case value is not specified    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::DisplayableObject * geometry_2 /** Second geometric object */,
                NXOpen::Features::DatumPlaneBuilder::ConstraintType geometry_constraint_type_2 /** Constraint type of first geometry */,
                int constraint_attribute_2 /** Constraint attribute value of second geometry */,
                double constraint_value_2 /** Constraint value parameter of second geometry */,
                const NXString & constraint_2 /** Constraint attached with second geometric object. 
                                                                                           Set to "0.0" in case value is not specified   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets type of fixed datum plane.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFixedDatumPlane
            (
                NXOpen::Features::DatumPlaneBuilder::FixedType type /** Indicates fixed datum plane type */
            );
            /** The plane is use to create the feature  @return    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Plane * GetPlane
            (
            );
            /** Update the feature if the feature does not exist then create it @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::Feature * UpdateFeature
            (
            );
            /** The datum display object this is the feature output  @return    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::DatumPlane * GetDatum
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
