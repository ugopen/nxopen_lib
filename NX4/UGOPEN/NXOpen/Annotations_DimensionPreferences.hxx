#ifndef NXOpen_ANNOTATIONS_DIMENSIONPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DIMENSIONPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DimensionPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Annotations_ChamferDimensionPreferences.hxx>
#include <NXOpen/Annotations_DiameterRadiusPreferences.hxx>
#include <NXOpen/Annotations_NarrowDimensionPreferences.hxx>
#include <NXOpen/Annotations_OrdinateDimensionPreferences.hxx>
#include <NXOpen/Annotations_UnitsFormatPreferences.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class DimensionPreferences;
    }
    namespace Annotations
    {
        class ChamferDimensionPreferences;
    }
    namespace Annotations
    {
        class DiameterRadiusPreferences;
    }
    namespace Annotations
    {
        class NarrowDimensionPreferences;
    }
    namespace Annotations
    {
        class OrdinateDimensionPreferences;
    }
    namespace Annotations
    {
        class UnitsFormatPreferences;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        /** Represents dimension preferences */
        class NXOPENCPPEXPORT DimensionPreferences : public TransientObject
        {
            public: explicit DimensionPreferences(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~DimensionPreferences();
            /**Returns  the primary dimension and tolerance fraction denominator  <br> License requirements : None */
            public: NXOpen::Annotations::FractionDenominatorFormat PrimaryDimensionFractionDenominator
            (
            );
            /**Sets  the primary dimension and tolerance fraction denominator  <br> License requirements : None */
            public: void SetPrimaryDimensionFractionDenominator
            (
                NXOpen::Annotations::FractionDenominatorFormat fraction_denominator /** New primary dimension and tolerance fraction denominator */
            );
            /**Returns  the dual dimension and tolerance fraction denominator  <br> License requirements : None */
            public: NXOpen::Annotations::FractionDenominatorFormat DualDimensionFractionDenominator
            (
            );
            /**Sets  the dual dimension and tolerance fraction denominator  <br> License requirements : None */
            public: void SetDualDimensionFractionDenominator
            (
                NXOpen::Annotations::FractionDenominatorFormat fraction_denominator /** New dual dimension and tolerance fraction denominator */
            );
            /**Returns  the dimension text placement  <br> License requirements : None */
            public: NXOpen::Annotations::TextPlacement TextPlacement
            (
            );
            /**Sets  the dimension text placement  <br> License requirements : None */
            public: void SetTextPlacement
            (
                NXOpen::Annotations::TextPlacement placement /** New dimension text placement */
            );
            /**Returns  the extension line display   <br> License requirements : None */
            public: NXOpen::Annotations::ExtensionLineDisplay ExtensionLineDisplay
            (
            );
            /**Sets  the extension line display   <br> License requirements : None */
            public: void SetExtensionLineDisplay
            (
                NXOpen::Annotations::ExtensionLineDisplay display /** New extension line display */
            );
            /**Returns  the arrow display  <br> License requirements : None */
            public: NXOpen::Annotations::ArrowDisplay ArrowDisplay
            (
            );
            /**Sets  the arrow display  <br> License requirements : None */
            public: void SetArrowDisplay
            (
                NXOpen::Annotations::ArrowDisplay display /** New arrow display */
            );
            /**Returns  the flag indicating whether to display line between arrows  <br> License requirements : None */
            public: bool DisplayLineBetweenArrows
            (
            );
            /**Sets  the flag indicating whether to display line between arrows  <br> License requirements : None */
            public: void SetDisplayLineBetweenArrows
            (
                bool display_line_between_arrows /** Flag indicating whether to display line between arrows */
            );
            /**Returns  the text orientation  <br> License requirements : None */
            public: NXOpen::Annotations::TextOrientation TextOrientation
            (
            );
            /**Sets  the text orientation  <br> License requirements : None */
            public: void SetTextOrientation
            (
                NXOpen::Annotations::TextOrientation orientation /** New dimension text orientation */
            );
            /**Returns  the angle if text orientation is 
                        @link Annotations::TextOrientationByAngle Annotations::TextOrientationByAngle@endlink   <br> License requirements : None */
            public: double TextOrienationAngle
            (
            );
            /**Sets  the angle if text orientation is 
                        @link Annotations::TextOrientationByAngle Annotations::TextOrientationByAngle@endlink   <br> License requirements : None */
            public: void SetTextOrienationAngle
            (
                double text_orientation_angle /** New dimension text orienation angle */
            );
            /**Returns  the offset between dimension lines of baseline dimensions  <br> License requirements : None */
            public: double BaselineOffset
            (
            );
            /**Sets  the offset between dimension lines of baseline dimensions  <br> License requirements : None */
            public: void SetBaselineOffset
            (
                double baseline_offset /** New baseline offset */
            );
            /**Returns  the offset between dimension lines of chain dimensions  <br> License requirements : None */
            public: double ChainOffset
            (
            );
            /**Sets  the offset between dimension lines of chain dimensions  <br> License requirements : None */
            public: void SetChainOffset
            (
                double chain_offset /** New chain offset */
            );
            /**Returns  the flag indicating whether the dimension is a reference dimension  <br> License requirements : None */
            public: bool IsReferenceDimension
            (
            );
            /**Sets  the flag indicating whether the dimension is a reference dimension  <br> License requirements : None */
            public: void SetReferenceDimension
            (
                bool reference_dimension /** Flag indicating whether dimension is reference dimension */
            );
            /**Returns  the flag indicating whether the dimension is an inspection dimension  <br> License requirements : None */
            public: bool IsInspectionDimension
            (
            );
            /**Sets  the flag indicating whether the dimension is an inspection dimension  <br> License requirements : None */
            public: void SetInspectionDimension
            (
                bool inspection_dimension /** Flag indicating whether dimension is inspection dimension */
            );
            /**Returns  the trim dimension line style  <br> License requirements : None */
            public: NXOpen::Annotations::TrimDimensionLineStyle TrimDimensionLineStyle
            (
            );
            /**Sets  the trim dimension line style  <br> License requirements : None */
            public: void SetTrimDimensionLineStyle
            (
                NXOpen::Annotations::TrimDimensionLineStyle trim_dim_line /** Whether Dimension line will be trimmed when text crosses both extension lines */
            );
            /** Returns the units and format preferences  @return  Units and Format preferences  <br> License requirements : None */
            public: NXOpen::Annotations::UnitsFormatPreferences * GetUnitsFormatPreferences
            (
            );
            /** Sets the units and format preferences  <br> License requirements : None */
            public: void SetUnitsFormatPreferences
            (
                NXOpen::Annotations::UnitsFormatPreferences * preferences /** New Units and Format preferences */
            );
            /** Returns the narrow dimension preferences  @return  Narrow dimension preferences  <br> License requirements : None */
            public: NXOpen::Annotations::NarrowDimensionPreferences * GetNarrowDimensionPreferences
            (
            );
            /** Sets the narrow dimension preferences  <br> License requirements : None */
            public: void SetNarrowDimensionPreferences
            (
                NXOpen::Annotations::NarrowDimensionPreferences * preferences /** New narrow dimension preferences */
            );
            /** Returns the diameter and radius preferences  @return  Diameter and Radius preferences  <br> License requirements : None */
            public: NXOpen::Annotations::DiameterRadiusPreferences * GetDiameterRadiusPreferences
            (
            );
            /** Sets the diameter and radius preferences  <br> License requirements : None */
            public: void SetDiameterRadiusPreferences
            (
                NXOpen::Annotations::DiameterRadiusPreferences * preferences /** New diameter and radius preferences */
            );
            /** Returns the chamfer dimension preferences  @return  Chamfer dimension preferences  <br> License requirements : None */
            public: NXOpen::Annotations::ChamferDimensionPreferences * GetChamferDimensionPreferences
            (
            );
            /** Sets the chamfer dimension preferences  <br> License requirements : None */
            public: void SetChamferDimensionPreferences
            (
                NXOpen::Annotations::ChamferDimensionPreferences * preferences /** New chamfer dimension preferences */
            );
            /** Returns the ordinate dimension preferences  @return  Ordinate dimension preferences  <br> License requirements : None */
            public: NXOpen::Annotations::OrdinateDimensionPreferences * GetOrdinateDimensionPreferences
            (
            );
            /** Sets the ordinate dimension preferences  <br> License requirements : None */
            public: void SetOrdinateDimensionPreferences
            (
                NXOpen::Annotations::OrdinateDimensionPreferences * preferences /** New ordinate dimension preferences */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
