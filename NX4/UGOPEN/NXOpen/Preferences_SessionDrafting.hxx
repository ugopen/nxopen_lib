#ifndef NXOpen_PREFERENCES_SESSIONDRAFTING_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONDRAFTING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionDrafting.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class SessionDrafting;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        /** Represents the set of Drafting preferences applicable to entire session <br> To obtain an instance of this class, refer to @link SessionPreferences SessionPreferences@endlink  <br> */
        class NXOPENCPPEXPORT SessionDrafting
        {
            /** Describes the available edge face display types */
            public: enum EdgeFaceDisplayType
            {
                EdgeFaceDisplayTypeDisplayAndEmphasize/**  */,
                EdgeFaceDisplayTypeCurvesOnly/**  */
            };

            /** Describes the available types for annotation style preference */
            public: enum AnnotationStyleType
            {
                AnnotationStyleTypeTextboxAndLeaders/**  */,
                AnnotationStyleTypeDetailed/**  */
            };

            private: NXOpen::Preferences::SessionPreferences* m_owner;
            public: explicit SessionDrafting(NXOpen::Preferences::SessionPreferences *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /**Returns  the load on selection flag  <br> License requirements : None */
            public: bool LoadComponentOnFacetedViewSelection
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link LoadComponentOnFacetedViewSelection() LoadComponentOnFacetedViewSelection@endlink instead.
            @deprecated
            */
            public: bool GetLoadComponentOnFacetedViewSelection
            (
            ) { return this->LoadComponentOnFacetedViewSelection(); }
            /**Sets  the load on selection flag  <br> License requirements : None */
            public: void SetLoadComponentOnFacetedViewSelection
            (
                bool load_component_on_faceted_view_selection /**  */
            );
            /**Returns  the load on update flag  <br> License requirements : None */
            public: bool LoadComponentOnFacetedViewUpdate
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link LoadComponentOnFacetedViewUpdate() LoadComponentOnFacetedViewUpdate@endlink instead.
            @deprecated
            */
            public: bool GetLoadComponentOnFacetedViewUpdate
            (
            ) { return this->LoadComponentOnFacetedViewUpdate(); }
            /**Sets  the load on update flag  <br> License requirements : None */
            public: void SetLoadComponentOnFacetedViewUpdate
            (
                bool load_component_on_faceted_view_update /**  */
            );
            /**Returns  the extracted edge face display  <br> License requirements : None */
            public: NXOpen::Preferences::SessionDrafting::EdgeFaceDisplayType ExtractedEdgeFaceDisplay
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ExtractedEdgeFaceDisplay() ExtractedEdgeFaceDisplay@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::SessionDrafting::EdgeFaceDisplayType GetExtractedEdgeFaceDisplay
            (
            ) { return this->ExtractedEdgeFaceDisplay(); }
            /**Sets  the extracted edge face display  <br> License requirements : None */
            public: void SetExtractedEdgeFaceDisplay
            (
                NXOpen::Preferences::SessionDrafting::EdgeFaceDisplayType extracted_edge_face_display /**  */
            );
            /**Returns  the annotation style for preview <br> License requirements : None */
            public: NXOpen::Preferences::SessionDrafting::AnnotationStyleType AnnotationStyle
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AnnotationStyle() AnnotationStyle@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::SessionDrafting::AnnotationStyleType GetAnnotationStyle
            (
            ) { return this->AnnotationStyle(); }
            /**Sets  the annotation style for preview <br> License requirements : None */
            public: void SetAnnotationStyle
            (
                NXOpen::Preferences::SessionDrafting::AnnotationStyleType rubberbanding_display /**  */
            );
            /**Returns  the dynamic alignment flag.  <br> License requirements : None */
            public: bool DynamicAlignment
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DynamicAlignment() DynamicAlignment@endlink instead.
            @deprecated
            */
            public: bool GetDynamicAlignment
            (
            ) { return this->DynamicAlignment(); }
            /**Sets  the dynamic alignment flag.  <br> License requirements : None */
            public: void SetDynamicAlignment
            (
                bool dynamic_alignment /**  */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
