#ifndef NXOpen_SELECTION_HXX_INCLUDED
#define NXOpen_SELECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Selection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    class Selection;
    class UI;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class View;
    /** Defines an interface object for executing selection operations  <br> To obtain an instance of this class, refer to @link UI UI@endlink  <br> */
    class NXOPENUICPPEXPORT Selection
    {
        /**
                Indicates the scope for selecting objects.
            */
        public: enum SelectionScope
        {
            SelectionScopeUseDefault/** Use the default selection scope */,
            SelectionScopeWorkPart/** Use the work part */,
            SelectionScopeAnyInAssembly = 3/** Use any occurrence in the assembly */,
            SelectionScopeWorkPartAndOccurrence/** Use the work part or any occurrence */
        };

        /**
                Indicates the type of action to perform when an object is selected.
            */
        public: enum SelectionAction
        {
            SelectionActionEnableAll/** Include objects in selection */,
            SelectionActionEnableSpecific/** Include selected objects in selection */,
            SelectionActionDisableSpecific/** Remove selected objects from selection */,
            SelectionActionClearAndEnableSpecific/** Clear selection and include selected objects */,
            SelectionActionAllAndDisableSpecific/** Select all objects except for selected objects */,
            SelectionActionCount/** Include count of selected objects */
        };

        /**
                Indicates the general class of object to filter selection.
            */
        public: enum SelectionType
        {
            SelectionTypeAll/** Filter to select all object types */,
            SelectionTypeFeatures/** Filter to select all feature types */,
            SelectionTypeCurves/** Filter to select all curve types */,
            SelectionTypeFaces/** Filter to select all face types */,
            SelectionTypeEdges/** Filter to select all edge types */,
            SelectionTypeCurvesAndEdges/** Filter to select all curve and edge types */
        };

        /**
                Specify the user response for the selection operation.
            */
        public: enum Response
        {
            ResponseBack = 1/** User selected Back */,
            ResponseCancel/** User selected Cancel */,
            ResponseOk/** User selected Ok */,
            ResponseObjectSelectedByName/** User selected object by name */,
            ResponseObjectSelected/** User selected an object */
        };

        /**
                Specify the user response for general dialogs.
            */
        public: enum DialogResponse
        {
            DialogResponseNone/** No Response */,
            DialogResponsePick/** User picked object on screen */,
            DialogResponseOk/** User selected Ok */,
            DialogResponseCancel/** User selected Cancel */,
            DialogResponseBack/** User selected Back (if applicable) */,
            DialogResponseApply/** User selected Apply */,
            DialogResponseHelp/** User selected Help */
        };

        /** 
                Specify the type of features to select.
            */
        public: enum SelectionFeatureType
        {
            SelectionFeatureTypeBrowsable/** Select all browsable features */,
            SelectionFeatureTypeNoBooleanUdf/** Select all features except boolean and udf features */
        };

         /**  Used in selection methods to set the types of objects that are selectable.

            Commonly used:
             @code 
        For C++:
        in order to select...       set...
        any edge                    type=UF_solid_type, subtype=UF_all_subtype, solid_body_subtype=UF_UI_SEL_FEATURE_ANY_EDGE
        any face                    type=UF_solid_type, subtype=UF_all_subtype, solid_body_subtype=UF_UI_SEL_FEATURE_ANY_FACE

        For .NET:
        in order to select...       set...
        any edge                    type=NXOpen.UF.UFConstants.UF_solid_type, subtype=0, solid_body_subtype=NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_EDGE
        any face                    type=NXOpen.UF.UFConstants.UF_solid_type, subtype=0, solid_body_subtype=NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE
             @endcode 

            */
        public:
        struct MaskTriple
        {
            public: /** Object type. This can be one of the object types that are listed in 
                                  uf_object_types.h. For example, for point, 
                                  use UF_point_type in C++ and
                                  NXOpen.UF.UFConstants.UF_point_type in .NET. */int Type;
            public: /** Object subtype. This can either be 0 (UF_all_subtype) for any subtype, or a
                                    subtype of the selected type.
                                    The subtypes are listed in uf_object_types.h.
                                    */int Subtype;
            public: /** Solid body subtype. This is only meaningful when the type is 
                                   UF_solid_type.  In that case, this should be set to
                                   one of the solid type constants listed in uf_ui_types.h 
                                   under "Constants for selection solid_type". For example,
                                   to select any face, use UF_UI_SEL_FEATURE_ANY_FACE in C++ and 
                                   NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE in .NET */int SolidBodySubtype;
            public: MaskTriple() :
                Type(),
                Subtype(),
                SolidBodySubtype()
            {
            }
            /** Constructor for the MaskTriple struct. */ 
            public: MaskTriple(int INIT_type /** Object type. This can be one of the object types that are listed in 
                                  uf_object_types.h. For example, for point, 
                                  use UF_point_type in C++ and
                                  NXOpen.UF.UFConstants.UF_point_type in .NET. */, int INIT_subtype /** Object subtype. This can either be 0 (UF_all_subtype) for any subtype, or a
                                    subtype of the selected type.
                                    The subtypes are listed in uf_object_types.h.
                                    */, int INIT_solid_body_subtype /** Solid body subtype. This is only meaningful when the type is 
                                   UF_solid_type.  In that case, this should be set to
                                   one of the solid type constants listed in uf_ui_types.h 
                                   under "Constants for selection solid_type". For example,
                                   to select any face, use UF_UI_SEL_FEATURE_ANY_FACE in C++ and 
                                   NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE in .NET */) :
                Type(INIT_type),
                Subtype(INIT_subtype),
                SolidBodySubtype(INIT_solid_body_subtype)
            {
            }
        };

        private: NXOpen::UI* m_owner;
        public: explicit Selection(NXOpen::UI *owner): m_owner(owner)
        {
        }
        public: tag_t Tag() const;
        /** Select objects  @return  Ok, Back, or Cancel  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObjects
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            bool include_features /** Whether to allow the selection of features */,
            bool keep_highlighted /** Whether to keep the selection highlighted after it has been selected */,
            std::vector<NXOpen::NXObject *> & object_array /** The selected objects */
        );
        /** Select objects using filter defined by mask triples  @return  Ok, Back, or Cancel  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObjects
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            NXOpen::Selection::SelectionAction action /** Indicates how the mask array will modify the selection filter */,
            bool include_features /** Whether to allow the selection of features */,
            bool keep_highlighted /** Whether to keep the selection highlighted after it has been selected */,
            const std::vector<NXOpen::Selection::MaskTriple> & mask_array /** Modifies the list of object types that can be selected.
                                                                                                How it modifies the list of object types is determined by the SelectionAction parameter. */,
            std::vector<NXOpen::NXObject *> & object_array /** The selected objects */
        );
        /** Select objects using filter defined by selection type  @return  Ok, Back, or Cancel  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObjects
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            bool keep_highlighted /** Whether to allow the selection of features */,
            const std::vector<NXOpen::Selection::SelectionType> & type_array /** The types that can be selected */,
            std::vector<NXOpen::NXObject *> & object_array /** The selected objects */
        );
        /** Select object  @return  Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObject
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            bool include_features /** Whether to allow the selection of features */,
            bool keep_highlighted /** Whether to keep the selection highlighted after it has been selected */,
            NXOpen::NXObject ** object /** The selected object */,
            NXOpen::Point3d* cursor /** Absolute coordinates of cursor position. This is
                                                undefined if object is selected by name */
        );
        /** Select object using filter defined by mask triples  @return  Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObject
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            NXOpen::Selection::SelectionAction action /** Indicates how the mask array will modify the selection filter */,
            bool include_features /** Whether to allow the selection of features */,
            bool keep_highlighted /** Whether to keep the selection highlighted after it has been selected */,
            const std::vector<NXOpen::Selection::MaskTriple> & mask_array /** Modifies the list of object types that can be selected.
                                                                                                How it modifies the list of object types is determined by the SelectionAction parameter. */,
            NXOpen::NXObject ** object /** The selected object */,
            NXOpen::Point3d* cursor /** Absolute coordinates of cursor position. This is
                                                undefined if object is selected by name */
        );
        /** Select object using filter defined by selection type  @return  Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObject
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            bool keep_highlighted /** Whether to allow the selection of features */,
            const std::vector<NXOpen::Selection::SelectionType> & type_array /** The types of objects that can be selected */,
            NXOpen::NXObject ** object /** The selected object */,
            NXOpen::Point3d* cursor /** Absolute coordinates of cursor position. This is
                                                undefined if object is selected by name */
        );
        /** Select features  @return  Ok, Back, or Cancel  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectFeatures
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionFeatureType feat_type /** The types of features that are selectable */,
            std::vector<NXOpen::Features::Feature *> & feature_array /** The selected features */
        );
        /** Select screen position on graphics display  @return  Pick, Back, or Cancel  <br> License requirements : None */
        public: NXOpen::Selection::DialogResponse SelectScreenPosition
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::View ** object /** View of selected screen location */,
            NXOpen::Point3d* screen_position /** Selected screen position */
        );
        /** Returns the number of objects currently selected  @return  The number of objects currently selected  <br> License requirements : None */
        public: int GetNumSelectedObjects
        (
        );
        /** Returns the n'th object on the selection list     @return  The object at the given position on the selection list. Returns NULL if the index parameter
                                                is greater than the length of the list  <br> License requirements : None */
        public: NXOpen::NXObject * GetSelectedObject
        (
            int index /** The index. Should be between 0 and @link GetNumSelectedObjects GetNumSelectedObjects@endlink  */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
