#ifndef NXOpen_ROUTING_BENDCORNERCOLLECTION_HXX_INCLUDED
#define NXOpen_ROUTING_BENDCORNERCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_BendCornerCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class BendCornerCollection;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Routing
    {
        class BendCorner;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class SplineSegment;
    }
    namespace Routing
    {
        /** Represents a collection of @link BendCorner BendCorner@endlink  objects.  <br> To obtain an instance of this class, refer to @link RouteManager RouteManager@endlink  <br> */
        class NXOPENCPPEXPORT BendCornerCollection : public TaggedObjectCollection
        {
            /** Option for creating a bend using a bend table or using radius or ratio */
            public: enum Type
            {
                TypeRadiusRatio/** Using radius or ratio to  
                                                                  create a bend corner. */,
                TypeTable/**  Using a bend table to create a  
                                                                  bend corner. */
            };

            private: NXOpen::Routing::RouteManager* m_owner;
            public: explicit BendCornerCollection(NXOpen::Routing::RouteManager *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            class iterator
            {
            public:
                typedef Routing::BendCorner * value_type;
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Routing::BendCornerCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                NXOPENCPPEXPORT  value_type operator * ();
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Routing::BendCornerCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            iterator begin();
            iterator end()
            {
                return iterator(this);
            }
            /** Create a bend corner object at a Control Point.  @return  The tag of new bend corner object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::BendCorner * Create
            (
                NXOpen::Routing::ControlPoint * rcp /** Route control point to bend. */,
                bool use_bend_ratio /** TRUE: use bend ratio calculation,
                                                               FALSE: use given radius */,
                double bend_ratio /** Bend ratio only used if use_bend_ratio is 
                                                               TRUE. Must be greater than 0.5. */,
                double bend_radius /** Radius of bend corner arc, only used if 
                                                               use_bend_ratio is FALSE. Must be greater than 
                                                               ROUTE_LENGTH_TOL. */
            );
            /** This routine assigns a bend corner to the given input RCP object using
                        bend table entry. This "assignment" can involve the removal of an existing
                        corner at this location and the creation of a new corner.  @return  The newly created Bend Corner  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::BendCorner * AssignCornerByBendTable
            (
                NXOpen::Routing::ControlPoint * rcp /** Control point to assign corner to.  
                												    NULL_TAG not allowed. */,
                const NXString & bend_table /** The bend table entry that
                                                                       is used to create bend corner   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** This routine assigns a new bend corner to the given input bend corner object using
                        bend ratio. This "assignment" can involve the removal of an existing 
                        corner at this location and the creation of a new corner.  @return  The newly created Bend Corner  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::BendCorner * AssignCornerByBendRatio
            (
                NXOpen::Routing::BendCorner * bend_crn /** Input bend corner.  */,
                double bend_ratio /** Bend ratio must be greater than 0.5. */
            );
            /** This routine assigns a new bend corner to the given input bend corner object using
                        bend radius. This "assignment" can involve the removal of an existing 
                        corner at this location and the creation of a new corner.  @return  The newly created Bend Corner  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::BendCorner * AssignCornerByBendRadius
            (
                NXOpen::Routing::BendCorner * bend_crn /** Input bend corner. */,
                double bend_radius /** Radius of bend corner arc. */
            );
            /** Routine to determine if the given RCP is valid 
                        to be assigned a bend corner type specified in the type.  @return  TRUE - The control point is valid
                                                                             for the given bend corner type.
                                                                      FALSE - Otherwise  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool IsRcpValidForCorner
            (
                NXOpen::Routing::ControlPoint * rcp /** Control point to be interrogated. */,
                NXOpen::Routing::BendCornerCollection::Type type /** Using bend table or radius/ratio */
            );
            /** This is a utility routine to return corner information given
                         a RCP which is "at" (referenced by) a Bend corner  @return  true  - Given rcp is the control point of 
            									                  a bend corner.
                                                          false - otherwise  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool GetRcpCornerInfo
            (
                NXOpen::Routing::ControlPoint * rcp /** Control point being used */,
                NXOpen::Routing::BendCorner ** bcrn_obj /** The bend corner object, if the input control
                										      point is where a bend corner object pointing to. */
            );
            /** Enquire the Bend Corner that this segment represents.
                         (NULL can be returned, indicating that this segment does not
                         represent a Bend Corner.)  @return  Bend Corner that segment represents 
                                                          (NULL can be returned,indicating that 
                                                           segment does not represent a Bend Corner).  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::BendCorner * GetBendAssociatedToSegment
            (
                NXOpen::Routing::SplineSegment * segment /** Segment being queried for the 
                                                               Bend Corner it represents. */
            );
            /** Given a RCP, get bend corners pointing to it  @return  Corner objects pointing to the rcp.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::BendCorner *> GetBendsAssociatedToRcp
            (
                NXOpen::Routing::ControlPoint * rcp /** Input control point */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
