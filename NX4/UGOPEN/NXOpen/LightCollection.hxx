#ifndef NXOpen_LIGHTCOLLECTION_HXX_INCLUDED
#define NXOpen_LIGHTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     LightCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class LightCollection;
    class BasePart;
    class Light;
    /**
    Represents a collection of @link Light Light@endlink s.
     <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
    class NXOPENCPPEXPORT LightCollection : public TaggedObjectCollection
    {
        private: NXOpen::BasePart* m_owner;
        public: explicit LightCollection(NXOpen::BasePart *owner): m_owner(owner)
        {
        }
        public: tag_t Tag() const;
        class iterator
        {
        public:
            typedef Light * value_type;
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }
            explicit iterator(NXOpen::LightCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }
            iterator(const iterator &other)
            {
                copy(other);
            }
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            NXOPENCPPEXPORT  value_type operator * ();
            iterator & operator ++()
            {
                next();
                return *this;
            }
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::LightCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        iterator begin();
        iterator end()
        {
            return iterator(this);
        }
        /** Finds the @link  Light   Light @endlink  with the given identifier
            as recorded in a journal.  An object may not return the same value as its
            JournalIdentifier in different versions of the software.  However,
            newer versions of the software should find the same object when 
            FindObject is passed older versions of its journal identifier. In general,
            this method  should not be used in handwritten code and exists to
            support record and playback of journals.

            An exception will be thrown if no object can be found with the given
            journal identifier.  @return  Light with this identifier  <br> License requirements : None */
        public: NXOpen::Light * FindObject
        (
            const NXString & journal_identifier /** Identifier of the Light to be found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Modifies the intensities of a set of lights.  This is generally preferable
            to multiple consecutive invocations of JA_LIGHT_set_intensity, as with this
            method the graphics screen is only updated once, while for
            JA_LIGHT_set_intensity it would be updated once per call.  <br> License requirements : None */
        public: void SetLightIntensities
        (
            const std::vector<NXOpen::Light *> & lights /** */,
            const std::vector<double> & intensities /** */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
