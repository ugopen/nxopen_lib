#ifndef NXOpen_DIE_PIERCETASKBUILDER_HXX_INCLUDED
#define NXOpen_DIE_PIERCETASKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_PierceTaskBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class PierceTaskBuilder;
    }
    class DisplayableObject;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class ILocation;
    class IProfile;
    class View;
    namespace Die
    {
        class _PierceTaskBuilderBuilder;
        /** Represents a Pierce Task feature builder */
        class NXOPENCPPEXPORT PierceTaskBuilder : public Features::FeatureBuilder
        {
            /** Settings for the cam type of the pierce task. */
            public: enum CamTypes
            {
                CamTypesDirect/** Direct */,
                CamTypesAerial/** Aerial Cam */,
                CamTypesBaseMounted/** Base Mounted Cam */
            };

            /** Settings for the precistion type of the pierce task. */
            public: enum PrecisionTypes
            {
                PrecisionTypesGage/** Gage hole */,
                PrecisionTypesCritical/** Critical hole */,
                PrecisionTypesStandard/** Standard hole */
            };

            private: friend class  _PierceTaskBuilderBuilder;
            protected: PierceTaskBuilder();
            /**Returns  the tipped product of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Features::Feature * TippedProduct
            (
            );
            /**Sets  the tipped product of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTippedProduct
            (
                NXOpen::Features::Feature * tipped_product /** The tip of the operation where the pierce
                                                                                   task resides. */
            );
            /** Sets the pierce bounds of the pierce task 
                    Note - JA_PIERCE_TASK_set_tipped_product needs to be called before this function.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetPierceBounds
            (
                NXOpen::Die::DirectionOption direction /** Profile direction */,
                const std::vector<NXOpen::IProfile *> & profile_entries /** Profile entries that make up the 
                                                                                                              boundary of the pierce task */
            );
            /** Gets the pierce bounds of the pierce task  @return  Profile entries that make up the 
                                                                                                       boundary of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::IProfile *> GetPierceBounds
            (
                NXOpen::Die::DirectionOption* direction /** Profile direction */
            );
            /**Returns  the cam direction of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ILocation * CamDirection
            (
            );
            /**Sets  the cam direction of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCamDirection
            (
                NXOpen::ILocation * cam_direction /** */
            );
            /** Sets the associative objects of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAssociativeObjects
            (
                const std::vector<NXOpen::DisplayableObject *> & objects /** */
            );
            /** Gets the associative objects of the pierce task  @return   <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::DisplayableObject *> GetAssociativeObjects
            (
            );
            /** Sets the camera views of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraViews
            (
                const std::vector<NXOpen::View *> & objects /** */
            );
            /** Gets the camera views of the pierce task  @return   <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::View *> GetCameraViews
            (
            );
            /**Returns  the finish operation of the pierce task 
                    True indicates the pierce is to be a finish pierce. False indicates rough pierce.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool FinishOperation
            (
            );
            /**Sets  the finish operation of the pierce task 
                    True indicates the pierce is to be a finish pierce. False indicates rough pierce.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFinishOperation
            (
                bool finish_operation /** */
            );
            /**Returns  the layout flange setting of the pierce task. 
                    True indicates that the pierce curve is to be laid out on the flange.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool LayoutFlange
            (
            );
            /**Sets  the layout flange setting of the pierce task. 
                    True indicates that the pierce curve is to be laid out on the flange.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetLayoutFlange
            (
                bool layout_flange /** */
            );
            /**Returns  the cam type of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::PierceTaskBuilder::CamTypes CamType
            (
            );
            /**Sets  the cam type of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCamType
            (
                NXOpen::Die::PierceTaskBuilder::CamTypes cam_type /** */
            );
            /**Returns  the precision type of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::PierceTaskBuilder::PrecisionTypes PrecisionType
            (
            );
            /**Sets  the precision type of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetPrecisionType
            (
                NXOpen::Die::PierceTaskBuilder::PrecisionTypes precision_type /** */
            );
            /**Returns  the angle tolerance of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAngleTolerance
            (
                double angle_tolerance /** */
            );
            /**Returns  the distance tolerance of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDistanceTolerance
            (
                double distance_tolerance /** */
            );
            /** Sets the detailed description of the pierce task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDetails
            (
                std::vector<NXString> & strings /** detail strings   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the detailed description of the pierce task  @return  detail strings  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetDetails
            (
            );
            /** Gets the camera layer settings and xmlp data  @return  1 layer setting string for each camera object. 
                                                                           the string needs to be 256 characters long 
                                                                           (one for each user layer) with either 0 for off
                                                                           or 1 for on.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetCameraLayerAndXmlp
            (
                std::vector<NXString> & xmlp_data /** xmlp data */
            );
            /** Sets the camera layer settings and xmlp data  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraLayerAndXmlp
            (
                std::vector<NXString> & layer_settings /** 1 layer setting string for each camera object. 
                                                                               the string needs to be 256 characters long 
                                                                               (one for each user layer) with either 0 for off
                                                                               or 1 for on.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & xmlp_data /** xmlp data */
            );
            /** Sets the names of the camera  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraNames
            (
                std::vector<NXString> & strings /** each string contains the name of a camera object   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the names of the camera  @return  each string contains the name of a camera object  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetCameraNames
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
