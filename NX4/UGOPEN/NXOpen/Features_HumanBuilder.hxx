#ifndef NXOpen_FEATURES_HUMANBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_HUMANBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_HumanBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/HumanData.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class HumanBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    namespace Features
    {
        class _HumanBuilderBuilder;
        /** Represents a human feature.  <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateHumanBuilder Features::FeatureCollection::CreateHumanBuilder@endlink  <br> */
        class NXOPENCPPEXPORT HumanBuilder : public Features::FeatureBuilder
        {
            private: friend class  _HumanBuilderBuilder;
            protected: HumanBuilder();
            /** Sets human name  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetName
            (
                const NXString & name /** Name of the human   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the human name  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString Name
            (
            );
            /** Sets custom human figure file name  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetCustomHumanFileName
            (
                const NXString & custom_file_name /** Figure file name if created from cloning   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the custom human figure file name  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString CustomHumanFileName
            (
            );
            /** Sets human stature data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetStatureData
            (
                NXOpen::HumanData::StatureType stature_type /** Flag for percentile stature in database or actual stature measure */,
                double stature /** Stature value                                                     */,
                NXOpen::HumanData::StatureUnitType stature_unit /** Unit for stature                                                  */
            );
            /** Gets human stature data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void GetStatureData
            (
                NXOpen::HumanData::StatureType* stature_type /** Flag for percentile stature in database or actual stature measure */,
                double* stature /** Stature value                                                     */,
                NXOpen::HumanData::StatureUnitType* stature_unit /** Unit for stature                                                  */
            );
            /** Sets human weight data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetWeightData
            (
                NXOpen::HumanData::WeightType weight_type /** Flag for percentile weight in database or actual weight value     */,
                double weight /** Weight value                                                      */,
                NXOpen::HumanData::WeightUnitType weight_unit /** Unit for weight                                                   */
            );
            /** Gets human weight data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void GetWeightData
            (
                NXOpen::HumanData::WeightType* weight_type /** Flag for percentile weight in database or actual weight value     */,
                double* weight /** Weight value                                                      */,
                NXOpen::HumanData::WeightUnitType* weight_unit /** Unit for weight                                                   */
            );
            /** Sets human gender data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetGender
            (
                NXOpen::HumanData::GenderType gender /** Gender of the human                                               */
            );
            /**Returns  the human gender data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::GenderType Gender
            (
            );
            /** Sets database for human  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetDatabase
            (
                NXOpen::HumanData::DatabaseType database /** Indicates database used for creating the human                    */
            );
            /**Returns  the database for human  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::DatabaseType Database
            (
            );
            /** Sets human position  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetPosition
            (
                const NXOpen::Point3d & location /** Human global location  */
            );
            /**Returns  the human position  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point3d Position
            (
            );
            /** Sets human orientaion  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetOrientation
            (
                const NXOpen::Matrix3x3 & orientation /** Human orientation matrix relative to the absolute coordinate
                                                                                             system. Must be orthonormal */
            );
            /**Returns  the human orientaion  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Matrix3x3 Orientation
            (
            );
            /** Sets human stature data using expression  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetExpressionStatureData
            (
                const NXString & stature_expression /** Stature expression for custom stature input    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the human stature data using expression  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString ExpressionStatureData
            (
            );
            /** Sets human weight data using expression  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetExpressionWeightData
            (
                const NXString & weight_expression /** Weight expression for custom weight input    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the human weight data using expression  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString ExpressionWeightData
            (
            );
            /** Sets the reference point  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetReferencePoint
            (
                bool associative /** Flag for associative reference point */,
                NXOpen::HumanData::ReferencePointType reference_point_type /** Type of reference point type */,
                NXOpen::Point * reference_point /** Reference point */
            );
            /** Sets the hand shape data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandShapeData
            (
                int hand_type /** Left hand,right hand or both hands */,
                const NXString & handshape_name /** Name of hand shape in the list   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & neutral_handshape_name /** Name of neutral hand shape   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & handshape_lib /** Library of hand shape   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double handshape_value /** Value for applying hand shape */
            );
            /** Set joint limits  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetJointLimits
            (
                NXOpen::HumanData::JointType joint_name /** Joint name */,
                double joint_x_lower_limit /** X value of lower joint limit */,
                double joint_x_upper_limit /** X value of upper joint limit */,
                double joint_y_lower_limit /** Y value of lower joint limit */,
                double joint_y_upper_limit /** Y value of upper joint limit */,
                double joint_z_lower_limit /** Z value of lower joint limit */,
                double joint_z_upper_limit /** Z value of upper joint limit */,
                bool is_symmetric /** Flag of adjust symmetrical joint */
            );
            /** Set joint data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetJointData
            (
                NXOpen::HumanData::JointType joint_name /** Joint name */,
                double joint_x_value /** X value for applying adjust joint */,
                double joint_y_value /** Y value for applying adjust joint */,
                double joint_z_value /** Z value for applying adjust joint */,
                bool is_symmetric /** Flag of adjust symmetrical joint */
            );
            /** Update human  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void DoUpdate
            (
                bool update_posture_prediction /** Flag of update posture prediction */,
                bool update_reference_point /** Flag of update reference point */,
                bool update_reach_zone /** Flag of update reach zone */
            );
            /** Set flag for reset posture  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetResetPosture
            (
            );
            /** Set segment data for segment scaling  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetSegmentScalingData
            (
                NXOpen::HumanData::SegmentScalingType segment_name /** Segment name                            */,
                double depth_factor /** Depth factor value for segment scaling   */,
                double breadth_factor /** Breadth factor value for segment scaling */,
                double length_factor /** Length factor value for segment scaling  */
            );
            /** Set flag for reset segment  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetResetSegment
            (
            );
            /** Set flag for show human skeleton  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetShowSkeleton
            (
                bool show_skeleton /** Flag for showing skeleton */
            );
            /** Set data for advanced scaling  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetAdvancedScalingData
            (
                NXOpen::HumanData::AdvancedScalingType data_name /** Advanced scaling data name  */,
                double data_value /** Advanced scaling data value */
            );
            /** Export custom human file  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void ExportCustomHumanFile
            (
                const NXString & human_file_name /** Custom human file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Export custom posture file  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void ExportCustomPostureFile
            (
                const NXString & posture_file_name /** Custom posture file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Load custom posture file  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void LoadCustomPostureFile
            (
                const NXString & posture_file_name /** Custom posture file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set posture data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetPostureData
            (
                const NXString & posture_name /** Posture name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & posture_lib /** Posture library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Add hand shape library  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void AddHandShapeLib
            (
                const NXString & handshape_lib /** Hand shape library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Remove hand shape library  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void RemoveHandShapeLib
            (
                const NXString & handshape_lib /** Hand shape library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Add posture library  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void AddPostureLib
            (
                const NXString & posture_lib /** Posture library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Remove posture library  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void RemovePostureLib
            (
                const NXString & posture_lib /** Posture library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
