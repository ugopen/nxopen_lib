#ifndef NXOpen_LAYER_CATEGORYCOLLECTION_HXX_INCLUDED
#define NXOpen_LAYER_CATEGORYCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Layer_CategoryCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Layer
    {
        class CategoryCollection;
    }
    class BasePart;
    namespace Layer
    {
        class Category;
    }
    namespace Layer
    {
        /** Represents a collection of layer categories  <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
        class NXOPENCPPEXPORT CategoryCollection : public TaggedObjectCollection
        {
            private: NXOpen::BasePart* m_owner;
            public: explicit CategoryCollection(NXOpen::BasePart *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            class iterator
            {
            public:
                typedef Layer::Category * value_type;
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Layer::CategoryCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                NXOPENCPPEXPORT  value_type operator * ();
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Layer::CategoryCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            iterator begin();
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a new layer category  @return  The new category  <br> License requirements : None */
            public: NXOpen::Layer::Category * CreateCategory
            (
                const NXString & name /** The name must not NULL and 
                                            must not already be used by another layer category.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & description /** Optional   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & layers /** Layers to be placed into the category */
            );
            /** Finds the @link Category Category@endlink  with the given name. 
                    
                    An exception will be thrown if no object can be found with the given name.
                     @return   <br> License requirements : None */
            public: NXOpen::Layer::Category * FindObject
            (
                const NXString & name /** The name of the @link Category Category@endlink    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
