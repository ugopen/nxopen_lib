#ifndef NXOpen_GEOMETRICUTILITIES_EXTEND_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_EXTEND_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_Extend.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class Extend;
    }
    class DisplayableObject;
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _ExtendBuilder;
        /** Represents an extend data. 
            */
        class NXOPENCPPEXPORT Extend : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This enum represents the type of extend */
            public: enum ExtendType
            {
                ExtendTypeValue/** */,
                ExtendTypeUntilNext/** */,
                ExtendTypeUntilSelected/** */,
                ExtendTypeUntilExtended/** */,
                ExtendTypeThroughAll/** */
            };

            private: friend class  _ExtendBuilder;
            protected: Extend();
            /**Sets  the extend target for the following types
                        @link Extend::ExtendTypeUntilSelected Extend::ExtendTypeUntilSelected@endlink .  
                        @link Extend::ExtendTypeUntilExtended Extend::ExtendTypeUntilExtended@endlink .  
                        @link Extend::ExtendTypeUntilNext Extend::ExtendTypeUntilNext@endlink .  
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTarget
            (
                NXOpen::DisplayableObject * selected_object /** For @link Extend::ExtendTypeUntilSelected Extend::ExtendTypeUntilSelected@endlink 
                                                                                    it can be face, solid body,sheet body and datums.*/
            );
            /**Returns  the extend target for the following types
                        @link Extend::ExtendTypeUntilSelected Extend::ExtendTypeUntilSelected@endlink .  
                        @link Extend::ExtendTypeUntilExtended Extend::ExtendTypeUntilExtended@endlink .  
                        @link Extend::ExtendTypeUntilNext Extend::ExtendTypeUntilNext@endlink .  
                     <br> License requirements : None */
            public: NXOpen::DisplayableObject * Target
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Target() Target@endlink instead.
            @deprecated
            */
            public: NXOpen::DisplayableObject * GetTarget
            (
            ) { return this->Target(); }
            /**Returns  the extend value for the following type
                        @link Extend::ExtendTypeValue Extend::ExtendTypeValue@endlink .
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * Value
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Value() Value@endlink instead.
            @deprecated
            */
            public: NXOpen::Expression * GetValue
            (
            ) { return this->Value(); }
            /** Set extend value for the following type
                        @link Extend::ExtendTypeValue Extend::ExtendTypeValue@endlink .
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetValue
            (
                const NXString & value_expression /** For @link Extend::ExtendTypeValue Extend::ExtendTypeValue@endlink   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets  the extend type 
                        @link Extend::ExtendType Extend::ExtendType@endlink .
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimType
            (
                NXOpen::GeometricUtilities::Extend::ExtendType extend_type /**  */
            );
            /**Returns  the extend type 
                        @link Extend::ExtendType Extend::ExtendType@endlink .
                     <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Extend::ExtendType TrimType
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link TrimType() TrimType@endlink instead.
            @deprecated
            */
            public: NXOpen::GeometricUtilities::Extend::ExtendType GetTrimType
            (
            ) { return this->TrimType(); }
            /** Validate Self
                 @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
