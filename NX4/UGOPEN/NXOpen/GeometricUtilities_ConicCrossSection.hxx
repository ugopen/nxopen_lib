#ifndef NXOpen_GEOMETRICUTILITIES_CONICCROSSSECTION_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CONICCROSSSECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_ConicCrossSection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class ConicCrossSection;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _ConicCrossSectionBuilder;
        /** Represents a conic section data for face blend. 
            */
        class NXOPENCPPEXPORT ConicCrossSection : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This enum represents the offset options */
            public: enum OffsetMethod
            {
                OffsetMethodConstant/** Constant */,
                OffsetMethodLaw/** Control by law */
            };

            /** This enum represents the rho options */
            public: enum RhoMethod
            {
                RhoMethodConstant/** Constant */,
                RhoMethodLaw/** Control by law */,
                RhoMethodAutoEllipse/** Automatic Ellipse */
            };

            private: friend class  _ConicCrossSectionBuilder;
            protected: ConicCrossSection();
            /**Returns  the first offset for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::Expression * FirstOffset
            (
            );
            /** Sets the first offset for the conic section with face blend.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFirstOffset
            (
                const NXString & offset /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the second offset for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::Expression * SecondOffset
            (
            );
            /** Sets the second offset for the conic section with face blend.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondOffset
            (
                const NXString & offset /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the first offset option for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod FirstOffsetOption
            (
            );
            /**Sets  the first offset option for the conic section with face blend
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFirstOffsetOption
            (
                NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod method /** */
            );
            /**Returns  the second offset option for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod SecondOffsetOption
            (
            );
            /**Sets  the second offset option for the conic section with face blend
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondOffsetOption
            (
                NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod method /** */
            );
            /**Returns  the rho expression for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::Expression * Rho
            (
            );
            /** Sets a rho expression for the conic section with face blend.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRho
            (
                const NXString & rho /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the rho option for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ConicCrossSection::RhoMethod RhoOption
            (
            );
            /**Sets  the rho option for the conic section with face blend
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRhoOption
            (
                NXOpen::GeometricUtilities::ConicCrossSection::RhoMethod method /** */
            );
            /** Validate Self
                 @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
