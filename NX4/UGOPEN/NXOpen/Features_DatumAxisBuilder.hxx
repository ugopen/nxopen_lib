#ifndef NXOpen_FEATURES_DATUMAXISBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_DATUMAXISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_DatumAxisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_DatumBuilder.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class DatumAxisBuilder;
    }
    class Direction;
    class DisplayableObject;
    namespace Features
    {
        class DatumBuilder;
    }
    class ICurve;
    class NXObject;
    class Point;
    namespace Features
    {
        class _DatumAxisBuilderBuilder;
        /** Represents a datum axis feature builder. Provides methods to create datum axis thru two points, 
        point and direction and point on curve. Also provides generic method for creation of datum axis feature
         <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateDatumAxisBuilder Features::FeatureCollection::CreateDatumAxisBuilder@endlink  <br> */
        class NXOPENCPPEXPORT DatumAxisBuilder : public Features::DatumBuilder
        {
            /** Specifies the fixed type datum axis going thru only one specific axis or thru all axes. */
            public: enum FixedType
            {
                FixedTypeAll/** */,
                FixedTypeX/** */,
                FixedTypeY/** */,
                FixedTypeZ/** */
            };

            /** Specifies the distance on the curve as absolute distance or relative distance as percentage */
            public: enum CurveOption
            {
                CurveOptionDistance/** Absolute distance */,
                CurveOptionPercent/** Relative distance as percentage */
            };

            /** Specifies the alternate solution for datum axis using point on curve method only*/
            public: enum AlternateSolution
            {
                AlternateSolutionUndefined/** */,
                AlternateSolutionTangent/** */,
                AlternateSolutionNormal/** */,
                AlternateSolutionBinormal/** */,
                AlternateSolutionOppositeTangent/** */,
                AlternateSolutionOppositeNormal/** */,
                AlternateSolutionOppositeBinormal/**  */,
                AlternateSolutionProject/** This direction is calculated by projecting a point selected along a curve
                																	    to a line, a datum axis, an edge of a solid, a planar face or a datum plane 
                																	*/
            };

            /** Specifies different constraint types for selected geometries */
            public: enum ConstraintType
            {
                ConstraintTypeUndefined/** */,
                ConstraintTypeCoincident/** */,
                ConstraintTypeParallel/** */,
                ConstraintTypePerpendicular/** */,
                ConstraintTypeCenter/** */,
                ConstraintTypeTangent/** */,
                ConstraintTypeDistance/** */,
                ConstraintTypeAngle/** */,
                ConstraintTypeFrenet/** */
            };

            /** Specifies points for which arclength is to be used. Percentage of arclength is used for points for which 
            	arclength option is not selected. Specified for creation of datum axis using thru two points method. */
            public: enum UseArcLength
            {
                UseArcLengthNoPoint/** All points use percentage of arclength */,
                UseArcLengthFirstPoint/** Only first point uses arclength */,
                UseArcLengthSecondPoint/** Only second point uses arclength */,
                UseArcLengthAllPoints/** Both points use arclength */
            };

            private: friend class  _DatumAxisBuilderBuilder;
            protected: DatumAxisBuilder();
            /**Returns   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool ReverseDirection
            (
            );
            /**Sets   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseDirection
            (
                bool reverse_direction /** */
            );
            /**  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointAndDirection
            (
                NXOpen::Point * point /** */,
                NXOpen::Direction * direction /** */
            );
            /** Sets two points  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTwoPoints
            (
                NXOpen::Point * point1 /** */,
                NXOpen::Point * point2 /** */,
                NXOpen::Features::DatumAxisBuilder::UseArcLength use_arc_length /** Specify points which use arclength instead of percentage of arclength */
            );
            /** Sets curve or edge and arc length  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointOnCurve
            (
                double arc_length /** Arc length */,
                const NXString & constraint /** Constraint expression. Usually same as arc_length   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Features::DatumAxisBuilder::AlternateSolution alternate_solution /** Alternate solution */,
                NXOpen::Features::DatumAxisBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::ICurve * curve /** Curve or Edge object */
            );
            /** Sets Curve or Edge object and arc length with an extra geometry in picture  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointOnCurve
            (
                double arc_length /** Arc length */,
                const NXString & constraint /** Constraint expression. Usually same as arc_length   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Features::DatumAxisBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::ICurve * curve /** Curve or Edge object */,
                NXOpen::NXObject * second_geometry /** Second geometric object */
            );
            /** Sets Curve or Edge object and arc length with an extra geometry in picture  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointOnCurve
            (
                double arc_length /** Arc length */,
                const NXString & constraint /** Constraint expression. Usually same as arc_length   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Features::DatumAxisBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::NXObject * second_geometry /** Second Geometric object */,
                NXOpen::ICurve * curve /** Curve or Edge object */
            );
            /** Sets Curve or Edge object and arc length with an extra geometry in picture  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointOnCurve
            (
                double arc_length /** Arc length */,
                const NXString & constraint /** Constraint expression. Usually same as arc_length   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Features::DatumAxisBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::ICurve * curve /** Curve or Edge object */,
                NXOpen::DisplayableObject * second_geometry /** Second geometric object */
            );
            /** Sets Curve or Edge object and arc length with an extra geometry in picture  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointOnCurve
            (
                double arc_length /** Arc length */,
                const NXString & constraint /** Constraint expression. Usually same as arc_length   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Features::DatumAxisBuilder::CurveOption option /** Absolute distance or relative distance */,
                NXOpen::DisplayableObject * second_geometry /** Second Geometric object */,
                NXOpen::ICurve * curve /** Curve or Edge object */
            );
            /** Sets two different geometric objects. Possible combinations are:
                <list type="table">
                <item>
                    <term>First Constraint</term>        
                    <description>Second Constraint</description> 
                </item>
                <item>
                    <term>Through Point </term>        
                    <description>Solid Body Vertex (endpoint) or Edge Midpoint </description>
                </item>
                <item>
                    <term>Intersection of Plane </term>    
                    <description>Through the straight edge formed by the intersection of two planes </description>
                </item>
                <item>
                    <term>Through Curve</term>          
                    <description>Used with Through Point constraint and along a curve </description>
                </item>
                <item>
                    <term>Perpendicular to object </term>    
                    <description>Through Curve and Through Point perpendicular to lines, linear edge, 
                                 datum planes, datum axis, or planar faces </description>
                </item>        
                </list>                              
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetGeometryAndConstraints
            (
                NXOpen::DisplayableObject * geometry_1 /** First geometric object */,
                NXOpen::Features::DatumAxisBuilder::ConstraintType geometry_constraint_type_1 /** Constraint type of first geometry */,
                int constraint_attribute_1 /** Constraint attribute value of first geometry VRH alternate_solution_only - only for point on curve*/,
                double constraint_value_1 /** Constraint value parameter of first geometry */,
                const NXString & constraint_1 /** Constraint attached with first geometric object. 
                                                                                              Set to "0.0" in case value is not specified    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::DisplayableObject * geometry_2 /** Second geometric object */,
                NXOpen::Features::DatumAxisBuilder::ConstraintType geometry_constraint_type_2 /** Constraint type of second geometry */,
                int constraint_attribute_2 /** Constraint attribute value of second geometry */,
                double constraint_value_2 /** Constraint value parameter of second geometry */,
                const NXString & constraint_2 /** Constraint attached with second geometric object. 
                                                                                              Set to "0.0" in case value is not specified    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Sense direction /** Flag to specify datum axis direction */
            );
            /** Sets type of fixed datum axis  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFixedDatumAxis
            (
                NXOpen::Features::DatumAxisBuilder::FixedType type /** Indicates fixed datum axis type */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
