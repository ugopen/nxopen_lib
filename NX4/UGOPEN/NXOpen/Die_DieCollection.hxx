#ifndef NXOpen_DIE_DIECOLLECTION_HXX_INCLUDED
#define NXOpen_DIE_DIECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_DieCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class DieCollection;
    }
    namespace Features
    {
        class FeatureCollection;
    }
    namespace Features
    {
        class Feature;
    }
    namespace Die
    {
        class DrawDiePunchBuilder;
    }
    namespace Die
    {
        class FillBuilder;
    }
    namespace Die
    {
        class FlangeTaskBuilder;
    }
    namespace Die
    {
        class FormTaskBuilder;
    }
    namespace Die
    {
        class LineupBuilder;
    }
    namespace Die
    {
        class PierceTaskBuilder;
    }
    namespace Die
    {
        class RotorBuilder;
    }
    namespace Die
    {
        class SteelInsertBuilder;
    }
    namespace Die
    {
        class TrimTaskBuilder;
    }
    namespace Die
    {
        /** Represents a Die Engineering/Design feature builder.  <br> To obtain an instance of this class, refer to @link FeatureCollection FeatureCollection@endlink  <br> */
        class NXOPENCPPEXPORT DieCollection : public TaggedObjectCollection
        {
            private: NXOpen::Features::FeatureCollection* m_owner;
            public: explicit DieCollection(NXOpen::Features::FeatureCollection *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            class iterator
            {
            public:
                typedef Features::Feature * value_type;
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Die::DieCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                NXOPENCPPEXPORT  value_type operator * ();
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Die::DieCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            iterator begin();
            iterator end()
            {
                return iterator(this);
            }
            /** Creates/Edits the draw die punch feature builder.  @return  Draw Die Punch feature builder.  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DrawDiePunchBuilder * DrawDiePunch
            (
                NXOpen::Features::Feature * draw_die_punch /** Draw Die Punch to be edited, NULL_TAG if create. */
            );
            /** Creates/Edits the form task feature builder.  @return  Form Task feature builder.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::FormTaskBuilder * FormTask
            (
                NXOpen::Features::Feature * form_task /** Form Task to be edited, NULL_TAG if create. */
            );
            /** Creates/Edits the die_rotor feature builder.  @return  Die Rotor feature builder.  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::RotorBuilder * Rotor
            (
                NXOpen::Features::Feature * rotor /** Die Rotor to be edited, NULL_TAG if create */
            );
            /** Creates/Edits the flange task feature builder.  @return  Flange Task feature builder <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::FlangeTaskBuilder * FlangeTask
            (
                NXOpen::Features::Feature * flange_task /** Flange Task to be edited, NULL_TAG if create */
            );
            /** Creates/Edits the trim task feature builder.  @return  Trim Task feature builder <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::TrimTaskBuilder * TrimTask
            (
                NXOpen::Features::Feature * trim_task /** Trim Task to be edited, NULL_TAG if create */
            );
            /** Creates/Edits the pierce task feature builder.  @return  Pierce Task feature builder <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::PierceTaskBuilder * PierceTask
            (
                NXOpen::Features::Feature * pierce_task /** Pierce Task to be edited, NULL_TAG if create */
            );
            /** Creates/Edits the die area fill feature builder  @return  area fill feature builder <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::FillBuilder * Fill
            (
                NXOpen::Features::Feature * fill /** area fill to be edited, NULL_TAG if create */
            );
            /** Creates/Edits the die lineup feature builder  @return  lineup feature builder <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::LineupBuilder * Lineup
            (
                NXOpen::Features::Feature * lineup /** lineup to be edited, NULL_TAG if create */
            );
            /** Creates/Edits the steel insert feature builder  @return  Steel Insert feature builder <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::SteelInsertBuilder * Steelinsert
            (
                NXOpen::Features::Feature * steel_insert /** Steel Insert to be edited, NULL_TAG if create */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
