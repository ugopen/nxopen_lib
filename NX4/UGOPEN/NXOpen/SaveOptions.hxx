#ifndef NXOpen_SAVEOPTIONS_HXX_INCLUDED
#define NXOpen_SAVEOPTIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SaveOptions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class SaveOptions;
    class PartCollection;
    /** Contains accessor methods for all part save options that follow the session. See
    @link  PartSaveOptions   PartSaveOptions @endlink  for those part save options that are specific to a 
    particular part.  <br> To obtain an instance of this class, refer to @link PartCollection PartCollection@endlink  <br> */
    class NXOPENCPPEXPORT SaveOptions
    {
        private: NXOpen::PartCollection* m_owner;
        public: explicit SaveOptions(NXOpen::PartCollection *owner): m_owner(owner)
        {
        }
        public: tag_t Tag() const;
        /**Sets   @brief  the option indicating whether to generate Teamcenter Visualization
            .jt files when a part is saved  

          <br> License requirements : None */
        public: void SetVisualizationData
        (
            bool option /** */
        );
        /**Returns   @brief  the option indicating whether to generate Teamcenter Visualization
            .jt files when a part is saved  

          <br> License requirements : None */
        public: bool VisualizationData
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link VisualizationData() VisualizationData@endlink instead.
        @deprecated
        */
        public: bool GetVisualizationData
        (
        ) { return this->VisualizationData(); }
        /**Sets   @brief  the option indicating whether to generate data for true shape
            filtering (.ts files)  

           <br> License requirements : None */
        public: void SetTrueShapeData
        (
            bool option /** */
        );
        /**Returns   @brief  the option indicating whether to generate data for true shape
            filtering (.ts files)  

           <br> License requirements : None */
        public: bool TrueShapeData
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link TrueShapeData() TrueShapeData@endlink instead.
        @deprecated
        */
        public: bool GetTrueShapeData
        (
        ) { return this->TrueShapeData(); }
        /**Sets  the option that specifies the directory in which you want to
            file part family members.
            
            Note that setting this property will have no effect while running in 
            NX Manager mode.
             <br> License requirements : None */
        public: void SetFamilyDefaultDirectory
        (
            const NXString & dir /** */
        );
        /**Returns  the option that specifies the directory in which you want to
            file part family members.
            
            Note that setting this property will have no effect while running in 
            NX Manager mode.
             <br> License requirements : None */
        public: NXString FamilyDefaultDirectory
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link FamilyDefaultDirectory() FamilyDefaultDirectory@endlink instead.
        @deprecated
        */
        public: NXString GetFamilyDefaultDirectory
        (
        ) { return this->FamilyDefaultDirectory(); }
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
