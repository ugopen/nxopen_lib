#ifndef NXOpen_DRAWINGS_DRAFTINGVIEWCOLLECTION_HXX_INCLUDED
#define NXOpen_DRAWINGS_DRAFTINGVIEWCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_DraftingViewCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class DraftingViewCollection;
    }
    class Part;
    namespace Drawings
    {
        class DraftingView;
    }
    namespace Drawings
    {
        class DrawingSheet;
    }
    namespace Drawings
    {
        /** Represents a collection of @link DraftingView DraftingView@endlink s.    <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
        class NXOPENCPPEXPORT DraftingViewCollection : public TaggedObjectCollection
        {
            /** Specifies which drafting views to update. */
            public: enum ViewUpdateOption
            {
                ViewUpdateOptionAll/** Updates all views in scope (part or drawing sheet).*/,
                ViewUpdateOptionOutOfDate/** Updates all out of date views in scope (part or drawing sheet).*/,
                ViewUpdateOptionOutOfDateAutomatic/** Updates all out of date automatic views in scope (part or drawing sheet).*/
            };

            private: NXOpen::Part* m_owner;
            public: explicit DraftingViewCollection(NXOpen::Part *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            class iterator
            {
            public:
                typedef Drawings::DraftingView * value_type;
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Drawings::DraftingViewCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                NXOPENCPPEXPORT  value_type operator * ();
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Drawings::DraftingViewCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            iterator begin();
            iterator end()
            {
                return iterator(this);
            }
            /** Updates drafting views in the part determined by an update option.  
                        For example, to update all out of date views in a part, pass in @link ViewUpdateOptionOutOfDate ViewUpdateOptionOutOfDate@endlink .
                     <br> License requirements : drafting ("DRAFTING") */
            public: void UpdateViews
            (
                NXOpen::Drawings::DraftingViewCollection::ViewUpdateOption update_option /** View update option */
            );
            /** Updates drafting views in a sheet determined by an update option.  
                        For example, to update all out of date views on the sheet, pass in @link ViewUpdateOptionOutOfDate ViewUpdateOptionOutOfDate@endlink .
                     <br> License requirements : drafting ("DRAFTING") */
            public: void UpdateViews
            (
                NXOpen::Drawings::DraftingViewCollection::ViewUpdateOption update_option /** View update option */,
                NXOpen::Drawings::DrawingSheet * drawing /** */
            );
            /** Updates the drafting views.  The views in list can be spread 
                        amongst multiple sheets, but they must all belong to the same part.
                     <br> License requirements : drafting ("DRAFTING") */
            public: void UpdateViews
            (
                const std::vector<NXOpen::Drawings::DraftingView *> & views /** */
            );
            /** Finds the @link  DraftingView   DraftingView @endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  View with this identifier  <br> License requirements : None */
            public: NXOpen::Drawings::DraftingView * FindObject
            (
                const NXString & journal_identifier /** Identifier of the drafting view to be found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
