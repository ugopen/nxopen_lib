#ifndef NXOpen_JAMSESSION_HXX_INCLUDED
#define NXOpen_JAMSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     JamSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/JamTest.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopenjamtestcpp_exports.hxx>
namespace NXOpen
{
    class JamSession;
    class JamTest;
    class OMSchema;
    class _JamSessionBuilder;
    /** Represents a Jam session */
    class NXOPENJAMTESTCPPEXPORT JamSession : public TaggedObject
    {
         /** Allocation statistics */
        public:
        struct AllocationStatistics
        {
            public: /** */int NumJamTestsAllocated;
            public: /** */int NumJamTestsDeallocated;
            public: AllocationStatistics() :
                NumJamTestsAllocated(),
                NumJamTestsDeallocated()
            {
            }
            /** Constructor for the AllocationStatistics struct. */ 
            public: AllocationStatistics(int INIT_num_jam_tests_allocated /** */, int INIT_num_jam_tests_deallocated /** */) :
                NumJamTestsAllocated(INIT_num_jam_tests_allocated),
                NumJamTestsDeallocated(INIT_num_jam_tests_deallocated)
            {
            }
        };

        private: static JamSession *theJamSession;
        public: static JamSession *GetJamSession();
        private: friend class  _JamSessionBuilder;
        protected: JamSession();
        /** Create new JamTest  @return   <br> License requirements : None */
        public: NXOpen::JamTest * NewJamTest
        (
        );
        /** Get the allocation statistics  @return   <br> License requirements : None */
        public: NXOpen::JamSession::AllocationStatistics GetAllocationStatistics
        (
        );
        /** Returns the schemas  @return   <br> License requirements : None */
        public: std::vector<NXOpen::OMSchema *> GetOMSchemas
        (
        );
        /** Returns a schema  @return   <br> License requirements : None */
        public: NXOpen::OMSchema * GetOMSchema
        (
            const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
    };
}
#undef EXPORTLIBRARY
#endif
