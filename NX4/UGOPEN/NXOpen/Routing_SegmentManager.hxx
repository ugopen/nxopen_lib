#ifndef NXOpen_ROUTING_SEGMENTMANAGER_HXX_INCLUDED
#define NXOpen_ROUTING_SEGMENTMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_SegmentManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class SegmentManager;
    }
    class Part;
    class Curve;
    namespace Routing
    {
        class ArcSegmentCollection;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class LineSegmentCollection;
    }
    namespace Routing
    {
        class SplineSegmentCollection;
    }
    namespace Routing
    {
        /** Option to indicate if an existing @link Routing::LineSegment Routing::LineSegment@endlink ,
                @link Routing::ArcSegment Routing::ArcSegment@endlink  or
                @link Routing::SplineSegment Routing::SplineSegment@endlink  is user defined. */
        enum UserDefined
        {
            UserDefinedNotUserDefined/** System generated segment.
                                                                          System manages simplification and some update behavior. */,
            UserDefinedUserDefined/** User defined generated segment. */
        };

        /** Option to query if an existing @link Routing::ISegment Routing::ISegment@endlink 
                is a terminal segment. */
        enum Terminal
        {
            TerminalNotTerminalSeg/** Is not a terminal segment */,
            TerminalTerminalSeg/** Is a terminal segment */
        };

        /** Option to query if an existing @link Routing::ISegment Routing::ISegment@endlink 
                is interior to any @link Part Part@endlink . */
        enum Interior
        {
            InteriorNotInteriorToPart/** Is not interior to any part */,
            InteriorInteriorToPart/** Is interior to some part */
        };

    }
    namespace Routing
    {
        /** Contains the type of the routing part as well as the Collection objects for creating/iterating
                over routing objects.
             <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
        class NXOPENCPPEXPORT SegmentManager
        {
            private: NXOpen::Part* m_owner;
            public: explicit SegmentManager(NXOpen::Part *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /** Creates a @link Routing::ISegment Routing::ISegment@endlink  object following a curve.  @return  Created segment  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Routing::ISegment * CreateSegment
            (
                NXOpen::Curve * follow_curve /** Curve to follow */,
                NXOpen::Routing::ControlPoint * start_rcp /** Start @link Routing::ControlPoint Routing::ControlPoint@endlink  of the segment */,
                NXOpen::Routing::ControlPoint * end_rcp /** End @link Routing::ControlPoint Routing::ControlPoint@endlink  of the segment */,
                NXOpen::Routing::UserDefined user_defined /** Is segment user defined? */
            );
            /** Creates a line @link Routing::ISegment Routing::ISegment@endlink  object with input
                        @link Routing::ControlPoint Routing::ControlPoint@endlink  as ends.  @return  Created segment  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Routing::ISegment * CreateSegment
            (
                NXOpen::Routing::ControlPoint * start_rcp /** Start @link Routing::ControlPoint Routing::ControlPoint@endlink  of the segment */,
                NXOpen::Routing::ControlPoint * end_rcp /** End @link Routing::ControlPoint Routing::ControlPoint@endlink  of the segment */
            );
            /** Set segment follow curve.  Segment can change type to mirror the type of the follow curve being set.  @return  Segment can possibly change types.
                                                                Use the returned segment object pointer instead
                                                                of any older pointers after calling this function.
                                                                For eg: A LineSegment can become a SplineSegment after
                                                                calling this function if new follow curve is a spline.  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Routing::ISegment * SetFollowCurve
            (
                NXOpen::Routing::ISegment * segment /** Segment to set follow curve on */,
                NXOpen::Curve * follow_curve /** Follow curve of segment */
            );


            private: NXOpen::Routing::LineSegmentCollection *lineSegments;
            /** Line Segment collection */
            public: NXOpen::Routing::LineSegmentCollection *LineSegments()
            {
                return lineSegments;
            }
            private: NXOpen::Routing::ArcSegmentCollection *arcSegments;
            /** Arc Segment collection */
            public: NXOpen::Routing::ArcSegmentCollection *ArcSegments()
            {
                return arcSegments;
            }
            private: NXOpen::Routing::SplineSegmentCollection *splineSegments;
            /** Spline Segment collection */
            public: NXOpen::Routing::SplineSegmentCollection *SplineSegments()
            {
                return splineSegments;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
