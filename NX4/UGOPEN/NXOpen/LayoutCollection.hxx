#ifndef NXOpen_LAYOUTCOLLECTION_HXX_INCLUDED
#define NXOpen_LAYOUTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     LayoutCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/LayoutDefinition.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class LayoutCollection;
    class BasePart;
    class Layout;
    class LayoutDefinition;
    /** Represents a collection of layouts. <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
    class NXOPENCPPEXPORT LayoutCollection : public TaggedObjectCollection
    {
        private: NXOpen::BasePart* m_owner;
        public: explicit LayoutCollection(NXOpen::BasePart *owner): m_owner(owner)
        {
        }
        public: tag_t Tag() const;
        class iterator
        {
        public:
            typedef Layout * value_type;
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }
            explicit iterator(NXOpen::LayoutCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }
            iterator(const iterator &other)
            {
                copy(other);
            }
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            NXOPENCPPEXPORT  value_type operator * ();
            iterator & operator ++()
            {
                next();
                return *this;
            }
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::LayoutCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        iterator begin();
        iterator end()
        {
            return iterator(this);
        }
        /** Creates a layout using an @link LayoutDefinition LayoutDefinition@endlink . @return   <br> License requirements : None */
        public: NXOpen::Layout * Create
        (
            const NXString & name /** Name of layout   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::LayoutDefinition * layout_arrangement /** Arrangement and view location information*/,
            bool fit_all_views /** Flag that indicates for the system to perform a fit before
                                             displaying the view.  Otherwise the system displays the view 
                                             at the scale at which it was last saved. */
        );
        /** Constructs a @link LayoutDefinition LayoutDefinition@endlink  object to be used to create a layout.  If a layout is not created
             using the created definition object, the client is responsible for deleting it.   <br> License requirements : None */
        public: void NewLayoutDefinition
        (
            NXOpen::LayoutDefinition::ArrangementType arrangement /** Arrangement type */,
            NXOpen::LayoutDefinition ** layout_arrangement /** Layout arrangement used 
                                                                                            to create a layout */
        );
        /**Returns  the current the layout.  When in the drafting application and a drawing sheet is
            not displayed, this will return a layout that has limited operations that can be performed on it.
              <br> License requirements : None */
        public: NXOpen::Layout * Current
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Current() Current@endlink instead.
        @deprecated
        */
        public: NXOpen::Layout * GetCurrent
        (
        ) { return this->Current(); }
        /** Finds the @link  Layout   Layout @endlink  with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            FindObject is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  Layout found  <br> License requirements : None */
        public: NXOpen::Layout * FindObject
        (
            const NXString & journal_identifier /** Identifier to be found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
