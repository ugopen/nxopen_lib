#ifndef NXOpen_PREFERENCES_PARTVISUALIZATIONCOLORSETTING_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTVISUALIZATIONCOLORSETTING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartVisualizationColorSetting.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class PartVisualizationColorSetting;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    namespace Preferences
    {
        /** Represents the set of visualization preferences under color setting tab applicable to part  <br> To obtain an instance of this class, refer to @link PartPreferences PartPreferences@endlink  <br> */
        class NXOPENCPPEXPORT PartVisualizationColorSetting
        {
            /** Describes whether the random color display is applicable for faces or bodies */
            public: enum RandomColorDisplayFor
            {
                RandomColorDisplayForFaces/** For Faces */,
                RandomColorDisplayForBodies/** For Bodies */
            };

            private: NXOpen::Preferences::PartPreferences* m_owner;
            public: explicit PartVisualizationColorSetting(NXOpen::Preferences::PartPreferences *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /**Returns  the preselection color. Represents color of selectable objects for the current operation.  <br> License requirements : None */
            public: int PreselectionColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link PreselectionColor() PreselectionColor@endlink instead.
            @deprecated
            */
            public: int GetPreselectionColor
            (
            ) { return this->PreselectionColor(); }
            /**Sets  the preselection color. Represents color of selectable objects for the current operation.  <br> License requirements : None */
            public: void SetPreselectionColor
            (
                int preselection_color /**  */
            );
            /**Returns  the selection color. Represents color of selected objects, the grid, view names and borders, 
            and temporary points and conehead vectors.  <br> License requirements : None */
            public: int SelectionColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link SelectionColor() SelectionColor@endlink instead.
            @deprecated
            */
            public: int GetSelectionColor
            (
            ) { return this->SelectionColor(); }
            /**Sets  the selection color. Represents color of selected objects, the grid, view names and borders, 
            and temporary points and conehead vectors.  <br> License requirements : None */
            public: void SetSelectionColor
            (
                int selection_color /**  */
            );
            /**Returns  the color of hidden geometry.  <br> License requirements : None */
            public: int HiddenGeometryColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link HiddenGeometryColor() HiddenGeometryColor@endlink instead.
            @deprecated
            */
            public: int GetHiddenGeometryColor
            (
            ) { return this->HiddenGeometryColor(); }
            /**Sets  the color of hidden geometry.  <br> License requirements : None */
            public: void SetHiddenGeometryColor
            (
                int hidden_geometry_color /**  */
            );
            /** Allows user to shuffle the Random color  <br> License requirements : None */
            public: void ShuffleRandomColor
            (
            );
            /**Returns  the random color display flag. If true it provides a temporary display of unique colors 
            per solid object.  <br> License requirements : None */
            public: bool RandomColorDisplayOption
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link RandomColorDisplayOption() RandomColorDisplayOption@endlink instead.
            @deprecated
            */
            public: bool GetRandomColorDisplayOption
            (
            ) { return this->RandomColorDisplayOption(); }
            /**Sets  the random color display flag. If true it provides a temporary display of unique colors 
            per solid object.  <br> License requirements : None */
            public: void SetRandomColorDisplayOption
            (
                bool random_color_display_option /**  */
            );
            /**Returns  the random color display selection. <br> License requirements : None */
            public: NXOpen::Preferences::PartVisualizationColorSetting::RandomColorDisplayFor RandomColorDisplay
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link RandomColorDisplay() RandomColorDisplay@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::PartVisualizationColorSetting::RandomColorDisplayFor GetRandomColorDisplay
            (
            ) { return this->RandomColorDisplay(); }
            /**Sets  the random color display selection. <br> License requirements : None */
            public: void SetRandomColorDisplay
            (
                NXOpen::Preferences::PartVisualizationColorSetting::RandomColorDisplayFor random_color_display /**  */
            );
            /**Returns  the show widths flag. If true, the object width attribute determines the displayed width 
            of lines or curves used to represent an object.  <br> License requirements : None */
            public: bool ShowWidths
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ShowWidths() ShowWidths@endlink instead.
            @deprecated
            */
            public: bool GetShowWidths
            (
            ) { return this->ShowWidths(); }
            /**Sets  the show widths flag. If true, the object width attribute determines the displayed width 
            of lines or curves used to represent an object.  <br> License requirements : None */
            public: void SetShowWidths
            (
                bool show_widths /**  */
            );
            /**Returns  the monochrome display flag. If true it turns on the monochrome display options. 
            Monochrome display also applies to Expanded drawing views.  <br> License requirements : None */
            public: bool MonochromeDisplay
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link MonochromeDisplay() MonochromeDisplay@endlink instead.
            @deprecated
            */
            public: bool GetMonochromeDisplay
            (
            ) { return this->MonochromeDisplay(); }
            /**Sets  the monochrome display flag. If true it turns on the monochrome display options. 
            Monochrome display also applies to Expanded drawing views.  <br> License requirements : None */
            public: void SetMonochromeDisplay
            (
                bool monochrome_display /**  */
            );
            /**Returns  the monochrome color for preselected objects   <br> License requirements : None */
            public: int MonochromePreselectionColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link MonochromePreselectionColor() MonochromePreselectionColor@endlink instead.
            @deprecated
            */
            public: int GetMonochromePreselectionColor
            (
            ) { return this->MonochromePreselectionColor(); }
            /**Sets  the monochrome color for preselected objects   <br> License requirements : None */
            public: void SetMonochromePreselectionColor
            (
                int monochrome_preselection_color /**  */
            );
            /**Returns  the monochrome selection_color. Displays all selected/highlighted objects, 
            temporary display objects (such as coneheads, temporary text), and drawing borders 
            in this color.  <br> License requirements : None */
            public: int MonochromeSelectionColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link MonochromeSelectionColor() MonochromeSelectionColor@endlink instead.
            @deprecated
            */
            public: int GetMonochromeSelectionColor
            (
            ) { return this->MonochromeSelectionColor(); }
            /**Sets  the monochrome selection_color. Displays all selected/highlighted objects, 
            temporary display objects (such as coneheads, temporary text), and drawing borders 
            in this color.  <br> License requirements : None */
            public: void SetMonochromeSelectionColor
            (
                int monochrome_selection_color /**  */
            );
            /**Returns  the monochrome foreground color. Monochrome color for all displayable 
            objects, view borders, and view names.  <br> License requirements : None */
            public: int MonochromeForegroundColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link MonochromeForegroundColor() MonochromeForegroundColor@endlink instead.
            @deprecated
            */
            public: int GetMonochromeForegroundColor
            (
            ) { return this->MonochromeForegroundColor(); }
            /**Sets  the monochrome foreground color. Monochrome color for all displayable 
            objects, view borders, and view names.  <br> License requirements : None */
            public: void SetMonochromeForegroundColor
            (
                int monochrome_foreground_color /**  */
            );
            /**Returns  the monochrome background color  <br> License requirements : None */
            public: int MonochromeBackgroundColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link MonochromeBackgroundColor() MonochromeBackgroundColor@endlink instead.
            @deprecated
            */
            public: int GetMonochromeBackgroundColor
            (
            ) { return this->MonochromeBackgroundColor(); }
            /**Sets  the monochrome background color  <br> License requirements : None */
            public: void SetMonochromeBackgroundColor
            (
                int monochrome_background_color /**  */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
