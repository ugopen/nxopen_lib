#ifndef NXOpen_ANNOTATIONS_DIMENSIONCOLLECTION_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DIMENSIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DimensionCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Annotations_DimensionData.hxx>
#include <NXOpen/Annotations_PmiData.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class DimensionCollection;
    }
    class Part;
    namespace Annotations
    {
        class Dimension;
    }
    namespace Annotations
    {
        class ArcLengthDimension;
    }
    namespace Annotations
    {
        class ChamferDimension;
    }
    namespace Annotations
    {
        class ConcentricCircleDimension;
    }
    namespace Annotations
    {
        class CylindricalDimension;
    }
    namespace Annotations
    {
        class DiameterDimension;
    }
    namespace Annotations
    {
        class DimensionData;
    }
    namespace Annotations
    {
        class FoldedRadiusDimension;
    }
    namespace Annotations
    {
        class HoleDimension;
    }
    namespace Annotations
    {
        class HorizontalDimension;
    }
    namespace Annotations
    {
        class HorizontalOrdinateDimension;
    }
    namespace Annotations
    {
        class MajorAngularDimension;
    }
    namespace Annotations
    {
        class MinorAngularDimension;
    }
    namespace Annotations
    {
        class OrdinateOriginDimension;
    }
    namespace Annotations
    {
        class ParallelDimension;
    }
    namespace Annotations
    {
        class PerpendicularDimension;
    }
    namespace Annotations
    {
        class PmiArcLengthDimension;
    }
    namespace Annotations
    {
        class PmiChamferDimension;
    }
    namespace Annotations
    {
        class PmiConcentricCircleDimension;
    }
    namespace Annotations
    {
        class PmiCylindricalDimension;
    }
    namespace Annotations
    {
        class PmiData;
    }
    namespace Annotations
    {
        class PmiDiameterDimension;
    }
    namespace Annotations
    {
        class PmiFoldedRadiusDimension;
    }
    namespace Annotations
    {
        class PmiHoleDimension;
    }
    namespace Annotations
    {
        class PmiHorizontalDimension;
    }
    namespace Annotations
    {
        class PmiHorizontalOrdinateDimension;
    }
    namespace Annotations
    {
        class PmiMajorAngularDimension;
    }
    namespace Annotations
    {
        class PmiMinorAngularDimension;
    }
    namespace Annotations
    {
        class PmiOrdinateOriginDimension;
    }
    namespace Annotations
    {
        class PmiParallelDimension;
    }
    namespace Annotations
    {
        class PmiPerpendicularDimension;
    }
    namespace Annotations
    {
        class PmiRadiusDimension;
    }
    namespace Annotations
    {
        class PmiVerticalDimension;
    }
    namespace Annotations
    {
        class PmiVerticalOrdinateDimension;
    }
    namespace Annotations
    {
        class RadiusDimension;
    }
    namespace Annotations
    {
        class VerticalDimension;
    }
    namespace Annotations
    {
        class VerticalOrdinateDimension;
    }
    class Xform;
    namespace Annotations
    {
        /** Represents a collection of @link Annotations::Dimension Annotations::Dimension@endlink  objects  <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
        class NXOPENCPPEXPORT DimensionCollection : public TaggedObjectCollection
        {
            private: NXOpen::Part* m_owner;
            public: explicit DimensionCollection(NXOpen::Part *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            class iterator
            {
            public:
                typedef Annotations::Dimension * value_type;
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Annotations::DimensionCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                NXOPENCPPEXPORT  value_type operator * ();
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Annotations::DimensionCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            iterator begin();
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a major angular dimension  @return  New major angular dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::MajorAngularDimension * CreateMajorAngularDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI major angular dimension  @return  New PMI major angular dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiMajorAngularDimension * CreatePmiMajorAngularDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a minor angular dimension  @return  New minor angular dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::MinorAngularDimension * CreateMinorAngularDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI minor angular dimension  @return  New PMI minor angular dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiMinorAngularDimension * CreatePmiMinorAngularDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates an arc length dimension  @return  New arc length dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::ArcLengthDimension * CreateArcLengthDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI arc length dimension  @return  New PMI arc length dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiArcLengthDimension * CreatePmiArcLengthDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a chamfer dimension  @return  New chamfer dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::ChamferDimension * CreateChamferDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI chamfer dimnension  @return  New PMI chamfer dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiChamferDimension * CreatePmiChamferDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /**  Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a concentric circle dimension  @return  New concentric circle dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::ConcentricCircleDimension * CreateConcentricCircleDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI concentric circle dimension  @return  New PMI concentric circle dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiConcentricCircleDimension * CreatePmiConcentricCircleDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a cylindrical dimension  @return  New cylindrical dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::CylindricalDimension * CreateCylindricalDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI cylindrical dimension  @return  New PMI cylindrical dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiCylindricalDimension * CreatePmiCylindricalDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a diameter dimension  @return  New diameter dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::DiameterDimension * CreateDiameterDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI diameter dimension  @return  New PMI diameter dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiDiameterDimension * CreatePmiDiameterDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a folded radius dimension  @return  New folded radius dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::FoldedRadiusDimension * CreateFoldedRadiusDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI folded radius dimension  @return  New PMI folded radius dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiFoldedRadiusDimension * CreatePmiFoldedRadiusDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a hole dimension  @return  New hole dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::HoleDimension * CreateHoleDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI hole dimension  @return  New PMI hole dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiHoleDimension * CreatePmiHoleDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a horizontal dimension  @return  New horizontal dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::HorizontalDimension * CreateHorizontalDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI horizontal dimension  @return  New PMI horizontal dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiHorizontalDimension * CreatePmiHorizontalDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a horizontal ordinate dimension  @return  New horizontal ordinate dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::HorizontalOrdinateDimension * CreateHorizontalOrdinateDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI horizontal ordinate dimension  @return  New PMI horizontal ordinate dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiHorizontalOrdinateDimension * CreatePmiHorizontalOrdinateDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a parallel dimension  @return  New parallel dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::ParallelDimension * CreateParallelDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI parallel dimension  @return  New PMI parallel dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiParallelDimension * CreatePmiParallelDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a perpendicular dimension  @return  New perpendicular dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::PerpendicularDimension * CreatePerpendicularDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI perpendicular dimension  @return  New PMI perpendicular dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiPerpendicularDimension * CreatePmiPerpendicularDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a radius dimension  @return  New radius dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::RadiusDimension * CreateRadiusDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::RadiusDimensionType radius_type /** Radius type */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI radius dimension  @return  New PMI radius dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiRadiusDimension * CreatePmiRadiusDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::RadiusDimensionType radius_type /** Radius type */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a vertical dimension  @return  New vertical dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::VerticalDimension * CreateVerticalDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI vertical dimension  @return  New PMI vertical dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiVerticalDimension * CreatePmiVerticalDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a vertical ordinate dimension  @return  New vertical ordinate dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::VerticalOrdinateDimension * CreateVerticalOrdinateDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI vertical ordinate dimension  @return  New PMI vertical ordinate dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiVerticalOrdinateDimension * CreatePmiVerticalOrdinateDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates an ordinate origin dimension  @return  New ordinate origin dimension  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::OrdinateOriginDimension * CreateOrdinateOriginDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI ordinate origin dimension  @return  New PMI ordinate origin dimension  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiOrdinateOriginDimension * CreatePmiOrdinateOriginDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
