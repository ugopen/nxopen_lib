#ifndef NXOpen_PARABOLA_HXX_INCLUDED
#define NXOpen_PARABOLA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Parabola.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Conic.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Parabola;
    class Conic;
    class _ParabolaBuilder;
    /** Represents a parabola curve.  <br> To create a new instance of this class, use @link CurveCollection::CreateParabola CurveCollection::CreateParabola@endlink  <br> */
    class NXOPENCPPEXPORT Parabola : public Conic
    {
        private: friend class  _ParabolaBuilder;
        protected: Parabola();
        /**Returns  the focal length.  <br> License requirements : None */
        public: double FocalLength
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link FocalLength() FocalLength@endlink instead.
        @deprecated
        */
        public: double GetFocalLength
        (
        ) { return this->FocalLength(); }
        /**Returns  the minimum DY width.  <br> License requirements : None */
        public: double MinimumDY
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link MinimumDY() MinimumDY@endlink instead.
        @deprecated
        */
        public: double GetMinimumDY
        (
        ) { return this->MinimumDY(); }
        /**Returns  the maximum DY width.  <br> License requirements : None */
        public: double MaximumDY
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link MaximumDY() MaximumDY@endlink instead.
        @deprecated
        */
        public: double GetMaximumDY
        (
        ) { return this->MaximumDY(); }
        /**Sets  the focal length.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetFocalLength
        (
            double focal_length /** */
        );
    };
}
#undef EXPORTLIBRARY
#endif
