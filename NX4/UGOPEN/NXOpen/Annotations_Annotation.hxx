#ifndef NXOpen_ANNOTATIONS_ANNOTATION_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ANNOTATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_Annotation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_Associativity.hxx>
#include <NXOpen/Annotations_LetteringPreferences.hxx>
#include <NXOpen/Annotations_LineAndArrowPreferences.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class Annotation;
    }
    namespace Annotations
    {
        class Associativity;
    }
    namespace Annotations
    {
        class LetteringPreferences;
    }
    namespace Annotations
    {
        class LineAndArrowPreferences;
    }
    class DisplayableObject;
    class Point;
    class View;
    class Xform;
    namespace Annotations
    {
        class _AnnotationBuilder;
        /** Represents an annotation / PMI (Product and Manufacturing Information) object.
                 <br> 
                Creation of drafting annotation objects is controlled by drafting license.  <br> 
                 <br> 
                Creation of PMI objects is controlled by geometric_tol license.  <br> 
                 <br> 
                In all edit methods, the changes are not applied to the system until
                an update is performed.  An update can be performed by calling @link Update::DoUpdate Update::DoUpdate@endlink (). <br>         
             <br> This is an abstract class. <br> */
        class NXOPENCPPEXPORT Annotation : public DisplayableObject
        {
             /** Describes the geometry that an annotation's origin
                    is associated with */
            public:
            struct AssociativeOriginData
            {
                public: /** Type of associativity */NXOpen::Annotations::AssociativeOriginType OriginType;
                public: /** View of associativity for the annotation. 
                                                    Used for @link AssociativeOriginTypeRelativeToView AssociativeOriginTypeRelativeToView@endlink  */NXOpen::View * View;
                public: /** The member view in which the absolute model
                                                    point lies.  This is used for mapping onto
                                                    the drawing. 
                                                    Used for @link AssociativeOriginTypeRelativeToGeometry AssociativeOriginTypeRelativeToGeometry@endlink */NXOpen::View * ViewOfGeometry;
                public: /** Absolute point in absolute space the annotation
                                                    is associated with. */NXOpen::Point * PointOnGeometry;
                public: /** Annotation to align with. 
                                                    Used for @link AssociativeOriginTypeVerticallyAligned AssociativeOriginTypeVerticallyAligned@endlink */NXOpen::Annotations::Annotation * VertAnnotation;
                public: /** Alignment position on
                                                                            vert_annotation to
                                                                            align to. 
                                                                            Used for @link AssociativeOriginTypeVerticallyAligned AssociativeOriginTypeVerticallyAligned@endlink */NXOpen::Annotations::AlignmentPosition VertAlignmentPosition;
                public: /** Annotation to align with. 
                                                                            Used for @link AssociativeOriginTypeHorizontallyAligned AssociativeOriginTypeHorizontallyAligned@endlink */NXOpen::Annotations::Annotation * HorizAnnotation;
                public: /** Alignment position on
                                                                            horiz_annotation to
                                                                            align to. 
                                                                            Used for @link AssociativeOriginTypeHorizontallyAligned AssociativeOriginTypeHorizontallyAligned@endlink */NXOpen::Annotations::AlignmentPosition HorizAlignmentPosition;
                public: /** Alignment annotation.
                                                    Used for @link AssociativeOriginTypeAlignedWithArrows AssociativeOriginTypeAlignedWithArrows@endlink .*/NXOpen::Annotations::Annotation * AlignedAnnotation;
                public: /** 1 for dimension line 1, 2 for dimension line 2.
                                                    Used for @link AssociativeOriginTypeAlignedWithArrows AssociativeOriginTypeAlignedWithArrows@endlink */int DimensionLine;
                public: /** The member view in  which the absolute model
                                                    point lies.  This is used for mapping onto
                                                    the drawing.  May be NULL if annotation is
                                                    on the model or the point is on the drawing.
                                                    Used for @link AssociativeOriginTypeAtAPoint AssociativeOriginTypeAtAPoint@endlink */NXOpen::View * AssociatedView;
                public: /** Origin location of annotation.
                                                    Used for @link AssociativeOriginTypeAtAPoint AssociativeOriginTypeAtAPoint@endlink */NXOpen::Point * AssociatedPoint;
                public: /** Annotation to align to.
                                                                                @link AssociativeOriginTypeOffsetFromText AssociativeOriginTypeOffsetFromText@endlink */NXOpen::Annotations::Annotation * OffsetAnnotation;
                public: /** Alignment position
                                                                                on annotation to
                                                                                align with.
                                                                                @link AssociativeOriginTypeOffsetFromText AssociativeOriginTypeOffsetFromText@endlink */NXOpen::Annotations::AlignmentPosition OffsetAlignmentPosition;
                public: /** X Offset factor from
                                                                                associated point.
                                                                                @link AssociativeOriginTypeOffsetFromText AssociativeOriginTypeOffsetFromText@endlink */double XOffsetFactor;
                public: /** Y Offset factor from
                                                                                associated point.
                                                                                @link AssociativeOriginTypeOffsetFromText AssociativeOriginTypeOffsetFromText@endlink */double YOffsetFactor;
                public: AssociativeOriginData() :
                    OriginType((NXOpen::Annotations::AssociativeOriginType)0),
                    View(),
                    ViewOfGeometry(),
                    PointOnGeometry(),
                    VertAnnotation(),
                    VertAlignmentPosition((NXOpen::Annotations::AlignmentPosition)0),
                    HorizAnnotation(),
                    HorizAlignmentPosition((NXOpen::Annotations::AlignmentPosition)0),
                    AlignedAnnotation(),
                    DimensionLine(),
                    AssociatedView(),
                    AssociatedPoint(),
                    OffsetAnnotation(),
                    OffsetAlignmentPosition((NXOpen::Annotations::AlignmentPosition)0),
                    XOffsetFactor(),
                    YOffsetFactor()
                {
                }
                /** Constructor for the AssociativeOriginData struct. */ 
                public: AssociativeOriginData(NXOpen::Annotations::AssociativeOriginType INIT_origin_type /** Type of associativity */, NXOpen::View * INIT_view /** View of associativity for the annotation. 
                                                    Used for @link AssociativeOriginTypeRelativeToView AssociativeOriginTypeRelativeToView@endlink  */, NXOpen::View * INIT_view_of_geometry /** The member view in which the absolute model
                                                    point lies.  This is used for mapping onto
                                                    the drawing. 
                                                    Used for @link AssociativeOriginTypeRelativeToGeometry AssociativeOriginTypeRelativeToGeometry@endlink */, NXOpen::Point * INIT_point_on_geometry /** Absolute point in absolute space the annotation
                                                    is associated with. */, NXOpen::Annotations::Annotation * INIT_vert_annotation /** Annotation to align with. 
                                                    Used for @link AssociativeOriginTypeVerticallyAligned AssociativeOriginTypeVerticallyAligned@endlink */, NXOpen::Annotations::AlignmentPosition INIT_vert_alignment_position /** Alignment position on
                                                                            vert_annotation to
                                                                            align to. 
                                                                            Used for @link AssociativeOriginTypeVerticallyAligned AssociativeOriginTypeVerticallyAligned@endlink */, NXOpen::Annotations::Annotation * INIT_horiz_annotation /** Annotation to align with. 
                                                                            Used for @link AssociativeOriginTypeHorizontallyAligned AssociativeOriginTypeHorizontallyAligned@endlink */, NXOpen::Annotations::AlignmentPosition INIT_horiz_alignment_position /** Alignment position on
                                                                            horiz_annotation to
                                                                            align to. 
                                                                            Used for @link AssociativeOriginTypeHorizontallyAligned AssociativeOriginTypeHorizontallyAligned@endlink */, NXOpen::Annotations::Annotation * INIT_aligned_annotation /** Alignment annotation.
                                                    Used for @link AssociativeOriginTypeAlignedWithArrows AssociativeOriginTypeAlignedWithArrows@endlink .*/, int INIT_dimension_line /** 1 for dimension line 1, 2 for dimension line 2.
                                                    Used for @link AssociativeOriginTypeAlignedWithArrows AssociativeOriginTypeAlignedWithArrows@endlink */, NXOpen::View * INIT_associated_view /** The member view in  which the absolute model
                                                    point lies.  This is used for mapping onto
                                                    the drawing.  May be NULL if annotation is
                                                    on the model or the point is on the drawing.
                                                    Used for @link AssociativeOriginTypeAtAPoint AssociativeOriginTypeAtAPoint@endlink */, NXOpen::Point * INIT_associated_point /** Origin location of annotation.
                                                    Used for @link AssociativeOriginTypeAtAPoint AssociativeOriginTypeAtAPoint@endlink */, NXOpen::Annotations::Annotation * INIT_offset_annotation /** Annotation to align to.
                                                                                @link AssociativeOriginTypeOffsetFromText AssociativeOriginTypeOffsetFromText@endlink */, NXOpen::Annotations::AlignmentPosition INIT_offset_alignment_position /** Alignment position
                                                                                on annotation to
                                                                                align with.
                                                                                @link AssociativeOriginTypeOffsetFromText AssociativeOriginTypeOffsetFromText@endlink */, double INIT_x_offset_factor /** X Offset factor from
                                                                                associated point.
                                                                                @link AssociativeOriginTypeOffsetFromText AssociativeOriginTypeOffsetFromText@endlink */, double INIT_y_offset_factor /** Y Offset factor from
                                                                                associated point.
                                                                                @link AssociativeOriginTypeOffsetFromText AssociativeOriginTypeOffsetFromText@endlink */) :
                    OriginType(INIT_origin_type),
                    View(INIT_view),
                    ViewOfGeometry(INIT_view_of_geometry),
                    PointOnGeometry(INIT_point_on_geometry),
                    VertAnnotation(INIT_vert_annotation),
                    VertAlignmentPosition(INIT_vert_alignment_position),
                    HorizAnnotation(INIT_horiz_annotation),
                    HorizAlignmentPosition(INIT_horiz_alignment_position),
                    AlignedAnnotation(INIT_aligned_annotation),
                    DimensionLine(INIT_dimension_line),
                    AssociatedView(INIT_associated_view),
                    AssociatedPoint(INIT_associated_point),
                    OffsetAnnotation(INIT_offset_annotation),
                    OffsetAlignmentPosition(INIT_offset_alignment_position),
                    XOffsetFactor(INIT_x_offset_factor),
                    YOffsetFactor(INIT_y_offset_factor)
                {
                }
            };

            private: friend class  _AnnotationBuilder;
            protected: Annotation();
            /**Sets  the origin (location) of the annotation  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAnnotationOrigin
            (
                const NXOpen::Point3d & origin /** the new location */
            );
            /**Returns  the origin (location) of the annotation  <br> License requirements : None */
            public: NXOpen::Point3d AnnotationOrigin
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AnnotationOrigin() AnnotationOrigin@endlink instead.
            @deprecated
            */
            public: NXOpen::Point3d GetAnnotationOrigin
            (
            ) { return this->AnnotationOrigin(); }
            /**Returns  a flag indicating whether the origin is associative  <br> License requirements : None */
            public: bool HasAssociativeOrigin
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link HasAssociativeOrigin() HasAssociativeOrigin@endlink instead.
            @deprecated
            */
            public: bool GetHasAssociativeOrigin
            (
            ) { return this->HasAssociativeOrigin(); }
            /** Gets data that specifies the origin's associativity  @return  associativity data  <br> License requirements : None */
            public: NXOpen::Annotations::Annotation::AssociativeOriginData GetAssociativeOrigin
            (
                NXOpen::Point3d* origin /** coordinates of the origin */
            );
            /** Associates the annotation's origin to the specified geometry  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAssociativeOrigin
            (
                const NXOpen::Annotations::Annotation::AssociativeOriginData & assoc_origin /** associativity data */,
                const NXOpen::Point3d & origin /** coordinates of the origin */
            );
            /** Returns the lettering preferences for the annotation  @return   <br> License requirements : None */
            public: NXOpen::Annotations::LetteringPreferences * GetLetteringPreferences
            (
            );
            /** Sets the lettering preferences for the annotation  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLetteringPreferences
            (
                NXOpen::Annotations::LetteringPreferences * lettering_prefs /** */
            );
            /** Returns the line and arrow preferences for the annotation  @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineAndArrowPreferences * GetLineAndArrowPreferences
            (
            );
            /** Sets the line and arrow preferences for the annotation  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLineAndArrowPreferences
            (
                NXOpen::Annotations::LineAndArrowPreferences * line_arrow_prefs /** */
            );
            /**Sets  the leader orientation for the annotation  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLeaderOrientation
            (
                NXOpen::Annotations::LeaderOrientation leader_orientation /** */
            );
            /**Returns  the leader orientation for the annotation  <br> License requirements : None */
            public: NXOpen::Annotations::LeaderOrientation LeaderOrientation
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link LeaderOrientation() LeaderOrientation@endlink instead.
            @deprecated
            */
            public: NXOpen::Annotations::LeaderOrientation GetLeaderOrientation
            (
            ) { return this->LeaderOrientation(); }
            /**Returns  a flag indicating whether the annotation is retained  <br> License requirements : None */
            public: bool IsRetained
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link IsRetained() IsRetained@endlink instead.
            @deprecated
            */
            public: bool GetIsRetained
            (
            ) { return this->IsRetained(); }
            /**Returns  the annotation plane  <br> License requirements : None */
            public: NXOpen::Xform * AnnotationPlane
            (
            );
            /**Sets  the annotation plane  <br> License requirements : geometric_tol ("GDT") */
            public: void SetAnnotationPlane
            (
                NXOpen::Xform * annotation_plane /** */
            );
            /**Returns  the number of associativities for the annotation.  <br> License requirements : None */
            public: int NumberOfAssociativities
            (
            );
            /** Returns the associativity at specified index.  @return  Associativity object  <br> License requirements : None */
            public: NXOpen::Annotations::Associativity * GetAssociativity
            (
                int associativity_index /** Associativity index */
            );
            /** Sets the associativity at specified index.  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAssociativity
            (
                int associativity_index /** Associativity index */,
                NXOpen::Annotations::Associativity * associativity /** Associativity object */
            );
            /** Returns the inferred annotation plane  @return   <br> License requirements : None */
            public: NXOpen::Xform * GetInferredAnnotationPlane
            (
                NXOpen::Annotations::PmiDefaultPlane ja_default_plane /** */
            );
            /** Returns the views that the PMI object is displayed in
                        NOTE: This method is only valid for PMI objects
                              This method will return an empty view list for non-PMI objects  @return  List of views that PMI object is displayed in  <br> License requirements : None */
            public: std::vector<NXOpen::View *> GetViews
            (
            );
            /** Sets the views that the PMI object is displayed in  <br> License requirements : geometric_tol ("GDT") */
            public: void SetViews
            (
                const std::vector<NXOpen::View *> & model_views /** List of new views to display PMI object in */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
