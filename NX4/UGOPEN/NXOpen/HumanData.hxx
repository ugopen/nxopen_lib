#ifndef NXOpen_HUMANDATA_HXX_INCLUDED
#define NXOpen_HUMANDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     HumanData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class HumanData;
    class NXObject;
    /** Represent the data used to create the human */
    class NXOPENCPPEXPORT HumanData : public TransientObject
    {
        /** This enum represents the database used for human creation */
        public: enum DatabaseType
        {
            DatabaseTypeNone/** */,
            DatabaseTypeANSUR/** */,
            DatabaseTypeNHANES/** */
        };

        /** This enum represents the gender of human */
        public: enum GenderType
        {
            GenderTypeMale/** */,
            GenderTypeFemale/** */
        };

        /** This enum represents the stature data type of human */
        public: enum StatureType
        {
            StatureTypePercentile99/** Indicate stature is 99% of population */,
            StatureTypePercentile95/** Indicate stature is 95% of population */,
            StatureTypePercentile50/** Indicate stature is 50% of population */,
            StatureTypePercentile5/** Indicate stature is 5% of population */,
            StatureTypePercentile1/** Indicate stature is 1% of population */,
            StatureTypeCustom/** Indicate stature value is the actual height height of the human */,
            StatureTypeRegress/** Indicate stature value is computed */
        };

        /** This enum represents the weight data type of human */
        public: enum WeightType
        {
            WeightTypePercentile99/** Indicate weight is 99% of population */,
            WeightTypePercentile95/** Indicate weight is 95% of population */,
            WeightTypePercentile50/** Indicate weight is 50% of population */,
            WeightTypePercentile5/** Indicate weight is 5% of population */,
            WeightTypePercentile1/** Indicate weight is 1% of population */,
            WeightTypeCustom/** Indicate weight value is the actual weight of the human */,
            WeightTypeRegress/** Indicate weight value is computed */
        };

        /** This enum represents the location of the reference point */
        public: enum ReferencePointType
        {
            ReferencePointTypeNo/** Indicate no reference point                  */,
            ReferencePointTypeLeftEye/** Indicate reference point at the left eye     */,
            ReferencePointTypeRightEye/** Indicate reference point at the right eye    */,
            ReferencePointTypeHPoint/** Indicate reference point at the H-point      */,
            ReferencePointTypeLeftToe/** Indicate reference point at the left toe     */,
            ReferencePointTypeRightToe/** Indicate reference point at the right toe    */,
            ReferencePointTypeNumberReferences/** Indicate the number of reference point types */
        };

        /** This enum represents the unit for stature */
        public: enum StatureUnitType
        {
            StatureUnitTypeInch/** Indicate inch for stature */,
            StatureUnitTypeMm/** Indicate mm for stature   */,
            StatureUnitTypeCm/** Indicate cm for stature   */,
            StatureUnitTypeM/** Indicate m for stature    */
        };

        /** This enum represents the unit for weight */
        public: enum WeightUnitType
        {
            WeightUnitTypeLb/** Indicate lb for weight */,
            WeightUnitTypeKg/** Indicate kg for weight */
        };

        /** This enum represents the types of the advanced scaling variable names */
        public: enum AdvancedScalingType
        {
            AdvancedScalingTypeAbdominalDepth/** Indicate scaling of abdominal depth         */,
            AdvancedScalingTypeAcromionHeight/** Indicate scaling of acromion height         */,
            AdvancedScalingTypeAnkleHeight/** Indicate scaling of ankle height            */,
            AdvancedScalingTypeArmLength/** Indicate scaling of arm length              */,
            AdvancedScalingTypeBiacromialBreadth/** Indicate scaling of biacromial breadth      */,
            AdvancedScalingTypeBideltoidBreadth/** Indicate scaling of bideltoid breadth       */,
            AdvancedScalingTypeButtockKneeLength/** Indicate scaling of buttock_knee_length     */,
            AdvancedScalingTypeElbowFingertipLength/** Indicate scaling of elbow_fingertip_length  */,
            AdvancedScalingTypeElbowRestHeight/** Indicate scaling of elbow_rest_height       */,
            AdvancedScalingTypeFootBreadth/** Indicate scaling of foot_breadth            */,
            AdvancedScalingTypeFootLength/** Indicate scaling of foot_length             */,
            AdvancedScalingTypeHandBreadth/** Indicate scaling of hand_breadth            */,
            AdvancedScalingTypeHandLength/** Indicate scaling of hand_length             */,
            AdvancedScalingTypeHeadBreadth/** Indicate scaling of head_breadth            */,
            AdvancedScalingTypeHeadHeight/** Indicate scaling of head_height             */,
            AdvancedScalingTypeHeadLength/** Indicate scaling of head_length             */,
            AdvancedScalingTypeHipBreadth/** Indicate scaling of hip_breadth             */,
            AdvancedScalingTypeInterpupilDistance/** Indicate scaling of interpupil_distance     */,
            AdvancedScalingTypeShoulderElbowLength/** Indicate scaling of shoulder_elbow_length   */,
            AdvancedScalingTypeSittingAcromialHeight/** Indicate scaling of sitting_acromial_height */,
            AdvancedScalingTypeSittingEyeHeight/** Indicate scaling of sitting_eye_height      */,
            AdvancedScalingTypeSittingHeight/** Indicate scaling of sitting_height          */,
            AdvancedScalingTypeSittingKneeHeight/** Indicate scaling of sitting_knee_height     */,
            AdvancedScalingTypeThighClearance/** Indicate scaling of thigh_clearance         */,
            AdvancedScalingTypeThumbtipReach/** Indicate scaling of thumbtip_reach          */
        };

        /** This enum represents the types of the segment scaling variable names */
        public: enum SegmentScalingType
        {
            SegmentScalingTypeHead/** Indicate scaling of head         */,
            SegmentScalingTypeNeck/** Indicate scaling of neck         */,
            SegmentScalingTypeTorso/** Indicate scaling of torso        */,
            SegmentScalingTypeUpperArm/** Indicate scaling of upper_arm    */,
            SegmentScalingTypeLowerArm/** Indicate scaling of lower_arm    */,
            SegmentScalingTypeHand/** Indicate scaling of hand         */,
            SegmentScalingTypeLowerTorso/** Indicate scaling of lower_torso  */,
            SegmentScalingTypeUpperLeg/** Indicate scaling of upper_leg    */,
            SegmentScalingTypeLowerLeg/** Indicate scaling of lower_leg    */,
            SegmentScalingTypeFoot/** Indicate scaling of foot         */
        };

        /** This enum represents the types of the joint names */
        public: enum JointType
        {
            JointTypeBaseOfNeck/** Indicate joint named base_of_neck    */,
            JointTypeLeftShoulder/** Indicate joint named left_shoulder   */,
            JointTypeRightShoulder/** Indicate joint named right_shoulder  */,
            JointTypeTorso/** Indicate joint named torso           */,
            JointTypeLeftElbow/** Indicate joint named left_elbow      */,
            JointTypeRightElbow/** Indicate joint named right_elbow     */,
            JointTypeLeftWrist/** Indicate joint named left_wrist      */,
            JointTypeRightWrist/** Indicate joint named right_wrist     */,
            JointTypeLthumb0/** Indicate joint named lthumb0         */,
            JointTypeLthumb1/** Indicate joint named lthumb1         */,
            JointTypeLthumb2/** Indicate joint named lthumb2         */,
            JointTypeLeftFinger00/** Indicate joint named left_finger00   */,
            JointTypeLinfinger01/** Indicate joint named linfinger01     */,
            JointTypeLinfinger02/** Indicate joint named linfinger02     */,
            JointTypeLeftFinger10/** Indicate joint named left_finger10   */,
            JointTypeLmidfinger11/** Indicate joint named lmidfinger11    */,
            JointTypeLmidfinger12/** Indicate joint named lmidfinger12    */,
            JointTypeLeftFinger20/** Indicate joint named left_finger20   */,
            JointTypeLringfinger21/** Indicate joint named lringfinger21   */,
            JointTypeLringfinger22/** Indicate joint named lringfinger22   */,
            JointTypeLeftFinger30/** Indicate joint named left_finger30   */,
            JointTypeLpinfinger31/** Indicate joint named lpinfinger31    */,
            JointTypeLpinfinger32/** Indicate joint named lpinfinger32    */,
            JointTypeRthumb0/** Indicate joint named rthumb0         */,
            JointTypeRthumb1/** Indicate joint named rthumb1         */,
            JointTypeRthumb2/** Indicate joint named rthumb2         */,
            JointTypeRightFinger00/** Indicate joint named right_finger00  */,
            JointTypeRinfinger01/** Indicate joint named rinfinger01     */,
            JointTypeRinfinger02/** Indicate joint named rinfinger02     */,
            JointTypeRightFinger10/** Indicate joint named right_finger10  */,
            JointTypeRmidfinger11/** Indicate joint named rmidfinger11    */,
            JointTypeRmidfinger12/** Indicate joint named rmidfinger12    */,
            JointTypeRightFinger20/** Indicate joint named right_finger20  */,
            JointTypeRringfinger21/** Indicate joint named rringfinger21   */,
            JointTypeRringfinger22/** Indicate joint named rringfinger22   */,
            JointTypeRightFinger30/** Indicate joint named right_finger30  */,
            JointTypeRpinfinger31/** Indicate joint named rpinfinger31    */,
            JointTypeRpinfinger32/** Indicate joint named rpinfinger32    */,
            JointTypeWaist/** Indicate joint named waist           */,
            JointTypeLeftHip/** Indicate joint named left_hip        */,
            JointTypeRightHip/** Indicate joint named right_hip       */,
            JointTypeLeftKnee/** Indicate joint named left_knee       */,
            JointTypeRightKnee/** Indicate joint named right_knee      */,
            JointTypeLeftAnkle/** Indicate joint named left_ankle      */,
            JointTypeRightAnkle/** Indicate joint named right_ankle     */,
            JointTypeLeftToes/** Indicate joint named left_toes       */,
            JointTypeRightToes/** Indicate joint named right_toes      */
        };

        public: explicit HumanData(void *ptr);
        /** Free resources associated with the instance. After this method
                is called, it is illegal to use the object.  In .NET, this method
                is automatically called when the object is deleted by the garbage
                collector.  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: virtual ~HumanData();
        /**Returns  the name of the human feature  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString Name
        (
        );
        /**Returns  the human figure file used to create the human feature  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString FigureFile
        (
        );
        /**Returns  the gender of the human  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanData::GenderType Gender
        (
        );
        /**Returns  the stature type for stature value  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanData::StatureType StatureOption
        (
        );
        /**Returns  the stature value  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: double StatureValue
        (
        );
        /**Returns  the weight type for weight value  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanData::WeightType WeightOption
        (
        );
        /**Returns  the weight value  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: double WeightValue
        (
        );
        /**Returns  the flag for associative reference point  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: bool AssocReferencePoint
        (
        );
        /**Returns  the reference point type  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanData::ReferencePointType ReferencePointLocationType
        (
        );
        /**Returns  the reference point  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::NXObject * ReferencePoint
        (
        );
        /** The transformation matrix of the human  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void GetXform
        (
            NXOpen::Matrix3x3* orientation /**  */,
            NXOpen::Point3d* position /**  */
        );
    };
}
#undef EXPORTLIBRARY
#endif
