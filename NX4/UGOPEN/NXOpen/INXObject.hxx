#ifndef NXOpen_INXOBJECT_HXX_INCLUDED
#define NXOpen_INXOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     INXObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class INXObject;
    class BasePart;
    class NXObject;
    /** Represents an interface from which most NXOpen classes inherit */
    class NXOPENCPPEXPORT INXObject
    {
        virtual void EnsureVtableExists() {}
        /** Finds the @link  NXObject   NXObject @endlink  with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            FindObject is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return   <br> License requirements : None */
        public: virtual NXOpen::NXObject * FindObject
        (
            const NXString & journal_identifier /** Journal identifier of the object   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        ) = 0;
        /**Returns  the identifier that would be recorded in a journal for this object. 
            This may not be the same across different releases of the software.  <br> License requirements : None */
        public: virtual NXString JournalIdentifier
        (
        ) = 0;
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link JournalIdentifier() JournalIdentifier@endlink instead.
        @deprecated
        */
        public: NXString GetJournalIdentifier
        (
        ) { return this->JournalIdentifier(); }
        /**Returns  whether this object is an occurrence or not.  <br> License requirements : None */
        public: virtual bool IsOccurrence
        (
        ) = 0;
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link IsOccurrence() IsOccurrence@endlink instead.
        @deprecated
        */
        public: bool GetIsOccurrence
        (
        ) { return this->IsOccurrence(); }
        /**Returns  the prototype of this object if it is an occurrence.  <br> License requirements : None */
        public: virtual NXOpen::NXObject * Prototype
        (
        ) = 0;
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Prototype() Prototype@endlink instead.
        @deprecated
        */
        public: NXOpen::NXObject * GetPrototype
        (
        ) { return this->Prototype(); }
        /**Returns  the owning component, if this object is an occurrence.  <br> License requirements : None */
        public: virtual NXOpen::NXObject * OwningComponent
        (
        ) = 0;
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link OwningComponent() OwningComponent@endlink instead.
        @deprecated
        */
        public: NXOpen::NXObject * GetOwningComponent
        (
        ) { return this->OwningComponent(); }
        /**Returns  the owning part of this object  <br> License requirements : None */
        public: virtual NXOpen::BasePart * OwningPart
        (
        ) = 0;
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link OwningPart() OwningPart@endlink instead.
        @deprecated
        */
        public: NXOpen::BasePart * GetOwningPart
        (
        ) { return this->OwningPart(); }
        /** Prints a representation of this object to the system log file.
              <br> License requirements : None */
        public: virtual void Print
        (
        ) = 0;
        /**Returns  the custom name of the object.   <br> License requirements : None */
        public: virtual NXString Name
        (
        ) = 0;
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Name() Name@endlink instead.
        @deprecated
        */
        public: NXString GetName
        (
        ) { return this->Name(); }
        /** Sets the custom name of the object.  <br> License requirements : None */
        public: virtual void SetName
        (
            const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        ) = 0;
    };
}
#undef EXPORTLIBRARY
#endif
