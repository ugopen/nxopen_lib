#ifndef NXOpen_CAE_SIMBCDISPLAY_HXX_INCLUDED
#define NXOpen_CAE_SIMBCDISPLAY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SimBCDisplay.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/CAE_SimBCDisplay.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class SimBCDisplay;
    }
    namespace CAE
    {
        class _SimBCDisplayBuilder;
        /**  @brief  Represents a BC display attributes 

          */
        class NXOPENCPPEXPORT SimBCDisplay : public TaggedObject
        {
            /** Used to specify the display mode for the BC
                        */
            public: enum Mode
            {
                ModeCollapse/** Set a collapsed display */,
                ModeExpand/** Set and expanded display */
            };

            private: friend class  _SimBCDisplayBuilder;
            protected: SimBCDisplay();
            /**Returns  the BC display mode  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCDisplay::Mode DisplayMode
            (
            );
            /**Sets  the BC display mode  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDisplayMode
            (
                NXOpen::CAE::SimBCDisplay::Mode display_mode /** the display mode */
            );
            /**Returns  the true/false flag based on whether the value of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool ValueDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the value of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueDisplayFlag
            (
                bool value_flag /** true when the value should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the name of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool NameDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the name of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNameDisplayFlag
            (
                bool name_flag /** true when the name should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the node id of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool NodeIdDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the node id of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNodeIdDisplayFlag
            (
                bool node_id_flag /** true when the node id should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the solver card name of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool SolverCardNameDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the solver card name of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSolverCardNameDisplayFlag
            (
                bool solver_card_name_flag /** true when the solver card name should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the graphic symbol of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool GraphicSymbolDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the graphic symbol of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetGraphicSymbolDisplayFlag
            (
                bool graphic_symbol_flag /** true when the graphic symbol should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the text symbol of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool TextSymbolDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the text symbol of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTextSymbolDisplayFlag
            (
                bool text_symbol_flag /** true when the text symbol should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the dof of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool DofDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the dof of the BC is
                        displayed in the graphics window  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDofDisplayFlag
            (
                bool dof_flag /** true when the dof should be displayed, false otherwise */
            );
            /** Returns the number of sample points for BC display in first and second parametric direction
                        for a face. In case of an edge/curve only the first parametric direction applies.
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetDisplayGrid
            (
                int* num_u_points /** number of points in the first parametric direction  */,
                int* num_v_points /** number of points in the second parametric direction */
            );
            /** Sets the number of sample points for BC display in first and second parametric direction
                        for a face. In case of an edge/curve only the first parametric direction applies.
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDisplayGrid
            (
                int num_u_points /** number of points in the first parametric direction  */,
                int num_v_points /** number of points in the second parametric direction */
            );
            /**Returns  the BC display scaling factor
                        this option specifies the scale of the graphic symbol relative to the size of the bounding box of the FE model.
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int Scale
            (
            );
            /**Sets  the BC display scaling factor
                        this option specifies the scale of the graphic symbol relative to the size of the bounding box of the FE model.
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScale
            (
                int scale /** 1 is the smallest - 100 is the largest */
            );
            /** Updates the display of the BC
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void UpdateDisplay
            (
            );
            /**Returns  the flag indicating whether or not shading of graphic symbols is required  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool ShadeGraphicSymbol
            (
            );
            /**Sets  the flag indicating whether or not shading of graphic symbols is required  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetShadeGraphicSymbol
            (
                bool shadeGsymbol_flag /** true when shading is required, false otherwise */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
