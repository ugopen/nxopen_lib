#ifndef NXOpen_DRAWINGS_DRAWINGSHEETCOLLECTION_HXX_INCLUDED
#define NXOpen_DRAWINGS_DRAWINGSHEETCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_DrawingSheetCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Drawings_DrawingSheet.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class DrawingSheetCollection;
    }
    class Part;
    namespace Drawings
    {
        class DrawingSheet;
    }
    namespace Drawings
    {
        /** Represents a collection of drawing sheets. <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
        class NXOPENCPPEXPORT DrawingSheetCollection : public TaggedObjectCollection
        {
            private: NXOpen::Part* m_owner;
            public: explicit DrawingSheetCollection(NXOpen::Part *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            class iterator
            {
            public:
                typedef Drawings::DrawingSheet * value_type;
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Drawings::DrawingSheetCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                NXOPENCPPEXPORT  value_type operator * ();
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Drawings::DrawingSheetCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            iterator begin();
            iterator end()
            {
                return iterator(this);
            }
            /**Returns  the currently opened drawing sheet.  This will return NULL 
                    if no drawing sheet is opened.  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::DrawingSheet * CurrentDrawingSheet
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link CurrentDrawingSheet() CurrentDrawingSheet@endlink instead.
            @deprecated
            */
            public: NXOpen::Drawings::DrawingSheet * GetCurrentDrawingSheet
            (
            ) { return this->CurrentDrawingSheet(); }
            /** Inserts a sheet into a part.  @return    <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::DrawingSheet * InsertSheet
            (
                const NXString & drawing_name /** Drawing name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Drawings::DrawingSheet::Unit drawing_units /** Unit of sheet size */,
                double width /** Width of drawing */,
                double height /** Height of drawing */,
                double numerator /** Numerator of the scale of drawing */,
                double denominator /** Denominator of the scale of drawing */,
                NXOpen::Drawings::DrawingSheet::ProjectionAngleType projection_angle /** Projection angle */
            );
            /** Inserts a sheet into a part. The drawings units will be inferred from the standard
                        size. @return    <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::DrawingSheet * InsertSheet
            (
                const NXString & drawing_name /**  Drawing name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Drawings::DrawingSheet::StandardSheetSize sheet_size /** Sheet Size */,
                double numerator /** Numerator of the scale of drawing */,
                double denominator /** Denominator of the scale of drawing */,
                NXOpen::Drawings::DrawingSheet::ProjectionAngleType projection_angle /** Projection angle */
            );
            /** Finds the @link  DrawingSheet   DrawingSheet @endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  Drawing sheet with this identifier  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::DrawingSheet * FindObject
            (
                const NXString & journal_identifier /** Identifier of the drawing sheet you want   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
