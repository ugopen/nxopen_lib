#ifndef NXOpen_ROUTING_COPECORNER_HXX_INCLUDED
#define NXOpen_ROUTING_COPECORNER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_CopeCorner.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Routing_Corner.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class CopeCorner;
    }
    namespace Features
    {
        class Feature;
    }
    namespace Routing
    {
        class Corner;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _CopeCornerBuilder;
        /** 
                The Routing CopeCorner is a system interface to model the intersection 
                of multiple stocks at a single corner where each stock trims in successive order.
                Cope corner is a data object that represents the whole coping operation at an RCP 
                where several stocks merge.
             */
        class NXOPENCPPEXPORT CopeCorner : public Routing::Corner
        {
            private: friend class  _CopeCornerBuilder;
            protected: CopeCorner();
            /** Get the features of a cope corner  @return  Cope features  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Features::Feature *> GetFeatures
            (
            );
            /** Get the stock feature of a cope corner  @return  Cope feature at the given stock.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Features::Feature * GetStockCopeFeature
            (
                NXOpen::Routing::Stock * stock /** Stock: NULL_TAG not allowed. */
            );
            /** Sets the stock of the cope corner object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStocks
            (
                const std::vector<NXOpen::Routing::Stock *> & stocks /** Stocks to be set for the cope corner */
            );
            /** Gets the stock of the cope corner object.  @return  TRUE if found stock, FALSE otherwise.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool GetStocks
            (
                std::vector<NXOpen::Routing::Stock *> & stocks /** Stocks to be get for the cope corner */
            );
            /** Gets the dumb state of the cope corner object.  @return  Dumb state of the cope corner.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool GetDumb
            (
            );
            /** Sets the dumb state of the cope corner object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDumb
            (
                bool dumb_state /** Dumb state of the cope corner. */
            );
            /** Create the cope feature for the given target stock at the cope corner.  @return  New cope feature.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Features::Feature * CreateFeature
            (
                NXOpen::Routing::Stock * stock /** Stock on which the cope feature will be created */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
