#ifndef NXOpen_PREFERENCES_SESSIONUSERINTERFACEUI_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONUSERINTERFACEUI_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionUserInterfaceUI.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class SessionUserInterfaceUI;
    }
    class UI;
    namespace Preferences
    {
        /** Represents all UI based session user interface preferneces. Other User Interface settings are 
        available with @link SessionUserInterface SessionUserInterface@endlink  for settings applicable to session and 
        with @link PartUserInterface PartUserInterface@endlink  for User Interface Preferences applicable
        to part  <br> To obtain an instance of this class, refer to @link UI UI@endlink  <br> */
        class NXOPENUICPPEXPORT SessionUserInterfaceUI
        {
            /** Describes whether the resource bar is displayed on left or right of window */
            public: enum DisplayResourceBar
            {
                DisplayResourceBarLeft/**  */,
                DisplayResourceBarRight/**  */
            };

            private: NXOpen::UI* m_owner;
            public: explicit SessionUserInterfaceUI(NXOpen::UI *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /**Returns  the save layout at exit flag.  <br> License requirements : None */
            public: bool SaveLayoutAtExit
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link SaveLayoutAtExit() SaveLayoutAtExit@endlink instead.
            @deprecated
            */
            public: bool GetSaveLayoutAtExit
            (
            ) { return this->SaveLayoutAtExit(); }
            /**Sets  the save layout at exit flag.  <br> License requirements : None */
            public: void SetSaveLayoutAtExit
            (
                bool save_layout_flag /**  */
            );
            /**Returns  the home page URL  <br> License requirements : None */
            public: NXString HomePageURL
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link HomePageURL() HomePageURL@endlink instead.
            @deprecated
            */
            public: NXString GetHomePageURL
            (
            ) { return this->HomePageURL(); }
            /**Sets  the home page URL  <br> License requirements : None */
            public: void SetHomePageURL
            (
                const NXString & home_page_url /**  */
            );
            /**Returns  the pages automatically fly outflag  <br> License requirements : None */
            public: bool PagesAutomaticallyFlyOut
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link PagesAutomaticallyFlyOut() PagesAutomaticallyFlyOut@endlink instead.
            @deprecated
            */
            public: bool GetPagesAutomaticallyFlyOut
            (
            ) { return this->PagesAutomaticallyFlyOut(); }
            /**Sets  the pages automatically fly outflag  <br> License requirements : None */
            public: void SetPagesAutomaticallyFlyOut
            (
                bool pages_automatically_fly_out /**  */
            );
            /**Returns  the display resource bar option  <br> License requirements : None */
            public: NXOpen::Preferences::SessionUserInterfaceUI::DisplayResourceBar DisplayResourceBarOption
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DisplayResourceBarOption() DisplayResourceBarOption@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::SessionUserInterfaceUI::DisplayResourceBar GetDisplayResourceBarOption
            (
            ) { return this->DisplayResourceBarOption(); }
            /**Sets  the display resource bar option  <br> License requirements : None */
            public: void SetDisplayResourceBarOption
            (
                NXOpen::Preferences::SessionUserInterfaceUI::DisplayResourceBar display_resource_bar /**  */
            );
            /**Returns  the use system precision flag. True uses the system precision  <br> License requirements : None */
            public: bool UseSystemPrecision
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link UseSystemPrecision() UseSystemPrecision@endlink instead.
            @deprecated
            */
            public: bool GetUseSystemPrecision
            (
            ) { return this->UseSystemPrecision(); }
            /**Sets  the use system precision flag. True uses the system precision  <br> License requirements : None */
            public: void SetUseSystemPrecision
            (
                bool use_system_precision /**  */
            );
            /**Returns  the confirm undo flag  <br> License requirements : None */
            public: bool ConfirmUndo
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ConfirmUndo() ConfirmUndo@endlink instead.
            @deprecated
            */
            public: bool GetConfirmUndo
            (
            ) { return this->ConfirmUndo(); }
            /**Sets  the confirm undo flag  <br> License requirements : None */
            public: void SetConfirmUndo
            (
                bool confirm_undo /**  */
            );
            /**Returns  the pause duration  <br> License requirements : None */
            public: int PauseDuration
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link PauseDuration() PauseDuration@endlink instead.
            @deprecated
            */
            public: int GetPauseDuration
            (
            ) { return this->PauseDuration(); }
            /**Sets  the pause duration  <br> License requirements : None */
            public: void SetPauseDuration
            (
                int pause_duration /**  */
            );
            /**Returns  the listing decimal places <br> License requirements : None */
            public: int ListingDecimalPlaces
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ListingDecimalPlaces() ListingDecimalPlaces@endlink instead.
            @deprecated
            */
            public: int GetListingDecimalPlaces
            (
            ) { return this->ListingDecimalPlaces(); }
            /**Sets  the listing decimal places <br> License requirements : None */
            public: void SetListingDecimalPlaces
            (
                int listing_decimal_places /**  */
            );
            /**Returns  the dialog box decimal places  <br> License requirements : None */
            public: int DialogBarDecimalPlaces
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DialogBarDecimalPlaces() DialogBarDecimalPlaces@endlink instead.
            @deprecated
            */
            public: int GetDialogBarDecimalPlaces
            (
            ) { return this->DialogBarDecimalPlaces(); }
            /**Sets  the dialog box decimal places  <br> License requirements : None */
            public: void SetDialogBarDecimalPlaces
            (
                int dialog_bar_decimal_places /**  */
            );
            /**Returns  the dialog bar tracking flag  <br> License requirements : None */
            public: bool DialogBarTracking
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DialogBarTracking() DialogBarTracking@endlink instead.
            @deprecated
            */
            public: bool GetDialogBarTracking
            (
            ) { return this->DialogBarTracking(); }
            /**Sets  the dialog bar tracking flag  <br> License requirements : None */
            public: void SetDialogBarTracking
            (
                bool dialog_bar_tracking_flag /**  */
            );
            /**Returns  the display dialogs in playback flag  <br> License requirements : None */
            public: bool DisplayDialogsInPlayback
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DisplayDialogsInPlayback() DisplayDialogsInPlayback@endlink instead.
            @deprecated
            */
            public: bool GetDisplayDialogsInPlayback
            (
            ) { return this->DisplayDialogsInPlayback(); }
            /**Sets  the display dialogs in playback flag  <br> License requirements : None */
            public: void SetDisplayDialogsInPlayback
            (
                bool display_dialog_in_playback_flag /**  */
            );
            /**Returns  the record all transform flag  <br> License requirements : None */
            public: bool RecordAllTransform
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link RecordAllTransform() RecordAllTransform@endlink instead.
            @deprecated
            */
            public: bool GetRecordAllTransform
            (
            ) { return this->RecordAllTransform(); }
            /**Sets  the record all transform flag  <br> License requirements : None */
            public: void SetRecordAllTransform
            (
                bool record_all_transform_flag /**  */
            );
            /**Returns  the initial dialog display flag  <br> License requirements : None */
            public: bool InitialDialogDisplay
            (
            );
            /**Sets  the initial dialog display flag  <br> License requirements : None */
            public: void SetInitialDialogDisplay
            (
                bool initial_dialog_display /**  */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
