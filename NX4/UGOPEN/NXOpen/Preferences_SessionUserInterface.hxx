#ifndef NXOpen_PREFERENCES_SESSIONUSERINTERFACE_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONUSERINTERFACE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionUserInterface.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class SessionUserInterface;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        /** Represents the set of User Interface preferences applicable to entire session. Other User Interface 
        settings are available with @link PartUserInterface PartUserInterface@endlink  for settings applicable to 
        part and with @link NXOpen::Preferences::SessionUserInterfaceUI NXOpen::Preferences::SessionUserInterfaceUI@endlink  for UI based User Interface Preferences  <br> To obtain an instance of this class, refer to @link SessionPreferences SessionPreferences@endlink  <br> */
        class NXOPENCPPEXPORT SessionUserInterface
        {
            /** Describes the available format types for a journal file */
            public: enum JournalFileFormatType
            {
                JournalFileFormatTypeAscii/** Ascii */,
                JournalFileFormatTypeUnicode/** Unicode  */,
                JournalFileFormatTypeUnicodeBigEndian/** Unicode Big Endian */,
                JournalFileFormatTypeUtf8/** UTF 8 */
            };

            /** Describes the language used to record journals */
            public: enum JournalLanguageType
            {
                JournalLanguageTypeVisualBasic/** */,
                JournalLanguageTypeCPlusPlus/** C++ restricts the file format to Ascii  */,
                JournalLanguageTypeJava/** */
            };

            private: NXOpen::Preferences::SessionPreferences* m_owner;
            public: explicit SessionUserInterface(NXOpen::Preferences::SessionPreferences *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /**Returns  the journal file format  <br> License requirements : None */
            public: NXOpen::Preferences::SessionUserInterface::JournalFileFormatType JournalFileFormat
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link JournalFileFormat() JournalFileFormat@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::SessionUserInterface::JournalFileFormatType GetJournalFileFormat
            (
            ) { return this->JournalFileFormat(); }
            /**Sets  the journal file format  <br> License requirements : None */
            public: void SetJournalFileFormat
            (
                NXOpen::Preferences::SessionUserInterface::JournalFileFormatType journal_file_format /**  */
            );
            /**Returns  the journal language.  Setting the journal language to C++ restricts the 
                file format to Ascii.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionUserInterface::JournalLanguageType JournalLanguage
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link JournalLanguage() JournalLanguage@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::SessionUserInterface::JournalLanguageType GetJournalLanguage
            (
            ) { return this->JournalLanguage(); }
            /**Sets  the journal language.  Setting the journal language to C++ restricts the 
                file format to Ascii.  <br> License requirements : None */
            public: void SetJournalLanguage
            (
                NXOpen::Preferences::SessionUserInterface::JournalLanguageType language /**  */
            );
            /**Returns  the insert menu/dialog comments flag  <br> License requirements : None */
            public: bool InsetMenuDialogComments
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link InsetMenuDialogComments() InsetMenuDialogComments@endlink instead.
            @deprecated
            */
            public: bool GetInsetMenuDialogComments
            (
            ) { return this->InsetMenuDialogComments(); }
            /**Sets  the insert menu/dialog comments flag  <br> License requirements : None */
            public: void SetInsetMenuDialogComments
            (
                bool inset_menu_dialog_comments /**  */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
