#ifndef NXOpen_ROUTING_CHARACTERISTICLIST_HXX_INCLUDED
#define NXOpen_ROUTING_CHARACTERISTICLIST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_CharacteristicList.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
    }
    namespace Routing
    {
        /**  Contains a list of name/value pairs stored as an NXObject attribute on 
                 various Routing objects. */
        class NXOPENCPPEXPORT CharacteristicList : public TransientObject
        {
             /** Contains the name/type associated with characteristics in the characteristic lists.*/
            public:
            struct CharacteristicInformation
            {
                public: /** Attribute type  */NXOpen::NXObject::AttributeType Type;
                public: /** Characteristic name */NXString Name;
                public: CharacteristicInformation() :
                    Type((NXOpen::NXObject::AttributeType)0),
                    Name()
                {
                }
                /** Constructor for the CharacteristicInformation struct. */ 
                public: CharacteristicInformation(NXOpen::NXObject::AttributeType INIT_type /** Attribute type  */, NXString INIT_name /** Characteristic name */) :
                    Type(INIT_type),
                    Name(INIT_name)
                {
                }
            };

            public: explicit CharacteristicList(void *ptr);
            /** Frees the memory associated with this object.  After invocation of this
                      method, the object is no longer valid.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual ~CharacteristicList();
            /** Get the value of an integer characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: int GetIntegerCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** */
            );
            /** Get the value of a real characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double GetRealCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** */
            );
            /** Get the value of a string characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString GetStringCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the titles of all characteristics that have the specified
                       type, @link NXObject::AttributeType::Any NXObject::AttributeType::Any@endlink  returns the titles of
                       all characteristics in the list.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::CharacteristicList::CharacteristicInformation> GetCharacteristicTitlesByType
            (
                NXOpen::NXObject::AttributeType type /** */
            );
            /** Removes a characteristic from the characteristic list.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void DeleteCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::NXObject::AttributeType type /** @link NXObject::AttributeType::Any NXObject::AttributeType::Any@endlink  is not an acceptable value. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
