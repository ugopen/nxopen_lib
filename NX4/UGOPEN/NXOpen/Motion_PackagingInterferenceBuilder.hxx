#ifndef NXOpen_MOTION_PACKAGINGINTERFERENCEBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_PACKAGINGINTERFERENCEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_PackagingInterferenceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Motion_PackagingBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class PackagingInterferenceBuilder;
    }
    class DisplayableObject;
    namespace Motion
    {
        class PackagingBuilder;
    }
    namespace Motion
    {
        class _PackagingInterferenceBuilderBuilder;
        /** This the builder class to create or edit an Interference object. <br> To create a new instance of this class, use @link Motion::PackagingCollection::CreateInterferenceBuilder Motion::PackagingCollection::CreateInterferenceBuilder@endlink  <br> */
        class NXOPENCPPEXPORT PackagingInterferenceBuilder : public Motion::PackagingBuilder
        {
            /** Interference action type */
            public: enum Action
            {
                ActionHighlight/** Highlight interfering bodies. */,
                ActionCreateSolids/** Create solids of interference volumes. */
            };

            /** Interference calculation mode type */
            public: enum Mode
            {
                ModeFaceted/** Interference calculated by Faceted method.
                                                                                  Faceted is only allowed for action type of
                                                                                  @link  PackagingInterferenceBuilder::Action::CreateSolids   PackagingInterferenceBuilder::Action::CreateSolids @endlink . */,
                ModePreciseSolid/** Interference calculated by Precise Solid method. */
            };

            /** Interference solid reference frame type.  Only used for action type
                    of @link  PackagingInterferenceBuilder::Action::CreateSolids   PackagingInterferenceBuilder::Action::CreateSolids @endlink . */
            public: enum Frame
            {
                FrameAbsolute/** Interference solids positioned in absolute 
                                                                                  coordinate system. */,
                FrameFirstSet/** Interference solids positioned relative to 
                                                                                  interfering links in first set. */,
                FrameSecondSet/** Interference solids positioned relative to
                                                                                  interfering links in second set. */,
                FrameBothSets/** Interference solids positioned relative to
                                                                                  interfering links in both sets. */,
                FrameSelected/** Interference solids positioned relative to
                                                                                  user selected links. */
            };

            private: friend class  _PackagingInterferenceBuilderBuilder;
            protected: PackagingInterferenceBuilder();
            /** Gets the geometry list 2 of @link  PackagingInterference   PackagingInterference @endlink  object.
                    Interference can have one or two lists defined.  If the user
                    defines two lists, then interference checks will be done
                    between each object in list 1 against each object in list 2.  @return   <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: std::vector<NXOpen::DisplayableObject *> GetList2
            (
            );
            /** Sets the geometry list 2 of @link  PackagingInterference   PackagingInterference @endlink  object.  <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: void SetList2
            (
                const std::vector<NXOpen::DisplayableObject *> & list2 /** */
            );
            /**Returns  @link  PackagingInterference   PackagingInterference @endlink  action type defined
                    at @link  PackagingInterferenceBuilder::Action   PackagingInterferenceBuilder::Action @endlink   <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: NXOpen::Motion::PackagingInterferenceBuilder::Action ActionType
            (
            );
            /**Sets  @link  PackagingInterference   PackagingInterference @endlink  action type defined
                    at @link  PackagingInterferenceBuilder::Action   PackagingInterferenceBuilder::Action @endlink   <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: void SetActionType
            (
                NXOpen::Motion::PackagingInterferenceBuilder::Action a_type /** */
            );
            /**Returns  @link  PackagingInterference   PackagingInterference @endlink  mode type defined
                    at @link  PackagingInterferenceBuilder::Mode   PackagingInterferenceBuilder::Mode @endlink   <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: NXOpen::Motion::PackagingInterferenceBuilder::Mode ModeType
            (
            );
            /**Sets  @link  PackagingInterference   PackagingInterference @endlink  mode type defined
                    at @link  PackagingInterferenceBuilder::Mode   PackagingInterferenceBuilder::Mode @endlink   <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: void SetModeType
            (
                NXOpen::Motion::PackagingInterferenceBuilder::Mode m_type /** */
            );
            /**Returns  @link  PackagingInterference   PackagingInterference @endlink  frame type
                    defined at @link  PackagingInterferenceBuilder::Frame   PackagingInterferenceBuilder::Frame @endlink   <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: NXOpen::Motion::PackagingInterferenceBuilder::Frame FrameType
            (
            );
            /**Sets  @link  PackagingInterference   PackagingInterference @endlink  frame type
                    defined at @link  PackagingInterferenceBuilder::Frame   PackagingInterferenceBuilder::Frame @endlink   <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: void SetFrameType
            (
                NXOpen::Motion::PackagingInterferenceBuilder::Frame f_type /** */
            );
            /** Returns @link  PackagingInterference   PackagingInterference @endlink  user selected relative links.
                    Only available when frame type is @link  PackagingInterferenceBuilder::Frame::Selected   PackagingInterferenceBuilder::Frame::Selected @endlink .  @return   <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: std::vector<NXOpen::DisplayableObject *> GetRelativeLinks
            (
            );
            /** Sets @link  PackagingInterference   PackagingInterference @endlink  user selected relative links.
                    Only used when frame type is @link  PackagingInterferenceBuilder::Frame::Selected   PackagingInterferenceBuilder::Frame::Selected @endlink .  <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: void SetRelativeLinks
            (
                const std::vector<NXOpen::DisplayableObject *> & links /** */
            );
            /**Returns  @link  PackagingInterference   PackagingInterference @endlink  clearance value  <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: double Clearance
            (
            );
            /**Sets  @link  PackagingInterference   PackagingInterference @endlink  clearance value  <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: void SetClearance
            (
                double clearance /** */
            );
            /**Returns  Stop_On_Event flag of @link  PackagingInterference   PackagingInterference @endlink  object  <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: bool StopOnEvent
            (
            );
            /**Sets  Stop_On_Event flag of @link  PackagingInterference   PackagingInterference @endlink  object  <br> License requirements : motion_dyn ("MOTION DYN") OR motion_kin ("MOTION KIN") */
            public: void SetStopOnEvent
            (
                bool stop_on_event /** */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
