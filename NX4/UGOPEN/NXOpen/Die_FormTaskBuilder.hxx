#ifndef NXOpen_DIE_FORMTASKBUILDER_HXX_INCLUDED
#define NXOpen_DIE_FORMTASKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_FormTaskBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class FormTaskBuilder;
    }
    class Body;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class ILocation;
    class IProfile;
    class Point;
    namespace Die
    {
        class _FormTaskBuilderBuilder;
        /** Represents a Form Task feature builder. */
        class NXOPENCPPEXPORT FormTaskBuilder : public Features::FeatureBuilder
        {
            private: friend class  _FormTaskBuilderBuilder;
            protected: FormTaskBuilder();
            /**Returns  the tipped product of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Features::Feature * TippedProduct
            (
            );
            /**Sets  the tipped product of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTippedProduct
            (
                NXOpen::Features::Feature * tipped_product /** */
            );
            /** Sets the region bounds of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetRegionBounds
            (
                NXOpen::Die::DirectionOption direction /** Profile direction. */,
                const std::vector<NXOpen::IProfile *> & profile_entries /** The profile entries, can be curves, edges, faces, sketches or curve features. */
            );
            /** Gets the region bounds of the form task.  @return  The profile entries, will be curves, edges, faces, sketches or curve features.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::IProfile *> GetRegionBounds
            (
                NXOpen::Die::DirectionOption* direction /** Profile direction. */
            );
            /**Returns  the point in region of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Point * PointInRegion
            (
            );
            /**Sets  the point in region of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetPointInRegion
            (
                NXOpen::Point * point_in_region /** */
            );
            /**Returns  the cam direction of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ILocation * CamDirection
            (
            );
            /**Sets  the cam direction of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCamDirection
            (
                NXOpen::ILocation * cam_direction /** */
            );
            /** Sets the shape detail of the form task using a profile.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetShapeDetail
            (
                NXOpen::Die::DirectionOption direction /** Profile direction. */,
                const std::vector<NXOpen::IProfile *> & profile_entries /** The profile entries, can be curves, edges, faces, sketches or curve features. */
            );
            /** Gets the shape detail of the form task as a profile.  @return  The profile entries, will be curves, edges, faces, sketches or curve features.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::IProfile *> GetShapeDetail
            (
                NXOpen::Die::DirectionOption* direction /** Profile direction. */
            );
            /** Sets the shape detail of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetShapeDetail
            (
                const std::vector<NXOpen::Body *> & bodies /** Sheet bodies defining the unfinished shape. */
            );
            /** Gets the shape detail of the form task.  @return  Sheet bodies defining the unfinished shape.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::Body *> GetShapeDetail
            (
            );
            /**Returns  the finish operation switch of the form task, if true the form task is a finish operation, if false it is not.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool FinishOperation
            (
            );
            /**Sets  the finish operation switch of the form task, if true the form task is a finish operation, if false it is not.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFinishOperation
            (
                bool finish_operation /** */
            );
            /**Returns  the angle tolerance of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAngleTolerance
            (
                double angle_tolerance /** */
            );
            /**Returns  the distance tolerance of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDistanceTolerance
            (
                double distance_tolerance /** */
            );
            /** Sets the details of the form task.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDetails
            (
                std::vector<NXString> & strings /** Detail strings.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the details of the form task.  @return  Detail strings.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetDetails
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
