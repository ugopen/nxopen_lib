#ifndef NXOpen_JAMTEST_HXX_INCLUDED
#define NXOpen_JAMTEST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     JamTest.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/JamTestNamespace_Subspace_Tagged2.hxx>
#include <NXOpen/JamTestNamespace_Subspace_TransientObj.hxx>
#include <NXOpen/JamTestPointer.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopenjamtestcpp_exports.hxx>
namespace NXOpen
{
    class JamTest;
    class IOMName;
    namespace JamTestNamespace
    {
        namespace Subspace
        {
            class Tagged2;
        }
    }
    namespace JamTestNamespace
    {
        namespace Subspace
        {
            class TransientObj;
        }
    }
    namespace JamTestNamespace
    {
        class Tagged;
    }
    class JamTestPointer;
    /** Test class with methods involving various different parameter types to test the parameter marshalling code */
    class NXOPENJAMTESTCPPEXPORT JamTest : public TransientObject
    {
        /** simple test enum */
        public: enum Enum1
        {
            Enum1Val1/** */,
            Enum1Val2/** */
        };

        /** simple test enum with special first value */
        public: enum Enum2
        {
            Enum2Val1 = 1/** */,
            Enum2Val2/** */
        };

        /** simple test enum with gap in member values */
        public: enum Enum3
        {
            Enum3Val1/** */,
            Enum3Val2 = 2/** */
        };

         /** simple test struct - containing a string */
        public:
        struct Struct1
        {
            public: /** */int I;
            public: /** */double D;
            public: /** */NXString S;
            public: /** */NXString T;
            public: Struct1() :
                I(),
                D(),
                S(),
                T()
            {
            }
            /** Constructor for the Struct1 struct. */ 
            public: Struct1(int INIT_i /** */, double INIT_d /** */, NXString INIT_s /** */, NXString INIT_t /** */) :
                I(INIT_i),
                D(INIT_d),
                S(INIT_s),
                T(INIT_t)
            {
            }
        };

         /** test struct */
        public:
        struct Struct2
        {
            public: /** */double X;
            public: /** */double Y;
            public: Struct2() :
                X(),
                Y()
            {
            }
            /** Constructor for the Struct2 struct. */ 
            public: Struct2(double INIT_x /** */, double INIT_y /** */) :
                X(INIT_x),
                Y(INIT_y)
            {
            }
        };

         /** test struct - contains nested struct and logical and enum fields */
        public:
        struct Struct3
        {
            public: /** */bool Flag;
            public: /** */int I;
            public: /** */NXOpen::JamTest::Struct1 S1;
            public: /** */NXOpen::JamTest::Struct2 S;
            public: /** */NXOpen::JamTest::Enum3 E;
            public: Struct3() :
                Flag(),
                I(),
                S1(),
                S(),
                E((NXOpen::JamTest::Enum3)0)
            {
            }
            /** Constructor for the Struct3 struct. */ 
            public: Struct3(bool INIT_flag /** */, int INIT_i /** */, NXOpen::JamTest::Struct1 INIT_s1 /** */, NXOpen::JamTest::Struct2 INIT_s /** */, NXOpen::JamTest::Enum3 INIT_e /** */) :
                Flag(INIT_flag),
                I(INIT_i),
                S1(INIT_s1),
                S(INIT_s),
                E(INIT_e)
            {
            }
        };

         /** test struct - contains multiply nested structs with logical, int, and double fields */
        public:
        struct Struct4
        {
            public: /** */NXString StatusString;
            public: /** */NXOpen::JamTest::Struct3 ThirdStruct;
            public: /** */NXOpen::JamTest::Struct1 FirstStruct;
            public: Struct4() :
                StatusString(),
                ThirdStruct(),
                FirstStruct()
            {
            }
            /** Constructor for the Struct4 struct. */ 
            public: Struct4(NXString INIT_status_string /** */, NXOpen::JamTest::Struct3 INIT_third_struct /** */, NXOpen::JamTest::Struct1 INIT_first_struct /** */) :
                StatusString(INIT_status_string),
                ThirdStruct(INIT_third_struct),
                FirstStruct(INIT_first_struct)
            {
            }
        };

         /** Struct used to test what happens when there are types from 
            a deeply nested namespace */
        public:
        struct StructWithTypesFromNestedNamespace
        {
            public: /** */NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType Type;
            public: /** */NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 Data;
            public: /** */NXOpen::JamTestNamespace::Subspace::Tagged2 * Obj;
            public: StructWithTypesFromNestedNamespace() :
                Type((NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType)0),
                Data(),
                Obj()
            {
            }
            /** Constructor for the StructWithTypesFromNestedNamespace struct. */ 
            public: StructWithTypesFromNestedNamespace(NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType INIT_type /** */, NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 INIT_data /** */, NXOpen::JamTestNamespace::Subspace::Tagged2 * INIT_obj /** */) :
                Type(INIT_type),
                Data(INIT_data),
                Obj(INIT_obj)
            {
            }
        };

        public: enum { Constant = 42 };
        public: explicit JamTest(void *ptr);
        public: JamTest();
        /**  <br> License requirements : None */
        public: virtual ~JamTest();
        /**  <br> License requirements : None */
        public: void NoArgs
        (
        );
        /** Test input of simple data types  <br> License requirements : None */
        public: void InSimple
        (
            int i1 /** */,
            double d1 /** */,
            const NXString & s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool l1 /** */
        );
        /** Test simple output parameter types  <br> License requirements : None */
        public: void OutSimple
        (
            int* i1 /** */,
            double* d1 /** */,
            bool* l1 /** */
        );
        /** Test integer return value  @return   <br> License requirements : None */
        public: int RetInt
        (
            int i1 /** */
        );
        /** Test double return value  @return   <br> License requirements : None */
        public: double RetDouble
        (
            double d1 /** */
        );
        /** Test boolean return value  @return   <br> License requirements : None */
        public: bool RetLogical
        (
            bool l1 /** */
        );
        /** Test enum return value  @return   <br> License requirements : None */
        public: NXOpen::JamTest::Enum2 RetEnum
        (
            NXOpen::JamTest::Enum1 e1 /** */
        );
        /** Test enum out value  @return   <br> License requirements : None */
        public: NXOpen::JamTest::Enum2 OutEnum
        (
            NXOpen::JamTest::Enum1 e1 /** */,
            bool* b1 /** */
        );
        /** Test enum out value  <br> License requirements : None */
        public: void OutEnum2
        (
            NXOpen::JamTest::Enum1 e1 /** */,
            bool* b1 /** */,
            NXOpen::JamTest::Enum2* e2 /** */
        );
        /** Test statically allocated string return value  @return   <br> License requirements : None */
        public: NXString RetString
        (
            const NXString & s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Test dynamically allocated string return value  @return   <br> License requirements : None */
        public: NXString RetStringFree
        (
            const NXString & s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Test text return value  @return   <br> License requirements : None */
        public: NXString RetText
        (
            const NXString & s1 /** */
        );
        /** Test input arrays with independent lengths  <br> License requirements : None */
        public: void InArrays
        (
            const std::vector<int> & i1 /** */,
            const std::vector<double> & d1 /** */,
            const std::vector<bool> & l1 /** */
        );
        /** Test input arrays with linked lengths  <br> License requirements : None */
        public: void InArrays2
        (
            const std::vector<int> & i1 /** */,
            const std::vector<double> & d1 /** */,
            const std::vector<bool> & l1 /** */
        );
        /** Test input string array  <br> License requirements : None */
        public: void InStringArray
        (
            std::vector<NXString> & s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Test input string array  <br> License requirements : None */
        public: void InStringArrays
        (
            std::vector<NXString> & s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<NXString> & s2 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Test output string array  <br> License requirements : None */
        public: void OutStringArray
        (
            std::vector<NXString> & s1 /** */
        );
        /** Test input enum array  <br> License requirements : None */
        public: void InEnumArray
        (
            const std::vector<NXOpen::JamTest::Enum1> & e /** */
        );
        /** Test output enum array  <br> License requirements : None */
        public: void OutEnumArray
        (
            int c /** */,
            std::vector<NXOpen::JamTest::Enum3> & e /** */
        );
        /** Test output enum array  <br> License requirements : None */
        public: void OutEnumArray2
        (
            std::vector<NXOpen::JamTest::Enum3> & e /** */
        );
        /** Test output enum array  <br> License requirements : None */
        public: void OutEnumArray3
        (
            std::vector<NXOpen::JamTest::Enum3> & e /** */,
            bool* b1 /** */
        );
        /** Test output enum array  @return   <br> License requirements : None */
        public: std::vector<NXOpen::JamTest::Enum3> OutEnumArray4
        (
            bool* b1 /** */
        );
        /** Test input text array  <br> License requirements : None */
        public: void InTextArray
        (
            std::vector<NXString> & s1 /** */
        );
        /** Test a simple output array  <br> License requirements : None */
        public: void OutArray
        (
            std::vector<int> & i1 /** */
        );
        /** Test array return value  @return   <br> License requirements : None */
        public: std::vector<int> RetArray
        (
        );
        /** Test array output where length is an input parameter  <br> License requirements : None */
        public: void OutArray2
        (
            int c1 /** */,
            std::vector<int> & i1 /** */
        );
        /** Test linked array output values  <br> License requirements : None */
        public: void OutArrays
        (
            std::vector<int> & i1 /** */,
            std::vector<double> & d1 /** */,
            std::vector<bool> & l1 /** */
        );
        /** Test simple struct input value  <br> License requirements : None */
        public: void InStruct2
        (
            const NXOpen::JamTest::Struct2 & s /** */
        );
        /** Test simple struct output value  <br> License requirements : None */
        public: void OutStruct2
        (
            NXOpen::JamTest::Struct2* s /** */
        );
        /** Test simple struct input value  <br> License requirements : None */
        public: void InStruct1
        (
            const NXOpen::JamTest::Struct1 & s /** */
        );
        /** Test simple struct input value  <br> License requirements : None */
        public: void InStruct3
        (
            const NXOpen::JamTest::Struct3 & s /** */
        );
        /** Test simple struct output value  <br> License requirements : None */
        public: void OutStruct3
        (
            NXOpen::JamTest::Struct3* s /** */
        );
        /** Test struct 4  @return   <br> License requirements : None */
        public: NXString TestStruct4
        (
            const NXString & statusIn /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXOpen::JamTest::Struct1 & struct1 /** */,
            const NXOpen::JamTest::Struct3 & struct3 /** */,
            NXOpen::JamTest::Struct4* struct4 /** */,
            bool* bool_status /** */
        );
        /** Test array of struct input value  <br> License requirements : None */
        public: void InStruct1Array
        (
            const std::vector<NXOpen::JamTest::Struct1> & s /** */
        );
        /** Test array of struct input value  @return   <br> License requirements : None */
        public: std::vector<NXOpen::JamTest::Struct1> OutStruct1Array
        (
            const std::vector<NXOpen::JamTest::Struct1> & s /** */
        );
        /** Test simple struct output value  <br> License requirements : None */
        public: void OutStruct1
        (
            NXOpen::JamTest::Struct1* s /** */
        );
        /** Test array of struct output value  <br> License requirements : None */
        public: void OutStruct2Array
        (
            std::vector<NXOpen::JamTest::Struct2> & s /** */
        );
        /** Test pointer wrapper output value  <br> License requirements : None */
        public: void OutPointerObject
        (
            NXOpen::JamTestPointer ** object /** */
        );
        /** Test pointer wrapper output value where actual class varies <br> License requirements : None */
        public: void OutPointerSubclassObject
        (
            bool return_subclass /** if true returns a JamTestPointerSubclass object else a JamTestPointer object */,
            NXOpen::JamTestPointer ** object /** */
        );
        /** Test pointer wrapper input value  <br> License requirements : None */
        public: void InPointerObject
        (
            NXOpen::JamTestPointer * object /** */
        );
        /** Test array of pointer wrapper output value  <br> License requirements : None */
        public: void OutPointerObjectArray
        (
            std::vector<NXOpen::JamTestPointer *> & objects /** */
        );
        /** Test array of pointer wrapper input value  <br> License requirements : None */
        public: void InPointerObjectArray
        (
            const std::vector<NXOpen::JamTestPointer *> & object /** */
        );
        /** Test handling of raised error  <br> License requirements : None */
        public: void RaiseError
        (
            int error_code /** */
        );
        /** Test handling of returned error code  <br> License requirements : None */
        public: void ReturnError
        (
            int error_code /** */
        );
        /** Test segmentation violation  @return   <br> License requirements : None */
        public: int SegViolation
        (
        );
        /** Creates a tagged object  @return   <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Tagged * CreateTaggedObject
        (
        );
        /** Deletes a tagged object  <br> License requirements : None */
        public: void DeleteTaggedObject
        (
            NXOpen::JamTestNamespace::Tagged * object /** */
        );
        /** Prints a tagged object  <br> License requirements : None */
        public: void PrintObject
        (
            NXOpen::TaggedObject * object /** */
        );
        /** Tests a tagged object type from a deeply nested namespace.
                Creates a tagged object  @return   <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::Tagged2 * CreateTagged2Object
        (
            int id /** */,
            NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType type /** */
        );
        /** Tests a tagged object type and enum type from a deeply nested namespace.
                Tests returning OM tagged objects as the result in the JA C function.
                Creates a tagged object  @return   <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::Tagged2 * CreateTagged2Object2
        (
            int id /** */,
            NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType type /** */
        );
        /** Tests a tagged object type and enum type from a deeply nested namespace.
                Tests passing an OM tagged object as an out parameter in the JA C function.
                Creates a tagged object  <br> License requirements : None */
        public: void CreateTagged2Object2
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType type /** */,
            int id /** */,
            int* theid /** */,
            NXOpen::JamTestNamespace::Subspace::Tagged2 ** result /** */
        );
        /** Tests a tagged object type and struct type from a deeply nested namespace  <br> License requirements : None */
        public: void SetStruct
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2 * obj /** */,
            const NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 & data /** */
        );
        /** Tests a tagged object type and struct type from a deeply nested namespace.
                Tests passing an OM tagged object as an input parameter in the JA C function  @return   <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 GetStruct
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2 * obj /** */
        );
        /** Tests a tagged object type and struct type from a deeply nested namespace.
                Tests passing an OM tagged object as an input parameter in the JA C function  @return   <br> License requirements : None */
        public: NXOpen::JamTest::StructWithTypesFromNestedNamespace GetData
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2 * obj /** */
        );
        /** Tests passing an OM tagged object as an input parameter array in the JA C function  @return   <br> License requirements : None */
        public: std::vector<int> GetIdsOfTagged2Objects
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2 *> & objs /** */
        );
        /** Tests passing an OM tagged object as an output parameter array in the JA C function  <br> License requirements : None */
        public: void CreateTagged2Objects
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType> & type /** */,
            const std::vector<int> & ids /** */,
            int* num_created /** */,
            std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2 *> & result /** */
        );
        /** Tests passing an OM tagged object as a return parameter array in the JA C function  @return   <br> License requirements : None */
        public: std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2 *> CreateTagged2Objects
        (
            const std::vector<int> & ids /** */,
            const std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType> & type /** */
        );
        /** Tests a transient object type from a deeply nested namespace.
                Creates a transient object  @return   <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::TransientObj * CreateSubspaceTransientObj
        (
            NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType type /** */
        );
        /** Tests a transient object type from a deeply nested namespace.
                Creates a transient object.
                Returns the object as a API_OUT parameter  <br> License requirements : None */
        public: void CreateSubspaceTransientObj
        (
            int dum /** */,
            NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType type /** */,
            int* dumout /** */,
            NXOpen::JamTestNamespace::Subspace::TransientObj ** result /** */
        );
        /** Tests a transient object type from a deeply nested namespace.
                Creates an array of transient objects  @return   <br> License requirements : None */
        public: std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj *> CreateSubspaceTransientObjs
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType> & type /** */
        );
        /** Tests a transient object type from a deeply nested namespace.
                Creates an array of transient objects.
                Returns the array as an API_OUT parameter.  <br> License requirements : None */
        public: void CreateSubspaceTransientObjs
        (
            int dum /** */,
            const std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType> & type /** */,
            int* dumout /** equals dum */,
            std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj *> & result /** */
        );
        /**Returns  Returns the number of objects of type JamTestNamespace.Subspace.TransientObj
            in existence.  Used to test the destruction of the transient objects  <br> License requirements : None */
        public: int NumberOfSubspaceTransientObjs
        (
        );
        /** Tests a transient object type and struct type from a deeply nested namespace  <br> License requirements : None */
        public: void SetStruct
        (
            NXOpen::JamTestNamespace::Subspace::TransientObj * obj /** */,
            const NXOpen::JamTestNamespace::Subspace::TransientObj::Struct1 & data /** */
        );
        /** Tests a transient object type and struct type from a deeply nested namespace  @return   <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::TransientObj::Struct1 GetStruct
        (
            NXOpen::JamTestNamespace::Subspace::TransientObj * obj /** */
        );
        /** Tests returning an array of structs from a deeply nested namespace  @return   <br> License requirements : None */
        public: std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj::Struct1> GetStructsOfSubspaceTransientObjs
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj *> & objs /** */
        );
    };
}
#undef EXPORTLIBRARY
#endif
