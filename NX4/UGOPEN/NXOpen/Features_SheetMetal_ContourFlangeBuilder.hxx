#ifndef NXOpen_FEATURES_SHEETMETAL_CONTOURFLANGEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_CONTOURFLANGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_ContourFlangeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_SheetMetal_BendOptions.hxx>
#include <NXOpen/Features_SheetMetal_MiterOptions.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class ContourFlangeBuilder;
        }
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class BendOptions;
        }
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class MiterOptions;
        }
    }
    namespace Features
    {
        class SketchFeature;
    }
    class Section;
    namespace Features
    {
        namespace SheetMetal
        {
            class _ContourFlangeBuilderBuilder;
            /** Represents a Contour Flange feature builder. Presently only Base Contour Flange is supported. */
            class NXOPENCPPEXPORT ContourFlangeBuilder : public Features::FeatureBuilder
            {
                /** This enum represents the side of the section in which material is created. The "left" option
                            represents the side to the left of a person who is walking along the section in the direction of its curves
                            when the section normal is pointing up. The "right" option represents the person's right hand side.
                            This interpretation is the same regardless of whether the section is open or closed. The "right" side at any point
                            along the section can also be represented by the vector resulting from the cross product of the curve tangent
                            (of the section curve at that point) and the section normal. The "left" side is the opposite. */
                public: enum SectionSideOptions
                {
                    SectionSideOptionsLeft/** */,
                    SectionSideOptionsRight/** */
                };

                /** This enum represents the side in which the contour flange will be swept.*/
                public: enum SweepSideOptions
                {
                    SweepSideOptionsSectionNormalSide/** */,
                    SweepSideOptionsSectionReverseNormalSide/** */
                };

                /** This enum represents the sweep type of the contour flange */
                public: enum SweepTypeOptions
                {
                    SweepTypeOptionsFinite/** */,
                    SweepTypeOptionsSymmetric/** */
                };

                private: friend class  _ContourFlangeBuilderBuilder;
                protected: ContourFlangeBuilder();
                /**Returns  the section of contour flange  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Section * Section
                (
                );
                /**Sets  the section of contour flange  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetSection
                (
                    NXOpen::Section * section /** */
                );
                /** THE thickness of contour flange  @return   <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * GetThickness
                (
                );
                /**  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetThickness
                (
                    const NXString & thickness /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /**Returns  the thickness side of contour flange  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::ContourFlangeBuilder::SectionSideOptions ThicknessSide
                (
                );
                /**Sets  the thickness side of contour flange  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetThicknessSide
                (
                    NXOpen::Features::SheetMetal::ContourFlangeBuilder::SectionSideOptions section_side /** */
                );
                /** THE projection distance of contour flange  @return   <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * GetSweepDistance
                (
                );
                /**  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetSweepDistance
                (
                    const NXString & sweep_distance /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /**Returns  the projection direction of contour flange  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::ContourFlangeBuilder::SweepSideOptions SweepSide
                (
                );
                /**Sets  the projection direction of contour flange  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetSweepSide
                (
                    NXOpen::Features::SheetMetal::ContourFlangeBuilder::SweepSideOptions sweep_side /** */
                );
                /**Returns  the projection side of contour flange <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::ContourFlangeBuilder::SweepTypeOptions SweepType
                (
                );
                /**Sets  the projection side of contour flange <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetSweepType
                (
                    NXOpen::Features::SheetMetal::ContourFlangeBuilder::SweepTypeOptions sweep_type /** */
                );
                /**Returns  the bend options  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::BendOptions * BendOptions
                (
                );
                /**Returns  the miter options  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::MiterOptions * MiterOptions
                (
                );
                /**Returns  the sketch  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SketchFeature * Sketch
                (
                );
                /**Sets  the sketch  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetSketch
                (
                    NXOpen::Features::SketchFeature * sketch /** sketch */
                );
                /** Verify whether the builder data is valid for creating a Contour Flange or not.
                             <br> 
                                 If the Builder data is valid, returned value shall be 0

                             <br> 
                         @return  Data Validity Flag. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: int ValidateBuilderData
                (
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
