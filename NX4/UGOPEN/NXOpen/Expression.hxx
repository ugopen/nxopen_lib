#ifndef NXOpen_EXPRESSION_HXX_INCLUDED
#define NXOpen_EXPRESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Expression.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Expression;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class Unit;
    class _ExpressionBuilder;
    /** Represents an expression.  <br> To create a new instance of this class, use @link ExpressionCollection::Create ExpressionCollection::Create@endlink  <br> */
    class NXOPENCPPEXPORT Expression : public NXObject
    {
        /** Indicates the units to use when getting an expression's value. */
        public: enum UnitsOption
        {
            UnitsOptionBase/** Overwrite existing expressions if the imported values differ */,
            UnitsOptionExpression/** Don't overwrite existing expressions. New expressions are created */
        };

        private: friend class  _ExpressionBuilder;
        protected: Expression();
        /**Returns  the equation of the expression in the form: name = right_hand_side. <br> License requirements : None */
        public: NXString Equation
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Equation() Equation@endlink instead.
        @deprecated
        */
        public: NXString GetEquation
        (
        ) { return this->Equation(); }
        /**Returns  the right hand side of the expression.
             <br> When setting the property, changes are not applied to the system until
                @link Update::DoUpdate Update::DoUpdate@endlink  is called  <br>   <br> License requirements : None */
        public: NXString RightHandSide
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link RightHandSide() RightHandSide@endlink instead.
        @deprecated
        */
        public: NXString GetRightHandSide
        (
        ) { return this->RightHandSide(); }
        /**Sets  the right hand side of the expression.
             <br> When setting the property, changes are not applied to the system until
                @link Update::DoUpdate Update::DoUpdate@endlink  is called  <br>   <br> License requirements : None */
        public: void SetRightHandSide
        (
            const NXString & right_hand_side /** */
        );
        /**Returns  the value of the expression. This is returned in base units <br> License requirements : None */
        public: double Value
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Value() Value@endlink instead.
        @deprecated
        */
        public: double GetValue
        (
        ) { return this->Value(); }
        /** Get the value of the expression, in either base units or the expression's units.  @return   <br> License requirements : None */
        public: double GetValueUsingUnits
        (
            NXOpen::Expression::UnitsOption units_option /** use base units or expression units */
        );
        /**Returns  whether the expression is user locked. If this property is false, 
            then the expression can be over-ridden from another part. (This
            is the default state for newly created expressions.) If this 
            property is true, you are not allowed to over-ride it.

             <br> Note that if an expression is currently over-ridden, you cannot set
            its lock property.  In this instance, an exception will be thrown.  <br> 
          <br> License requirements : None */
        public: bool IsUserLocked
        (
        );
        /**Sets  whether the expression is user locked. If this property is false, 
            then the expression can be over-ridden from another part. (This
            is the default state for newly created expressions.) If this 
            property is true, you are not allowed to over-ride it.

             <br> Note that if an expression is currently over-ridden, you cannot set
            its lock property.  In this instance, an exception will be thrown.  <br> 
          <br> License requirements : None */
        public: void SetUserLocked
        (
            bool is_locked /** */
        );
        /** Changes the comment.  <br> License requirements : None */
        public: void EditComment
        (
            const NXString & new_comment /** comment   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  whether the expression is a geometric expression.   <br> License requirements : None */
        public: bool IsGeometricExpression
        (
        );
        /** Returns an array of the features that use the supplied expression.   @return  array of features, or empty array  <br> License requirements : None */
        public: std::vector<NXOpen::Features::Feature *> GetUsingFeatures
        (
        );
        /** Returns the feature that created the supplied expression.
             <br> This is the feature that created it during feature creation.  For example,
            the expression "p0 = x" is owned by feature "BLOCK(0)".  <br> 

             <br> This works with both normal expressions and expressions created by the
            geometric expression feature.  <br>    @return  owning feature or NULL  <br> License requirements : None */
        public: NXOpen::Features::Feature * GetOwningFeature
        (
        );
        /** Returns the descriptor for the expression, or NULL if there is no descriptor.  Currently, only feature
            expressions have descriptors.  @return  Expression descriptor.  <br> License requirements : None */
        public: NXString GetDescriptor
        (
        );
        /**Returns  the units for the expression.   <br> License requirements : None */
        public: NXOpen::Unit * Units
        (
        );
    };
}
#undef EXPORTLIBRARY
#endif
