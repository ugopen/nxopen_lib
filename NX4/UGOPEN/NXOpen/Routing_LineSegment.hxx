#ifndef NXOpen_ROUTING_LINESEGMENT_HXX_INCLUDED
#define NXOpen_ROUTING_LINESEGMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_LineSegment.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/Line.hxx>
#include <NXOpen/Routing_ICharacteristic.hxx>
#include <NXOpen/Routing_ISegment.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_SegmentManager.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class LineSegment;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Curve;
    class INXObject;
    class Line;
    class NXObject;
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ICharacteristic;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class _LineSegmentBuilder;
        /** Represents a line segment. */
        class NXOPENCPPEXPORT LineSegment : public Line, public virtual Routing::ISegment
        {
            private: friend class  _LineSegmentBuilder;
            protected: LineSegment();
            /**  Return of segment end control points.
                         The @link Routing::ControlPoint Routing::ControlPoint@endlink  defines an end of a segment  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void GetEndRcps
            (
                NXOpen::Routing::ControlPoint ** start_rcp /** RCP defining start of segment */,
                NXOpen::Routing::ControlPoint ** end_rcp /** RCP defining end of segment */
            );
            /**  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetEndRcps
            (
                NXOpen::Routing::ControlPoint * start_rcp /** RCP defining start of segment */,
                NXOpen::Routing::ControlPoint * end_rcp /** RCP defining end of segment */
            );
            /**  Get the current location of the segment ends in ABS coordinates.  This value is
                         overridden by the coordinates of the end RCPs associated with this segment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void GetEndPoints
            (
                NXOpen::Point3d* start_point /** Location of end 0 in ABS coordinates */,
                NXOpen::Point3d* end_point /** Location of end 1 in ABS coordinates */
            );
            /**  Set the current location of the segment ends in ABS coordinates.  This value is
                         overridden by the coordinates of the end RCPs associated with this segment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetEndPoints
            (
                const NXOpen::Point3d & start_point /** New location of end 0 in ABS coordinates */,
                const NXOpen::Point3d & end_point /** New location of end 1 in ABS coordinates */
            );
            /**Returns   the segment follow curve.  NULL object indicates segment has no follow curve  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Curve * FollowCurve
            (
            );
            /** Is given segment a terminal segment?  @return  Is segment a terminal segment?  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::Terminal GetIsTerminalSegment
            (
            );
            /** Set given segment to be a terminal segment?  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetIsTerminalSegment
            (
                NXOpen::Routing::Terminal is_terminal /** Set as terminal segment? */
            );
            /** Query if a segment is interior to any part  @return  Is segment interior?  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::Interior GetIsSegmentInterior
            (
            );
            /** Set a segment to be interior to supplied part  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetSegmentInteriorPart
            (
                NXOpen::Assemblies::Component * interior_part /** Part segment interior? */
            );
            /** Get all of the characteristics values on the this object.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::CharacteristicList * GetCharacteristics
            (
            );
            /** Set all of the characteristics values on this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristics
            (
                NXOpen::Routing::CharacteristicList * values /** */
            );
            /** Get the value of an integer characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual int GetIntegerCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** */
            );
            /** Get the value of a real characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual double GetRealCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** */
            );
            /** Get the value of a string characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXString GetStringCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes the input list of characteristics from this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void DeleteCharacterstics
            (
                NXOpen::Routing::CharacteristicList * values /** */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
