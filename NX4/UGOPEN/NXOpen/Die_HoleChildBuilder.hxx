#ifndef NXOpen_DIE_HOLECHILDBUILDER_HXX_INCLUDED
#define NXOpen_DIE_HOLECHILDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_HoleChildBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class HoleChildBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class ILocation;
    class ISurface;
    namespace Die
    {
        class _HoleChildBuilderBuilder;
        /** Represents a Die Hole Child sub feature.  <br> This sub feature is created via the main feature builder. <br> */
        class NXOPENCPPEXPORT HoleChildBuilder : public Features::FeatureBuilder
        {
            private: friend class  _HoleChildBuilderBuilder;
            protected: HoleChildBuilder();
            /**Sets  the center of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCenter
            (
                NXOpen::ILocation * center /** */
            );
            /**Returns  the center of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::ILocation * Center
            (
            );
            /** Translates the center of the die hole by the specified amount.  <br> License requirements : ug_die_design ("Die Design") */
            public: void TranslateCenter
            (
                const NXOpen::Vector3d & translate_dist /** A scaled vector indicating the distance to translate */
            );
            /**Sets  the plane of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPlane
            (
                NXOpen::ISurface * plane /** */
            );
            /**Returns  the plane of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::ISurface * Plane
            (
            );
            /**Sets  the diameter of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDiameter
            (
                double diameter /** */
            );
            /**Returns  the diameter of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: double Diameter
            (
            );
            /**Sets  the depth of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDepth
            (
                double depth /** */
            );
            /**Returns  the depth of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: double Depth
            (
            );
            /**Sets  the counter bore diameter of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCounterBoreDiameter
            (
                double counter_bore_diameter /** */
            );
            /**Returns  the counter bore diameter of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: double CounterBoreDiameter
            (
            );
            /**Sets  the drop thru diameter of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDropThruDiameter
            (
                double drop_thru_diameter /** */
            );
            /**Returns  the drop thru diameter of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: double DropThruDiameter
            (
            );
            /**Sets  the pad diameter of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPadDiameter
            (
                double pad_diameter /** */
            );
            /**Returns  the pad diameter of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: double PadDiameter
            (
            );
            /**Sets  the pad height of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPadHeight
            (
                double pad_height /** */
            );
            /**Returns  the pad height of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: double PadHeight
            (
            );
            /**Sets  the plane offset of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPlaneOffset
            (
                double plane_offset /** */
            );
            /**Returns  the plane offset of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: double PlaneOffset
            (
            );
            /**Returns  the create with pad switch of the die hole, if true a pad will be created around the hole, if false the pad will not be created.  <br> License requirements : ug_die_design ("Die Design") */
            public: bool CreateWithPad
            (
            );
            /**Sets  the create with pad switch of the die hole, if true a pad will be created around the hole, if false the pad will not be created.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCreateWithPad
            (
                bool create_with_pad /** */
            );
            /**Returns  the display holes switch of the die hole, if true the hole will be built into the model, if false it will not. 
                    Note that this setting has the same affect as design status, unless the create with pad switch is true.  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DisplayHoles
            (
            );
            /**Sets  the display holes switch of the die hole, if true the hole will be built into the model, if false it will not. 
                    Note that this setting has the same affect as design status, unless the create with pad switch is true.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDisplayHoles
            (
                bool display_holes /** */
            );
            /** Gets the hole attributes, note existance of attributes depends on usage in
                    main feature.  <br> License requirements : ug_die_design ("Die Design") */
            public: void GetHoleAttributes
            (
                NXString* title /** Title for attribute. */,
                NXString* value /** Value of attribute. */,
                int* color /** Color of hole faces. */,
                NXString* diameter_title /** Title for diameter attribute. */,
                NXString* depth_title /** Title for depth attribute. */,
                NXString* counter_bore_diameter_title /** Title for counter bore diameter attribute. */
            );
            /** Sets the hole attributes, note existance of attributes depends on usage in
                    main feature.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetHoleAttributes
            (
                const NXString & title /** Title for attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** Value of attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** Color of hole faces. */,
                const NXString & diameter_title /** Title for diameter attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & depth_title /** Title for depth attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & counter_bore_diameter_title /** Title for counter bore diameter attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the pad attributes, note existance of attributes depends on usage in
                    main feature.  <br> License requirements : ug_die_design ("Die Design") */
            public: void GetPadAttributes
            (
                NXString* title /** Title for attribute. */,
                NXString* value /** Value of attribute. */,
                int* color /** Color of pad faces. */
            );
            /** Sets the pad attributes, note existance of attributes depends on usage in
                    main feature.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPadAttributes
            (
                const NXString & title /** Title for attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** Value of attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** Color of pad faces. */
            );
            /**Sets  the design status of the die hole, if true the hole will be built into the model, if false it will not.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDesignStatus
            (
                bool design_status /** */
            );
            /**Returns  the design status of the die hole, if true the hole will be built into the model, if false it will not.  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DesignStatus
            (
            );
            /**Returns  the build status of the die hole.  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieBuildStatusOption BuildStatus
            (
            );
            /**Sets  the display status of the die hole, if true input data to the hole will be displayed, 
                    if false the input data will not be displayed.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDisplayStatus
            (
                bool display_status /** */
            );
            /**Returns  the display status of the die hole, if true input data to the hole will be displayed, 
                    if false the input data will not be displayed.  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DisplayStatus
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
