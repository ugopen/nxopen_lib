#ifndef NXOpen_MODELINGVIEWHIGHQUALITYIMAGE_HXX_INCLUDED
#define NXOpen_MODELINGVIEWHIGHQUALITYIMAGE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ModelingViewHighQualityImage.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Preferences_SessionVisualizationHighQualityImage.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class ModelingViewHighQualityImage;
    class ModelingView;
    /** Represents the properties and methods for generating a High Quality Image
    of a Modeling View  <br> To obtain an instance of this class, refer to @link ModelingView ModelingView@endlink  <br> */
    class NXOPENCPPEXPORT ModelingViewHighQualityImage
    {
        /** Describes the method to be used to generate a High Quality Image */
        public: enum ShadeMethod
        {
            ShadeMethodFlat/** RDB_FIX Add comment */,
            ShadeMethodGouraud/** RDB_FIX Add comment */,
            ShadeMethodPhong/** RDB_FIX Add comment */,
            ShadeMethodImproved/** RDB_FIX Add comment */,
            ShadeMethodPreview/** RDB_FIX Add comment */,
            ShadeMethodPhotoRealistic/** RDB_FIX Add comment */,
            ShadeMethodRayTraced/** RDB_FIX Add comment */,
            ShadeMethodRayTracedFfa/** RDB_FIX Add comment */,
            ShadeMethodRadiosity/** RDB_FIX Add comment */,
            ShadeMethodHybridRadiosity/** RDB_FIX Add comment */
        };

        /** Describes the output format of the High Quality Image to be generated */
        public: enum FormatType
        {
            FormatTypeRasterImage/** RDB_FIX Add comment */,
            FormatTypeQtvrPanorama/** RDB_FIX Add comment */,
            FormatTypeQtvrObjectLow/** RDB_FIX Add comment */,
            FormatTypeQtvrObjectHigh/** RDB_FIX Add comment */
        };

        /** Describes the technique to be used when generating the High Quality Image */
        public: enum DisplayTechniqueType
        {
            DisplayTechniqueTypeRgbPlusNoise/** RDB_FIX Add comment */,
            DisplayTechniqueTypeFsRgb/** RDB_FIX Add comment */,
            DisplayTechniqueTypeRsRgbPlusNoise/** RDB_FIX Add comment */,
            DisplayTechniqueTypeMonochrome/** RDB_FIX Add comment */,
            DisplayTechniqueTypeGrayScale/** RDB_FIX Add comment */,
            DisplayTechniqueTypeNearestRgb/** RDB_FIX Add comment */,
            DisplayTechniqueTypeOrderedDither/** RDB_FIX Add comment */,
            DisplayTechniqueTypeTcPlusNoise/** RDB_FIX Add comment */
        };

        private: NXOpen::ModelingView* m_owner;
        public: explicit ModelingViewHighQualityImage(NXOpen::ModelingView *owner): m_owner(owner)
        {
        }
        public: tag_t Tag() const;
        /**Returns  the display technique to use for the generation of the High Quality Image.  <br> License requirements : None */
        public: NXOpen::ModelingViewHighQualityImage::DisplayTechniqueType DisplayTechnique
        (
        );
        /**Sets  the display technique to use for the generation of the High Quality Image.  <br> License requirements : None */
        public: void SetDisplayTechnique
        (
            NXOpen::ModelingViewHighQualityImage::DisplayTechniqueType display_technique /** */
        );
        /**Returns  the quality of the facets of the High Quality Image.  <br> License requirements : None */
        public: double FacetsQuality
        (
        );
        /**Sets  the quality of the facets of the High Quality Image.  <br> License requirements : None */
        public: void SetFacetsQuality
        (
            double facets_quality /** In range 0.1 [smooth] to 2.0 [coarse] */
        );
        /**Returns  the format to use for the generation of the High Quality Image.  <br> License requirements : None */
        public: NXOpen::ModelingViewHighQualityImage::FormatType Format
        (
        );
        /**Sets  the format to use for the generation of the High Quality Image.  <br> License requirements : None */
        public: void SetFormat
        (
            NXOpen::ModelingViewHighQualityImage::FormatType format /** */
        );
        /**Returns  the method to use for the generation of the High Quality Image.  <br> License requirements : None */
        public: NXOpen::ModelingViewHighQualityImage::ShadeMethod Method
        (
        );
        /**Sets  the method to use for the generation of the High Quality Image.  <br> License requirements : None */
        public: void SetMethod
        (
            NXOpen::ModelingViewHighQualityImage::ShadeMethod method /** */
        );
        /**Returns  the setting for whether the High Quality Image is to contain shadows  <br> License requirements : None */
        public: bool Shadows
        (
        );
        /**Sets  the setting for whether the High Quality Image is to contain shadows  <br> License requirements : None */
        public: void SetShadows
        (
            bool generate_shadows /** */
        );
        /**Returns  the setting for whether the High Quality Image is to use IBL  <br> License requirements : None */
        public: bool UseIbl
        (
        );
        /**Sets  the setting for whether the High Quality Image is to use IBL  <br> License requirements : None */
        public: void SetUseIbl
        (
            bool use_ibl /** When true, use image-based lighting in lieu of individual lights for HQI's */
        );
        /** Generates a high qualilty image of a view based on the previously
                defined shading parameters for the view.
                Currently the given view must be the work view.
             <br> License requirements : None */
        public: void Generate
        (
        );
        /** Saves the currently displayed high qualilty image of a view
                to a file.
                Currently the given view must be the work view.
             <br> License requirements : None */
        public: void Save
        (
            const NXString & image_file_name /** File name for the saved image.  This may
                                                          *  include an extension, which may be .tif,
                                                          *  .jpg, .gif or .wrl.  If no extension is
                                                          *  provided, or if the extension is invalid,
                                                          *  a .tif file will be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool compress_image /** Should the image file be compressed? */
        );
        /** Erases the previously generated high qualilty image of a view.
                Currently the given view must be the work view.
             <br> License requirements : None */
        public: void Erase
        (
        );
        /** Plots the previously generated high qualilty image of a view.
                Currently the given view must be the work view.
             <br> License requirements : None */
        public: void Plot
        (
            NXOpen::Preferences::SessionVisualizationHighQualityImage::ResolutionType resolution /** The resolution for the plot */,
            int dots_per_inch /** Used only when resolution is ...user_defined */,
            NXOpen::Preferences::SessionVisualizationHighQualityImage::PlotQualityType plot_quality /** The quality level for the plot */,
            const NXString & plot_file_name /** Full path name for the plot file to create   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Shows information about the last image rendered.  The information is
                what is shown by the Information button on the High Quality Image
                dialog.  It is displayed in the listing window.  If no image has been
                rendered in this session, the information show is RDB_FIX WHAT???
                RDB_FIX  What if the view passed in is NOT the last view rendered ???
                 <br>  Internal mode only.  <br> 
             <br> License requirements : None */
        public: void ShowImageInformation
        (
        );
        /** Get information about the last image rendered.  If no image has been
                rendered in this session, all zeroes are returned.
                RDB_FIX  What if the view passed in is NOT the last view rendered ???
             <br> License requirements : None */
        public: void GetImageCounts
        (
            int* number_bodies_rendered /** How many bodies were rendered for the image */,
            int* number_faces_rendered /** How many faces  were rendered for the image */,
            int* number_polygons_generated /** How many polygons were created from the faces for the image */,
            double* polygon_generation_seconds /** Number of seconds to generate the polygons */,
            double* shadow_generation_seconds /** Number of seconds to generate the shadows */,
            double* image_generation_seconds /** Number of seconds to generate the image */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
