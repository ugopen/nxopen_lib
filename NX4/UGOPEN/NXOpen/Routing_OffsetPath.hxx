#ifndef NXOpen_ROUTING_OFFSETPATH_HXX_INCLUDED
#define NXOpen_ROUTING_OFFSETPATH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_OffsetPath.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Routing_IPath.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class OffsetPath;
    }
    namespace Routing
    {
        class IPath;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        /** The Routing OffsetPath object is the set of information needed to define an offset route.
             */
        class NXOPENCPPEXPORT OffsetPath : public virtual Routing::IPath
        {
            /** The path segments for an offset object.  @return  segment list for the offset object  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual std::vector<NXOpen::Routing::ISegment *> GetOffsetPathSegments
            (
            ) = 0;
            /** The path segments for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetOffsetPathSegments
            (
                const std::vector<NXOpen::Routing::ISegment *> & segments /** segment list for the offset object */
            ) = 0;
            /**Returns  the vector for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Vector3d OffsetVector
            (
            ) = 0;
            /**Sets  the vector for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetOffsetVector
            (
                const NXOpen::Vector3d & vector /** vector for the offset object */
            ) = 0;
            /** The reference axes for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void GetOffsetReferenceAxes
            (
                NXOpen::Point3d* orgin /** origin for the offset object           */,
                NXOpen::Vector3d* x_vector /** X reference axes for the offset object */,
                NXOpen::Vector3d* y_vector /** Y reference axes for the offset object */
            ) = 0;
            /** The reference axes for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetOffsetReferenceAxes
            (
                const NXOpen::Point3d & orgin /** origin for the offset object           */,
                const NXOpen::Vector3d & x_vector /** X reference axes for the offset object */,
                const NXOpen::Vector3d & y_vector /** Y reference axes for the offset object */
            ) = 0;
            /** Returns the list of all of the offset paths for a master path  @return  list of all of the offset paths in this master object  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual std::vector<NXOpen::Routing::IPath *> GetOffsetPaths
            (
            ) = 0;
            /** The master path object for this offset object.  @return  master path for this offset object  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::IPath * GetMasterPath
            (
            ) = 0;
            /** The master path object for this offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetMasterPath
            (
                NXOpen::Routing::IPath * master_path /** master path for this offset object */
            ) = 0;
            /**Returns  the isMaster state for this offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual bool IsMaster
            (
            ) = 0;
            /**Sets  the isMaster state for this offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetMaster
            (
                bool master_state /** the state of the offset path object */
            ) = 0;
            /**Returns  the isSlave state for this offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual bool IsSlave
            (
            ) = 0;
            /**Sets  the isSlave state for this offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetSlave
            (
                bool master_state /** the state of the offset path object */
            ) = 0;
            /**Returns  the bend radius for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual double BendRadius
            (
            ) = 0;
            /**Sets  the bend radius for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetBendRadius
            (
                double radius /** */
            ) = 0;
            /**Returns  the bend ratio for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual double BendRatio
            (
            ) = 0;
            /**Sets  the bend ratio for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetBendRatio
            (
                double ratio /** */
            ) = 0;
            /**Returns  the use bend ratio flag for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual bool UseBendRatio
            (
            ) = 0;
            /**Sets  the use bend ratio flag for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetUseBendRatio
            (
                bool ratio_state /** */
            ) = 0;
            /**Returns  the copy corner flag for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual bool CopyCornerFlag
            (
            ) = 0;
            /**Sets  the copy corner flag for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCopyCornerFlag
            (
                bool copy_corner /** */
            ) = 0;
            /**Returns  the use maintain stock flag for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual bool MaintainStockFlag
            (
            ) = 0;
            /**Sets  the use maintain stock flag for an offset object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetMaintainStockFlag
            (
                bool maintain_stock /** */
            ) = 0;
        };
    }
}
#undef EXPORTLIBRARY
#endif
