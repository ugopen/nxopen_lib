#ifndef NXOpen_BASEPART_HXX_INCLUDED
#define NXOpen_BASEPART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BasePart.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/PartCloseResponses.hxx>
#include <NXOpen/PartReopenReport.hxx>
#include <NXOpen/PartSaveStatus.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class BasePart;
    class ArcCollection;
    namespace Assemblies
    {
        class ComponentAssembly;
    }
    class AxisCollection;
    class CoordinateSystemCollection;
    class CurveCollection;
    class DatumCollection;
    class DirectionCollection;
    class EllipseCollection;
    class ExpressionCollection;
    namespace Fields
    {
        class FieldManager;
    }
    class FontCollection;
    class HyperbolaCollection;
    namespace Layer
    {
        class CategoryCollection;
    }
    namespace Layer
    {
        class LayerManager;
    }
    class LayoutCollection;
    class LightCollection;
    class LineCollection;
    class MeasureManager;
    class ModelingViewCollection;
    class NXMatrixCollection;
    class NXObject;
    class OffsetCollection;
    namespace PDM
    {
        class PdmPart;
    }
    class ParabolaCollection;
    class PartCloseResponses;
    class PartReopenReport;
    class PartSaveStatus;
    class PlaneCollection;
    class PointCollection;
    namespace Preferences
    {
        class PartPreferences;
    }
    class RuleManager;
    class ScCollectorCollection;
    class ScalarCollection;
    class SectionCollection;
    class UnitCollection;
    class ViewCollection;
    class WCS;
    class XformCollection;
    class _BasePartBuilder;
    /** Base class for an NX part.  <br> Use the @link NXOpen::PartCollection NXOpen::PartCollection@endlink  class to load or create a part. Use @link NXOpen::PartCollection::Work NXOpen::PartCollection::Work@endlink  to obtain the current work part. <br> */
    class NXOPENCPPEXPORT BasePart : public NXObject
    {
        /** The units of the part file. */
        public: enum Units
        {
            UnitsInches/** */,
            UnitsMillimeters/** */
        };

        /** Used to specify whether a part's components should be saved (if modified)
            when the part is saved. */
        public: enum SaveComponents
        {
            SaveComponentsFalse/** */,
            SaveComponentsTrue/** */
        };

        /** Used to specify whether a part should be closed after it is saved. */
        public: enum CloseAfterSave
        {
            CloseAfterSaveFalse/** */,
            CloseAfterSaveTrue/** */
        };

        /** Used to specify whether or not to close a part's components during a close operation. */
        public: enum CloseWholeTree
        {
            CloseWholeTreeFalse/** */,
            CloseWholeTreeTrue/** */
        };

         /** Contains part history event information */
        public:
        struct HistoryEventInformation
        {
            public: /** program name */NXString Program;
            public: /** user id */NXString User;
            public: /** type of machine. eg.  NT Intel */NXString Machine;
            public: /** time of last change */NXString Time;
            public: /** version number */int Version;
            public: HistoryEventInformation() :
                Program(),
                User(),
                Machine(),
                Time(),
                Version()
            {
            }
            /** Constructor for the HistoryEventInformation struct. */ 
            public: HistoryEventInformation(NXString INIT_program /** program name */, NXString INIT_user /** user id */, NXString INIT_machine /** type of machine. eg.  NT Intel */, NXString INIT_time /** time of last change */, int INIT_version /** version number */) :
                Program(INIT_program),
                User(INIT_user),
                Machine(INIT_machine),
                Time(INIT_time),
                Version(INIT_version)
            {
            }
        };

        /** Indicates how part close should handle component parts when they are modified */
        public: enum CloseModified
        {
            CloseModifiedUseResponses/** Use the responses in
                        @link PartCloseResponses PartCloseResponses@endlink  to determine whether to close a
                        modified part or not */,
            CloseModifiedCloseModified/** Close all modified parts */,
            CloseModifiedDontCloseModified/** Do not close any modified parts */
        };

        /** Specifies the preview mode of the part file. */
        public: enum PartPreview
        {
            PartPreviewNone/** No preview image is stored for the part. */,
            PartPreviewOnSave/** Create a preview image when the part is saved. */,
            PartPreviewOnDemand/** Create a preview image on demand. */
        };

         /** Transient part return data */
        public:
        struct TransientStatus
        {
            public: /** Part is transient */bool Trans;
            public: /** Did part start out in a transient state */bool InitiallyTransient;
            public: /** Part is locked in a transient state */bool Locked;
            public: /** Part has transient children */bool TransientChildren;
            public: TransientStatus() :
                Trans(),
                InitiallyTransient(),
                Locked(),
                TransientChildren()
            {
            }
            /** Constructor for the TransientStatus struct. */ 
            public: TransientStatus(bool INIT_trans /** Part is transient */, bool INIT_initially_transient /** Did part start out in a transient state */, bool INIT_locked /** Part is locked in a transient state */, bool INIT_transient_children /** Part has transient children */) :
                Trans(INIT_trans),
                InitiallyTransient(INIT_initially_transient),
                Locked(INIT_locked),
                TransientChildren(INIT_transient_children)
            {
            }
        };

         /** Incomplete part return data */
        public:
        struct IncompleteStatus
        {
            public: /** Parts structure is incomplete */bool StructIncomplete;
            public: /** Part has components pending */bool PendIncomplete;
            public: /** Part has incomplete children */bool IncompleteChildren;
            public: IncompleteStatus() :
                StructIncomplete(),
                PendIncomplete(),
                IncompleteChildren()
            {
            }
            /** Constructor for the IncompleteStatus struct. */ 
            public: IncompleteStatus(bool INIT_struct_incomplete /** Parts structure is incomplete */, bool INIT_pend_incomplete /** Part has components pending */, bool INIT_incomplete_children /** Part has incomplete children */) :
                StructIncomplete(INIT_struct_incomplete),
                PendIncomplete(INIT_pend_incomplete),
                IncompleteChildren(INIT_incomplete_children)
            {
            }
        };

        private: friend class  _BasePartBuilder;
        protected: BasePart();
        /**Returns  the leaf name of the part  <br> License requirements : None */
        public: NXString Leaf
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Leaf() Leaf@endlink instead.
        @deprecated
        */
        public: NXString GetLeaf
        (
        ) { return this->Leaf(); }
        /**Returns  the full path of the part  <br> License requirements : None */
        public: NXString FullPath
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link FullPath() FullPath@endlink instead.
        @deprecated
        */
        public: NXString GetFullPath
        (
        ) { return this->FullPath(); }
        /**Returns  the units of the part file.  <br> License requirements : None */
        public: NXOpen::BasePart::Units PartUnits
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link PartUnits() PartUnits@endlink instead.
        @deprecated
        */
        public: NXOpen::BasePart::Units GetPartUnits
        (
        ) { return this->PartUnits(); }
        /** Saves the part whether it is modified or not.  @return  Parts that could not be saved and their associated errors.  <br> License requirements : None */
        public: NXOpen::PartSaveStatus * Save
        (
            NXOpen::BasePart::SaveComponents save_component_parts /** The part's
                        components are saved if modified if this parameter is set to
                        @link BasePart::SaveComponentsTrue BasePart::SaveComponentsTrue@endlink . */,
            NXOpen::BasePart::CloseAfterSave close /** The part is closed if
                        this parameter is set to @link BasePart::CloseAfterSaveTrue BasePart::CloseAfterSaveTrue@endlink . */
        );
        /** Creates copy of target part.  @return  Parts that could could not saved and their associated errors.  <br> License requirements : None */
        public: NXOpen::PartSaveStatus * SaveAs
        (
            const NXString & new_file_name /** name of new part file to create   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Reopens a loaded part.  @return  The reloaded part  <br> License requirements : None */
        public: NXOpen::BasePart * Reopen
        (
            NXOpen::BasePart::CloseWholeTree whole_tree /** If true, unloads all components of the part.
                        If false, unloads only the top-level part */,
            NXOpen::BasePart::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */,
            NXOpen::PartReopenReport ** reopen_report /** Report
                       containing results of reopen command */
        );
        /** Reopens a loaded part.  @return  The reloaded part  <br> License requirements : None */
        public: NXOpen::BasePart * ReopenAs
        (
            const NXString & file_name /** name of part file to open   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::BasePart::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */,
            NXOpen::PartReopenReport ** reopen_report /** Report
                       containing results of reopen command */
        );
        /** Closes an open part.  <br> License requirements : None */
        public: void Close
        (
            NXOpen::BasePart::CloseWholeTree whole_tree /** If true, unloads all components of the part.
                        If false, unloads only the top-level part */,
            NXOpen::BasePart::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */
        );
        /**Returns  the load status of a part. Set to true if part is fully loaded
                and set to false if the part is partially loaded.  <br> License requirements : None */
        public: bool IsFullyLoaded
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link IsFullyLoaded() IsFullyLoaded@endlink instead.
        @deprecated
        */
        public: bool GetIsFullyLoaded
        (
        ) { return this->IsFullyLoaded(); }
        /** Reverse blank all the objects in the part.  <br> License requirements : None */
        public: void ReverseBlankAll
        (
        );
        /** Get history of part  @return  list of history data for the part. The list is sorted in
                                    descending order on version number.  <br> License requirements : None */
        public: std::vector<NXOpen::BasePart::HistoryEventInformation> GetHistoryInformation
        (
        );
        /**Returns  the preview mode  <br> License requirements : None */
        public: NXOpen::BasePart::PartPreview PartPreviewMode
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link PartPreviewMode() PartPreviewMode@endlink instead.
        @deprecated
        */
        public: NXOpen::BasePart::PartPreview GetPartPreviewMode
        (
        ) { return this->PartPreviewMode(); }
        /**Sets  the preview mode  <br> License requirements : None */
        public: void SetPartPreviewMode
        (
            NXOpen::BasePart::PartPreview mode /** */
        );
        /**Returns  the component assembly.  <br> License requirements : None */
        public: NXOpen::Assemblies::ComponentAssembly * ComponentAssembly
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link ComponentAssembly() ComponentAssembly@endlink instead.
        @deprecated
        */
        public: NXOpen::Assemblies::ComponentAssembly * GetComponentAssembly
        (
        ) { return this->ComponentAssembly(); }
        /** Remove the transient status from the input part  <br> License requirements : None */
        public: void RemoveTransience
        (
        );
        /** Reinstate the transient status to the formerly transient input part  <br> License requirements : None */
        public: void ReinstateTransience
        (
        );
        /** Inquire whether the provided part is flagged as being transient  @return   <br> License requirements : None */
        public: NXOpen::BasePart::TransientStatus GetTransientStatus
        (
        );
        /** Inquire whether the provided part is flagged as being incomplete  @return   <br> License requirements : None */
        public: NXOpen::BasePart::IncompleteStatus GetIncompleteStatus
        (
        );
        /** Make additions necessary to complete the incomplete assembly structure of the input part  <br> License requirements : None */
        public: void CompleteStructure
        (
        );
        /**Returns  the field main.  <br> License requirements : None */
        public: NXOpen::Fields::FieldManager * FieldManager
        (
        );


        private: NXOpen::WCS *wCS;
        /** Returns the WCS instance belonging to this part */
        public: NXOpen::WCS *WCS()
        {
            return wCS;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link WCS() WCS@endlink instead.
        @deprecated
        */
        public: NXOpen::WCS *GetWCS() { return WCS(); }
        private: NXOpen::ArcCollection *arcs;
        /** Returns the ArcCollection instance belonging to this part */
        public: NXOpen::ArcCollection *Arcs()
        {
            return arcs;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Arcs() Arcs@endlink instead.
        @deprecated
        */
        public: NXOpen::ArcCollection *GetArcs() { return Arcs(); }
        private: NXOpen::ParabolaCollection *parabolas;
        /** Returns the ParabolaCollection instance belonging to this part */
        public: NXOpen::ParabolaCollection *Parabolas()
        {
            return parabolas;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Parabolas() Parabolas@endlink instead.
        @deprecated
        */
        public: NXOpen::ParabolaCollection *GetParabolas() { return Parabolas(); }
        private: NXOpen::MeasureManager *measureManager;
        /** Returns the measure manager for this part */
        public: NXOpen::MeasureManager *MeasureManager()
        {
            return measureManager;
        }
        private: NXOpen::Layer::LayerManager *layers;
        /** Returns the LayerManager for this part */
        public: NXOpen::Layer::LayerManager *Layers()
        {
            return layers;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Layers() Layers@endlink instead.
        @deprecated
        */
        public: NXOpen::Layer::LayerManager *GetLayers() { return Layers(); }
        private: NXOpen::XformCollection *xforms;
        /** Returns the XformCollection instance belonging to this part */
        public: NXOpen::XformCollection *Xforms()
        {
            return xforms;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Xforms() Xforms@endlink instead.
        @deprecated
        */
        public: NXOpen::XformCollection *GetXforms() { return Xforms(); }
        private: NXOpen::OffsetCollection *offsets;
        /** Returns the OffsetCollection instance belonging to this part */
        public: NXOpen::OffsetCollection *Offsets()
        {
            return offsets;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Offsets() Offsets@endlink instead.
        @deprecated
        */
        public: NXOpen::OffsetCollection *GetOffsets() { return Offsets(); }
        private: NXOpen::PlaneCollection *planes;
        /** Return a collection of Planes */
        public: NXOpen::PlaneCollection *Planes()
        {
            return planes;
        }
        private: NXOpen::HyperbolaCollection *hyperbolas;
        /** Returns the HyperbolaCollection instance belonging to this part */
        public: NXOpen::HyperbolaCollection *Hyperbolas()
        {
            return hyperbolas;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Hyperbolas() Hyperbolas@endlink instead.
        @deprecated
        */
        public: NXOpen::HyperbolaCollection *GetHyperbolas() { return Hyperbolas(); }
        private: NXOpen::CurveCollection *curves;
        /** Returns the CurveCollection instance belonging to this part */
        public: NXOpen::CurveCollection *Curves()
        {
            return curves;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Curves() Curves@endlink instead.
        @deprecated
        */
        public: NXOpen::CurveCollection *GetCurves() { return Curves(); }
        private: NXOpen::PointCollection *points;
        /** Returns the PointCollection instance belonging to this part */
        public: NXOpen::PointCollection *Points()
        {
            return points;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Points() Points@endlink instead.
        @deprecated
        */
        public: NXOpen::PointCollection *GetPoints() { return Points(); }
        private: NXOpen::EllipseCollection *ellipses;
        /** Returns the EllipseCollection instance belonging to this part */
        public: NXOpen::EllipseCollection *Ellipses()
        {
            return ellipses;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Ellipses() Ellipses@endlink instead.
        @deprecated
        */
        public: NXOpen::EllipseCollection *GetEllipses() { return Ellipses(); }
        private: NXOpen::LineCollection *lines;
        /** Returns the LineCollection instance belonging to this part */
        public: NXOpen::LineCollection *Lines()
        {
            return lines;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Lines() Lines@endlink instead.
        @deprecated
        */
        public: NXOpen::LineCollection *GetLines() { return Lines(); }
        private: NXOpen::NXMatrixCollection *nXMatrices;
        /** Returns the NXMatrixCollection instance belonging to this part */
        public: NXOpen::NXMatrixCollection *NXMatrices()
        {
            return nXMatrices;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link NXMatrices() NXMatrices@endlink instead.
        @deprecated
        */
        public: NXOpen::NXMatrixCollection *GetNXMatrices() { return NXMatrices(); }
        private: NXOpen::ScalarCollection *scalars;
        /** Returns the ScalarCollection instance belonging to this part */
        public: NXOpen::ScalarCollection *Scalars()
        {
            return scalars;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Scalars() Scalars@endlink instead.
        @deprecated
        */
        public: NXOpen::ScalarCollection *GetScalars() { return Scalars(); }
        private: NXOpen::FontCollection *fonts;
        /** Returns the FontCollection instance belonging to this part */
        public: NXOpen::FontCollection *Fonts()
        {
            return fonts;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Fonts() Fonts@endlink instead.
        @deprecated
        */
        public: NXOpen::FontCollection *GetFonts() { return Fonts(); }
        private: NXOpen::DatumCollection *datums;
        /** Returns the DatumCollection instance belonging to this part */
        public: NXOpen::DatumCollection *Datums()
        {
            return datums;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Datums() Datums@endlink instead.
        @deprecated
        */
        public: NXOpen::DatumCollection *GetDatums() { return Datums(); }
        private: NXOpen::ViewCollection *views;
        /** Returns the ViewCollection instance belonging to this part */
        public: NXOpen::ViewCollection *Views()
        {
            return views;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Views() Views@endlink instead.
        @deprecated
        */
        public: NXOpen::ViewCollection *GetViews() { return Views(); }
        private: NXOpen::ExpressionCollection *expressions;
        /** Returns the ExpressionCollection instance belonging to this part */
        public: NXOpen::ExpressionCollection *Expressions()
        {
            return expressions;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Expressions() Expressions@endlink instead.
        @deprecated
        */
        public: NXOpen::ExpressionCollection *GetExpressions() { return Expressions(); }
        private: NXOpen::UnitCollection *unitCollection;
        /** Returns a collection of Units */
        public: NXOpen::UnitCollection *UnitCollection()
        {
            return unitCollection;
        }
        private: NXOpen::DirectionCollection *directions;
        /** Returns the DirectionCollection instance belonging to this part */
        public: NXOpen::DirectionCollection *Directions()
        {
            return directions;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Directions() Directions@endlink instead.
        @deprecated
        */
        public: NXOpen::DirectionCollection *GetDirections() { return Directions(); }
        private: NXOpen::ModelingViewCollection *modelingViews;
        /** Returns the ModelingViewCollection instance belonging to this part */
        public: NXOpen::ModelingViewCollection *ModelingViews()
        {
            return modelingViews;
        }
        private: NXOpen::Layer::CategoryCollection *layerCategories;
        /** Returns a collection of layer categories */
        public: NXOpen::Layer::CategoryCollection *LayerCategories()
        {
            return layerCategories;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link LayerCategories() LayerCategories@endlink instead.
        @deprecated
        */
        public: NXOpen::Layer::CategoryCollection *GetLayerCategories() { return LayerCategories(); }
        private: NXOpen::RuleManager *ruleManager;
        /** Returns the rule manager for this part */
        public: NXOpen::RuleManager *RuleManager()
        {
            return ruleManager;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link RuleManager() RuleManager@endlink instead.
        @deprecated
        */
        public: NXOpen::RuleManager *GetRuleManager() { return RuleManager(); }
        private: NXOpen::Preferences::PartPreferences *preferences;
        /** Returns the PartPreferences instance belonging to this part */
        public: NXOpen::Preferences::PartPreferences *Preferences()
        {
            return preferences;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Preferences() Preferences@endlink instead.
        @deprecated
        */
        public: NXOpen::Preferences::PartPreferences *GetPreferences() { return Preferences(); }
        private: NXOpen::AxisCollection *axes;
        /** Returns the AxisCollection instance belonging to this part */
        public: NXOpen::AxisCollection *Axes()
        {
            return axes;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Axes() Axes@endlink instead.
        @deprecated
        */
        public: NXOpen::AxisCollection *GetAxes() { return Axes(); }
        private: NXOpen::LightCollection *lights;
        /** Returns the LightCollection instance belonging to this part */
        public: NXOpen::LightCollection *Lights()
        {
            return lights;
        }
        private: NXOpen::SectionCollection *sections;
        /** Returns the SectionCollection instance belonging to this part */
        public: NXOpen::SectionCollection *Sections()
        {
            return sections;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Sections() Sections@endlink instead.
        @deprecated
        */
        public: NXOpen::SectionCollection *GetSections() { return Sections(); }
        private: NXOpen::ScCollectorCollection *scCollectors;
        /** Returns the ScCollectorCollection instance belonging to this part */
        public: NXOpen::ScCollectorCollection *ScCollectors()
        {
            return scCollectors;
        }
        private: NXOpen::CoordinateSystemCollection *coordinateSystems;
        /** Returns the CoordinateSystemCollection instance belonging to this part */
        public: NXOpen::CoordinateSystemCollection *CoordinateSystems()
        {
            return coordinateSystems;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link CoordinateSystems() CoordinateSystems@endlink instead.
        @deprecated
        */
        public: NXOpen::CoordinateSystemCollection *GetCoordinateSystems() { return CoordinateSystems(); }
        private: NXOpen::LayoutCollection *layouts;
        /** Returns the LayoutCollection instance belonging to this part */
        public: NXOpen::LayoutCollection *Layouts()
        {
            return layouts;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Layouts() Layouts@endlink instead.
        @deprecated
        */
        public: NXOpen::LayoutCollection *GetLayouts() { return Layouts(); }
        private: NXOpen::PDM::PdmPart *pDMPart;
        /** Returns the instance of the PDM.PdmPart class */
        public: NXOpen::PDM::PdmPart *PDMPart()
        {
            return pDMPart;
        }
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
