#ifndef NXOpen_ANNOTATIONS_UNITSFORMATPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_UNITSFORMATPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_UnitsFormatPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class UnitsFormatPreferences;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        /** Represents units and format preferences */
        class NXOPENCPPEXPORT UnitsFormatPreferences : public TransientObject
        {
            public: explicit UnitsFormatPreferences(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~UnitsFormatPreferences();
            /**Returns  the primary dimension unit  <br> License requirements : None */
            public: NXOpen::Annotations::DimensionUnit PrimaryDimensionUnit
            (
            );
            /**Sets  the primary dimension unit  <br> License requirements : None */
            public: void SetPrimaryDimensionUnit
            (
                NXOpen::Annotations::DimensionUnit unit /** */
            );
            /**Returns  the primary dimension text format  <br> License requirements : None */
            public: NXOpen::Annotations::DimensionTextFormat PrimaryDimensionTextFormat
            (
            );
            /**Sets  the primary dimension text format  <br> License requirements : None */
            public: void SetPrimaryDimensionTextFormat
            (
                NXOpen::Annotations::DimensionTextFormat text_format /** */
            );
            /**Returns  the decimal point character  <br> License requirements : None */
            public: NXOpen::Annotations::DecimalPointCharacter DecimalPointCharacter
            (
            );
            /**Sets  the decimal point character  <br> License requirements : None */
            public: void SetDecimalPointCharacter
            (
                NXOpen::Annotations::DecimalPointCharacter decimal_point_character /** */
            );
            /**Returns  the flag indicating whether to display trailing zeros on dimension values  <br> License requirements : None */
            public: bool DisplayTrailingZeros
            (
            );
            /**Sets  the flag indicating whether to display trailing zeros on dimension values  <br> License requirements : None */
            public: void SetDisplayTrailingZeros
            (
                bool display_trailing_zeros /** */
            );
            /**Returns  the tolerance text placement relative to the dimension text  <br> License requirements : None */
            public: NXOpen::Annotations::TolerancePlacement TolerancePlacement
            (
            );
            /**Sets  the tolerance text placement relative to the dimension text  <br> License requirements : None */
            public: void SetTolerancePlacement
            (
                NXOpen::Annotations::TolerancePlacement placement /** */
            );
            /**Returns  the angular dimension format  <br> License requirements : None */
            public: NXOpen::Annotations::AngularDimensionFormat AngularDimensionFormat
            (
            );
            /**Sets  the angular dimension format  <br> License requirements : None */
            public: void SetAngularDimensionFormat
            (
                NXOpen::Annotations::AngularDimensionFormat format /** */
            );
            /**Returns  the angular tolerance format  <br> License requirements : None */
            public: NXOpen::Annotations::AngularDimensionFormat AngularToleranceFormat
            (
            );
            /**Sets  the angular tolerance format  <br> License requirements : None */
            public: void SetAngularToleranceFormat
            (
                NXOpen::Annotations::AngularDimensionFormat format /** */
            );
            /**Returns  the dual dimension placement relative to the primary dimension  <br> License requirements : None */
            public: NXOpen::Annotations::DualDimensionPlacement DualDimensionPlacement
            (
            );
            /**Sets  the dual dimension placement relative to the primary dimension  <br> License requirements : None */
            public: void SetDualDimensionPlacement
            (
                NXOpen::Annotations::DualDimensionPlacement placement /** */
            );
            /**Returns  the dual dimension unit  <br> License requirements : None */
            public: NXOpen::Annotations::DimensionUnit DualDimensionUnit
            (
            );
            /**Sets  the dual dimension unit  <br> License requirements : None */
            public: void SetDualDimensionUnit
            (
                NXOpen::Annotations::DimensionUnit unit /** */
            );
            /**Returns  the dual dimension text format  <br> License requirements : None */
            public: NXOpen::Annotations::DimensionTextFormat DualDimensionTextFormat
            (
            );
            /**Sets  the dual dimension text format  <br> License requirements : None */
            public: void SetDualDimensionTextFormat
            (
                NXOpen::Annotations::DimensionTextFormat text_format /** */
            );
            /**Returns  the flag indicating whether to convert the primary tolerance to dual dimension unit  <br> License requirements : None */
            public: bool ConvertPrimaryToleranceToDualDimensionUnit
            (
            );
            /**Sets  the flag indicating whether to convert the primary tolerance to dual dimension unit  <br> License requirements : None */
            public: void SetConvertPrimaryToleranceToDualDimensionUnit
            (
                bool convert_primary_tolerance_to_dual_unit /** */
            );
            /**Returns  the angular dimension suppress zeros option  <br> License requirements : None */
            public: NXOpen::Annotations::AngularSuppressZeros SuppressAngularZerosOption
            (
            );
            /**Sets  the angular dimension suppress zeros option  <br> License requirements : None */
            public: void SetSuppressAngularZerosOption
            (
                NXOpen::Annotations::AngularSuppressZeros option /** */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
