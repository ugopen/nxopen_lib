#ifndef NXOpen_ROUTING_STOCKCOLLECTION_HXX_INCLUDED
#define NXOpen_ROUTING_STOCKCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_StockCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Routing_Stock.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class StockCollection;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Assemblies
    {
        class Component;
    }
    class Curve;
    namespace Routing
    {
        class Anchor;
    }
    namespace Routing
    {
        class CrossSection;
    }
    namespace Routing
    {
        class StockData;
    }
    namespace Routing
    {
        /** Represents a collection of @link Routing::Stock Routing::Stock@endlink  objects.   <br> To obtain an instance of this class, refer to @link RouteManager RouteManager@endlink  <br> */
        class NXOPENCPPEXPORT StockCollection : public TaggedObjectCollection
        {
            private: NXOpen::Routing::RouteManager* m_owner;
            public: explicit StockCollection(NXOpen::Routing::RouteManager *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            class iterator
            {
            public:
                typedef Routing::Stock * value_type;
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Routing::StockCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                NXOPENCPPEXPORT  value_type operator * ();
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Routing::StockCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            iterator begin();
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a @link Routing::Stock Routing::Stock@endlink  object.  @return  The resulting array of newly created @link Routing::Stock Routing::Stock@endlink 
                                                        objects.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: std::vector<NXOpen::Routing::Stock *> CreateStock
            (
                NXOpen::Routing::StockData * stock_data /** The @link Routing::StockData Routing::StockData@endlink  that defines the stock */,
                NXOpen::Routing::Anchor * anchor /** The @link Routing::Anchor Routing::Anchor@endlink  from the input 
                                                           @link Routing::StockData Routing::StockData@endlink  to use, NULL is allowed for
                                                           no anchor. */,
                NXOpen::Routing::CrossSection * cross_section /** The @link Routing::CrossSection Routing::CrossSection@endlink  from the input 
                                                           @link Routing::StockData Routing::StockData@endlink  to use, NULL is not allowed. */,
                const std::vector<NXOpen::Curve *> & segments /** The array of @link Routing::ISegment Routing::ISegment@endlink  curves that
                                                                the stock must cover. */
            );
            /** Returns the @link Routing::Stock Routing::Stock@endlink  that controls the given component.  
                        Only returns a @link Routing::Stock Routing::Stock@endlink  if the input component is a component created 
                        by a Stock as Components stock object.  @return  Returns NULL if the input component is not controlled
                                                        by a @link Routing::Stock Routing::Stock@endlink   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::Stock * GetComponentStock
            (
                NXOpen::Assemblies::Component * component /** */
            );
            /**  Converts a part file from Legacy Stock into Stock as Components.  Converts all stocks
                         whose use is @link StockUse::LegacyStock StockUse::LegacyStock@endlink  into @link StockUse::StockAsComponent StockUse::StockAsComponent@endlink 
                         stocks by creating components for each stock.  After calling this routine, all new stocks in this part
                         will have components associated with them.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void ConvertToStockAsComponents
            (
                NXOpen::Routing::ComponentName name_type /** Naming scheme to use for components.  Calls 
                                                                               @link Routing::Stock::RenameComponent Routing::Stock::RenameComponent@endlink  on 
                                                                               each new stock component if input is 
                                                                               @link Routing::ComponentName::Permanent Routing::ComponentName::Permanent@endlink . */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
