#ifndef NXOpen_CAE_SIMSIMULATION_HXX_INCLUDED
#define NXOpen_CAE_SIMSIMULATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SimSimulation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class SimSimulation;
    }
    namespace CAE
    {
        class SimBC;
    }
    namespace CAE
    {
        class SimBCBuilder;
    }
    namespace CAE
    {
        class SimConstraintCollection;
    }
    namespace CAE
    {
        class SimLoadCollection;
    }
    namespace CAE
    {
        class SimSimulationObjectCollection;
    }
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class SimSolutionStep;
    }
    class NXObject;
    namespace CAE
    {
        class _SimSimulationBuilder;
        /**  @brief  This is the root object in a .sim file. Only one instance of this class will exist in each fem part file 

           <br> To obtain an instance of this class, use @link CAE::SimPart::GetSimulation CAE::SimPart::GetSimulation@endlink  <br> */
        class NXOPENCPPEXPORT SimSimulation : public NXObject
        {
            private: friend class  _SimSimulationBuilder;
            protected: SimSimulation();
            /**Returns  the active solution
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolution * ActiveSolution
            (
            );
            /**Sets  the active solution
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetActiveSolution
            (
                NXOpen::CAE::SimSolution * active_solution /** the active solution  @link CAE::SimSolution CAE::SimSolution@endlink */
            );
            /** Creates a solution
                      @return  the created @link CAE::SimSolution CAE::SimSolution@endlink   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolution * CreateSolution
            (
                const NXString & solver_type /** name of the solver   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & analysis_type /** name of the analysis type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & solution_type /** name of the solution type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & name /** name of the solution to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Delete the solution
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteSolution
            (
                NXOpen::CAE::SimSolution * solution /** the @link CAE::SimSolution CAE::SimSolution@endlink  to be deleted */
            );
            /** Clone the solution
                      @return  the  newly created @link CAE::SimSolution CAE::SimSolution@endlink    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolution * CloneSolution
            (
                NXOpen::CAE::SimSolution * old_solution /** the @link CAE::SimSolution CAE::SimSolution@endlink  to be cloned */,
                const NXString & suggested_name /** name to use instead of default name (may be NULL)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a step and add to the solution
                      @return  step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  to be added  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * CreateSolutionStep
            (
                NXOpen::CAE::SimSolution * solution /** the solution to which the step will be added,
                                                                                                 if a null is passed the current active solution
                                                                                                 will be used */,
                int step_type /** index of the step type */,
                const NXString & name /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a BC builder for the load descriptor passed
                      @return  bc builder  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForLoadDescriptor
            (
                const NXString & bc_desc_name /** name of the load descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & bc_name /** name of the load to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a BC builder for the constraint descriptor passed
                      @return  bc builder  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForConstraintDescriptor
            (
                const NXString & bc_desc_name /** name of the constraint descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & bc_name /** name of the constraint to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a BC builder for the simulation object descriptor passed
                      @return  bc builder  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForSimulationObjectDescriptor
            (
                const NXString & bc_desc_name /** name of the simulation object descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & bc_name /** name of the simulation object to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a BC builder for the BC passed
                      @return  bc builder  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForBc
            (
                NXOpen::CAE::SimBC * bc /** bc object */
            );
            /** Adds the boundary condition to the step in the solution passed.
                        If solution is NULL then the boundary condition is added to the active solution
                        If step is NULL then the boundary condition is added to the active step
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddBc
            (
                NXOpen::CAE::SimBC * bc /** bc object */,
                NXOpen::CAE::SimSolution * solution /** solution */,
                NXOpen::CAE::SimSolutionStep * solution_step /** solution step */
            );


            private: NXOpen::CAE::SimLoadCollection *loads;
            /** Returns the load collection belonging to this sim part */
            public: NXOpen::CAE::SimLoadCollection *Loads()
            {
                return loads;
            }
            private: NXOpen::CAE::SimConstraintCollection *constraints;
            /** Returns the constraint collection belonging to this sim part */
            public: NXOpen::CAE::SimConstraintCollection *Constraints()
            {
                return constraints;
            }
            private: NXOpen::CAE::SimSimulationObjectCollection *simulationObjects;
            /** Returns the simulation object collection belonging to this sim part */
            public: NXOpen::CAE::SimSimulationObjectCollection *SimulationObjects()
            {
                return simulationObjects;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
