#ifndef NXOpen_FEATURES_HOLE_HXX_INCLUDED
#define NXOpen_FEATURES_HOLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_Hole.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_RPO.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class Hole;
    }
    class Expression;
    namespace Features
    {
        class RPO;
    }
    class ISurface;
    class PositioningDimension;
    namespace Features
    {
        class _HoleBuilder;
        /** Represents a Hole feature */
        class NXOPENCPPEXPORT Hole : public Features::RPO
        {
            /** Represents the subtype of the hole */
            public: enum Subtype
            {
                SubtypeSimple/** Simple hole */,
                SubtypeCounterbore/** Counterbore hole */,
                SubtypeCountersink/** Countersink hole */
            };

            private: friend class  _HoleBuilder;
            protected: Hole();
            /** 
                Returns the subtype of the hole.
                 @return  Subype of the hole, simple, counterbore, or countersink  <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::Hole::Subtype GetSubtype
            (
            );
            /** 
                Retrieves parameters of simple hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: void GetSimpleHole
            (
                NXOpen::Expression ** diameter /** Expression for diameter */,
                NXOpen::Expression ** depth /** Expression for depth */,
                NXOpen::Expression ** tip_angle /** Expression for tip angle  */
            );
            /** 
                Retrieves parameters of counterbore hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: void GetCounterboreHole
            (
                NXOpen::Expression ** diameter /** Expression for diameter */,
                NXOpen::Expression ** depth /** Expression for depth */,
                NXOpen::Expression ** tip_angle /** Expression for tip angle */,
                NXOpen::Expression ** cbore_diameter /** Expression for counterbore diameter */,
                NXOpen::Expression ** cbore_depth /** Expression for counterbore depth */
            );
            /** 
                Retrieves parameters of countersink hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: void GetCountersinkHole
            (
                NXOpen::Expression ** diameter /** Expression for diameter */,
                NXOpen::Expression ** depth /** Expression for depth */,
                NXOpen::Expression ** tip_angle /** Expression for tip angle */,
                NXOpen::Expression ** csink_diameter /** Expression for countersink diameter */,
                NXOpen::Expression ** csink_angle /** Expression for countersink angle */
            );
            /**Returns  
                the diameter of the hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Expression * Diameter
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Diameter() Diameter@endlink instead.
            @deprecated
            */
            public: NXOpen::Expression * GetDiameter
            (
            ) { return this->Diameter(); }
            /**Returns  
                the depth of the hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Expression * Depth
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Depth() Depth@endlink instead.
            @deprecated
            */
            public: NXOpen::Expression * GetDepth
            (
            ) { return this->Depth(); }
            /**Returns  
                the tip angle of the hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Expression * TipAngle
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link TipAngle() TipAngle@endlink instead.
            @deprecated
            */
            public: NXOpen::Expression * GetTipAngle
            (
            ) { return this->TipAngle(); }
            /**Returns  
                the counterbore diameter of the hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Expression * CounterboreDiameter
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link CounterboreDiameter() CounterboreDiameter@endlink instead.
            @deprecated
            */
            public: NXOpen::Expression * GetCounterboreDiameter
            (
            ) { return this->CounterboreDiameter(); }
            /**Returns  
                the counterbore depth of the hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Expression * CounterboreDepth
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link CounterboreDepth() CounterboreDepth@endlink instead.
            @deprecated
            */
            public: NXOpen::Expression * GetCounterboreDepth
            (
            ) { return this->CounterboreDepth(); }
            /**Returns  
                the countersink diameter of the hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Expression * CountersinkDiameter
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link CountersinkDiameter() CountersinkDiameter@endlink instead.
            @deprecated
            */
            public: NXOpen::Expression * GetCountersinkDiameter
            (
            ) { return this->CountersinkDiameter(); }
            /**Returns  
                the countersink angle of the hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Expression * CountersinkAngle
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link CountersinkAngle() CountersinkAngle@endlink instead.
            @deprecated
            */
            public: NXOpen::Expression * GetCountersinkAngle
            (
            ) { return this->CountersinkAngle(); }
            /**Returns  
                the placement face of the hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::ISurface * PlacementFace
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link PlacementFace() PlacementFace@endlink instead.
            @deprecated
            */
            public: NXOpen::ISurface * GetPlacementFace
            (
            ) { return this->PlacementFace(); }
            /**Returns  
                the thru face of the hole.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::ISurface * ThruFace
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ThruFace() ThruFace@endlink instead.
            @deprecated
            */
            public: NXOpen::ISurface * GetThruFace
            (
            ) { return this->ThruFace(); }
            /**
                Returns array of positioning dimensions attached to the hole
                 @return    <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: std::vector<NXOpen::PositioningDimension *> GetPositioningDimensions
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
