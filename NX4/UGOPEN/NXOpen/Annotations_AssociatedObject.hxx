#ifndef NXOpen_ANNOTATIONS_ASSOCIATEDOBJECT_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ASSOCIATEDOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_AssociatedObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class AssociatedObject;
    }
    class DisplayableObject;
    namespace Annotations
    {
    }
    namespace Annotations
    {
        /** Represents the objects to which the PMI applies. 
                Examples are size tolerance applied to a set of cylindrical faces, GD&T datum applied to
                a planar face etc...*/
        class NXOPENCPPEXPORT AssociatedObject : public TransientObject
        {
            public: explicit AssociatedObject(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~AssociatedObject();
            /** Returns the objects.  @return  List of objects  <br> License requirements : None */
            public: std::vector<NXOpen::DisplayableObject *> GetObjects
            (
            );
            /** Sets the objects. Following objects are allowed -
                        <br>  @link Point Point@endlink  <br> 
                        <br>  <ja_clas>Edge</ja_class> <br> 
                        <br>  @link Face Face@endlink  <br> 
                        <br>  @link Body Body@endlink  <br> 
                        <br>  @link Assemblies::Component Assemblies::Component@endlink  <br> 
                        <br>  @link Curve Curve@endlink  <br>   <br> License requirements : None */
            public: void SetObjects
            (
                const std::vector<NXOpen::DisplayableObject *> & objects /** List of new objects */
            );
            /** Returns the associated object index  @return  Unique integer assigned to the associated object  <br> License requirements : None */
            public: int GetObjectIndex
            (
                NXOpen::DisplayableObject * object /** Object for which index is to be returned */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
