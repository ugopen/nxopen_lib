#ifndef NXOpen_PDM_SESSIONSETTINGS_HXX_INCLUDED
#define NXOpen_PDM_SESSIONSETTINGS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_SessionSettings.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace PDM
    {
        class SessionSettings;
    }
    namespace PDM
    {
        /** Values for the settings that affect the current Teamcenter session. Any changes will only
                take effect when @link SessionSettings::Apply SessionSettings::Apply@endlink  is callsed. */
        class NXOPENCPPEXPORT SessionSettings : public TransientObject
        {
            public: explicit SessionSettings(void *ptr);
            /**Returns  a flag indicating if the user has Teamcenter administator privileges. Some
                        settings can are only available to administrators, and will raise errors
                        if non-administrators try to access them.
                     <br> License requirements : None */
            public: bool IsAdministrator
            (
            );
            /** Gets the names of the Teamcenter groups to which the
                        user belongs. 
                     @return  the names of the groups  <br> License requirements : None */
            public: std::vector<NXString> GetGroups
            (
            );
            /** Gets the names of the Teamcenter roles in which the
                        user may act, given the current group returned by @link SessionSettings::Group SessionSettings::Group@endlink .
                     @return  the names of the roles  <br> License requirements : None */
            public: std::vector<NXString> GetRoles
            (
            );
            /** Gets the names of the Teamcenter volumes which the
                        user may use, given the current group returned by @link SessionSettings::Group SessionSettings::Group@endlink .
                     @return  the names of the volumes  <br> License requirements : None */
            public: std::vector<NXString> GetVolumes
            (
            );
            /**Sets  the Teamcenter group in which the user acts. Should be
                        one of those given by @link SessionSettings::GetGroups SessionSettings::GetGroups@endlink 
                      <br> License requirements : None */
            public: void SetGroup
            (
                const NXString & group /** */
            );
            /**Returns  the Teamcenter group in which the user acts. Should be
                        one of those given by @link SessionSettings::GetGroups SessionSettings::GetGroups@endlink 
                      <br> License requirements : None */
            public: NXString Group
            (
            );
            /**Sets  the Teamcenter role in which the user acts. Should be
                        one of those given by @link SessionSettings::GetRoles SessionSettings::GetRoles@endlink 
                      <br> License requirements : None */
            public: void SetRole
            (
                const NXString & role /** */
            );
            /**Returns  the Teamcenter role in which the user acts. Should be
                        one of those given by @link SessionSettings::GetRoles SessionSettings::GetRoles@endlink 
                      <br> License requirements : None */
            public: NXString Role
            (
            );
            /**Sets  the Teamcenter role in which the user acts. Should be
                        one of those given by @link SessionSettings::GetVolumes SessionSettings::GetVolumes@endlink 
                      <br> License requirements : None */
            public: void SetVolume
            (
                const NXString & volume /** */
            );
            /**Returns  the Teamcenter role in which the user acts. Should be
                        one of those given by @link SessionSettings::GetVolumes SessionSettings::GetVolumes@endlink 
                      <br> License requirements : None */
            public: NXString Volume
            (
            );
            /**Sets  a flag controlling Teamcenter application logging  <br> License requirements : None */
            public: void SetApplicationLogging
            (
                bool app_logging_on /** */
            );
            /**Returns  a flag controlling Teamcenter application logging  <br> License requirements : None */
            public: bool ApplicationLogging
            (
            );
            /**Sets  a flag controlling Teamcenter journaling  <br> License requirements : None */
            public: void SetJournaling
            (
                bool journaling_on /** */
            );
            /**Returns  a flag controlling Teamcenter journaling  <br> License requirements : None */
            public: bool Journaling
            (
            );
            /**Sets  a flag controlling Teamcenter administration logging. Only available to administrators.  <br> License requirements : None */
            public: void SetAdministrationLogging
            (
                bool admin_logging_on /** */
            );
            /**Returns  a flag controlling Teamcenter administration logging. Only available to administrators.  <br> License requirements : None */
            public: bool AdministrationLogging
            (
            );
            /**Sets  a flag controlling Teamcenter security logging. Only available to administrators.  <br> License requirements : None */
            public: void SetSecurityLogging
            (
                bool security_logging_on /** */
            );
            /**Returns  a flag controlling Teamcenter security logging. Only available to administrators.  <br> License requirements : None */
            public: bool SecurityLogging
            (
            );
            /**Sets  a flag controlling the Teamcenter administrator's bypass option. Only available to administrators.  <br> License requirements : None */
            public: void SetAdministrationBypass
            (
                bool admin_bypass_on /** */
            );
            /**Returns  a flag controlling the Teamcenter administrator's bypass option. Only available to administrators.  <br> License requirements : None */
            public: bool AdministrationBypass
            (
            );
            /** Applies any changes to the settings  <br> License requirements : None */
            public: void Apply
            (
            );
            /** Free resources associated with the instance. After this method
                        is called, it is illegal to use the object.  In .NET, this method
                        is automatically called when the object is deleted by the garbage
                        collector.  <br> License requirements : None */
            public: virtual ~SessionSettings();
        };
    }
}
#undef EXPORTLIBRARY
#endif
