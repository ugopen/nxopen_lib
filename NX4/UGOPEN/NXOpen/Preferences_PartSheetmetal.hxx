#ifndef NXOpen_PREFERENCES_PARTSHEETMETAL_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTSHEETMETAL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartSheetmetal.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/SheetmetalFeatureProperty.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class PartSheetmetal;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    class Expression;
    namespace Preferences
    {
        /** Represents the NX Sheetmetal preferences applicable to part  <br> Preferences are in control of the part. They can not be created but can only be changed. <br> */
        class NXOPENCPPEXPORT PartSheetmetal
        {
            private: NXOpen::Preferences::PartPreferences* m_owner;
            public: explicit PartSheetmetal(NXOpen::Preferences::PartPreferences *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /** RETURNS the thickness expression  @return  expression object for sheet thickness  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetThickness
            (
            );
            /** THE thickness value string  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetThickness
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & thickness /** default thickness value for NX Sheetmetal solids   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the bend radius expression  @return  expression object for radius of bend faces <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetBendRadius
            (
            );
            /** The bend radius value  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetBendRadius
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & bend_radius /** default bend radius value for bend faces   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the bend relief depth  @return  expression object for depth of bend relief  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetBendReliefDepth
            (
            );
            /** THE bend relief depth value  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetBendReliefDepth
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & bend_relief_depth /** default depth value for bend relief   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the bend relief width  @return  expression object for width of bend relief  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetBendReliefWidth
            (
            );
            /** THE bend relief depth value  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetBendReliefWidth
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & bend_relief_width /** default width value for bend relief   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the neutral factor  @return  expression object for neutral factor of bend areas  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetNeutralFactor
            (
            );
            /** THE bend relief depth value  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetNeutralFactor
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & neutral_factor /** default neutral factor value for bend relief   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the out corner treatment value for Flat as Solid operations  @return  expression object for out corner treatment value  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetOuterCornerTreatmentValue
            (
            );
            /** THE outer corner treatment value for Flat as Solid operations  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetOuterCornerTreatmentValue
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & outer_corner_treatment /** default value for out corner treatment   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the outer corner treatment type in Flat as Solid operation  @return  outer corner treatment type  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Features::SheetMetal::FeatureProperty GetOuterCornerTreatmentType
            (
            );
            /** SETS the outer corner treatment type in Flat as Solid operation  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetOuterCornerTreatmentType
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                NXOpen::Features::SheetMetal::FeatureProperty outer_corner_treatment_type /** outer corner treatment type */
            );
            /** RETURNS the inner corner treatment value for Flat as Solid operations  @return  expression object for inner corner treatment value  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetInnerCornerTreatmentValue
            (
            );
            /** SETS the inner corner treatment value for Flat as Solid operations  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetInnerCornerTreatmentValue
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & inner_corner_treatment /** default value for inner corner treatment   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the inner corner treatment type in Flat as Solid operation  @return  outer corner treatment type  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Features::SheetMetal::FeatureProperty GetInnerCornerTreatmentType
            (
            );
            /** SETS the inner corner treatment type in Flat as Solid operation  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetInnerCornerTreatmentType
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                NXOpen::Features::SheetMetal::FeatureProperty inner_corner_treatment_type /** outer corner treatment type */
            );
            /** RETURNS the flag indicating whether B-Splines are simplified as part of the Flat Solid creation @return  flag   <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: bool GetIsBsplineSimplifiedInFlatSolid
            (
            );
            /** SETS the flag indicating whether or not B-Splines are simplified as part of the Flat Solid creation <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetIsBsplineSimplifiedInFlatSolid
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                bool is_bspline_simplified_in_flat_solid /** flag  */
            );
            /** RETURNS the flag indicating whether or not system generated bend releifs are removed as part of the Flat Solid creation @return  flag   <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: bool GetIsSystemGeneratedBendReliefRemovedInFlatSolid
            (
            );
            /** SETS the flag indicating whether or not system generated bend releifs are removed as part of the Flat Solid creation <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetIsSystemGeneratedBendReliefRemovedInFlatSolid
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                bool is_system_generated_bend_relief_removed /** flag  */
            );
            /** RETURNS the minimum arc tolerance during Flat Solid simplification  @return  flag   <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: double GetMinimumArcToleranceInFlatSolid
            (
            );
            /** SETS the minimum arc tolerance during Flat Solid simplification  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetMinimumArcToleranceInFlatSolid
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                double minimum_arc_tolerance_in_flat_solid /** flag  */
            );
            /** RETURNS the deviational tolerance during Flat Solid simplification  @return  flag   <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: double GetDeviationalToleranceInFlatSolid
            (
            );
            /** SETS the deviational tolerance during Flat Solid simplification  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetDeviationalToleranceInFlatSolid
            (
                bool update_model /** Specifies whether the solid model be recomputed immediately*/,
                double deviational_tolerance_in_flat_solid /** flag  */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
