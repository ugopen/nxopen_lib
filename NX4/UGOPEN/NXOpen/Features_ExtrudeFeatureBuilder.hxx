#ifndef NXOpen_FEATURES_EXTRUDEFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_EXTRUDEFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ExtrudeFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ExtrudeLimitData.hxx>
#include <NXOpen/Features_ExtrudeOffsetData.hxx>
#include <NXOpen/Features_ExtrudeTaperData.hxx>
#include <NXOpen/Features_Feature.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ExtrudeFeatureBuilder;
    }
    class Body;
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    class NXObject;
    class Section;
    namespace Features
    {
        class _ExtrudeFeatureBuilderBuilder;
        /** Represents a extrude feature builder. It creates or edits extrude feature.
             <br> 
            This class provides methods to set various extrude parameters.
             <br> 
             <br>  
            Following are default values and options.
             <br>  

             <br> 
            <b> Section </b> User must set it
             <br> 
             <br> 
            <b> Direction </b>  Sections default direction 
             <br> 
             <br> 
            <b> Limit Type </b>  
             <br> 
             <br>  
            <b> Start Limit Distance </b> 0.0/0.0   [in/mm] 
             <br> 
             <br> 
            <b> End Limit Distance </b>  1.0/25.0  [in/mm] 
             <br> 
             <br> 
            <b> Taper Type </b> @link  ExtrudeTaperData::TaperTypeNone   ExtrudeTaperData::TaperTypeNone @endlink 
             <br> 
             <br>  
            <b> Offset Type </b>  @link  ExtrudeOffsetData::OffsetTypeNone   ExtrudeOffsetData::OffsetTypeNone @endlink  
             <br> 
             <br> 
            <b> Boolean Sign </b>  @link  Feature::BooleanTypeCreate   Feature::BooleanTypeCreate @endlink  
             <br> 
             <br>  
            <b> Boolean Target </b>  NULL 
             <br> 
          <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateExtrudeFeatureBuilder Features::FeatureCollection::CreateExtrudeFeatureBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ExtrudeFeatureBuilder : public Features::FeatureBuilder
        {
            private: friend class  _ExtrudeFeatureBuilderBuilder;
            protected: ExtrudeFeatureBuilder();
            /** Sets the section
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSection
            (
                NXOpen::Section * section /** Section to be extruded */
            );
            /** Sets extrude direction
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDirection
            (
                NXOpen::Direction * direction /** Extrude direction */
            );
            /** Sets various tolerance values.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToleranceValues
            (
                double distance_tolerance /** */,
                double chaining_tolerance /** */,
                double planar_tolerance /** */,
                double angle_tolerance /** */
            );
            /** Sets a flag indicating extrude has symmetric distance. 
                    If this method is called then limit type is @link ExtrudeLimitData::LimitTypeDistance ExtrudeLimitData::LimitTypeDistance@endlink  only.
                    Set symmetric distance by either start or end limit.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSymmetricLimit
            (
            );
            /** Unsets symmetric limit. Both limits will be used and the limit can be of any type.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UnsetSymmetricLimit
            (
            );
            /** Sets start limit based on 
                    @link ExtrudeLimitData::LimitTypeDistance ExtrudeLimitData::LimitTypeDistance@endlink .
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartLimit
            (
                const NXString & distance_expression /** Extrude start limit  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets start limit based on
                   @link ExtrudeLimitData::LimitTypeUntilNext ExtrudeLimitData::LimitTypeUntilNext@endlink ,
                   @link ExtrudeLimitData::LimitTypeUntilSelectedExtendFace ExtrudeLimitData::LimitTypeUntilSelectedExtendFace@endlink ,
                   @link ExtrudeLimitData::LimitTypeUntilSelected ExtrudeLimitData::LimitTypeUntilSelected@endlink  and
                   @link ExtrudeLimitData::LimitTypeThroughAll ExtrudeLimitData::LimitTypeThroughAll@endlink .  
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartLimit
            (
                NXOpen::Features::ExtrudeLimitData::LimitType limit_type /** Extrude start limit type */,
                NXOpen::NXObject * selected_object /** For @link ExtrudeLimitData::LimitTypeUntilNext ExtrudeLimitData::LimitTypeUntilNext@endlink ,
                                                                          it should be solid body.
                                                                          For @link ExtrudeLimitData::LimitTypeThroughAll ExtrudeLimitData::LimitTypeThroughAll@endlink  
                                                                          it can be solid body or Nothing (null).
                                                                          For @link ExtrudeLimitData::LimitTypeUntilSelected ExtrudeLimitData::LimitTypeUntilSelected@endlink 
                                                                          it can be face, solid body,sheet body and datums.
                                                                          For @link ExtrudeLimitData::LimitTypeUntilSelectedExtendFace ExtrudeLimitData::LimitTypeUntilSelectedExtendFace@endlink 
                                                                          it can be face and datums.
                                                                        */
            );
            /** Sets end limit based on 
                    @link ExtrudeLimitData::LimitTypeDistance ExtrudeLimitData::LimitTypeDistance@endlink .
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndLimit
            (
                const NXString & distance_expression /** Extrude end limit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets end limit based on
                   @link ExtrudeLimitData::LimitTypeUntilNext ExtrudeLimitData::LimitTypeUntilNext@endlink ,
                   @link ExtrudeLimitData::LimitTypeUntilSelectedExtendFace ExtrudeLimitData::LimitTypeUntilSelectedExtendFace@endlink ,
                   @link ExtrudeLimitData::LimitTypeUntilSelected ExtrudeLimitData::LimitTypeUntilSelected@endlink  and
                   @link ExtrudeLimitData::LimitTypeThroughAll ExtrudeLimitData::LimitTypeThroughAll@endlink . 
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndLimit
            (
                NXOpen::Features::ExtrudeLimitData::LimitType limit_type /** Extrude end limit type */,
                NXOpen::NXObject * selected_object /** For @link ExtrudeLimitData::LimitTypeUntilNext ExtrudeLimitData::LimitTypeUntilNext@endlink ,
                                                                          it should be solid body.
                                                                          For @link ExtrudeLimitData::LimitTypeThroughAll ExtrudeLimitData::LimitTypeThroughAll@endlink  
                                                                          it can be solid body or Nothing (null).
                                                                          For @link ExtrudeLimitData::LimitTypeUntilSelected ExtrudeLimitData::LimitTypeUntilSelected@endlink 
                                                                          it can be face, solid body,sheet body and datums.
                                                                          For @link ExtrudeLimitData::LimitTypeUntilSelectedExtendFace ExtrudeLimitData::LimitTypeUntilSelectedExtendFace@endlink 
                                                                          it can be face and datums.
                                                                           */
            );
            /** Sets type of offset
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOffsetType
            (
                NXOpen::Features::ExtrudeOffsetData::OffsetType offset_type /** Extrude offset type */
            );
            /** Sets start offset data
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartOffset
            (
                const NXString & offset_expression /** Extrude start offset   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets end offset data
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndOffset
            (
                const NXString & offset_expression /** Extrude end offset   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the taper type
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTaperType
            (
                NXOpen::Features::ExtrudeTaperData::TaperType taper_type /** Extrude taper type*/
            );
            /** Sets the taper angle
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTaperAngle
            (
                const NXString & angle_expression /** Extrude taper angle   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the boolean operation for creating the extrude and the boolean operation target body  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBooleanOperationAndTarget
            (
                NXOpen::Features::Feature::BooleanType boolean_operation /** Type of boolean operation. */,
                NXOpen::Body * target_body /** Target body for boolean operation. Set to null (Nothing) for a boolean create operation.  */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
