#ifndef NXOpen_FEATURES_FEATURE_HXX_INCLUDED
#define NXOpen_FEATURES_FEATURE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_Feature.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/IFitTo.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/IProfile.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class Feature;
    }
    class BasePart;
    class Expression;
    class IFitTo;
    class INXObject;
    class IProfile;
    class NXObject;
    namespace Features
    {
        class _FeatureBuilder;
        /** Represents a feature on a part  <br> This is an abstract class, and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT Feature : public NXObject, public virtual IProfile, public virtual IFitTo
        {
            /** Boolean operation type. */
            public: enum BooleanType
            {
                BooleanTypeCreate/** Create */,
                BooleanTypeUnite/** Unite */,
                BooleanTypeSubtract/** Subtract */,
                BooleanTypeIntersect/** Intersect */
            };

            private: friend class  _FeatureBuilder;
            protected: Feature();
            /** Returns the expressions created by the feature  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Expression *> GetExpressions
            (
            );
            /** Returns the immediate parent features  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> GetParents
            (
            );
            /** Returns the immediate child features  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> GetChildren
            (
            );
            /**Returns  the algorithm version of the feature  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AlgorithmVersion
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AlgorithmVersion() AlgorithmVersion@endlink instead.
            @deprecated
            */
            public: int GetAlgorithmVersion
            (
            ) { return this->AlgorithmVersion(); }
            /**Returns  the location of the feature  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Point3d Location
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Location() Location@endlink instead.
            @deprecated
            */
            public: NXOpen::Point3d GetLocation
            (
            ) { return this->Location(); }
            /**Returns  the timestamp of the feature  <br> License requirements : None */
            public: int Timestamp
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Timestamp() Timestamp@endlink instead.
            @deprecated
            */
            public: int GetTimestamp
            (
            ) { return this->Timestamp(); }
            /**Returns  the feature type  <br> License requirements : None */
            public: NXString FeatureType
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link FeatureType() FeatureType@endlink instead.
            @deprecated
            */
            public: NXString GetFeatureType
            (
            ) { return this->FeatureType(); }
            /** Highlight the body created by the feature  <br> License requirements : None */
            public: void Highlight
            (
            );
            /** Unhighlight the body created by the feature  <br> License requirements : None */
            public: void Unhighlight
            (
            );
            /** Make current feature  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void MakeCurrentFeature
            (
            );
            /** Show the body created by the feature  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ShowBody
            (
                bool move_curves /** */
            );
            /** Show the body created by the parent feature  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ShowParents
            (
                bool move_curves /** */
            );
            /** Hide the body created by the feature  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void HideBody
            (
            );
            /** Hide the body created by the parent feature  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void HideParents
            (
            );
            /** Suppress the feature  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void Suppress
            (
            );
            /** Unsuppress the feature  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void Unsuppress
            (
            );
            /**Returns  the suppression status of the feature  <br> License requirements : None */
            public: bool Suppressed
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Suppressed() Suppressed@endlink instead.
            @deprecated
            */
            public: bool GetSuppressed
            (
            ) { return this->Suppressed(); }
            /** Returns the entities created by the feature  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::NXObject *> GetEntities
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
