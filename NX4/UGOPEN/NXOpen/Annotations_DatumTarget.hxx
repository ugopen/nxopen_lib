#ifndef NXOpen_ANNOTATIONS_DATUMTARGET_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DATUMTARGET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DatumTarget.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Annotations_IDatumTarget.hxx>
#include <NXOpen/Annotations_IPmi.hxx>
#include <NXOpen/Annotations_AssociatedObject.hxx>
#include <NXOpen/Annotations_Gdt.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class DatumTarget;
    }
    namespace Annotations
    {
        class AssociatedObject;
    }
    namespace Annotations
    {
        class BusinessModifier;
    }
    namespace Annotations
    {
        class Gdt;
    }
    namespace Annotations
    {
        class IDatumTarget;
    }
    namespace Annotations
    {
        class IPmi;
    }
    class BasePart;
    class INXObject;
    class NXObject;
    namespace Annotations
    {
        class _DatumTargetBuilder;
        /** Represents a datum target */
        class NXOPENCPPEXPORT DatumTarget : public Annotations::Gdt, public virtual Annotations::IDatumTarget, public virtual Annotations::IPmi
        {
            private: friend class  _DatumTargetBuilder;
            protected: DatumTarget();
            /**Returns  the datum target label  <br> License requirements : None */
            public: virtual NXString DatumLabel
            (
            );
            /**Sets  the datum target label  <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetDatumLabel
            (
                const NXString & datum_label /** New datum label */
            );
            /**Returns  the datum target index  <br> License requirements : None */
            public: virtual int TargetIndex
            (
            );
            /**Sets  the datum target index  <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetTargetIndex
            (
                int index /** New datum target index */
            );
            /** Returns the business modifiers  @return  List of business modifiers  <br> License requirements : None */
            public: virtual std::vector<NXOpen::Annotations::BusinessModifier *> GetBusinessModifiers
            (
            );
            /** Sets the business modifiers  <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetBusinessModifiers
            (
                const std::vector<NXOpen::Annotations::BusinessModifier *> & business_modifiers /** List of new business modifiers */
            );
            /** Returns the associated object  @return  Associated object  <br> License requirements : None */
            public: virtual NXOpen::Annotations::AssociatedObject * GetAssociatedObject
            (
            );
            /** Sets the associated object  <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetAssociatedObject
            (
                NXOpen::Annotations::AssociatedObject * assoc_obj /** New associated object */
            );
            /**Returns  the index. It is a unique integer assigned to a PMI object.  <br> License requirements : None */
            public: virtual int Index
            (
            );
            /**Sets  the index. It is a unique integer assigned to a PMI object.  <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetIndex
            (
                int index /** New integer for PMI object */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
