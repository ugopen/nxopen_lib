#ifndef NXOpen_FEATURES_SKETCHONPATHBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SKETCHONPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SketchOnPathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class SketchOnPathBuilder;
    }
    class DatumAxis;
    class DatumPlane;
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class IReferenceAxis;
    class Point;
    class Section;
    namespace Features
    {
        class _SketchOnPathBuilderBuilder;
        /** Represents a sketch on path feature builder. 
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateSketchOnPathBuilder Features::FeatureCollection::CreateSketchOnPathBuilder@endlink  <br> */
        class NXOPENCPPEXPORT SketchOnPathBuilder : public Features::FeatureBuilder
        {
            /** Specifies the type of orientation for the sketch plane */
            public: enum OrientationType
            {
                OrientationTypeNormalToPath/** Sketch plane will be normal to the path */,
                OrientationTypeNormalToAxis/** Sketch plane will be normal to specified axis */,
                OrientationTypeParallelToAxis/** Sketch plane will be parallel to specified axis */,
                OrientationTypeThroughAxis/** Sketch plane will pass through specified axis */
            };

            private: friend class  _SketchOnPathBuilderBuilder;
            protected: SketchOnPathBuilder();
            /**Sets  the path
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetPath
            (
                NXOpen::Section * section /** */
            );
            /**Returns  the path
                 <br> License requirements : None */
            public: NXOpen::Section * Path
            (
            );
            /**Sets  the axis for orientation types other than @link SketchOnPathBuilder::OrientationTypeNormalToPath SketchOnPathBuilder::OrientationTypeNormalToPath@endlink 
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetAxis
            (
                NXOpen::Direction * axis /** */
            );
            /**Returns  the axis for orientation types other than @link SketchOnPathBuilder::OrientationTypeNormalToPath SketchOnPathBuilder::OrientationTypeNormalToPath@endlink 
                 <br> License requirements : None */
            public: NXOpen::Direction * Axis
            (
            );
            /**Sets  the orientation type of the sketch plane that describes how to interpret the axis
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetPlaneOrientation
            (
                NXOpen::Features::SketchOnPathBuilder::OrientationType type /** Indicates orientation type */
            );
            /**Returns  the orientation type of the sketch plane that describes how to interpret the axis
                 <br> License requirements : None */
            public: NXOpen::Features::SketchOnPathBuilder::OrientationType PlaneOrientation
            (
            );
            /**Sets  the thru point, an optional parameter that can be used with any orientation type, NULL if not defined
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetThruPoint
            (
                NXOpen::Point * thru_point /** */
            );
            /**Returns  the thru point, an optional parameter that can be used with any orientation type, NULL if not defined
                 <br> License requirements : None */
            public: NXOpen::Point * ThruPoint
            (
            );
            /** Sets the location on the path in either arc length or percent arc length
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetValue
            (
                const NXString & value_expression /** The arc length or percent arc length along the path   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the location on the path in either arc length or percent arc length
                 <br> License requirements : None */
            public: NXOpen::Expression * Value
            (
            );
            /**Sets  the type of value, either arc length or percent arc length
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetValueType
            (
                NXOpen::CurveParameterType value_type /** Indicates whether the value is arc length or percent arc length */
            );
            /**Returns  the type of value, either arc length or percent arc length
                 <br> License requirements : None */
            public: NXOpen::CurveParameterType ValueType
            (
            );
            /** Sets the name of the sketch on path
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSketchOnPathName
            (
                const NXString & name /** The name of the sketch on path   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Flip the sketch plane normal
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void FlipPlaneNormal
            (
            );
            /** Flip the sketch reference direction (X-axis)
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void FlipHorizontalReference
            (
            );
            /**Returns  the sketch on path plane tag
                 <br> License requirements : None */
            public: NXOpen::DatumPlane * Plane
            (
            );
            /** The horizontal reference direction vector. Needed if horizontal reference is explicitly set to NULL_TAG
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetReferenceDirection
            (
                const NXOpen::Vector3d & vector /** The direction of horizontal reference */
            );
            /**Returns  the primary tangent axis of sketch on path
                 <br> License requirements : None */
            public: NXOpen::DatumAxis * PrimaryTangentAxis
            (
            );
            /**Returns  the primary normal axis of sketch on path
                 <br> License requirements : None */
            public: NXOpen::DatumAxis * PrimaryNormalAxis
            (
            );
            /**Returns  the secondary tangent axis of sketch on path
                 <br> License requirements : None */
            public: NXOpen::DatumAxis * SecondaryTangentAxis
            (
            );
            /**Returns  the secondary normal axis of sketch on path
                 <br> License requirements : None */
            public: NXOpen::DatumAxis * SecondaryNormalAxis
            (
            );
            /** The sketch horizontal reference (X-axis)
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetHorizontalReference
            (
                NXOpen::IReferenceAxis * horizontal_reference /** The sketch horizontal reference (X-axis) */
            );
            /**Returns  the sketch horizontal reference (X-axis)
                 <br> License requirements : None */
            public: NXOpen::IReferenceAxis * HorizontalReference
            (
            );
            /**Returns  the point on path - the principle intersection point between the sketch plane and the path. Corresponds to the origin
                 <br> License requirements : None */
            public: NXOpen::Point * PointOnPath
            (
            );
            /**Returns  the number of possible valid plane configurations if the thru point is set
                 <br> License requirements : None */
            public: int ValueCount
            (
            );
            /**Sets  the index to the desired solution value in the range [1,value_count], applicable only when the thru point is set
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetValueIndex
            (
                int index_of_solution /** index to the possible solution, valid only when get_value_count > 0 and must be between [1,get_value_count] */
            );
            /**Returns  the index to the desired solution value in the range [1,value_count], applicable only when the thru point is set
                 <br> License requirements : None */
            public: int ValueIndex
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
