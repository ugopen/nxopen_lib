#ifndef NXOpen_POINTCOLLECTION_HXX_INCLUDED
#define NXOpen_POINTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PointCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class PointCollection;
    class BasePart;
    class Point;
    class Arc;
    class DatumPlane;
    class IBaseCurve;
    class IParameterizedSurface;
    class Offset;
    class Scalar;
    class Xform;
    /**
     Represents a collection of smart @link Point Point@endlink .
     <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
    class NXOPENCPPEXPORT PointCollection : public TaggedObjectCollection
    {
        /**
            Describes whether the input Scalar to the 
            @link  PointCollection::CreatePoint   PointCollection::CreatePoint @endlink  
            method is either an absolute distance or a relative percentage.
            */
        public: enum AlongCurveOption
        {
            AlongCurveOptionDistance/** Scalar is an absolute distance. */,
            AlongCurveOptionPercent/** Scalar is a relative percentage. */
        };

        private: NXOpen::BasePart* m_owner;
        public: explicit PointCollection(NXOpen::BasePart *owner): m_owner(owner)
        {
        }
        public: tag_t Tag() const;
        class iterator
        {
        public:
            typedef Point * value_type;
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }
            explicit iterator(NXOpen::PointCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }
            iterator(const iterator &other)
            {
                copy(other);
            }
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            NXOPENCPPEXPORT  value_type operator * ();
            iterator & operator ++()
            {
                next();
                return *this;
            }
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::PointCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        iterator begin();
        iterator end()
        {
            return iterator(this);
        }
        /** 
        	Creates a @link Point Point@endlink  without parameters.
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            const NXOpen::Point3d & coordinates /**  Coordinates of a Point */
        );
        /** 
        	Creates a @link Point Point@endlink  using a @link Point Point@endlink  and an @link Offset Offset@endlink .
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::Offset * offset /** */,
            NXOpen::Point * offset_point /** Offsetting from this Point */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /**
        	Creates a @link Point Point@endlink  on a Surface or @link Face Face@endlink  via U-V @link Scalar Scalar@endlink  for the surface.
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IParameterizedSurface * face /** */,
            NXOpen::Scalar * scalar_u /**  U parameter */,
            NXOpen::Scalar * scalar_v /**  V parameter */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /**
        	Creates a @link Point Point@endlink  on a @link Curve Curve@endlink  or @link Edge Edge@endlink  and @link Scalar Scalar@endlink  representing the T parameter.
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * edge_curve /** Edge or Curve */,
            NXOpen::Scalar * scalar_t /**  T parameter */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** 
        	Creates a @link Point Point@endlink  along a @link Curve Curve@endlink  or @link Edge Edge@endlink  using a @link Point Point@endlink , and a @link Scalar Scalar@endlink  representing
        	the T parameter along the @link Curve Curve@endlink .  This @link Point Point@endlink  is derived by finding the
        	closest @link Point Point@endlink  on the given curve to the given @link Point Point@endlink  and then offsetting this Point
        	along the given @link Curve Curve@endlink  by the arc length defined by T via absolute
        	distance or relative percent.
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * edge_curve /** Edge or Curve */,
            NXOpen::Point * point_offset /** Offset from this Point */,
            NXOpen::Scalar * distance_percent /**  Distance or Percentage */,
            NXOpen::PointCollection::AlongCurveOption option /**  Specify whether the input Scalar is distance/percentage */,
            NXOpen::Sense sense /**  forward/reverse along the Edge or Curve */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /**
        	Creates a @link Point Point@endlink  via three @link Scalar Scalar@endlink .
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::Scalar * scalar_x /** X location */,
            NXOpen::Scalar * scalar_y /** Y location */,
            NXOpen::Scalar * scalar_z /** Z location */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /**
        	Creates a @link Point Point@endlink  via an existing @link Point Point@endlink  using an optional @link Xform Xform@endlink .
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::Point * point_extract /** Point to be extracted */,
            NXOpen::Xform * xform /**  optional Xform */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** 
        	Creates a @link Point Point@endlink  at an angle along an @link Arc Arc@endlink .
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::Arc * arc /** */,
            NXOpen::Scalar * angle /** angle in radians */,
            NXOpen::Xform * xform /** optional Xform */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /**
        	Creates a @link Point Point@endlink  via the center of an @link Edge Edge@endlink  or 
        	@link Curve Curve@endlink .
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * edge_curve /** */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /**
        	Creates a @link Point Point@endlink  at the intersection of two Edges or Curves.
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * curve1 /**  First Edge or Curve in intersection */,
            NXOpen::IBaseCurve * curve2 /** Second Edge or Curve in intersection */,
            NXOpen::Point * help_pt1 /**  Optional help Point for curve 1 */,
            NXOpen::Point * help_pt2 /** Optional help Point for curve 2 */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /**
        	Creates a @link Point Point@endlink  at the intersection of a @link Face Face@endlink 
        	and @link Edge Edge@endlink  or @link Curve Curve@endlink .
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IParameterizedSurface * face /** */,
            NXOpen::IBaseCurve * curve /**  Curve in intersection */,
            NXOpen::Point * help_pt1 /**  Optional help Point for face */,
            NXOpen::Point * help_pt2 /**  Optional help Point for curve */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /**
        	Creates a @link Point Point@endlink  at the intersection of a @link DatumPlane DatumPlane@endlink 
        	and @link Edge Edge@endlink  or @link Curve Curve@endlink .
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::DatumPlane * plane /** */,
            NXOpen::IBaseCurve * curve /**  Curve in intersection */,
            NXOpen::Point * help_pt1 /**  Optional help Point for face */,
            NXOpen::Point * help_pt2 /**  Optional help Point for curve */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /**
        	Creates a @link Point Point@endlink  at the center of a spherical face.
        	 @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IParameterizedSurface * spherical_face /** */,
            NXOpen::SmartObject::UpdateOption update_option /** */
        );
        /** Finds the @link  Point   Point @endlink  with the given identifier as recorded in a journal. 
        		An object may not return the same value as its JournalIdentifier in different versions of 
        		the software. However newer versions of the software should find the same object when 
        		FindObject is passed older versions of its journal identifier. In general, this method 
        		should not be used in handwritten code and exists to support record and playback of journals.

        		An exception will be thrown if no object can be found with the given journal identifier.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Point * FindObject
        (
            const NXString & journal_identifier /** Identifier of the Point you want   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
