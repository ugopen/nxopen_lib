#ifndef NXOpen_FEATURES_EDGEBLENDBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_EDGEBLENDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_EdgeBlendBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class EdgeBlendBuilder;
    }
    class Edge;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    class ScCollector;
    namespace Features
    {
        class _EdgeBlendBuilderBuilder;
        /** Represents a Edge Blend builder. 
            */
        class NXOPENCPPEXPORT EdgeBlendBuilder : public Features::FeatureBuilder
        {
            /** This enum represents the Overlap resolution options for Edge Blend */
            public: enum Overlap
            {
                OverlapMaintainAndIntersect/** Maintain Blend and Intersect */,
                OverlapDifferentConvexityRollOver/** If different convexity,roll over */,
                OverlapAnyConvexityRollOver/** Any convexity,roll over */
            };

            /** This enum represents the order of Blending */
            public: enum OrderOfBlending
            {
                OrderOfBlendingConvexFirst/** Convex first */,
                OrderOfBlendingConcaveFirst/** Concave first */
            };

            /** This enum represents the Setback option  */
            public: enum Setback
            {
                SetbackIncludeWithCorner/** Include with corner*/,
                SetbackSeparateFromCorner/** Separate from corner */
            };

            private: friend class  _EdgeBlendBuilderBuilder;
            protected: EdgeBlendBuilder();
            /**Returns  the tolerance of a variable blend
                 <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance of a variable blend
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** */
            );
            /**Returns  the blend all instances option 
                 <br> License requirements : None */
            public: bool AllInstancesOption
            (
            );
            /**Sets  the blend all instances option 
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAllInstancesOption
            (
                bool optionvalue /** */
            );
            /**Returns  the Remove self-intersection option
                 <br> License requirements : None */
            public: bool RemoveSelfIntersection
            (
            );
            /**Sets  the Remove self-intersection option
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRemoveSelfIntersection
            (
                bool optionvalue /** */
            );
            /**Returns  the Roll over smooth edges option
                 <br> License requirements : None */
            public: bool RollOverSmoothEdge
            (
            );
            /**Sets  the Roll over smooth edges option
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRollOverSmoothEdge
            (
                bool optionvalue /** */
            );
            /**Returns  the Roll onto edges option
                 <br> License requirements : None */
            public: bool RollOntoEdge
            (
            );
            /**Sets  the Roll onto edges option
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRollOntoEdge
            (
                bool optionvalue /** */
            );
            /**Returns  the Maintain blend and move sharp edges option
                 <br> License requirements : None */
            public: bool MoveSharpEdge
            (
            );
            /**Sets  the Maintain blend and move sharp edges option
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMoveSharpEdge
            (
                bool optionvalue /** */
            );
            /**Returns  the Special blend at convex / concave Y option
                 <br> License requirements : None */
            public: bool ConvexConcaveY
            (
            );
            /**Sets  the Special blend at convex / concave Y option
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetConvexConcaveY
            (
                bool optionvalue /** */
            );
            /** Add an edge blend chainset to the edge blend  @return  Index of chainset, indicating which chainset we are dealing with  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddChainset
            (
                NXOpen::ScCollector * collector /**The collector for this edge blend chainset */,
                const NXString & radius /** The radius of this chain set collector  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get the index of edge blend chainset given the collector @return  Index of chainset, indicating which chainset we are dealing with  <br> License requirements : None */
            public: int GetChainsetIndex
            (
                NXOpen::ScCollector * collector /**The collector for this edge blend chainset */
            );
            /** Get collector and radius for an edge blend chainset given the index of the chainset  <br> License requirements : None */
            public: void GetChainset
            (
                int cs_index /** Index of chainset, indicating which chainset we are dealing with */,
                NXOpen::ScCollector ** collector /**The collector for this edge blend chainset */,
                NXOpen::Expression ** radius /**  The radius of this chain set collector */
            );
            /** Delete an edge blend chainset from the edge blend.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveChainset
            (
                int cs_index /** Index of chainset, indicating which chainset we are dealing with */
            );
            /** Delete an edge blend chainset from the edge blend.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveChainset
            (
                NXOpen::ScCollector * collector /**The collector for this edge blend chainset */
            );
            /** Add an edge blend setback data for an edge in the edge blend  @return  Index of where setback data item is created.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddSetbackData
            (
                const std::vector<NXOpen::Edge *> & edge_array /** Array of Edge collector tags that are used by the setback */,
                const std::vector<bool> & from_start /** if true, then the setback is defined at the start 
                                           vertex.  Otherwise, it is defined at the end vertex. 
                                           There is one for each input edge. */,
                std::vector<NXString> & distance /**  Array of distances   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Remove an edge blend setback data for an edge in the edge blend  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveSetbackData
            (
                int sb_index /** Index of where setback data item was created*/
            );
            /** Get an edge blend stop short data for the index provided   @return   The distance for the stopshort on the edge.  <br> License requirements : None */
            public: NXOpen::Expression * GetStopshortData
            (
                int ss_index /** Index of where stop short data item is created. */,
                NXOpen::Edge ** edge /** Edge the stop short data is on. */,
                bool* from_start /** if true, then the stopshort is defined at the start 
                                                     vertex.  Otherwise, it is defined at the end vertex. */
            );
            /** Add an edge blend stop short data for an edge in the edge blend   @return  Index of where stop short data item is created.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddStopshortData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                bool from_start /** if true, then the stopshort is defined at the start 
                                                     vertex.  Otherwise, it is defined at the end vertex. */,
                const NXString & distance /**  The distance for the stopshort on the edge.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Remove an edge blend stop short data for an edge    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveStopshortData
            (
                NXOpen::Edge * edge /** Edge to remove the stopshort on*/,
                bool from_start /** if true, then the stopshort is defined at the start 
                                                    vertex.  Otherwise, it is defined at the end vertex. */
            );
            /** Remove an edge blend stop short data for the index indicated   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveStopshortData
            (
                int ss_index /** Index of where stop short data item is created. */
            );
            /** Get all the variable radii data for an edge in the edge blend  @return  Parameter locations of points on the edge  <br> License requirements : None */
            public: std::vector<double> GetVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to get all the varible radius data on*/,
                std::vector<NXOpen::Expression *> & radii_exp /** The radius value of each point on the edge */,
                std::vector<NXOpen::Point *> & smart_points /** Array of smart points defining variable radius */,
                std::vector<bool> & is_external_flag_array /** Corresponding is_external flags of the variable radius points*/
            );
            /** Add an edge blend variable radius data for an edge in the edge blend  @return  Index of where variable radius data item is created <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                double parameter /** Parameter location of point on the edge */,
                const NXString & radius /**  The radius at this point on the edge.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Point * smart_point /** Smart Point defining the location of this vr */,
                bool is_external /** Flag indicating whether this point is external to blend */
            );
            /** Edit an edge blend variable radius data for an edge in the edge blend  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void EditVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                int vr_index /** Index of what variable radius data item to edit*/,
                double parameter /** Parameter location of point on the edge */,
                const NXString & radius /**  The radius at this point on the edge.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Point * smart_point /** Smart Point defining the location of this vr */,
                bool is_external /** Flag indicating whether this point is external to blend */
            );
            /** Remove variable radius data on an edge by the parameter value of the point on the edge  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                double parameter /** Parameter location of point on the edge */
            );
            /** Remove variable radius data on an edge by the index into the point array on the edge  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to remove variable radius data on*/,
                int index /** Index into point array on the edge */
            );
            /** Remove all variable radius datas on an edge   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to remove all variable radius datas from*/
            );
            /**Returns  the overlap resolution for edge blend   <br> License requirements : None */
            public: NXOpen::Features::EdgeBlendBuilder::Overlap OverlapOption
            (
            );
            /**Sets  the overlap resolution for edge blend   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOverlapOption
            (
                NXOpen::Features::EdgeBlendBuilder::Overlap overlap_option /** */
            );
            /**Returns  the order of blending for edge blend   <br> License requirements : None */
            public: NXOpen::Features::EdgeBlendBuilder::OrderOfBlending BlendOrder
            (
            );
            /**Sets  the order of blending for edge blend   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBlendOrder
            (
                NXOpen::Features::EdgeBlendBuilder::OrderOfBlending blend_order /** */
            );
            /**Returns  the setback option for edge blend   <br> License requirements : None */
            public: NXOpen::Features::EdgeBlendBuilder::Setback SetbackOption
            (
            );
            /**Sets  the setback option for edge blend   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSetbackOption
            (
                NXOpen::Features::EdgeBlendBuilder::Setback setback_option /** */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
