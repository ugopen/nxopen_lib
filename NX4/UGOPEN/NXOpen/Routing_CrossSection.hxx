#ifndef NXOpen_ROUTING_CROSSSECTION_HXX_INCLUDED
#define NXOpen_ROUTING_CROSSSECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_CrossSection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Routing_StockData.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class CrossSection;
    }
    class Curve;
    class Expression;
    class NXObject;
    namespace Routing
    {
        class StockData;
    }
    namespace Routing
    {
        class _CrossSectionBuilder;
        /** A @link Routing::CrossSection Routing::CrossSection@endlink  defines a profile to sweep for @link Routing::Stock Routing::Stock@endlink  objects. 
                The profile is a set of curves centered around the origin, and in the XY plane.  An offset may be
                specified that forms a second profile that consists of curves offset by the specified offset from
                the profile curves (which forms a hollow stock body, such as a pipe).  
              */
        class NXOPENCPPEXPORT CrossSection : public NXObject
        {
            private: friend class  _CrossSectionBuilder;
            protected: CrossSection();
            /** Returns the curves that define the profile for the @link Routing::CrossSection Routing::CrossSection@endlink  object.  @return  The curves that define the profile.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: std::vector<NXOpen::Curve *> GetCrossCurves
            (
            );
            /** Sets the curves that define the profile for the @link Routing::CrossSection Routing::CrossSection@endlink  object. The
                        curves must form a single closed loop.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetCrossCurves
            (
                const std::vector<NXOpen::Curve *> & curves /** The curves that define the profile. */
            );
            /**Returns  the offset expression applied to the profile when generating a Sweep.  This forms
                        a second set of profile curves that are offset outwards (for positive offsets, inwards for negative
                        offsets) from the profile curves of the @link Routing::CrossSection Routing::CrossSection@endlink .  A value of
                        0.0 or a NULL expression indicates no offset.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Expression * Offset
            (
            );
            /**Sets  the offset expression applied to the profile when generating a Sweep.  This forms
                        a second set of profile curves that are offset outwards (for positive offsets, inwards for negative
                        offsets) from the profile curves of the @link Routing::CrossSection Routing::CrossSection@endlink .  A value of
                        0.0 or a NULL expression indicates no offset.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetOffset
            (
                NXOpen::Expression * expression /** */
            );
            /**Returns  the style of the profile.  See @link Routing::StockData Routing::StockData@endlink  for information on styles  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::StockStyle Style
            (
            );
            /**Sets  the style of the profile.  See @link Routing::StockData Routing::StockData@endlink  for information on styles  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetStyle
            (
                NXOpen::Routing::StockStyle style /**  */
            );
            /** Returns the @link Routing::StockData Routing::StockData@endlink  that owns this @link Routing::CrossSection Routing::CrossSection@endlink .  @return  The @link Routing::StockData Routing::StockData@endlink  that owns the 
                                                              @link Routing::CrossSection Routing::CrossSection@endlink  object.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::StockData * GetStockData
            (
            );
            /** Returns the maximum radius of the profile.   @return  The radius of the circle that encircles all profile curves in
                                                             the @link Routing::CrossSection Routing::CrossSection@endlink   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: double GetMaximumRadius
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
