#ifndef NXOpen_JAMTESTNAMESPACE_TAGGED_HXX_INCLUDED
#define NXOpen_JAMTESTNAMESPACE_TAGGED_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     JamTestNamespace_Tagged.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/JamTestNamespace_Subobject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopenjamtestcpp_exports.hxx>
namespace NXOpen
{
    namespace JamTestNamespace
    {
        class Tagged;
    }
    namespace JamTestNamespace
    {
        class Subobject;
    }
    namespace JamTestNamespace
    {
        class _TaggedBuilder;
        /** Test class for wrapping a tagged object  <br> not done yet <br> */
        class NXOPENJAMTESTCPPEXPORT Tagged : public TaggedObject
        {
            private: friend class  _TaggedBuilder;
            protected: Tagged();
            /**Returns   <br> License requirements : None */
            public: NXOpen::JamTestNamespace::Subobject * Subobject
            (
            );
            /** Test for returning a subobject array (contents will all be the same object )  @return   <br> License requirements : None */
            public: std::vector<NXOpen::JamTestNamespace::Subobject *> GetSubobjects
            (
                int n /** */
            );
            /** Test for input of single subobject  @return   <br> License requirements : None */
            public: bool OwnsSubobject
            (
                NXOpen::JamTestNamespace::Subobject * obj /** */
            );
            /** Test for input of subobject array  @return   <br> License requirements : None */
            public: int OwnsOneOf
            (
                const std::vector<NXOpen::JamTestNamespace::Subobject *> & objects /** */
            );
            /**Returns  the Id of this Tagged object  <br> License requirements : None */
            public: int Id
            (
            );
            /**Returns  the Id of the Tagged object's subobject  <br> License requirements : None */
            public: int SubobjectId
            (
            );
            /** Destroy the current subobject of this object and create a new one  <br> License requirements : None */
            public: void NewSubobject
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
