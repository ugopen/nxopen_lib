#ifndef NXOpen_DIE_PIERCEHOLEPARENTBUILDER_HXX_INCLUDED
#define NXOpen_DIE_PIERCEHOLEPARENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_PierceHoleParentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class PierceHoleParentBuilder;
    }
    namespace Die
    {
        class PierceHoleChildBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Die
    {
        class _PierceHoleParentBuilderBuilder;
        /** Represents a Pierce Hole Parent sub feature.  <br> This sub feature is created via the main feature builder. <br> */
        class NXOPENCPPEXPORT PierceHoleParentBuilder : public Features::FeatureBuilder
        {
            private: friend class  _PierceHoleParentBuilderBuilder;
            protected: PierceHoleParentBuilder();
            /**   <br> License requirements : ug_die_design ("Die Design") */
            public: void SetProfileBlendRadius
            (
                const NXString & profile_blend_radius /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the profile blend radius of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * ProfileBlendRadius
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDieClearance
            (
                const NXString & die_clearance /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the die clearance of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * DieClearance
            (
            );
            /**   <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDiameter
            (
                const NXString & diameter /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the diameter of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * Diameter
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDepth
            (
                const NXString & depth /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the depth of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * Depth
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetLength
            (
                const NXString & length /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the length of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * Length
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetWidth
            (
                const NXString & pierce_hole_width /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the width of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * Width
            (
            );
            /**Sets  the common slug hole switch of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCommonSlugHole
            (
                bool common_slug_hole /** */
            );
            /**Returns  the common slug hole switch of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: bool CommonSlugHole
            (
            );
            /**Sets  the circular slug hole switch of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCircularSlugHole
            (
                bool circular_slug_hole /** */
            );
            /**Returns  the circular slug hole switch of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: bool CircularSlugHole
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetSlugHoleDiameterIncrement
            (
                const NXString & slug_hole_diameter_increment /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the slug hole diameter increment of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * SlugHoleDiameterIncrement
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetSlugHoleOffset
            (
                const NXString & slug_hole_offset /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the slug hole offset of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * SlugHoleOffset
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetBreakerHoleFactor
            (
                const NXString & breaker_hole_factor /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the breaker hole factor of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * BreakerHoleFactor
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetBreakerHoleOffset
            (
                const NXString & breaker_hole_offset /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the breaker hole offset of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * BreakerHoleOffset
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetBreakerHoleDepth
            (
                const NXString & breaker_hole_depth /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the breaker hole depth of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * BreakerHoleDepth
            (
            );
            /**Sets  the display holes option of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDisplayHoles
            (
                bool display_pierce_holes /** */
            );
            /**Returns  the display holes option of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DisplayHoles
            (
            );
            /** Gets the hole attributes, note existance of attributes depends on usage in
                    main feature  <br> License requirements : ug_die_design ("Die Design") */
            public: void GetHoleAttributes
            (
                NXString* title /** title for attribute */,
                NXString* value /** value of attribute */,
                int* color /** color of hole faces */,
                NXString* diameter_title /** title for diameter attribute */
            );
            /** Sets the hole attributes, note existance of attributes depends on usage in
                    main feature  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetHoleAttributes
            (
                const NXString & title /** title for attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** value of attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** color of hole faces */,
                const NXString & diameter_title /** title for diameter attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the slug hole attributes, note existance of attributes depends on usage in
                    main feature  <br> License requirements : ug_die_design ("Die Design") */
            public: void GetSlugHoleAttributes
            (
                NXString* title /** title for attribute */,
                NXString* value /** value of attribute */,
                int* color /** color of hole faces */,
                NXString* diameter_title /** title for diameter attribute */
            );
            /** Sets the slug hole attributes, note existance of attributes depends on usage in
                    main feature  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetSlugHoleAttributes
            (
                const NXString & title /** title for attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** value of attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** color of hole faces */,
                const NXString & diameter_title /** title for diameter attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the breaker hole attributes, note existance of attributes depends on usage in
                    main feature  <br> License requirements : ug_die_design ("Die Design") */
            public: void GetBreakerHoleAttributes
            (
                NXString* title /** title for attribute */,
                NXString* value /** value of attribute */,
                int* color /** color of hole faces */,
                NXString* diameter_title /** title for diameter attribute */
            );
            /** Sets the breaker hole attributes, note existance of attributes depends on usage in
                    main feature  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetBreakerHoleAttributes
            (
                const NXString & title /** title for attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** value of attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** color of hole faces */,
                const NXString & diameter_title /** title for diameter attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets  the design status of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDesignStatus
            (
                bool design_status /** */
            );
            /**Returns  the design status of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DesignStatus
            (
            );
            /**Returns  the build status of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieBuildStatusOption BuildStatus
            (
            );
            /**Sets  the display status of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDisplayStatus
            (
                bool display_status /** */
            );
            /**Returns  the display status of pierce holes  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DisplayStatus
            (
            );
            /** Creates a child pierce hole  @return   <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::PierceHoleChildBuilder * CreateChild
            (
            );
            /** Deletes a child pierce hole  <br> License requirements : ug_die_design ("Die Design") */
            public: void DeleteChild
            (
                NXOpen::Die::PierceHoleChildBuilder * dieholechild /** */
            );
            /** Outputs the pierce hole children  @return  children  <br> License requirements : ug_die_design ("Die Design") */
            public: std::vector<NXOpen::Die::PierceHoleChildBuilder *> GetChildren
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
