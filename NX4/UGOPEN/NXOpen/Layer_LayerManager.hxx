#ifndef NXOpen_LAYER_LAYERMANAGER_HXX_INCLUDED
#define NXOpen_LAYER_LAYERMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Layer_LayerManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Layer.hxx>
#include <NXOpen/Layer_StateCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Layer
    {
        class LayerManager;
    }
    class BasePart;
    namespace Layer
    {
        class StateCollection;
    }
    class NXObject;
    class View;
    namespace Layer
    {
        /** Represents an object that manages layers  <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
        class NXOPENCPPEXPORT LayerManager
        {
            private: NXOpen::BasePart* m_owner;
            public: explicit LayerManager(NXOpen::BasePart *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            /**Sets  the work layer.
                    If you change the work layer, the old work layer is changed to Selectable.  <br> License requirements : None */
            public: void SetWorkLayer
            (
                int new_work_layer /** Layer number for the new work layer */
            );
            /**Returns  the work layer.
                    If you change the work layer, the old work layer is changed to Selectable.  <br> License requirements : None */
            public: int WorkLayer
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link WorkLayer() WorkLayer@endlink instead.
            @deprecated
            */
            public: int GetWorkLayer
            (
            ) { return this->WorkLayer(); }
            /** Changes the states of the specified layers in the part. 
                    Note: there must be exactly one work layer.  If you change the work layer,
                    you must specify a new work layer.  If you set the work layer, the
                    old work layer will be changed to Selectable, unless you specify otherwise.
                     <br> License requirements : None */
            public: void ChangeStates
            (
                const std::vector<NXOpen::Layer::StateInfo> & state_array /** 
                                Indicates the new states for the layers. */,
                bool fitAll /** Whether to refit the view to what is visible after the layer states have been changed */
            );
            /** Changes the states of the specified layers in the part. 
                    Note: there must be exactly one work layer.  If you change the work layer,
                    you must specify a new work layer.  If you set the work layer, the
                    old work layer will be changed to Selectable, unless you specify otherwise.
                     <br> License requirements : None */
            public: void ChangeStates
            (
                const std::vector<NXOpen::Layer::StateInfo> & state_array /** 
                                Indicates the new states for the layers. */
            );
            /** Gets the states for all layers in the part  @return  Indicates the states for all layers in the part.  <br> License requirements : None */
            public: NXOpen::Layer::StateCollection * GetStates
            (
            );
            /** Sets the states for all layers in the part.
                        Note: there must be exactly one work layer.  <br> License requirements : None */
            public: void SetStates
            (
                NXOpen::Layer::StateCollection * state_collection /** The states for all layers in the part.  */,
                bool fitAll /** Whether to refit the view to what is visible after the layer states have been changed */
            );
            /** Sets the states for all layers in the part.
                        Note: there must be exactly one work layer.  <br> License requirements : None */
            public: void SetStates
            (
                NXOpen::Layer::StateCollection * state_collection /** The states for all layers in the part.  */
            );
            /** Sets the state of the specified layer.
                    The specified layer must not be the work layer.
                    If you are changing the state of the layer to Work,
                    the old work layer will be changed to Selectable.
                     <br> License requirements : None */
            public: void SetState
            (
                int layer /** */,
                NXOpen::Layer::State state /** */
            );
            /** Sets the state of the specified layer.
                    The specified layer must not be the work layer.
                    If you are changing the state of the layer to Work,
                    the old work layer will be changed to Selectable.
                     <br> License requirements : None */
            public: void SetState
            (
                int layer /** */,
                NXOpen::Layer::State state /** */,
                bool fitAll /** Whether to refit the view to what is visible after the layer state has been changed */
            );
            /** Gets the state of the specified layer  @return   <br> License requirements : None */
            public: NXOpen::Layer::State GetState
            (
                int layer /** */
            );
            /** Moves objects to the specified layer.
                    The specified part may be the displayed part or the work part.  If it is
                    the work part but not the displayed part, then none of the objects to be
                    moved may be currently displayed.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void MoveObjects
            (
                int new_layer /** The layer to move the objects to */,
                const std::vector<NXOpen::NXObject *> & object_array /** The objects to be moved */
            );
            /** Returns all objects on the specified layer  @return  All the objects on the specified layer  <br> License requirements : None */
            public: std::vector<NXOpen::NXObject *> GetAllObjectsOnLayer
            (
                int layer /** */
            );
            /** Copies objects to the specified layer  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void CopyObjects
            (
                int new_layer /** The layer to move the objects to */,
                const std::vector<NXOpen::NXObject *> & object_array /** The objects to be copied */
            );
            /** Set specified layer(s) visibility  <br> License requirements : None */
            public: void SetObjectsVisibilityOnLayer
            (
                NXOpen::View * view /** The view object being modified */,
                const std::vector<NXOpen::Layer::StateInfo> & state_array /** Sets the new states for the layers. */,
                bool do_update /** Whether to update the view(s) after the layer states have been changed */
            );
            /** Reset view's layer visibility to the global states  <br> License requirements : None */
            public: void ResetViewVisibilityToGlobal
            (
                NXOpen::View * view /** */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
