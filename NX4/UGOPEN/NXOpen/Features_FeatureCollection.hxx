#ifndef NXOpen_FEATURES_FEATURECOLLECTION_HXX_INCLUDED
#define NXOpen_FEATURES_FEATURECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FeatureCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Features_RasterImage.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class FeatureCollection;
    }
    class Part;
    namespace Features
    {
        class Feature;
    }
    class Body;
    namespace Die
    {
        class DieCollection;
    }
    namespace Features
    {
        class AOCSBuilder;
    }
    namespace Features
    {
        class BlockFeatureBuilder;
    }
    namespace Features
    {
        class BooleanBuilder;
    }
    namespace Features
    {
        class BooleanFeature;
    }
    namespace Features
    {
        class ChamferBuilder;
    }
    namespace Features
    {
        class CurveLengthBuilder;
    }
    namespace Features
    {
        class DatumAxisBuilder;
    }
    namespace Features
    {
        class DatumCsysBuilder;
    }
    namespace Features
    {
        class DatumPlaneBuilder;
    }
    namespace Features
    {
        class DividefaceBuilder;
    }
    namespace Features
    {
        class DraftBuilder;
    }
    namespace Features
    {
        class EdgeBlendBuilder;
    }
    namespace Features
    {
        class EmbossBuilder;
    }
    namespace Features
    {
        class ExtrudeBuilder;
    }
    namespace Features
    {
        class ExtrudeFeatureBuilder;
    }
    namespace Features
    {
        class FaceBlendBuilder;
    }
    namespace Features
    {
        class HoleFeatureBuilder;
    }
    namespace Features
    {
        class HumanBuilder;
    }
    namespace Features
    {
        class MasterCutBuilder;
    }
    namespace Features
    {
        class MeshSurfaceBuilder;
    }
    namespace Features
    {
        class OffsetSurfaceBuilder;
    }
    namespace Features
    {
        class OvercrownBuilder;
    }
    namespace Features
    {
        class RPOBuilder;
    }
    namespace Features
    {
        class RasterImage;
    }
    namespace Features
    {
        class RevolveBuilder;
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class AeroSheetmetalManager;
        }
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class SheetmetalManager;
        }
    }
    namespace Features
    {
        class ShellBuilder;
    }
    namespace Features
    {
        class SketchOnPathBuilder;
    }
    namespace Features
    {
        class TrimBodyBuilder;
    }
    namespace Features
    {
        class VarsweepBuilder;
    }
    class NXObject;
    namespace Features
    {
        /** Represents a collection of features  <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
        class NXOPENCPPEXPORT FeatureCollection : public TaggedObjectCollection
        {
            private: NXOpen::Part* m_owner;
            public: explicit FeatureCollection(NXOpen::Part *owner): m_owner(owner)
            {
            }
            public: tag_t Tag() const;
            class iterator
            {
            public:
                typedef Features::Feature * value_type;
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Features::FeatureCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                NXOPENCPPEXPORT  value_type operator * ();
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Features::FeatureCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            iterator begin();
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a Mesh Surface feature builder  @return  MeshSurfaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::MeshSurfaceBuilder * CreateMeshSurfaceBuilder
            (
                NXOpen::Features::Feature * mesh_surf /** @link Features::Ruled Features::Ruled@endlink , 
                                                                               @link Features::ThroughCurves Features::ThroughCurves@endlink , 
                                                                               @link Features::ThroughCurveMesh Features::ThroughCurveMesh@endlink  
                                                                               to be edited */
            );
            /** Creates a Block feature builder  @return  BlockFeatureBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::BlockFeatureBuilder * CreateBlockFeatureBuilder
            (
                NXOpen::Features::Feature * block /** @link Block Block@endlink  to be edited */
            );
            /** Creates a Extrude feature builder  @return  ExtrudeFeatureBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtrudeFeatureBuilder * CreateExtrudeFeatureBuilder
            (
                NXOpen::Features::Feature * extrude /** @link Extrude Extrude@endlink  to be edited */
            );
            /** Creates a Extrude builder  @return  ExtrudeBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtrudeBuilder * CreateExtrudeBuilder
            (
                NXOpen::Features::Feature * extrude /** @link Extrude Extrude@endlink  to be edited */
            );
            /** Creates a Revolve builder  @return  RevolveBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RevolveBuilder * CreateRevolveBuilder
            (
                NXOpen::Features::Feature * revolve /** @link RevolveBuilder RevolveBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Emboss builder  @return  EmbossBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EmbossBuilder * CreateEmbossBuilder
            (
                NXOpen::Features::Feature * emboss /** @link EmbossBuilder EmbossBuilder@endlink  to be edited */
            );
            /** Creates a Divideface builder  @return  DividefaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DividefaceBuilder * CreateDividefaceBuilder
            (
                NXOpen::Features::Feature * divideface /** @link DividefaceBuilder DividefaceBuilder@endlink 
                                                                       to be edited */
            );
            /** Creates a Overcrown feature builder  @return  OvercrownBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OvercrownBuilder * CreateOvercrownFeatureBuilder
            (
                NXOpen::Features::Feature * overcrown /** @link OvercrownBuilder OvercrownBuilder@endlink 
                                                                  to be edited, if NULL then create a new one. */
            );
            /** Creates a Curvelength builder  @return  CurveLengthBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CurveLengthBuilder * CreateCurvelengthBuilder
            (
                NXOpen::Features::Feature * curvelength /** @link CurveLengthBuilder CurveLengthBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Datum Axis feature builder  @return  DatumAxisBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DatumAxisBuilder * CreateDatumAxisBuilder
            (
                NXOpen::Features::Feature * datum_axis /** @link DatumAxisFeature DatumAxisFeature@endlink 
                                                                   to be edited */
            );
            /** Creates a Datum Plane feature builder  @return  DatumPlaneBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DatumPlaneBuilder * CreateDatumPlaneBuilder
            (
                NXOpen::Features::Feature * dplane /** @link DatumPlaneFeature DatumPlaneFeature@endlink 
                                                               to be edited */
            );
            /** Creates a Sketch On Path feature builder  @return  SketchOnPathBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SketchOnPathBuilder * CreateSketchOnPathBuilder
            (
                NXOpen::Features::Feature * sketch_feature /** Sketch On Path feature
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Hole feature builder  @return  HoleFeatureBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::HoleFeatureBuilder * CreateHoleFeatureBuilder
            (
                NXOpen::Features::Feature * hole /** @link Hole Hole@endlink  to be edited */
            );
            /** Creates a Relative Positioning Object builder  @return  RPOBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RPOBuilder * CreateRpoBuilder
            (
                NXOpen::Features::Feature * rpo /** @link Feature Feature@endlink  to be repositioned */
            );
            /** Creates a Chamfer feature builder  @return  ChamferBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ChamferBuilder * CreateChamferBuilder
            (
                NXOpen::Features::Feature * chamfer /** Chamfer
                                                             to be edited, if NULL then create a new one */
            );
            /** Creates a Edge Blend feature builder  @return  EdgeBlendBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EdgeBlendBuilder * CreateEdgeBlendBuilder
            (
                NXOpen::Features::Feature * edgeblend /** @link EdgeBlendBuilder EdgeBlendBuilder@endlink  
                                                                     to be edited, if NULL then create a new one */
            );
            /** Creates a unite feature.  @return  Array of boolean features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateUniteFeature
            (
                NXOpen::Body * target_body /** Target body */,
                bool retain_target_body /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & tool_bodies /** Tool bodies */,
                bool retain_tool_bodies /** Retain option for tool bodies */,
                bool allow_non_associative_boolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* non_associative_boolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterized_solids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates a subtract feature.  @return  Array of boolean features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateSubtractFeature
            (
                NXOpen::Body * target_body /** Target body */,
                bool retain_target_body /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & tool_bodies /** Tool bodies */,
                bool retain_tool_bodies /** Retain option for tool bodies */,
                bool allow_non_associative_boolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* non_associative_boolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterized_solids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates an intersect feature.  @return  Array of boolean features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateIntersectFeature
            (
                NXOpen::Body * target_body /** Target body */,
                bool retain_target_body /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & tool_bodies /** Tool bodies */,
                bool retain_tool_bodies /** Retain option for tool bodies */,
                bool allow_non_associative_boolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* non_associative_boolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterized_solids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates a Varsweep feature builder  @return VarsweepBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::VarsweepBuilder * CreateVarsweepBuilder
            (
                NXOpen::Features::Feature * varsweep /** Varsweep to be edited */
            );
            /** Creates a Face Blend feature builder  @return  FaceBlendBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FaceBlendBuilder * CreateFaceBlendBuilder
            (
                NXOpen::Features::Feature * face_blend /** @link FaceBlendBuilder FaceBlendBuilder@endlink  to be edited */
            );
            /** Returns all the features in the part  @return  Features in the part  <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetFeatures
            (
            );
            /** Finds the @link  Feature   Feature @endlink  with the given identifier as recorded in a journal. 
                An object may not return the same value as its JournalIdentifier in different versions of 
                the software. However newer versions of the software should find the same object when 
                FindObject is passed older versions of its journal identifier. In general, this method 
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  Feature with this identifier  <br> License requirements : None */
            public: NXOpen::Features::Feature * FindObject
            (
                const NXString & journal_identifier /** Identifier of the body you want   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Suppress the given features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SuppressFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be suppressed */
            );
            /** Unsuppress the given features  @return  Features which were not unsuppressed due to errors  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> UnsuppressFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be unsuppressed */
            );
            /** Get the feature associated with an object  @return  Feature associated with object. Set to Null if no feature is associated to the object.  <br> License requirements : None */
            public: NXOpen::Features::Feature * GetAssociatedFeature
            (
                NXOpen::NXObject * object /** Object to find associated feature. */
            );
            /** Creates a human feature.  @return  HumanBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Features::HumanBuilder * CreateHumanBuilder
            (
                NXOpen::Features::Feature * human /** @link Human Human@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates an Offset Surface builder  @return  OffsetSurfaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetSurfaceBuilder * CreateOffsetSurfaceBuilder
            (
                NXOpen::Features::Feature * offset_surface /** @link OffsetSurfaceBuilder OffsetSurfaceBuilder@endlink 
                                                                            to be edited */
            );
            /** Creates a Boolean builder  @return  BooleanBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::BooleanBuilder * CreateBooleanBuilder
            (
                NXOpen::Features::BooleanFeature * boolean_feature /** @link BooleanFeature BooleanFeature@endlink  to be edited */
            );
            /** Creates a trim body builder object  @return  Features.TrimBodyBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::TrimBodyBuilder * CreateTrimBodyBuilder
            (
                NXOpen::Features::Feature * trimbody_feat /** @link Features::TrimBody Features::TrimBody@endlink  to be edited */
            );
            /** Creates an Shell builder  @return  ShellBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ShellBuilder * CreateShellBuilder
            (
                NXOpen::Features::Feature * shell /** @link Features::ShellBuilder Features::ShellBuilder@endlink  to be edited */
            );
            /** Creates a Datum CSYS feature builder  @return  DatumCsysBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING"), features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::DatumCsysBuilder * CreateDatumCsysBuilder
            (
                NXOpen::Features::Feature * datum_csys /** @link Features::DatumCsysBuilder Features::DatumCsysBuilder@endlink  to be edited */
            );
            /** Creates a draft builder  @return  DraftBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DraftBuilder * CreateDraftBuilder
            (
                NXOpen::Features::Feature * draft /** @link DraftBuilder DraftBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a raster image  @return  RasterImage object  <br> License requirements : studio_visualize ("STUDIO VISUALIZE") */
            public: NXOpen::Features::RasterImage * CreateRasterImage
            (
                const NXOpen::Point3d & origin /** The origin for the raster image */,
                const NXOpen::Matrix3x3 & matrix /** The rotation matrix for the raster image */,
                double length /** Length of the image, given in the units parameter */,
                double height /** Height of the image, give in the units parameter */,
                const NXString & image_file_name /** Name of the image file to use.
                                                                      For now, it must be a .tif file   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double translucency /** 0.0 for no translucency, 1.0 for fully tranparent */,
                NXOpen::Features::RasterImage::MaxTextureSize maximum_texture_size /** */
            );
            /** Create a Master Cut builder  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MasterCutBuilder * CreateMasterCutBuilder
            (
                NXOpen::Features::Feature * master_cut /** @link Features::MasterCutBuilder Features::MasterCutBuilder@endlink  to be edited,
                                                                                 if NULL then create a new one  */
            );
            /** Creates an Offset In Face builder  @return  AOCSBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AOCSBuilder * CreateAocsBuilder
            (
                NXOpen::Features::Feature * aocs /** @link Features::AOCSBuilder Features::AOCSBuilder@endlink  to be edited */
            );


            private: NXOpen::Features::SheetMetal::SheetmetalManager *sheetmetalManager;
            /** Returns the Straight Brake Sheetmetal Manager for this part */
            public: NXOpen::Features::SheetMetal::SheetmetalManager *SheetmetalManager()
            {
                return sheetmetalManager;
            }
            private: NXOpen::Features::SheetMetal::AeroSheetmetalManager *aeroSheetmetalManager;
            /** Returns the aerospace sheet metal manager for this part */
            public: NXOpen::Features::SheetMetal::AeroSheetmetalManager *AeroSheetmetalManager()
            {
                return aeroSheetmetalManager;
            }
            private: NXOpen::Die::DieCollection *dies;
            /** Returns the DieCollection instance belonging to this part */
            public: NXOpen::Die::DieCollection *Dies()
            {
                return dies;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
