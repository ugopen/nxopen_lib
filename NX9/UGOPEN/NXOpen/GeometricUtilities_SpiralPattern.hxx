#ifndef NXOpen_GEOMETRICUTILITIES_SPIRALPATTERN_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_SPIRALPATTERN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_SpiralPattern.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_HorizontalReference.hxx>
#include <NXOpen/GeometricUtilities_OnPathDistancePatternSpacing.hxx>
#include <NXOpen/GeometricUtilities_SpiralPattern.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class SpiralPattern;
    }
    class Direction;
    class Expression;
    namespace GeometricUtilities
    {
        class HorizontalReference;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDistancePatternSpacing;
    }
    namespace GeometricUtilities
    {
        class _SpiralPatternBuilder;
        class SpiralPatternImpl;
        /** the Spiral pattern definition.  
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  SpiralPattern : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This defines spiral direction method */
            public: enum OrientType
            {
                OrientTypeLefthand/** Left hand orientation. */,
                OrientTypeRighthand/** Right hand orientation. */
            };

            /** This defines size spiral type */
            public: enum SpiralDefineSize
            {
                SpiralDefineSizeNumberOfTurns/** using number of turns to define size of spiral */,
                SpiralDefineSizeTotalAngle/** using total angle to define size of spiral */
            };

            private: SpiralPatternImpl * m_spiralpattern_impl;
            private: friend class  _SpiralPatternBuilder;
            protected: SpiralPattern();
            public: ~SpiralPattern();
            /**Returns  the type of spiral direction method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SpiralPattern::OrientType DirectionType
            (
            );
            /**Sets  the type of spiral direction method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDirectionType
            (
                NXOpen::GeometricUtilities::SpiralPattern::OrientType directionType /** directiontype */ 
            );
            /**Returns  the size spiral type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SpiralPattern::SpiralDefineSize SizeSpiralType
            (
            );
            /**Sets  the size spiral type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSizeSpiralType
            (
                NXOpen::GeometricUtilities::SpiralPattern::SpiralDefineSize sizeSpiralType /** sizespiraltype */ 
            );
            /**Returns  the number of turns of spiral 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * NumberOfTurns
            (
            );
            /**Returns  the total angle of spiral 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TotalAngle
            (
            );
            /**Returns  the radial pitch of spiral 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RadialPitch
            (
            );
            /**Returns  the pitch along spiral curve 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDistancePatternSpacing * PitchAlongSpiral
            (
            );
            /**Returns  the horizontal reference 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::HorizontalReference * HorizontalRef
            (
            );
            /**Returns  the spiral normal vector 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SpiralNormal
            (
            );
            /**Sets  the spiral normal vector 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpiralNormal
            (
                NXOpen::Direction * spiralNormal /** spiralnormal */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
