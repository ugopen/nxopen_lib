#ifndef NXOpen_DRAFTING_AUTOMATIONPREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_DRAFTING_AUTOMATIONPREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drafting_AutomationPreferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Drafting_AutomationPreferencesBuilder.hxx>
#include <NXOpen/Preferences_PartDrafting.hxx>
#include <NXOpen/libnxopencpp_drafting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drafting
    {
        class AutomationPreferencesBuilder;
    }
    class Builder;
    class NXColor;
    namespace Drafting
    {
        class _AutomationPreferencesBuilderBuilder;
        class AutomationPreferencesBuilderImpl;
        /**the builder for Drafting Automation Preferences  <br> To create a new instance of this class, use @link Drafting::AutomationManager::CreatePreferencesBuilder  Drafting::AutomationManager::CreatePreferencesBuilder @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_DRAFTINGEXPORT  AutomationPreferencesBuilder : public Builder
        {
            private: AutomationPreferencesBuilderImpl * m_automationpreferencesbuilder_impl;
            private: friend class  _AutomationPreferencesBuilderBuilder;
            protected: AutomationPreferencesBuilder();
            public: ~AutomationPreferencesBuilder();
            /**Returns  the secondary content visible line color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SecondaryContentVisibleLineColor
            (
            );
            /**Sets  the secondary content visible line color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetSecondaryContentVisibleLineColor
            (
                NXOpen::NXColor * secondaryContentVisibleLineColor /** secondarycontentvisiblelinecolor */ 
            );
            /**Returns  the secondary content visible line font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::FontType SecondaryContentVisibleLineFont
            (
            );
            /**Sets  the secondary content visible line font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetSecondaryContentVisibleLineFont
            (
                NXOpen::Preferences::PartDrafting::FontType secondaryContentVisibleLineFont /** secondarycontentvisiblelinefont */ 
            );
            /**Returns  the secondary content visible line width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::WidthType SecondaryContentVisibleLineWidth
            (
            );
            /**Sets  the secondary content visible line width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetSecondaryContentVisibleLineWidth
            (
                NXOpen::Preferences::PartDrafting::WidthType secondaryContentVisibleLineWidth /** secondarycontentvisiblelinewidth */ 
            );
            /**Returns  the secondary content hidden line color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SecondaryContentHiddenLineColor
            (
            );
            /**Sets  the secondary content hidden line color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetSecondaryContentHiddenLineColor
            (
                NXOpen::NXColor * secondaryContentHiddenLineColor /** secondarycontenthiddenlinecolor */ 
            );
            /**Returns  the secondary content hidden line font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::FontType SecondaryContentHiddenLineFont
            (
            );
            /**Sets  the secondary content hidden line font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetSecondaryContentHiddenLineFont
            (
                NXOpen::Preferences::PartDrafting::FontType secondaryContentHiddenLineFont /** secondarycontenthiddenlinefont */ 
            );
            /**Returns  the secondary content hidden line width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::WidthType SecondaryContentHiddenLineWidth
            (
            );
            /**Sets  the secondary content hidden line width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetSecondaryContentHiddenLineWidth
            (
                NXOpen::Preferences::PartDrafting::WidthType secondaryContentHiddenLineWidth /** secondarycontenthiddenlinewidth */ 
            );
            /**Returns  the display in non template 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayRegion
            (
            );
            /**Sets  the display in non template 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetDisplayRegion
            (
                bool displayRegion /** displayregion */ 
            );
            /**Returns  the display region label 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayRegionLabel
            (
            );
            /**Sets  the display region label 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetDisplayRegionLabel
            (
                bool displayRegionLabel /** displayregionlabel */ 
            );
            /**Returns  the region color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * RegionColor
            (
            );
            /**Sets  the region color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetRegionColor
            (
                NXOpen::NXColor * regionColor /** regioncolor */ 
            );
            /**Returns  the region font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::FontType RegionFont
            (
            );
            /**Sets  the region font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetRegionFont
            (
                NXOpen::Preferences::PartDrafting::FontType regionFont /** regionfont */ 
            );
            /**Returns  the region width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::WidthType RegionWidth
            (
            );
            /**Sets  the region width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetRegionWidth
            (
                NXOpen::Preferences::PartDrafting::WidthType regionWidth /** regionwidth */ 
            );
            /**Returns  the annotation inside geometry 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool AnnotationInsideGeometry
            (
            );
            /**Sets  the annotation inside geometry 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetAnnotationInsideGeometry
            (
                bool annotationInsideGeometry /** annotationinsidegeometry */ 
            );
            /**Returns  the minimum distance to geometry 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double MinimumDistanceToGeometry
            (
            );
            /**Sets  the minimum distance to geometry 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetMinimumDistanceToGeometry
            (
                double minimumDistanceToGeometry /** minimumdistancetogeometry */ 
            );
            /**Returns  the maximum distance to geometry 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double MaximumDistanceToGeometry
            (
            );
            /**Sets  the maximum distance to geometry 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetMaximumDistanceToGeometry
            (
                double maximumDistanceToGeometry /** maximumdistancetogeometry */ 
            );
            /**Returns  the distance between annotations 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceBetweenAnnotations
            (
            );
            /**Sets  the distance between annotations 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetDistanceBetweenAnnotations
            (
                double distanceBetweenAnnotations /** distancebetweenannotations */ 
            );
            /**Returns  the hide feet inch mark 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool HideFeetInchMark
            (
            );
            /**Sets  the hide feet inch mark 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetHideFeetInchMark
            (
                bool hideFeetInchMark /** hidefeetinchmark */ 
            );
            /**Returns  the determination of the feet inch fraction display for dimension greater than 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool AllowFeetInchFractionForDimensionGreaterThan
            (
            );
            /**Sets  the determination of the feet inch fraction display for dimension greater than 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetAllowFeetInchFractionForDimensionGreaterThan
            (
                bool allowFeetInchFractionForDimensionGreaterThan /** allowfeetinchfractionfordimensiongreaterthan */ 
            );
            /**Returns  the feet inch fraction for dimension greater than 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double FeetInchFractionForDimensionGreaterThan
            (
            );
            /**Sets  the feet inch fraction for dimension greater than 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetFeetInchFractionForDimensionGreaterThan
            (
                double feetInchFractionForDimensionGreaterThan /** feetinchfractionfordimensiongreaterthan */ 
            );
            /**Returns  the determination of the display for inch fraction to nearest 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool AllowInchFractionToNearest
            (
            );
            /**Sets  the determination of the display for inch fraction to nearest 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetAllowInchFractionToNearest
            (
                bool allowInchFractionToNearest /** allowinchfractiontonearest */ 
            );
            /**Returns  the inch fraction to nearest 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double InchFractionToNearest
            (
            );
            /**Sets  the inch fraction to nearest 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetInchFractionToNearest
            (
                double inchFractionToNearest /** inchfractiontonearest */ 
            );
            /**Returns  the equal dimension compare tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double EqualDimensionCompareTolerance
            (
            );
            /**Sets  the equal dimension compare tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetEqualDimensionCompareTolerance
            (
                double equalDimensionCompareTolerance /** equaldimensioncomparetolerance */ 
            );
            /**Returns  the reference geometry search distance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double ReferenceGeometrySearchDistance
            (
            );
            /**Sets  the reference geometry search distance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetReferenceGeometrySearchDistance
            (
                double referenceGeometrySearchDistance /** referencegeometrysearchdistance */ 
            );
            /** Get the ordered rules list  @return  Rules list 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetRulesList
            (
            );
            /**  Set the ordered rules list 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetRulesList
            (
                std::vector<NXString> & rules /** Rules list */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
