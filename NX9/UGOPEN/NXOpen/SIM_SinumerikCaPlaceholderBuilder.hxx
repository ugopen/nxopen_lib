#ifndef NXOpen_SIM_SINUMERIKCAPLACEHOLDERBUILDER_HXX_INCLUDED
#define NXOpen_SIM_SINUMERIKCAPLACEHOLDERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_SinumerikCaPlaceholderBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SIM_SinumerikCaPlaceholderBuilder.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        class SinumerikCaPlaceholderBuilder;
    }
    class Builder;
    namespace SIM
    {
        class _SinumerikCaPlaceholderBuilderBuilder;
        class SinumerikCaPlaceholderBuilderImpl;
        /** This class is used for select or unselect component of the placeholder tools.
                A call to @link Builder::Commit Builder::Commit@endlink  on this builder will only return NULL.
             <br> Use the @link Part Part@endlink  class to create a SinumerikCaPlaceholderBuilder object.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_SIMEXPORT  SinumerikCaPlaceholderBuilder : public Builder
        {
            private: SinumerikCaPlaceholderBuilderImpl * m_sinumerikcaplaceholderbuilder_impl;
            private: friend class  _SinumerikCaPlaceholderBuilderBuilder;
            protected: SinumerikCaPlaceholderBuilder();
            public: ~SinumerikCaPlaceholderBuilder();
            /** The select placeholder tools component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_sinumerik_ca ("Sinumerik Collision Avoidance") */
            public: void SelectComponent
            (
                const NXString & compName /** The selected placeholder component name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** The select placeholder tools component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_sinumerik_ca ("Sinumerik Collision Avoidance") */
            void SelectComponent
            (
                const char * compName /** The selected placeholder component name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** The select placeholder tools component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_sinumerik_ca ("Sinumerik Collision Avoidance") */
            public: void UnselectComponent
            (
                const NXString & compName /** The unselected placeholder component name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** The select placeholder tools component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_sinumerik_ca ("Sinumerik Collision Avoidance") */
            void UnselectComponent
            (
                const char * compName /** The unselected placeholder component name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
