#ifndef NXOpen_BLOCKSTYLER_PROPERTYLIST_HXX_INCLUDED
#define NXOpen_BLOCKSTYLER_PROPERTYLIST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BlockStyler_PropertyList.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/Selection.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace BlockStyler
    {
        class PropertyList;
    }
    namespace BlockStyler
    {
        class UIBlock;
    }
    class TaggedObject;
    namespace BlockStyler
    {
        class PropertyListImpl;
        /** Represents a list of properties 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  PropertyList : public TransientObject
        {
            /** Represents the property types.*/
            public: enum PropertyType
            {
                PropertyTypeString/**String*/,
                PropertyTypeDouble/**Double*/,
                PropertyTypeLogical/**Logical*/,
                PropertyTypeInteger/**Integer*/,
                PropertyTypeEnum/**Enum*/,
                PropertyTypeStrings/**Strings*/,
                PropertyTypeUIBlock/**UIBlock*/,
                PropertyTypePoint/**Point*/,
                PropertyTypeVector/**Vector*/,
                PropertyTypeBits/**Bits*/,
                PropertyTypeTaggedObject/**Tagged Object*/,
                PropertyTypeArray/**Array*/,
                PropertyTypeIntegerMatrix2d/**Integer 2d-Matrix*/,
                PropertyTypeDoubleMatrix2d/**Double 2d-Matrix*/,
                PropertyTypeTaggedObjectMatrix2d/**Tagged Object 2d-Matrix*/,
                PropertyTypeIntegerVector/**Integer Vector*/,
                PropertyTypeDoubleVector/**Double Vector*/,
                PropertyTypeTaggedObjectVector/**Tagged Object Vector*/,
                PropertyTypeFile/**File*/,
                PropertyTypeSelectionFilter/**Selection Filter*/,
                PropertyTypeUndefined/**Undefined */
            };

            /** Indicates whether the properties in the list are named.*/
            public: enum ListMode
            {
                ListModeIndexed/** The properties are not named and
                               must be indexed through an integer index */,
                ListModeNamed/** The properties are named */
            };

            private: PropertyListImpl * m_propertylist_impl;
            /// \cond NX_NO_DOC 
            public: explicit PropertyList(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                        it is illegal to use the object.  In .NET, this method is automatically
                        called when the object is deleted by the garbage collector. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PropertyList();
            /**Returns  the mode of the list.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::PropertyList::ListMode Mode
            (
            );
            /**Returns  the length of the list 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int Length
            (
            );
            /** Returns a list of all the property names  @return Property names 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetPropertyNames
            (
            );
            /** Returns the property type for given property name  @return Property type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::PropertyList::PropertyType GetPropertyType
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the property type for given property name  @return Property type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::BlockStyler::PropertyList::PropertyType GetPropertyType
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the property type for the Indexed property list. Don't use this method on Named property list  @return Property type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::PropertyList::PropertyType GetPropertyType
            (
                int propertyIndex /**Index*/
            );
            /** Sets the integer value for the given property name. 
                        Exception will be raised if invalid property name is used.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInteger
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** Value to set for given property name*/
            );
            /** Sets the integer value for the given property name. 
                        Exception will be raised if invalid property name is used.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetInteger
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** Value to set for given property name*/
            );
            /** Gets the integer value for the given property name. Exception will be raised if invalid property name is used  @return Value to get for given property name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int GetInteger
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the integer value for the given property name. Exception will be raised if invalid property name is used  @return Value to get for given property name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            int GetInteger
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the integer value for the given index. Exception will be raised if invalid index is used  @return Value to get for given index 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int GetInteger
            (
                int propertyIndex /**Index*/
            );
            /**Sets the logical value for the given property name. Exception will be raised if invalid property name is used.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLogical
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool value /**Value to set for given property name. */
            );
            /**Sets the logical value for the given property name. Exception will be raised if invalid property name is used.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetLogical
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool value /**Value to set for given property name. */
            );
            /** Gets the logical value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetLogical
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the logical value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            bool GetLogical
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the logical value for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetLogical
            (
                int propertyIndex /** Index */
            );
            /**Sets the double value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDouble
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /**Value to set for given property name.*/
            );
            /**Sets the double value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetDouble
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /**Value to set for given property name.*/
            );
            /** Gets the double value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double GetDouble
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the double value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            double GetDouble
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the double value for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double GetDouble
            (
                int propertyIndex /** Index*/
            );
            /**Sets the string value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetString
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /**Value to set for given property name. */
            );
            /**Sets the string value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetString
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * value /**Value to set for given property name. */
            );
            /** Gets the string value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetString
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the string value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXString GetString
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the string value for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetString
            (
                int propertyIndex /** Index*/
            );
            /** Sets the value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnumAsString
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /**Value to set for given property name. */
            );
            /** Sets the value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetEnumAsString
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * value /**Value to set for given property name. */
            );
            /**Gets the value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetEnumAsString
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXString GetEnumAsString
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the value for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetEnumAsString
            (
                int propertyIndex /** index */
            );
            /**Sets the value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnum
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /**Value to set for given property name. */
            );
            /**Sets the value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetEnum
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /**Value to set for given property name. */
            );
            /**Gets the value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int GetEnum
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            int GetEnum
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the value for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int GetEnum
            (
                int propertyIndex /** Index */
            );
            /**Sets the enum members for the given property of type enum. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnumMembers
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & stringArray /**Value to set for given property name. */
            );
            /**Sets the enum members for the given property of type enum. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetEnumMembers
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & stringArray /**Value to set for given property name. */
            );
            /**Gets the enum members for the given property of type enum. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetEnumMembers
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the enum members for the given property of type enum. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXString> GetEnumMembers
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the enum members for the given property index. Exception will be raised if invalid property name is used.  @return Value to get for given property index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetEnumMembers
            (
                int propertyIndex /** Index */
            );
            /**Sets the strings value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStrings
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & stringArray /**Value to set for given property name. */
            );
            /**Sets the strings value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetStrings
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & stringArray /**Value to set for given property name. */
            );
            /**Gets the strings value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetStrings
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the strings value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXString> GetStrings
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the strings value for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetStrings
            (
                int propertyIndex /** Index */
            );
            /**Gets the UI Block for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::UIBlock * GetUIBlock
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the UI Block for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::BlockStyler::UIBlock * GetUIBlock
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the UI Block for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::UIBlock * GetUIBlock
            (
                int propertyIndex /** Index */
            );
            /**Sets the point value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPoint
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & pointSc /**Value to set for given property name. */
            );
            /**Sets the point value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetPoint
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & pointSc /**Value to set for given property name. */
            );
            /**Gets the point value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d GetPoint
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the point value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Point3d GetPoint
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the point value for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d GetPoint
            (
                int propertyIndex /**Index */
            );
            /**Sets the vector value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVector
            (
                const NXString & propertyName /**Name of the property  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Vector3d & vector /**Value to set for given property name.  */
            );
            /**Sets the vector value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetVector
            (
                const char * propertyName /**Name of the property  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Vector3d & vector /**Value to set for given property name.  */
            );
            /**Gets the vector value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Vector3d GetVector
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the vector value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Vector3d GetVector
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the vector value for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Vector3d GetVector
            (
                int propertyIndex /**Index */
            );
            /**Sets the bits value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBits
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int bitsSc /**Value to set for given property name.*/
            );
            /**Sets the bits value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetBits
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int bitsSc /**Value to set for given property name.*/
            );
            /** Gets the bits value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int GetBits
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the bits value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            int GetBits
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the bits value for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int GetBits
            (
                int propertyIndex /**index */
            );
            /**Sets the tagged object for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTaggedObject
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::TaggedObject * taggedSc /**Value to set for given property name. */
            );
            /**Sets the tagged object for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetTaggedObject
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::TaggedObject * taggedSc /**Value to set for given property name. */
            );
            /**Gets the tagged object for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * GetTaggedObject
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the tagged object for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::TaggedObject * GetTaggedObject
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the tagged object for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * GetTaggedObject
            (
                int propertyIndex /**Index*/
            );
            /**Gets the integer vector for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetIntegerVector
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the integer vector for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            std::vector<int> GetIntegerVector
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets the integer vector for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIntegerVector
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & intVector /**Value to set for given property name. */
            );
            /**Sets the integer vector for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetIntegerVector
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & intVector /**Value to set for given property name. */
            );
            /**Gets the integer vector for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetIntegerVector
            (
                int propertyIndex /**Index*/
            );
            /**Gets the double vector for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetDoubleVector
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the double vector for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            std::vector<double> GetDoubleVector
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets the double vector for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void SetDoubleVector
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<double> & doubleVector /**Value to set for given property name. */
            );
            /**Sets the double vector for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            void SetDoubleVector
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<double> & doubleVector /**Value to set for given property name. */
            );
            /**Gets the double vector for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetDoubleVector
            (
                int propertyIndex /** Index*/
            );
            /**Gets the tagged object vector for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::TaggedObject *> GetTaggedObjectVector
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the tagged object vector for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXOpen::TaggedObject *> GetTaggedObjectVector
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets the tagged object vector for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTaggedObjectVector
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::TaggedObject *> & tagVector /**Value to set for given property name. */
            );
            /**Sets the tagged object vector for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetTaggedObjectVector
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::TaggedObject *> & tagVector /**Value to set for given property name. */
            );
            /**Gets the tagged object vector for the given index. Exception will be raised if invalid index is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::TaggedObject *> GetTaggedObjectVector
            (
                int propertyIndex /** Index*/
            );
            /**Gets the integer matrix for the given property name. Exception will be raised if invalid property name is used.
                      This is a two dimensional array encoded into a single array.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetIntegerMatrix
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int* nRows /** Number of Rows in the 2D matrix */,
                int* nColumns /** Number of Columns in the 2D matrix */
            );
            /**Gets the integer matrix for the given property name. Exception will be raised if invalid property name is used.
                      This is a two dimensional array encoded into a single array.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            std::vector<int> GetIntegerMatrix
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int* nRows /** Number of Rows in the 2D matrix */,
                int* nColumns /** Number of Columns in the 2D matrix */
            );
            /**Sets the integer matrix for the given property name. Exception will be raised if invalid property name is used.
                      This is a two dimensional array encoded into a single array. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIntegerMatrix
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int nRows /** Number of Rows in the 2D matrix */,
                int nColumns /** Number of Columns in the 2D matrix */,
                const std::vector<int> & matrixValue /**Value to set for given property name. */
            );
            /**Sets the integer matrix for the given property name. Exception will be raised if invalid property name is used.
                      This is a two dimensional array encoded into a single array. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetIntegerMatrix
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int nRows /** Number of Rows in the 2D matrix */,
                int nColumns /** Number of Columns in the 2D matrix */,
                const std::vector<int> & matrixValue /**Value to set for given property name. */
            );
            /**Gets the integer matrix for the given index. Exception will be raised if invalid index is used.
                      This is a two dimensional array encoded into a single array.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetIntegerMatrix
            (
                int propertyIndex /** Index */,
                int* nRows /** Number of Rows in the 2D matrix */,
                int* nColumns /** Number of Columns in the 2D matrix */
            );
            /**Gets the double matrix for the given property name. Exception will be raised if invalid property name is used.
                        This is a two dimensional array encoded into a single array.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetDoubleMatrix
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int* nRows /** Number of Rows in the 2D matrix */,
                int* nColumns /** Number of Columns in the 2D matrix */
            );
            /**Gets the double matrix for the given property name. Exception will be raised if invalid property name is used.
                        This is a two dimensional array encoded into a single array.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            std::vector<double> GetDoubleMatrix
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int* nRows /** Number of Rows in the 2D matrix */,
                int* nColumns /** Number of Columns in the 2D matrix */
            );
            /**Sets the double matrix for the given property name. Exception will be raised if invalid property name is used.
                      This is a two dimensional array encoded into a single array. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDoubleMatrix
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int nRows /** Number of Rows in the 2D matrix */,
                int nColumns /** Number of Columns in the 2D matrix */,
                const std::vector<double> & matrixValue /**Value to set for given property name. */
            );
            /**Sets the double matrix for the given property name. Exception will be raised if invalid property name is used.
                      This is a two dimensional array encoded into a single array. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetDoubleMatrix
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int nRows /** Number of Rows in the 2D matrix */,
                int nColumns /** Number of Columns in the 2D matrix */,
                const std::vector<double> & matrixValue /**Value to set for given property name. */
            );
            /**Gets the double matrix for the given index. Exception will be raised if invalid index is used.
                        This is a two dimensional array encoded into a single array.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetDoubleMatrix
            (
                int propertyIndex /** Index */,
                int* nRows /** Number of Rows in the 2D matrix */,
                int* nColumns /** Number of Columns in the 2D matrix */
            );
            /**Gets the value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetFile
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXString GetFile
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets the value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFile
            (
                const NXString & propertyName /** Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /**Value to set for given property name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets the value for the given property name. Exception will be raised if invalid property name is used. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetFile
            (
                const char * propertyName /** Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * value /**Value to set for given property name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the value for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetFile
            (
                int propertyIndex /** Index */
            );
            /**Gets the value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::PropertyList * GetArray
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the value for the given property name. Exception will be raised if invalid property name is used.  @return Value to get for given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::BlockStyler::PropertyList * GetArray
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Gets the value for the given index. Exception will be raised if invalid index is used.  @return Value to get for given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::PropertyList * GetArray
            (
                int propertyIndex /** Index */
            );
            /**Sets the filter for the given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectionFilter
            (
                const NXString & propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Selection::SelectionAction maskAction /** Mask action */,
                const std::vector<NXOpen::Selection::MaskTriple> & maskTriples /** Mask triples */
            );
            /**Sets the filter for the given property name. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetSelectionFilter
            (
                const char * propertyName /**Name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Selection::SelectionAction maskAction /** Mask action */,
                const std::vector<NXOpen::Selection::MaskTriple> & maskTriples /** Mask triples */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
