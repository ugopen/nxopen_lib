#ifndef NXOpen_WIDTHDEFINITION_HXX_INCLUDED
#define NXOpen_WIDTHDEFINITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     WidthDefinition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ColorWidth.hxx>
#include <NXOpen/CustomWidth.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/WidthDefinition.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class WidthDefinition;
    class ColorWidth;
    class CustomWidth;
    class _WidthDefinitionBuilder;
    class WidthDefinitionImpl;
    /**
        Represents a @link WidthDefinition WidthDefinition@endlink , which is a representation of an NX width 
        palette.  It gives the units in which all the widths are stored, single width information, 
        the 3 custom width definitions, and an entry for each color.
        
     <br>  Created in NX5.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  WidthDefinition : public TaggedObject
    {
        private: WidthDefinitionImpl * m_widthdefinition_impl;
        private: friend class  _WidthDefinitionBuilder;
        protected: WidthDefinition();
        public: ~WidthDefinition();
        /**Returns  the 'use' member.  The use member specifies the primary selection of 
                    which type of width assignment to use.
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: int Use
        (
        );
        /**Sets  the 'use' member.  The use member specifies the primary selection of 
                    which type of width assignment to use.
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUse
        (
            int use /** use */ 
        );
        /**Returns  the single width type selection
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: int Single
        (
        );
        /**Sets  the single width type selection
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSingle
        (
            int single /** single */ 
        );
        /**Returns  the single width. The 'single_width' member contains the last-typed value for
                    the user-defined width to use when CGME_width_user is selected for member 'single'.
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: double SingleWidth
        (
        );
        /**Sets  the single width. The 'single_width' member contains the last-typed value for
                    the user-defined width to use when CGME_width_user is selected for member 'single'.
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSingleWidth
        (
            double singleWidth /** singlewidth */ 
        );
        /**Returns  the single source. The 'single_source' member contains a value when the 
                    'single' member is CGME_width_std or CGME_width_custom. The value
                    is the index in the 'custom' width array or the standard width
                    index value. Both are assumed to be in internal order, normal,
                    thick, and thin for 0, 1, and 2, respectively.
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: int SingleSource
        (
        );
        /**Sets  the single source. The 'single_source' member contains a value when the 
                    'single' member is CGME_width_std or CGME_width_custom. The value
                    is the index in the 'custom' width array or the standard width
                    index value. Both are assumed to be in internal order, normal,
                    thick, and thin for 0, 1, and 2, respectively.
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSingleSource
        (
            int singleSource /** singlesource */ 
        );
        /** Gets the custom widths array.  There will be 3 CustomWidth objects.  @return Array of CustomWidth objects. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::CustomWidth *> GetCustomWidths
        (
        );
        /** Gets the color widths. The 'widths' array is indexed by the color index straight
                    out of the database, or 1-216.  Therefore the array is one
                    longer than the actual number of colors, or 217. 
                 @return Array of ColorWidth objects.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::ColorWidth *> GetColorWidths
        (
        );
        /**Returns  the units.  All the widths are stored in these units. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: int Units
        (
        );
        /**Sets  the units.  All the widths are stored in these units. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUnits
        (
            int units /** units */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
