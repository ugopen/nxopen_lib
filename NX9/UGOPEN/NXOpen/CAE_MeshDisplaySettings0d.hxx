#ifndef NXOpen_CAE_MESHDISPLAYSETTINGS0D_HXX_INCLUDED
#define NXOpen_CAE_MESHDISPLAYSETTINGS0D_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_MeshDisplaySettings0d.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_MeshDisplaySettings.hxx>
#include <NXOpen/CAE_MeshDisplayTypes.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class MeshDisplaySettings0d;
    }
    namespace CAE
    {
        class MeshDisplaySettings;
    }
    namespace CAE
    {
    }
    namespace CAE
    {
        class MeshDisplaySettings0dImpl;
        /** Represents 0d Mesh Display Settings  <br> To obtain an instance of this class use CAE::Mesh, 
                                   CAE::MeshCollector, or CAE::MeshCollectorOccurrence classes  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  MeshDisplaySettings0d : public CAE::MeshDisplaySettings
        {
            private: MeshDisplaySettings0dImpl * m_meshdisplaysettings0d_impl;
            /// \cond NX_NO_DOC 
            public: explicit MeshDisplaySettings0d(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual ~MeshDisplaySettings0d();
            /**Returns  the display element text visibility setting. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool DisplayText
            (
            );
            /**Sets  the display element text visibility setting. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDisplayText
            (
                bool visibility /** visibility */ 
            );
            /**Returns  the element marker display setting. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::MarkerType0d ElementMarker
            (
            );
            /**Sets  the element marker display setting. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetElementMarker
            (
                NXOpen::CAE::MarkerType0d marker /** marker */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
