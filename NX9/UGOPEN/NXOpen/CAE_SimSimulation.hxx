#ifndef NXOpen_CAE_SIMSIMULATION_HXX_INCLUDED
#define NXOpen_CAE_SIMSIMULATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SimSimulation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SimSimulation;
    }
    namespace CAE
    {
        class AutoBCBuilder;
    }
    namespace CAE
    {
        class AutoPairsBuilder;
    }
    namespace CAE
    {
        class CaeDOFSetCollection;
    }
    namespace CAE
    {
        class CaeRegion;
    }
    namespace CAE
    {
        class CaeRegionBuilder;
    }
    namespace CAE
    {
        class CaeRegionCollection;
    }
    namespace CAE
    {
        class CorrelManager;
    }
    namespace CAE
    {
        class DurabilityManager;
    }
    namespace CAE
    {
        class FEModelOccurrence;
    }
    namespace CAE
    {
        class LaminateManager;
    }
    namespace CAE
    {
        class LaminateMetaSol;
    }
    namespace CAE
    {
        class LaminateMetaSolBuilder;
    }
    namespace CAE
    {
        class LaminateQuickPostReport;
    }
    namespace CAE
    {
        class LaminateQuickPostReportBuilder;
    }
    namespace CAE
    {
        namespace Optimization
        {
            class DAOOptimizationManager;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSOptimizationManager;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class Manager;
        }
    }
    namespace CAE
    {
        class ResultMeasureCollection;
    }
    namespace CAE
    {
        class SimBC;
    }
    namespace CAE
    {
        class SimBCBuilder;
    }
    namespace CAE
    {
        class SimBcPlotContoursBuilder;
    }
    namespace CAE
    {
        class SimBcXyPlotBuilder;
    }
    namespace CAE
    {
        class SimConditionSeqMgr;
    }
    namespace CAE
    {
        class SimConditionSequence;
    }
    namespace CAE
    {
        class SimConstraintCollection;
    }
    namespace CAE
    {
        class SimLbcFolderCollection;
    }
    namespace CAE
    {
        class SimLoadCollection;
    }
    namespace CAE
    {
        class SimMotionLoadsBuilder;
    }
    namespace CAE
    {
        class SimMotionLoadsListItemBuilder;
    }
    namespace CAE
    {
        class SimRecipeCollection;
    }
    namespace CAE
    {
        class SimSimulationObjectCollection;
    }
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class SimSolutionCollection;
    }
    namespace CAE
    {
        class SimSolutionStep;
    }
    class NXObject;
    class Unit;
    namespace CAE
    {
        class _SimSimulationBuilder;
        class SimSimulationImpl;
        /**  @brief  This is the root object in a .sim file. Only one instance of this class will exist in each fem part file 

           <br> To obtain an instance of this class, use @link CAE::SimPart::Simulation  CAE::SimPart::Simulation @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SimSimulation : public NXObject
        {
            private: SimSimulationImpl * m_simsimulation_impl;
            private: friend class  _SimSimulationBuilder;
            protected: SimSimulation();
            public: ~SimSimulation();
            /**Returns  the Condition Sequence Manager
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SimConditionSeqMgr * ConditionSeqManager
            (
            );
            /**Returns  the active solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolution * ActiveSolution
            (
            );
            /**Sets  the active solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetActiveSolution
            (
                NXOpen::CAE::SimSolution * activeSolution /** the active solution  @link CAE::SimSolution CAE::SimSolution@endlink */
            );
            /** Creates a solution
                      @return  the created @link CAE::SimSolution CAE::SimSolution@endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolution * CreateSolution
            (
                const NXString & solverType /** name of the solver   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & analysisType /** name of the analysis type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & solutionType /** name of the solution type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & name /** name of the solution to be created */
            );
            /** Creates a solution
                      @return  the created @link CAE::SimSolution CAE::SimSolution@endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolution * CreateSolution
            (
                const char * solverType /** name of the solver   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * analysisType /** name of the analysis type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * solutionType /** name of the solution type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * name /** name of the solution to be created */
            );
            /** Creates a solution from a condition sequence
                      @return  the created @link CAE::SimSolution CAE::SimSolution@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link CAE::SimConditionSequence CAE::SimConditionSequence@endlink */,
                const NXString & solverType /** name of the solver   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & analysisType /** name of the analysis type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & solutionType /** name of the solution type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & name /** name of the solution to be created */
            );
            /** Creates a solution from a condition sequence
                      @return  the created @link CAE::SimSolution CAE::SimSolution@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link CAE::SimConditionSequence CAE::SimConditionSequence@endlink */,
                const char * solverType /** name of the solver   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * analysisType /** name of the analysis type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * solutionType /** name of the solution type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * name /** name of the solution to be created */
            );
            /** Creates a solution from a condition sequence and number of integration steps
                      @return  the created @link CAE::SimSolution CAE::SimSolution@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link CAE::SimConditionSequence CAE::SimConditionSequence@endlink */,
                int numSteps /** number of integration steps */,
                const NXString & solverType /** name of the solver   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & analysisType /** name of the analysis type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & solutionType /** name of the solution type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & name /** name of the solution to be created */
            );
            /** Creates a solution from a condition sequence and number of integration steps
                      @return  the created @link CAE::SimSolution CAE::SimSolution@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link CAE::SimConditionSequence CAE::SimConditionSequence@endlink */,
                int numSteps /** number of integration steps */,
                const char * solverType /** name of the solver   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * analysisType /** name of the analysis type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * solutionType /** name of the solution type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * name /** name of the solution to be created */
            );
            /** Creates a solution from a condition sequence and integration step size
                      @return  the created @link CAE::SimSolution CAE::SimSolution@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link CAE::SimConditionSequence CAE::SimConditionSequence@endlink */,
                double stepSize /** size of integration steps */,
                NXOpen::Unit * stepUnit /** step size @link Unit Unit@endlink */,
                const NXString & solverType /** name of the solver   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & analysisType /** name of the analysis type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & solutionType /** name of the solution type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & name /** name of the solution to be created */
            );
            /** Creates a solution from a condition sequence and integration step size
                      @return  the created @link CAE::SimSolution CAE::SimSolution@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link CAE::SimConditionSequence CAE::SimConditionSequence@endlink */,
                double stepSize /** size of integration steps */,
                NXOpen::Unit * stepUnit /** step size @link Unit Unit@endlink */,
                const char * solverType /** name of the solver   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * analysisType /** name of the analysis type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * solutionType /** name of the solution type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * name /** name of the solution to be created */
            );
            /** Delete the solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteSolution
            (
                NXOpen::CAE::SimSolution * solution /** the @link CAE::SimSolution CAE::SimSolution@endlink  to be deleted */
            );
            /** Clone the solution
                      @return  the  newly created @link CAE::SimSolution CAE::SimSolution@endlink   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolution * CloneSolution
            (
                NXOpen::CAE::SimSolution * oldSolution /** the @link CAE::SimSolution CAE::SimSolution@endlink  to be cloned */,
                const NXString & suggestedName /** name to use instead of default name (may be NULL)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Clone the solution
                      @return  the  newly created @link CAE::SimSolution CAE::SimSolution@endlink   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolution * CloneSolution
            (
                NXOpen::CAE::SimSolution * oldSolution /** the @link CAE::SimSolution CAE::SimSolution@endlink  to be cloned */,
                const char * suggestedName /** name to use instead of default name (may be NULL)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a step and add to the solution
                      @return  step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * CreateSolutionStep
            (
                NXOpen::CAE::SimSolution * solution /** the solution to which the step will be added,
                                                                                                 if a NULL is passed the current active solution
                                                                                                 will be used */,
                int stepType /** index of the step type */,
                const NXString & name /** name of the step */
            );
            /** Creates a step and add to the solution
                      @return  step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolutionStep * CreateSolutionStep
            (
                NXOpen::CAE::SimSolution * solution /** the solution to which the step will be added,
                                                                                                 if a NULL is passed the current active solution
                                                                                                 will be used */,
                int stepType /** index of the step type */,
                const char * name /** name of the step */
            );
            /** Creates a BC builder for the load descriptor passed
                      @return  bc builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForLoadDescriptor
            (
                const NXString & bcDescName /** name of the load descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & bcName /** name of the load to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a BC builder for the load descriptor passed
                      @return  bc builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForLoadDescriptor
            (
                const char * bcDescName /** name of the load descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * bcName /** name of the load to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a BC builder for the load descriptor passed
                      @return  bc builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForLoadDescriptor
            (
                const NXString & bcDescName /** name of the load descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & bcName /** name of the load to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int label /** load label */
            );
            /** Creates a BC builder for the load descriptor passed
                      @return  bc builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForLoadDescriptor
            (
                const char * bcDescName /** name of the load descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * bcName /** name of the load to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int label /** load label */
            );
            /** Creates a BC builder for the constraint descriptor passed
                      @return  bc builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForConstraintDescriptor
            (
                const NXString & bcDescName /** name of the constraint descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & bcName /** name of the constraint to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a BC builder for the constraint descriptor passed
                      @return  bc builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForConstraintDescriptor
            (
                const char * bcDescName /** name of the constraint descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * bcName /** name of the constraint to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a BC builder for the constraint descriptor passed
                      @return  bc builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForConstraintDescriptor
            (
                const NXString & bcDescName /** name of the constraint descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & bcName /** name of the constraint to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int label /** constraint label */
            );
            /** Creates a BC builder for the constraint descriptor passed
                      @return  bc builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForConstraintDescriptor
            (
                const char * bcDescName /** name of the constraint descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * bcName /** name of the constraint to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int label /** constraint label */
            );
            /** Creates a BC builder for the simulation object descriptor passed
                      @return  bc builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForSimulationObjectDescriptor
            (
                const NXString & bcDescName /** name of the simulation object descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & bcName /** name of the simulation object to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a BC builder for the simulation object descriptor passed
                      @return  bc builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForSimulationObjectDescriptor
            (
                const char * bcDescName /** name of the simulation object descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * bcName /** name of the simulation object to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a BC builder for the simulation object descriptor passed
                      @return  bc builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForSimulationObjectDescriptor
            (
                const NXString & bcDescName /** name of the simulation object descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & bcName /** name of the simulation object to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int label /** simulation object label */
            );
            /** Creates a BC builder for the simulation object descriptor passed
                      @return  bc builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForSimulationObjectDescriptor
            (
                const char * bcDescName /** name of the simulation object descriptor   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * bcName /** name of the simulation object to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int label /** simulation object label */
            );
            /** Creates a BC builder for the BC passed
                      @return  bc builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForBc
            (
                NXOpen::CAE::SimBC * bc /** bc object */
            );
            /** Adds the boundary condition to the step in the solution passed.
                        If solution is NULL then the boundary condition is added to the active solution
                        If step is NULL then the boundary condition is added to the active step
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddBc
            (
                NXOpen::CAE::SimBC * bc /** bc object */,
                NXOpen::CAE::SimSolution * solution /** solution */,
                NXOpen::CAE::SimSolutionStep * solutionStep /** solution step */
            );
            /** Creates a @link CAE::AutoPairsBuilder CAE::AutoPairsBuilder@endlink   @return  The AutoPairsBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::AutoPairsBuilder * CreateAutoPairsBuilder
            (
                const NXString & pcBCDescName /** The neutral name of the AutoPairsDescriptor.    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a @link CAE::AutoPairsBuilder CAE::AutoPairsBuilder@endlink   @return  The AutoPairsBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::AutoPairsBuilder * CreateAutoPairsBuilder
            (
                const char * pcBCDescName /** The neutral name of the AutoPairsDescriptor.    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a @link CAE::AutoBCBuilder CAE::AutoBCBuilder@endlink   @return  The AutoBCBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::AutoBCBuilder * CreateAutoBcBuilder
            (
                const NXString & pcBCDescName /** The neutral name of the LBCDescriptor.    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & pcRecipeName /** The name of the AutoBCRecipe    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a @link CAE::AutoBCBuilder CAE::AutoBCBuilder@endlink   @return  The AutoBCBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::AutoBCBuilder * CreateAutoBcBuilder
            (
                const char * pcBCDescName /** The neutral name of the LBCDescriptor.    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * pcRecipeName /** The name of the AutoBCRecipe    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the femodeloccurrence @link  CAE::FEModelOccurrence   CAE::FEModelOccurrence @endlink  assoicated with the simulation object
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::FEModelOccurrence * Femodel
            (
            );
            /** Creates a @link CAE::SimMotionLoadsBuilder CAE::SimMotionLoadsBuilder@endlink   @return  The SimMotionLoadsBuilder object 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimMotionLoadsBuilder * CreateMotionLoadsBuilder
            (
            );
            /** Creates a @link CAE::SimMotionLoadsListItemBuilder CAE::SimMotionLoadsListItemBuilder@endlink   @return  The SimMotionLoadsListItemBuilder object 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimMotionLoadsListItemBuilder * CreateMotionLoadsListItemBuilder
            (
            );
            /** Creates a @link CAE::LaminateMetaSolBuilder CAE::LaminateMetaSolBuilder@endlink   @return  the LaminateMetaSolBuilder object 
             <br>  @deprecated Deprecated in NX8.0.0.  Create the post report with @link CAE::LaminatePostReportCollection::CreateLaminatePostReportBuilder CAE::LaminatePostReportCollection::CreateLaminatePostReportBuilder@endlink  and the graphical report with @link CAE::LaminatePostReportCollection::CreateLaminateGraphicalReportBuilder CAE::LaminatePostReportCollection::CreateLaminateGraphicalReportBuilder@endlink . <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Create the post report with CAE::LaminatePostReportCollection::CreateLaminatePostReportBuilder and the graphical report with CAE::LaminatePostReportCollection::CreateLaminateGraphicalReportBuilder.") NXOpen::CAE::LaminateMetaSolBuilder * CreateLaminateMetaSolBuilder
            (
                NXOpen::CAE::LaminateMetaSol * tMetaSol /** The meta solution */
            );
            /** Creates a @link CAE::CaeRegionBuilder CAE::CaeRegionBuilder@endlink   @return  The RegionBuilder object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeRegionBuilder * CreateCaeRegionBuilder
            (
                const NXString & pcRegionDescName /** The neutral name of the region descriptor.    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::CaeRegion * tRegion /** The region if we are editing it, or NULL if we are creating a new one */
            );
            /** Creates a @link CAE::CaeRegionBuilder CAE::CaeRegionBuilder@endlink   @return  The RegionBuilder object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::CaeRegionBuilder * CreateCaeRegionBuilder
            (
                const char * pcRegionDescName /** The neutral name of the region descriptor.    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::CaeRegion * tRegion /** The region if we are editing it, or NULL if we are creating a new one */
            );
            /** Creates a @link CAE::LaminateQuickPostReportBuilder CAE::LaminateQuickPostReportBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX8.0.0.  Create the post report with @link CAE::LaminatePostReportCollection::CreateLaminatePostReportBuilder CAE::LaminatePostReportCollection::CreateLaminatePostReportBuilder@endlink  and the graphical report with @link CAE::LaminatePostReportCollection::CreateLaminateQuickReportBuilder CAE::LaminatePostReportCollection::CreateLaminateQuickReportBuilder@endlink . <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Create the post report with CAE::LaminatePostReportCollection::CreateLaminatePostReportBuilder and the graphical report with CAE::LaminatePostReportCollection::CreateLaminateQuickReportBuilder.") NXOpen::CAE::LaminateQuickPostReportBuilder * CreateLaminateQuickPostReportBuilder
            (
                NXOpen::CAE::LaminateQuickPostReport * tSpec /** the quick post summary report */
            );
            /** Creates a @link CAE::SimBcPlotContoursBuilder CAE::SimBcPlotContoursBuilder@endlink   @return  The SimBcPlotContoursBuilder object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SimBcPlotContoursBuilder * CreateSimBcPlotContoursBuilder
            (
            );
            /** Creates a @link CAE::SimBcXyPlotBuilder CAE::SimBcXyPlotBuilder@endlink   @return  The SimBcXyPlotBuilder object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SimBcXyPlotBuilder * CreateSimBcXyPlotBuilder
            (
            );


            /** Returns the load collection belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::SimLoadCollection *Loads();
            /** Returns the constraint collection belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::SimConstraintCollection *Constraints();
            /** Returns the simulation object collection belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::SimSimulationObjectCollection *SimulationObjects();
            /** Returns the response simulation manager belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::ResponseSimulation::Manager *ResponseSimulationManager();
            /** Returns the correl manager belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::CorrelManager *CorrelManager();
            /** Returns the simulation recipe collection belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::SimRecipeCollection *SimulationRecipes();
            /** Returns the CAE region collection belonging to this sim part 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::CAE::CaeRegionCollection *CaeRegions();
            /** Returns the CAE DOFSet collection belonging to this sim part 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::CAE::CaeDOFSetCollection *CaeDOFSets();
            /** Returns the durability manager belonging to this sim part 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::CAE::DurabilityManager *DurabilityManager();
            /** Returns the CAE Solution collection belonging to this sim part 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::CAE::SimSolutionCollection *Solutions();
            /** Returns the laminate manager belonging to this sim part 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::CAE::LaminateManager *LaminateManager();
            /** Returns the optimization manager belonging to this sim part 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::CAE::Optimization::TBSOptimizationManager *TBSOptimizationManager();
            /** Returns the Design and Analysis optimization manager belonging to this sim part 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::CAE::Optimization::DAOOptimizationManager *OptimizationManager();
            /** Returns the CAE ResultMeasure collection belonging to this sim part 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::CAE::ResultMeasureCollection *ResultMeasures();
            /** Returns the CAE SimLbcFolder collection belonging to this sim part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::CAE::SimLbcFolderCollection *LbcFolders();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
