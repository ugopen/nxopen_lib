#ifndef NXOpen_UISTYLER_REALSCALE_HXX_INCLUDED
#define NXOpen_UISTYLER_REALSCALE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_RealScale.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UIStyler
    {
        class RealScale;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        class RealScaleImpl;
        /** Represents a RealScale for UI Styler 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  RealScale : public UIStyler::StylerItem
        {
            public: /** 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> ValueChanged;
            public: /**Called when a dialog user moves the slider to a new position. 
                Do not terminate the dialog with a value-changed callback. 
                The dialog should always return UF_UI_CB_CONTINUE_DIALOG. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Drag;
            private: RealScaleImpl * m_realscale_impl;
            /// \cond NX_NO_DOC 
            public: explicit RealScale(void *ptr);
            /// \endcond 
            /**Called when a dialog user moves the slider up and down the scale. 
                For example, if a user moves the slider from 0.0 to 10.0, 
                the dialog calls the drag callback 100 times, one for each value that the slider moves across. 
                Do not terminate the dialog with a drag callback. The dialog should always return UF_UI_CB_CONTINUE_DIALOG.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddValueChangedHandler
            (
                const NXOpen::UIStyler::RealScale::ValueChanged&  valuechangedevent /** Callback for value changed event */,
                bool isDialogLaunchingEvent /** TRUE if dialog is going to launch, FALSE if not */
            );
            /**Registers dtag callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddDragHandler
            (
                const NXOpen::UIStyler::RealScale::Drag&  dragevent /** Callback for add drag event */,
                bool isDialogLaunchingEvent /** TRUE if dialog is going to launch, FALSE if not */
            );
            /** Sets limits 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLimits
            (
                double minimumValue /** Real minimum value */,
                double maximumValue /** Real maximum value */
            );
            /** Sets labels 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLabels
            (
                const NXString & minimumLabel /** String minimum label   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & maximumLabel /** String maximum label   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets labels 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetLabels
            (
                const char * minimumLabel /** String minimum label   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * maximumLabel /** String maximum label   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets decimal precision 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDecimalPrecision
            (
                int digits /** The number significant digits */
            );
            /**Sets  the item value 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetItemValue
            (
                double itemVal /** New real value for the slider. It must be within the min/max range */
            );
            /**Returns  the item value 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double ItemValue
            (
            );
            /**Sets  the sensitivity 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /** TRUE if sensitive, FALSE if insensitive */
            );
            /**Returns  the sensitivity 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Sensitivity
            (
            );
            /**Sets  the visibility 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /** TRUE if visible, FALSE if invisible */
            );
            /**Returns  the visibility 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Visibility
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
