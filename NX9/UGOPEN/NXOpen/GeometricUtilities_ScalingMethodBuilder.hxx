#ifndef NXOpen_GEOMETRICUTILITIES_SCALINGMETHODBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_SCALINGMETHODBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_ScalingMethodBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/GeometricUtilities_ScalingMethodBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class ScalingMethodBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    class Point;
    class Section;
    namespace GeometricUtilities
    {
        class _ScalingMethodBuilderBuilder;
        class ScalingMethodBuilderImpl;
        /**
            Represents a @link GeometricUtilities::ScalingMethodBuilder GeometricUtilities::ScalingMethodBuilder@endlink 
            
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  ScalingMethodBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This enum represents the scaling method option. By default, it is set to Constant.
                        Uniform and Lateral scaling options are invalid if only 1 guide is selected. */
            public: enum ScalingOptions
            {
                ScalingOptionsConstant/** Constant */,
                ScalingOptionsByBlendingFunction/** Blending Function */,
                ScalingOptionsByAnotherCurve/** Another Curve */,
                ScalingOptionsByAPoint/** A Point */,
                ScalingOptionsByAreaLaw/** Area Law */,
                ScalingOptionsByPerimeterLaw/** Perimeter Law */,
                ScalingOptionsUniform/** Uniform, available only if 2 guides are selected */,
                ScalingOptionsLateral/** Lateral, available only if 2 guides are selected */
            };

            /** This enum represents the blending function type, if the scaling by BlendingFunction is selected. */
            public: enum BlendingFunctionTypes
            {
                BlendingFunctionTypesLinear/** Linear */,
                BlendingFunctionTypesCubic/** Cubic */
            };

            private: ScalingMethodBuilderImpl * m_scalingmethodbuilder_impl;
            private: friend class  _ScalingMethodBuilderBuilder;
            protected: ScalingMethodBuilder();
            public: ~ScalingMethodBuilder();
            /**Returns  the scaling method option. Except for Uniform and Lateral scaling methods, additional parameters and/or inputs are required. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ScalingMethodBuilder::ScalingOptions ScalingOption
            (
            );
            /**Sets  the scaling method option. Except for Uniform and Lateral scaling methods, additional parameters and/or inputs are required. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScalingOption
            (
                NXOpen::GeometricUtilities::ScalingMethodBuilder::ScalingOptions scalingOption /** scalingoption */ 
            );
            /**Returns  the scale factor. For Constant scaling method, the scale factor will be applied to all sections along the guide. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double ScaleFactor
            (
            );
            /**Sets  the scale factor. For Constant scaling method, the scale factor will be applied to all sections along the guide. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScaleFactor
            (
                double scaleFactor /** scalefactor */ 
            );
            /**Returns  the blending function. Allows linear or cubic scaling between specified starting and ending scale factors, which 
                        correspond to the start and end of the guide string. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ScalingMethodBuilder::BlendingFunctionTypes BlendingFunctionType
            (
            );
            /**Sets  the blending function. Allows linear or cubic scaling between specified starting and ending scale factors, which 
                        correspond to the start and end of the guide string. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBlendingFunctionType
            (
                NXOpen::GeometricUtilities::ScalingMethodBuilder::BlendingFunctionTypes blendingFunctionType /** blendingfunctiontype */ 
            );
            /**Returns  the start blend scale factor. For scaling by Blending Function, the start scale factor will be applied at the
                        starting of the guide curve. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double StartBlendScaleFactor
            (
            );
            /**Sets  the start blend scale factor. For scaling by Blending Function, the start scale factor will be applied at the
                        starting of the guide curve. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartBlendScaleFactor
            (
                double startBlendScaleFactor /** startblendscalefactor */ 
            );
            /**Returns  the end blend scale factor. For scaling by Blending Function, the end scale factor will be applied at the
                        end point of the guide curve. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double EndBlendScaleFactor
            (
            );
            /**Sets  the end blend scale factor. For scaling by Blending Function, the end scale factor will be applied at the
                        end point of the guide curve. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndBlendScaleFactor
            (
                double endBlendScaleFactor /** endblendscalefactor */ 
            );
            /**Returns  the scaling curve. For scaling by Another Curve, the scale at any given point is based on the length of the 
                        ruling between the guide string and the input scaling curve. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * ScalingCurve
            (
            );
            /**Returns  the scaling point. For scaling by a Point, the scale at any given point is based on the length of the 
                        ruling between the guide string and the input point. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ScalingPoint
            (
            );
            /**Sets  the scaling point. For scaling by a Point, the scale at any given point is based on the length of the 
                        ruling between the guide string and the input point. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScalingPoint
            (
                NXOpen::Point * scalingPoint /** scalingpoint */ 
            );
            /**Returns  the area law. For scaling by Area Law, the input law governs the cross sectional area at the start and end of the guide curve. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * AreaLaw
            (
            );
            /**Returns  the perimeter law. For scaling by Perimeter Law, the input law governs the perimeter of the sections at the start and end of the guide curve. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * PerimeterLaw
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
