#ifndef NXOpen_CAE_OPTIMIZATION_TBSTOPOLOGYSENSITIVITYOPTIMIZATIONPARAMETERS_HXX_INCLUDED
#define NXOpen_CAE_OPTIMIZATION_TBSTOPOLOGYSENSITIVITYOPTIMIZATIONPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Optimization_TBSTopologySensitivityOptimizationParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Optimization_TBSOptimizationParameters.hxx>
#include <NXOpen/CAE_Optimization_TBSEigenvalueOptimizationParameters.hxx>
#include <NXOpen/CAE_Optimization_TBSTopologySensitivityOptimizationParameters.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Optimization
        {
            class TBSTopologySensitivityOptimizationParameters;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSEigenvalueOptimizationParameters;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSOptimizationParameters;
        }
    }
    class Expression;
    namespace CAE
    {
        namespace Optimization
        {
            class _TBSTopologySensitivityOptimizationParametersBuilder;
            class TBSTopologySensitivityOptimizationParametersImpl;
            /** Represents the parameters to control an optimization in sensitivity strategy 
             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  TBSTopologySensitivityOptimizationParameters : public CAE::Optimization::TBSOptimizationParameters
            {
                /** the method defines how the densities are updated in the method of moving asymptotes */
                public: enum DensityUpdate
                {
                    DensityUpdateNormal/** Normal strategy */,
                    DensityUpdateConservative/** Conservative strategy */,
                    DensityUpdateAgressive/** Agressive strategy */
                };

                /**  the relationshp between relative density and relative element stiffness */
                public: enum MaterialInterpolation
                {
                    MaterialInterpolationSimp/** Solid Isotropic material with penalization */,
                    MaterialInterpolationRamp/** Rational approximation of material properties*/
                };

                private: TBSTopologySensitivityOptimizationParametersImpl * m_tbstopologysensitivityoptimizationparameters_impl;
                private: friend class  _TBSTopologySensitivityOptimizationParametersBuilder;
                protected: TBSTopologySensitivityOptimizationParameters();
                public: ~TBSTopologySensitivityOptimizationParameters();
                /**Returns  the parameter for how the densities are updated 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSTopologySensitivityOptimizationParameters::DensityUpdate DensityUpdateOption
                (
                );
                /**Sets  the parameter for how the densities are updated 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetDensityUpdateOption
                (
                    NXOpen::CAE::Optimization::TBSTopologySensitivityOptimizationParameters::DensityUpdate densityUpdateOption /** densityupdateoption */ 
                );
                /**Returns  the move limit on design variables 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double DensityMove
                (
                );
                /**Sets  the move limit on design variables 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetDensityMove
                (
                    double densityMove /** densitymove */ 
                );
                /**Returns  the material interpolation scheme 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSTopologySensitivityOptimizationParameters::MaterialInterpolation MaterialInterpolationOption
                (
                );
                /**Sets  the material interpolation scheme 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetMaterialInterpolationOption
                (
                    NXOpen::CAE::Optimization::TBSTopologySensitivityOptimizationParameters::MaterialInterpolation materialInterpolationOption /** materialinterpolationoption */ 
                );
                /**Returns  the filter for mesh independence and minimum size 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * FilterRadius
                (
                );
                /**Returns  the eigenvalue optimization control parameters 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSEigenvalueOptimizationParameters * EigenvalueParameters
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
