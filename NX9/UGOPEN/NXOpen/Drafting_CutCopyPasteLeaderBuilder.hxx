#ifndef NXOpen_DRAFTING_CUTCOPYPASTELEADERBUILDER_HXX_INCLUDED
#define NXOpen_DRAFTING_CUTCOPYPASTELEADERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drafting_CutCopyPasteLeaderBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drafting_CutCopyPasteLeaderBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_drafting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drafting
    {
        class CutCopyPasteLeaderBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class SelectTaggedObject;
    class View;
    namespace Drafting
    {
        class _CutCopyPasteLeaderBuilderBuilder;
        class CutCopyPasteLeaderBuilderImpl;
        /**
                Represents a Drafting Paste, especially when reassociating a leader on paste.
            
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_DRAFTINGEXPORT  CutCopyPasteLeaderBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: CutCopyPasteLeaderBuilderImpl * m_cutcopypasteleaderbuilder_impl;
            private: friend class  _CutCopyPasteLeaderBuilderBuilder;
            protected: CutCopyPasteLeaderBuilder();
            public: ~CutCopyPasteLeaderBuilder();
            /**Returns  the selection to reassociate leader 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObject * Selection
            (
            );
            /**Returns  the selection to reassociate single leader 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObject * LeaderSelection
            (
            );
            /**Returns  the flag to reassociate a leader 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReassociateLeader
            (
            );
            /**Sets  the flag to reassociate a leader 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetReassociateLeader
            (
                bool reassociateLeader /** reassociateleader */ 
            );
            /**Returns  the destination view.  Either a drafting view or sheet view. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::View * DestinationView
            (
            );
            /**Sets  the destination view.  Either a drafting view or sheet view. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDestinationView
            (
                NXOpen::View * destinationView /** destinationview */ 
            );
            /** Set the final motion from the drop location. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMoveOnCommit
            (
                const NXOpen::Matrix3x3 & rot /** rotational part of motion */,
                const NXOpen::Vector3d & trans /** translation part of motion */
            );
            /**Returns  the variable of is leader selection or not
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsLeaderSelection
            (
            );
            /**Sets  the variable of is leader selection or not
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLeaderSelection
            (
                bool isLeaderSelection /** True If it is leader selection*/
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
