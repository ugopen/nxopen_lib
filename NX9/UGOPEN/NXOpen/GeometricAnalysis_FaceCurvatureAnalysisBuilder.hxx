#ifndef NXOpen_GEOMETRICANALYSIS_FACECURVATUREANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_FACECURVATUREANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_FaceCurvatureAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricAnalysis_FaceCurvatureAnalysisBuilder.hxx>
#include <NXOpen/GeometricUtilities_DisplayResolutionBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class FaceCurvatureAnalysisBuilder;
    }
    class Builder;
    class Direction;
    class DisplayableObject;
    namespace GeometricUtilities
    {
        class DisplayResolutionBuilder;
    }
    class Plane;
    class SelectDisplayableObject;
    class SelectDisplayableObjectList;
    namespace GeometricAnalysis
    {
        class _FaceCurvatureAnalysisBuilderBuilder;
        class FaceCurvatureAnalysisBuilderImpl;
        /**
                Represents a @link GeometricAnalysis::FaceCurvatureAnalysisBuilder GeometricAnalysis::FaceCurvatureAnalysisBuilder@endlink  builder.
                Use @link GeometricAnalysis::FaceCurvatureAnalysisBuilder GeometricAnalysis::FaceCurvatureAnalysisBuilder@endlink  to compute different
                types of curvature analysis for selected faces.  The result of the curvature analysis is
                displayed as color maps and contour lines on the faces.  For more details see the NX
                documentation for Face Curvature Analysis.
             <br> To create a new instance of this class, use @link GeometricAnalysis::AnalysisObjectCollection::CreateFaceCurvatureAnalysisBuilder  GeometricAnalysis::AnalysisObjectCollection::CreateFaceCurvatureAnalysisBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ContourRefinement </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ContourShift </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DisplayType </td> <td> 
         
        Colormap </td> </tr> 

        <tr><td> 
         
        MapCenter </td> <td> 
         
        50 </td> </tr> 

        <tr><td> 
         
        MapRange </td> <td> 
         
        100 </td> </tr> 

        <tr><td> 
         
        NormalOption </td> <td> 
         
        Manipulator </td> </tr> 

        <tr><td> 
         
        NumberOfContours </td> <td> 
         
        10 </td> </tr> 

        <tr><td> 
         
        Resolution.AngleTolerance </td> <td> 
         
        15.0 </td> </tr> 

        <tr><td> 
         
        Resolution.EdgeTolerance </td> <td> 
         
        0.005 </td> </tr> 

        <tr><td> 
         
        Resolution.FaceTolerance </td> <td> 
         
        0.005 </td> </tr> 

        <tr><td> 
         
        Resolution.Resolution </td> <td> 
         
        Standard </td> </tr> 

        <tr><td> 
         
        Resolution.WidthTolerance </td> <td> 
         
        0.3 </td> </tr> 

        <tr><td> 
         
        SectionOption </td> <td> 
         
        Manipulator </td> </tr> 

        <tr><td> 
         
        ShowZeroContour </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICANALYSISEXPORT  FaceCurvatureAnalysisBuilder : public Builder
        {
            /** Represents the face curvature types. */
            public: enum CurvatureTypes
            {
                CurvatureTypesGaussian/** Gausssian */,
                CurvatureTypesAbsolute/** Absolute */,
                CurvatureTypesMinimum/** Minimum */,
                CurvatureTypesMaximum/** Maximum */,
                CurvatureTypesMean/** Mean */,
                CurvatureTypesNormal/** Normal */,
                CurvatureTypesSectional/** Sectional */,
                CurvatureTypesU/** U */,
                CurvatureTypesV/** V */
            };

            /** Represents the display types. */
            public: enum DisplayTypes
            {
                DisplayTypesColormap/** Color Map only */,
                DisplayTypesContours/** Contours */,
                DisplayTypesColormapAndContours/** Color Map and Contours */
            };

            /** Represents the scaling types for curvature values.
                     */
            public: enum ScaleTypes
            {
                ScaleTypesLinear/** Linear Scaling (No Scaling) */,
                ScaleTypesLog/** Log Scaling */,
                ScaleTypesArea/** Equalized by Area */
            };

            /** Methods of specifiying the direction for normal and section curvatures.*/
            public: enum DirectionTypes
            {
                DirectionTypesPrimitive/** vector or plane */,
                DirectionTypesManipulator/** orientation maninpulator */
            };

            private: FaceCurvatureAnalysisBuilderImpl * m_facecurvatureanalysisbuilder_impl;
            private: friend class  _FaceCurvatureAnalysisBuilderBuilder;
            protected: FaceCurvatureAnalysisBuilder();
            public: ~FaceCurvatureAnalysisBuilder();
            /**Returns  the faces on which to perform curvature analysis. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * SelectObject
            (
            );
            /** Reverses all normals. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void ReverseAllNormals
            (
            );
            /** Reverses an individual face normal. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void ReverseIndividualNormal
            (
                NXOpen::DisplayableObject * face /** face */ 
            );
            /**Returns  the individual face normal. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * ReverseIndividual
            (
            );
            /**Returns  the option to show zero curvature contour line. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowZeroContour
            (
            );
            /**Sets  the option to show zero curvature contour line. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetShowZeroContour
            (
                bool showContour /** showcontour */ 
            );
            /**Returns  the number of contour lines to compute and display. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfContours
            (
            );
            /**Sets  the number of contour lines to compute and display. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetNumberOfContours
            (
                int numberOfContours /** numberofcontours */ 
            );
            /**Returns  the contour refinement level, in the range 0-6. Increasing values compute more detailed and 
                        accurate contour lines on the face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int ContourRefinement
            (
            );
            /**Sets  the contour refinement level, in the range 0-6. Increasing values compute more detailed and 
                        accurate contour lines on the face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetContourRefinement
            (
                int contourRefinement /** contourrefinement */ 
            );
            /**Returns  the starting contour shift or bias value, as % of the standard contour interval. Valid values are -100 to 100. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double ContourShift
            (
            );
            /**Sets  the starting contour shift or bias value, as % of the standard contour interval. Valid values are -100 to 100. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetContourShift
            (
                double contourShift /** contourshift */ 
            );
            /**Returns  the color map and contour range, as % of the full range of curvature values present in the data. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double MapRange
            (
            );
            /**Sets  the color map and contour range, as % of the full range of curvature values present in the data. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetMapRange
            (
                double mapRange /** maprange */ 
            );
            /**Returns  the center point of the color mapping and contouring, as % of the full range of
                        curvature values present in the data. 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double MapCenter
            (
            );
            /**Sets  the center point of the color mapping and contouring, as % of the full range of
                        curvature values present in the data. 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetMapCenter
            (
                double mapCenter /** mapcenter */ 
            );
            /**Returns  the normal for the case of normal curvature type. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceCurvatureAnalysisBuilder::DirectionTypes NormalOption
            (
            );
            /**Sets  the normal for the case of normal curvature type. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetNormalOption
            (
                NXOpen::GeometricAnalysis::FaceCurvatureAnalysisBuilder::DirectionTypes normalOption /** normaloption */ 
            );
            /**Returns  the curvature type to compute and display.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceCurvatureAnalysisBuilder::CurvatureTypes CurvatureType
            (
            );
            /**Sets  the curvature type to compute and display.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetCurvatureType
            (
                NXOpen::GeometricAnalysis::FaceCurvatureAnalysisBuilder::CurvatureTypes curvatureType /** curvaturetype */ 
            );
            /**Returns  the display type for curvature values.  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceCurvatureAnalysisBuilder::DisplayTypes DisplayType
            (
            );
            /**Sets  the display type for curvature values.  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetDisplayType
            (
                NXOpen::GeometricAnalysis::FaceCurvatureAnalysisBuilder::DisplayTypes displayType /** displaytype */ 
            );
            /**Returns  the scaling type of curvature values. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceCurvatureAnalysisBuilder::ScaleTypes ScaleType
            (
            );
            /**Sets  the scaling type of curvature values. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetScaleType
            (
                NXOpen::GeometricAnalysis::FaceCurvatureAnalysisBuilder::ScaleTypes scaleType /** scaletype */ 
            );
            /**Returns  the normal vector for the case when normal curvature values are to be computed and displayed.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * NormalVector
            (
            );
            /**Sets  the normal vector for the case when normal curvature values are to be computed and displayed.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetNormalVector
            (
                NXOpen::Direction * normalVector /** normalvector */ 
            );
            /**Returns  the section curvature plane when sectional curvature values are to be computed and displayed. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * CurvatureSectionPlane
            (
            );
            /**Sets  the section curvature plane when sectional curvature values are to be computed and displayed. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetCurvatureSectionPlane
            (
                NXOpen::Plane * curvatureSectionPlane /** curvaturesectionplane */ 
            );
            /**Returns  the normal origin when normal curvature values are to be computed and displayed.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d NormalOrigin
            (
            );
            /**Sets  the normal origin when normal curvature values are to be computed and displayed.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetNormalOrigin
            (
                const NXOpen::Point3d & normalOrigin /** normalorigin */ 
            );
            /**Returns  the normal orientation when the normal curvature values are to be computed and displayed. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 NormalOrientation
            (
            );
            /**Sets  the normal orientation when the normal curvature values are to be computed and displayed. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetNormalOrientation
            (
                const NXOpen::Matrix3x3 & normalOrientation /** normalorientation */ 
            );
            /**Returns  whether to use a section plane or maninpulator for sectional curvatures. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceCurvatureAnalysisBuilder::DirectionTypes SectionOption
            (
            );
            /**Sets  whether to use a section plane or maninpulator for sectional curvatures. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetSectionOption
            (
                NXOpen::GeometricAnalysis::FaceCurvatureAnalysisBuilder::DirectionTypes sectionOption /** sectionoption */ 
            );
            /**Returns  the section origin for sectional curvatures. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d SectionOrigin
            (
            );
            /**Sets  the section origin for sectional curvatures. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetSectionOrigin
            (
                const NXOpen::Point3d & sectionOrigin /** sectionorigin */ 
            );
            /**Returns  the section orientation for sectional curvatures. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 SectionOrientation
            (
            );
            /**Sets  the section orientation for sectional curvatures. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetSectionOrientation
            (
                const NXOpen::Matrix3x3 & sectionOrientation /** sectionorientation */ 
            );
            /**Returns  the tesselation resolution to use for curvature color map and contours. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DisplayResolutionBuilder * Resolution
            (
            );
            /** Updates reverse map. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void UpdateReverseMap
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
