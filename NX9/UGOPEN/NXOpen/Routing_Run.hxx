#ifndef NXOpen_ROUTING_RUN_HXX_INCLUDED
#define NXOpen_ROUTING_RUN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Run.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_RunItem.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class Run;
    }
    namespace Assemblies
    {
        class Component;
    }
    class NXObject;
    class ObjectList;
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class RoutingSystem;
    }
    namespace Routing
    {
        class RunItem;
    }
    namespace Routing
    {
        class _RunBuilder;
        class RunImpl;
        /** Routing Run object references components and stocks which comprise a piping run.  <br> To create an instance of this class us @link Routing::RunCollection::CreateRun Routing::RunCollection::CreateRun@endlink   <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  Run : public NXObject
        {
            /** Represents the status of a run */
            public: enum Status
            {
                StatusValid/** Run is valid. All items are connected and all segments have
                                                                stocks assigned on them */,
                StatusBroken/** Run is broken. All items are not connected end to end */,
                StatusIncomplete/** Run is incomplete. Some segments do not have stock assigned on them*/
            };

            /** Represents discrepancies in the run compared to another run */
            public: enum CompareStatus
            {
                CompareStatusNone/** Run has no compare status. Compare operation is not invoked yet */,
                CompareStatusOk/** No missing, extra or discrepancy items */,
                CompareStatusMissingRun/** Entire run is missing */,
                CompareStatusExtraRun/** Entire run is extra */,
                CompareStatusMissingItem/** Item or items are missing from the run */,
                CompareStatusExtraItem/** Extra item or items present in the run */,
                CompareStatusDiscrepancy/** Items have characteristics discrepancies */
            };

            /** Represents result of flip component */
            public: enum FlipStatus
            {
                FlipStatusSuccess/** Component is flipped. */,
                FlipStatusNotTwoPorts/** Given component ports are not equal to two ports.  */,
                FlipStatusUnequalConstraints/** Each ports has different number of constraints. */,
                FlipStatusPortPositionMismatch/** Ports are not collinear and opposite or perpendicular. */,
                FlipStatusFlowTypeMismatch/** Ports are defined with ambiguous flow types. */,
                FlipStatusFollowsFlow/** Ports correctly aligned with flow. No flipping done. */,
                FlipStatusRunFlowNotDefined/** Flow is not defined on Run. Component can't be flipped. */,
                FlipStatusCannotFlip/** Run is deleted or there are no segments attached to component. Component cannot be flipped. */
            };

            private: RunImpl * m_run_impl;
            private: friend class  _RunBuilder;
            protected: Run();
            public: ~Run();
            /** Retrieves the run_id of run  @return  Run id of run 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString GetRunId
            (
            );
            /** Retrieves the run type of run  @return  Run type of run 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString GetRunType
            (
            );
            /** Retrieves the from items of a run. From items are extracted ports or run  @return  All from items of the run 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::NXObject *> GetFromItems
            (
            );
            /** Retrieves the data of the "From" items of a run  @return  Array of data for the "From" items. 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::RunItem *> GetFromItemData
            (
            );
            /** Retrieves the to items of a run. To items are extracted ports or run @return  All to items of the run 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::NXObject *> GetToItems
            (
            );
            /** Retrieves the data of the "To" items of a run  @return  Array of data for the "To" items. 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::RunItem *> GetToItemData
            (
            );
            /** Retrieves the member items of a run. Member items are extracted ports, stocks,
                        or segments.  @return  All member items of the run 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link Routing::Run::GetMembers Routing::Run::GetMembers@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use Routing::Run::GetMembers instead.") std::vector<NXOpen::NXObject *> GetMemberItems
            (
            );
            /** Retrieves the data of the "Member" items of a run  @return  Array of data for the "Member" items. 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::RunItem *> GetMemberItemData
            (
            );
            /** Edits an existing run with new items. NOTE: Removes any existing items in the run and adds these new items  @return  Valid, broken or incomplete run 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::Run::Status Edit
            (
                const NXString & runId /** Unique identifier of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & runType /** Type of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & from /** Array of to items. Must be @link Port Port@endlink ,
                                                             @link Routing::Run Routing::Run@endlink  or @link Routing::ControlPoint Routing::ControlPoint@endlink  */,
                const std::vector<NXOpen::NXObject *> & to /** Array of to items. Must be @link Routing::Port Routing::Port@endlink ,
                                                            @link Routing::Run Routing::Run@endlink  or @link Routing::ControlPoint Routing::ControlPoint@endlink  */,
                const std::vector<NXOpen::NXObject *> & member /** Array of member items. Must be @link Assemblies::Component Assemblies::Component@endlink ,
                                                             @link Routing::ISegment Routing::ISegment@endlink  or Routing.Stock */
            );
            /** Edits an existing run with new items. NOTE: Removes any existing items in the run and adds these new items  @return  Valid, broken or incomplete run 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            NXOpen::Routing::Run::Status Edit
            (
                const char * runId /** Unique identifier of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * runType /** Type of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & from /** Array of to items. Must be @link Port Port@endlink ,
                                                             @link Routing::Run Routing::Run@endlink  or @link Routing::ControlPoint Routing::ControlPoint@endlink  */,
                const std::vector<NXOpen::NXObject *> & to /** Array of to items. Must be @link Routing::Port Routing::Port@endlink ,
                                                            @link Routing::Run Routing::Run@endlink  or @link Routing::ControlPoint Routing::ControlPoint@endlink  */,
                const std::vector<NXOpen::NXObject *> & member /** Array of member items. Must be @link Assemblies::Component Assemblies::Component@endlink ,
                                                             @link Routing::ISegment Routing::ISegment@endlink  or Routing.Stock */
            );
            /** Edits an existing run with new run item data. NOTE: Removes any existing items in the run and adds these new items. 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void Edit
            (
                const NXString & runId /** Unique identifier of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & runType /** Type of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::Routing::RunItem *> & fromItems /** Array of "From" item data. */,
                const std::vector<NXOpen::Routing::RunItem *> & toItems /** Array of "To" item data. */,
                const std::vector<NXOpen::Routing::RunItem *> & memberItems /** Array of "Member" item data. */
            );
            /** Edits an existing run with new run item data. NOTE: Removes any existing items in the run and adds these new items. 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void Edit
            (
                const char * runId /** Unique identifier of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * runType /** Type of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::Routing::RunItem *> & fromItems /** Array of "From" item data. */,
                const std::vector<NXOpen::Routing::RunItem *> & toItems /** Array of "To" item data. */,
                const std::vector<NXOpen::Routing::RunItem *> & memberItems /** Array of "Member" item data. */
            );
            /** Ask the status of run  @return  Valid, broken or incomplete run 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::Run::Status GetRunStatus
            (
            );
            /** Ask the @link Routing::RoutingSystem Routing::RoutingSystem@endlink  run belongs to  @return  RoutingSystem run belongs to 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::RoutingSystem * GetRoutingSystem
            (
            );
            /** Ask the compare status of run  @return  Run compare status 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::Run::CompareStatus GetRunCompareStatus
            (
            );
            /** Get flow direction of a run segment  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: int RunSegmentGetFlowDirection
            (
                NXOpen::Routing::ISegment * segment /** segment */ 
            );
            /** Set flow direction of a run segment 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RunSegmentSetFlowDirection
            (
                NXOpen::Routing::ISegment * segment /** segment */ ,
                int flowState /** flow state */ 
            );
            /** Reverse flow direction of a run segment 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RunSegmentReverseFlowDirection
            (
                NXOpen::Routing::ISegment * segment /** segment */ 
            );
            /** This will detect spools in a run  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::ObjectList *> DetectRunSpools
            (
            );
            /** This will delete the Run path and member items in a run 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void DeleteRunPath
            (
            );
            /** Get all of the characteristics values on the this object.  @return  
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::CharacteristicList * GetCharacteristics
            (
            );
            /** Set all of the characteristics values on this object. 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetCharacteristics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /** Flips a component that is part of a run by rotating the component so that it's input and output ports reverse.  @return  Flip Component status 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::Run::FlipStatus FlipComponent
            (
                NXOpen::Assemblies::Component * component /** component */ 
            );
            /** Set a Run as Active. All the newly created segments and parts through Linear Path, Spline Path,
                        Heal Path and parts placed through Place Part will be added as members to the Active Run.
                        The specification of the Run will be set as Active Specification.
                        The previous active run will be made Inactive. Use @link Routing::Run::MakeInactive Routing::Run::MakeInactive@endlink  to make a Run as Inactive.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void MakeActive
            (
            );
            /** Set a Run as Inactive and the Active Specification will be changed to Default Specification of the
                        discipline, if no discipline is being used then the Active Specification will be set to None.
                        Use @link Routing::Run::MakeActive Routing::Run::MakeActive@endlink  to make a Run as Active. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void MakeInactive
            (
            );
            /** Get status of Run, Active or Inactive  @return   
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool GetActiveStatus
            (
            );
            /** Retrieves the member items of a run. Member items are part occurrence of ports, stocks,
                        or segments.  @return  All member items of the run 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::NXObject *> GetMembers
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
