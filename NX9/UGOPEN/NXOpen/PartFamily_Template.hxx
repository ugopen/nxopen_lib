#ifndef NXOpen_PARTFAMILY_TEMPLATE_HXX_INCLUDED
#define NXOpen_PARTFAMILY_TEMPLATE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PartFamily_Template.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/PartFamily_FamilyAttribute.hxx>
#include <NXOpen/PartFamily_Template.hxx>
#include <NXOpen/libnxopencpp_partfamily_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PartFamily
    {
        class Template;
    }
    class NXObject;
    namespace PartFamily
    {
        class FamilyAttribute;
    }
    namespace PartFamily
    {
        class _TemplateBuilder;
        class TemplateImpl;
        /** This class represents a part family template       
             <br> Use @link PartFamily::TemplateManager::CreatePartFamily PartFamily::TemplateManager::CreatePartFamily@endlink  to get the instance of this class.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_PARTFAMILYEXPORT  Template : public NXObject
        {
            private: TemplateImpl * m_template_impl;
            private: friend class  _TemplateBuilder;
            protected: Template();
            public: ~Template();
            /** Returns the attributes of the part family template.
                        These are the attributes committed onto the core object
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::PartFamily::FamilyAttribute *> GetAttributes
            (
            );
            /** Returns the valid attribute values for a given part family attribute.
                        These will be useful for selecting a valid match_criteria 
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXString> GetValidAttributeValues
            (
                NXOpen::PartFamily::FamilyAttribute * attr /** attr */ 
            );
            /**Returns  the name of the part family template 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXString TemplateName
            (
            );
            /**Returns  the version of the part family template 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int Version
            (
            );
            /** Obtains the members in part family.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void GetMembers
            (
                std::vector<NXString> & members /** members */ 
            );
            /** Returns true if a member name is valid, false otherwise @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool IsValidMemberName
            (
                const NXString & memberName /** membername */ 
            );
            /** Returns true if a member name is valid, false otherwise @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            bool IsValidMemberName
            (
                const char * memberName /** membername */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
