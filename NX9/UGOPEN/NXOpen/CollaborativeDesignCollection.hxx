#ifndef NXOpen_COLLABORATIVEDESIGNCOLLECTION_HXX_INCLUDED
#define NXOpen_COLLABORATIVEDESIGNCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CollaborativeDesignCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_SubsetBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class CollaborativeDesignCollection;
    class CollaborativeContentManager;
    class CollaborativeDesign;
    namespace Assemblies
    {
        class SubsetBuilder;
    }
    class TaggedObject;
    class CollaborativeDesignCollectionImpl;
    /**
        A collection of collaborative designs.
     <br> To obtain an instance of this class, refer to @link CollaborativeContentManager  CollaborativeContentManager @endlink  <br> 
     <br>  Created in NX8.5.0.  <br>  
    */
    class NXOPENCPPEXPORT  CollaborativeDesignCollection : public TaggedObjectCollection
    {
        private: CollaborativeDesignCollectionImpl * m_collaborativedesigncollection_impl;
        private: NXOpen::CollaborativeContentManager* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit CollaborativeDesignCollection(NXOpen::CollaborativeContentManager *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~CollaborativeDesignCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::CollaborativeDesignCollection::iterator::copy,initializer)
        class iterator
        {
        public:
            /** Value type associated with iterator*/ 

            typedef CollaborativeDesign * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            { // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::CollaborativeDesignCollection *context) : m_context(context), m_current(NULL_TAG)
            { // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::CollaborativeDesignCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Finds the @link CollaborativeDesign CollaborativeDesign@endlink  with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            FindObject is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  Collaborative design found, or null if no such collaborative design exists.
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        public: NXOpen::CollaborativeDesign * FindObject
        (
            const NXString & journalIdentifier /** Name of the collaborative design to be found */
        );
        /** Finds the @link CollaborativeDesign CollaborativeDesign@endlink  with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            FindObject is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  Collaborative design found, or null if no such collaborative design exists.
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        NXOpen::CollaborativeDesign * FindObject
        (
            const char * journalIdentifier /** Name of the collaborative design to be found */
        );
        /**Returns  the @link Assemblies::SubsetBuilder Assemblies::SubsetBuilder@endlink  used to edit the current subset in the
                subset task environment 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        public: NXOpen::Assemblies::SubsetBuilder * CurrentSubsetBuilder
        (
        );
        /** Finds the @link TaggedObject TaggedObject@endlink  with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            Find is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  Object found, or null if no such object exists 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        public: NXOpen::TaggedObject * Find
        (
            const NXString & journalIdentifier /** Identifier of the @link TaggedObject TaggedObject@endlink  to be found */
        );
        /** Finds the @link TaggedObject TaggedObject@endlink  with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            Find is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  Object found, or null if no such object exists 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        NXOpen::TaggedObject * Find
        (
            const char * journalIdentifier /** Identifier of the @link TaggedObject TaggedObject@endlink  to be found */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
