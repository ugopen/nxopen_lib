#ifndef NXOpen_CATIAV5CREATOR_HXX_INCLUDED
#define NXOpen_CATIAV5CREATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Catiav5Creator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Catiav5Creator.hxx>
#include <NXOpen/ObjectSelector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Catiav5Creator;
    class Builder;
    class ObjectSelector;
    class _Catiav5CreatorBuilder;
    class Catiav5CreatorImpl;
    /** Represents a @link Catiav5Creator Catiav5Creator@endlink  to be used when exporting the CATIA V5 Data
        This class is created using @link DexManager DexManager@endlink .
        NULL object will be returned from Commit()  <br> To create a new instance of this class, use @link DexManager::CreateCatiav5Creator  DexManager::CreateCatiav5Creator @endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    EnableHybridDesign </td> <td> 
     
    1 </td> </tr> 

    <tr><td> 
     
    ExportFrom </td> <td> 
     
    DisplayPart </td> </tr> 

    <tr><td> 
     
    IncludeBlankedObj </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    IncludeIndWireFrame </td> <td> 
     
    0 </td> </tr> 

    </table>  

     <br>  Created in NX6.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  Catiav5Creator : public Builder
    {
        /** Export from options */
        public: enum ExportFromOption
        {
            ExportFromOptionDisplayPart/**  export data from displayed part */,
            ExportFromOptionExistingPart/**  export data from existing part which is on disk */
        };

        private: Catiav5CreatorImpl * m_catiav5creator_impl;
        private: friend class  _Catiav5CreatorBuilder;
        protected: Catiav5Creator();
        public: ~Catiav5Creator();
        /**Returns  the export from - this option will determine if data from display part or existing part is exported 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Catiav5Creator::ExportFromOption ExportFrom
        (
        );
        /**Sets  the export from - this option will determine if data from display part or existing part is exported 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetExportFrom
        (
            NXOpen::Catiav5Creator::ExportFromOption exportFrom /** exportfrom */ 
        );
        /**Returns  the input file  - name of file which is being exported.
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString InputFile
        (
        );
        /**Sets  the input file  - name of file which is being exported.
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetInputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the input file  - name of file which is being exported.
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetInputFile
        (
            const char * filename /** filename */ 
        );
        /** Save the settings - this will save the settings to a file sepcified
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SaveSettings
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Save the settings - this will save the settings to a file sepcified
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SaveSettings
        (
            const char * filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  the export selection block - the object selection will be done by this block. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ObjectSelector * ExportSelectionBlock
        (
        );
        /**Returns  the output file - the exported data will be written to file specified 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString OutputFile
        (
        );
        /**Sets  the output file - the exported data will be written to file specified 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetOutputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the output file - the exported data will be written to file specified 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetOutputFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the settings file - The definition file to read default options 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString SettingsFile
        (
        );
        /**Sets  the settings file - The definition file to read default options 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSettingsFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the settings file - The definition file to read default options 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetSettingsFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the include ind wire frame  if set true then indpendent wireframe objects will be exported
                    to catia v5 file 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool IncludeIndWireFrame
        (
        );
        /**Sets  the include ind wire frame  if set true then indpendent wireframe objects will be exported
                    to catia v5 file 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludeIndWireFrame
        (
            bool includeIndWireFrame /** includeindwireframe */ 
        );
        /**Returns  the include blanked obj - If set to true then blanked objects will also be written to catia 
                    file. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool IncludeBlankedObj
        (
        );
        /**Sets  the include blanked obj - If set to true then blanked objects will also be written to catia 
                    file. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludeBlankedObj
        (
            bool includeBlankedObj /** includeblankedobj */ 
        );
        /**Returns  the enable hybrid design - If set to true then it will enable hybrid design  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: bool EnableHybridDesign
        (
        );
        /**Sets  the enable hybrid design - If set to true then it will enable hybrid design  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetEnableHybridDesign
        (
            bool enableHybridDesign /** enablehybriddesign */ 
        );
        /**Returns  the file save flag - this should be set to false if doing File Export 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool FileSaveFlag
        (
        );
        /**Sets  the file save flag - this should be set to false if doing File Export 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFileSaveFlag
        (
            bool doingFileSave /** doingfilesave */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
