#ifndef NXOpen_ANNOTATIONS_PARTSLISTBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_PARTSLISTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_PartsListBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_PartsListBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class PartsListBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace Annotations
    {
        class _PartsListBuilderBuilder;
        class PartsListBuilderImpl;
        /** 
             Represents a @link Annotations::PartsListBuilder Annotations::PartsListBuilder@endlink .
             This class queries and sets settings specific to parts list when creating or
             editing parts list settings.
             <br> This is a sub-builder class and cannot be directly instantiated  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  PartsListBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /**
                      Grow direction options
                      The options specify the direction of growth for the parts list
                    */
            public: enum PartsListGrowDirectionOptions
            {
                PartsListGrowDirectionOptionsUp/** up */ ,
                PartsListGrowDirectionOptionsDown/** down */ 
            };

            /** Represents leader attachment for vertical callout groups. */
            public: enum PartsListVerticalGroupLeaderAttachment
            {
                PartsListVerticalGroupLeaderAttachmentTop/** top */ ,
                PartsListVerticalGroupLeaderAttachmentBottom/** bottom */ 
            };

            /**
                      Locked deleted rows options
                      The options specify how to show rows that are locked, but reference components that have been removed from the assembly
                    */
            public: enum PartsListShowLockedDeletedRows
            {
                PartsListShowLockedDeletedRowsStrikethrough/** strikethrough */ ,
                PartsListShowLockedDeletedRowsBlanked/** blanked */ ,
                PartsListShowLockedDeletedRowsHidden/** hidden */ ,
                PartsListShowLockedDeletedRowsOrdinary/** ordinary */ 
            };

            /**
                      Symbol Types
                      The types specify the balloon type used to call out members
                    */
            public: enum PartsListSymbolType
            {
                PartsListSymbolTypeNone/** none */ ,
                PartsListSymbolTypeCircle/** circle */ ,
                PartsListSymbolTypeDividedCircle/** divided circle */ ,
                PartsListSymbolTypeTrianglePointedDown/** triangle pointed down */ ,
                PartsListSymbolTypeTrianglePointedUp/** triangle pointed up */ ,
                PartsListSymbolTypeSquare/** square */ ,
                PartsListSymbolTypeDividedSquare/** divided square */ ,
                PartsListSymbolTypeHexagon/** hexagon */ ,
                PartsListSymbolTypeDividedHexagon/** divided hexagon */ ,
                PartsListSymbolTypeQuadrantCircle/** quadrant circle */ ,
                PartsListSymbolTypeRoundedBox/** rounded box */ ,
                PartsListSymbolTypeUnderline/** underline */ ,
                PartsListSymbolTypeLabel/** label */ 
            };

            /**
                      Main Symbol Text Types
                      Specifies the text to display in the main callout symbol
                    */
            public: enum PartsListMainSymbolText
            {
                PartsListMainSymbolTextNone/** none */ ,
                PartsListMainSymbolTextCallout/** callout */ ,
                PartsListMainSymbolTextPartName/** part name */ ,
                PartsListMainSymbolTextCalloutandQuantity/** calloutand quantity */ ,
                PartsListMainSymbolTextCustom/** custom */ 
            };

            /**
                      Reference Symbol Text Types
                      Specifies the text to display in the reference callout symbol
                    */
            public: enum PartsListReferenceSymbolText
            {
                PartsListReferenceSymbolTextNone/** none */ ,
                PartsListReferenceSymbolTextCallout/** callout */ ,
                PartsListReferenceSymbolTextPartName/** part name */ ,
                PartsListReferenceSymbolTextCalloutandQuantity/** calloutand quantity */ ,
                PartsListReferenceSymbolTextCustom/** custom */ 
            };

            private: PartsListBuilderImpl * m_partslistbuilder_impl;
            private: friend class  _PartsListBuilderBuilder;
            protected: PartsListBuilder();
            public: ~PartsListBuilder();
            /**Returns  the grow direction options that specify the direction of growth for the parts list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PartsListBuilder::PartsListGrowDirectionOptions GrowDirectionOptions
            (
            );
            /**Sets  the grow direction options that specify the direction of growth for the parts list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGrowDirectionOptions
            (
                NXOpen::Annotations::PartsListBuilder::PartsListGrowDirectionOptions growDirectionOptions /** growdirectionoptions */ 
            );
            /**Returns  the show locked deleted rows option to show rows that are locked, but reference components that have been removed from the assembly 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PartsListBuilder::PartsListShowLockedDeletedRows ShowLockedDeletedRows
            (
            );
            /**Sets  the show locked deleted rows option to show rows that are locked, but reference components that have been removed from the assembly 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowLockedDeletedRows
            (
                NXOpen::Annotations::PartsListBuilder::PartsListShowLockedDeletedRows showLockedDeletedRows /** showlockeddeletedrows */ 
            );
            /**Returns  the automatic update option to determine whether or not the parts list updates automatically whenever a change occurs to a referenced object in the model 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticUpdate
            (
            );
            /**Sets  the automatic update option to determine whether or not the parts list updates automatically whenever a change occurs to a referenced object in the model 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAutomaticUpdate
            (
                bool automaticUpdate /** automaticupdate */ 
            );
            /**Returns  the sort on update option that determines whether or not the parts list sorts automatically during update 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool SortOnUpdate
            (
            );
            /**Sets  the sort on update option that determines whether or not the parts list sorts automatically during update 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSortOnUpdate
            (
                bool sortOnUpdate /** sortonupdate */ 
            );
            /**Returns  the Lock Parts List Setup option that determines Is the parts list setup protected/locked 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool LockPartsListSetup
            (
            );
            /**Sets  the Lock Parts List Setup option that determines Is the parts list setup protected/locked 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLockPartsListSetup
            (
                bool lockPartsListSetup /** lockpartslistsetup */ 
            );
            /**Returns  the create new row as locked option that determines whether new rows in the parts list are locked automatically on creation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateNewRowAsLocked
            (
            );
            /**Sets  the create new row as locked option that determines whether new rows in the parts list are locked automatically on creation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCreateNewRowAsLocked
            (
                bool createNewRowAsLocked /** createnewrowaslocked */ 
            );
            /**Returns  the allow manual rows option that determines whether or not manual rows are allowed to be inserted into a parts list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AllowManualRows
            (
            );
            /**Sets  the allow manual rows option that determines whether or not manual rows are allowed to be inserted into a parts list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAllowManualRows
            (
                bool allowManualRows /** allowmanualrows */ 
            );
            /**Returns  the symbol type specifies the balloon type used to call out members 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PartsListBuilder::PartsListSymbolType Symbol
            (
            );
            /**Sets  the symbol type specifies the balloon type used to call out members 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSymbol
            (
                NXOpen::Annotations::PartsListBuilder::PartsListSymbolType symbol /** symbol */ 
            );
            /**Returns  the main symbol text specifies the text to display in the main callout symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PartsListBuilder::PartsListMainSymbolText MainSymbolText
            (
            );
            /**Sets  the main symbol text specifies the text to display in the main callout symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMainSymbolText
            (
                NXOpen::Annotations::PartsListBuilder::PartsListMainSymbolText mainSymbolText /** mainsymboltext */ 
            );
            /**Returns  the main symbol custom text specifies the custom text to display in the main callout symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MainSymbolCustomText
            (
            );
            /**Sets  the main symbol custom text specifies the custom text to display in the main callout symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMainSymbolCustomText
            (
                const NXString & mainSymbolCustomText /** mainsymbolcustomtext */ 
            );
            /**Sets  the main symbol custom text specifies the custom text to display in the main callout symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetMainSymbolCustomText
            (
                const char * mainSymbolCustomText /** mainsymbolcustomtext */ 
            );
            /**Returns  the reference symbol text specifies the text to display in the reference callout symbol
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PartsListBuilder::PartsListReferenceSymbolText ReferenceSymbolText
            (
            );
            /**Sets  the reference symbol text specifies the text to display in the reference callout symbol
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReferenceSymbolText
            (
                NXOpen::Annotations::PartsListBuilder::PartsListReferenceSymbolText referenceSymbolText /** referencesymboltext */ 
            );
            /**Returns  the reference symbol custom text specifies the custom text to display in the main callout symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ReferenceSymbolCustomText
            (
            );
            /**Sets  the reference symbol custom text specifies the custom text to display in the main callout symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReferenceSymbolCustomText
            (
                const NXString & referenceSymbolCustomText /** referencesymbolcustomtext */ 
            );
            /**Sets  the reference symbol custom text specifies the custom text to display in the main callout symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetReferenceSymbolCustomText
            (
                const char * referenceSymbolCustomText /** referencesymbolcustomtext */ 
            );
            /**Returns  the initial callout specifies the text string used to represent the first callout in the parts list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString InitialCallout
            (
            );
            /**Sets  the initial callout specifies the text string used to represent the first callout in the parts list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInitialCallout
            (
                const NXString & initialCallout /** initialcallout */ 
            );
            /**Sets  the initial callout specifies the text string used to represent the first callout in the parts list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetInitialCallout
            (
                const char * initialCallout /** initialcallout */ 
            );
            /**Returns  the increment specifies the value by which consecutive callout values are be incremented 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int Increment
            (
            );
            /**Sets  the increment specifies the value by which consecutive callout values are be incremented 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIncrement
            (
                int increment /** increment */ 
            );
            /**Returns  the characters to skip specifies the characters to be skipped for callouts 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CharToSkip
            (
            );
            /**Sets  the characters to skip specifies the characters to be skipped for callouts 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCharToSkip
            (
                const NXString & charsToSkip /** charstoskip */ 
            );
            /**Sets  the characters to skip specifies the characters to be skipped for callouts 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetCharToSkip
            (
                const char * charsToSkip /** charstoskip */ 
            );
            /**Returns  the callout suffix specifies the suffix to be used for reference symbol text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CalloutSuffix
            (
            );
            /**Sets  the callout suffix specifies the suffix to be used for reference symbol text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCalloutSuffix
            (
                const NXString & calloutSuffix /** calloutsuffix */ 
            );
            /**Sets  the callout suffix specifies the suffix to be used for reference symbol text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetCalloutSuffix
            (
                const char * calloutSuffix /** calloutsuffix */ 
            );
            /**Returns  the highlight manual text specifies whether manual cell text is to be highlighted by delimiters 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool HighlightManualText
            (
            );
            /**Sets  the highlight manual text specifies whether manual cell text is to be highlighted by delimiters 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHighlightManualText
            (
                bool highlightManualText /** highlightmanualtext */ 
            );
            /**Returns  the highlight color specifies the color used for the delimiters that highlight manual cell text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * HighlightColor
            (
            );
            /**Sets  the highlight color specifies the color used for the delimiters that highlight manual cell text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHighlightColor
            (
                NXOpen::NXColor * highlightColor /** highlightcolor */ 
            );
            /**Returns  the flag indicating whether the reference callout suffix will be displayed. A value of true indicates that the suffix will be displayed. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowReferenceCalloutSuffix
            (
            );
            /**Sets  the flag indicating whether the reference callout suffix will be displayed. A value of true indicates that the suffix will be displayed. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowReferenceCalloutSuffix
            (
                bool showReferenceCalloutSuffix /** showreferencecalloutsuffix */ 
            );
            /**Returns  the leader attachment to vertical callout groups 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PartsListBuilder::PartsListVerticalGroupLeaderAttachment VerticalGroupAttachment
            (
            );
            /**Sets  the leader attachment to vertical callout groups 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetVerticalGroupAttachment
            (
                NXOpen::Annotations::PartsListBuilder::PartsListVerticalGroupLeaderAttachment position /** position */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
