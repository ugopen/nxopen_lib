#ifndef NXOpen_LAYOUT2D_COMPONENTCOLLECTION_HXX_INCLUDED
#define NXOpen_LAYOUT2D_COMPONENTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Layout2d_ComponentCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Layout2d_DefineComponentAnchorPointBuilder.hxx>
#include <NXOpen/Layout2d_DefineComponentBuilder.hxx>
#include <NXOpen/Layout2d_InsertComponentBuilder.hxx>
#include <NXOpen/Layout2d_MakeComponentUniqueBuilder.hxx>
#include <NXOpen/Layout2d_NewComponentBuilder.hxx>
#include <NXOpen/Layout2d_PublishComponentBuilder.hxx>
#include <NXOpen/Layout2d_ReplaceComponentBuilder.hxx>
#include <NXOpen/Layout2d_SmashComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_layout2d_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Layout2d
    {
        class ComponentCollection;
    }
    class Part;
    namespace Layout2d
    {
        class Component;
    }
    namespace Layout2d
    {
        class DefineComponentAnchorPointBuilder;
    }
    namespace Layout2d
    {
        class DefineComponentBuilder;
    }
    namespace Layout2d
    {
        class InsertComponentBuilder;
    }
    namespace Layout2d
    {
        class MakeComponentUniqueBuilder;
    }
    namespace Layout2d
    {
        class NewComponentBuilder;
    }
    namespace Layout2d
    {
        class PublishComponentBuilder;
    }
    namespace Layout2d
    {
        class ReplaceComponentBuilder;
    }
    namespace Layout2d
    {
        class SmashComponentBuilder;
    }
    namespace Layout2d
    {
        class ComponentCollectionImpl;
        /** Represents a collection of @link Layout2d::Component Layout2d::Component@endlink s.    <br> To obtain an instance of this class, refer to @link Part  Part @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_LAYOUT2DEXPORT  ComponentCollection : public TaggedObjectCollection
        {
            private: ComponentCollectionImpl * m_componentcollection_impl;
            private: NXOpen::Part* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ComponentCollection(NXOpen::Part *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ComponentCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Layout2d::ComponentCollection::iterator::copy,initializer)
            class iterator
            {
            public:
                /** Value type associated with iterator*/ 

                typedef Layout2d::Component * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                { // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Layout2d::ComponentCollection *context) : m_context(context), m_current(NULL_TAG)
                { // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_LAYOUT2DEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_LAYOUT2DEXPORT  void next();
                NXOpen::Layout2d::ComponentCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the @link  Layout2d::Component   Layout2d::Component @endlink  with the given identifier as recorded in a journal.
                    An object may not return the same value as its JournalIdentifier in different versions of
                    the software. However newer versions of the software should find the same object when
                    FindObject is passed older versions of its journal identifier. In general, this method
                    should not be used in handwritten code and exists to support record and playback of journals.
                    An exception will be thrown if no object can be found with the given journal identifier.  @return  2d component with this identifier 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Layout2d::Component * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the 2d component to be found */
            );
            /** Finds the @link  Layout2d::Component   Layout2d::Component @endlink  with the given identifier as recorded in a journal.
                    An object may not return the same value as its JournalIdentifier in different versions of
                    the software. However newer versions of the software should find the same object when
                    FindObject is passed older versions of its journal identifier. In general, this method
                    should not be used in handwritten code and exists to support record and playback of journals.
                    An exception will be thrown if no object can be found with the given journal identifier.  @return  2d component with this identifier 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Layout2d::Component * FindObject
            (
                const char * journalIdentifier /** Identifier of the 2d component to be found */
            );
            /** Creates a @link Layout2d::DefineComponentBuilder Layout2d::DefineComponentBuilder@endlink  that can create a fully defined 2D 
                        Component with specified content, anchor point, name and reuse library destination folder.
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXOpen::Layout2d::DefineComponentBuilder * CreateDefineComponentBuilder
            (
                NXOpen::Layout2d::Component * component /** the component to be edited, 
                                                                                    NULL in case of new component view.*/
            );
            /** Creates a @link Layout2d::InsertComponentBuilder Layout2d::InsertComponentBuilder@endlink  that inserts a 2d Component instance in the active
                     *  sketch.
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXOpen::Layout2d::InsertComponentBuilder * CreateInsertComponentBuilder
            (
            );
            /** Creates a @link Layout2d::ReplaceComponentBuilder Layout2d::ReplaceComponentBuilder@endlink  that can replace the selected 2d component
                     *   instance with another 2d component definition
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXOpen::Layout2d::ReplaceComponentBuilder * CreateReplaceComponentBuilder
            (
            );
            /** Creates a @link Layout2d::SmashComponentBuilder Layout2d::SmashComponentBuilder@endlink  that can smash the selected 
                     *  2d component instance
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXOpen::Layout2d::SmashComponentBuilder * CreateSmashComponentBuilder
            (
            );
            /** Creates a @link Layout2d::MakeComponentUniqueBuilder Layout2d::MakeComponentUniqueBuilder@endlink  that can create definition
                     *  for the selected 2d component instance
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXOpen::Layout2d::MakeComponentUniqueBuilder * CreateMakeComponentUniqueBuilder
            (
            );
            /** Creates a @link Layout2d::DefineComponentAnchorPointBuilder Layout2d::DefineComponentAnchorPointBuilder@endlink  that can define the Anchor Point location of a
                     *  2d component
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXOpen::Layout2d::DefineComponentAnchorPointBuilder * CreateDefineComponentAnchorPointBuilder
            (
            );
            /** Creates a @link Layout2d::PublishComponentBuilder Layout2d::PublishComponentBuilder@endlink  that can export local definitions into external storage locations
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXOpen::Layout2d::PublishComponentBuilder * CreatePublishComponentBuilder
            (
            );
            /** Creates a @link Layout2d::NewComponentBuilder Layout2d::NewComponentBuilder@endlink  that creates an empty 2d Component instance and stores its
                     *  definition in Local 2D Component folder
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXOpen::Layout2d::NewComponentBuilder * CreateNewComponentBuilder
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
