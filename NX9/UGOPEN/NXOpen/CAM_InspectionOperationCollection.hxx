#ifndef NXOpen_CAM_INSPECTIONOPERATIONCOLLECTION_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONOPERATIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionOperationCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_OperationCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionOperationCollection;
    }
    namespace CAM
    {
        class InspectionSetup;
    }
    namespace CAM
    {
        class InspectionOperation;
    }
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class InspectionAlignmentBuilder;
    }
    namespace CAM
    {
        class InspectionAnalyzeBuilder;
    }
    namespace CAM
    {
        class InspectionAnalyzeOutputBuilder;
    }
    namespace CAM
    {
        class InspectionArcFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionCircleFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionCmmCommandBuilder;
    }
    namespace CAM
    {
        class InspectionCollisionAvoidanceBuilder;
    }
    namespace CAM
    {
        class InspectionConeFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionConstructedFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionCparlnFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionCreatePathsBuilder;
    }
    namespace CAM
    {
        class InspectionCurveFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionCylinderFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionEdgePointFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionGroup;
    }
    namespace CAM
    {
        class InspectionLineFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionLinkPmiBuilder;
    }
    namespace CAM
    {
        class InspectionMeasDataBuilder;
    }
    namespace CAM
    {
        class InspectionOutputOperationBuilder;
    }
    namespace CAM
    {
        class InspectionParplnFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionPathBuilder;
    }
    namespace CAM
    {
        class InspectionPatternFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionPlaneFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionPointFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionSensorBuilder;
    }
    namespace CAM
    {
        class InspectionSphereFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionSurfaceFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionToleranceOperationBuilder;
    }
    namespace CAM
    {
        class InspectionTorusFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionOperationCollectionImpl;
        /** Represents the CMM Inspection operation collection  <br> To obtain an instance of this class, refer to @link CAM::InspectionSetup  CAM::InspectionSetup @endlink  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionOperationCollection : public TaggedObjectCollection
        {
            private: InspectionOperationCollectionImpl * m_inspectionoperationcollection_impl;
            private: NXOpen::CAM::InspectionSetup* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit InspectionOperationCollection(NXOpen::CAM::InspectionSetup *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~InspectionOperationCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::CAM::InspectionOperationCollection::iterator::copy,initializer)
            class iterator
            {
            public:
                /** Value type associated with iterator*/ 

                typedef CAM::InspectionOperation * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                { // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::CAM::InspectionOperationCollection *context) : m_context(context), m_current(NULL_TAG)
                { // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_CAMEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_CAMEXPORT  void next();
                NXOpen::CAM::InspectionOperationCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the InspectionOperation object with the given identifier as recorded in a journal. @return  the found object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionOperation * FindObject
            (
                const NXString & sid /** the name of the object */
            );
            /** Finds the InspectionOperation object with the given identifier as recorded in a journal. @return  the found object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            NXOpen::CAM::InspectionOperation * FindObject
            (
                const char * sid /** the name of the object */
            );
            /** Create an operation of the specified type and subtype under the parent groups. If the value of 
                    use_default_name is true, default name will be used for the created operation; otherwise, the 
                    specified name will be used. @return  the created operation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionOperation * Create
            (
                NXOpen::CAM::InspectionGroup * parentProgramGroup /** the parent program group */,
                NXOpen::CAM::InspectionGroup * parentMethodGroup /** the parent method group */,
                NXOpen::CAM::InspectionGroup * parentToolGroup /** the parent tool group */,
                NXOpen::CAM::InspectionGroup * parentGeometryGroup /** the parent geometry group */,
                const NXString & typeName /** the name of the template type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & subtypeName /** the name of the template subtype   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::OperationCollection::UseDefaultName useDefaultName /** use default name or not */,
                const NXString & newOperationName /** the name of the created operation,
                                                                                               only used when use_default_name == true   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create an operation of the specified type and subtype under the parent groups. If the value of 
                    use_default_name is true, default name will be used for the created operation; otherwise, the 
                    specified name will be used. @return  the created operation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            NXOpen::CAM::InspectionOperation * Create
            (
                NXOpen::CAM::InspectionGroup * parentProgramGroup /** the parent program group */,
                NXOpen::CAM::InspectionGroup * parentMethodGroup /** the parent method group */,
                NXOpen::CAM::InspectionGroup * parentToolGroup /** the parent tool group */,
                NXOpen::CAM::InspectionGroup * parentGeometryGroup /** the parent geometry group */,
                const char * typeName /** the name of the template type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * subtypeName /** the name of the template subtype   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::OperationCollection::UseDefaultName useDefaultName /** use default name or not */,
                const char * newOperationName /** the name of the created operation,
                                                                                               only used when use_default_name == true   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates an Inspection Output Operation Builder  @return  operation builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionOutputOperationBuilder * CreateInspectionOutputOperationBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a CMM Inspection Arc Feature Builder  @return  Inspection Arc Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionArcFeatureBuilder * CreateInspectionArcFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Arc Feature to be edited */
            );
            /** Creates an Inspection Point Feature Builder  @return  Inspection Point Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionPointFeatureBuilder * CreateInspectionPointFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Point Feature to be edited */
            );
            /** Creates an Inspection Plane Feature Builder  @return  Inspection Plane Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionPlaneFeatureBuilder * CreateInspectionPlaneFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Plane Feature to be edited */
            );
            /** Creates a CMM Inspection Path Operation builder  @return  Path operation builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionPathBuilder * CreateInspectionPathBuilder
            (
                NXOpen::CAM::CAMObject * param /** Path operation to be edited */
            );
            /** Creates an Inspection Cylinder Feature Builder  @return  Inspection Cylinder Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionCylinderFeatureBuilder * CreateInspectionCylinderFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Cylinder Feature to be edited */
            );
            /** Creates an Inspection Curve Feature Builder  @return  Inspection Curve Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionCurveFeatureBuilder * CreateInspectionCurveFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Curve Feature to be edited */
            );
            /** Creates an Inspection Surface Feature Builder  @return  Inspection Surface Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionSurfaceFeatureBuilder * CreateInspectionSurfaceFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Surface Feature to be edited */
            );
            /** Creates an Inspection Pattern Feature Builder  @return  Inspection Pattern Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionPatternFeatureBuilder * CreateInspectionPatternFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Pattern Feature to be edited */
            );
            /** Creates a cmm tolerance operation builder  @return  operation builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder * CreateInspectionToleranceOperationBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates an Inspection Alignment Builder  @return  Inspection alignment builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionAlignmentBuilder * CreateInspectionAlignmentBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection alignment to be edited */
            );
            /** Creates a CMM Inspection Cmm Command Builder  @return  Inspection Cmm command builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionCmmCommandBuilder * CreateInspectionCmmCommandBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Cmm command to be edited */
            );
            /** Creates an Inspection Cone Feature Builder  @return  Inspection Cone Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionConeFeatureBuilder * CreateInspectionConeFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Cone Feature to be edited */
            );
            /** Creates an Inspection Sphere Feature Builder  @return  Inspection Sphere Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionSphereFeatureBuilder * CreateInspectionSphereFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Sphere Feature to be edited */
            );
            /** Creates an Inspection Circle Feature Builder  @return  Inspection Circle Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionCircleFeatureBuilder * CreateInspectionCircleFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Circle Feature to be edited */
            );
            /** Creates an Inspection Torus Feature Builder  @return  Inspection Torus Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionTorusFeatureBuilder * CreateInspectionTorusFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Torus Feature to be edited */
            );
            /** Creates an Inspection Cparln Feature Builder  @return  Inspection Cparln Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionCparlnFeatureBuilder * CreateInspectionCparlnFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Cparln Feature to be edited */
            );
            /** Creates an Inspection Parpln Feature Builder  @return  Inspection Parpln Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionParplnFeatureBuilder * CreateInspectionParplnFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Parpln Feature to be edited */
            );
            /** Creates an Inspection Constructed Feature Builder  @return  Inspection Constructed Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionConstructedFeatureBuilder * CreateInspectionConstructedFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Constructed Feature to be edited */
            );
            /** Creates a CMM Inspection Sensor Operation builder  @return  Sensor operation builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionSensorBuilder * CreateInspectionSensorBuilder
            (
                NXOpen::CAM::CAMObject * param /** Sensor operation to be edited */
            );
            /** Creates a CMM Inspection Create Paths dialog builder  @return  Create Paths Dialog builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionCreatePathsBuilder * CreateInspectionCreatePathsBuilder
            (
                NXOpen::CAM::CAMObject * param /** Selected Node */
            );
            /** Creates an Inspection Line Feature Builder  @return  Inspection Line Feature builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionLineFeatureBuilder * CreateInspectionLineFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Inspection Line Feature to be edited */
            );
            /** Creates a CMM Inspection Link PMI dialog builder  @return  Link PMI Dialog builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionLinkPmiBuilder * CreateInspectionLinkPmiBuilder
            (
                NXOpen::CAM::CAMObject * param /** Selected Node */
            );
            /** Sets the Inspection Feature referenced in an Inspection Path. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPathFeature
            (
                NXOpen::CAM::CAMObject * inspectionPath /** Inspection Path */,
                const NXString & featureName /** Feature name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the Inspection Feature referenced in an Inspection Path. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetPathFeature
            (
                NXOpen::CAM::CAMObject * inspectionPath /** Inspection Path */,
                const char * featureName /** Feature name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a CMM Inspection Collision Avoidance dialog builder  @return  Collision Avoidance Dialog builder created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionCollisionAvoidanceBuilder * CreateInspectionCollisionAvoidanceBuilder
            (
                NXOpen::CAM::CAMObject * param /** Selected Node */
            );
            /** Creates a CMM Inspection Analyze Measured Data dialog builder  @return  Analyze Measured Data Dialog builder created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionMeasDataBuilder * CreateInspectionMeasDataBuilder
            (
                NXOpen::CAM::CAMObject * param /** Selected Node */
            );
            /** Creates a CMM Inspection Analyze dialog builder  @return  Analyze Dialog builder created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionAnalyzeBuilder * CreateInspectionAnalyzeBuilder
            (
                NXOpen::CAM::CAMObject * param /** Selected Node */
            );
            /** Creates a CMM Inspection Analyze Output dialog builder  @return  Analyze Output Dialog builder created 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionAnalyzeOutputBuilder * CreateInspectionAnalyzeOutputBuilder
            (
                NXOpen::CAM::CAMObject * param /** Selected Node */
            );
            /** Creates a CMM Inspection Edge Point Feature dialog builder  @return  Edge Point Feature Dialog builder created 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionEdgePointFeatureBuilder * CreateInspectionEdgePointFeatureBuilder
            (
                NXOpen::CAM::CAMObject * param /** Selected Node */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
