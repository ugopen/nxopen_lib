#ifndef NXOpen_PREFERENCES_ROUTINGPART_HXX_INCLUDED
#define NXOpen_PREFERENCES_ROUTINGPART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_RoutingPart.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class RoutingPart;
    }
    namespace Preferences
    {
        class RoutingApplicationView;
    }
    namespace Preferences
    {
        class RoutingPartLibrary;
    }
    namespace Preferences
    {
        class RoutingPartImpl;
        /**  Contains the preferences related to placing/finding/adding parts and generating
                the Routing bill of materials.   <br> To obtain an instance of this class, refer to @link Preferences::RoutingApplicationView  Preferences::RoutingApplicationView @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  RoutingPart
        {
            /** Whether or not use the preferred port when determining placement solutions. */
            public: enum UsePreferredPort
            {
                UsePreferredPortFalse/** false */ ,
                UsePreferredPortTrue/** true */ 
            };

            /** Available methods for determining which port is the preferredport during
                        calculation of placement solutions. */
            public: enum PreferredPortMethod
            {
                PreferredPortMethodAttribute/** Examine an attribute applied to the
                                                                                port, and match it's value to a desired
                                                                                value. */,
                PreferredPortMethodName/** Compare the ports name with a desired value. */
            };

            /** The detail levels available for the Routing bill of material. */
            public: enum DetailLevel
            {
                DetailLevelSummary/** summary */ ,
                DetailLevelItemized/** itemized */ 
            };

            /** The fabrication numbering methods available for the Routing bill of material. */
            public: enum FabricationNumbering
            {
                FabricationNumberingSequence/** Sequential numbering of fabrications in the parts list. */,
                FabricationNumberingOriginal/** Use the fabrication number in the parts list. */
            };

            /** The stock length display options available for the Routing bill of material. */
            public: enum StockLengthDisplay
            {
                StockLengthDisplaySum/** Display single sum for each type of stock. */,
                StockLengthDisplayItem/** Display length of each stock individually. */
            };

            private: RoutingPartImpl * m_routingpart_impl;
            private: NXOpen::Preferences::RoutingApplicationView* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit RoutingPart(NXOpen::Preferences::RoutingApplicationView *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~RoutingPart();
            /**Returns  whether or not to use the preffered placement port during
                        calcluation of placement solutions during place part.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPart::UsePreferredPort UsePreferredPortFlag
            (
            );
            /**Sets  whether or not to use the preffered placement port during
                        calcluation of placement solutions during place part.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetUsePreferredPortFlag
            (
                NXOpen::Preferences::RoutingPart::UsePreferredPort useFlag /** use flag */ 
            );
            /**Returns  the current method for determining the preferred placement port. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPart::PreferredPortMethod PreferredPortMethodFlag
            (
            );
            /** Sets the method for determining the preferred port to 
                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodName NXOpen::Preferences::RoutingPart::PreferredPortMethodName@endlink  and
                        sets the desired port name. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetPreferredPortName
            (
                const NXString & desiredPort /** Port name to match.  Must not be NULL and
                                                                        the length of the string must be less than 50.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the method for determining the preferred port to 
                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodName NXOpen::Preferences::RoutingPart::PreferredPortMethodName@endlink  and
                        sets the desired port name. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetPreferredPortName
            (
                const char * desiredPort /** Port name to match.  Must not be NULL and
                                                                        the length of the string must be less than 50.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the desired port name for method type
                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodName NXOpen::Preferences::RoutingPart::PreferredPortMethodName@endlink   @return  NULL if method is not
                                @link NXOpen::Preferences::RoutingPart::PreferredPortMethodName NXOpen::Preferences::RoutingPart::PreferredPortMethodName@endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString GetPreferredPortName
            (
            );
            /** Sets the method for determining the preferred port to 
                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute@endlink  and
                        sets the desired port attribute and it's value. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetPreferredPortAttribute
            (
                const NXString & attributeName /** Attribute name on port to match.  
                                                                       Must not be NULL and
                                                                       the length of the string must be less than 50.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & attributeValue /** Value of the attribute to match.    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the method for determining the preferred port to 
                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute@endlink  and
                        sets the desired port attribute and it's value. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetPreferredPortAttribute
            (
                const char * attributeName /** Attribute name on port to match.  
                                                                       Must not be NULL and
                                                                       the length of the string must be less than 50.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * attributeValue /** Value of the attribute to match.    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the attribute and it's value for determining the preferred port for method type 
                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute@endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetPreferredPortAttribute
            (
                NXString* attributeName /** NULL if method is not 
                                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute@endlink  */,
                NXString* attributeValue /** NULL if method is not
                                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute@endlink  */
            );
            /**Returns  the maximum number of placement solutions to generate when determining
                        placement solutions for a component. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int MaximumSolutions
            (
            );
            /**Sets  the maximum number of placement solutions to generate when determining
                        placement solutions for a component. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetMaximumSolutions
            (
                int maxSols /** max sols */ 
            );
            /**Returns  the layer to apply to new components. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int Layer
            (
            );
            /**Sets  the layer to apply to new components. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the name of the template Routing bill of material part file. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString BomFormatPart
            (
            );
            /**Sets  the name of the template Routing bill of material part file. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBomFormatPart
            (
                const NXString & bomPart /** bom part */ 
            );
            /**Sets  the name of the template Routing bill of material part file. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetBomFormatPart
            (
                const char * bomPart /** bom part */ 
            );
            /**Returns  the detail level for the Routing bill of material. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPart::DetailLevel BomDetailLevelFlag
            (
            );
            /**Sets  the detail level for the Routing bill of material. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBomDetailLevelFlag
            (
                NXOpen::Preferences::RoutingPart::DetailLevel detail /** detail */ 
            );
            /**Returns  the fabrication numbering for the Routing bill of material. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPart::FabricationNumbering FabricationNumberingFlag
            (
            );
            /**Sets  the fabrication numbering for the Routing bill of material. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetFabricationNumberingFlag
            (
                NXOpen::Preferences::RoutingPart::FabricationNumbering numbering /** numbering */ 
            );
            /**Returns  the stock length display for the Routing bill of material. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPart::StockLengthDisplay StockLengthDisplayFlag
            (
            );
            /**Sets  the stock length display for the Routing bill of material. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockLengthDisplayFlag
            (
                NXOpen::Preferences::RoutingPart::StockLengthDisplay display /** display */ 
            );
            /**Returns  the list of characters that cannot be used when generating sequences
                        of terminals in qualify part. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString InvalidSequenceCharacters
            (
            );
            /**Sets  the list of characters that cannot be used when generating sequences
                        of terminals in qualify part. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetInvalidSequenceCharacters
            (
                const NXString & invalidChars /** invalid chars */ 
            );
            /**Sets  the list of characters that cannot be used when generating sequences
                        of terminals in qualify part. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetInvalidSequenceCharacters
            (
                const char * invalidChars /** invalid chars */ 
            );
            /**Returns  the node in the part library to use for searching for the default
                        elbow to place during create path.  The part library node must 
                        have a type of @link NXOpen::Preferences::RoutingPartLibrary::NodeTypeTable NXOpen::Preferences::RoutingPartLibrary::NodeTypeTable@endlink . A
                        NULL node indicates no default elbow part table. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString DefaultElbowNode
            (
            );
            /**Sets  the node in the part library to use for searching for the default
                        elbow to place during create path.  The part library node must 
                        have a type of @link NXOpen::Preferences::RoutingPartLibrary::NodeTypeTable NXOpen::Preferences::RoutingPartLibrary::NodeTypeTable@endlink . A
                        NULL node indicates no default elbow part table. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDefaultElbowNode
            (
                const NXString & elbowNode /** elbow node */ 
            );
            /**Sets  the node in the part library to use for searching for the default
                        elbow to place during create path.  The part library node must 
                        have a type of @link NXOpen::Preferences::RoutingPartLibrary::NodeTypeTable NXOpen::Preferences::RoutingPartLibrary::NodeTypeTable@endlink . A
                        NULL node indicates no default elbow part table. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetDefaultElbowNode
            (
                const char * elbowNode /** elbow node */ 
            );


            /** The Routing part library. 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Preferences::RoutingPartLibrary *PartLibrary();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
