#ifndef NXOpen_MECHATRONICS_PMNAVFOLDEROBJECT_HXX_INCLUDED
#define NXOpen_MECHATRONICS_PMNAVFOLDEROBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_PMNavFolderObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class PMNavFolderObject;
    }
    class NXObject;
    class TaggedObject;
    namespace Mechatronics
    {
        class _PMNavFolderObjectBuilder;
        class PMNavFolderObjectImpl;
        /** Represents the PMNav Folder object.  <br> Use Mechatronics.PhysicsManager.JA_PHYSICS_MANAGER_CreatePMNavFolderObject to create  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  PMNavFolderObject : public NXObject
        {
            private: PMNavFolderObjectImpl * m_pmnavfolderobject_impl;
            private: friend class  _PMNavFolderObjectBuilder;
            protected: PMNavFolderObject();
            public: ~PMNavFolderObject();
            /** Gets flag which indicates whether the folder is default folder or not. @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsDefault
            (
            );
            /** Gets physics objects.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetObjects
            (
                std::vector<NXOpen::TaggedObject *> & objects /** The physics objects to be gotten */
            );
            /** Adds physics objects.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void AddObjects
            (
                const std::vector<NXOpen::TaggedObject *> & objects /** The physics objects to be added */
            );
            /** Moves physics objects.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void MoveObjects
            (
                const std::vector<NXOpen::TaggedObject *> & objects /** The physics objects to be moved */
            );
            /** Restore physics objects.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void RestoreObjects
            (
                bool restoreAllMembers /** The flag indicates whether restore all the members or not. 
                                                                                                    If it is true, the next input parameters 'count' and 'objects' 
                                                                                                    will be ignored.
                                                                                                    If it is false, only the members specified by 'objects' will be
                                                                                                    restored to default folder.
                                                                                                */,
                const std::vector<NXOpen::TaggedObject *> & objects /** The physics objects to be restored to default folder */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
