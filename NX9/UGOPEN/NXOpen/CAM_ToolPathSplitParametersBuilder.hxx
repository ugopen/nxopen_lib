#ifndef NXOpen_CAM_TOOLPATHSPLITPARAMETERSBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TOOLPATHSPLITPARAMETERSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ToolPathSplitParametersBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class ToolPathSplitParametersBuilder;
    }
    class Builder;
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class _ToolPathSplitParametersBuilderBuilder;
        class ToolPathSplitParametersBuilderImpl;
        /** Represents the Divide Parameters  <br> This object is owned by another builder.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  ToolPathSplitParametersBuilder : public Builder
        {
            /**  Divide type options */
            public: enum SplitTypes
            {
                SplitTypesByCollision/** split at collisions */,
                SplitTypesByTransfer/** split between transfers */
            };

            /**  Transfer using options */
            public: enum TransferUsingMethods
            {
                TransferUsingMethodsNone/** no transfer type */,
                TransferUsingMethodsRampOnShape/** ramp on shape */,
                TransferUsingMethodsLiftAndPlunge/** lift and plunge */
            };

            /**  Transfer type options */
            public: enum TransferTypes
            {
                TransferTypesDirect/** direct transfer type */,
                TransferTypesClearance/** clearance transfer type */,
                TransferTypesLowestSafeZ/** lowest safe z transfer type */
            };

            private: ToolPathSplitParametersBuilderImpl * m_toolpathsplitparametersbuilder_impl;
            private: friend class  _ToolPathSplitParametersBuilderBuilder;
            protected: ToolPathSplitParametersBuilder();
            public: ~ToolPathSplitParametersBuilder();
            /**Returns  the type of split (by tranfer or collision) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolPathSplitParametersBuilder::SplitTypes SplitType
            (
            );
            /**Sets  the type of split (by tranfer or collision) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSplitType
            (
                NXOpen::CAM::ToolPathSplitParametersBuilder::SplitTypes splitTypeValue /** split type value */ 
            );
            /**Returns  the transfer using method (none, ramp on shape, lift and plunge) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolPathSplitParametersBuilder::TransferUsingMethods TransferUsingMethod
            (
            );
            /**Sets  the transfer using method (none, ramp on shape, lift and plunge) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTransferUsingMethod
            (
                NXOpen::CAM::ToolPathSplitParametersBuilder::TransferUsingMethods transferUsingMethod /** transfer using method */ 
            );
            /**Returns  the transfer type (direct, clearance, lowest safe z) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolPathSplitParametersBuilder::TransferTypes TransferType
            (
            );
            /**Sets  the transfer type (direct, clearance, lowest safe z) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTransferType
            (
                NXOpen::CAM::ToolPathSplitParametersBuilder::TransferTypes transferType /** transfer type */ 
            );
            /**Returns  the transfer height 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double TransferHeight
            (
            );
            /**Sets  the transfer height 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTransferHeight
            (
                double transferHeight /** transfer height */ 
            );
            /**Returns  the minimum cut length builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MinimumCutLength
            (
            );
            /**Returns  the overlap distance builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * OverlapDistance
            (
            );
            /**Returns  the transfer height builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * TransferHeightBuilder
            (
            );
            /**Returns  the trimming steep angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double TrimmingSteepAngle
            (
            );
            /**Sets  the trimming steep angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimmingSteepAngle
            (
                double trimmingSteepAngle /** trimmingsteepangle */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
