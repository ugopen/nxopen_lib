#ifndef NXOpen_PDM_PARTOPERATIONBUILDER_HXX_INCLUDED
#define NXOpen_PDM_PARTOPERATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_PartOperationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/IAttributeSourceObjectBuilder.hxx>
#include <NXOpen/PDM_AlternateIdManager.hxx>
#include <NXOpen/PDM_PartOperationBuilder.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class PartOperationBuilder;
    }
    class BasePart;
    class Builder;
    class ErrorList;
    class IAttributeSourceObjectBuilder;
    class NXObject;
    namespace PDM
    {
        class AlternateIdManager;
    }
    namespace PDM
    {
        class LogicalObject;
    }
    namespace PDM
    {
        class _PartOperationBuilderBuilder;
        class PartOperationBuilderImpl;
        /** Represents a builder class that performs various design element operations. 
                The operation can be one of @link PDM::PartOperationBuilder::OperationType PDM::PartOperationBuilder::OperationType@endlink   <br> To create a new instance of this class, use @link PDM::PdmSession::CreateOperationBuilder  PDM::PdmSession::CreateOperationBuilder @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  PartOperationBuilder : public Builder, public virtual IAttributeSourceObjectBuilder
        {
            /** Represents an operation type that can be performed on a part */
            public: enum OperationType
            {
                OperationTypeSaveAs/** Save As Part */,
                OperationTypeRevise/** Revise Part */
            };

            /** This enum is used to specify which non-master parts 
                    should be saved during the save as operation. */
            public: enum NonMasterSaveAs
            {
                NonMasterSaveAsAll/** save all during save as */,
                NonMasterSaveAsNone/** save none during save as */
            };

            /** This enum is used to specify which dependent files
                    should be saved during the save as operation. */
            public: enum DependentFileSaveAs
            {
                DependentFileSaveAsAll/** save all during save as */,
                DependentFileSaveAsNone/** save none during save as */
            };

            private: PartOperationBuilderImpl * m_partoperationbuilder_impl;
            private: friend class  _PartOperationBuilderBuilder;
            protected: PartOperationBuilder();
            public: ~PartOperationBuilder();
            /** Creates the pre-creation objects for the parts 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateLogicalObjects
            (
                std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
            );
            /** Returns the dialog operation Applicable only for operation types 
                        @link PartOperationBuilder::OperationTypeSaveAs PartOperationBuilder::OperationTypeSaveAs@endlink  and 
                        @link PartOperationBuilder::OperationTypeRevise PartOperationBuilder::OperationTypeRevise@endlink  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartOperationBuilder::OperationType GetDialogOperation
            (
            );
            /** Sets the dialog operation. Applicable only for operation types 
                        @link PartOperationBuilder::OperationTypeSaveAs PartOperationBuilder::OperationTypeSaveAs@endlink  and 
                        @link PartOperationBuilder::OperationTypeRevise PartOperationBuilder::OperationTypeRevise@endlink 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDialogOperation
            (
                NXOpen::PDM::PartOperationBuilder::OperationType dialogOperation /** dialogoperation */ 
            );
            /** Sets the selected parts. Applicable only for operation types
                        @link PartOperationBuilder::OperationTypeSaveAs PartOperationBuilder::OperationTypeSaveAs@endlink  and 
                        @link PartOperationBuilder::OperationTypeRevise PartOperationBuilder::OperationTypeRevise@endlink 
                        Also returns an array of parts failed to added, these are not removed from the input array though.
                        @link PDM::PartOperationBuilder::GetOperationFailures PDM::PartOperationBuilder::GetOperationFailures@endlink  can be called to get the errors occurred
                        during this operation.
                        
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedParts
            (
                const std::vector<NXOpen::BasePart *> & selectedParts /** selectedparts */ ,
                std::vector<NXOpen::BasePart *> & failedParts /** failedparts */ 
            );
            /**Returns  the replace all components. This option specifies whether part will be replaced or copied.             
                        Applicable only for operation types 
                        @link PartOperationBuilder::OperationTypeSaveAs PartOperationBuilder::OperationTypeSaveAs@endlink  and 
                        @link PartOperationBuilder::OperationTypeRevise PartOperationBuilder::OperationTypeRevise@endlink 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReplaceAllComponents
            (
            );
            /**Sets  the replace all components. This option specifies whether part will be replaced or copied.             
                        Applicable only for operation types 
                        @link PartOperationBuilder::OperationTypeSaveAs PartOperationBuilder::OperationTypeSaveAs@endlink  and 
                        @link PartOperationBuilder::OperationTypeRevise PartOperationBuilder::OperationTypeRevise@endlink 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReplaceAllComponents
            (
                bool replaceAllComponents /** replaceallcomponents */ 
            );
            /** Returns part operation failures  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ErrorList * GetOperationFailures
            (
            );
            /** Add related part to the part undergoing an operation. Example: if user selects a part
                        for Save As which has Linked Part Modules that should also undergo Save As, they should
                        be added as related parts.
                        Applicable only for operation types 
                        @link PartOperationBuilder::OperationTypeSaveAs PartOperationBuilder::OperationTypeSaveAs@endlink  and 
                        @link PartOperationBuilder::OperationTypeRevise PartOperationBuilder::OperationTypeRevise@endlink 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddRelatedPartToOperate
            (
                NXOpen::BasePart * basePart /** basepart */ ,
                const std::vector<NXOpen::BasePart *> & relatedParts /** relatedparts */ ,
                std::vector<NXString> & relatedPartsReasons /** relatedpartsreasons */ ,
                NXOpen::PDM::PartOperationBuilder::OperationType operation /** operation */ 
            );
            /** Create an instance of a @link PDM::AlternateIdManager PDM::AlternateIdManager@endlink 
                    class that will be used to create alternate ID information while creating the new part.
                    CreateSpec call should happen before calling this method. @return  the new @link PDM::AlternateIdManager PDM::AlternateIdManager@endlink  instance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::AlternateIdManager * GetAlternateIDManager
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ 
            );
            /** Create new specifications for Logical Objects 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateSpecificationsForLogicalObjects
            (
                const std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
            );
            /** Create NonMaster list for the selected logical Object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateNonMasterListForLogicalObject
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ 
            );
            /**Set the nonmasters saveAs option for given logical object
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNonMasterSaveAsOption
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                NXOpen::PDM::PartOperationBuilder::NonMasterSaveAs saveOption /** saveoption */ 
            );
            /** Sets whether or not the non-master part specified will actually
                    get saved during the save as operation. True means that it will be
                    saved. False means that it will not be saved.  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedNonMasterToSaveAs
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const NXString & partName /** the non-master part whose save option is being set here   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets whether or not the non-master part specified will actually
                    get saved during the save as operation. True means that it will be
                    saved. False means that it will not be saved.  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetSelectedNonMasterToSaveAs
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const char * partName /** the non-master part whose save option is being set here   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the name the non-master part will get saved as. It will get saved as the
                    original non-master name if this method is not called.  @return  flag to indicate whether the newName is valid 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool EditNonMasterName
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const NXString & oldName /** the non-master part whose save as name is being set here   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & newName /** the new name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the name the non-master part will get saved as. It will get saved as the
                    original non-master name if this method is not called.  @return  flag to indicate whether the newName is valid 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            bool EditNonMasterName
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const char * oldName /** the non-master part whose save as name is being set here   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * newName /** the new name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Validates @link PDM::LogicalObject PDM::LogicalObject@endlink  objects with this builder and udpates the operation failuers.
                    @link PDM::PartOperationBuilder::GetOperationFailures PDM::PartOperationBuilder::GetOperationFailures@endlink  can be called to get the errors occurred
                    during this operation. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ValidateLogicalObjectsToCommit
            (
            );
            /**Returns  the Dependent files Save As option. Save As option can be one of these
                    @link PartOperationBuilder::DependentFileSaveAsAll PartOperationBuilder::DependentFileSaveAsAll@endlink  and 
                    @link PartOperationBuilder::DependentFileSaveAsNone PartOperationBuilder::DependentFileSaveAsNone@endlink 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartOperationBuilder::DependentFileSaveAs DependentFileSaveAsOption
            (
            );
            /**Sets  the Dependent files Save As option. Save As option can be one of these
                    @link PartOperationBuilder::DependentFileSaveAsAll PartOperationBuilder::DependentFileSaveAsAll@endlink  and 
                    @link PartOperationBuilder::DependentFileSaveAsNone PartOperationBuilder::DependentFileSaveAsNone@endlink 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDependentFileSaveAsOption
            (
                NXOpen::PDM::PartOperationBuilder::DependentFileSaveAs saveOption /** saveoption */ 
            );
            /**  Auto assigns the attributes for a given array of objects and returns an array of objects that failed to auto assign.
                @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ErrorList * AutoAssignAttributes
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
