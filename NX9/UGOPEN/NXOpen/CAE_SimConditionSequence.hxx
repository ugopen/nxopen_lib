#ifndef NXOpen_CAE_SIMCONDITIONSEQUENCE_HXX_INCLUDED
#define NXOpen_CAE_SIMCONDITIONSEQUENCE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SimConditionSequence.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SimConditionParam.hxx>
#include <NXOpen/CAE_SimConditionSequence.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SimConditionSequence;
    }
    namespace CAE
    {
        class SimConditionParam;
    }
    namespace CAE
    {
        class SimConditionTimeStepCollection;
    }
    class Unit;
    namespace CAE
    {
        class _SimConditionSequenceBuilder;
        class SimConditionSequenceImpl;
        /**  @brief  This class represents a time history of @link CAE::SimCondition CAE::SimCondition@endlink . 

           <br> An instance of this class can be obtained from @link CAE::SimConditionSeqMgr CAE::SimConditionSeqMgr@endlink .  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SimConditionSequence : public TaggedObject
        {
            /** Specifies behavior of @link CAE::SimConditionSequence::GetValue CAE::SimConditionSequence::GetValue@endlink  when time is out of range. */
            public: enum OutOfRangeBehavior
            {
                OutOfRangeBehaviorClip/** clip */ ,
                OutOfRangeBehaviorExtrapolate/** extrapolate */ 
            };

            private: SimConditionSequenceImpl * m_simconditionsequence_impl;
            private: friend class  _SimConditionSequenceBuilder;
            protected: SimConditionSequence();
            public: ~SimConditionSequence();
            /** Returns the time units for the whole sequence  @return  the units value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Unit * GetTimeUnits
            (
            );
            /** Sets the time units for the whole sequence 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTimeUnits
            (
                NXOpen::Unit * units /** units */ 
            );
            /** Returns the condition sequence description  @return  the description 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetDescription
            (
            );
            /** Sets the condition sequence description 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDescription
            (
                std::vector<NXString> & description /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the interpolated value of a @link CAE::SimConditionParam CAE::SimConditionParam@endlink  at
                        the specified time. Same units as specified @link CAE::SimConditionParam CAE::SimConditionParam@endlink .
                        Will error out if specified time value is out of range.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double GetValue
            (
                NXOpen::CAE::SimConditionParam * param /** param */ ,
                double time /** time */ 
            );
            /** Returns the interpolated value of a @link CAE::SimConditionParam CAE::SimConditionParam@endlink  at
                        the specified time. Same units as specified @link CAE::SimConditionParam CAE::SimConditionParam@endlink .
                        Will behave as specified in @link CAE::SimConditionSequence::OutOfRangeBehavior CAE::SimConditionSequence::OutOfRangeBehavior@endlink .  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double GetValue
            (
                NXOpen::CAE::SimConditionParam * param /** param */ ,
                double time /** time */ ,
                NXOpen::CAE::SimConditionSequence::OutOfRangeBehavior behavior /** behavior */ 
            );
            /** Evaluate all @link CAE::SimConditionParam CAE::SimConditionParam@endlink  related expressions at
                        a given time. Will update the expressions. Time units are the ones defined
                        by @link CAE::SimConditionSequence::SetTimeUnits CAE::SimConditionSequence::SetTimeUnits@endlink . 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void Evaluate
            (
                double time /** time */ 
            );
            /** Convenience overloaded method provided to control if an update will be
                        requested after @link CAE::SimConditionSequence CAE::SimConditionSequence@endlink  has been evaluated. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void Evaluate
            (
                double time /** time */ ,
                bool update /** update */ 
            );


            /** Returns the @link CAE::SimConditionTimeStepCollection CAE::SimConditionTimeStepCollection@endlink . 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::CAE::SimConditionTimeStepCollection *ConditionTimeStepCollection();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
