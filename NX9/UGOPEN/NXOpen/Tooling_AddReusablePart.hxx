#ifndef NXOpen_TOOLING_ADDREUSABLEPART_HXX_INCLUDED
#define NXOpen_TOOLING_ADDREUSABLEPART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_AddReusablePart.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Tooling_AddReusablePart.hxx>
#include <NXOpen/Tooling_CloneObject.hxx>
#include <NXOpen/Tooling_SpreadsheetData.hxx>
#include <NXOpen/Tooling_ToolingManager.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class AddReusablePart;
    }
    namespace Assemblies
    {
        class Component;
    }
    class Builder;
    class NXObject;
    class Part;
    namespace Tooling
    {
        class CloneObject;
    }
    namespace Tooling
    {
        class ReusablePocketBuilder;
    }
    namespace Tooling
    {
        class SpreadsheetData;
    }
    namespace Tooling
    {
        class _AddReusablePartBuilder;
        class AddReusablePartImpl;
        /**
            Represents a @link Tooling::AddReusablePart Tooling::AddReusablePart@endlink 
             <br> To create a new instance of this class, use @link Tooling::AddReusablePartCollection::CreateBuilder  Tooling::AddReusablePartCollection::CreateBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  AddReusablePart : public Builder
        {
            /** Represents the position method */
            public: enum PositionMethod
            {
                PositionMethodInvalid = -1/** invalid */ ,
                PositionMethodAbsolute/** absolute */ ,
                PositionMethodMate/** mate */ ,
                PositionMethodReposition/** reposition */ ,
                PositionMethodWcs/** wcs */ ,
                PositionMethodPosition/** position */ ,
                PositionMethodPoint = 15/** Position by point */,
                PositionMethodInferredOny/** inferred ony */ ,
                PositionMethodRouting/** Position using Routing */
            };

            /** Represents adding or editing a reusable component mode method */
            public: enum ModeMethod
            {
                ModeMethodAdd = 1/** Add reusable component */,
                ModeMethodEdit/** Edit reusable component */
            };

            private: AddReusablePartImpl * m_addreusablepart_impl;
            private: friend class  _AddReusablePartBuilder;
            protected: AddReusablePart();
            public: ~AddReusablePart();
            /**Returns   the current position method
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AddReusablePart::PositionMethod PositionMode
            (
            );
            /**Sets   the current position method
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPositionMode
            (
                NXOpen::Tooling::AddReusablePart::PositionMethod positionMode /** position mode */ 
            );
            /** Creates the clone operation object  @return  the new @link Tooling::CloneObject Tooling::CloneObject@endlink  instance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CloneObject * CreateCloneObject
            (
                NXOpen::Tooling::ToolingApplication applicationType /** Wizard type */,
                const NXString & assemName /** Project assembly name */
            );
            /** Creates the clone operation object  @return  the new @link Tooling::CloneObject Tooling::CloneObject@endlink  instance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Tooling::CloneObject * CreateCloneObject
            (
                NXOpen::Tooling::ToolingApplication applicationType /** Wizard type */,
                const char * assemName /** Project assembly name */
            );
            /** Gets the initial location, this is mainly used to get default add location of a reusable component  @return  Drop location to initial parameter 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d GetInitialPosition
            (
            );
            /** Sets the initial location, this is mainly used to set default add location of a reusable component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInitialPosition
            (
                const NXOpen::Point3d & dropLocation /** Drop location to initial parameter */
            );
            /**Gets the spreadsheet data, this is mainly used to get the attributes of a reusable component @return  Spreadsheet data 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::SpreadsheetData * GetSpreadsheetData
            (
            );
            /** Sets the spreadsheet data, this is mainly used to set the attributes of a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpreadsheetData
            (
                NXOpen::Tooling::SpreadsheetData * spreadsheetData /** Spreadsheet data */
            );
            /**Gets the parent part, this is mainly used to get context work part of a reusable component  @return  The parent part to place the component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * GetParentPart
            (
            );
            /**Sets the parent part, this is mainly used to set context work part of a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetParentPart
            (
                NXOpen::Part * part /** The parent part to place the component */
            );
            /**Gets the attached geometry, this is mainly used to get the initial parameter  @return  Geometry to calculate the initial parameter 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * GetAttachedGeometry
            (
            );
            /**Sets the attached geometry, this is mainly used to set the initial parameter
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAttachedGeometry
            (
                NXOpen::NXObject * part /** Geometry to calculate the initial parameter */
            );
            /** Saves the library name and path of the reusable component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveLibraryPath
            (
                const NXString & libName /** Library name */,
                const NXString & libpath /** The path in the library */
            );
            /** Saves the library name and path of the reusable component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SaveLibraryPath
            (
                const char * libName /** Library name */,
                const char * libpath /** The path in the library */
            );
            /** Loads the reusable component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void LoadReusableComponent
            (
                const NXString & krxFile /** The KRX file */
            );
            /** Loads the reusable component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void LoadReusableComponent
            (
                const char * krxFile /** The KRX file */
            );
            /** Sets the reusable component properties 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentProperties
            (
                const NXString & referenceSetName /** The name of the reference set used to represent the new component */,
                const NXString & componentName /** The name of the new component */,
                int layer /** The layer to place the new component on */
            );
            /** Sets the reusable component properties 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetComponentProperties
            (
                const char * referenceSetName /** The name of the reference set used to represent the new component */,
                const char * componentName /** The name of the new component */,
                int layer /** The layer to place the new component on */
            );
            /** Updates the part data for a reusable component, this is mainly used to update parameter for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateReusableComponent
            (
            );
            /** Updates the part data of a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdatePartData
            (
            );
            /** Constructs the parameters data, reads data from part family or spreadsheet and updates the parameter data in the part
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ConstructParametersData
            (
            );
            /** Affirms insertion of the reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AffirmReusableComponent
            (
            );
            /** Creates constraints for the reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateReusableConstraints
            (
                int index /**  The index part is to create constraints */
            );
            /** Deletes constraints for the reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteReusableConstraints
            (
            );
            /** Reverses the direction of the reusable component if the reusable component is placed on a face. @return  The output face of the componnent on 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * ReverseComponentDirection
            (
                const NXOpen::Point3d & inputPosition /** The input position of componnent */,
                const NXOpen::Point3d & inputDirection /** The input direction of componnent*/,
                double length /** The input length of componnent*/,
                const NXOpen::Point3d & outputPosition /** The output position of componnent */,
                const NXOpen::Point3d & outputDirection /** The output position of componnent */
            );
            /** Creates pocket for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateReusablePocket
            (
                bool commit /** if the variable is true, the component needs pocket */
            );
            /** Deletes pocket for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteReusablePocket
            (
            );
            /** Creates an array instance of a component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateComponents
            (
                int count /** The count is array instance number */,
                NXOpen::NXObject * selobj /** The selected object is FACE type, the reusable component place on the face */
            );
            /** Deletes an array instance of a component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteComponents
            (
                int count /** The count is array instance number */
            );
            /** Adds series of reusable components in holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddHoleInstance
            (
                const NXOpen::Point3d & inputDirection /** The input direction of component*/,
                const NXOpen::Point3d & inputPostion /** The input position of componnent */
            );
            /** Reverses the direction of the reusable component if the reusable component is not placed on a face.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ReversePreviewComponent
            (
                const NXOpen::Point3d & rememberDir /** The original position of component */
            );
            /** Removes the instance from the part data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveOldInstance
            (
                int index /** The index of component instance */
            );
            /** Adds a new instance
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddNewInstance
            (
                NXOpen::Assemblies::Component * partOcc /** Add the new occurance into the part data*/,
                int index /** The index of component instance */
            );
            /** Edits a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void EditReusableComponent
            (
                NXOpen::Assemblies::Component * partOcc /** The component occurance to edit in the part data*/
            );
            /** Adds occurance into the part data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddPartOccurance
            (
                NXOpen::Assemblies::Component * partOcc /** The component occurance to add in the part data*/
            );
            /** Adds Component Properties
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddComponentProperty
            (
                const NXString & compName /** The name of the reference set used to represent the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & refsetName /**  The layer to place the new component on   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int layer /** layer */ 
            );
            /** Adds Component Properties
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void AddComponentProperty
            (
                const char * compName /** The name of the reference set used to represent the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * refsetName /**  The layer to place the new component on   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int layer /** layer */ 
            );
            /** Inserts the component into the part data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void InsertReusableComponent
            (
                int instIndex /** The index of the new component being added in the part data*/,
                bool needTransform /** Whether the component needs to be transformed in the fastener assembly */
            );
            /** Adds mode for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddComponentMode
            (
                NXOpen::Tooling::AddReusablePart::ModeMethod modeMethod /** mode method */ 
            );
            /** Sets the clone operation object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCloneObject
            (
                NXOpen::Tooling::CloneObject * cloneObject /** A @link Tooling::CloneObject Tooling::CloneObject@endlink  instance */
            );
            /** Gets the clone operation object  @return  A @link Tooling::CloneObject Tooling::CloneObject@endlink  instance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CloneObject * GetCloneObject
            (
            );
            /** Adds clone part name
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddClonePartName
            (
                const NXString & clonedpartname /** The new clone part name  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds clone part name
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void AddClonePartName
            (
                const char * clonedpartname /** The new clone part name  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Subtitutes a reusable part
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SubtituteReusableComponent
            (
                bool substituteInstance /** Whether the resuable component needs to be substituted */
            );
            /** Removes design element component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveDesignElement
            (
            );
            /** Moves a reusable component to a selected position
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void MoveReusableComponent
            (
                const NXOpen::Vector3d & translation /** The translation data */,
                const NXOpen::Matrix3x3 & rotation /** The rotation data */,
                int index /** The reusable component index in the part data  */
            );
            /** Removes a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveReusableComponent
            (
                int index /** The reusable component index in the part data*/
            );
            /** Sets the search geometry for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSearchGeometry
            (
                bool isTrunOn /** Whehter the search geometry toggle is turned on, which is on the add reusable component dialog*/
            );
            /** Destroys reusable builder data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DestroyReusableBuilder
            (
            );
            /** Records the existing reusable component with the same name
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RecordReusableComponent
            (
                const NXString & fileName /**The reusable component name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Records the existing reusable component with the same name
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void RecordReusableComponent
            (
                const char * fileName /**The reusable component name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Updates the pocket for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateReusablePocket
            (
            );
            /** Gets an array of design elements @return  The design elements
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Assemblies::Component *> GetDesignElement
            (
            );
            /** Sets the reusable pocket builder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReusablePocketBuilder
            (
                NXOpen::Tooling::ReusablePocketBuilder * pocketTag /** The reusable component pocket builder*/
            );
            /** Gets the reusable pocket builder @return  The reusable component pocket builder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ReusablePocketBuilder * GetReusablePocketBuilder
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
