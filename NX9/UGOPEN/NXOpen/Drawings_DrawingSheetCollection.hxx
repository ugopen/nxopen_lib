#ifndef NXOpen_DRAWINGS_DRAWINGSHEETCOLLECTION_HXX_INCLUDED
#define NXOpen_DRAWINGS_DRAWINGSHEETCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_DrawingSheetCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_DrawingSheet.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class DrawingSheetCollection;
    }
    class Part;
    namespace Drawings
    {
        class DrawingSheet;
    }
    namespace Drawings
    {
        class DrawingSheetBuilder;
    }
    namespace Drawings
    {
        class SheetTemplateManager;
    }
    namespace Drawings
    {
        class DrawingSheetCollectionImpl;
        /** Represents a collection of drawing sheets. <br> To obtain an instance of this class, refer to @link Part  Part @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  DrawingSheetCollection : public TaggedObjectCollection
        {
            private: DrawingSheetCollectionImpl * m_drawingsheetcollection_impl;
            private: NXOpen::Part* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit DrawingSheetCollection(NXOpen::Part *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~DrawingSheetCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Drawings::DrawingSheetCollection::iterator::copy,initializer)
            class iterator
            {
            public:
                /** Value type associated with iterator*/ 

                typedef Drawings::DrawingSheet * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                { // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Drawings::DrawingSheetCollection *context) : m_context(context), m_current(NULL_TAG)
                { // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_DRAWINGSEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_DRAWINGSEXPORT  void next();
                NXOpen::Drawings::DrawingSheetCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /**Returns  the currently opened drawing sheet.  This will return NULL 
                    if no drawing sheet is opened. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::DrawingSheet * CurrentDrawingSheet
            (
            );
            /** Inserts a sheet into a part.  @return   
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::DrawingSheet * InsertSheet
            (
                const NXString & drawingName /** Drawing name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Drawings::DrawingSheet::Unit drawingUnits /** Unit of sheet size */,
                double width /** Width of drawing */,
                double height /** Height of drawing */,
                double numerator /** Numerator of the scale of drawing */,
                double denominator /** Denominator of the scale of drawing */,
                NXOpen::Drawings::DrawingSheet::ProjectionAngleType projectionAngle /** Projection angle */
            );
            /** Inserts a sheet into a part.  @return   
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            NXOpen::Drawings::DrawingSheet * InsertSheet
            (
                const char * drawingName /** Drawing name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Drawings::DrawingSheet::Unit drawingUnits /** Unit of sheet size */,
                double width /** Width of drawing */,
                double height /** Height of drawing */,
                double numerator /** Numerator of the scale of drawing */,
                double denominator /** Denominator of the scale of drawing */,
                NXOpen::Drawings::DrawingSheet::ProjectionAngleType projectionAngle /** Projection angle */
            );
            /** Inserts a sheet into a part. The drawings units will be inferred from the standard
                        size. @return   
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::DrawingSheet * InsertSheet
            (
                const NXString & drawingName /**  Drawing name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Drawings::DrawingSheet::StandardSheetSize sheetSize /** Sheet Size */,
                double numerator /** Numerator of the scale of drawing */,
                double denominator /** Denominator of the scale of drawing */,
                NXOpen::Drawings::DrawingSheet::ProjectionAngleType projectionAngle /** Projection angle */
            );
            /** Inserts a sheet into a part. The drawings units will be inferred from the standard
                        size. @return   
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            NXOpen::Drawings::DrawingSheet * InsertSheet
            (
                const char * drawingName /**  Drawing name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Drawings::DrawingSheet::StandardSheetSize sheetSize /** Sheet Size */,
                double numerator /** Numerator of the scale of drawing */,
                double denominator /** Denominator of the scale of drawing */,
                NXOpen::Drawings::DrawingSheet::ProjectionAngleType projectionAngle /** Projection angle */
            );
            /** Finds the @link  DrawingSheet   DrawingSheet @endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  Drawing sheet with this identifier 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::DrawingSheet * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the drawing sheet you want */
            );
            /** Finds the @link  DrawingSheet   DrawingSheet @endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  Drawing sheet with this identifier 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            NXOpen::Drawings::DrawingSheet * FindObject
            (
                const char * journalIdentifier /** Identifier of the drawing sheet you want */
            );
            /** Create a drawing Sheet builder   @return  the drawing sheet Builder with this identifier 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::DrawingSheetBuilder * DrawingSheetBuilder
            (
                NXOpen::Drawings::DrawingSheet * sheet /** the drawing sheet */
            );
            /** Refresh the current Sheet  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void RefreshCurrentSheet
            (
            );


            /** Returns the Sheet Template Manager for part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Drawings::SheetTemplateManager *SheetTemplates();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
