#ifndef NXOpen_SKETCH_HXX_INCLUDED
#define NXOpen_SKETCH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Sketch.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/IProfile.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Sketch;
    class Arc;
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Curve;
    class DisplayableObject;
    class ErrorList;
    class Expression;
    namespace Features
    {
        class Feature;
    }
    class INXObject;
    class IProfile;
    class IReferenceAxis;
    class ISurface;
    class NXMatrix;
    class NXObject;
    namespace Preferences
    {
        class SketchPreferences;
    }
    class SketchConstraint;
    class SketchDimensionalConstraint;
    class SketchGeometricConstraint;
    class SketchHelpedGeometricConstraint;
    class SketchTangentConstraint;
    class SmartObject;
    class View;
    class _SketchBuilder;
    class SketchImpl;
    /** Represents a sketch  <br> Use the @link SketchCollection SketchCollection@endlink  class to create a sketch.  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  Sketch : public DisplayableObject, public virtual IProfile
    {
        /** Represents the status of the sketch */
        public: enum Status
        {
            StatusUnknown/** unknown */ ,
            StatusNotEvaluated/** not evaluated */ ,
            StatusUnderConstrained/** More constraints are needed to fully constrain the sketch */,
            StatusWellConstrained/** The sketch is fully constrained */,
            StatusOverConstrained/** The sketch has more constraints than is needed */,
            StatusInconsistentlyConstrained/** The sketch has conflicting constraints */
        };

        /** Used to indicate whether to reorient the view when the sketch is activated */
        public: enum ViewReorient
        {
            ViewReorientFalse/** Do not reorient view to sketch */,
            ViewReorientTrue/** Reorient view to sketch */
        };

        /** Used to indicate how much the updating should occur */
        public: enum UpdateLevel
        {
            UpdateLevelSketchOnly/** Only update the sketch */,
            UpdateLevelModel/** Update the full model and the sketch */
        };

        /** Indicates the visibility of the constraints 
                The APIs that use this enum are deprecated in NX85 
                The @link Sketch::ConstraintVisibilitySome Sketch::ConstraintVisibilitySome@endlink  option will behave the same as the 
                @link Sketch::ConstraintVisibilityAll Sketch::ConstraintVisibilityAll@endlink  option.  
                Please use @link NXOpen::Preferences::SessionSketch::DisplayConstraintSymbols NXOpen::Preferences::SessionSketch::DisplayConstraintSymbols@endlink  and
                @link NXOpen::Preferences::SessionSketch::SetDisplayConstraintSymbols NXOpen::Preferences::SessionSketch::SetDisplayConstraintSymbols@endlink  instead.
            
         <br>  @deprecated Deprecated in NX8.5.0.  Please use @link NXOpen::Preferences::SessionSketch::DisplayConstraintSymbols NXOpen::Preferences::SessionSketch::DisplayConstraintSymbols @endlink and @link NXOpen::Preferences::SessionSketch::SetDisplayConstraintSymbols NXOpen::Preferences::SessionSketch::SetDisplayConstraintSymbols @endlink  <br>  
        */
        public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Please use NXOpen::Preferences::SessionSketch::DisplayConstraintSymbols NXOpen::Preferences::SessionSketch::DisplayConstraintSymbols @endlink and @link NXOpen::Preferences::SessionSketch::SetDisplayConstraintSymbols NXOpen::Preferences::SessionSketch::SetDisplayConstraintSymbols @endlink ") enum ConstraintVisibility
        {
            ConstraintVisibilityNone/** No constraints visible */,
            ConstraintVisibilitySome/** Certain constraints are visible.
                                                          Equivalent to having the UI show-all-constraints and show-no-constraints toggles off */,
            ConstraintVisibilityAll/** All constraints are visible */
        };

        /** Indicates if the infer constraints will be created or not */
        public: enum CreateInferConstraintSetting
        {
            CreateInferConstraintSettingOn/** Create infer constraints */,
            CreateInferConstraintSettingOff/** Dont create infer constraints */
        };

        /** Used in ConstraintGeometry to indicate what type of point, if any, the geometry is */
        public: enum ConstraintPointType
        {
            ConstraintPointTypeNone/** The geometry is not a point */,
            ConstraintPointTypeStartVertex/** Start vertex (e.g. the start point of a line) */,
            ConstraintPointTypeEndVertex/** End vertex (e.g. the end point of a line) */,
            ConstraintPointTypeArcCenter/** Center of a circle, arc, or ellipse */,
            ConstraintPointTypeSplineDefiningPoint/** A defining point of a spline. */,
            ConstraintPointTypeAnchor/** The anchor point of a conic */
        };

         /** Used by the create geometric constraint methods to indicate what geometry
            the constraint should be applied to.
             @code 
            Examples:

            Assume in these examples that you have a Line object in a variable named line1 and a
            Spline object in a variable named spline1.

            1. To specify an entire line, set
            Geometry = line1
            PointType = None
            SplineDefiningPointIndex = 0

            2. To specify the start vertex of a line, set
            Geometry = line1
            PointType = StartVertex
            SplineDefiningPointIndex = 0

            3. To specify the third defining point of a spline
            Geometry = spline1
            PointType = SplingDefiningPoint
            SplineDefiningPointIndex = 3

            4. To specify the first defining point of a spline
            Geometry = spline1
            PointType = StartVertex
            SplineDefiningPointIndex = 0
                -- OR --
            Geometry = spline1
            PointType = SplingDefiningPoint
            SplineDefiningPointIndex = 1

            Notes on splines:
            - spline defining points are numbered starting from 1
            - to specify the first [or last] defining point of a spline, you can either
            use PointType = SplineDefiningPoint and set SplineDefiningPointIndex
            or use PointType = StartVertex [or EndVertex]
            - SplineDefiningPointIndex is only used when PointType = SplineDefiningPoint
             @endcode 
            */
        public:
        struct  ConstraintGeometry
        {
            public: /** geometry */ NXOpen::NXObject * Geometry;
            public: /** point type */ NXOpen::Sketch::ConstraintPointType PointType;
            public: /** Ignored unless PointType is SplineDefiningPoint.
                                                     Spline control points are numbered starting from 1 */int SplineDefiningPointIndex;
            public: ConstraintGeometry() :
                Geometry(),
                PointType((NXOpen::Sketch::ConstraintPointType)0),
                SplineDefiningPointIndex()
            {
            }
            /** Constructor for the ConstraintGeometry struct. */ 
            public: ConstraintGeometry(NXOpen::NXObject * geometryInitial /** geometry */ , 
                    NXOpen::Sketch::ConstraintPointType pointTypeInitial /** point type */ , 
                    int splineDefiningPointIndexInitial /** Ignored unless PointType is SplineDefiningPoint.
                                                             Spline control points are numbered starting from 1 */) :
                Geometry(geometryInitial),
                PointType(pointTypeInitial),
                SplineDefiningPointIndex(splineDefiningPointIndexInitial)
            {
            }
        };

        /** Used in @link Sketch::DimensionGeometry Sketch::DimensionGeometry@endlink  to indicate what type of
            geometry to use */
        public: enum AssocType
        {
            AssocTypeNone/** Use the entire geometric item, as opposed to a point */,
            AssocTypeStartPoint/** Start point. E.g. the start point of a line */,
            AssocTypeEndPoint/** End point. E.g. the start point of a line */,
            AssocTypeArcCenter/** Center of an arc, circle, or ellipse */,
            AssocTypeTangency/** Create the dimension tangent to the geometric item */,
            AssocTypeCurvePoint/** A point on a spline */,
            AssocTypeAnchorPoint/** The anchor of a conic */,
            AssocTypeMidpoint/** The midpoint of a curve */
        };

         /** Used in the dimension creation methods to indicate what geometry to
            create the dimension on.

             @code 
            Examples:
            1. To specify the start point of line1
            Geometry = line1
            AssocType = StartPoint
            AssocValue = 0
             @endcode 
            */
        public:
        struct  DimensionGeometry
        {
            public: /** geometry */ NXOpen::NXObject * Geometry;
            public: /** assoc type */ NXOpen::Sketch::AssocType AssocType;
            public: /** See table for meaning.
             @code 
            The AssocValue has the following meanings:
            AssocType           AssocValue meaning
            ----------          -------------------
            Tangency            parameter percentage (0 - 100) (used to find approximate tangent point)
            CurvePoint          the index number of the defining point of the spline(starting from 1)
            all else            not used
             @endcode 
                                     */int AssocValue;
            public: /** help point */NXOpen::Point3d HelpPoint;
            public: /** The view the geometry is dependent on, if any */NXOpen::NXObject * View;
            public: DimensionGeometry() :
                Geometry(),
                AssocType((NXOpen::Sketch::AssocType)0),
                AssocValue(),
                HelpPoint(),
                View()
            {
            }
            /** Constructor for the DimensionGeometry struct. */ 
            public: DimensionGeometry(NXOpen::NXObject * geometryInitial /** geometry */ , 
                    NXOpen::Sketch::AssocType assocTypeInitial /** assoc type */ , 
                    int assocValueInitial /** See table for meaning.
                     @code 
                    The AssocValue has the following meanings:
                    AssocType           AssocValue meaning
                    ----------          -------------------
                    Tangency            parameter percentage (0 - 100) (used to find approximate tangent point)
                    CurvePoint          the index number of the defining point of the spline(starting from 1)
                    all else            not used
                     @endcode 
                                             */, 
                    const NXOpen::Point3d &helpPointInitial /** help point */, 
                    NXOpen::NXObject * viewInitial /** The view the geometry is dependent on, if any */) :
                Geometry(geometryInitial),
                AssocType(assocTypeInitial),
                AssocValue(assocValueInitial),
                HelpPoint(helpPointInitial),
                View(viewInitial)
            {
            }
        };

        /** Used in ConstraintHelp to indicate what type of help it is */
        public: enum ConstraintGeometryHelpType
        {
            ConstraintGeometryHelpTypePoint/** point */ ,
            ConstraintGeometryHelpTypeParameter/** parameter */ 
        };

         /** Used by several constraint creation methods that need a help point or parameter
            to indicate how to create the constraint.  The manner that the help point is used
            depends on the type of constraint */
        public:
        struct  ConstraintGeometryHelp
        {
            public: /** Point or Parameter */NXOpen::Sketch::ConstraintGeometryHelpType Type;
            public: /** Ignored unless type is Point */NXOpen::Point3d Point;
            public: /** Ignored unless type is Parameter.
                                      Represents a parameter, typically along a curve */double Parameter;
            public: ConstraintGeometryHelp() :
                Type((NXOpen::Sketch::ConstraintGeometryHelpType)0),
                Point(),
                Parameter()
            {
            }
            /** Constructor for the ConstraintGeometryHelp struct. */ 
            public: ConstraintGeometryHelp(NXOpen::Sketch::ConstraintGeometryHelpType typeInitial /** Point or Parameter */, 
                    const NXOpen::Point3d &pointInitial /** Ignored unless type is Point */, 
                    double parameterInitial /** Ignored unless type is Parameter.
                                              Represents a parameter, typically along a curve */) :
                Type(typeInitial),
                Point(pointInitial),
                Parameter(parameterInitial)
            {
            }
        };

        /** Represents the class of the constraint.  There are two classes of constraints: geometric and dimension */
        public: enum ConstraintClass
        {
            ConstraintClassNotConstraint/** not constraint */ ,
            ConstraintClassAny/** Used in query methods that filter by constraint class
                                                    to select both types of constraints */,
            ConstraintClassGeometric/** A non-dimension constraint */,
            ConstraintClassDimension/** A dimensional constraint */
        };

        /** Represents the type of constraint */
        public: enum ConstraintType
        {
            ConstraintTypeNoCon/** Used in query methods that filter by constraint type
                                                    to select any type of constraint */,
            ConstraintTypeFixed/** fixed */ ,
            ConstraintTypeHorizontal/** horizontal */ ,
            ConstraintTypeVertical/** vertical */ ,
            ConstraintTypeParallel/** parallel */ ,
            ConstraintTypePerpendicular/** perpendicular */ ,
            ConstraintTypeCollinear/** collinear */ ,
            ConstraintTypeEqualLength/** equal length */ ,
            ConstraintTypeEqualRadius/** equal radius */ ,
            ConstraintTypeConstantLength/** constant length */ ,
            ConstraintTypeConstantAngle/** constant angle */ ,
            ConstraintTypeCoincident/** coincident */ ,
            ConstraintTypeConcentric/** concentric */ ,
            ConstraintTypeMirror/** mirror */ ,
            ConstraintTypePointOnCurve/** point on curve */ ,
            ConstraintTypeMidpoint/** midpoint */ ,
            ConstraintTypeTangent/** tangent */ ,
            ConstraintTypeRadiusDim/** radius dim */ ,
            ConstraintTypeDiameterDim/** diameter dim */ ,
            ConstraintTypeHorizontalDim/** horizontal dim */ ,
            ConstraintTypeVerticalDim/** vertical dim */ ,
            ConstraintTypeParallelDim/** parallel dim */ ,
            ConstraintTypePerpendicularDim/** perpendicular dim */ ,
            ConstraintTypeAngularDim/** system will decide if it is major or minor */,
            ConstraintTypeReservedCon1/** Do not use */,
            ConstraintTypeReservedCon2/** Do not use */,
            ConstraintTypeReservedCon3/** Do not use */,
            ConstraintTypeReservedCon4/** Do not use */,
            ConstraintTypeReservedCon5/** Do not use */,
            ConstraintTypeReservedCon6/** Do not use */,
            ConstraintTypePointOnString/** point on string */ ,
            ConstraintTypeSlope/** slope */ ,
            ConstraintTypeUniformScaled/** uniform scaled */ ,
            ConstraintTypeNonUniformScaled/** non uniform scaled */ ,
            ConstraintTypeAssocTrim/** Limited support */,
            ConstraintTypeAssocOffset/** Limited support */,
            ConstraintTypePerimeterDim/** perimeter dim */ ,
            ConstraintTypeOffset/** offset */ ,
            ConstraintTypeNormal/** normal */ ,
            ConstraintTypePointOnLoop/** point on loop */ ,
            ConstraintTypeRecipeTrim/** recipe trim */ ,
            ConstraintTypePattern/** pattern */ ,
            ConstraintTypeMinorAngularDim/** minor angular dim */ ,
            ConstraintTypeMajorAngularDim/** major angular dim */ ,
            ConstraintTypeLastConType/** The last constraint type indicator;
                                            NOT to be used. */
        };

        /** Used by @link CreateDimension CreateDimension@endlink , @link CreateRadialDimension CreateRadialDimension@endlink 
                @link CreateDiameterDimension CreateDiameterDimension@endlink  and @link CreatePerimeterDimension CreatePerimeterDimension@endlink 
                to determine whether to create driving or reference dimension */
        public: enum DimensionOption
        {
            DimensionOptionCreateAsDriving/** Create dimension as driving   */,
            DimensionOptionCreateAsReference/** Create dimension as reference */,
            DimensionOptionCreateAsAutomatic/** Create dimension as automatic  */
        };

        /** Type of Auto Dimensioning rules. It should match the rule types defined in Auto Dimensioning
            engine. Auto Dimensioning rules affect how the dimensions are created by the Auto Dimensioner. The
            rules will be put in a list, the first the rule with the highest priority and the last rule with
            the lowest priority. The user can change the order of the rules in the list to persue the flavor 
            of the dimensions he wants. 
            @link Sketch::AutoDimensioningRuleSymmetric Sketch::AutoDimensioningRuleSymmetric@endlink : create symmetric dimensions if the curves are symmetric
            @link Sketch::AutoDimensioningRuleAdjacentAngle Sketch::AutoDimensioningRuleAdjacentAngle@endlink : create angles between adjacent lines 
            @link Sketch::AutoDimensioningRuleLength Sketch::AutoDimensioningRuleLength@endlink : create length dimension for lines
            @link Sketch::AutoDimensioningRuleHorizontalVertical Sketch::AutoDimensioningRuleHorizontalVertical@endlink : create horizontal and vertical dimensions 
            @link Sketch::AutoDimensioningRuleReferenceAxes Sketch::AutoDimensioningRuleReferenceAxes@endlink : create dimensions between curves and reference axes 
            */
        public: enum AutoDimensioningRule
        {
            AutoDimensioningRuleSymmetric = 1/** Create Symmetric Dimensions */,
            AutoDimensioningRuleAdjacentAngle/** Create Adjacent Angles */,
            AutoDimensioningRuleLength/** Create Length Dimension */,
            AutoDimensioningRuleHorizontalVertical/** Create Horizontal and Vertical Dimensions */,
            AutoDimensioningRuleReferenceAxes/** Create Dimensions to Reference Axes */
        };

        /** Used by @link AddGeometry AddGeometry@endlink  to determine whether to treat an
            ellipse as an ellipse or generic conic when adding the curve to
            a sketch.  Treating an ellipse as a conic means that the ellipse
            will be given an anchor point.  This affects, among other things,
            how the ellipse behaves when it is dragged.

            In order for an ellipse to be treated as a conic, its
            end angle minus its start angle must be less than 180 degrees.
            */
        public: enum AddEllipseOption
        {
            AddEllipseOptionTreatAsEllipse/** treat as ellipse */ ,
            AddEllipseOptionTreatAsConic/** treat as conic */ 
        };

        /** Indicates whether the input curves should be trimmed when doing a fillet */
        public: enum TrimInputOption
        {
            TrimInputOptionFalse/** Do not trim the input curves */,
            TrimInputOptionTrue/** Trim the input curves */
        };

        /** Indicates whether the 3rd curve should be deleted when doing a 3 curve fillet */
        public: enum DeleteThirdCurveOption
        {
            DeleteThirdCurveOptionFalse/** Do not delete the 3rd curve */,
            DeleteThirdCurveOptionTrue/** Delete the 3rd curve */
        };

        /** Used in fillet to indicate whether a radius dimension should be created
            by the fillet */
        public: enum CreateDimensionOption
        {
            CreateDimensionOptionFalse/** Do not create a radius dimension */,
            CreateDimensionOptionTrue/** Create a radius dimension */
        };

        /** Indicates whether the alternate solution should be used instead of the regular solution.
                The alternate solution for an arc is the portion of the full circle that is left out of the
                regular solution.  For example, if the regular solution is an arc that goes from 0 to 45 degrees,
                the alternate solution will be an arc with the same center and origin but that goes from 45 degrees to 360.
                */
        public: enum AlternateSolutionOption
        {
            AlternateSolutionOptionFalse/** Use the regular solution */,
            AlternateSolutionOptionTrue/** Use the alternate solution */
        };

        /** Specifies the plane type used for a Sketch */
        public: enum PlaneOption
        {
            PlaneOptionInferred/** Use inferred plane */,
            PlaneOptionExistingPlane/** Use existing plane */,
            PlaneOptionNewPlane/** Use new plane      */,
            PlaneOptionNewCsys/** Use new CSYS      */
        };

        /** Used when adding a point or curve to a sketch.
            Specifies whether to infer coincident constraints between the geometry that already exists
            in the sketch and the geometry being added to the sketch.  If you choose to infer constraints,
            coincident constraints will be created if an end point of the geometry being added is at
            the same location (within system tolerance) as another end point in the sketch.
            */
        public: enum InferConstraintsOption
        {
            InferConstraintsOptionInferNoConstraints/** Do not infer constraints */,
            InferConstraintsOptionInferCoincidentConstraints/** Infer constraints */
        };

         /** This structure represents a map between the original object to be copied
            and the corresponding copied object.
            An array of these structures are returned from the API @link Sketch::CopyObjects Sketch::CopyObjects@endlink .
            */
        public:
        struct  CopyObjectData
        {
            public: /** orig object */ NXOpen::NXObject * OrigObject;
            public: /** copied object */ NXOpen::NXObject * CopiedObject;
            public: CopyObjectData() :
                OrigObject(),
                CopiedObject()
            {
            }
            /** Constructor for the CopyObjectData struct. */ 
            public: CopyObjectData(NXOpen::NXObject * origObjectInitial /** orig object */ , 
                    NXOpen::NXObject * copiedObjectInitial /** copied object */ ) :
                OrigObject(origObjectInitial),
                CopiedObject(copiedObjectInitial)
            {
            }
        };

        private: SketchImpl * m_sketch_impl;
        private: friend class  _SketchBuilder;
        protected: Sketch();
        public: ~Sketch();
        /** Deletes objects from the sketch  @return  List of errors encountered during the delete 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::ErrorList * DeleteObjects
        (
            const std::vector<NXOpen::NXObject *> & objects /** Objects to be deleted */
        );
        /**
            Reattaches a sketch.
            For documentation for the parameters for this method, see the documentation for
            @link SketchCollection::CreateSketch SketchCollection::CreateSketch@endlink 
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void Reattach
        (
            NXOpen::ISurface * attachmentPlane /** attachment plane */ ,
            NXOpen::IReferenceAxis * referenceAxis /** reference axis */ ,
            const NXOpen::Vector3d & referenceDirection /** reference direction */ ,
            NXOpen::AxisOrientation referenceAxisOrientation /** reference axis orientation */ ,
            NXOpen::Sense referenceAxisSense /** reference axis sense */ ,
            NXOpen::PlaneNormalOrientation normalOrientation /** normal orientation */ ,
            const NXOpen::Point3d & localCoordinateSystemOrigin /** Origin of the sketch's local coordinate system */
        );
        /** Activates the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void Activate
        (
            NXOpen::Sketch::ViewReorient orientView /** Indicates whether to orient the view to the sketch during activation */
        );
        /** Deactivates the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void Deactivate
        (
            NXOpen::Sketch::ViewReorient orientView /** Indicates whether to orient the view to the model during deactivation */,
            NXOpen::Sketch::UpdateLevel updateLevel /** Indicates whether just the sketch should be updated or the entire model */
        );
        /**Returns  true if the sketch is active 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsActive
        (
        );
        /**
            Sets the reference direction of the sketch.
            For documentation for the parameters for this method, see the documentation for
            @link SketchCollection::CreateSketch SketchCollection::CreateSketch@endlink .
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetReferenceDirection
        (
            NXOpen::IReferenceAxis * referenceAxis /** reference axis */ ,
            const NXOpen::Vector3d & referenceDirection /** reference direction */ ,
            NXOpen::AxisOrientation referenceAxisOrientation /** reference axis orientation */ ,
            NXOpen::Sense referenceAxisSense /** reference axis sense */ 
        );
        /** Flips the reference direction of the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void FlipReferenceDirection
        (
        );
        /** Flips the outward normal vector of the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void FlipNormal
        (
        );
        /**Returns  the plane that the sketch is attached to 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ISurface * AttachPlane
        (
        );
        /** Gets the reference direction of the sketch  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Vector3d GetReferenceDirection
        (
            NXOpen::IReferenceAxis ** referenceAxis /**
                                    An edge, datum axis, datum plane, or face that the sketch uses as a reference.
                                    May be NULL. */,
            NXOpen::AxisOrientation* referenceAxisOrientation /** Indicates whether the reference axis is horizontal or vertical */,
            NXOpen::Sense* referenceAxisSense /** If reference axis is an edge or datum axis,
                                       this parameter indicates whether the reference axis is
                                       in the same direction as the edge or datum axis or in the opposite
                                       direction.  If reference axis is not an edge or datum axis, this parameter is not used. */
        );
        /**Returns  the location of the origin of the local coordinate system for the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point3d Origin
        (
        );
        /**Returns  the orientation matrix of the local coordinate system of the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::NXMatrix * Orientation
        (
        );
        /**Returns  the visibility of the constraints in the sketch 
         <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Preferences::SessionSketch::DisplayConstraintSymbols NXOpen::Preferences::SessionSketch::DisplayConstraintSymbols@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Preferences::SessionSketch::DisplayConstraintSymbols instead.") NXOpen::Sketch::ConstraintVisibility VisibilityOfConstraints
        (
        );
        /**Sets  the visibility of the constraints in the sketch 
         <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Preferences::SessionSketch::SetDisplayConstraintSymbols NXOpen::Preferences::SessionSketch::SetDisplayConstraintSymbols@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Preferences::SessionSketch::SetDisplayConstraintSymbols instead.") void SetVisibilityOfConstraints
        (
            NXOpen::Sketch::ConstraintVisibility visibility /** visibility */ 
        );
        /**Returns  the toggle that controls the creation of infer constraints in sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Sketch::CreateInferConstraintSetting CreateInferConstraintsSetting
        (
        );
        /**Sets  the toggle that controls the creation of infer constraints in sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetCreateInferConstraintsSetting
        (
            NXOpen::Sketch::CreateInferConstraintSetting createInferCon /** create infer con */ 
        );
        /** Run auto dimensioning. 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void RunAutoDimension
        (
        );
        /** Creates a coincident constraint  @return  The coincident constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateCoincidentConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom1 /** Must be a vertex */,
            const NXOpen::Sketch::ConstraintGeometry & geom2 /** Must be a vertex */
        );
        /** Creates a fixed constraint  @return  The fixed constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateFixedConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Can be any curve, point, or vertex in the sketch */
        );
        /** Creates enough fixed constraints on the curve and all of its vertices such that the geometry is fully
                fixed without any redundant fixed constraints.  @return  The fixed constraints 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::SketchGeometricConstraint *> CreateFullyFixedConstraints
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Can be any curve, point, or vertex in the sketch */
        );
        /** Creates a horizontal constraint  @return  The horizontal constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateHorizontalConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Must be a line */
        );
        /** Creates a vertical constraint  @return  The vertical constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateVerticalConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Must be a line */
        );
        /** Creates a tangent constraint.
           Note: the input constraint geometries cannot both be linear.  @return  The tangent constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchTangentConstraint * CreateTangentConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom1 /** A curve, edge, or datum axis */,
            const NXOpen::Sketch::ConstraintGeometryHelp & geom1Help /** geom1 help */ ,
            const NXOpen::Sketch::ConstraintGeometry & geom2 /** A curve, edge, or datum axis */,
            const NXOpen::Sketch::ConstraintGeometryHelp & geom2Help /** geom2 help */ 
        );
        /** Creates a constant length constraint  @return  The constant length constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateConstantLengthConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom /** Must be a line */
        );
        /** Creates a constant angle constraint  @return  The constant angle constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateConstantAngleConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom /** Must be a line */
        );
        /** Creates a uniform scale constraint  @return  The uniform scale constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateUniformScaledConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom /** Must be a spline */
        );
        /** Creates a non-uniform scale constraint  @return  The non-uniform scale constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateNonUniformScaledConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom /** Must be a spline */
        );
        /** Creates a parallel constraint.
            A parallel constraint can only be created between one of the following pairs:
            (line, line or linear edge), (line, datum axis or datum plane), (line or linear edge, ellipse),
            (line, ellipse or elliptical edge), (ellipse, ellipse or elliptical edge).
             @return  The parallel constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateParallelConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** First input geometry for the constraint */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Second input geometry for the constraint */
        );
        /** Creates a perpendicular constraint.
            A perpendicular constraint can only be created between one of the following pairs:
            (line, line or linear edge), (line, datum axis or datum plane), (line or linear edge, ellipse),
            (line, ellipse or elliptical edge), (ellipse, ellipse or elliptical edge).
             @return  The perpendicular constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreatePerpendicularConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** First input geometry for the constraint */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Second input geometry for the constraint */
        );
        /** Creates a normal constraint.
            A normal constraint can be created between any two curve/edge type except between two linear objects. For
            linear objects, create a perpendicular constraint
             @return  The normal constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateNormalConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** First input geometry for the constraint */,
            const NXOpen::Sketch::ConstraintGeometryHelp & geom1Help /** Help data for first geom */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Second input geometry for the constraint */,
            const NXOpen::Sketch::ConstraintGeometryHelp & geom2Help /** Help data for second geom */
        );
        /** Creates a collinear constraint.
            One of the input constraint geometries must be a line.  @return  The collinear constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateCollinearConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be a line, linear edge, datum axis, or datum plane */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Must be a line, linear edge, datum axis, or datum plane */
        );
        /** Creates an equal length constraint.
            One of the input constraint geometries must be a line.  @return  The equal length constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateEqualLengthConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be a line or linear edge */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Must be a line or linear edge */
        );
        /** Creates an equal radius constraint.
           One of the input constraint geometries must be a curve.  @return  The equal radius constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateEqualRadiusConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be an arc or edge shaped as an arc */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Must be an arc or edge shaped as an arc */
        );
        /** Creates a concentric constraint.
            One of the input constraint geometries must be a curve.  @return  The concentric constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateConcentricConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be an arc or ellipse or edge shaped as an arc or ellipse */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Must be an arc or ellipse or edge shaped as an arc or ellipse */
        );
        /** Creates a midpoint constraint.
            One of the input constraint geometries must be a vertex and the other
            must be a curve or edge.  @return  The midpoint constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateMidpointConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** con geom1 */ ,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** con geom2 */ 
        );
        /** Creates a slope constraint.
            One of the input constraint geometries must a spline defining point.
            The other must be datum axis, datum plane, or a curve or edge shaped as a line, arc, ellipse, conic, or spline.  @return  The slope constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateSlopeConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** con geom1 */ ,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** con geom2 */ 
        );
        /** Creates a point on curve constraint.
            One of the input geometries must be a vertex and the other must be a
            curve, edge, datum axis, or datum plane.  @return  The point on curve constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchHelpedGeometricConstraint * CreatePointOnCurveConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** con geom1 */ ,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** con geom2 */ ,
            const NXOpen::Sketch::ConstraintGeometryHelp & help /** help */ 
        );
        /**
            Creates a point on string constraint.
             @return  The point on string constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchHelpedGeometricConstraint * CreatePointOnStringConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be a vertex */,
            const std::vector<NXOpen::Curve *> & curvesInString /** Must all be part of the same string.
                                                                                                      (You can create a string of curves through the UI
                                                                                                      through the Edit -\> Project command.) */,
            const NXOpen::Sketch::ConstraintGeometryHelp & helpData /** help data */ ,
            int curveWhichHelpParamAppliesTo /** If helpData is a parameter, this parameter indicates
                       which curve in the curvesInString that the help parameter applies to.  Otherwise, this parameter is not used */
        );
        /**
            Creates a point on string constraint.  The string is specified using a single curve
            in the string.  The constraint is created on the entire string
            that curveInString belongs to.
             @return  The point on string constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchHelpedGeometricConstraint * CreatePointOnStringConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be a vertex */,
            NXOpen::Curve * curveInString /** A curve in the string that you want to create the constraint on.
                                                                  The constraint is created on the entire string
                                                                  that this curve belongs to.
                                                                  (You can create a string of curves through the UI
                                                                  through the Edit -\> Project command.) */,
            const NXOpen::Sketch::ConstraintGeometryHelp & helpData /** help data */ 
        );
        /** Creates a dimension between two geometric objects.  Do not use for radial, diameter, or
            perimeter dimensions.  To create a radial or diameter constraint,
            use @link CreateRadialDimension CreateRadialDimension@endlink  or @link CreateDiameterDimension CreateDiameterDimension@endlink .
            To create a perimeter dimension, use @link CreatePerimeterDimension CreatePerimeterDimension@endlink   @return  The dimensional constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateDimension
        (
            NXOpen::Sketch::ConstraintType dimType /** Must be one of the dimension types and should not
                                                        be a radial, diametral, or perimeter dimension */,
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** First input geometry */,
            const NXOpen::Sketch::DimensionGeometry & dimObject2 /** Second input geometry */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Creates a dimension between two geometric objects.  Do not use for radial, diameter, or
            perimeter dimensions.  To create a radial or diameter constraint,
            use @link CreateRadialDimension CreateRadialDimension@endlink  or @link CreateDiameterDimension CreateDiameterDimension@endlink .
            To create a perimeter dimension, use @link CreatePerimeterDimension CreatePerimeterDimension@endlink . This function
            takes in an argument to create the dimension as driving or reference.  @return  The dimensional constraint 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateDimension
        (
            NXOpen::Sketch::ConstraintType dimType /** Must be one of the dimension types and should not
                                                        be a radial, diametral, or perimeter dimension */,
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** First input geometry */,
            const NXOpen::Sketch::DimensionGeometry & dimObject2 /** Second input geometry */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */,
            NXOpen::Sketch::DimensionOption refDim /** option for creating driving or reference dimension */
        );
        /** Creates a radial dimension constraint  @return  The radial dimension constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateRadialDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** Should be an arc */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Creates a radial dimension constraint. Accepts a flag to create the dimension as driving or reference  @return  The radial dimension constraint 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateRadialDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** Should be an arc */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */,
            NXOpen::Sketch::DimensionOption refDim /** option for creating driving or reference dimension */
        );
        /** Creates a diameter dimension constraint  @return  The diametral dimension constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateDiameterDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** Should be an arc */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Creates a diameter dimension constraint. Accepts a flag to create the dim as driving or reference  @return  The diametral dimension constraint 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateDiameterDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** Should be an arc */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */,
            NXOpen::Sketch::DimensionOption refDim /** option for creating driving or reference dimension */
        );
        /** Creates a perimeter dimension constraint  @return  The perimeter dimensional constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreatePerimeterDimension
        (
            const std::vector<NXOpen::Curve *> & curves /** The curves that form the perimeter */,
            const NXOpen::Point3d & dimOrigin /** Not currently used */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Update the sketch and not the sketch children.  If a different sketch is active the SKETCH_NOT_INITIALIZED error will return. The function works even if the sketch is not active.
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void LocalUpdate
        (
        );
        /** Updates the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void Update
        (
        );
        /** Updates the given set of geometries in the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void Update
        (
            const std::vector<NXOpen::NXObject *> & geoms /** Geoms that need to be updated */
        );
        /** Updates the geometry display without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateGeometryDisplay
        (
        );
        /** Updates the geometry display of given set of geoms without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateGeometryDisplay
        (
            const std::vector<NXOpen::SmartObject *> & geoms /** Geoms for which cons must be re-displayed */
        );
        /** Updates the dimension display without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateDimensionDisplay
        (
        );
        /** Updates the dimension display of given set of geoms without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateDimensionDisplay
        (
            const std::vector<NXOpen::SmartObject *> & geoms /** Geoms for which cons must be re-displayed */
        );
        /** Updates the dimension display of given set of dims without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateDimensionDisplay
        (
            const std::vector<NXOpen::NXObject *> & dims /** Dims for which cons must be re-displayed */
        );
        /** Updates the constraint display without updating the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateConstraintDisplay
        (
        );
        /** Updates the constraint display of given set of geoms without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateConstraintDisplay
        (
            const std::vector<NXOpen::SmartObject *> & geoms /** Geoms for which cons must be re-displayed */
        );
        /** Adds a curve or point to the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void AddGeometry
        (
            NXOpen::DisplayableObject * crv /** Must be a curve or point */,
            NXOpen::Sketch::InferConstraintsOption inferCoincidentConstraints /** Whether to automatically create coincident constraints
                                                         when adding the geometry.  If this flag is true and there exists
                                                         another curve or point in the sketch that has a vertex that
                                                         is at the same location (within system tolerance)
                                                         as one of the vertices for crv, a coincident constraint
                                                         will be created */
        );
        /** Adds a curve or point to the sketch.  Infers coincident constraints with other geometry
            in the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void AddGeometry
        (
            NXOpen::DisplayableObject * crv /** Must be a curve or point */
        );
        /** Adds a curve or point to a sketch.
             
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void AddGeometry
        (
            NXOpen::Curve * crv /** Must be a curve or point */,
            NXOpen::Sketch::InferConstraintsOption inferCoincidentConstraints /** Whether to automatically create coincident constraints
                                                         when adding the geometry.  If this flag is true and there exists
                                                         another curve or point in the sketch that has a vertex that
                                                         is at the same location (within system tolerance)
                                                         as one of the vertices for crv, a coincident constraint
                                                         will be created */,
            NXOpen::Sketch::AddEllipseOption ellipseOption /** If you are adding an ellipse to the sketch, this parameter
                                                                    indicates whether the ellipse should be treated as an
                                                                    ellipse or general conic.  If you are not adding an ellipse, the
                                                                    option is ignored.
                                                                    See the documentation for @link Sketch::AddEllipseOption Sketch::AddEllipseOption@endlink  for more details.
                                                                    The default value is
                                                                    @link Sketch::AddEllipseOptionTreatAsEllipse Sketch::AddEllipseOptionTreatAsEllipse@endlink .
                                                                    In order to treat an ellipse as a conic, its end angle minus its
                                                                    start angle must be less than 180 degrees.*/
        );
        /** Adds an array of curves or points to a sketch.
             
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void AddGeometry
        (
            NXOpen::Sketch::InferConstraintsOption inferCoincidentConstraints /** Whether to automatically create coincident constraints
                                                         when adding the geometry.  If this flag is true and there exists
                                                         another curve or point in the sketch that has a vertex that
                                                         is at the same location (within system tolerance)
                                                         as one of the vertices for crv, a coincident constraint
                                                         will be created */,
            NXOpen::Sketch::AddEllipseOption ellipseOption /** If you are adding an ellipse to the sketch, this parameter
                                                                    indicates whether the ellipse should be treated as an
                                                                    ellipse or general conic.  If you are not adding an ellipse, the
                                                                    option is ignored.
                                                                    See the documentation for @link Sketch::AddEllipseOption Sketch::AddEllipseOption@endlink  for more details.
                                                                    The default value is
                                                                    @link Sketch::AddEllipseOptionTreatAsEllipse Sketch::AddEllipseOptionTreatAsEllipse@endlink .
                                                                    In order to treat an ellipse as a conic, its end angle minus its
                                                                    start angle must be less than 180 degrees.*/,
            const std::vector<NXOpen::SmartObject *> & curvesOrPoints /** Must be a curve or point */
        );
        /** Gets the status of the sketch and the number of degrees of freedom that remain in the sketch.
            The status of the sketch indicates whether the sketch is fully constrained or under, over, or
            inconsistently constrained.  @return  The sketch's status, which indicates how well constrained the sketch is 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Sketch::Status GetStatus
        (
            int* dofNeeded /** The number of degrees of freedom left in the sketch */
        );
        /** Gets all constraints in the sketch of a particular type  @return  All the constraints in the sketch of the specified type 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::SketchConstraint *> GetAllConstraintsOfType
        (
            NXOpen::Sketch::ConstraintClass conClass /** Optional filter.  Use @link Sketch::ConstraintClassAny Sketch::ConstraintClassAny@endlink  if you
                                                          do not want to filter by constraint class */,
            NXOpen::Sketch::ConstraintType conType /** Optional filter.  Use @link Sketch::ConstraintTypeNoCon Sketch::ConstraintTypeNoCon@endlink  if you
                                                        do not want to filter by constraint type */
        );
        /** Gets all the constraints associated with a particular geometric item  @return  All the constraints associated with the geometry that is input 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::SketchConstraint *> GetConstraintsForGeometry
        (
            NXOpen::SmartObject * geometry /** Must be a curve or point */,
            NXOpen::Sketch::ConstraintClass conClass /** Optional filter.  Use @link Sketch::ConstraintClassAny Sketch::ConstraintClassAny@endlink  if you
                                                          do not want to filter by constraint class */
        );
        /** Returns all the expressions in the sketch  @return  All the expressions in the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::Expression *> GetAllExpressions
        (
        );
        /** Returns all the curves and points in the sketch  @return  All the curves and points in the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::NXObject *> GetAllGeometry
        (
        );
        /**Returns  a flag indicating whether the degree of freedom arrows are currently being
            displayed 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool DOFDisplay
        (
        );
        /**Sets  a flag indicating whether the degree of freedom arrows are currently being
            displayed 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetDOFDisplay
        (
            bool displayDof /** display dof */ 
        );
        /** Fillets curves and creates appropriate constraints.
            If the input curves have mirror constraints, the fillet is also performed on the mirror curves.
             @return  The fillet arcs that are created.
                                 If the input curves do not have any mirror constraints, the number of fillet arcs will always be one.
                                 If the input curves have mirror constraints, fillets will be created on the mirrored curves,
                                 and all the fillet arcs that were created are returned 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::Arc *> Fillet
        (
            NXOpen::Curve * curve1 /** First curve for the fillet */,
            NXOpen::Curve * curve2 /** Second curve for the fillet */,
            const NXOpen::Point3d & helpPoint1 /** Should be a point on the first curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint2 /** Should be a point on the second curve.  Indicates where the fillet should be created */,
            double radius /** Radius of the fillet */,
            NXOpen::Sketch::TrimInputOption doTrim /** Indicates whether the input curves should get trimmed by the fillet */,
            NXOpen::Sketch::CreateDimensionOption createRadiusDim /** Indicates whether a radius dimension should be created */,
            NXOpen::Sketch::AlternateSolutionOption alternateSolution /** Indicates whether the alternate solution should be used instead of the regular solution.
                                                                                The alternate solution for an arc is the portion of the full circle that is left out of the
                                                                                regular solution.*/,
            std::vector<NXOpen::SketchConstraint *> & constraints /** The constraints that were created by the fillet.
                                                                                                    If the input curves get trimmed, coincident and tangent constraints are created.
                                                                                                    If the input curves do not get trimmed, point on curve and tangent constraints are created. */
        );
        /** Fillets curves and creates appropriate constraints.
            If the input curves have mirror constraints, the fillet is also performed on the mirror curves.
             @return  The fillet arcs that are created.
                                 If the input curves do not have any mirror constraints, the number of fillet arcs will always be one.
                                 If the input curves have mirror constraints, fillets will be created on the mirrored curves,
                                 and all the fillet arcs that were created are returned 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::Arc *> Fillet
        (
            NXOpen::Curve * curve1 /** First curve for the fillet */,
            NXOpen::Curve * curve2 /** Second curve for the fillet */,
            const NXOpen::Point3d & helpPoint1 /** Should be a point on the first curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint2 /** Should be a point on the second curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & pointOnArc /** Point on fillet arc */,
            double radius /** Radius of the fillet */,
            NXOpen::Sketch::TrimInputOption doTrim /** Indicates whether the input curves should get trimmed by the fillet */,
            NXOpen::Sketch::CreateDimensionOption createRadiusDim /** Indicates whether a radius dimension should be created */,
            NXOpen::Sketch::AlternateSolutionOption alternateSolution /** Indicates whether the alternate solution should be used instead of the regular solution.
                                                                                The alternate solution for an arc is the portion of the full circle that is left out of the
                                                                                regular solution.*/,
            std::vector<NXOpen::SketchConstraint *> & constraints /** The constraints that were created by the fillet.
                                                                                                    If the input curves get trimmed, coincident and tangent constraints are created.
                                                                                                    If the input curves do not get trimmed, point on curve and tangent constraints are created. */
        );
        /** Fillets curves and creates appropriate constraints.
            If the input curves have mirror constraints, the fillet is also performed on the mirror curves.
             @return  The fillet arcs that are created.
                                 If the input curves do not have any mirror constraints, the number of fillet arcs will always be one.
                                 If the input curves have mirror constraints, fillets will be created on the mirrored curves,
                                 and all the fillet arcs that were created are returned 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::Arc *> Fillet
        (
            NXOpen::Curve * curve1 /** First curve for the fillet */,
            NXOpen::Curve * curve2 /** Second curve for the fillet */,
            NXOpen::Curve * curve3 /** Third curve for the fillet */,
            const NXOpen::Point3d & helpPoint1 /** Should be a point on the first curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint2 /** Should be a point on the second curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint3 /** Should be a point on the third curve.  Indicates where the fillet should be created */,
            double radius /** Radius of the fillet */,
            NXOpen::Sketch::TrimInputOption doTrim /** Indicates whether the input curves should get trimmed by the fillet */,
            NXOpen::Sketch::DeleteThirdCurveOption doDelete /** Indicates whether the third curve should be deleted */,
            NXOpen::Sketch::CreateDimensionOption createRadiusDim /** Indicates whether a radius dimension should be created */,
            NXOpen::Sketch::AlternateSolutionOption alternateSolution /** Indicates whether the alternate solution should be used instead of the regular solution.
                                                                                The alternate solution for an arc is the portion of the full circle that is left out of the
                                                                                regular solution.*/,
            std::vector<NXOpen::SketchConstraint *> & constraints /** The constraints that were created by the fillet.
                                                                                                    If the input curves get trimmed, coincident and tangent constraints are created.
                                                                                                    If the input curves do not get trimmed, point on curve and tangent constraints are created. */
        );
        /** Fillets curves and creates appropriate constraints.
            If the input curves have mirror constraints, the fillet is also performed on the mirror curves.
             @return  The fillet arcs that are created.
                                 If the input curves do not have any mirror constraints, the number of fillet arcs will always be one.
                                 If the input curves have mirror constraints, fillets will be created on the mirrored curves,
                                 and all the fillet arcs that were created are returned 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::Arc *> Fillet
        (
            NXOpen::Curve * curve1 /** First curve for the fillet */,
            NXOpen::Curve * curve2 /** Second curve for the fillet */,
            NXOpen::Curve * curve3 /** Third curve for the fillet */,
            const NXOpen::Point3d & helpPoint1 /** Should be a point on the first curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint2 /** Should be a point on the second curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint3 /** Should be a point on the third curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & pointOnArc /** Point on fillet arc */,
            double radius /** Radius of the fillet */,
            NXOpen::Sketch::TrimInputOption doTrim /** Indicates whether the input curves should get trimmed by the fillet */,
            NXOpen::Sketch::DeleteThirdCurveOption doDelete /** Indicates whether the third curve should be deleted */,
            NXOpen::Sketch::CreateDimensionOption createRadiusDim /** Indicates whether a radius dimension should be created */,
            NXOpen::Sketch::AlternateSolutionOption alternateSolution /** Indicates whether the alternate solution should be used instead of the regular solution.
                                                                                The alternate solution for an arc is the portion of the full circle that is left out of the
                                                                                regular solution.*/,
            std::vector<NXOpen::SketchConstraint *> & constraints /** The constraints that were created by the fillet.
                                                                                                    If the input curves get trimmed, coincident and tangent constraints are created.
                                                                                                    If the input curves do not get trimmed, point on curve and tangent constraints are created. */
        );
        /** Creates a reflection of the input geometry.
                 <br> 
                This API is now deprecated.
                Please use @link SketchMirrorBuilder SketchMirrorBuilder@endlink  instead.
                 <br> 
             @return  The mirrored geometry that was created 
         <br>  @deprecated Deprecated in NX5.0.0.  Please use @link SketchMirrorBuilder SketchMirrorBuilder@endlink  instead. <br>  

         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public:  NX_DEPRECATED("Deprecated in NX5.0.0.  Please use SketchMirrorBuilder instead.") std::vector<NXOpen::SmartObject *> MirrorObjects
        (
            NXOpen::DisplayableObject * centerline /** Axis of reflection for the mirror. Must be a linear curve, edge, datum axis or datum plane */,
            const std::vector<NXOpen::SmartObject *> & objectsToMirror /** Points and curves to mirror.  None of the curves may be used as a centerline for another mirror operation */
        );
        /**Returns  the feature associated with this sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Features::Feature * Feature
        (
        );
        /**Returns  the view corresponding to sketch 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::View * View
        (
        );
        /**Returns  true if drafting sketch 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsDraftingSketch
        (
        );
        /** Deletes all geometric constraints associated with the object and all of its
                vertices. Converts all the driving dimensions associated with the object and its
                vertices to reference dimensions. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void DeleteConstraintsOnGeometries
        (
            const std::vector<NXOpen::NXObject *> & objects /** Objects whose constraints needs to be deleted */
        );
        /** Deletes all geometric constraints associated with the object and all of its vertices. Converts all the driving dimensions 
                associated with the object and its vertices to reference dimensions. The user can pass in a vertex to do the same on just the
                supplied vertex. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void DeleteConstraintsOnGeometries
        (
            const std::vector<NXOpen::Sketch::ConstraintGeometry> & objects /** Objects whose constraints needs to be deleted */
        );
        /** Creates copies of input objects and constraints between these objects.  @return  Copies of objects 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::NXObject *> CopyObjects
        (
            const std::vector<NXOpen::NXObject *> & inputObjects /** Objects to be copied */
        );
        /** Creates copies of input objects and constraints between these objects. This function is same as
                @link Sketch::CopyObjects Sketch::CopyObjects@endlink  except that it returns an array of newly created dimensions 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void CopyObjectsWithDimensionOutput
        (
            const std::vector<NXOpen::NXObject *> & inputObjects /** Objects to be copied */,
            std::vector<NXOpen::NXObject *> & outputObjects /** Copies of objects */,
            std::vector<NXOpen::NXObject *> & outputDims /** Copies of dims */
        );
        /** Unblanks dimensions in the active sketch associated with the input sketch geometry 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void ShowDimensions
        (
            const std::vector<NXOpen::DisplayableObject *> & inputObjects /** Geometry and groups in active sketch */
        );
        /** Blanks dimensions in the active sketch associated with the input sketch geometry.  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void HideDimensions
        (
            const std::vector<NXOpen::DisplayableObject *> & inputObjects /** Geometry and groups in active sketch */
        );
        /** Unblanks all the dimensions of input sketch 
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void ShowDimensions
        (
        );
        /** Unblanks dimensions in the active sketch associated with the input sketch geometry. This function can accept vertices. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void ShowDimensions
        (
            const std::vector<NXOpen::Sketch::ConstraintGeometry> & objects /** Geometry and vertices in active sketch */
        );
        /** Blanks all the dimensions of input sketch 
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void HideDimensions
        (
        );
        /** Blanks dimensions in the active sketch associated with the input sketch geometry. This function can accept vertices 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void HideDimensions
        (
            const std::vector<NXOpen::Sketch::ConstraintGeometry> & objects /** Geometry and vertices in active sketch */
        );
        /** Creates Automatic Constraints on input set of geometries.  @return  Array of deduced constraints 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::SketchConstraint *> AutoConstrain
        (
            double linearTolerance /** Capture Distance           */,
            double angularTolerance /** Capture Angle              */,
            bool allowRemoteConstraints /** Allow remote constraints   */,
            const std::vector<NXOpen::SmartObject *> & geometries /** Array of geometries     */,
            const std::vector<NXOpen::Sketch::ConstraintType> & autoconstraintTypes /** Constraint type array      */
        );
        /** Makes the sketch placement face and directional reference internal to the sketch
               if they are both datums referenced only by the sketch. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void MakeDatumsInternal
        (
        );
        /** Makes the internal sketch placement face and directional reference datums external. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void MakeDatumsExternal
        (
        );
        /**Returns  true if the sketch is internal. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: bool IsInternal
        (
        );
        /** Creates copies of input objects and constraints between these objects.
            Sketch dimensions are copied only if explicitly included in the input_objects array. 
             @return  Map between the original input object and the corresponding copied object 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::Sketch::CopyObjectData> CopyObjectsWithTracking
        (
            const std::vector<NXOpen::DisplayableObject *> & inputObjects /** Objects to be copied */
        );
        /**Returns  the current update scope. Used in Direct Sketch to control update 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Sketch::UpdateLevel UpdateScope
        (
        );
        /**Sets  the current update scope. Used in Direct Sketch to control update 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetUpdateScope
        (
            NXOpen::Sketch::UpdateLevel updateScope /** update scope */ 
        );


        /** Contains preferences for the sketch 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Preferences::SketchPreferences *Preferences();
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
