#ifndef NXOpen_UISTYLER_PUSHBUTTON_HXX_INCLUDED
#define NXOpen_UISTYLER_PUSHBUTTON_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_PushButton.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UIStyler
    {
        class PushButton;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        class PushButtonImpl;
        /** Represents a PushButton for UI Styler 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  PushButton : public UIStyler::StylerItem
        {
            public: /**Called when a dialog user clicks on the push button or presses the spacebar when the push button has 
                keyboard focus. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Activate;
            private: PushButtonImpl * m_pushbutton_impl;
            /// \cond NX_NO_DOC 
            public: explicit PushButton(void *ptr);
            /// \endcond 
            /**Registers activate callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddActivateHandler
            (
                const NXOpen::UIStyler::PushButton::Activate&  activateevent /** activateevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /**Specifies a filename that contains a bitmap definition. The filename must contain a UBM, XPM, or BMP 
                extension. When you use this field, the system displays a bitmap for this dialog item instead of a text 
                label. When a bitmap is present, the system uses the text label as a popup hint when a user places the 
                mouse cursor over the bitmap.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBitmap
            (
                const NXString & bitmap /**the bitmap extension   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies a filename that contains a bitmap definition. The filename must contain a UBM, XPM, or BMP 
                extension. When you use this field, the system displays a bitmap for this dialog item instead of a text 
                label. When a bitmap is present, the system uses the text label as a popup hint when a user places the 
                mouse cursor over the bitmap.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetBitmap
            (
                const char * bitmap /**the bitmap extension   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies descriptive text to display for the dialog item. It should describe the dialog item's intended 
                use. If you specify a bitmap for this dialog item, it uses this text as tooltip text.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLabel
            (
                const NXString & strLabel /**the label string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies descriptive text to display for the dialog item. It should describe the dialog item's intended 
                use. If you specify a bitmap for this dialog item, it uses this text as tooltip text.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetLabel
            (
                const char * strLabel /**the label string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets  the senstivity of dialog.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /** to set senstivity of dialog */
            );
            /**Returns  the senstivity of dialog.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Sensitivity
            (
            );
            /**Sets  the visibility of dialog.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /**to set visibility of dialog */
            );
            /**Returns  the visibility of dialog.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Visibility
            (
            );
            /**Indicates that this dialog item is receiving keyboard focus. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFocus
            (
            );
            /** Sets default action 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultAction
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
