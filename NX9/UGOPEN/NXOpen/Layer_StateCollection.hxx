#ifndef NXOpen_LAYER_STATECOLLECTION_HXX_INCLUDED
#define NXOpen_LAYER_STATECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Layer_StateCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Layer.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_layer_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Layer
    {
        class StateCollection;
    }
    namespace Layer
    {
        class Category;
    }
    namespace Layer
    {
        class StateCollectionImpl;
        /** Represents a copy of the layer states.  You can manipulate the 
            StateCollection without affecting the actual layer states in the part.
            Your changes to the StateCollection will not be applied to the part until you
            apply them through the method @link Layer::LayerManager::SetStates Layer::LayerManager::SetStates@endlink . 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_LAYEREXPORT  StateCollection : public TransientObject
        {
            private: StateCollectionImpl * m_statecollection_impl;
            /// \cond NX_NO_DOC 
            public: explicit StateCollection(void *ptr);
            /// \endcond 
            /** Returns the state of the specified layer  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Layer::State GetState
            (
                int layer /** layer */ 
            );
            /** Sets the state of the specified layer 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetState
            (
                int layer /** layer */ ,
                NXOpen::Layer::State state /** state */ 
            );
            /** Sets the state of every layer in the category to the
                    specified state, except the work layer  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStateOfCategory
            (
                NXOpen::Layer::Category * category /** category */ ,
                NXOpen::Layer::State state /** new state for the category.  Must not be
                                                @link Layer::StateWorkLayer Layer::StateWorkLayer@endlink  */
            );
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~StateCollection();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
