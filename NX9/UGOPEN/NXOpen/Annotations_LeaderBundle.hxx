#ifndef NXOpen_ANNOTATIONS_LEADERBUNDLE_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LEADERBUNDLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LeaderBundle.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class LeaderBundle;
    }
    class NXObject;
    class View;
    namespace Annotations
    {
        class LeaderBundleImpl;
        /** Represents the data for all the leaders of an annotation 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  LeaderBundle : public TransientObject
        {
            private: LeaderBundleImpl * m_leaderbundle_impl;
            /// \cond NX_NO_DOC 
            public: explicit LeaderBundle(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~LeaderBundle();
            /**Returns  the leader type 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LeaderType LeaderType
            (
            );
            /**Sets  the leader type 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLeaderType
            (
                NXOpen::Annotations::LeaderType leaderType /** leader type */ 
            );
            /**Returns  the leader side 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LeaderSide LeaderSide
            (
            );
            /**Sets  the leader side 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLeaderSide
            (
                NXOpen::Annotations::LeaderSide leaderSide /** leader side */ 
            );
            /**Returns  the leader alignment 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LeaderAlignment LeaderAlignment
            (
            );
            /**Sets  the leader alignment 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLeaderAlignment
            (
                NXOpen::Annotations::LeaderAlignment leaderAlignment /** leader alignment */ 
            );
            /**Returns  the number of leaders.
                    Must not exceed
                    @link Annotations::ConstantsMaxLeaders Annotations::ConstantsMaxLeaders@endlink .
                    The only leader types that permit more than one leader are the following:
                    Plain, Around, PlainAligned, and AroundAligned.
                    PlainAligned and AroundAligned require at least one leader.
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfLeaders
            (
            );
            /**Sets  the number of leaders.
                    Must not exceed
                    @link Annotations::ConstantsMaxLeaders Annotations::ConstantsMaxLeaders@endlink .
                    The only leader types that permit more than one leader are the following:
                    Plain, Around, PlainAligned, and AroundAligned.
                    PlainAligned and AroundAligned require at least one leader.
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNumberOfLeaders
            (
                int numLeaders /** num leaders */ 
            );
            /** Sets the leader data for the nth leader 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLeaderData
            (
                int n /** The leader to set the data for */,
                NXOpen::Annotations::LeaderAttachment attachmentType /** attachment type */ ,
                NXOpen::NXObject * attachmentObject /** Attachment object.  Should be NULL
                                                    if the attachment type is Screen.
                                                    Must not be NULL if the attachment type
                                                    is OnObject. */,
                NXOpen::View * attachmentView /** The view that the leader will be associated with.
                                                        Must not be NULL */,
                const NXOpen::Point3d & endPoint /** The coordinates of the leader's end point.
                                                        If the attachment type is Screen, the 
                                                        coordinates will be view coordinates.
                                                        If the attachment type is OnObject, the
                                                        coordinates will be in the absolute
                                                        coordinate system of the model that owns
                                                        the attachment object */,
                double angle /** angle */ ,
                const std::vector<NXOpen::Point3d> & intermediatePoints /** Intermediate points for the leader.  The number of points must not
                                exceed @link Annotations::ConstantsMaxLeaderIntermediatePoints Annotations::ConstantsMaxLeaderIntermediatePoints@endlink .
                                The points are in the view coordinate system.
                                The only leader types that permit intermediate points are the
                                following:  Plain, Around, PlainAligned, AroundAligned,
                                DatumArrow, and GbDatumArrow. */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
