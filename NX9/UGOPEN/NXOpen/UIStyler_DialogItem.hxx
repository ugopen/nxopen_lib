#ifndef NXOpen_UISTYLER_DIALOGITEM_HXX_INCLUDED
#define NXOpen_UISTYLER_DIALOGITEM_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_DialogItem.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/SelectionHandle.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_FileOperationData.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UIStyler
    {
        class DialogItem;
    }
    class SelectionHandle;
    namespace UIStyler
    {
        class FileOperationData;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        class DialogItemImpl;
        /** Represents a DialogItem for UI Styler. 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  DialogItem : public UIStyler::StylerItem
        {
            /** Describes dialog item index */
            public: enum DialogItemIndex
            {
                DialogItemIndexOk/** Ok index */,
                DialogItemIndexApply/** Apply index */,
                DialogItemIndexBack/** Back index */,
                DialogItemIndexCancel/** Cancel index */
            };

            public: /**Called when the dialog displays. You can use the Constructor callback to set up dialog item attributes 
                such as populating a list or setting the sensitivity of a dialog item. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Construct;
            public: /**Called when the dialog closes. Use the Destructor callback to perform cleanup. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Destruct;
            public: /**Called when a dialog user clicks OK or MB2 anywhere in NX or presses the OK's keyboard accelerator 
                as defined in the resource file. OK callbacks should terminate the dialog and always return 
                UF_UI_CB_EXIT_DIALOG. 
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Okay;
            public: /**Called when a dialog user clicks Apply or \<Ctrl\>MB2 anywhere in NX or presses the Apply's 
                keyboard accelerator as defined in the resource file. Apply callbacks should not terminate 
                the dialog and always return UF_UI_CB_CONTINUE_DIALOG. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Apply;
            public: /**Called when a dialog user clicks Back \<Shift\>MB2 anywhere in NX or presses Back's keyboard accelerator 
                as defined in the resource file. Back callbacks should terminate the dialog and always return 
                UF_UI_CB_EXIT_DIALOG. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Back;
            public: /**Called when a dialog user clicks Cancel or \<Alt\>MB2 anywhere in NX or presses Cancel's keyboard accelerator 
                as defined in the resource file.Cancel callbacks should terminate the dialog and always return UF_UI_CB_EXIT_DIALOG. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Cancel;
            public: /**Called just before a dialog user selects a file operation, such as in File?New, and again after a file
                operation completes.
                A typical use for a file operation callback would be to make sure that the system updates cached part data 
                in a part before a dialog user executes a File?Save. The callback can determine from the callback data 
                structure whether the file operation is about to begin or has just completed. It can also determine 
                which operation is being executed. This callback is only used on DA1 dialogs because the DA2 dialogs 
                are usually cancelled (automatically through the quick access menus) when a dialog user selects any of 
                the File menu options. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> FileOperation;
            private: DialogItemImpl * m_dialogitem_impl;
            /// \cond NX_NO_DOC 
            public: explicit DialogItem(void *ptr);
            /// \endcond 
            /**Registers construct callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddConstructHandler
            (
                const NXOpen::UIStyler::DialogItem::Construct&  constructevent /** constructevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /**Registers destruct callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddDestructHandler
            (
                const NXOpen::UIStyler::DialogItem::Destruct&  destructevent /** destructevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /**Registers ok callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddOkayHandler
            (
                const NXOpen::UIStyler::DialogItem::Okay&  okayevent /** okayevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /**Registers apply callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddApplyHandler
            (
                const NXOpen::UIStyler::DialogItem::Apply&  applyevent /** applyevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /**Registers back callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddBackHandler
            (
                const NXOpen::UIStyler::DialogItem::Back&  backevent /** backevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /**Registers cancel callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddCancelHandler
            (
                const NXOpen::UIStyler::DialogItem::Cancel&  cancelevent /** cancelevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /**Registers file operation callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddFileOperationHandler
            (
                const NXOpen::UIStyler::DialogItem::FileOperation&  fileoperationevent /** fileoperationevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /**Specifies a string to display on the top border of the dialog 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTitle
            (
                const NXString & strLabel /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies a string to display on the top border of the dialog 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetTitle
            (
                const char * strLabel /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies the sensitivity of the dialog. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /**TRUE if sensitive, FALSE if insensitive */
            );
            /** Specifies the sensitivity of the navigation buttons at the bottom of the dialog. If you set the 
                UF_STYLER_BACK_INDEX button to insensitive at creation time, the system does not show the BACK button; 
                Changing the button's sensitivity while the dialog displays does not show the Back button. 
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNavigationSensitivity
            (
                NXOpen::UIStyler::DialogItem::DialogItemIndex subItemIndex /** Sub item index */,
                bool type /** TRUE if sensitive, FALSE if insensitive */
            );
            /**Specifies wether dialog is allowed to resize 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetResize
            (
                bool type /**TRUE to allow dialog to resize; FALSE to freeze the dialog size*/
            );
            /**Specifies the pixel width for the dialog. You can only set this attribute when the 
                Dialog Resize attribute is set to TRUE. You cannot enter a negative number. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWidth
            (
                int width /** width */ 
            );
            /** Gets the selection handle for a given dialog item @return Selection handle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectionHandle * GetSelectionHandle
            (
            );
            /**Returns  the file operation data 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::UIStyler::FileOperationData * FileOperationData
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
