#ifndef NXOpen_FEATURES_FEATURECOLLECTION_HXX_INCLUDED
#define NXOpen_FEATURES_FEATURECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FeatureCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/Features_CopyPasteBuilder.hxx>
#include <NXOpen/Features_Feature.hxx>
#include <NXOpen/Features_FeatureReplayBuilder.hxx>
#include <NXOpen/Features_JoinCurvesBuilder.hxx>
#include <NXOpen/Features_PaintParametersBuilder.hxx>
#include <NXOpen/Features_RasterImage.hxx>
#include <NXOpen/Features_ReferenceMapperBuilder.hxx>
#include <NXOpen/Features_RemoveParametersBuilder.hxx>
#include <NXOpen/Features_ReplaceFeatureBuilder.hxx>
#include <NXOpen/Features_SketchConversionReport.hxx>
#include <NXOpen/Features_ThroughCurveMeshBuilder.hxx>
#include <NXOpen/Features_ThroughCurvesBuilder.hxx>
#include <NXOpen/HumanPosturePrediction.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class FeatureCollection;
    }
    class Part;
    namespace Features
    {
        class Feature;
    }
    class Body;
    class Curve;
    class CutView;
    namespace Die
    {
        class DieCollection;
    }
    class Edge;
    class Face;
    namespace Features
    {
        class AOCSBuilder;
    }
    namespace Features
    {
        class AdaptiveShell;
    }
    namespace Features
    {
        class AdaptiveShellBuilder;
    }
    namespace Features
    {
        class AdmMoveFace;
    }
    namespace Features
    {
        class AdmMoveFaceBuilder;
    }
    namespace Features
    {
        class AdmOffsetRegion;
    }
    namespace Features
    {
        class AdmOffsetRegionBuilder;
    }
    namespace Features
    {
        class AdmResizeFace;
    }
    namespace Features
    {
        class AdmResizeFaceBuilder;
    }
    namespace Features
    {
        class AestheticFaceBlend;
    }
    namespace Features
    {
        class AestheticFaceBlendBuilder;
    }
    namespace Features
    {
        class AnalyzePocket;
    }
    namespace Features
    {
        class AnalyzePocketBuilder;
    }
    namespace Features
    {
        class AngularDim;
    }
    namespace Features
    {
        class AngularDimBuilder;
    }
    namespace Features
    {
        class AssemblyCut;
    }
    namespace Features
    {
        class AssemblyCutBuilder;
    }
    namespace Features
    {
        class AutomotiveCollection;
    }
    namespace Features
    {
        class BlendPocket;
    }
    namespace Features
    {
        class BlendPocketBuilder;
    }
    namespace Features
    {
        class BlockFeatureBuilder;
    }
    namespace Features
    {
        class BooleanBuilder;
    }
    namespace Features
    {
        class BooleanFeature;
    }
    namespace Features
    {
        class BoundedPlane;
    }
    namespace Features
    {
        class BoundedPlaneBuilder;
    }
    namespace Features
    {
        class BridgeCurve;
    }
    namespace Features
    {
        class BridgeCurveBuilder;
    }
    namespace Features
    {
        class BridgeCurveBuilderEx;
    }
    namespace Features
    {
        class BridgeSurface;
    }
    namespace Features
    {
        class BridgeSurfaceBuilder;
    }
    namespace Features
    {
        class ChamferBuilder;
    }
    namespace Features
    {
        class ChangeShellThickness;
    }
    namespace Features
    {
        class ChangeShellThicknessBuilder;
    }
    namespace Features
    {
        class CircularBlendCurve;
    }
    namespace Features
    {
        class CircularBlendCurveBuilder;
    }
    namespace Features
    {
        class Coaxial;
    }
    namespace Features
    {
        class CoaxialBuilder;
    }
    namespace Features
    {
        class ColorFaceBuilder;
    }
    namespace Features
    {
        class ColorFeatureBuilder;
    }
    namespace Features
    {
        class ColorFeatureGroupBuilder;
    }
    namespace Features
    {
        class CombinedProjection;
    }
    namespace Features
    {
        class CombinedProjectionBuilder;
    }
    namespace Features
    {
        class CompositeCurveBuilder;
    }
    namespace Features
    {
        class ConcaveFaces;
    }
    namespace Features
    {
        class ConcaveFacesBuilder;
    }
    namespace Features
    {
        class Cone;
    }
    namespace Features
    {
        class ConeBuilder;
    }
    namespace Features
    {
        class CoplanarBuilder;
    }
    namespace Features
    {
        class CopyFaceBuilder;
    }
    namespace Features
    {
        class CopyPasteBuilder;
    }
    namespace Features
    {
        class CurveLengthBuilder;
    }
    namespace Features
    {
        class CurveOnSurface;
    }
    namespace Features
    {
        class CurveOnSurfaceBuilder;
    }
    namespace Features
    {
        class CutFaceBuilder;
    }
    namespace Features
    {
        class CylinderBuilder;
    }
    namespace Features
    {
        class DatumAxisBuilder;
    }
    namespace Features
    {
        class DatumCsysBuilder;
    }
    namespace Features
    {
        class DatumPlaneBuilder;
    }
    namespace Features
    {
        class DeleteBody;
    }
    namespace Features
    {
        class DeleteBodyBuilder;
    }
    namespace Features
    {
        class DeleteEdge;
    }
    namespace Features
    {
        class DeleteEdgeBuilder;
    }
    namespace Features
    {
        class DeleteFaceBuilder;
    }
    namespace Features
    {
        class DesignFeatureCollection;
    }
    namespace Features
    {
        class DividefaceBuilder;
    }
    namespace Features
    {
        class DraftBodyBuilder;
    }
    namespace Features
    {
        class DraftBuilder;
    }
    namespace Features
    {
        class DraftingSplineBuilder;
    }
    namespace Features
    {
        class EdgeBlendBuilder;
    }
    namespace Features
    {
        class EdgeSymmetryBuilder;
    }
    namespace Features
    {
        class EditCrossSection;
    }
    namespace Features
    {
        class EditCrossSectionBuilder;
    }
    namespace Features
    {
        class EditDimensionBuilder;
    }
    namespace Features
    {
        class EmbossBody;
    }
    namespace Features
    {
        class EmbossBodyBuilder;
    }
    namespace Features
    {
        class EmbossBuilder;
    }
    namespace Features
    {
        class Enlarge;
    }
    namespace Features
    {
        class EnlargeBuilder;
    }
    namespace Features
    {
        class ExtendSheet;
    }
    namespace Features
    {
        class ExtendSheetBuilder;
    }
    namespace Features
    {
        class Extension;
    }
    namespace Features
    {
        class ExtensionBuilder;
    }
    namespace Features
    {
        class ExtractFaceBuilder;
    }
    namespace Features
    {
        class ExtrudeBuilder;
    }
    namespace Features
    {
        class FaceBlendBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class FeatureGroup;
    }
    namespace Features
    {
        class FeatureReplayBuilder;
    }
    namespace Features
    {
        class FitCurve;
    }
    namespace Features
    {
        class FitCurveBuilder;
    }
    namespace Features
    {
        class FitSurface;
    }
    namespace Features
    {
        class FitSurfaceBuilder;
    }
    namespace Features
    {
        class Fixed;
    }
    namespace Features
    {
        class FixedBuilder;
    }
    namespace Features
    {
        class FreeformCurveCollection;
    }
    namespace Features
    {
        class FreeformSurfaceCollection;
    }
    namespace Features
    {
        class GeneralConic;
    }
    namespace Features
    {
        class GeneralConicBuilder;
    }
    namespace Features
    {
        class GeomcopyBuilder;
    }
    namespace Features
    {
        class GlobalShaping;
    }
    namespace Features
    {
        class GlobalShapingBuilder;
    }
    namespace Features
    {
        class GroupFace;
    }
    namespace Features
    {
        class GroupFaceBuilder;
    }
    namespace Features
    {
        class Helix;
    }
    namespace Features
    {
        class HelixBuilder;
    }
    namespace Features
    {
        class HoleFeatureBuilder;
    }
    namespace Features
    {
        class HolePackage;
    }
    namespace Features
    {
        class HolePackageBuilder;
    }
    namespace Features
    {
        class HumanBuilder;
    }
    namespace Features
    {
        class IForm;
    }
    namespace Features
    {
        class IFormBuilder;
    }
    namespace Features
    {
        class InstanceFeature;
    }
    namespace Features
    {
        class InstanceFeatureBuilder;
    }
    namespace Features
    {
        class IntersectionCurveBuilder;
    }
    namespace Features
    {
        class IsolateFeature;
    }
    namespace Features
    {
        class IsolateFeatureBuilder;
    }
    namespace Features
    {
        class IsoparametricCurves;
    }
    namespace Features
    {
        class IsoparametricCurvesBuilder;
    }
    namespace Features
    {
        class JoinCurvesBuilder;
    }
    namespace Features
    {
        class LabelChamfer;
    }
    namespace Features
    {
        class LabelChamferBuilder;
    }
    namespace Features
    {
        class LabelNotchBlend;
    }
    namespace Features
    {
        class LabelNotchBlendBuilder;
    }
    namespace Features
    {
        class LawCurve;
    }
    namespace Features
    {
        class LawCurveBuilder;
    }
    namespace Features
    {
        class LawExtension;
    }
    namespace Features
    {
        class LawExtensionBuilder;
    }
    namespace Features
    {
        class LawExtensionBuilderEx;
    }
    namespace Features
    {
        class LinearDimension;
    }
    namespace Features
    {
        class LinearDimensionBuilder;
    }
    namespace Features
    {
        class LinkedFacet;
    }
    namespace Features
    {
        class LinkedFacetBuilder;
    }
    namespace Features
    {
        class MakeOffset;
    }
    namespace Features
    {
        class MakeOffsetBuilder;
    }
    namespace Features
    {
        class Maple;
    }
    namespace Features
    {
        class MapleBuilder;
    }
    namespace Features
    {
        class MasterCutBuilder;
    }
    namespace Features
    {
        class MatchEdge;
    }
    namespace Features
    {
        class MatchEdgeBuilder;
    }
    namespace Features
    {
        class MeshSurfaceBuilder;
    }
    namespace Features
    {
        class MidSurfaceByFacePairs;
    }
    namespace Features
    {
        class MidSurfaceByFacePairsBuilder;
    }
    namespace Features
    {
        class MidSurfaceUserDefined;
    }
    namespace Features
    {
        class MidSurfaceUserDefinedBuilder;
    }
    namespace Features
    {
        class Mirror;
    }
    namespace Features
    {
        class MirrorBodyBuilder;
    }
    namespace Features
    {
        class MirrorBuilder;
    }
    namespace Features
    {
        class MirrorCurveBuilder;
    }
    namespace Features
    {
        class MirrorFaceBuilder;
    }
    namespace Features
    {
        class MirrorFeatureBuilder;
    }
    namespace Features
    {
        class MoveFaceBuilder;
    }
    namespace Features
    {
        class NSidedSurface;
    }
    namespace Features
    {
        class NSidedSurfaceBuilder;
    }
    namespace Features
    {
        class OffsetCurveBuilder;
    }
    namespace Features
    {
        class OffsetEmbossBuilder;
    }
    namespace Features
    {
        class OffsetFaceBuilder;
    }
    namespace Features
    {
        class OffsetRegionBuilder;
    }
    namespace Features
    {
        class OffsetSurfaceBuilder;
    }
    namespace Features
    {
        class OptimizeFaceBuilder;
    }
    namespace Features
    {
        class OvercrownBuilder;
    }
    namespace Features
    {
        class PaintParametersBuilder;
    }
    namespace Features
    {
        class Parallel;
    }
    namespace Features
    {
        class ParallelBuilder;
    }
    namespace Features
    {
        class PartModule;
    }
    namespace Features
    {
        class PartModuleBuilder;
    }
    namespace Features
    {
        class PasteFaceBuilder;
    }
    namespace Features
    {
        class PatchBuilder;
    }
    namespace Features
    {
        class PatchOpeningsBuilder;
    }
    namespace Features
    {
        class PatternFaceBuilder;
    }
    namespace Features
    {
        class PatternFaceFeature;
    }
    namespace Features
    {
        class PatternFaceFeatureBuilder;
    }
    namespace Features
    {
        class PatternFeatureBuilder;
    }
    namespace Features
    {
        class PatternGeometry;
    }
    namespace Features
    {
        class PatternGeometryBuilder;
    }
    namespace Features
    {
        class Perpendicular;
    }
    namespace Features
    {
        class PerpendicularBuilder;
    }
    namespace Features
    {
        class PointSet;
    }
    namespace Features
    {
        class PointSetBuilder;
    }
    namespace Features
    {
        class PoleSmoothing;
    }
    namespace Features
    {
        class PoleSmoothingBuilder;
    }
    namespace Features
    {
        class ProjectCurveBuilder;
    }
    namespace Features
    {
        class Promotion;
    }
    namespace Features
    {
        class PromotionBuilder;
    }
    namespace Features
    {
        class PullFace;
    }
    namespace Features
    {
        class PullFaceBuilder;
    }
    namespace Features
    {
        class RPOBuilder;
    }
    namespace Features
    {
        class RadialDimension;
    }
    namespace Features
    {
        class RadialDimensionBuilder;
    }
    namespace Features
    {
        class RapidSurface;
    }
    namespace Features
    {
        class RapidSurfaceBuilder;
    }
    namespace Features
    {
        class RasterImage;
    }
    namespace Features
    {
        class ReferenceMapperBuilder;
    }
    namespace Features
    {
        class RefitFace;
    }
    namespace Features
    {
        class RefitFaceBuilder;
    }
    namespace Features
    {
        class RemoveParametersBuilder;
    }
    namespace Features
    {
        class ReorderBlends;
    }
    namespace Features
    {
        class ReorderBlendsBuilder;
    }
    namespace Features
    {
        class ReplaceBlend;
    }
    namespace Features
    {
        class ReplaceBlendBuilder;
    }
    namespace Features
    {
        class ReplaceFaceBuilder;
    }
    namespace Features
    {
        class ReplaceFeatureBuilder;
    }
    namespace Features
    {
        class ResizeBlendBuilder;
    }
    namespace Features
    {
        class ResizeChamfer;
    }
    namespace Features
    {
        class ResizeChamferBuilder;
    }
    namespace Features
    {
        class ResizeFaceBuilder;
    }
    namespace Features
    {
        class ResizePlaneBuilder;
    }
    namespace Features
    {
        class RevolveBuilder;
    }
    namespace Features
    {
        class RibbonBuilder;
    }
    namespace Features
    {
        class RuledBuilder;
    }
    namespace Features
    {
        class ScaleBuilder;
    }
    namespace Features
    {
        class SectionCurveBuilder;
    }
    namespace Features
    {
        class SectionEdit;
    }
    namespace Features
    {
        class SectionEditBuilder;
    }
    namespace Features
    {
        class SectionInertiaAnalysis;
    }
    namespace Features
    {
        class SectionInertiaAnalysisBuilder;
    }
    namespace Features
    {
        class SectionSurface;
    }
    namespace Features
    {
        class SectionSurfaceBuilder;
    }
    namespace Features
    {
        class SectionSurfaceBuilderEx;
    }
    namespace Features
    {
        class SewBuilder;
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class AeroSheetmetalManager;
        }
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class SheetmetalManager;
        }
    }
    namespace Features
    {
        class ShellBuilder;
    }
    namespace Features
    {
        class ShellFace;
    }
    namespace Features
    {
        class ShellFaceBuilder;
    }
    namespace Features
    {
        class ShipCollection;
    }
    namespace Features
    {
        class ShowRelatedFacesBuilder;
    }
    namespace Features
    {
        class SilhouetteFlange;
    }
    namespace Features
    {
        class SilhouetteFlangeBuilder;
    }
    namespace Features
    {
        class SketchConversionReport;
    }
    namespace Features
    {
        class SketchFitCurveBuilder;
    }
    namespace Features
    {
        class SketchSplineBuilder;
    }
    namespace Features
    {
        class SmoothSpline;
    }
    namespace Features
    {
        class SmoothSplineBuilder;
    }
    namespace Features
    {
        class SnipSurface;
    }
    namespace Features
    {
        class SnipSurfaceBuilder;
    }
    namespace Features
    {
        class Sphere;
    }
    namespace Features
    {
        class SphereBuilder;
    }
    namespace Features
    {
        class SphericalCorner;
    }
    namespace Features
    {
        class SphericalCornerBuilder;
    }
    namespace Features
    {
        class SplitBody;
    }
    namespace Features
    {
        class SplitBodyBuilder;
    }
    namespace Features
    {
        class StudioSpline;
    }
    namespace Features
    {
        class StudioSplineBuilder;
    }
    namespace Features
    {
        class StudioSplineBuilderEx;
    }
    namespace Features
    {
        class StudioSurfaceBuilder;
    }
    namespace Features
    {
        class StudioXform;
    }
    namespace Features
    {
        class StudioXformBuilder;
    }
    namespace Features
    {
        class StudioXformBuilderEx;
    }
    namespace Features
    {
        class StyledBlend;
    }
    namespace Features
    {
        class StyledBlendBuilder;
    }
    namespace Features
    {
        class StyledCorner;
    }
    namespace Features
    {
        class StyledCornerBuilder;
    }
    namespace Features
    {
        class StyledSweepBuilder;
    }
    namespace Features
    {
        class SweepAlongGuide;
    }
    namespace Features
    {
        class SweepAlongGuideBuilder;
    }
    namespace Features
    {
        class SweepFeatureCollection;
    }
    namespace Features
    {
        class Swept;
    }
    namespace Features
    {
        class SweptBuilder;
    }
    namespace Features
    {
        class Symmetric;
    }
    namespace Features
    {
        class SymmetricBuilder;
    }
    namespace Features
    {
        class SynchronousCurveCollection;
    }
    namespace Features
    {
        class SynchronousEdgeCollection;
    }
    namespace Features
    {
        class Tangent;
    }
    namespace Features
    {
        class TangentBuilder;
    }
    namespace Features
    {
        class Text;
    }
    namespace Features
    {
        class TextBuilder;
    }
    namespace Features
    {
        class ThickenBuilder;
    }
    namespace Features
    {
        class ThroughCurveMeshBuilder;
    }
    namespace Features
    {
        class ThroughCurvesBuilder;
    }
    namespace Features
    {
        class ToolingCollection;
    }
    namespace Features
    {
        class TrimAndExtend;
    }
    namespace Features
    {
        class TrimAndExtendBuilder;
    }
    namespace Features
    {
        class TrimBody2;
    }
    namespace Features
    {
        class TrimBody2Builder;
    }
    namespace Features
    {
        class TrimBodyBuilder;
    }
    namespace Features
    {
        class TrimCurve;
    }
    namespace Features
    {
        class TrimCurveBuilder;
    }
    namespace Features
    {
        class TrimExtendBuilder;
    }
    namespace Features
    {
        class TrimSheetBuilder;
    }
    namespace Features
    {
        class TubeBuilder;
    }
    namespace Features
    {
        class Unsew;
    }
    namespace Features
    {
        class UnsewBuilder;
    }
    namespace Features
    {
        class UntrimBuilder;
    }
    namespace Features
    {
        class UserDefinedObjectFeatureBuilder;
    }
    namespace Features
    {
        class VariableOffset;
    }
    namespace Features
    {
        class VariableOffsetBuilder;
    }
    namespace Features
    {
        class VarsweepBuilder;
    }
    namespace Features
    {
        class VehicleDesignCollection;
    }
    namespace Features
    {
        class VirtualBlendEdgeBuilder;
    }
    namespace Features
    {
        class VirtualCurve;
    }
    namespace Features
    {
        class VirtualCurveBuilder;
    }
    namespace Features
    {
        class WaveDatumBuilder;
    }
    namespace Features
    {
        class WavePointBuilder;
    }
    namespace Features
    {
        class WaveRoutingBuilder;
    }
    namespace Features
    {
        class WaveSketchBuilder;
    }
    namespace Features
    {
        class WrapBuilder;
    }
    namespace Features
    {
        class WrapGeometry;
    }
    namespace Features
    {
        class WrapGeometryBuilder;
    }
    namespace Features
    {
        class WrapUnwrap;
    }
    namespace GeometricUtilities
    {
        class ConvertFeatureGroupsToModulesBuilder;
    }
    namespace GeometricUtilities
    {
        class NestModuleBuilder;
    }
    namespace GeometricUtilities
    {
        class PartModuleRelationshipBuilder;
    }
    namespace GeometricUtilities
    {
        class RenameLinkedPartModulePartBuilder;
    }
    namespace GeometricUtilities
    {
        class UnnestModuleBuilder;
    }
    class HumanPosturePrediction;
    class HumanPosturePredictionBuilder;
    class NXObject;
    class Spline;
    namespace Weld
    {
        class WeldManager;
    }
    namespace Features
    {
        class FeatureCollectionImpl;
        /** Represents a collection of features  <br> To obtain an instance of this class, refer to @link Part  Part @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  FeatureCollection : public TaggedObjectCollection
        {
            /** Reorder operation type. */
            public: enum ReorderType
            {
                ReorderTypeBefore = 1/** before */ ,
                ReorderTypeAfter/** after */ 
            };

            private: FeatureCollectionImpl * m_featurecollection_impl;
            private: NXOpen::Part* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit FeatureCollection(NXOpen::Part *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~FeatureCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Features::FeatureCollection::iterator::copy,initializer)
            class iterator
            {
            public:
                /** Value type associated with iterator*/ 

                typedef Features::Feature * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                { // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Features::FeatureCollection *context) : m_context(context), m_current(NULL_TAG)
                { // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_FEATURESEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_FEATURESEXPORT  void next();
                NXOpen::Features::FeatureCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a Mesh Surface feature builder  @return  MeshSurfaceBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MeshSurfaceBuilder * CreateMeshSurfaceBuilder
            (
                NXOpen::Features::Feature * meshSurf /** @link Features::Ruled Features::Ruled@endlink ,
                                                                               @link Features::ThroughCurves Features::ThroughCurves@endlink ,
                                                                               @link Features::ThroughCurveMesh Features::ThroughCurveMesh@endlink 
                                                                               to be edited */
            );
            /** Creates a Block feature builder  @return  BlockFeatureBuilder object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::BlockFeatureBuilder * CreateBlockFeatureBuilder
            (
                NXOpen::Features::Feature * block /** @link Block Block@endlink  to be edited */
            );
            /** Creates a @link Features::CopyPasteBuilder Features::CopyPasteBuilder@endlink   @return  CopyPasteBuilder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CopyPasteBuilder * CreateCopyPasteBuilder
            (
                const std::vector<NXOpen::NXObject *> & features /** Features to be copy/paste  */
            );
            /** Creates a @link Features::ReferenceMapperBuilder Features::ReferenceMapperBuilder@endlink   @return  ReferenceMapperBuilder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ReferenceMapperBuilder * CreateReferenceMapperBuilder
            (
                NXOpen::Features::FeatureBuilder * booleanBuilderTag /** @link FeatureBuilder FeatureBuilder@endlink  */
            );
            /** Creates a Extrude builder  @return  ExtrudeBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtrudeBuilder * CreateExtrudeBuilder
            (
                NXOpen::Features::Feature * extrude /** @link Extrude Extrude@endlink  to be edited */
            );
            /** Creates a UserDefinedObjectFeature builder  @return  UserDefinedObjectFeatureBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::UserDefinedObjectFeatureBuilder * CreateUserDefinedObjectFeatureBuilder
            (
                NXOpen::Features::Feature * udoFeature /** @link UserDefinedObjectFeature UserDefinedObjectFeature@endlink  to be edited - may be NULL if creating a new feature. */
            );
            /** Creates a Revolve builder  @return  RevolveBuilder object 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RevolveBuilder * CreateRevolveBuilder
            (
                NXOpen::Features::Feature * revolve /** @link RevolveBuilder RevolveBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Emboss builder  @return  EmbossBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EmbossBuilder * CreateEmbossBuilder
            (
                NXOpen::Features::Feature * emboss /** @link EmbossBuilder EmbossBuilder@endlink  to be edited */
            );
            /** Creates a Offsetemboss builder  @return  OffsetEmbossBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetEmbossBuilder * CreateOffsetEmbossBuilder
            (
                NXOpen::Features::Feature * offsetEmboss /** @link OffsetEmbossBuilder OffsetEmbossBuilder@endlink  to be edited */
            );
            /** Creates a Divideface builder  @return  DividefaceBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::DividefaceBuilder * CreateDividefaceBuilder
            (
                NXOpen::Features::Feature * divideface /** @link DividefaceBuilder DividefaceBuilder@endlink 
                                                                       to be edited */
            );
            /** Creates a Overcrown feature builder  @return  OvercrownBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OvercrownBuilder * CreateOvercrownFeatureBuilder
            (
                NXOpen::Features::Feature * overcrown /** @link OvercrownBuilder OvercrownBuilder@endlink 
                                                                  to be edited, if NULL then create a new one. */
            );
            /** Creates a Curvelength builder  @return  CurveLengthBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CurveLengthBuilder * CreateCurvelengthBuilder
            (
                NXOpen::Features::Feature * curvelength /** @link CurveLengthBuilder CurveLengthBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Datum Axis feature builder  @return  DatumAxisBuilder object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DatumAxisBuilder * CreateDatumAxisBuilder
            (
                NXOpen::Features::Feature * datumAxis /** @link DatumAxisFeature DatumAxisFeature@endlink 
                                                                   to be edited */
            );
            /** Creates a Datum Plane feature builder  @return  DatumPlaneBuilder object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::DatumPlaneBuilder * CreateDatumPlaneBuilder
            (
                NXOpen::Features::Feature * dplane /** @link DatumPlaneFeature DatumPlaneFeature@endlink 
                                                               to be edited */
            );
            /** Creates a Resize Datum Plane feature builder  @return  ResizePlaneBuilder object 
             <br>  Created in NX6.0.3.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ResizePlaneBuilder * CreateResizePlaneBuilder
            (
                NXOpen::Features::Feature * resizePlane /** @link DatumPlaneFeature DatumPlaneFeature@endlink 
                                                               to be edited */
            );
            /** Creates a Hole feature builder  @return  HoleFeatureBuilder object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::HoleFeatureBuilder * CreateHoleFeatureBuilder
            (
                NXOpen::Features::Feature * hole /** @link Hole Hole@endlink  to be edited */
            );
            /** Creates a Relative Positioning Object builder  @return  RPOBuilder object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RPOBuilder * CreateRpoBuilder
            (
                NXOpen::Features::Feature * rpo /** @link Feature Feature@endlink  to be repositioned */
            );
            /** Creates a Chamfer feature builder  @return  ChamferBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ChamferBuilder * CreateChamferBuilder
            (
                NXOpen::Features::Feature * chamfer /** Chamfer
                                                             to be edited, if NULL then create a new one */
            );
            /** Creates a Edge Blend feature builder  @return  EdgeBlendBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EdgeBlendBuilder * CreateEdgeBlendBuilder
            (
                NXOpen::Features::Feature * edgeblend /** @link EdgeBlendBuilder EdgeBlendBuilder@endlink 
                                                                     to be edited, if NULL then create a new one */
            );
            /** Creates a unite feature.  @return  Array of boolean features 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateUniteFeature
            (
                NXOpen::Body * targetBody /** Target body */,
                bool retainTargetBody /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & toolBodies /** Tool bodies */,
                bool retainToolBodies /** Retain option for tool bodies */,
                bool allowNonAssociativeBoolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* nonAssociativeBoolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterizedSolids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates a subtract feature.  @return  Array of boolean features 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateSubtractFeature
            (
                NXOpen::Body * targetBody /** Target body */,
                bool retainTargetBody /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & toolBodies /** Tool bodies */,
                bool retainToolBodies /** Retain option for tool bodies */,
                bool allowNonAssociativeBoolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* nonAssociativeBoolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterizedSolids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates an intersect feature.  @return  Array of boolean features 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateIntersectFeature
            (
                NXOpen::Body * targetBody /** Target body */,
                bool retainTargetBody /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & toolBodies /** Tool bodies */,
                bool retainToolBodies /** Retain option for tool bodies */,
                bool allowNonAssociativeBoolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* nonAssociativeBoolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterizedSolids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates a Varsweep feature builder  @return VarsweepBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::VarsweepBuilder * CreateVarsweepBuilder
            (
                NXOpen::Features::Feature * varsweep /** Varsweep to be edited */
            );
            /** Creates a Face Blend feature builder  @return  FaceBlendBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FaceBlendBuilder * CreateFaceBlendBuilder
            (
                NXOpen::Features::Feature * faceBlend /** @link FaceBlendBuilder FaceBlendBuilder@endlink  to be edited */
            );
            /** Returns all the features in the part  @return  Features in the part 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetFeatures
            (
            );
            /** Finds the @link  Feature   Feature @endlink  with the given identifier as recorded in a journal.
                An object may not return the same value as its JournalIdentifier in different versions of
                the software. However newer versions of the software should find the same object when
                FindObject is passed older versions of its journal identifier. In general, this method
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  Feature with this identifier 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the body you want */
            );
            /** Finds the @link  Feature   Feature @endlink  with the given identifier as recorded in a journal.
                An object may not return the same value as its JournalIdentifier in different versions of
                the software. However newer versions of the software should find the same object when
                FindObject is passed older versions of its journal identifier. In general, this method
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  Feature with this identifier 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Features::Feature * FindObject
            (
                const char * journalIdentifier /** Identifier of the body you want */
            );
            /** Suppress the given features 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SuppressFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be suppressed */
            );
            /** Unsuppress the given features  @return  Features which were not unsuppressed due to errors 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> UnsuppressFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be unsuppressed */
            );
            /** Get the feature associated with an object  @return  Feature associated with object. Set to Null if no feature is associated to the object. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * GetAssociatedFeature
            (
                NXOpen::NXObject * object /** Object to find associated feature. */
            );
            /** Creates a human feature builder.  @return  HumanBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Features::HumanBuilder * CreateHumanBuilder
            (
                NXOpen::Features::Feature * human /** @link Human Human@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a human posture prediction builder.  @return  @link HumanPosturePredictionBuilder HumanPosturePredictionBuilder@endlink  object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanPosturePredictionBuilder * CreateHumanPosturePredictionBuilder
            (
                NXOpen::HumanPosturePrediction * posturePrediction /** @link HumanPosturePrediction HumanPosturePrediction@endlink  to be edited,
                                                                                                         if NULL then create a new one */
            );
            /** Creates an Offset Surface builder  @return  OffsetSurfaceBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetSurfaceBuilder * CreateOffsetSurfaceBuilder
            (
                NXOpen::Features::Feature * offsetSurface /** @link OffsetSurfaceBuilder OffsetSurfaceBuilder@endlink 
                                                                            to be edited */
            );
            /** Creates a ribbon builder  @return  Features.RibbonBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RibbonBuilder * CreateRibbonBuilder
            (
                NXOpen::Features::Feature * ribbon /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::PatchBuilder Features::PatchBuilder@endlink   @return  PatchBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PatchBuilder * CreatePatchBuilder
            (
                NXOpen::Features::Feature * patch /** Patch Features to be edited */
            );
            /** Creates a Boolean builder  @return  BooleanBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BooleanBuilder * CreateBooleanBuilder
            (
                NXOpen::Features::BooleanFeature * booleanFeature /** @link BooleanFeature BooleanFeature@endlink  to be edited */
            );
            /** Creates a Boolean builder. Leverage body collectors if possible  @return  BooleanBuilder object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BooleanBuilder * CreateBooleanBuilderUsingCollector
            (
                NXOpen::Features::BooleanFeature * booleanFeature /** @link BooleanFeature BooleanFeature@endlink  to be edited */
            );
            /** Creates a trim body builder object. Use this method only for editing pre-NX7.5.0 trim body features.. 
                    Use @link CreateTrimBody2Builder CreateTrimBody2Builder@endlink  and 
                    @link Features::TrimBody2 Features::TrimBody2@endlink  to create and edit trim body features.  @return  Features.TrimBodyBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimBodyBuilder * CreateTrimBodyBuilder
            (
                NXOpen::Features::Feature * trimbodyFeat /** @link Features::TrimBody Features::TrimBody@endlink  to be edited */
            );
            /** Creates a @link Features::ExtendSheetBuilder Features::ExtendSheetBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtendSheetBuilder * CreateExtendSheetBuilder
            (
                NXOpen::Features::ExtendSheet * extendSheet /** @link Features::ExtendSheet Features::ExtendSheet@endlink  to be edited */
            );
            /** Creates a @link Features::TrimAndExtendBuilder Features::TrimAndExtendBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimAndExtendBuilder * CreateTrimAndExtendBuilder
            (
                NXOpen::Features::TrimAndExtend * trimAndExtendSheet /** @link Features::TrimAndExtend Features::TrimAndExtend@endlink  to be edited */
            );
            /** Creates an Shell builder  @return  ShellBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ShellBuilder * CreateShellBuilder
            (
                NXOpen::Features::Feature * shell /** @link Features::ShellBuilder Features::ShellBuilder@endlink  to be edited */
            );
            /** Creates a Datum CSYS feature builder  @return  DatumCsysBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::DatumCsysBuilder * CreateDatumCsysBuilder
            (
                NXOpen::Features::Feature * datumCsys /** @link Features::DatumCsysBuilder Features::DatumCsysBuilder@endlink  to be edited */
            );
            /** Creates a draft builder  @return  DraftBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DraftBuilder * CreateDraftBuilder
            (
                NXOpen::Features::Feature * draft /** @link DraftBuilder DraftBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a raster image  @return  RasterImage object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : studio_visualize ("STUDIO VISUALIZE") */
            public: NXOpen::Features::RasterImage * CreateRasterImage
            (
                const NXOpen::Point3d & origin /** The origin for the raster image */,
                const NXOpen::Matrix3x3 & matrix /** The rotation matrix for the raster image */,
                double length /** Length of the image, given in the units parameter */,
                double height /** Height of the image, give in the units parameter */,
                const NXString & imageFileName /** Name of the image file to use.
                                                                      For now, it must be a .tif file   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double translucency /** 0.0 for no translucency, 1.0 for fully tranparent */,
                NXOpen::Features::RasterImage::MaxTextureSize maximumTextureSize /** maximum texture size */ 
            );
            /** Creates a raster image  @return  RasterImage object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : studio_visualize ("STUDIO VISUALIZE") */
            NXOpen::Features::RasterImage * CreateRasterImage
            (
                const NXOpen::Point3d & origin /** The origin for the raster image */,
                const NXOpen::Matrix3x3 & matrix /** The rotation matrix for the raster image */,
                double length /** Length of the image, given in the units parameter */,
                double height /** Height of the image, give in the units parameter */,
                const char * imageFileName /** Name of the image file to use.
                                                                      For now, it must be a .tif file   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double translucency /** 0.0 for no translucency, 1.0 for fully tranparent */,
                NXOpen::Features::RasterImage::MaxTextureSize maximumTextureSize /** maximum texture size */ 
            );
            /** Create a Master Cut builder  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MasterCutBuilder * CreateMasterCutBuilder
            (
                NXOpen::Features::Feature * masterCut /** @link Features::MasterCutBuilder Features::MasterCutBuilder@endlink  to be edited,
                                                                                 if NULL then create a new one  */
            );
            /** Creates an Offset In Face builder  @return  AOCSBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AOCSBuilder * CreateAocsBuilder
            (
                NXOpen::Features::Feature * aocs /** @link Features::AOCSBuilder Features::AOCSBuilder@endlink  to be edited */
            );
            /** Creates a @link Features::OffsetFaceBuilder Features::OffsetFaceBuilder@endlink   @return  OffsetFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetFaceBuilder * CreateOffsetFaceBuilder
            (
                NXOpen::Features::Feature * offsetface /** @link Features::OffsetFace Features::OffsetFace@endlink 
                                                                  to be edited, if NULL then create a new one */
            );
            /** Creates a @link Features::TubeBuilder Features::TubeBuilder@endlink   @return  TubeBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TubeBuilder * CreateTubeBuilder
            (
                NXOpen::Features::Feature * tube /** @link Features::TubeBuilder Features::TubeBuilder@endlink  to be edited */
            );
            /** Creates @link Features::MirrorFeatureBuilder Features::MirrorFeatureBuilder@endlink   @return  MirrorFeatureBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorFeatureBuilder * CreateMirrorFeatureBuilder
            (
                NXOpen::Features::Feature * mirrorFea /** @link Features::MirrorFeatureBuilder Features::MirrorFeatureBuilder@endlink  to be edited */
            );
            /** Creates @link Features::MirrorBuilder Features::MirrorBuilder@endlink   @return  @link Features::MirrorBuilder Features::MirrorBuilder@endlink  object 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorBuilder * CreateMirrorBuilder
            (
                NXOpen::Features::Mirror * mirrorFeature /** @link Features::Mirror Features::Mirror@endlink  to be edited */
            );
            /** Creates a @link Features::ScaleBuilder Features::ScaleBuilder@endlink   @return  ScaleBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ScaleBuilder * CreateScaleBuilder
            (
                NXOpen::Features::Feature * scale /** @link Features::Scale Features::Scale@endlink  to be edited */
            );
            /** Creates a Sew feature builder  @return  SewBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::SewBuilder * CreateSewBuilder
            (
                NXOpen::Features::Feature * sew /** @link Features::SewBuilder Features::SewBuilder@endlink  to be edited */
            );
            /** Creates a @link Features::SectionCurveBuilder Features::SectionCurveBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionCurveBuilder * CreateSectionCurveBuilder
            (
                NXOpen::Features::Feature * sectionCurves /** @link Features::SectionCurve Features::SectionCurve@endlink  to be edited */
            );
            /** Creates a @link Features::IntersectionCurveBuilder Features::IntersectionCurveBuilder@endlink   @return  IntersectionCurveBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::IntersectionCurveBuilder * CreateIntersectionCurveBuilder
            (
                NXOpen::Features::Feature * intersectionCurve /** @link Features::IntersectionCurveBuilder Features::IntersectionCurveBuilder@endlink  to be edited */
            );
            /** Creates a Thicken feature builder  @return  ThickenBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ThickenBuilder * CreateThickenBuilder
            (
                NXOpen::Features::Feature * thicken /** @link Features::Thicken Features::Thicken@endlink  to be edited */
            );
            /** Creates a @link Features::TrimExtendBuilder Features::TrimExtendBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::TrimExtendBuilder * CreateTrimExtendBuilder
            (
                NXOpen::Features::Feature * trimExtend /** @link Features::TrimExtend Features::TrimExtend@endlink  to be edited */
            );
            /** Creates a @link Features::GeomcopyBuilder Features::GeomcopyBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GeomcopyBuilder * CreateGeomcopyBuilder
            (
                NXOpen::Features::Feature * geomcopy /** @link Features::Geomcopy Features::Geomcopy@endlink  to be edited */
            );
            /** Creates a @link Features::ProjectCurveBuilder Features::ProjectCurveBuilder@endlink   @return  ProjectCurveBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ProjectCurveBuilder * CreateProjectCurveBuilder
            (
                NXOpen::Features::Feature * projectCurve /** @link Features::ProjectCurve Features::ProjectCurve@endlink  to be edited */
            );
            /** Creates a @link Features::ExtractFaceBuilder Features::ExtractFaceBuilder@endlink   @return  Extract face builder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ExtractFaceBuilder * CreateExtractFaceBuilder
            (
                NXOpen::Features::Feature * copyFace /** CopyFace Feature to be edited */
            );
            /** Creates a @link Features::JoinCurvesBuilder Features::JoinCurvesBuilder@endlink   @return  JoinCurvesBuilder object
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::JoinCurvesBuilder * CreateJoinCurvesBuilder
            (
                NXOpen::Features::Feature * joinCurves /** @link Features::JoinCurves Features::JoinCurves@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a Studio Spline builder  @return  StudioSplineBuilder object 
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link Features::FeatureCollection::CreateStudioSplineBuilderEx Features::FeatureCollection::CreateStudioSplineBuilderEx@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use Features::FeatureCollection::CreateStudioSplineBuilderEx instead.") NXOpen::Features::StudioSplineBuilder * CreateStudioSplineBuilder
            (
                NXOpen::Features::StudioSpline * splineFeature /** @link Features::StudioSpline Features::StudioSpline@endlink  to be edited */
            );
            /** Creates a Curve On Surface feature builder  @return  CurveOnSurfaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CurveOnSurfaceBuilder * CreateCurveOnSurfaceBuilder
            (
                NXOpen::Features::CurveOnSurface * cosFeature /** @link Features::CurveOnSurface Features::CurveOnSurface@endlink  to be edited */
            );
            /** Creates a @link Features::UntrimBuilder Features::UntrimBuilder@endlink   @return  Features.UntrimBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::UntrimBuilder * CreateUntrimBuilder
            (
                NXOpen::Features::Feature * untrim /** @link Features::Untrim Features::Untrim@endlink  to be edited */
            );
            /** Creates a Wavedatum Builder  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::WaveDatumBuilder * CreateWaveDatumBuilder
            (
                NXOpen::Features::Feature * wavedatum /** Wavedatum Features to be edited */
            );
            /** Creates a Wavesketch Builder  @return  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WaveSketchBuilder * CreateWaveSketchBuilder
            (
                NXOpen::Features::Feature * wavesketch /** Wavesketch Features to be edited */
            );
            /** Creates a @link Features::WaveRoutingBuilder Features::WaveRoutingBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WaveRoutingBuilder * CreateWaveRoutingBuilder
            (
                NXOpen::Features::Feature * waverouting /** Waverouting Features to be edited */
            );
            /** Creates a @link Features::WavePointBuilder Features::WavePointBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::WavePointBuilder * CreateWavePointBuilder
            (
                NXOpen::Features::Feature * wavepoint /** Wavepoint Features to be edited */
            );
            /** Creates a @link Features::TrimSheetBuilder Features::TrimSheetBuilder@endlink   @return  Trim Sheet Builder object
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimSheetBuilder * CreateTrimsheetBuilder
            (
                NXOpen::Features::Feature * trimSheet /** @link Features::TrimSheet Features::TrimSheet@endlink  to be edited,
                                                                            if NULL then create a new one*/
            );
            /** Creates a @link Features::CircularBlendCurveBuilder Features::CircularBlendCurveBuilder@endlink   @return  CircularBlendCurveBuilder object
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CircularBlendCurveBuilder * CreateCircularBlendCurveBuilder
            (
                NXOpen::Features::CircularBlendCurve * circularBlendCurve /** @link Features::CircularBlendCurve Features::CircularBlendCurve@endlink  to be edited,
                                                                                                     , if NULL then create a new one  */
            );
            /** Creates a Rapid Surfacing feature builder  @return  RapidSurfaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::RapidSurfaceBuilder * CreateRapidSurfaceBuilder
            (
                NXOpen::Features::RapidSurface * rapidSurface /** @link Features::RapidSurface Features::RapidSurface@endlink  to be edited */
            );
            /** Creates a @link Features::UnsewBuilder Features::UnsewBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::UnsewBuilder * CreateUnsewBuilder
            (
                NXOpen::Features::Unsew * unsew /** @link Features::Unsew Features::Unsew@endlink  to be edited */
            );
            /** Creates a @link Features::MirrorBodyBuilder Features::MirrorBodyBuilder@endlink   @return  MirrorBodyBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::MirrorBodyBuilder * CreateMirrorBodyBuilder
            (
                NXOpen::Features::Feature * mirrorBody /** @link Features::MirrorBodyBuilder Features::MirrorBodyBuilder@endlink  to be edited */
            );
            /** Creates a @link Features::DraftBodyBuilder Features::DraftBodyBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DraftBodyBuilder * CreateDraftBodyBuilder
            (
                NXOpen::Features::Feature * draftBody /** @link Features::DraftBody Features::DraftBody@endlink  to be edited */
            );
            /** Returns a list of features that generated update alerts during recent update  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetPartFeaturesWithNewAlerts
            (
            );
            /** Returns a list of all features from a given part that have update alerts  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetAllPartFeaturesWithAlerts
            (
            );
            /** Creates a @link Features::GlobalShapingBuilder Features::GlobalShapingBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingBuilder * CreateGlobalShapingBuilder
            (
                NXOpen::Features::GlobalShaping * globalShaping /** @link Features::GlobalShaping Features::GlobalShaping@endlink  to be edited */
            );
            /** Creates a @link Features::TrimCurveBuilder Features::TrimCurveBuilder@endlink    @return  Trim Curve Builder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::TrimCurveBuilder * CreateTrimCurveBuilder
            (
                NXOpen::Features::TrimCurve * trimCurve /** @link Features::TrimCurve Features::TrimCurve@endlink  to be edited */
            );
            /** Creates a @link Features::TrimCurveBuilder Features::TrimCurveBuilder@endlink    @return  Trim Curve Builder object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::TrimCurveBuilder * CreateTrimCurveBuilder
            (
                NXOpen::Spline * trimCurve /** The trimmed curve to be edited */
            );
            /** Creates a @link Features::OffsetCurveBuilder Features::OffsetCurveBuilder@endlink   @return  Offset Curve Builder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::OffsetCurveBuilder * CreateOffsetCurveBuilder
            (
                NXOpen::Features::Feature * offsetCurve /** @link Features::OffsetCurve Features::OffsetCurve@endlink  to be edited */
            );
            /** Delete all informational alerts from all the features in a given part
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteAllPartInformationalFeatureAlerts
            (
            );
            /** Creates a @link Features::ThroughCurveMeshBuilder Features::ThroughCurveMeshBuilder@endlink   @return  ThroughCurveMeshBuilder object
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ThroughCurveMeshBuilder * CreateThroughCurveMeshBuilder
            (
                NXOpen::Features::Feature * throughCurveMesh /** @link Features::ThroughCurveMesh Features::ThroughCurveMesh@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link Features::BridgeCurveBuilder Features::BridgeCurveBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link Features::FeatureCollection::CreateBridgeCurveBuilderEx Features::FeatureCollection::CreateBridgeCurveBuilderEx@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use Features::FeatureCollection::CreateBridgeCurveBuilderEx instead.") NXOpen::Features::BridgeCurveBuilder * CreateBridgeCurveBuilder
            (
                NXOpen::Features::Feature * bridgeCurve /** @link Features::BridgeCurve Features::BridgeCurve@endlink  to be edited */
            );
            /** Creates a @link Features::SweptBuilder Features::SweptBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SweptBuilder * CreateSweptBuilder
            (
                NXOpen::Features::Swept * swept /** @link Features::Swept Features::Swept@endlink  to be edited */
            );
            /** Creates a @link Features::CylinderBuilder Features::CylinderBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::CylinderBuilder * CreateCylinderBuilder
            (
                NXOpen::Features::Feature * cylinder /** @link Features::Cylinder Features::Cylinder@endlink  to be edited */
            );
            /** Creates a @link Features::CompositeCurveBuilder Features::CompositeCurveBuilder@endlink   @return  Features.CompositeCurveBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::CompositeCurveBuilder * CreateCompositeCurveBuilder
            (
                NXOpen::Features::Feature * compositeCurve /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::ThroughCurvesBuilder Features::ThroughCurvesBuilder@endlink   @return  ThroughCurvesBuilder object
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ThroughCurvesBuilder * CreateThroughCurvesBuilder
            (
                NXOpen::Features::Feature * throughCurves /** @link Features::ThroughCurves Features::ThroughCurves@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a Studio Surface Builder  @return  StudioSurfaceBuilder
                object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::StudioSurfaceBuilder * CreateStudioSurfaceBuilder
            (
                NXOpen::Features::Feature * studioSurface /** @link Features::StudioSurface Features::StudioSurface@endlink  to be edited */
            );
            /** Creates a @link Features::SectionInertiaAnalysisBuilder Features::SectionInertiaAnalysisBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionInertiaAnalysisBuilder * CreateSectionInertiaAnalysisBuilder
            (
                NXOpen::Features::SectionInertiaAnalysis * sectionInertiaAnalysis /** @link Features::SectionInertiaAnalysis Features::SectionInertiaAnalysis@endlink  to be edited */
            );
            /** Returns if a @link Features::MasterCutBuilder Features::MasterCutBuilder@endlink  is visbible in specified @link CutView CutView@endlink  . @return  True if master cut is visible in view
                                                                 False otherwise 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool GetIsMasterCutVisibleInView
            (
                NXOpen::Features::Feature * masterCut /** @link Features::MasterCutBuilder Features::MasterCutBuilder@endlink  to be tested */,
                NXOpen::CutView * view /** Cut view */
            );
            /** Creates a delete face builder, don't use it until nx502  @return  Features.DeleteFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::DeleteFaceBuilder * CreateDeleteFaceBuilder
            (
                NXOpen::Features::Feature * deleteFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a resize blend builder, don't use it until nx502  @return  Features.ResizeBlendBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ResizeBlendBuilder * CreateResizeBlendBuilder
            (
                NXOpen::Features::Feature * resizeBlend /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::PatchOpeningsBuilder Features::PatchOpeningsBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::PatchOpeningsBuilder * CreatePatchOpeningsBuilder
            (
                NXOpen::Features::Feature * patchOpenings /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Create a move face builder, don't use it until nx502  @return  Features.MoveFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MoveFaceBuilder * CreateMoveFaceBuilder
            (
                NXOpen::Features::Feature * moveFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates an offset region builder, don't use it until nx502  @return  Features.OffsetRegionBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetRegionBuilder * CreateOffsetRegionBuilder
            (
                NXOpen::Features::Feature * offsetRegion /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a pattern face builder, don't use it until nx502  @return  Features.PatternFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::PatternFaceBuilder * CreatePatternFaceBuilder
            (
                NXOpen::Features::Feature * patternFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a resize face builder, don't use it until nx502  @return  Features.ResizeFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ResizeFaceBuilder * CreateResizeFaceBuilder
            (
                NXOpen::Features::Feature * resizeFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a replace face builder, don't use it until nx502  @return  Features.ReplaceFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ReplaceFaceBuilder * CreateReplaceFaceBuilder
            (
                NXOpen::Features::Feature * replaceFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a Ruled Surface builder  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RuledBuilder * CreateRuledBuilder
            (
                NXOpen::Features::Feature * ruled /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::NSidedSurfaceBuilder Features::NSidedSurfaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::NSidedSurfaceBuilder * CreateNSidedSurfaceBuilder
            (
                NXOpen::Features::NSidedSurface * nsidedSurface /** @link Features::NSidedSurface Features::NSidedSurface@endlink  to be edited */
            );
            /** Create a section surface  @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link Features::FeatureCollection::CreateSectionSurfaceBuilderEx Features::FeatureCollection::CreateSectionSurfaceBuilderEx@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use Features::FeatureCollection::CreateSectionSurfaceBuilderEx instead.") NXOpen::Features::SectionSurfaceBuilder * CreateSectionSurfaceBuilder
            (
                NXOpen::Features::SectionSurface * sectionSurface /** @link Features::SectionSurface Features::SectionSurface@endlink  to be edited */
            );
            /** Creates a coplanar builder, don't use it until nx6  @return  Features.CoplanarBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::CoplanarBuilder * CreateCoplanarBuilder
            (
                NXOpen::Features::Feature * coplanar /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::SnipSurfaceBuilder Features::SnipSurfaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::SnipSurfaceBuilder * CreateSnipSurfaceBuilder
            (
                NXOpen::Features::SnipSurface * snipSurface /** @link Features::SnipSurface Features::SnipSurface@endlink  to be edited */
            );
            /** Creates a @link Features::LinearDimensionBuilder Features::LinearDimensionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::LinearDimensionBuilder * CreateLinearDimensionBuilder
            (
                NXOpen::Features::LinearDimension * linearDimension /** @link Features::LinearDimension Features::LinearDimension@endlink  to be edited */
            );
            /** Creates an Enlarge builder  @return  EnlargeBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: NXOpen::Features::EnlargeBuilder * CreateEnlargeBuilder
            (
                NXOpen::Features::Enlarge * enlargeFeature /** @link Features::Enlarge Features::Enlarge@endlink  to be edited */
            );
            /** Creates a @link Features::LawExtensionBuilder Features::LawExtensionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::LawExtensionBuilder * CreateLawExtensionBuilder
            (
                NXOpen::Features::LawExtension * lawExtension /** @link Features::LawExtension Features::LawExtension@endlink  to be edited */
            );
            /** Creates a @link Features::LawExtensionBuilderEx Features::LawExtensionBuilderEx@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::LawExtensionBuilderEx * CreateLawExtensionBuilderEx
            (
                NXOpen::Features::Feature * lawExtension /** @link Features::LawExtensionEx Features::LawExtensionEx@endlink  to be edited */
            );
            /** Creates a @link Features::CombinedProjectionBuilder Features::CombinedProjectionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CombinedProjectionBuilder * CreateCombinedProjectionBuilder
            (
                NXOpen::Features::CombinedProjection * combinedProjection /** @link Features::CombinedProjection Features::CombinedProjection@endlink  to be edited */
            );
            /** Creates a @link Features::StyledSweepBuilder Features::StyledSweepBuilder@endlink   @return  Features.StyledSweepBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledSweepBuilder * CreateStyledSweepBuilder
            (
                NXOpen::Features::Feature * styledSweep /** @link Features::StyledSweep Features::StyledSweep@endlink  to be edited */
            );
            /** Creates a cut face builder  @return  Features.CutFaceBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::CutFaceBuilder * CreateCutFaceBuilder
            (
                NXOpen::Features::Feature * cutFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::ConeBuilder Features::ConeBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ConeBuilder * CreateConeBuilder
            (
                NXOpen::Features::Cone * cone /** @link Features::Cone Features::Cone@endlink  to be edited */
            );
            /** Creates a @link Features::SphereBuilder Features::SphereBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SphereBuilder * CreateSphereBuilder
            (
                NXOpen::Features::Sphere * sphere /** @link Features::Sphere Features::Sphere@endlink  to be edited */
            );
            /** Creates a copy face builder  @return  Features.CopyFaceBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::CopyFaceBuilder * CreateCopyFaceBuilder
            (
                NXOpen::Features::Feature * copyFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a paste face builder  @return  Features.PasteFaceBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::PasteFaceBuilder * CreatePasteFaceBuilder
            (
                NXOpen::Features::Feature * pasteFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::PoleSmoothingBuilder Features::PoleSmoothingBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PoleSmoothingBuilder * CreatePoleSmoothingBuilder
            (
                NXOpen::Features::PoleSmoothing * poleSmoothing /** @link Features::PoleSmoothing Features::PoleSmoothing@endlink  to be edited */
            );
            /** Creates a @link Features::AdmMoveFaceBuilder Features::AdmMoveFaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::AdmMoveFaceBuilder * CreateAdmMoveFaceBuilder
            (
                NXOpen::Features::AdmMoveFace * admMoveFace /** @link Features::AdmMoveFace Features::AdmMoveFace@endlink  to be edited */
            );
            /** Creates a @link Features::WrapGeometryBuilder Features::WrapGeometryBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WrapGeometryBuilder * CreateWrapGeometryBuilder
            (
                NXOpen::Features::WrapGeometry * wrapGeometry /** @link Features::WrapGeometry Features::WrapGeometry@endlink  to be edited */
            );
            /** Creates a @link Features::GroupFaceBuilder Features::GroupFaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::GroupFaceBuilder * CreateGroupFaceBuilder
            (
                NXOpen::Features::GroupFace * groupFace /** @link Features::GroupFace Features::GroupFace@endlink  to be edited */
            );
            /** Creates a @link Features::ColorFaceBuilder Features::ColorFaceBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ColorFaceBuilder * CreateColorFaceBuilder
            (
            );
            /** Creates a @link Features::VehicleDesign::SeatBeltAnchorageBuilder Features::VehicleDesign::SeatBeltAnchorageBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link Features::VehicleDesignCollection::CreateSeatBeltAnchorageBuilder Features::VehicleDesignCollection::CreateSeatBeltAnchorageBuilder@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use Features::VehicleDesignCollection::CreateSeatBeltAnchorageBuilder instead.") NXOpen::Features::FeatureBuilder * CreateSeatBeltAnchorageBuilder
            (
                NXOpen::Features::Feature * seatBeltAnchorage /** Feature to be edited */
            );
            /** Creates a @link Features::BoundedPlaneBuilder Features::BoundedPlaneBuilder@endlink   @return  Features.BoundedPlaneBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::BoundedPlaneBuilder * CreateBoundedPlaneBuilder
            (
                NXOpen::Features::BoundedPlane * boundedPlane /** @link Features::BoundedPlane Features::BoundedPlane@endlink  to be edited */
            );
            /** Creates a @link Features::AssemblyCutBuilder Features::AssemblyCutBuilder@endlink   @return  Features.AssemblyCutBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AssemblyCutBuilder * CreateAssemblyCutBuilder
            (
                NXOpen::Features::AssemblyCut * assemblyCut /** @link Features::AssemblyCut Features::AssemblyCut@endlink  to be edited */
            );
            /** Creates a @link Features::VehicleDesign::ReflectionDataBuilder Features::VehicleDesign::ReflectionDataBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link Features::VehicleDesignCollection::CreateReflectionDataBuilder Features::VehicleDesignCollection::CreateReflectionDataBuilder@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use Features::VehicleDesignCollection::CreateReflectionDataBuilder instead.") NXOpen::Features::FeatureBuilder * CreateReflectionDataBuilder
            (
                NXOpen::Features::Feature * reflectionData /** Feature to be edited */
            );
            /** Creates a @link Features::WrapBuilder Features::WrapBuilder@endlink   @return  WrapBuilder object
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WrapBuilder * CreateWrapBuilder
            (
                NXOpen::Features::WrapUnwrap * wrap /** @link Features::WrapUnwrap Features::WrapUnwrap@endlink  to be edited */
            );
            /** Creates a @link Features::RemoveParametersBuilder Features::RemoveParametersBuilder@endlink   @return  Features.RemoveParametersBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::RemoveParametersBuilder * CreateRemoveParametersBuilder
            (
            );
            /** Creates a @link Features::MatchEdgeBuilder Features::MatchEdgeBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::MatchEdgeBuilder * CreateMatchEdgeBuilder
            (
                NXOpen::Features::MatchEdge * matchEdge /** @link Features::MatchEdge Features::MatchEdge@endlink  to be edited */
            );
            /** Creates a @link Features::RadialDimensionBuilder Features::RadialDimensionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::RadialDimensionBuilder * CreateRadialDimensionBuilder
            (
                NXOpen::Features::RadialDimension * radialDimension /** @link Features::RadialDimension Features::RadialDimension@endlink  to be edited */
            );
            /** Creates a @link Features::StyledBlendBuilder Features::StyledBlendBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledBlendBuilder * CreateStyledBlendBuilder
            (
                NXOpen::Features::StyledBlend * styledBlend /** @link Features::StyledBlend Features::StyledBlend@endlink  to be edited */
            );
            /** Creates a @link Features::HolePackageBuilder Features::HolePackageBuilder@endlink   @return  
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::HolePackageBuilder * CreateHolePackageBuilder
            (
                NXOpen::Features::HolePackage * holePackage /** @link Features::HolePackage Features::HolePackage@endlink  to be edited */
            );
            /** Creates a Features.StudioXformBuilder  @return  
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link Features::FeatureCollection::CreateStudioXformBuilderEx Features::FeatureCollection::CreateStudioXformBuilderEx@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use Features::FeatureCollection::CreateStudioXformBuilderEx instead.") NXOpen::Features::StudioXformBuilder * CreateStudioXformBuilder
            (
                NXOpen::Features::StudioXform * studioXform /** @link Features::StudioXform Features::StudioXform@endlink  to be edited */
            );
            /** Creates a Features.StudioXformBuilderEx  @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StudioXformBuilderEx * CreateStudioXformBuilderEx
            (
                NXOpen::Features::StudioXform * studioXform1 /** @link Features::StudioXform Features::StudioXform@endlink  to be edited */
            );
            /** Creates a @link Features::SweepAlongGuideBuilder Features::SweepAlongGuideBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SweepAlongGuideBuilder * CreateSweepAlongGuideBuilder
            (
                NXOpen::Features::SweepAlongGuide * sweepAlongGuide /** @link Features::SweepAlongGuide Features::SweepAlongGuide@endlink  to be edited */
            );
            /** Creates a @link Features::ParallelBuilder Features::ParallelBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ParallelBuilder * CreateParallelBuilder
            (
                NXOpen::Features::Parallel * parallel /** @link Features::Parallel Features::Parallel@endlink  to be edited */
            );
            /** Creates a @link Features::CoaxialBuilder Features::CoaxialBuilder@endlink   @return  Features.CoaxialBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::CoaxialBuilder * CreateCoaxialBuilder
            (
                NXOpen::Features::Coaxial * coaxial /** @link Features::Coaxial Features::Coaxial@endlink  to be edited */
            );
            /** Creates a @link Features::PerpendicularBuilder Features::PerpendicularBuilder@endlink   @return  Features.PerpendicularBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::PerpendicularBuilder * CreatePerpendicularBuilder
            (
                NXOpen::Features::Perpendicular * perpendicular /** @link Features::Perpendicular Features::Perpendicular@endlink  to be edited */
            );
            /** Creates a @link Features::TangentBuilder Features::TangentBuilder@endlink   @return  Features.TangentBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::TangentBuilder * CreateTangentBuilder
            (
                NXOpen::Features::Tangent * tangent /** @link Features::Tangent Features::Tangent@endlink  to be edited */
            );
            /** Creates a @link Features::AdmResizeFaceBuilder Features::AdmResizeFaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::AdmResizeFaceBuilder * CreateAdmResizeFaceBuilder
            (
                NXOpen::Features::AdmResizeFace * admResizeFace /** @link Features::AdmResizeFace Features::AdmResizeFace@endlink  to be edited */
            );
            /** Creates a @link Features::StyledCornerBuilder Features::StyledCornerBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledCornerBuilder * CreateStyledCornerBuilder
            (
                NXOpen::Features::StyledCorner * styledCorner /** @link Features::StyledCorner Features::StyledCorner@endlink  to be edited */
            );
            /** Creates a @link Features::AdmOffsetRegionBuilder Features::AdmOffsetRegionBuilder@endlink   @return  Features.AdmOffsetRegionBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::AdmOffsetRegionBuilder * CreateAdmOffsetRegionBuilder
            (
                NXOpen::Features::AdmOffsetRegion * offsetRegion /** @link Features::AdmOffsetRegion Features::AdmOffsetRegion@endlink  to be edited */
            );
            /** Creates a mirror face builder  @return  Features.MirrorFaceBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::MirrorFaceBuilder * CreateMirrorFaceBuilder
            (
                NXOpen::Features::Feature * mirrorFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::PointSetBuilder Features::PointSetBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PointSetBuilder * CreatePointSetBuilder
            (
                NXOpen::Features::PointSet * pointSet /** @link Features::PointSet Features::PointSet@endlink  to be edited */
            );
            /** Creates a @link Features::VehicleDesign::WindshieldDatumBuilder Features::VehicleDesign::WindshieldDatumBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link Features::VehicleDesignCollection::CreateWindshieldDatumBuilder Features::VehicleDesignCollection::CreateWindshieldDatumBuilder@endlink   instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use Features::VehicleDesignCollection::CreateWindshieldDatumBuilder  instead.") NXOpen::Features::FeatureBuilder * CreateWindshieldDatumBuilder
            (
                NXOpen::Features::Feature * windshieldDatum /** feature to be edited */
            );
            /** Creates a @link Features::VehicleDesign::VisionPlaneBuilder Features::VehicleDesign::VisionPlaneBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link Features::VehicleDesignCollection::CreateVisionPlaneBuilder Features::VehicleDesignCollection::CreateVisionPlaneBuilder@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use Features::VehicleDesignCollection::CreateVisionPlaneBuilder instead.") NXOpen::Features::FeatureBuilder * CreateVisionPlaneBuilder
            (
                NXOpen::Features::Feature * visionPlane /** feature to be edited */
            );
            /** Creates a @link Features::VehicleDesign::HoodVisibilityBuilder Features::VehicleDesign::HoodVisibilityBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link Features::VehicleDesignCollection::CreateHoodVisibilityBuilder Features::VehicleDesignCollection::CreateHoodVisibilityBuilder@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use Features::VehicleDesignCollection::CreateHoodVisibilityBuilder instead.") NXOpen::Features::FeatureBuilder * CreateHoodVisibilityBuilder
            (
                NXOpen::Features::Feature * hoodVisibility /** feature to be edited */
            );
            /** Creates a @link Features::VehicleDesign::PedestrianProtectionBuilder Features::VehicleDesign::PedestrianProtectionBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link Features::VehicleDesignCollection::CreatePedestrianProtectionBuilder Features::VehicleDesignCollection::CreatePedestrianProtectionBuilder@endlink   instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use Features::VehicleDesignCollection::CreatePedestrianProtectionBuilder  instead.") NXOpen::Features::FeatureBuilder * CreatePedestrianProtectionBuilder
            (
                NXOpen::Features::Feature * pedestrianProtection /** feature to be edited */
            );
            /** Reorders the Feature with respect to the given feature 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ReorderFeature
            (
                const std::vector<NXOpen::Features::Feature *> & features /** @link Features::Feature Features::Feature@endlink  to be reordered*/,
                NXOpen::Features::Feature * target /** Target feature */,
                NXOpen::Features::FeatureCollection::ReorderType beforeOrAfter /** Reorder Before/After*/
            );
            /** Creates a @link Features::MirrorCurveBuilder Features::MirrorCurveBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorCurveBuilder * CreateMirrorCurveBuilder
            (
                NXOpen::Features::Feature * mirrorCurve /** @link Features::MirrorCurve Features::MirrorCurve@endlink  to be edited */
            );
            /** Creates a @link Features::PromotionBuilder Features::PromotionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PromotionBuilder * CreatePromotionBuilder
            (
                NXOpen::Features::Promotion * promotion /** @link Features::Promotion Features::Promotion@endlink  to be edited */
            );
            /** Creates a RefitFaceBuilder  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RefitFaceBuilder * CreateRefitFaceBuilder
            (
                NXOpen::Features::RefitFace * refitFace /** @link Features::RefitFace Features::RefitFace@endlink  to be edited */
            );
            /** Creates a @link Features::EditDimensionBuilder Features::EditDimensionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::EditDimensionBuilder * CreateEditDimensionBuilder
            (
            );
            /** Creates a @link Features::AdaptiveShellBuilder Features::AdaptiveShellBuilder@endlink   @return  @link Features::AdaptiveShellBuilder Features::AdaptiveShellBuilder@endlink  object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::AdaptiveShellBuilder * CreateAdaptiveShellBuilder
            (
                NXOpen::Features::AdaptiveShell * shellFace /** @link Features::AdaptiveShell Features::AdaptiveShell@endlink  to be edited */
            );
            /** Creates a @link Features::ShellFaceBuilder Features::ShellFaceBuilder@endlink   @return  @link Features::ShellFaceBuilder Features::ShellFaceBuilder@endlink  object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ShellFaceBuilder * CreateShellFaceBuilder
            (
                NXOpen::Features::ShellFace * shellFace /** @link Features::ShellFace Features::ShellFace@endlink  to be edited */
            );
            /** Creates a @link Features::ChangeShellThicknessBuilder Features::ChangeShellThicknessBuilder@endlink   @return  @link Features::ChangeShellThicknessBuilder Features::ChangeShellThicknessBuilder@endlink  object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ChangeShellThicknessBuilder * CreateChangeShellThicknessBuilder
            (
                NXOpen::Features::ChangeShellThickness * shellFace /** @link Features::ChangeShellThickness Features::ChangeShellThickness@endlink  to be edited */
            );
            /** Creates a @link Features::LinkedFacetBuilder Features::LinkedFacetBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::LinkedFacetBuilder * CreateLinkedFacetBuilder
            (
                NXOpen::Features::LinkedFacet * linkedFacet /** @link Features::LinkedFacet Features::LinkedFacet@endlink  to be edited */
            );
            /** Creates a @link Features::SilhouetteFlangeBuilder Features::SilhouetteFlangeBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::SilhouetteFlangeBuilder * CreateSilhouetteFlangeBuilder
            (
                NXOpen::Features::SilhouetteFlange * silhouetteFlange /** @link Features::SilhouetteFlange Features::SilhouetteFlange@endlink  to be edited */
            );
            /** Creates a @link Features::ReplaceFeatureBuilder Features::ReplaceFeatureBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ReplaceFeatureBuilder * CreateReplaceFeatureBuilder
            (
            );
            /** Creates a @link Features::PaintParametersBuilder Features::PaintParametersBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PaintParametersBuilder * CreatePaintParametersBuilder
            (
            );
            /** Creates a @link Features::SmoothSplineBuilder Features::SmoothSplineBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::SmoothSplineBuilder * CreateSmoothSplineBuilder
            (
                NXOpen::Features::SmoothSpline * smoothSpline /** @link Features::SmoothSpline Features::SmoothSpline@endlink  to be edited */
            );
            /** Creates a @link Features::SymmetricBuilder Features::SymmetricBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::SymmetricBuilder * CreateSymmetricBuilder
            (
                NXOpen::Features::Symmetric * symmetric /** @link Features::Symmetric Features::Symmetric@endlink  to be edited */
            );
            /** Creates a @link Features::FeatureReplayBuilder Features::FeatureReplayBuilder@endlink   @return  Features.FeatureReplayBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FeatureReplayBuilder * CreateFeatureReplayBuilder
            (
            );
            /** Creates a @link Features::SplitBodyBuilder Features::SplitBodyBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SplitBodyBuilder * CreateSplitBodyBuilder
            (
                NXOpen::Features::SplitBody * splitBody /** @link Features::SplitBody Features::SplitBody@endlink  to be edited */
            );
            /** Creates a @link Features::SplitBodyBuilder Features::SplitBodyBuilder@endlink . Leverage body collectors if possible  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SplitBodyBuilder * CreateSplitBodyBuilderUsingCollector
            (
                NXOpen::Features::SplitBody * splitBody /** @link Features::SplitBody Features::SplitBody@endlink  to be edited */
            );
            /** Creates a @link Features::TrimBody2Builder Features::TrimBody2Builder@endlink  for Trim Body
                  feature @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimBody2Builder * CreateTrimBody2Builder
            (
                NXOpen::Features::TrimBody2 * trimBody2 /** @link Features::TrimBody2 Features::TrimBody2@endlink  to be edited */
            );
            /** Creates a @link Features::AngularDimBuilder Features::AngularDimBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::AngularDimBuilder * CreateAngularDimensionBuilder
            (
                NXOpen::Features::AngularDim * angularDimension /** @link Features::AngularDim Features::AngularDim@endlink  to be edited */
            );
            /** Creates a @link Features::SectionEditBuilder Features::SectionEditBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionEditBuilder * CreateSectionEditBuilder
            (
                NXOpen::Features::SectionEdit * sectionEdit /** @link Features::SectionEdit Features::SectionEdit@endlink  to be edited */
            );
            /** Creates a @link Features::PullFaceBuilder Features::PullFaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::PullFaceBuilder * CreatePullFaceBuilder
            (
                NXOpen::Features::PullFace * pullFace /** @link Features::PullFace Features::PullFace@endlink  to be edited */
            );
            /** Creates a @link Features::MidSurfaceByFacePairsBuilder Features::MidSurfaceByFacePairsBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MidSurfaceByFacePairsBuilder * CreateMidSurfaceByFacePairsBuilder
            (
                NXOpen::Features::MidSurfaceByFacePairs * midSurfaceByFacePairs /** @link Features::MidSurfaceByFacePairs Features::MidSurfaceByFacePairs@endlink  to be edited */
            );
            /** Creates a @link Features::MidSurfaceUserDefinedBuilder Features::MidSurfaceUserDefinedBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MidSurfaceUserDefinedBuilder * CreateMidSurfaceUserDefinedBuilder
            (
                NXOpen::Features::MidSurfaceUserDefined * midsurfaceUserDefined /** @link Features::MidSurfaceUserDefined Features::MidSurfaceUserDefined@endlink  to be edited */
            );
            /** Creates @link Features::PatternFeatureBuilder Features::PatternFeatureBuilder@endlink   @return  PatternFeatureBuilder object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PatternFeatureBuilder * CreatePatternFeatureBuilder
            (
                NXOpen::Features::Feature * patternFeature /** @link Features::PatternFeatureBuilder Features::PatternFeatureBuilder@endlink  to be edited */
            );
            /** Creates @link Features::InstanceFeatureBuilder Features::InstanceFeatureBuilder@endlink   @return  @link Features::InstanceFeatureBuilder Features::InstanceFeatureBuilder@endlink  object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::InstanceFeatureBuilder * CreateInstanceFeatureBuilder
            (
                NXOpen::Features::InstanceFeature * instanceFeature /** @link Features::InstanceFeature Features::InstanceFeature@endlink  to be edited */
            );
            /** Creates @link Features::InstanceFeatureBuilder Features::InstanceFeatureBuilder@endlink  from multiple @link Features::InstanceFeature Features::InstanceFeature@endlink   @return  @link Features::InstanceFeatureBuilder Features::InstanceFeatureBuilder@endlink  object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::InstanceFeatureBuilder * CreateInstanceFeatureBuilder
            (
                const std::vector<NXOpen::Features::InstanceFeature *> & instanceFeatures /** array of @link Features::InstanceFeature Features::InstanceFeature@endlink  to be edited */,
                bool forClocking /** forclocking */ 
            );
            /** Creates a @link Features::VehicleDesign::VehicleCoordinateSystemBuilder Features::VehicleDesign::VehicleCoordinateSystemBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link Features::VehicleDesignCollection::CreateHoodVisibilityBuilder Features::VehicleDesignCollection::CreateHoodVisibilityBuilder@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") OR ug_body_design ("Body Design") OR nx_posture ("NX Jack Posture Prediction") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use Features::VehicleDesignCollection::CreateHoodVisibilityBuilder instead.") NXOpen::Features::FeatureBuilder * CreateVehicleCoordinateSystemBuilder
            (
                NXOpen::Features::Feature * vehicleCoordinateSystem /** feature to be edited */
            );
            /** Creates a @link Features::AestheticFaceBlendBuilder Features::AestheticFaceBlendBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::AestheticFaceBlendBuilder * CreateAestheticFaceBlendBuilder
            (
                NXOpen::Features::AestheticFaceBlend * aestheticFaceBlend /** @link Features::AestheticFaceBlend Features::AestheticFaceBlend@endlink  to be edited */
            );
            /** Creates a @link Features::EdgeSymmetryBuilder Features::EdgeSymmetryBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::EdgeSymmetryBuilder * CreateEdgeSymmetryBuilder
            (
                NXOpen::Features::Feature * edgeSymmetry /** @link Features::EdgeSymmetry Features::EdgeSymmetry@endlink  to be edited. 
                                                                                  Accepts @link Features::MatchEdge Features::MatchEdge@endlink  type if
                                                                                  @link Features::MatchEdgeBuilder::Types Features::MatchEdgeBuilder::Types@endlink  is 
                                                                                  @link Features::MatchEdgeBuilder::TypesMatchEdgeToDatum Features::MatchEdgeBuilder::TypesMatchEdgeToDatum@endlink . 
                                                                                  In that case converts @link Features::MatchEdge Features::MatchEdge@endlink  to
                                                                                  @link Features::EdgeSymmetry Features::EdgeSymmetry@endlink  feature.*/
            );
            /** Creates a @link Features::ReplaceBlendBuilder Features::ReplaceBlendBuilder@endlink    @return  @link Features::ReplaceBlendBuilder  Features::ReplaceBlendBuilder @endlink  object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ReplaceBlendBuilder * CreateReplaceBlendBuilder
            (
                NXOpen::Features::ReplaceBlend * replaceBlend /** @link Features::ReplaceBlend Features::ReplaceBlend@endlink  to be edited */
            );
            /** Replace the given features with Independent Sketch  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SketchConversionReport * ReplaceWithIndependentSketch
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be replaced */
            );
            /** Creates a @link Features::MakeOffsetBuilder Features::MakeOffsetBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::MakeOffsetBuilder * CreateMakeOffsetBuilder
            (
                NXOpen::Features::MakeOffset * makeOffset /** @link Features::MakeOffset Features::MakeOffset@endlink  to be edited */
            );
            /** Creates a @link Features::OptimizeFaceBuilder Features::OptimizeFaceBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::OptimizeFaceBuilder * CreateOptimizeFaceBuilder
            (
            );
            /** Creates a @link Features::ShowRelatedFacesBuilder Features::ShowRelatedFacesBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ShowRelatedFacesBuilder * CreateShowRelatedFacesBuilder
            (
            );
            /** Creates a @link Features::FixedBuilder Features::FixedBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::FixedBuilder * CreateFixedBuilder
            (
                NXOpen::Features::Fixed * makeFix /** @link Features::Fixed Features::Fixed@endlink  to be edited */
            );
            /** Creates a @link Features::LabelChamferBuilder Features::LabelChamferBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::LabelChamferBuilder * CreateLabelChamferBuilder
            (
                NXOpen::Features::LabelChamfer * labelChamfer /** @link Features::LabelChamfer Features::LabelChamfer@endlink  to be edited */
            );
            /** Creates a @link Features::ResizeChamferBuilder Features::ResizeChamferBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ResizeChamferBuilder * CreateResizeChamferBuilder
            (
                NXOpen::Features::ResizeChamfer * resizeChamfer /** @link Features::ResizeChamfer Features::ResizeChamfer@endlink  to be edited */
            );
            /** Creates a @link Features::MapleBuilder Features::MapleBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MapleBuilder * CreateMapleBuilder
            (
                NXOpen::Features::Maple * maple /** @link Features::Maple Features::Maple@endlink  to be edited */
            );
            /** Creates a @link Features::ConcaveFacesBuilder Features::ConcaveFacesBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ConcaveFacesBuilder * CreateConcaveFacesBuilder
            (
                NXOpen::Features::ConcaveFaces * concaveFaces /** @link Features::ConcaveFaces Features::ConcaveFaces@endlink  to be edited */
            );
            /** Creates a @link Features::VirtualCurveBuilder Features::VirtualCurveBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::VirtualCurveBuilder * CreateVirtualCurveBuilder
            (
                NXOpen::Features::VirtualCurve * virtualCurve /** @link Features::VirtualCurve Features::VirtualCurve@endlink  to be edited */
            );
            /** Creates a @link Features::VirtualBlendEdgeBuilder Features::VirtualBlendEdgeBuilder@endlink   @return  
             <br>  Created in NX7.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VirtualBlendEdgeBuilder * CreateVirtualBlendEdgeBuilder
            (
            );
            /** Creates a @link Features::IFormBuilder Features::IFormBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::IFormBuilder * CreateIformBuilder
            (
                NXOpen::Features::IForm * iform /** @link Features::IForm Features::IForm@endlink  to be edited */
            );
            /** Creates a @link Features::LawCurveBuilder Features::LawCurveBuilder@endlink   @return  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::LawCurveBuilder * CreateLawCurveBuilder
            (
                NXOpen::Features::LawCurve * lawCurve /** @link Features::LawCurve Features::LawCurve@endlink  to be edited */
            );
            /** Creates a @link Features::TextBuilder Features::TextBuilder@endlink   @return  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TextBuilder * CreateTextBuilder
            (
                NXOpen::Features::Text * text /** @link Features::Text Features::Text@endlink  to be edited */
            );
            /**Returns  the active feature group. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FeatureGroup * ActiveGroup
            (
            );
            /** Creates a @link Features::DeleteEdgeBuilder Features::DeleteEdgeBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DeleteEdgeBuilder * CreateDeleteEdgeBuilder
            (
                NXOpen::Features::DeleteEdge * deleteEdge /** @link Features::DeleteEdge Features::DeleteEdge@endlink  to be edited */
            );
            /** Creates a @link Features::CopyPasteBuilder Features::CopyPasteBuilder@endlink   @return  CopyPasteBuilder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CopyPasteBuilder * CreateCopyPasteBuilder2
            (
                const std::vector<NXOpen::NXObject *> & features /** Features to be copy/paste  */
            );
            /** Creates a @link Features::ReorderBlendsBuilder Features::ReorderBlendsBuilder@endlink   @return  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::ReorderBlendsBuilder * CreateReorderBlendsBuilder
            (
                NXOpen::Features::ReorderBlends * reorderBlends /** @link Features::ReorderBlends Features::ReorderBlends@endlink  to be edited */
            );
            /** Creates a @link Features::IsoparametricCurvesBuilder Features::IsoparametricCurvesBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::IsoparametricCurvesBuilder * CreateIsoparametricCurvesBuilder
            (
                NXOpen::Features::IsoparametricCurves * isoparametricCurves /** @link Features::IsoparametricCurves Features::IsoparametricCurves@endlink  to be edited */
            );
            /** Converts to new feature groups 
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link Features::FeatureCollection::ConvertToSequentialFeatureGroups Features::FeatureCollection::ConvertToSequentialFeatureGroups@endlink  or @link Features::FeatureCollection::ConvertToFloatingFeatureGroups Features::FeatureCollection::ConvertToFloatingFeatureGroups@endlink  instead. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use Features::FeatureCollection::ConvertToSequentialFeatureGroups or Features::FeatureCollection::ConvertToFloatingFeatureGroups instead.") void ConvertToNewFeatureGroups
            (
            );
            /** Converts sequential feature groups to floating feature groups 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ConvertToFloatingFeatureGroups
            (
            );
            /** Converts floating feature groups to sequential feature groups 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ConvertToSequentialFeatureGroups
            (
            );
            /** Creates a @link Features::VariableOffsetBuilder Features::VariableOffsetBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::VariableOffsetBuilder * CreateVariableOffsetBuilder
            (
                NXOpen::Features::VariableOffset * variableOffset /** @link Features::VariableOffset Features::VariableOffset@endlink  to be edited */
            );
            /** Creates a @link Features::ExtensionBuilder Features::ExtensionBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::Features::ExtensionBuilder * CreateExtensionBuilder
            (
                NXOpen::Features::Extension * extension /** @link Features::Extension Features::Extension@endlink  to be edited */
            );
            /** Creates a Studio Spline builder  @return  StudioSplineBuilderEx object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::StudioSplineBuilderEx * CreateStudioSplineBuilderEx
            (
                NXOpen::NXObject * spline /** @link Features::StudioSpline Features::StudioSpline@endlink  or @link Spline Spline@endlink  to be edited */
            );
            /** Creates a Studio Spline builder for sketcher  @return  SketchSplineBuilder object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SketchSplineBuilder * CreateSketchSplineBuilder
            (
                NXOpen::Spline * spline /** @link Spline Spline@endlink  to be edited */
            );
            /** Creates a Studio Spline builder for drafting  @return  DraftingSplineBuilder object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DraftingSplineBuilder * CreateDraftingSplineBuilder
            (
                NXOpen::Spline * spline /** @link Spline Spline@endlink  to be edited */
            );
            /** Creates a @link Features::BridgeSurfaceBuilder Features::BridgeSurfaceBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BridgeSurfaceBuilder * CreateBridgeSurfaceBuilder
            (
                NXOpen::Features::BridgeSurface * bridgeSurface /** @link Features::BridgeSurface Features::BridgeSurface@endlink  to be edited */
            );
            /** Creates a @link Features::EditCrossSectionBuilder Features::EditCrossSectionBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::EditCrossSectionBuilder * CreateEditCrossSectionBuilder
            (
                NXOpen::Features::EditCrossSection * editCrossSection /** @link Features::EditCrossSection Features::EditCrossSection@endlink  to be edited */
            );
            /** Creates a @link Features::LabelNotchBlendBuilder Features::LabelNotchBlendBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::LabelNotchBlendBuilder * CreateLabelNotchBlendBuilder
            (
                NXOpen::Features::LabelNotchBlend * labelNotchBlend /** @link Features::LabelNotchBlend Features::LabelNotchBlend@endlink  to be edited */
            );
            /** Sets the feature being edited with rollback 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditWithRollbackFeature
            (
                NXOpen::Features::Feature * feature /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Sets whether mcf is allowed 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCanResetMcf
            (
                bool canResetMcf /** can reset mcf */ 
            );
            /** Creates a @link Features::PartModuleBuilder Features::PartModuleBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PartModuleBuilder * CreatePartModuleBuilder
            (
                NXOpen::Features::PartModule * partModule /** @link Features::PartModule Features::PartModule@endlink  to be edited */
            );
            /** Creates a @link GeometricUtilities::PartModuleRelationshipBuilder GeometricUtilities::PartModuleRelationshipBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXOpen::GeometricUtilities::PartModuleRelationshipBuilder * CreatePartModuleRelationshipBuilder
            (
                NXOpen::Features::PartModule * partModule /** @link Features::PartModule Features::PartModule@endlink  to be edited */
            );
            /** Creates a @link Features::DeleteBodyBuilder Features::DeleteBodyBuilder@endlink   @return  DeleteBodyBuilder object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DeleteBodyBuilder * CreateDeleteBodyBuilder
            (
                NXOpen::Features::DeleteBody * deleteBody /** @link Features::DeleteBody Features::DeleteBody@endlink  to be edited */
            );
            /** Creates a @link Features::IsolateFeatureBuilder Features::IsolateFeatureBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::IsolateFeatureBuilder * CreateIsolateFeatureBuilder
            (
                NXOpen::Features::IsolateFeature * isolateFeature /** isolate feature */ 
            );
            /** Creates a @link Features::HelixBuilder Features::HelixBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::HelixBuilder * CreateHelixBuilder
            (
                NXOpen::Features::Helix * helix /** @link Features::Helix Features::Helix@endlink  to be edited */
            );
            /** Creates a @link Features::ColorFeatureBuilder Features::ColorFeatureBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ColorFeatureBuilder * CreateColorFeatureBuilder
            (
            );
            /** Creates a @link Features::ColorFeatureGroupBuilder Features::ColorFeatureGroupBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ColorFeatureGroupBuilder * CreateColorFeatureGroupBuilder
            (
            );
            /** Creates a @link Features::BridgeCurveBuilderEx Features::BridgeCurveBuilderEx@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::BridgeCurveBuilderEx * CreateBridgeCurveBuilderEx
            (
                NXOpen::Features::BridgeCurve * bridgeCurve /** @link Features::BridgeCurve Features::BridgeCurve@endlink  to be edited */
            );
            /** Creates a @link Features::FitCurveBuilder Features::FitCurveBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FitCurveBuilder * CreateFitCurveBuilder
            (
                NXOpen::Features::FitCurve * fitCurve /** @link Features::FitCurve Features::FitCurve@endlink  to be edited */
            );
            /** Creates a @link Features::SketchFitCurveBuilder Features::SketchFitCurveBuilder@endlink   @return  SketchFitCurveBuilder object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SketchFitCurveBuilder * CreateSketchFitCurveBuilder
            (
                NXOpen::Curve * fitCurve /** @link Curve Curve@endlink  to be edited */
            );
            /** Creates a @link Features::EmbossBodyBuilder Features::EmbossBodyBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EmbossBodyBuilder * CreateEmbossBodyBuilder
            (
                NXOpen::Features::EmbossBody * embossBody /** @link Features::EmbossBody Features::EmbossBody@endlink  to be edited */
            );
            /** Creates a @link Features::GeneralConicBuilder Features::GeneralConicBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::GeneralConicBuilder * CreateGeneralConicBuilder
            (
                NXOpen::Features::GeneralConic * generalConic /** @link Features::GeneralConic Features::GeneralConic@endlink  to be edited */
            );
            /** Creates a @link Features::FitSurfaceBuilder Features::FitSurfaceBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::FitSurfaceBuilder * CreateFitSurfaceBuilder
            (
                NXOpen::Features::FitSurface * fitSurface /** @link Features::FitSurface Features::FitSurface@endlink  to be edited */
            );
            /** Creates a @link Features::SphericalCornerBuilder Features::SphericalCornerBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SphericalCornerBuilder * CreateSphericalCornerBuilder
            (
                NXOpen::Features::SphericalCorner * sphericalCorner /** @link Features::SphericalCorner Features::SphericalCorner@endlink  to be edited */
            );
            /** Returns the feature that created this face  @return  The parent @link Features::Feature Features::Feature@endlink  of the input @link Face Face@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::Feature * GetParentFeatureOfFace
            (
                NXOpen::Face * face /** @link Face Face@endlink  whose parent feature you want */
            );
            /** Returns all features associated with this face  @return  The associated @link Features::Feature Features::Feature@endlink s of the input @link Face Face@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> GetAssociatedFeaturesOfFace
            (
                NXOpen::Face * face /** @link Face Face@endlink  whose associated features you want */
            );
            /** Returns the features that created the faces of this edge. Typically the parent features of the 2 faces of the edge will be returned  @return  The parent @link Features::Feature Features::Feature@endlink s of the input @link Edge Edge@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> GetParentFeaturesOfEdge
            (
                NXOpen::Edge * edge /** @link Edge Edge@endlink  whose parent features you want */
            );
            /** Returns all features that are associated with the faces of this edge  @return  The associated @link Features::Feature Features::Feature@endlink s of the input @link Edge Edge@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> GetAssociatedFeaturesOfEdge
            (
                NXOpen::Edge * edge /** @link Edge Edge@endlink  whose associated features you want */
            );
            /** Returns the feature that created this body.  @return  The parent @link Features::Feature Features::Feature@endlink  of the input @link Body Body@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::Feature * GetParentFeatureOfBody
            (
                NXOpen::Body * body /** @link Body Body@endlink  whose parent features you want */
            );
            /** Returns all features that are associated with this body  @return  The associated @link Features::Feature Features::Feature@endlink s of the input @link Body Body@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> GetAssociatedFeaturesOfBody
            (
                NXOpen::Body * body /** @link Body Body@endlink  whose associated features you want */
            );
            /** Creates a @link Features::SectionSurfaceBuilderEx Features::SectionSurfaceBuilderEx@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionSurfaceBuilderEx * CreateSectionSurfaceBuilderEx
            (
                NXOpen::Features::SectionSurface * sectionSurfaceEx /** @link Features::SectionSurface Features::SectionSurface@endlink  to be edited */
            );
            /** Creates a @link Features::PatternFaceFeatureBuilder Features::PatternFaceFeatureBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Features::PatternFaceFeatureBuilder * CreatePatternFaceFeatureBuilder
            (
                NXOpen::Features::PatternFaceFeature * patternFaceFeature /** @link Features::PatternFaceFeature Features::PatternFaceFeature@endlink  to be edited */
            );
            /** Creates a @link GeometricUtilities::RenameLinkedPartModulePartBuilder GeometricUtilities::RenameLinkedPartModulePartBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::RenameLinkedPartModulePartBuilder * CreateRenameLinkedPartModulePartBuilder
            (
            );
            /** Creates a @link GeometricUtilities::ConvertFeatureGroupsToModulesBuilder GeometricUtilities::ConvertFeatureGroupsToModulesBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::ConvertFeatureGroupsToModulesBuilder * CreateConvertFeatureGroupsToModulesBuilder
            (
            );
            /** Creates a @link GeometricUtilities::NestModuleBuilder GeometricUtilities::NestModuleBuilder@endlink   @return  Returns a @link GeometricUtilities::NestModuleBuilder GeometricUtilities::NestModuleBuilder@endlink  builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::NestModuleBuilder * CreateNestModuleBuilder
            (
            );
            /** Creates a @link Features::PatternGeometryBuilder Features::PatternGeometryBuilder@endlink   @return  The builder for the feature class 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PatternGeometryBuilder * CreatePatternGeometryBuilder
            (
                NXOpen::Features::PatternGeometry * patternGeometry /** The feature class @link Features::PatternGeometry Features::PatternGeometry@endlink  */
            );
            /** Creates a @link GeometricUtilities::UnnestModuleBuilder GeometricUtilities::UnnestModuleBuilder@endlink   @return  Returns a @link GeometricUtilities::UnnestModuleBuilder GeometricUtilities::UnnestModuleBuilder@endlink  builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::UnnestModuleBuilder * CreateUnnestModuleBuilder
            (
            );
            /** Creates a @link Features::BlendPocketBuilder Features::BlendPocketBuilder@endlink   @return  BlendPocketBuilder object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BlendPocketBuilder * CreateBlendPocketBuilder
            (
                NXOpen::Features::BlendPocket * blendPocket /** @link Features::BlendPocket Features::BlendPocket@endlink  to be edited */
            );
            /** Creates a @link Features::AnalyzePocketBuilder Features::AnalyzePocketBuilder@endlink   @return  AnalyzePocketBuilder object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AnalyzePocketBuilder * CreateAnalyzePocketBuilder
            (
                NXOpen::Features::AnalyzePocket * analyzePocket /** @link Features::AnalyzePocket Features::AnalyzePocket@endlink  to be edited */
            );


            /** Returns the Straight Brake Sheetmetal Manager for this part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Features::SheetMetal::SheetmetalManager *SheetmetalManager();
            /** Returns the aerospace sheet metal manager for this part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Features::SheetMetal::AeroSheetmetalManager *AeroSheetmetalManager();
            /** Returns the DieCollection instance belonging to this part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Die::DieCollection *Dies();
            /** Returns the WeldManager for this part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Weld::WeldManager *WeldManager();
            /** Returns the AutomotiveCollection instance belonging to this part 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::Features::AutomotiveCollection *AutomotiveCollection();
            /** Returns the ShipCollection instance belonging to this part 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::Features::ShipCollection *ShipCollection();
            /** Returns the ToolingCollection instance belonging to this part 
             <br>  Created in NX8.5.0.  <br>  
            */
            public: NXOpen::Features::ToolingCollection *ToolingCollection();
            /** Returns the SynchronousEdgeCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::SynchronousEdgeCollection *SynchronousEdgeCollection();
            /** Returns the Sweep-like features collection belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::SweepFeatureCollection *SweepFeatureCollection();
            /** Returns the SynchronousCurveCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::SynchronousCurveCollection *SynchronousCurveCollection();
            /** Returns the VehicleDesignCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::VehicleDesignCollection *VehicleDesignCollection();
            /** Returns the DesignfeatureCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::DesignFeatureCollection *DesignFeatureCollection();
            /** Returns the FreeformCurveCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::FreeformCurveCollection *FreeformCurveCollection();
            /** Returns the FreeformSurfaceCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::FreeformSurfaceCollection *FreeformSurfaceCollection();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
