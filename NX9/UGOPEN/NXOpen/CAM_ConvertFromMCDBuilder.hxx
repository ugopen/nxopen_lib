#ifndef NXOpen_CAM_CONVERTFROMMCDBUILDER_HXX_INCLUDED
#define NXOpen_CAM_CONVERTFROMMCDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ConvertFromMCDBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_ConvertFromMCDBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class ConvertFromMCDBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Face;
    class NXObject;
    namespace CAM
    {
        class _ConvertFromMCDBuilderBuilder;
        class ConvertFromMCDBuilderImpl;
        /** Represents a @link CAM::ConvertFromMCDBuilder CAM::ConvertFromMCDBuilder@endlink   <br> To create a new instance of this class, use @link SIM::KinematicConfigurator::CreateConvertFromMcdBuilder  SIM::KinematicConfigurator::CreateConvertFromMcdBuilder @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  ConvertFromMCDBuilder : public Builder
        {
            /** Represents the machine type option.  */
            public: enum MachineTypes
            {
                MachineTypesMill/** mill */ ,
                MachineTypesTurn/** turn */ ,
                MachineTypesMillTurn/** mill turn */ 
            };

            /** Represents the pocket location option. */
            public: enum PocketLocationTypes
            {
                PocketLocationTypesSpindle/** spindle */ ,
                PocketLocationTypesToolMagazine/** tool magazine */ 
            };

            private: ConvertFromMCDBuilderImpl * m_convertfrommcdbuilder_impl;
            private: friend class  _ConvertFromMCDBuilderBuilder;
            protected: ConvertFromMCDBuilder();
            public: ~ConvertFromMCDBuilder();
            /**Returns  the machine type method 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ConvertFromMCDBuilder::MachineTypes MachineType
            (
            );
            /**Sets  the machine type method 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetMachineType
            (
                NXOpen::CAM::ConvertFromMCDBuilder::MachineTypes machineType /** machinetype */ 
            );
            /**Returns  the machine base junction name 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MachineBaseJunctionName
            (
            );
            /**Sets  the machine base junction name 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetMachineBaseJunctionName
            (
                const NXString & machineBaseJunctionName /** machinebasejunctionname */ 
            );
            /**Sets  the machine base junction name 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            void SetMachineBaseJunctionName
            (
                const char * machineBaseJunctionName /** machinebasejunctionname */ 
            );
            /**Returns  the machine zero csys 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * MachineZeroCsys
            (
            );
            /**Sets  the machine zero csys 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetMachineZeroCsys
            (
                NXOpen::CoordinateSystem * machineZeroCSYS /** machinezerocsys */ 
            );
            /**Returns  the workpiece face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Face * WorkpieceFace
            (
            );
            /**Sets  the workpiece face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetWorkpieceFace
            (
                NXOpen::Face * workpieceFace /** workpieceface */ 
            );
            /**Returns  the main spindle face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Face * MainSpindleFace
            (
            );
            /**Sets  the main spindle face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetMainSpindleFace
            (
                NXOpen::Face * mainSpindleFace /** mainspindleface */ 
            );
            /**Returns  the counter spindle face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Face * CounterSpindleFace
            (
            );
            /**Sets  the counter spindle face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetCounterSpindleFace
            (
                NXOpen::Face * counterSpindleFace /** counterspindleface */ 
            );
            /**Returns  the spindle face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Face * SpindleFace
            (
            );
            /**Sets  the spindle face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetSpindleFace
            (
                NXOpen::Face * spindleFace /** spindleface */ 
            );
            /**Returns  the tool magazine 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * ToolMagazine
            (
            );
            /**Sets  the tool magazine 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetToolMagazine
            (
                NXOpen::NXObject * toolMagazine /** toolmagazine */ 
            );
            /**Returns  the mill pocket location 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ConvertFromMCDBuilder::PocketLocationTypes MillPocketLocation
            (
            );
            /**Sets  the mill pocket location 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetMillPocketLocation
            (
                NXOpen::CAM::ConvertFromMCDBuilder::PocketLocationTypes pocketPosition /** pocketposition */ 
            );
            /**Returns  the mill pocket number 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int MillPocketNumber
            (
            );
            /**Sets  the mill pocket number 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetMillPocketNumber
            (
                int pocketsNumber /** pocketsnumber */ 
            );
            /**Returns  the turret 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * Turret
            (
            );
            /**Sets  the turret 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetTurret
            (
                NXOpen::NXObject * turret /** turret */ 
            );
            /**Returns  the turret pocket number 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int TurretPocketNumber
            (
            );
            /**Sets  the turret pocket number 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetTurretPocketNumber
            (
                int pocketsNumber /** pocketsnumber */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
