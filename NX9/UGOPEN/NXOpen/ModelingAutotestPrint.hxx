#ifndef NXOpen_MODELINGAUTOTESTPRINT_HXX_INCLUDED
#define NXOpen_MODELINGAUTOTESTPRINT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ModelingAutotestPrint.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CurveValidator.hxx>
#include <NXOpen/FeatureCollectionValidator.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ModelingAutotestPrint;
    class DebugSession;
    class Body;
    class Curve;
    class CurveValidator;
    class Face;
    class FeatureCollectionValidator;
    namespace GeometricAnalysis
    {
        class AnalysisObject;
    }
    class NXObject;
    class Part;
    class ModelingAutotestPrintImpl;
    /** Represents a class that is used for NX testing.  This class should not
    be made available to customers  <br> To obtain an instance of this class, refer to @link DebugSession  DebugSession @endlink  <br> 
     <br>  Created in NX6.0.0.  <br>  
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  ModelingAutotestPrint
    {
        /** The sampling method to compute deviation between two curves */
        public: enum SmartCurveDeviationMethod
        {
            SmartCurveDeviationMethodProjection/** By projection */,
            SmartCurveDeviationMethodLength/** By uniform length sampling */
        };

         /** Contains information used to compute deviation between two curves */
        public:
        struct  SmartCurveDeviationData
        {
            public: /** Master curve               */NXOpen::Curve * MasterCurve;
            public: /** Reference curve            */NXOpen::Curve * ReferenceCurve;
            public: /** Method to compute deviation   */NXOpen::ModelingAutotestPrint::SmartCurveDeviationMethod Method;
            public: /** Number of points to compare  */int NumberOfSamples;
            public: /** Position tolerance           */double G0Tolerance;
            public: /** Whether to check curve direction */bool CheckDirection;
            public: /** Tangent tolerance                */double G1Tolerance;
            public: /** Curvature tolerance              */double G2Tolerance;
            public: /** Torsion tolerance                */double TorsionTolerance;
            public: /** Relative curvature tolerance     */double RelativeG2Tolerance;
            public: /** Relative torsion tolerance       */double RelativeTorsionTolerance;
            public: /** Relative curvature         */bool IsRelativeG2;
            public: /** Relative Torsion           */bool IsRelativeTorsion;
            public: /** Whether to show report     */bool ShowReport;
            public: SmartCurveDeviationData() :
                MasterCurve(),
                ReferenceCurve(),
                Method((NXOpen::ModelingAutotestPrint::SmartCurveDeviationMethod)0),
                NumberOfSamples(),
                G0Tolerance(),
                CheckDirection(),
                G1Tolerance(),
                G2Tolerance(),
                TorsionTolerance(),
                RelativeG2Tolerance(),
                RelativeTorsionTolerance(),
                IsRelativeG2(),
                IsRelativeTorsion(),
                ShowReport()
            {
            }
            /** Constructor for the SmartCurveDeviationData struct. */ 
            public: SmartCurveDeviationData(NXOpen::Curve * masterCurveInitial /** Master curve               */, 
                    NXOpen::Curve * referenceCurveInitial /** Reference curve            */, 
                    NXOpen::ModelingAutotestPrint::SmartCurveDeviationMethod methodInitial /** Method to compute deviation   */, 
                    int numberOfSamplesInitial /** Number of points to compare  */, 
                    double g0ToleranceInitial /** Position tolerance           */, 
                    bool checkDirectionInitial /** Whether to check curve direction */, 
                    double g1ToleranceInitial /** Tangent tolerance                */, 
                    double g2ToleranceInitial /** Curvature tolerance              */, 
                    double torsionToleranceInitial /** Torsion tolerance                */, 
                    double relativeG2ToleranceInitial /** Relative curvature tolerance     */, 
                    double relativeTorsionToleranceInitial /** Relative torsion tolerance       */, 
                    bool isRelativeG2Initial /** Relative curvature         */, 
                    bool isRelativeTorsionInitial /** Relative Torsion           */, 
                    bool showReportInitial /** Whether to show report     */) :
                MasterCurve(masterCurveInitial),
                ReferenceCurve(referenceCurveInitial),
                Method(methodInitial),
                NumberOfSamples(numberOfSamplesInitial),
                G0Tolerance(g0ToleranceInitial),
                CheckDirection(checkDirectionInitial),
                G1Tolerance(g1ToleranceInitial),
                G2Tolerance(g2ToleranceInitial),
                TorsionTolerance(torsionToleranceInitial),
                RelativeG2Tolerance(relativeG2ToleranceInitial),
                RelativeTorsionTolerance(relativeTorsionToleranceInitial),
                IsRelativeG2(isRelativeG2Initial),
                IsRelativeTorsion(isRelativeTorsionInitial),
                ShowReport(showReportInitial)
            {
            }
        };

        private: ModelingAutotestPrintImpl * m_modelingautotestprint_impl;
        private: NXOpen::DebugSession* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit ModelingAutotestPrint(NXOpen::DebugSession *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~ModelingAutotestPrint();
        /** Print mass properties of all bodies in part 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintAllBodiesInPart
        (
            NXOpen::Part * part /** part */ 
        );
        /** Print mass properties of all bodies in part 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void PrintAllBodiesInPart
        (
            NXOpen::Part * part /** part */ ,
            int lineNumber /** line number */ 
        );
        /** Print mass properties of a face 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintFace
        (
            NXOpen::Face * face /** face */ ,
            int faceIndex /** faceindex */ 
        );
        /** Print mass properties of all faces in body 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintAllFacesInBody
        (
            NXOpen::Body * body /** body */ 
        );
        /** Update all features in work part 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateAllFeatures
        (
        );
        /** Print geometric properties of a b-spline curve 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintBCurve
        (
            NXOpen::Curve * curve /** curve */ ,
            bool printPole /** printpole */ 
        );
        /** Print geometric properties of a b-spline curve 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintBCurve
        (
            NXOpen::Curve * curve /** curve */ ,
            bool printPole /** printpole */ ,
            bool printKnotPos /** printknotpos */ 
        );
        /** Print geometric properties of a b-spline surface 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintBSurface
        (
            NXOpen::Face * surf /** surf */ ,
            bool printPole /** printpole */ 
        );
        /** Print mass properties of a face 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintFace
        (
            NXOpen::Face * face /** face */ 
        );
        /** Print mass properties of a body 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintBody
        (
            NXOpen::Body * body /** body */ 
        );
        /** JA Print Smart Curve Deviation 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintSmartCurveDeviation
        (
            const NXOpen::ModelingAutotestPrint::SmartCurveDeviationData & data /** data */ 
        );
        /** Print G0/G1/G2/G3 continuities of a curve 
         <br>  Created in NX6.0.4.  <br>  
         <br> License requirements : None */
        public: void PrintFreeformContinuity
        (
            int objectType /** objecttype */ ,
            NXOpen::NXObject * curve /** curve */ ,
            const NXOpen::Point3d & point /** point */ ,
            NXOpen::Face * face1 /** first face */,
            NXOpen::NXObject * object /** object */ ,
            NXOpen::Face * face2 /** second face */,
            const std::vector<double> & tolerance /** tolerance */ 
        );
        /** Creates feature validator.  @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::FeatureCollectionValidator * CreateFeatureCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );
        /** Creates visible feature validator.  @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::FeatureCollectionValidator * CreateVisibleFeatureCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );
        /** Print deviation of curves to face and face to face 
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintFreeformDeviation
        (
            int checkType /** checktype */ ,
            const std::vector<NXOpen::NXObject *> & curves /** curves */ ,
            NXOpen::Face * srcFace /** srcface */ ,
            NXOpen::Face * refFace /** refface */ ,
            double tolerance /** tolerance */ ,
            int sample /** sample */ ,
            double triLength /** trilength */ 
        );
        /** Creates curve validator.  @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::CurveValidator * CreateCurveValidator
        (
            NXOpen::NXObject * curve /** curve */ 
        );
        /** Print properties of an analysis object 
         <br>  Created in NX8.0.1.  <br>  
         <br> License requirements : None */
        public: void PrintAnalysisObject
        (
            NXOpen::GeometricAnalysis::AnalysisObject * ao /** ao */ ,
            int aoIndex /** aoindex */ 
        );
        /** Print geometric properties of a b-spline curve 
         <br>  Created in NX8.0.1.  <br>  
         <br> License requirements : None */
        public: void PrintBCurve
        (
            NXOpen::Curve * curve /** curve */ ,
            bool printPole /** printpole */ ,
            bool printKnotPos /** printknotpos */ ,
            bool printKnots /** printknots */ ,
            int maxKnots /** maxknots */ 
        );
        /** Print geometric properties of a b-spline surface 
         <br>  Created in NX8.0.1.  <br>  
         <br> License requirements : None */
        public: void PrintBSurface
        (
            NXOpen::Face * surf /** surf */ ,
            bool printPole /** printpole */ ,
            bool printKnots /** printknots */ ,
            int maxUKnots /** maxuknots */ ,
            int maxVKnots /** maxvknots */ 
        );
        /** JA Print Dynamic Extract data 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintDynamicExtractData
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
