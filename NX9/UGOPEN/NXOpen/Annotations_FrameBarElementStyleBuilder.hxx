#ifndef NXOpen_ANNOTATIONS_FRAMEBARELEMENTSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_FRAMEBARELEMENTSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_FrameBarElementStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_FrameBarElementStyleBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class FrameBarElementStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _FrameBarElementStyleBuilderBuilder;
        class FrameBarElementStyleBuilderImpl;
        /**
            Represents a @link Annotations::FrameBarElementStyleBuilder Annotations::FrameBarElementStyleBuilder@endlink .
            This class queries and sets FrameBar preferences when creating and editing
             FrameBar drafting annotations.
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  FrameBarElementStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: FrameBarElementStyleBuilderImpl * m_framebarelementstylebuilder_impl;
            private: friend class  _FrameBarElementStyleBuilderBuilder;
            protected: FrameBarElementStyleBuilder();
            public: ~FrameBarElementStyleBuilder();
            /**Returns  the transverse frames tic display type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int TicDisplay
            (
            );
            /**Sets  the transverse frames tic display type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetTicDisplay
            (
                int ticDisplay /** ticdisplay */ 
            );
            /**Returns  the tic color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int TicColor
            (
            );
            /**Sets  the tic color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetTicColor
            (
                int ticColor /** ticcolor */ 
            );
            /**Returns  the tic font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int TicFont
            (
            );
            /**Sets  the tic font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetTicFont
            (
                int ticFont /** ticfont */ 
            );
            /**Returns  the tic width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int TicWidth
            (
            );
            /**Sets  the tic width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetTicWidth
            (
                int ticWidth /** ticwidth */ 
            );
            /**Returns  the tic length 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double TicLength
            (
            );
            /**Sets  the tic length 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetTicLength
            (
                double ticLength /** ticlength */ 
            );
            /**Returns  the tic from which skip to be started 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int SkipTicBegin
            (
            );
            /**Sets  the tic from which skip to be started 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetSkipTicBegin
            (
                int skipTicBegin /** skipticbegin */ 
            );
            /**Returns  the tic skip frequency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int SkipTicFrequency
            (
            );
            /**Sets  the tic skip frequency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetSkipTicFrequency
            (
                int skipTicFrequency /** skipticfrequency */ 
            );
            /**Returns  the extended tic color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int ExtendedTicColor
            (
            );
            /**Sets  the extended tic color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetExtendedTicColor
            (
                int extendColor /** extendcolor */ 
            );
            /**Returns  the extended tic font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int ExtendedTicFont
            (
            );
            /**Sets  the extended tic font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetExtendedTicFont
            (
                int extendFont /** extendfont */ 
            );
            /**Returns  the extended tic width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int ExtendedTicWidth
            (
            );
            /**Sets  the extended tic width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetExtendedTicWidth
            (
                int extendWidth /** extendwidth */ 
            );
            /**Returns  the extended tic length 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double ExtendedTicLength
            (
            );
            /**Sets  the extended tic length 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetExtendedTicLength
            (
                double extendLength /** extendlength */ 
            );
            /**Returns  the extended tic from which display to be started 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int ExtendedTicBegin
            (
            );
            /**Sets  the extended tic from which display to be started 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetExtendedTicBegin
            (
                int displayExtendBegin /** displayextendbegin */ 
            );
            /**Returns  the extended tic display frequency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int ExtendedTicFrequency
            (
            );
            /**Sets  the extended tic display frequency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetExtendedTicFrequency
            (
                int displayExtendFrequency /** displayextendfrequency */ 
            );
            /**Returns  the label name 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int LabelName
            (
            );
            /**Sets  the label name 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetLabelName
            (
                int labelName /** labelname */ 
            );
            /**Returns  the label from which skip to be started 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int SkipLabelBegin
            (
            );
            /**Sets  the label from which skip to be started 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetSkipLabelBegin
            (
                int skipLabelBegin /** skiplabelbegin */ 
            );
            /**Returns  the label skip frequency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int SkipLabelFrequency
            (
            );
            /**Sets  the label skip frequency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetSkipLabelFrequency
            (
                int skipLabelFrequency /** skiplabelfrequency */ 
            );
            /**Returns  the label color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int LabelColor
            (
            );
            /**Sets  the label color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetLabelColor
            (
                int labelColor /** labelcolor */ 
            );
            /**Returns  the label font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int LabelFont
            (
            );
            /**Sets  the label font 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetLabelFont
            (
                int labelFont /** labelfont */ 
            );
            /**Returns  the label width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int LabelWidth
            (
            );
            /**Sets  the label width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetLabelWidth
            (
                int labelWidth /** labelwidth */ 
            );
            /**Returns  the label font style 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool LabelItalicized
            (
            );
            /**Sets  the label font style 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetLabelItalicized
            (
                bool italic /** italic */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
