#ifndef NXOpen_GEOMETRICUTILITIES_SNIPINTOPATCHESBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_SNIPINTOPATCHESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_SnipIntoPatchesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricUtilities_SnipIntoPatchesBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class SnipIntoPatchesBuilder;
    }
    class Builder;
    class Curve;
    class Face;
    class RegionPointList;
    class SelectFace;
    namespace GeometricUtilities
    {
        class _SnipIntoPatchesBuilderBuilder;
        class SnipIntoPatchesBuilderImpl;
        /** Represents a @link GeometricUtilities::SnipIntoPatchesBuilder GeometricUtilities::SnipIntoPatchesBuilder@endlink  builder. No object is returned by this builder. <br> To create a new instance of this class, use @link GeometricUtilities::CAMDataPrepManager::CreateSnipIntoPatchesBuilder  GeometricUtilities::CAMDataPrepManager::CreateSnipIntoPatchesBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        HideOriginal </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  SnipIntoPatchesBuilder : public Builder
        {
            private: SnipIntoPatchesBuilderImpl * m_snipintopatchesbuilder_impl;
            private: friend class  _SnipIntoPatchesBuilderBuilder;
            protected: SnipIntoPatchesBuilder();
            public: ~SnipIntoPatchesBuilder();
            /**Returns  the face to snip into patches 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * Face
            (
            );
            /**Returns  the option indicating to hide or show the original. If True it is hidden,else it is shown 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool HideOriginal
            (
            );
            /**Sets  the option indicating to hide or show the original. If True it is hidden,else it is shown 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING") */
            public: void SetHideOriginal
            (
                bool hideOriginal /** hideoriginal */ 
            );
            /**Returns  the region to delete from the surface 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::RegionPointList * Region
            (
            );
            /** Snip the selected surface into patches 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SnipSurfaceIntoPatches
            (
                NXOpen::Face * targetFace /** targetface */ 
            );
            /** Create region preview 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateRegionsPreview
            (
                NXOpen::Face * targetFace /** targetface */ ,
                const std::vector<NXOpen::Curve *> & allCurves /** allcurves */ 
            );
            /** Delete internal patch from the selected surface 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteInternalPatch
            (
                NXOpen::Face * targetFace /** targetface */ ,
                const std::vector<NXOpen::Curve *> & allCurves /** allcurves */ 
            );
            /** Get extracted face  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Face * GetExtractFace
            (
            );
            /** Get the generated isoparametric curves on the selected surface 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetIsoCurves
            (
                NXOpen::Face * targetFace /** targetface */ ,
                std::vector<NXOpen::Curve *> & allCurves /** allcurves */ 
            );
            /** Delete the extracted face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteExtractFace
            (
                NXOpen::Face * extractFace /** extractface */ 
            );
            /** Delete the isoparametric curve generated on the selected surface 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteIsoCurve
            (
                const std::vector<NXOpen::Curve *> & allCurves /** allcurves */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
