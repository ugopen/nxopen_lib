#ifndef NXOpen_ANNOTATIONS_PARTSYMBOLFOLDERBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_PARTSYMBOLFOLDERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_PartSymbolFolderBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_PartSymbolFolderBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class PartSymbolFolderBuilder;
    }
    namespace Annotations
    {
        class MasterCustomSymbol;
    }
    namespace Annotations
    {
        class PartSymbolFolder;
    }
    class Builder;
    namespace Annotations
    {
        class _PartSymbolFolderBuilderBuilder;
        class PartSymbolFolderBuilderImpl;
        /**
            Represents a @link Annotations::PartSymbolFolderBuilder Annotations::PartSymbolFolderBuilder@endlink .
             <br> To create a new instance of this class, use @link Annotations::PartSymbolFolderCollection::CreatePartSymbolFolderBuilder  Annotations::PartSymbolFolderCollection::CreatePartSymbolFolderBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  PartSymbolFolderBuilder : public Builder
        {
            private: PartSymbolFolderBuilderImpl * m_partsymbolfolderbuilder_impl;
            private: friend class  _PartSymbolFolderBuilderBuilder;
            protected: PartSymbolFolderBuilder();
            public: ~PartSymbolFolderBuilder();
            /** Returns the folder name @return  folder name
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString GetFolderName
            (
            );
            /** Sets folder name provided current folder is not root folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFolderName
            (
                const NXString & folderName /** folder name*/
            );
            /** Sets folder name provided current folder is not root folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetFolderName
            (
                const char * folderName /** folder name*/
            );
            /** Returns current folder  @return  current folder
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PartSymbolFolder * GetCurrentFolder
            (
            );
            /** Returns parent of current folder  provided current folder is not root folder  @return  parent part symbol folder
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PartSymbolFolder * GetParent
            (
            );
            /** Sets parent of current folder  provided current folder is not root folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetParent
            (
                NXOpen::Annotations::PartSymbolFolder * parentfolder /** parent part symbol folder*/
            );
            /** Get the root part symbol folder  @return  root part symbol folder
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PartSymbolFolder * GetRootFolder
            (
            );
            /** Checks whether the given folder is root folder or not  @return   returns true if root folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsRootFolder
            (
            );
            /** Returns children of current folder  @return   array of sub folders
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::PartSymbolFolder *> GetChildren
            (
            );
            /** Returns number of child folders of current folder  @return   number of child folders
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int GetFolderCount
            (
            );
            /** Returns number of part symbols of current folder  @return   number of part symbols
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int GetPartSymbolCount
            (
            );
            /** Returns part symbols of current folder  @return   array of part symbols
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::MasterCustomSymbol *> GetPartSymbols
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
