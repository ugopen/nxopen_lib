#ifndef NXOpen_DIE_DRAWBEADSEGMENTBUILDER_HXX_INCLUDED
#define NXOpen_DIE_DRAWBEADSEGMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_DrawBeadSegmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DrawBeadSegmentBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class DrawBeadSegmentBuilder;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace Die
    {
        class _DrawBeadSegmentBuilderBuilder;
        class DrawBeadSegmentBuilderImpl;
        /** Segment builder for Die Engineering draw bead. The segment is
            defined along the centerline by either a single point (and then the
            next segment) or 2 end points along the segment.  <br> To create a new instance of this class, use @link Die::DrawBeadBuilder::CreateDrawBeadSegment  Die::DrawBeadBuilder::CreateDrawBeadSegment @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  DrawBeadSegmentBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** value for how the male width is specified. */
            public: enum MaleBeadWidthTypes
            {
                MaleBeadWidthTypesConstant/** The male bead width is specified by a constant value. */,
                MaleBeadWidthTypesDerived/** The male bead width is derived from the width specified for the female. */
            };

            private: DrawBeadSegmentBuilderImpl * m_drawbeadsegmentbuilder_impl;
            private: friend class  _DrawBeadSegmentBuilderBuilder;
            protected: DrawBeadSegmentBuilder();
            public: ~DrawBeadSegmentBuilder();
            /**Returns  the start location along the centerline for this segment. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * StartLocation
            (
            );
            /**Returns  the end location along the centerline for this segment. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * EndLocation
            (
            );
            /**Returns  the expression containing the female left radius value. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FemaleLeftRadius
            (
            );
            /**Returns  the expression containing the female right radius value. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FemaleRightRadius
            (
            );
            /**Returns  the value identifying that the male width is symmetrical about the location and reference direction. True indictaes that it is symmetrical. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool Symmetry
            (
            );
            /**Sets  the value identifying that the male width is symmetrical about the location and reference direction. True indictaes that it is symmetrical. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSymmetry
            (
                bool symmetry /** symmetry */ 
            );
            /**Returns  the value identifying if the segment is of flow type (the top radius is half the width). Only allowed if the bead is symmetric. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool Flow
            (
            );
            /**Sets  the value identifying if the segment is of flow type (the top radius is half the width). Only allowed if the bead is symmetric. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFlow
            (
                bool flow /** flow */ 
            );
            /**Returns  the male bead width type. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadSegmentBuilder::MaleBeadWidthTypes MaleBeadWidthType
            (
            );
            /**Sets  the male bead width type. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaleBeadWidthType
            (
                NXOpen::Die::DrawBeadSegmentBuilder::MaleBeadWidthTypes maleBeadWidthType /** malebeadwidthtype */ 
            );
            /**Returns  the expression containing the male width value for the "left" side. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaleLeftWidth
            (
            );
            /**Returns  the expression containing the male top radius value for the "Left" side. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaleLeftTopRadius
            (
            );
            /**Returns  the expression containing the male sheet radius value for the "Left" side. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaleLeftSheetRadius
            (
            );
            /**Returns  the expression containing the male wall angle value for the "Left" side. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaleLeftWallAngle
            (
            );
            /**Returns  the expression containing the male width value for the "Right" side. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaleRightWidth
            (
            );
            /**Returns  the expression containing the male top radius value for the "Right" side. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaleRightTopRadius
            (
            );
            /**Returns  the expression containing the male sheet radius value for the "Right" side. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaleRightSheetRadius
            (
            );
            /**Returns  the expression containing the male wall angle value for the "Right" side. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaleRightWallAngle
            (
            );
            /**Returns  the expression containing the male bead height value. The height is measured from the centerline to the top of the bead. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaleBeadHeight
            (
            );
            /**Returns  the expression containing the male transition length value. The transition length is between bead segments. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaleTransitionLength
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
