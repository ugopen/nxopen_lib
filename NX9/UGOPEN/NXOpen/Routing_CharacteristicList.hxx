#ifndef NXOpen_ROUTING_CHARACTERISTICLIST_HXX_INCLUDED
#define NXOpen_ROUTING_CHARACTERISTICLIST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_CharacteristicList.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
    }
    namespace Routing
    {
        class CharacteristicListImpl;
        /**
                 Contains a list of characteristics.
                 A characteristics is a name-value pair where the value can be an integer, real or string.

            
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  CharacteristicList : public TransientObject
        {
             /** Contains the type and name of a characteristic */
            public:
            struct  CharacteristicInformation
            {
                public: /** characteristic type  */NXOpen::NXObject::AttributeType Type;
                public: /** characteristic name */NXString Name;
                public: CharacteristicInformation() :
                    Type((NXOpen::NXObject::AttributeType)0),
                    Name()
                {
                }
                /** Constructor for the CharacteristicInformation struct. */ 
                public: CharacteristicInformation(NXOpen::NXObject::AttributeType typeInitial /** characteristic type  */, 
                        const NXString &nameInitial /** characteristic name */) :
                    Type(typeInitial),
                    Name(nameInitial)
                {
                }
            };

            private: CharacteristicListImpl * m_characteristiclist_impl;
            /// \cond NX_NO_DOC 
            public: explicit CharacteristicList(void *ptr);
            /// \endcond 
            /** Frees the memory associated with this object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~CharacteristicList();
            /** Gets the value of an integer characteristic.  @return  The integer value of the characteristic. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int GetIntegerCharacteristic
            (
                const NXString & name /** The name of the characteristic.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of an integer characteristic.  @return  The integer value of the characteristic. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            int GetIntegerCharacteristic
            (
                const char * name /** The name of the characteristic.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the value of an integer characteristic associated with the input name.
                        The method adds a new characteristic to the list if one does not exist already or converts
                        the type of an existing characteristic to integer if necessary. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** The integer value of the characteristic */
            );
            /** Sets the value of an integer characteristic associated with the input name.
                        The method adds a new characteristic to the list if one does not exist already or converts
                        the type of an existing characteristic to integer if necessary. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetCharacteristic
            (
                const char * name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** The integer value of the characteristic */
            );
            /** Gets the value of a real characteristic.  @return  The real value of the characteristic 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetRealCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of a real characteristic.  @return  The real value of the characteristic 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            double GetRealCharacteristic
            (
                const char * name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the value of an real characteristic associated with the input name.
                        The method adds a new characteristic to the list if one doesn't exist already or converts
                        the type of an existing characteristic to real if necessary. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** The real value of the characteristic */
            );
            /** Sets the value of an real characteristic associated with the input name.
                        The method adds a new characteristic to the list if one doesn't exist already or converts
                        the type of an existing characteristic to real if necessary. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetCharacteristic
            (
                const char * name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** The real value of the characteristic */
            );
            /** Gets the value of a string characteristic  @return  The string value of the characteristic 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString GetStringCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of a string characteristic  @return  The string value of the characteristic 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            NXString GetStringCharacteristic
            (
                const char * name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the value of an string characteristic.
                        The method adds a new characteristic to the list if one does not exist already or converts
                        the type of an existing characteristic to string if necessary. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** The string value of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the value of an string characteristic.
                        The method adds a new characteristic to the list if one does not exist already or converts
                        the type of an existing characteristic to string if necessary. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetCharacteristic
            (
                const char * name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * value /** The string value of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the value of a string or reference characteristic.
                        The method adds a new characteristic to the list if one does not exist already or converts
                        the type of an existing characteristic to string or reference if necessary. 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** The string value of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::NXObject::AttributeType type /** The type of the characteristic, either string or reference type. <br> 
                                                                            @link NXObject::AttributeTypeAny NXObject::AttributeTypeAny@endlink  is not valid. <br> 
                                                                            See @link NXObject::AttributeType NXObject::AttributeType@endlink  for more information. */
            );
            /** Sets the value of a string or reference characteristic.
                        The method adds a new characteristic to the list if one does not exist already or converts
                        the type of an existing characteristic to string or reference if necessary. 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetCharacteristic
            (
                const char * name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * value /** The string value of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::NXObject::AttributeType type /** The type of the characteristic, either string or reference type. <br> 
                                                                            @link NXObject::AttributeTypeAny NXObject::AttributeTypeAny@endlink  is not valid. <br> 
                                                                            See @link NXObject::AttributeType NXObject::AttributeType@endlink  for more information. */
            );
            /** Returns the titles of all characteristics that have the specified type.  @return  The list of characteristic names. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::CharacteristicList::CharacteristicInformation> GetCharacteristicTitlesByType
            (
                NXOpen::NXObject::AttributeType type /** The characteristic type. <br> 
                                                                                                    Specifying @link NXObject::
                                                                                                    AttributeType Any NXObject::
                                                                                                    AttributeType Any@endlink  returns the titles of all characteristics in the list.  <br> 
                                                                                                    See @link NXObject::AttributeType NXObject::AttributeType@endlink  for more information. */
            );
            /** Removes a characteristic from the characteristic list.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void DeleteCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::NXObject::AttributeType type /** The type of the characteristic. <br> 
                                                                            @link NXObject::AttributeTypeAny NXObject::AttributeTypeAny@endlink  is not valid. <br> 
                                                                            See @link NXObject::AttributeType NXObject::AttributeType@endlink  for more information. */
            );
            /** Removes a characteristic from the characteristic list.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void DeleteCharacteristic
            (
                const char * name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::NXObject::AttributeType type /** The type of the characteristic. <br> 
                                                                            @link NXObject::AttributeTypeAny NXObject::AttributeTypeAny@endlink  is not valid. <br> 
                                                                            See @link NXObject::AttributeType NXObject::AttributeType@endlink  for more information. */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
