#ifndef NXOpen_BASEPROPERTYTABLE_HXX_INCLUDED
#define NXOpen_BASEPROPERTYTABLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BasePropertyTable.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ScalarMatrixValue.hxx>
#include <NXOpen/ScalarTableValue.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class BasePropertyTable;
    class CoordinateSystem;
    class Expression;
    namespace Fields
    {
        class FieldExpression;
    }
    namespace Fields
    {
        class FieldWrapper;
    }
    namespace Fields
    {
        class ScalarFieldWrapper;
    }
    class NXObject;
    class PhysicalMaterial;
    class ScalarMatrixValue;
    class ScalarTableValue;
    class Unit;
    class _BasePropertyTableBuilder;
    class BasePropertyTableImpl;
    /**  @brief  Represents a property table  

       <br> This is a sub object  <br> 
     <br>  Created in NX9.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  BasePropertyTable : public NXObject
    {
        /** Property Types */
        public: enum BasePropertyType
        {
            BasePropertyTypeUnknown/** unknown */ ,
            BasePropertyTypeString/** string */ ,
            BasePropertyTypeBoolean/** boolean */ ,
            BasePropertyTypeInteger/** integer */ ,
            BasePropertyTypeDouble/** double */ ,
            BasePropertyTypeFieldWrapper/** field wrapper */ ,
            BasePropertyTypeScalarFieldWrapper/** scalar field wrapper */ ,
            BasePropertyTypeCoordinateSystem/** coordinate system */ ,
            BasePropertyTypeDoubleArray/** double array */ ,
            BasePropertyTypeIntegerArray/** integer array */ ,
            BasePropertyTypePhysicalMaterial/** physical material */ ,
            BasePropertyTypeMatrix/** matrix */ ,
            BasePropertyTypeScalarTable/** scalar table */ 
        };

        private: BasePropertyTableImpl * m_basepropertytable_impl;
        private: friend class  _BasePropertyTableBuilder;
        protected: BasePropertyTable();
        public: ~BasePropertyTable();
        /** Copies the values from the input table into this table,  the table descriptor neutral names must match  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void CopyProperties
        (
            NXOpen::BasePropertyTable * sourceTable /** source table */ 
        );
        /**The count of properties in the table  @return  count of properties 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: int GetPropertyCount
        (
        );
        /** Returns the name of the property  @return  name of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetPropertyNameByIndex
        (
            int index /** index of the property */
        );
        /** Returns the type of the property  @return  type of the property 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePropertyTable::BasePropertyType GetBasePropertyType
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the type of the property  @return  type of the property 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::BasePropertyTable::BasePropertyType GetBasePropertyType
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the string value of the property
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetStringPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the string value of the property
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXString GetStringPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the string value of the property
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetStringPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & propertyValue /** value of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the string value of the property
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void SetStringPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * propertyValue /** value of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the boolean value of the property
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool GetBooleanPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the boolean value of the property
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        bool GetBooleanPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the boolean value of the property
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetBooleanPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool propertyValue /** value of the property */
        );
        /** Sets the boolean value of the property
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void SetBooleanPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool propertyValue /** value of the property */
        );
        /** Returns the integer value of the property
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: int GetIntegerPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the integer value of the property
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        int GetIntegerPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the integer value of the property
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIntegerPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int propertyValue /** value of the property */
        );
        /** Sets the integer value of the property
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void SetIntegerPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int propertyValue /** value of the property */
        );
        /** Returns the double value of the property
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: double GetDoublePropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the double value of the property
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        double GetDoublePropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the double value of the property
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDoublePropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            double propertyValue /** value of the property */
        );
        /** Sets the double value of the property
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void SetDoublePropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            double propertyValue /** value of the property */
        );
        /** Returns the double value of the property with units
                
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void GetBaseScalarWithDataPropertyValue
        (
            const NXString & propertyName /** name of the Scalar   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            double* propertyValue /** The current double value of the Scalar */,
            NXOpen::Unit ** unitType /** Unit type for the Scalar NULL if the Scalar has no units */
        );
        /** Returns the double value of the property with units
                
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        void GetBaseScalarWithDataPropertyValue
        (
            const char * propertyName /** name of the Scalar   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            double* propertyValue /** The current double value of the Scalar */,
            NXOpen::Unit ** unitType /** Unit type for the Scalar NULL if the Scalar has no units */
        );
        /** Sets the the Scalar property as a constant double value with units.
                Use @link BasePropertyTable::SetScalarPropertyValue BasePropertyTable::SetScalarPropertyValue@endlink  to enable
                Design Logic for this property.
                
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetBaseScalarWithDataPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            double propertyValue /** The double value for the Scalar */,
            NXOpen::Unit * unitType /** Unit type for the Scalar NULL if the Scalar has no units */
        );
        /** Sets the the Scalar property as a constant double value with units.
                Use @link BasePropertyTable::SetScalarPropertyValue BasePropertyTable::SetScalarPropertyValue@endlink  to enable
                Design Logic for this property.
                
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        void SetBaseScalarWithDataPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            double propertyValue /** The double value for the Scalar */,
            NXOpen::Unit * unitType /** Unit type for the Scalar NULL if the Scalar has no units */
        );
        /** Sets the the Scalar property as a string value with units.
                When the string does not represent a constant number, then an expression is created.
                Once a property has an expression, subsequent set commands will retain the expression
                and edit the new string into it.
                The string must not be empty. To set this property to empty, use @link BasePropertyTable::SetTablePropertyWithoutValue BasePropertyTable::SetTablePropertyWithoutValue@endlink .
                
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetBaseScalarWithDataPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & propertyValue /** The string value for the Scalar   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Unit * unitType /** Unit type for the Scalar NULL if the Scalar has no units */
        );
        /** Sets the the Scalar property as a string value with units.
                When the string does not represent a constant number, then an expression is created.
                Once a property has an expression, subsequent set commands will retain the expression
                and edit the new string into it.
                The string must not be empty. To set this property to empty, use @link BasePropertyTable::SetTablePropertyWithoutValue BasePropertyTable::SetTablePropertyWithoutValue@endlink .
                
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        void SetBaseScalarWithDataPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * propertyValue /** The string value for the Scalar   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Unit * unitType /** Unit type for the Scalar NULL if the Scalar has no units */
        );
        /** Returns the expression @link Expression Expression@endlink  value of the property
                Use @link BasePropertyTable::SetBaseScalarWithDataPropertyValue BasePropertyTable::SetBaseScalarWithDataPropertyValue@endlink 
                for a constant value when an expression @link Expression Expression@endlink  is not needed.
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * GetScalarPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the expression @link Expression Expression@endlink  value of the property
                Use @link BasePropertyTable::SetBaseScalarWithDataPropertyValue BasePropertyTable::SetBaseScalarWithDataPropertyValue@endlink 
                for a constant value when an expression @link Expression Expression@endlink  is not needed.
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Expression * GetScalarPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the expression @link Expression Expression@endlink  value of the property
                Use @link BasePropertyTable::SetBaseScalarWithDataPropertyValue BasePropertyTable::SetBaseScalarWithDataPropertyValue@endlink 
                for a constant value when an expression @link Expression Expression@endlink  is not needed.
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetScalarPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Expression * propertyValue /** value of the property */
        );
        /** Sets the expression @link Expression Expression@endlink  value of the property
                Use @link BasePropertyTable::SetBaseScalarWithDataPropertyValue BasePropertyTable::SetBaseScalarWithDataPropertyValue@endlink 
                for a constant value when an expression @link Expression Expression@endlink  is not needed.
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void SetScalarPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Expression * propertyValue /** value of the property */
        );
        /** Returns the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                 @return  value of the property 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Fields::FieldExpression * GetBaseScalarFieldPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                 @return  value of the property 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Fields::FieldExpression * GetBaseScalarFieldPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetBaseScalarFieldPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Fields::FieldExpression * propertyValue /** value of the property */
        );
        /** Sets the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        void SetBaseScalarFieldPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Fields::FieldExpression * propertyValue /** value of the property */
        );
        /** Returns the coordinate system @link CoordinateSystem CoordinateSystem@endlink  
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::CoordinateSystem * GetCoordinateSystemPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the coordinate system @link CoordinateSystem CoordinateSystem@endlink  
                 @return  value of the property 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::CoordinateSystem * GetCoordinateSystemPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the coordinate system @link CoordinateSystem CoordinateSystem@endlink 
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCoordinateSystemPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::CoordinateSystem * propertyValue /** value of the property */
        );
        /** Sets the coordinate system @link CoordinateSystem CoordinateSystem@endlink 
                
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void SetCoordinateSystemPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::CoordinateSystem * propertyValue /** value of the property */
        );
        /** Returns the scalar array and unit value of the property
                
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void GetScalarArrayWithUnitsPropertyValue
        (
            const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<double> & propertyValue /** array of values of the property */,
            NXOpen::Unit ** unitType /** Unit type for the Array NULL if the Array has no units */
        );
        /** Returns the scalar array and unit value of the property
                
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        void GetScalarArrayWithUnitsPropertyValue
        (
            const char * propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<double> & propertyValue /** array of values of the property */,
            NXOpen::Unit ** unitType /** Unit type for the Array NULL if the Array has no units */
        );
        /** Sets the scalar array and unit value of the property
                
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetScalarArrayWithUnitsPropertyValue
        (
            const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<double> & propertyValue /** value of the property */,
            NXOpen::Unit * unitType /** Unit type for the Array */
        );
        /** Sets the scalar array and unit value of the property
                
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        void SetScalarArrayWithUnitsPropertyValue
        (
            const char * propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<double> & propertyValue /** value of the property */,
            NXOpen::Unit * unitType /** Unit type for the Array */
        );
        /** Returns the scalar array value of the property.
                Use @link BasePropertyTable::GetScalarArrayWithUnitsPropertyValue BasePropertyTable::GetScalarArrayWithUnitsPropertyValue@endlink 
                when other than base units are set.
                 @return  value of the property 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<double> GetScalarArrayPropertyValue
        (
            const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the scalar array value of the property.
                Use @link BasePropertyTable::GetScalarArrayWithUnitsPropertyValue BasePropertyTable::GetScalarArrayWithUnitsPropertyValue@endlink 
                when other than base units are set.
                 @return  value of the property 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        std::vector<double> GetScalarArrayPropertyValue
        (
            const char * propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the scalar array value of the property.
                Use @link BasePropertyTable::SetScalarArrayWithUnitsPropertyValue BasePropertyTable::SetScalarArrayWithUnitsPropertyValue@endlink 
                when other than base units are set.
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetScalarArrayPropertyValue
        (
            const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<double> & propertyValue /** value of the property */
        );
        /** Sets the scalar array value of the property.
                Use @link BasePropertyTable::SetScalarArrayWithUnitsPropertyValue BasePropertyTable::SetScalarArrayWithUnitsPropertyValue@endlink 
                when other than base units are set.
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetScalarArrayPropertyValue
        (
            const char * propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<double> & propertyValue /** value of the property */
        );
        /** Returns the integer array value of the property
                 @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<int> GetIntegerArrayPropertyValue
        (
            const NXString & propertyName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the integer array value of the property
                 @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        std::vector<int> GetIntegerArrayPropertyValue
        (
            const char * propertyName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the integer array value of the property
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIntegerArrayPropertyValue
        (
            const NXString & propertyName /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<int> & propertyValue /** property value */ 
        );
        /** Sets the integer array value of the property
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetIntegerArrayPropertyValue
        (
            const char * propertyName /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<int> & propertyValue /** property value */ 
        );
        /** Gets the material value
                
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void GetMaterialPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool* materialInherited /** true indicate the material is inherited from referenced object assignments such as geometry */,
            NXOpen::PhysicalMaterial ** material /** the material value to assign */
        );
        /** Gets the material value
                
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        void GetMaterialPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool* materialInherited /** true indicate the material is inherited from referenced object assignments such as geometry */,
            NXOpen::PhysicalMaterial ** material /** the material value to assign */
        );
        /** Sets the material value
                
         <br>  Created in NX6.0.3.  <br>  
         <br> License requirements : None */
        public: void SetMaterialPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool materialInherited /** true indicate the material is inherited from referenced object assignments such as geometry */,
            NXOpen::PhysicalMaterial * material /** the material value to assign */
        );
        /** Sets the material value
                
         <br>  Created in NX6.0.3.  <br>  
         <br> License requirements : None */
        void SetMaterialPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool materialInherited /** true indicate the material is inherited from referenced object assignments such as geometry */,
            NXOpen::PhysicalMaterial * material /** the material value to assign */
        );
        /** Returns the field wrapper @link Fields::FieldWrapper Fields::FieldWrapper@endlink  
                 @return  value of the property 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Fields::FieldWrapper * GetFieldWrapperPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the field wrapper @link Fields::FieldWrapper Fields::FieldWrapper@endlink  
                 @return  value of the property 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Fields::FieldWrapper * GetFieldWrapperPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the field wrapper @link Fields::FieldWrapper Fields::FieldWrapper@endlink 
                
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFieldWrapperPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Fields::FieldWrapper * propertyValue /** value of the property */
        );
        /** Sets the field wrapper @link Fields::FieldWrapper Fields::FieldWrapper@endlink 
                
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetFieldWrapperPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Fields::FieldWrapper * propertyValue /** value of the property */
        );
        /** Returns the scalar field wrapper @link Fields::ScalarFieldWrapper Fields::ScalarFieldWrapper@endlink  
                 @return  value of the property 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Fields::ScalarFieldWrapper * GetScalarFieldWrapperPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the scalar field wrapper @link Fields::ScalarFieldWrapper Fields::ScalarFieldWrapper@endlink  
                 @return  value of the property 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Fields::ScalarFieldWrapper * GetScalarFieldWrapperPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the scalar field wrapper @link Fields::ScalarFieldWrapper Fields::ScalarFieldWrapper@endlink 
                
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetScalarFieldWrapperPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Fields::ScalarFieldWrapper * propertyValue /** value of the property */
        );
        /** Sets the scalar field wrapper @link Fields::ScalarFieldWrapper Fields::ScalarFieldWrapper@endlink 
                
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetScalarFieldWrapperPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Fields::ScalarFieldWrapper * propertyValue /** value of the property */
        );
        /** Returns a matrix cell value from the matrix value of the property
                 @return  NxM Scalar matrix 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ScalarMatrixValue * GetMatrixPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns a matrix cell value from the matrix value of the property
                 @return  NxM Scalar matrix 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::ScalarMatrixValue * GetMatrixPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Set a matrix cell value from the matrix value of the property
                
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMatrixPropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::ScalarMatrixValue * matrix /** NxM Scalar matrix */
        );
        /** Set a matrix cell value from the matrix value of the property
                
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetMatrixPropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::ScalarMatrixValue * matrix /** NxM Scalar matrix */
        );
        /** Returns a scalar table value value from the scalar table value of the property
                 @return  NxM Scalar table 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ScalarTableValue * GetScalarTablePropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns a scalar table value value from the scalar table value of the property
                 @return  NxM Scalar table 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::ScalarTableValue * GetScalarTablePropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Set a scalar table value from the scalar table value of the property
                
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetScalarTablePropertyValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::ScalarTableValue * table /** NxM Scalar table */
        );
        /** Set a scalar table value from the scalar table value of the property
                
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetScalarTablePropertyValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::ScalarTableValue * table /** NxM Scalar table */
        );
        /** Unset a property. Cause a property to be output to the solver as a blank so that the solver uses its default value 
                
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetTablePropertyWithoutValue
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Unset a property. Cause a property to be output to the solver as a blank so that the solver uses its default value 
                
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        void SetTablePropertyWithoutValue
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  the language specific name of the property table's descriptor 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString DescriptorSpecificName
        (
        );
        /**Returns  the neutral name of the property table's descriptor 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString DescriptorNeutralName
        (
        );
        /** Set property override flag. 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTablePropertyOverride
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Set property override flag. 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        void SetTablePropertyOverride
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Clear property override flag. 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void ClearTablePropertyOverride
        (
            const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Clear property override flag. 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        void ClearTablePropertyOverride
        (
            const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
