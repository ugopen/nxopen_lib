#ifndef NXOpen_MEASUREMANAGER_HXX_INCLUDED
#define NXOpen_MEASUREMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MeasureManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class MeasureManager;
    class BasePart;
    class CartesianCoordinateSystem;
    class Direction;
    class DisplayableObject;
    class IBody;
    class IParameterizedSurface;
    class Measure;
    class MeasureAngle;
    class MeasureAngleBuilder;
    class MeasureBodies;
    class MeasureBodyBuilder;
    class MeasureDistance;
    class MeasureDistanceBuilder;
    class MeasureFaceBuilder;
    class MeasureFaces;
    class MeasureLength;
    class MeasurePoint;
    class MeasurePolarAngle;
    class MeasurePolarArea;
    class MeasurePolarRadius;
    class MeasureRectangularExtreme;
    class NXObject;
    class Point;
    namespace Routing
    {
        class RoutingMeasureDistanceBuilder;
    }
    class ScCollector;
    class Unit;
    class MeasureManagerImpl;
    /** Provides methods for manipulating the measurement objects in a part  <br> To obtain an instance of this class, refer to @link BasePart  BasePart @endlink  <br> 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  MeasureManager
    {
        /** Indicates the end point to be used when lines or linear edges
                are referenced in an angle between two objects */
        public: enum EndpointType
        {
            EndpointTypeNone/** default for other entity types */,
            EndpointTypeStartPoint/** start point */ ,
            EndpointTypeEndPoint/** end point */ 
        };

        /** Indicates if a the distance measurement will be minimum or maximum 
                distance between the two objects */
        public: enum MeasureType
        {
            MeasureTypeMinimum/** minimum */ ,
            MeasureTypeMaximum/** maximum */ 
        };

        /** Indicates the type of a projected distance measurement */
        public: enum ProjectionType
        {
            ProjectionTypeMinimum/** minimum */ ,
            ProjectionTypeMinClearance/** min clearance */ ,
            ProjectionTypeMaxClearance/** max clearance */ ,
            ProjectionTypeMaximum/** maximum */ 
        };

        /** Indicates the type of a radial distance measurement */
        public: enum RadialMeasureType
        {
            RadialMeasureTypeRadius/** radius */ ,
            RadialMeasureTypeDiameter/** diameter */ 
        };

        /** the type of extreme measurement */
        public: enum ExtremeType
        {
            ExtremeTypeRectangular/** rectangular */ ,
            ExtremeTypePolarRadius/** polar radius */ ,
            ExtremeTypePolarAngle/** polar angle */ ,
            ExtremeTypePolarArea/** polar area */ 
        };

        private: MeasureManagerImpl * m_measuremanager_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit MeasureManager(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~MeasureManager();
        /** Create a point measurement between a point and either the absolute csys, or a 
            specified coordinate system.
             <br> If the csys is a null tag, then the measurement is to the absolute coordinate system. <br> 
             @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasurePoint * NewPoint
        (
            NXOpen::Point * point /** reference point */,
            NXOpen::CartesianCoordinateSystem * csys /** reference coordinate system */,
            bool createExpressions /** create point coordinate expressions */
        );
        /** Edit a point measurement between a point and either the absolute csys, or a 
            specified coordinate system.
             <br> The csys is not used if the point measurement type is absolute. <br> 
            
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditPoint
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::Point * object1 /** reference point */,
            NXOpen::CartesianCoordinateSystem * object2 /** reference coordinate system */
        );
        /** Initialize a point measure using a feature as input.
             <br>  <br> 
             @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasurePoint * InitializePoint
        (
            NXOpen::Measure * feature /** Point measurement feature */
        );
        /** Create a minimum or maximum distance measure between two objects.
             <br> Type of allowed input objects include - Point, Curve, Edge, Face, Body, 
            Datum Plane. For minimum distance the objects may also include Datum Axis and Facet Body.  <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureDistance * NewDistance
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::MeasureManager::MeasureType minMaxFlag /** chooses minimum or maximum distance */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object */
        );
        /** Create a radial distance measure for an arc or circle.
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureDistance * NewDistance
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::DisplayableObject * object1 /** arc or circular edge object */
        );
        /** Create a radial/diameter distance measure for an arc or circle.
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureDistance * NewDistance
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::DisplayableObject * object1 /** arc or circular edge object */,
            NXOpen::MeasureManager::RadialMeasureType mType /** type of measurement, radius or diameter */
        );
        /** Create a minimum distance measure between two component groups/sets.
             <br> Type of allowed input objects are component groups  <br>  
             @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureDistance * NewDistance
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::NXObject * object1 /** First object */,
            NXOpen::NXObject * object2 /** Second object */
        );
        /** Create a minimum distance measure between selection intent collections.
             <br> Type of allowed input objects include - Point, Curve, Edge, Face, Body, 
            Datum Plane.  <br> 
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureDistance * NewScDistance
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::MeasureManager::MeasureType minMaxFlag /** chooses minimum or maximum distance */,
            NXOpen::ScCollector * collection1 /** First set of objects */,
            NXOpen::ScCollector * collection2 /** Second set of objects */
        );
        /** 
            Create a local minimum distance measure between two objects with start points.
             <br> Type of allowed input objects include - Point, Curve, Edge, Face, Body, 
            Datum Plane, Datum Axis, Facet Body.  <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureDistance * NewDistance
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::DisplayableObject * object1 /** First object */,
            const NXOpen::Point3d & startPointForObject1 /** Start point for first object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            const NXOpen::Point3d & startPointForObject2 /** Start point for second object */
        );
        /** Create a projected minimum distance measure between two objects.
             <br> Type of allowed input objects include - Point, Curve, Edge, Face, Body, 
            Datum Plane, Datum Axis, Facet Body. Note that for design in context the direction vector needs to be
            in the coordinates of the work part. <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureDistance * NewDistance
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::Direction * direction /** Direction vector in work part coordinates */
        );
        /** Create a projected, minimum clearance or maximum clearance distance measure between two objects.
             <br> Type of allowed input objects include - Point, Curve, Edge, Face, Body. The Datum Plane and Datum Axis
            are also supported for projected distance, but not for clearance distance.
            Note that for design in context the direction vector needs to be
            in the coordinates of the work part. <br> 
             @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureDistance * NewDistance
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::Direction * direction /** Direction vector in work part coordinates */,
            NXOpen::MeasureManager::ProjectionType projType /** type of projected distance */
        );
        /** Create a projected, minimum clearance or maximum clearance distance measure between selection intent collections.
             <br> Type of allowed input objects include - Point, Curve, Edge, Face, Body, 
            Datum Plane.  
            Note that for design in context the direction vector needs to be
            in the coordinates of the work part. <br> 
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureDistance * NewScDistance
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::ScCollector * collection1 /** First set of objects */,
            NXOpen::ScCollector * collection2 /** Second set of objects */,
            NXOpen::Direction * direction /** Direction vector in work part coordinates */,
            NXOpen::MeasureManager::ProjectionType projType /** type of projected distance */
        );
        /** Edit a minimum / maximum distance measure between two objects or two collections.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditDistance
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::NXObject * object1 /** First object */,
            NXOpen::NXObject * object2 /** Second object */
        );
        /** Edit a minimum / maximum distance measure between two collections and allow
            changing of the measurement type
             <br>  <br> 
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditScDistance
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::ScCollector * object1 /** First collector */,
            NXOpen::ScCollector * object2 /** Second collector */,
            NXOpen::MeasureManager::MeasureType measurementType /** type of distance measurement (min/max) */
        );
        /** Edit a local minimum distance measure between two objects with two start points.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditDistance
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::DisplayableObject * object1 /** First object */,
            const NXOpen::Point3d & startPointForObject1 /** Start point for first object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            const NXOpen::Point3d & startPointForObject2 /** Start point for second object */
        );
        /** Edit a projected minimum distance measure between two objects.  Note that for design in context 
            the direction vector needs to be in the coordinates of the work part.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditDistance
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::Direction * direction /** Direction vector in work part coordinates */
        );
        /** Edit a projected minimum distance measure or clearance distance between two objects.Note that for design in 
            context the direction vector needs to be in the coordinates of the work part.
             <br>  <br> 
            
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditDistance
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::Direction * direction /** Direction vector in work part coordinates */,
            NXOpen::MeasureManager::ProjectionType projType /** type of projected distance */
        );
        /** Edit a radial distance measure for arcs and circles.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditDistance
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::DisplayableObject * object1 /** Arc or circular edge */
        );
        /** Edit an embedded minimum or maximum distance measure between two objects.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditDistance
        (
            const NXString & name /** Embedded measurement expression to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object */
        );
        /** Edit an embedded minimum or maximum distance measure between two objects.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditDistance
        (
            const char * name /** Embedded measurement expression to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object */
        );
        /** Edit an embedded local minimum distance measure between two objects with two start points.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditDistance
        (
            const NXString & name /** Embedded measurement expression to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            const NXOpen::Point3d & startPointForObject1 /** Start point for first object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            const NXOpen::Point3d & startPointForObject2 /** Start point for second object */
        );
        /** Edit an embedded local minimum distance measure between two objects with two start points.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditDistance
        (
            const char * name /** Embedded measurement expression to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            const NXOpen::Point3d & startPointForObject1 /** Start point for first object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            const NXOpen::Point3d & startPointForObject2 /** Start point for second object */
        );
        /** Edit an embedded projected minimum distance measure between two objects.  Note that for design in context the 
            direction vector needs to be in the coordinates of the work part.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditDistance
        (
            const NXString & name /** Embedded measurement expression to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::Direction * direction /** Direction vector in work part coordinates */
        );
        /** Edit an embedded projected minimum distance measure between two objects.  Note that for design in context the 
            direction vector needs to be in the coordinates of the work part.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditDistance
        (
            const char * name /** Embedded measurement expression to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::Direction * direction /** Direction vector in work part coordinates */
        );
        /** Edit an embedded projected minimum or clearance distance measure between two objects. Note that for design 
            in context the direction vector needs to be in the coordinates of the work part.
             <br>  <br> 
            
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditDistance
        (
            const NXString & name /** Embedded measurement expression to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::Direction * direction /** Direction vector in work part coordinates */,
            NXOpen::MeasureManager::ProjectionType projType /** Projection type */
        );
        /** Edit an embedded projected minimum or clearance distance measure between two objects. Note that for design 
            in context the direction vector needs to be in the coordinates of the work part.
             <br>  <br> 
            
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditDistance
        (
            const char * name /** Embedded measurement expression to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::Direction * direction /** Direction vector in work part coordinates */,
            NXOpen::MeasureManager::ProjectionType projType /** Projection type */
        );
        /** Edit an embedded radial distance measure between two objects.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditDistance
        (
            const NXString & name /** Embedded measurement expression to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** Arc or circular edge */
        );
        /** Edit an embedded radial distance measure between two objects.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditDistance
        (
            const char * name /** Embedded measurement expression to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** Arc or circular edge */
        );
        /** Initialize a minimum distance measure using a feature as input.
             <br>  <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureDistance * InitializeDistance
        (
            NXOpen::Measure * feature /** Distance measurement feature */
        );
        /** Creates a arc length object for all the selected objects.
             <br> Type of allowed input objects are selection intent rule collections of Edge,Line,Arc,Spline,and Curve  <br> 
             @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureLength * NewLength
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::ScCollector * objects /** curves and edges */
        );
        /** Creates a arc length object for all the selected objects.
             <br> Type of allowed input objects  are - Edge,Line,Arc,Spline,and Curve  <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureLength * NewLength
        (
            NXOpen::Unit * units /** Measurement units */,
            const std::vector<NXOpen::DisplayableObject *> & objects /** Array of curves and edges */
        );
        /** Edit a length measure using selection intent.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditLength
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::ScCollector * objects /** curves and edges */
        );
        /** Edit a length measure.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditLength
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            const std::vector<NXOpen::DisplayableObject *> & objects /** Array of curves and edges */
        );
        /** Edit an embedded length measure with selection intent.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditLength
        (
            const NXString & name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::ScCollector * objects /** Collection of curves and edges */
        );
        /** Edit an embedded length measure with selection intent.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditLength
        (
            const char * name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::ScCollector * objects /** Collection of curves and edges */
        );
        /** Edit an embedded length measure.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditLength
        (
            const NXString & name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<NXOpen::DisplayableObject *> & objects /** Array of curves and edges */
        );
        /** Edit an embedded length measure.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditLength
        (
            const char * name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<NXOpen::DisplayableObject *> & objects /** Array of curves and edges */
        );
        /** Initialize a length measurement from a feature.
             <br>  <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureLength * InitializeLength
        (
            NXOpen::Measure * feature /** Length measurement feature */
        );
        /** Create an angle measurement between two objects.
             <br> Type of allowed input objects include - Line, linear edge, Face,
            Datum Plane, Datum Axis. <br> 
             <br> The end point qualifier is used for lines and linear edges to determine
            the direction of the vector along the line. <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureAngle * NewAngle
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::MeasureManager::EndpointType qualifier1 /** first end point qualifier */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::MeasureManager::EndpointType qualifier2 /** second end point qualifier */,
            bool minorAngle /** selects minimum arc */
        );
        /** Create an angle measurement between two objects.
             <br> Type of allowed input objects include - Line, linear edge, Face,
            Datum Plane, Datum Axis. <br> 
             <br> The end point qualifier is used for lines and linear edges to determine
            the direction of the vector along the line. <br> 
             <br> When true angle is set the method of calculation for face to face and face to line
            angle is changed to compute the true angle instead of using the face normals <br> 
             @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureAngle * NewAngle
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::MeasureManager::EndpointType qualifier1 /** first end point qualifier */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::MeasureManager::EndpointType qualifier2 /** second end point qualifier */,
            bool minorAngle /** selects minimum arc */,
            bool trueAngle /** selects type of algorithm for the angle calculation */
        );
        /** Create an angle measurement between three points.
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureAngle * NewAngle
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::Point * basePoint /** Base point */,
            NXOpen::Point * endPoint1 /** End point 1 */,
            NXOpen::Point * endPoint2 /** End point 2 */,
            bool minorAngle /** selects minimum arc */
        );
        /** Edit an angle measurement between two objects.
             <br> Type of allowed input objects include - Line, linear edge, Face,
            Datum Plane, Datum Axis.  <br>     
             <br> The end point qualifier is used for lines and linear edges to determine
            the direction of the vector along the line.  For other input types the
            qualifier is ignored. <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditAngle
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::MeasureManager::EndpointType qualifier1 /** first end point qualifier */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::MeasureManager::EndpointType qualifier2 /** second end point qualifier */,
            bool minorAngle /** selects minimum arc */
        );
        /** Edit an angle measurement between two objects.
             <br> Type of allowed input objects include - Line, linear edge, Face,
            Datum Plane, Datum Axis.  <br>     
             <br> The end point qualifier is used for lines and linear edges to determine
            the direction of the vector along the line.  For other input types the
            qualifier is ignored. <br> 
             <br> When true angle is set the method of calculation for face to face and face to line
            angle is changed to compute the true angle instead of using the face normals <br> 
            
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditAngle
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::MeasureManager::EndpointType qualifier1 /** first end point qualifier */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::MeasureManager::EndpointType qualifier2 /** second end point qualifier */,
            bool minorAngle /** selects minimum arc */,
            bool trueAngle /** selects the algorithm for angle calculations */
        );
        /** Edit an angle measurement between three points.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditAngle
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::Point * basePoint /** Base point */,
            NXOpen::Point * endPoint1 /** End point 1 */,
            NXOpen::Point * endPoint2 /** End point 2 */,
            bool minorAngle /** selects minimum arc */
        );
        /** Edit an embedded angle measurement between two objects.
             <br> Type of allowed input objects include - Line, linear edge, Face,
            Datum Plane, Datum Axis.  <br>     
             <br> The end point qualifier is used for lines and linear edges to determine
            the direction of the vector along the line.  For other input types the
            qualifier is ignored. <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditAngle
        (
            const NXString & name /** Embedded angle measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::MeasureManager::EndpointType qualifier1 /** first end point qualifier */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::MeasureManager::EndpointType qualifier2 /** second end point qualifier */,
            bool minorAngle /** selects minimum arc */
        );
        /** Edit an embedded angle measurement between two objects.
             <br> Type of allowed input objects include - Line, linear edge, Face,
            Datum Plane, Datum Axis.  <br>     
             <br> The end point qualifier is used for lines and linear edges to determine
            the direction of the vector along the line.  For other input types the
            qualifier is ignored. <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditAngle
        (
            const char * name /** Embedded angle measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::MeasureManager::EndpointType qualifier1 /** first end point qualifier */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::MeasureManager::EndpointType qualifier2 /** second end point qualifier */,
            bool minorAngle /** selects minimum arc */
        );
        /** Edit an embedded angle measurement between two objects.
             <br> Type of allowed input objects include - Line, linear edge, Face,
            Datum Plane, Datum Axis.  <br>     
             <br> The end point qualifier is used for lines and linear edges to determine
            the direction of the vector along the line.  For other input types the
            qualifier is ignored. <br> 
             <br> When true angle is set the method of calculation for face to face and face to line
            angle is changed to compute the true angle instead of using the face normals <br> 
            
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditAngle
        (
            const NXString & name /** Embedded angle measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::MeasureManager::EndpointType qualifier1 /** first end point qualifier */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::MeasureManager::EndpointType qualifier2 /** second end point qualifier */,
            bool minorAngle /** selects minimum arc */,
            bool trueAngle /** selects the algorithm for angle calculation */
        );
        /** Edit an embedded angle measurement between two objects.
             <br> Type of allowed input objects include - Line, linear edge, Face,
            Datum Plane, Datum Axis.  <br>     
             <br> The end point qualifier is used for lines and linear edges to determine
            the direction of the vector along the line.  For other input types the
            qualifier is ignored. <br> 
             <br> When true angle is set the method of calculation for face to face and face to line
            angle is changed to compute the true angle instead of using the face normals <br> 
            
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditAngle
        (
            const char * name /** Embedded angle measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::MeasureManager::EndpointType qualifier1 /** first end point qualifier */,
            NXOpen::DisplayableObject * object2 /** Second object */,
            NXOpen::MeasureManager::EndpointType qualifier2 /** second end point qualifier */,
            bool minorAngle /** selects minimum arc */,
            bool trueAngle /** selects the algorithm for angle calculation */
        );
        /** Edit an embedded angle measurement between three points.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditAngle
        (
            const NXString & name /** Embedded angle measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Point * basePoint /** Base point */,
            NXOpen::Point * endPoint1 /** End point 1 */,
            NXOpen::Point * endPoint2 /** End point 2 */,
            bool minorAngle /** selects minimum arc */
        );
        /** Edit an embedded angle measurement between three points.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditAngle
        (
            const char * name /** Embedded angle measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Point * basePoint /** Base point */,
            NXOpen::Point * endPoint1 /** End point 1 */,
            NXOpen::Point * endPoint2 /** End point 2 */,
            bool minorAngle /** selects minimum arc */
        );
        /** Initialize an angle measurement from a feature.
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureAngle * InitializeAngle
        (
            NXOpen::Measure * feature /** Measurement feature to edit */
        );
        /** Creates a face properties measurement object from a selection intent collector.
             <br> Face properties allow for measurement of the perimeter and area of a set of faces. <br> 
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureFaces * NewFaceProperties
        (
            NXOpen::Unit * areaUnit /** Area unit */,
            NXOpen::Unit * lengthUnit /** Length unit for perimeter */,
            double accuracy /** accuracy tolerance for calculations */,
            NXOpen::ScCollector * objects /** Collection of faces */
        );
        /** Creates a face properties measurement object from the list of input faces.
             <br> Face properties allow for measurement of the perimeter and area of a set of faces. <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureFaces * NewFaceProperties
        (
            NXOpen::Unit * areaUnit /** Area unit */,
            NXOpen::Unit * lengthUnit /** Length unit for perimeter */,
            double accuracy /** accuracy tolerance for calculations */,
            const std::vector<NXOpen::IParameterizedSurface *> & objects /** Array of faces */
        );
        /** Edit the objects of a face property measure using selection intent.
             <br>  <br> 
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditFaceProperties
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::ScCollector * objects /** Collection of faces */
        );
        /** Edit the objects of a face property measure.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditFaceProperties
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            const std::vector<NXOpen::IParameterizedSurface *> & objects /** Array of faces */
        );
        /** Edit the objects of an embedded face measure using selection intent
             <br>  <br> 
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditFaceProperties
        (
            const NXString & name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::ScCollector * objects /** Collection of faces */
        );
        /** Edit the objects of an embedded face measure using selection intent
             <br>  <br> 
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditFaceProperties
        (
            const char * name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::ScCollector * objects /** Collection of faces */
        );
        /** Edit the objects of an embedded face measure.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditFaceProperties
        (
            const NXString & name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<NXOpen::IParameterizedSurface *> & objects /** Array of faces */
        );
        /** Edit the objects of an embedded face measure.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditFaceProperties
        (
            const char * name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<NXOpen::IParameterizedSurface *> & objects /** Array of faces */
        );
        /** Initialize a face property measurement from a feature.
             <br>  <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureFaces * InitializeFaceProperties
        (
            NXOpen::Measure * feature /** face property measurement feature */
        );
        /** Creates a mass properties measurement object from a selection intent collection.
             <br> Mass properties allow for measurement of the area, volume, mass, 
            radius of gyration, weight and centroid of a set of solid bodies.  This function does
            not allow sheet bodies as a valid input.  A typical accuracy value
            would be 0.99, and a value of 0.999 might be used for a more compute intensive and accurate
            measurement.   <br>     
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureBodies * NewMassProperties
        (
            const std::vector<NXOpen::Unit *> & massUnits /** An array of input units:
                      Area unit, Volume unit, Mass unit, Length unit, Weight unit */,
            double accuracy /** The accuracy of the calculation (between 0.0 and 1.0) */,
            NXOpen::ScCollector * objects /** Collection of solid bodies */
        );
        /** Creates a mass properties measurement object from the list of input solid bodies.
             <br> Mass properties allow for measurement of the area, volume, mass, 
            radius of gyration, weight and centroid of a set of solid bodies. This function does
            not allow sheet bodies as a valid input. A typical accuracy value
            would be 0.99, and a value of 0.999 might be used for a more compute intensive and accurate
            measurement.   <br>     
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureBodies * NewMassProperties
        (
            const std::vector<NXOpen::Unit *> & massUnits /** An array of input units:
                      Area unit, Volume unit, Mass unit, Length unit, Weight unit */,
            double accuracy /** The accuracy of the calculation (between 0.0 and 1.0) */,
            const std::vector<NXOpen::IBody *> & objects /** Array of solid bodies */
        );
        /** Creates a mass properties measurement object from a selection collection of solid bodies.
             <br> Mass properties allow for measurement of the area, volume, mass, 
            radius of gyration, weight and centroid of a set of solid bodies. This function does
            not allow sheet bodies as a valid input.  The 11 tolerances are
            0   - Relative tolerance for area
            1   - Relative tolerance for volume,
            2-4 - Relative tolerances for First Moments (centroidal)
            5-7 - Relative tolerances for Moments of Inertia (centroidal)
            8-10 - Relative tolerances for Products of Inertia (centroidal) <br> 
             @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureBodies * NewMassProperties
        (
            const std::vector<NXOpen::Unit *> & massUnits /** An array of input units:
                      Area unit, Volume unit, Mass unit, Length unit, Weight unit */,
            const std::vector<double> & tolerances /** An array of tolerance values */,
            NXOpen::ScCollector * objects /** Collection of solid bodies */
        );
        /** Creates a mass properties measurement object from the list of input solid bodies.
             <br> Mass properties allow for measurement of the area, volume, mass, 
            radius of gyration, weight and centroid of a set of bodies.  This function does
            not allow sheet bodies as a valid input. The 11 tolerances are
            0   - Relative tolerance for area
            1   - Relative tolerance for volume,
            2-4 - Relative tolerances for First Moments (centroidal)
            5-7 - Relative tolerances for Moments of Inertia (centroidal)
            8-10 - Relative tolerances for Products of Inertia (centroidal) <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureBodies * NewMassProperties
        (
            const std::vector<NXOpen::Unit *> & massUnits /** An array of input units:
                      Area unit, Volume unit, Mass unit, Length unit, Weight unit */,
            const std::vector<double> & tolerances /** An array of tolerance values */,
            const std::vector<NXOpen::IBody *> & objects /** Array of solid bodies */
        );
        /** Edit the objects in a mass property measurement feature using a selection intent collection
             <br>  <br> 
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditMassProperties
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            NXOpen::ScCollector * objects /** Collection of solid bodies */
        );
        /** Edit the objects in a mass property measurement feature
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditMassProperties
        (
            NXOpen::Measure * feature /** Measurement feature to edit */,
            const std::vector<NXOpen::IBody *> & objects /** Array of solid bodies */
        );
        /** Edit the objects in an embedded mass property measure with a selection collector.
             <br>  <br> 
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditMassProperties
        (
            const NXString & name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::ScCollector * objects /** Collection of solid bodies */
        );
        /** Edit the objects in an embedded mass property measure with a selection collector.
             <br>  <br> 
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditMassProperties
        (
            const char * name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::ScCollector * objects /** Collection of solid bodies */
        );
        /** Edit the objects in an embedded mass property measure.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void EditMassProperties
        (
            const NXString & name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<NXOpen::IBody *> & objects /** Array of solid bodies */
        );
        /** Edit the objects in an embedded mass property measure.
             <br>  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void EditMassProperties
        (
            const char * name /** Embedded length measurement to edit   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<NXOpen::IBody *> & objects /** Array of solid bodies */
        );
        /** Initialize a mass property measurement from a feature.
             <br>  <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureBodies * InitializeMassProperties
        (
            NXOpen::Measure * feature /** Mass property measurement feature */
        );
        /** Creates a @link MeasureDistanceBuilder MeasureDistanceBuilder@endlink  
             Note:  This class is used internally for measurement, but is not required for creation 
            of a distance measurement. @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::MeasureDistanceBuilder * CreateMeasureDistanceBuilder
        (
            NXOpen::NXObject * feature /** feature */ 
        );
        /** Creates a @link MeasureAngleBuilder MeasureAngleBuilder@endlink  
             Note:  This class is used internally for measurement, but is not required for creation 
            of an angle measurement.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::MeasureAngleBuilder * CreateMeasureAngleBuilder
        (
            NXOpen::NXObject * feature /** feature */ 
        );
        /** Creates a @link MeasureFaceBuilder MeasureFaceBuilder@endlink 
            Note:  This class is used internally for measurement, but is not required for creation 
            of a face measurement.  To create face measurements use @link NewFaceProperties NewFaceProperties@endlink .  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::MeasureFaceBuilder * CreateMeasureFaceBuilder
        (
            NXOpen::NXObject * feature /** feature */ 
        );
        /** Creates a @link MeasureBodyBuilder MeasureBodyBuilder@endlink 
            Note:  This class is used internally for measurement, but is not required for creation 
            of a face measurement.  To create face measurements use @link NewMassProperties NewMassProperties@endlink .  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::MeasureBodyBuilder * CreateMeasureBodyBuilder
        (
            NXOpen::NXObject * feature /** feature */ 
        );
        /** Creates a points on curves arc length object for all the selected objects.
             <br> Type of allowed input objects are two points  <br> 
             @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureLength * NewPointsOnCurvesLength
        (
            NXOpen::Unit * units /** Measurement units */,
            const std::vector<NXOpen::Point *> & objects /** Array of curves and edges */
        );
        /** Creates a @link Routing::RoutingMeasureDistanceBuilder Routing::RoutingMeasureDistanceBuilder@endlink   @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Routing::RoutingMeasureDistanceBuilder * CreateRoutingMeasureDistanceBuilder
        (
            NXOpen::NXObject * feature /** feature */ 
        );
        /** Creates a routing path length object for all the input objects.
                 <br> Type of allowed input objects are @link Routing::ISegment Routing::ISegment@endlink s and
                @link Assemblies::Component Assemblies::Component@endlink s. <br> 
             @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureLength * NewRoutingPathLength
        (
            NXOpen::Unit * units /** Measurement units */,
            const std::vector<NXOpen::NXObject *> & objects /** Array of curves and edges */
        );
        /** Creates a @link Routing::RoutingMeasureDistanceBuilder Routing::RoutingMeasureDistanceBuilder@endlink 
              <br> It inherits the properties from @link  MeasureDistanceBuilder   MeasureDistanceBuilder @endlink  and destroys it. <br>  
              @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Routing::RoutingMeasureDistanceBuilder * CreateRoutingMeasureDistanceBuilder
        (
            NXOpen::NXObject * feature /** feature */ ,
            NXOpen::MeasureDistanceBuilder * measureDistanceBuilder /** measuredistancebuilder */ 
        );
        /** Creates an extreme polar radius measurement from the collection of input curves.
             <br> Extreme polar radius allow for measurement of the minimum or maximum radius from
            a point to a set of planar objects. <br>     
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasurePolarRadius * NewPolarRadius
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::MeasureManager::MeasureType minMaxFlag /** chooses minimum or maximum radius */,
            NXOpen::Point * point /** point */ ,
            NXOpen::ScCollector * objects /** curves and edges */
        );
        /** Edit a polar radius measurement feature.
             <br>  <br> 
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void EditPolarRadius
        (
            NXOpen::Measure * feature /** polar radius measurement feature */,
            NXOpen::MeasureManager::MeasureType minMaxFlag /** chooses minimum or maximum radius */,
            NXOpen::Point * point /** point */ ,
            NXOpen::ScCollector * objects /** curves and edges */
        );
        /** Initialize a polar radius measurement from a feature.
             <br>  <br> 
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasurePolarRadius * InitializePolarRadius
        (
            NXOpen::Measure * feature /** polar radius measurement feature */
        );
        /** Creates an extreme polar angle measurement from the collection of input curves.
             <br> Extreme polar radius allow for measurement of the minimum or maximum ange from
            a point to a set of planar objects using a reference vector. <br>     
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasurePolarAngle * NewPolarAngle
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::MeasureManager::MeasureType minMaxFlag /** chooses minimum or maximum radius */,
            NXOpen::Point * point /** reference point */,
            NXOpen::Direction * vector /** reference direction */,
            NXOpen::ScCollector * objects /** curves and edges */
        );
        /** Edit a polar angle measurement feature.
             <br>  <br> 
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void EditPolarAngle
        (
            NXOpen::Measure * feature /** polar angle measurement feature */,
            NXOpen::MeasureManager::MeasureType minMaxFlag /** chooses minimum or maximum radius */,
            NXOpen::Point * point /** point */ ,
            NXOpen::Direction * vector /** reference direction */,
            NXOpen::ScCollector * objects /** curves and edges */
        );
        /** Initialize a polar angle measurement from a feature.
             <br>  <br> 
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasurePolarAngle * InitializePolarAngle
        (
            NXOpen::Measure * feature /** polar angle measurement feature */
        );
        /** Creates an extreme polar area measurement from the collection of input curves.
             <br> Extreme polar area allow for measurement the circumscribed circle for
            a set of planar objects. <br>     
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasurePolarArea * NewPolarArea
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::ScCollector * objects /** curves and edges */,
            bool createExpressions /** create point coordinate expressions */
        );
        /** Edit a polar area measurement feature.
             <br>  <br> 
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void EditPolarArea
        (
            NXOpen::Measure * feature /** polar area measurement feature */,
            NXOpen::ScCollector * objects /** curves and edges */
        );
        /** Initialize a polar area measurement from a feature.
             <br>  <br> 
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasurePolarArea * InitializePolarArea
        (
            NXOpen::Measure * feature /** polar area measurement feature */
        );
        /** Creates an extreme rectangular point measurement from the collection of input entities.
             <br> Extreme rectangular point measurement for finding the maximum extent point given a set of
            objects and one to three direction vectors. <br>     
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureRectangularExtreme * NewRectangularExtreme
        (
            NXOpen::Unit * units /** Measurement units */,
            NXOpen::Direction * vector1 /** Primary direction */,
            NXOpen::Direction * vector2 /** Seconday direction */,
            NXOpen::Direction * vector3 /** Tertiary direction */,
            NXOpen::ScCollector * objects /** Bodies, faces, curves and edges */,
            bool createExpressions /** create point coordinate expressions */
        );
        /** Edit a rectangular extreme point measurement feature.
             <br>  <br> 
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void EditRectangularExtreme
        (
            NXOpen::Measure * feature /** rectangular extreme measurement feature */,
            NXOpen::Direction * vector1 /** Primary direction */,
            NXOpen::Direction * vector2 /** Seconday direction */,
            NXOpen::Direction * vector3 /** Tertiary direction */,
            NXOpen::ScCollector * objects /** bodies, faces, curves and edges */
        );
        /** Initialize a rectangular extreme point measurement from a feature.
             <br>  <br> 
             @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureRectangularExtreme * InitializeRectangularExtreme
        (
            NXOpen::Measure * feature /** rectangular extreme measurement feature */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
