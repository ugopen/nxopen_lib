#ifndef NXOpen_CAE_OPTIMIZATION_TBSDESIGNRESPONSEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_OPTIMIZATION_TBSDESIGNRESPONSEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Optimization_TBSDesignResponseBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Optimization_TBSBaseDesignVariableBuilder.hxx>
#include <NXOpen/CAE_Optimization_TBSDesignResponseBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Optimization
        {
            class TBSDesignResponseBuilder;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSBaseDesignVariableBuilder;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class _TBSDesignResponseBuilderBuilder;
            class TBSDesignResponseBuilderImpl;
            /** Represents the builder of @link CAE::Optimization::TBSDesignResponse CAE::Optimization::TBSDesignResponse@endlink  <br> To create a new instance of this class, use @link CAE::Optimization::TBSOptimizationManager::CreateDesignResponseBuilder  CAE::Optimization::TBSOptimizationManager::CreateDesignResponseBuilder @endlink  <br> 
             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  TBSDesignResponseBuilder : public CAE::Optimization::TBSBaseDesignVariableBuilder
            {
                /** Defines the design response type */
                public: enum Response
                {
                    ResponseDynamicFrequency/** Eigenfrequency from modal analysis */,
                    ResponseDynamicFrequencyKressissel/** Eigenfrequency calculated with Kreisselmaier-Steinhauser formula*/,
                    ResponseVolume/** Volume of element */,
                    ResponseVolumeFill/** Volume of element */,
                    ResponseWeight/** Weight of element */,
                    ResponseDisplacementAbsolute/** Absolute nodal displacement */,
                    ResponseDisplacementX/** Nodal displacement in X-direction */,
                    ResponseDisplacementY/** Nodal displacement in Y-direction */,
                    ResponseDisplacementZ/** Nodal displacement in Z-direction*/,
                    ResponseDisplacementXAbsolute/** Absolute nodal displacement in X-direction */,
                    ResponseDisplacementYAbsolute/** Absolute nodal displacement in Y-direction */,
                    ResponseDisplacementZAbsolute/** Absolute nodal displacement in Z-directionm */,
                    ResponseRotationAbsolute/** Absolute rotation */,
                    ResponseRotationX/** Nodal rotation around X-axis */,
                    ResponseRotationY/** Nodal rotation around Y-axis */,
                    ResponseRotationZ/** Nodal rotation around Z-axis*/,
                    ResponseRotationXAbsolute/** Absolute nodal rotation around X-axis */,
                    ResponseRotationYAbsolute/** Absolute nodal rotation around Y-axis */,
                    ResponseRotationZAbsolute/** Absolute nodal rotation around Z-axis */,
                    ResponseStrainEnergy/** Strain energy */,
                    ResponseCenterGravityX/** Center of gravity for the X-direction */,
                    ResponseCenterGravityY/** Center of gravity for the Y-direction */,
                    ResponseCenterGravityZ/** Center of gravity for the Z-direction */,
                    ResponseInertiaXx/** Moment of inertia around X-X-direction */,
                    ResponseInertiaXy/** Moment of inertia around X-Y-direction  */,
                    ResponseInertiaXz/** Moment of inertia around X-Z-direction  */,
                    ResponseInertiaYy/** Moment of inertia around Y-Y-direction  */,
                    ResponseInertiaYz/** Moment of inertia around Y-Z-direction  */,
                    ResponseInertiaZz/** Moment of inertia around Z-Z-direction  */,
                    ResponseReactionForceAbsolute/** Absolute nodal reaction force */,
                    ResponseReactionForceX/** Nodal reaction force in X-direction */,
                    ResponseReactionForceY/** Nodal reaction force in Y-direction */,
                    ResponseReactionForceZ/** Nodal reaction force in Z-direction */,
                    ResponseReactionForceXAbsolute/** Absolute nodal reaction force in X-direction */,
                    ResponseReactionForceYAbsolute/** Absolute nodal reaction force in Y-direction */,
                    ResponseReactionForceZAbsolute/** Absolute nodal reaction force in Z-direction */,
                    ResponseReactionForceRotationAbsolute/** Absolute nodal reaction moment */,
                    ResponseReactionForceRotationX/** Nodal reaction moment around X-axis */,
                    ResponseReactionForceRotationY/** Nodal reaction moment around Y-axis */,
                    ResponseReactionForceRotationZ/** Nodal reaction moment around Z-axis */,
                    ResponseReactionForceRotationXAbsolute/** Absolute nodal reaction moment around X-axis */,
                    ResponseReactionForceRotationYAbsolute/** Absolute nodal reaction moment around Y-axis */,
                    ResponseReactionForceRotationZAbsolute/** Absolute nodal reaction moment around Z-axis */,
                    ResponseInternalForceAbsolute/** Absolute nodal internal force */,
                    ResponseInternalForceX/** Nodal internal force in X-direction */,
                    ResponseInternalForceY/** Nodal internal force in Y-direction */,
                    ResponseInternalForceZ/** Nodal internal force in Z-direction */,
                    ResponseInternalForceXAbsolute/** Absolute nodal internal force in X-direction */,
                    ResponseInternalForceYAbsolute/** Absolute nodal internal force in Y-direction */,
                    ResponseInternalForceZAbsolute/** Absolute nodal internal force in Z-direction */,
                    ResponseInternalForceRotationAbsolute/** Absolute nodal internal moment */,
                    ResponseInternalForceRotationX/** Nodal internal moment around X-axis */,
                    ResponseInternalForceRotationY/** Nodal internal moment around Y-axis */,
                    ResponseInternalForceRotationZ/** Nodal internal moment around Z-axis */,
                    ResponseInternalForceRotationXAbsolute/** Absolute nodal internal moment around X-axis */,
                    ResponseInternalForceRotationYAbsolute/** Absolute nodal internal moment around Y-axis */,
                    ResponseInternalForceRotationZAbsolute/** Absolute nodal internal moment around Z-axis */,
                    ResponseFrequencyResponseAccelerationX/** Acceleration in X-direction for frequency response */,
                    ResponseFrequencyResponseAccelerationY/** Acceleration in Y-direction for frequency response */,
                    ResponseFrequencyResponseAccelerationZ/** Acceleration in Z-direction for frequency response */,
                    ResponseFrequencyResponseCompliance/** Dynamic compliance for frequency response */,
                    ResponseFrequencyResponseDbaPressure/** Sound pressure level (dBA) */,
                    ResponseFrequencyResponseDbPressure/** Sound pressure level (dB) */,
                    ResponseFrequencyResponseDisplacementAbsolute/** Absolute amplitude for frequency response */,
                    ResponseFrequencyResponseDisplacementXAbsolute/** Amplitude in X-direction for frequency response */,
                    ResponseFrequencyResponseDisplacementYAbsolute/** Amplitude in Y-direction for frequency respons */,
                    ResponseFrequencyResponseDisplacementZAbsolute/** Amplitude in Z-direction for frequency respons */,
                    ResponseFrequencyResponsePhaseXAbsolute/** Phase in X-direction for frequency response */,
                    ResponseFrequencyResponsePhaseYAbsolute/** Phase in Y-direction for frequency response */,
                    ResponseFrequencyResponsePhaseZAbsolute/** Phase in Z-direction for frequency response */,
                    ResponseFrequencyResponsePressure/** Instantaneous sound pressure */,
                    ResponseFrequencyResponseRmsPressure/** Effective sound pressure */,
                    ResponseFrequencyResponseVelocityXAbsolute/** Velocity in X-direction for frequecy response */,
                    ResponseFrequencyResponseVelocityYAbsolute/** Velocity in Y-direction for frequecy response */,
                    ResponseFrequencyResponseVelocityZAbsolute/** Velocity in Z-direction for frequecy response */,
                    ResponseFrequencyResponseNvhSolid/** Surface normal velocity equivalent. Referenced node group, must be on solid elements */,
                    ResponseFrequencyResponseNvhShell/** Surface normal velocity equivalent. Referenced node group, must be on plate or shell elements */,
                    ResponseMisesStressHypothesis/** Mises Stress hypothesis*/,
                    ResponseMaximumPrincipalStress/** Maximum principal Stress */,
                    ResponseMinimumAbsolutePrincipalStress/** Absolute value of the minimum principal Stress */,
                    ResponseMaximumAbsolutePrincipalStress/** Maximum of absolute value of the principal stress */
                };

                private: TBSDesignResponseBuilderImpl * m_tbsdesignresponsebuilder_impl;
                private: friend class  _TBSDesignResponseBuilderBuilder;
                protected: TBSDesignResponseBuilder();
                public: ~TBSDesignResponseBuilder();
                /**Returns  the varialbe type 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSDesignResponseBuilder::Response VariableType
                (
                );
                /**Sets  the varialbe type 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetVariableType
                (
                    NXOpen::CAE::Optimization::TBSDesignResponseBuilder::Response categoryOption /** categoryoption */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
