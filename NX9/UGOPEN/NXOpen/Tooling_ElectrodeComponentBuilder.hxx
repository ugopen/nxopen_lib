#ifndef NXOpen_TOOLING_ELECTRODECOMPONENTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_ELECTRODECOMPONENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ElectrodeComponentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_ElectrodeComponentBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ElectrodeComponentBuilder;
    }
    namespace Assemblies
    {
        class SelectComponent;
    }
    class Builder;
    class NXObject;
    class SelectFace;
    namespace Tooling
    {
        class _ElectrodeComponentBuilderBuilder;
        class ElectrodeComponentBuilderImpl;
        /** Electrode component builder to install holder and pallet.  <br> To create a new instance of this class, use @link Tooling::ElectrodeDesignCollection::CreateComponentBuilder  Tooling::ElectrodeDesignCollection::CreateComponentBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ReferPart </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Rename </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ElectrodeComponentBuilder : public Builder
        {
            /** Represents the electrode chuck type. */
            public: enum Chuck
            {
                ChuckUnknown = -1/** unknown */ ,
                ChuckHolder/** holder */ ,
                ChuckPallet/** pallet */ 
            };

            private: ElectrodeComponentBuilderImpl * m_electrodecomponentbuilder_impl;
            private: friend class  _ElectrodeComponentBuilderBuilder;
            protected: ElectrodeComponentBuilder();
            public: ~ElectrodeComponentBuilder();
            /**Returns  the part which is an electrode fixture to be edited. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponent * Fixture
            (
            );
            /**Returns  the part which is the assembly parent to install an electrode chuck. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponent * Parent
            (
            );
            /**Returns  the face whose center will be the origin of the machine set csys. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * Face
            (
            );
            /**Returns  the option to install a chuck by referring to the template part directly or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReferPart
            (
            );
            /**Sets  the option to install a chuck by referring to the template part directly or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetReferPart
            (
                bool referPart /** referpart */ 
            );
            /**Returns  the option to use the part name management dialog box or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool Rename
            (
            );
            /**Sets  the option to use the part name management dialog box or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRename
            (
                bool rename /** rename */ 
            );
            /**Returns  the electrode chuck type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ElectrodeComponentBuilder::Chuck ChuckType
            (
            );
            /**Sets  the electrode chuck type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetChuckType
            (
                NXOpen::Tooling::ElectrodeComponentBuilder::Chuck chuck /** chuck */ 
            );
            /**Returns  the electrode standard part to be installed. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StandardPart
            (
            );
            /**Sets  the electrode standard part to be installed. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetStandardPart
            (
                const NXString & standardPart /** standardpart */ 
            );
            /**Sets  the electrode standard part to be installed. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            void SetStandardPart
            (
                const char * standardPart /** standardpart */ 
            );
            /**Returns  the electrode standard data spraedsheet. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StandardData
            (
            );
            /**Sets  the electrode standard data spraedsheet. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetStandardData
            (
                const NXString & standardData /** standarddata */ 
            );
            /**Sets  the electrode standard data spraedsheet. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            void SetStandardData
            (
                const char * standardData /** standarddata */ 
            );
            /**Returns  the current machine set CSYS. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * MateCsys
            (
            );
            /**Sets  the current machine set CSYS. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetMateCsys
            (
                NXOpen::NXObject * csys /** csys */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
