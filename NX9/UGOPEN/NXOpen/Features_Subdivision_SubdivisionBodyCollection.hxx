#ifndef NXOpen_FEATURES_SUBDIVISION_SUBDIVISIONBODYCOLLECTION_HXX_INCLUDED
#define NXOpen_FEATURES_SUBDIVISION_SUBDIVISIONBODYCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_Subdivision_SubdivisionBodyCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/Features_Subdivision_StartSymmetricModelingBuilder.hxx>
#include <NXOpen/Features_Subdivision_SubdivisionBridgeFaceBuilder.hxx>
#include <NXOpen/Features_Subdivision_SubdivisionDeleteFaceBuilder.hxx>
#include <NXOpen/Features_Subdivision_SubdivisionExtrudeCageBuilder.hxx>
#include <NXOpen/Features_Subdivision_SubdivisionFillBuilder.hxx>
#include <NXOpen/Features_Subdivision_SubdivisionMergeFaceBuilder.hxx>
#include <NXOpen/Features_Subdivision_SubdivisionPrimitiveShapeBuilder.hxx>
#include <NXOpen/Features_Subdivision_SubdivisionProjectCageBuilder.hxx>
#include <NXOpen/Features_Subdivision_SubdivisionSetContinuityBuilder.hxx>
#include <NXOpen/Features_Subdivision_SubdivisionSetWeightBuilder.hxx>
#include <NXOpen/Features_Subdivision_SubdivisionSplitFaceBuilder.hxx>
#include <NXOpen/Features_Subdivision_SubdivisionSubdivideFaceBuilder.hxx>
#include <NXOpen/Features_Subdivision_TransformCageData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionBodyCollection;
        }
    }
    class Part;
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionBody;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class StartSymmetricModelingBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionBridgeFaceBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionDeleteFaceBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionExtrudeCageBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionFillBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionMergeFaceBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionPrimitiveShapeBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionProjectCageBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionSetContinuityBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionSetWeightBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionSplitFaceBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionSubdivideFaceBuilder;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class TransformCageData;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SubdivisionBodyCollectionImpl;
            /** Represents a collection of subdivision body feature tools.  <br> To obtain an instance of this class, refer to @link Part  Part @endlink  <br> 
             <br>  Created in NX9.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  SubdivisionBodyCollection : public TaggedObjectCollection
            {
                private: SubdivisionBodyCollectionImpl * m_subdivisionbodycollection_impl;
                private: NXOpen::Part* m_owner;
                /// \cond NX_NO_DOC 
                public: explicit SubdivisionBodyCollection(NXOpen::Part *owner);


                /// \endcond 
                public: 
                /**Returns the tag of this object.  */
                tag_t Tag() const; 
                public: ~SubdivisionBodyCollection();
                /** Iterator for accessing the contents of the collection. */
                //lint -sem(NXOpen::Features::Subdivision::SubdivisionBodyCollection::iterator::copy,initializer)
                class iterator
                {
                public:
                    /** Value type associated with iterator*/ 

                    typedef Features::Subdivision::SubdivisionBody * value_type;
                    /** Default constructor */
                    iterator() : m_context(NULL), m_current(NULL_TAG)
                    { // coverity[uninit_member]
                    } //lint !e1401 m_state is not initialized
                    /// \cond NX_NO_DOC
                    explicit iterator(NXOpen::Features::Subdivision::SubdivisionBodyCollection *context) : m_context(context), m_current(NULL_TAG)
                    { // coverity[uninit_member]
                    }//lint !e1401 m_state is not initialized
                    /// \endcond
                    /** Copy constructor */
                    iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                    {
                        copy(other);
                    }
                    /** Copy constructor */
                    iterator &operator =(const iterator &other)
                    {
                        if (&other != this)
                            copy(other);
                        return *this;
                    }
                    /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                    bool operator ==(const iterator &other) const
                    {
                        return m_current == other.m_current && m_context == other.m_context;
                    }
                    /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                    bool operator !=(const iterator &other) const
                    {
                        return !operator == (other);
                    }
                    /** Return the element currently pointed to by the iterator. */
                    NXOPENCPP_FEATURESEXPORT  value_type operator * ();
                    /** Points the iterator to next element. */
                    iterator & operator ++()
                    {
                        next();
                        return *this;
                    }
                    /** Points the iterator to next element. */
                    iterator operator ++(int)
                    {
                        iterator tmp(*this);
                        ++*this;
                        return tmp;
                    }
                private:
                    void copy(const iterator &other)
                    {
                        m_context = other.m_context;
                        m_current = other.m_current;
                        for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                             m_state[i] = other.m_state[i];
                    }
                    NXOPENCPP_FEATURESEXPORT  void next();
                    NXOpen::Features::Subdivision::SubdivisionBodyCollection *m_context;
                    tag_t m_current;
                    unsigned int m_state[8];
                };
                /** Returns an iterator addressing the first element. */
                iterator begin();
                /** Returns an iterator addressing one past the last element. */
                iterator end()
                {
                    return iterator(this);
                }
                /** Creates a @link Features::Subdivision::SubdivisionPrimitiveShapeBuilder Features::Subdivision::SubdivisionPrimitiveShapeBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::SubdivisionPrimitiveShapeBuilder * CreateSubdivisionPrimitiveShapeBuilder
                (
                );
                /** Creates a @link Features::Subdivision::SubdivisionExtrudeCageBuilder Features::Subdivision::SubdivisionExtrudeCageBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::SubdivisionExtrudeCageBuilder * CreateSubdivisionExtrudeCageBuilder
                (
                );
                /** Creates a @link Features::Subdivision::SubdivisionSetWeightBuilder Features::Subdivision::SubdivisionSetWeightBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::SubdivisionSetWeightBuilder * CreateSubdivisionSetWeightBuilder
                (
                );
                /** Creates a @link Features::Subdivision::SubdivisionSetContinuityBuilder Features::Subdivision::SubdivisionSetContinuityBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::SubdivisionSetContinuityBuilder * CreateSubdivisionSetContinuityBuilder
                (
                );
                /** Creates a @link Features::Subdivision::SubdivisionDeleteFaceBuilder Features::Subdivision::SubdivisionDeleteFaceBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::SubdivisionDeleteFaceBuilder * CreateSubdivisionDeleteFaceBuilder
                (
                );
                /** Creates a @link Features::Subdivision::TransformCageData Features::Subdivision::TransformCageData@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::TransformCageData * CreateTransformCageData
                (
                );
                /** Creates a @link Features::Subdivision::SubdivisionFillBuilder Features::Subdivision::SubdivisionFillBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::SubdivisionFillBuilder * CreateSubdivisionFillBuilder
                (
                );
                /** Creates a @link Features::Subdivision::SubdivisionBridgeFaceBuilder Features::Subdivision::SubdivisionBridgeFaceBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::SubdivisionBridgeFaceBuilder * CreateSubdivisionBridgeFaceBuilder
                (
                );
                /** Creates a @link Features::Subdivision::StartSymmetricModelingBuilder Features::Subdivision::StartSymmetricModelingBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::StartSymmetricModelingBuilder * CreateStartSymmetricModelingBuilder
                (
                );
                /** Stops the symmetric modeling. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void StopSymmetricModeling
                (
                );
                /** Creates a @link Features::Subdivision::SubdivisionProjectCageBuilder Features::Subdivision::SubdivisionProjectCageBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::SubdivisionProjectCageBuilder * CreateSubdivisionProjectCageBuilder
                (
                );
                /** Creates a @link Features::Subdivision::SubdivisionMergeFaceBuilder Features::Subdivision::SubdivisionMergeFaceBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::SubdivisionMergeFaceBuilder * CreateSubdivisionMergeFaceBuilder
                (
                );
                /** Creates a @link Features::Subdivision::SubdivisionSplitFaceBuilder Features::Subdivision::SubdivisionSplitFaceBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::SubdivisionSplitFaceBuilder * CreateSubdivisionSplitFaceBuilder
                (
                );
                /** Creates a @link Features::Subdivision::SubdivisionSubdivideFaceBuilder Features::Subdivision::SubdivisionSubdivideFaceBuilder@endlink .  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: NXOpen::Features::Subdivision::SubdivisionSubdivideFaceBuilder * CreateSubdivisionSubdivideFaceBuilder
                (
                );
            }; //lint !e1712 default constructor not defined for class  

        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
