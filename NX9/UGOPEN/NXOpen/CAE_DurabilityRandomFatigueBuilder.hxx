#ifndef NXOpen_CAE_DURABILITYRANDOMFATIGUEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DURABILITYRANDOMFATIGUEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurabilityRandomFatigueBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_DurabilityRandomFatigueBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DurabilityRandomFatigueBuilder;
    }
    class Builder;
    class Expression;
    namespace CAE
    {
        class _DurabilityRandomFatigueBuilderBuilder;
        class DurabilityRandomFatigueBuilderImpl;
        /** Represents a builder class for the event fatigue settings.
                The fatigue settings help the user control the fatigue/durability
                parameters in the event. <br> To create a new instance of this class, use @link CAE::DurabilityRandomFatigueCollection::CreateRandomfatigueBuilder  CAE::DurabilityRandomFatigueCollection::CreateRandomfatigueBuilder @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DurabilityRandomFatigueBuilder : public Builder
        {
            /** the random method. */
            public: enum RandomFatigueMethodEnum
            {
                RandomFatigueMethodEnumNarrowBandMiles/** NarrowBandMiles*/,
                RandomFatigueMethodEnumWideBandDirlik/** WideBandDirlik*/
            };

            private: DurabilityRandomFatigueBuilderImpl * m_durabilityrandomfatiguebuilder_impl;
            private: friend class  _DurabilityRandomFatigueBuilderBuilder;
            protected: DurabilityRandomFatigueBuilder();
            public: ~DurabilityRandomFatigueBuilder();
            /**Returns  the name. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetName
            (
                const NXString & title /** title */ 
            );
            /**Sets  the name. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            void SetName
            (
                const char * title /** title */ 
            );
            /**Returns  the random event duration. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RandomEventDuration
            (
            );
            /**Returns  the random fatigue method. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurabilityRandomFatigueBuilder::RandomFatigueMethodEnum RandomFatigueMethod
            (
            );
            /**Sets  the random fatigue method. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetRandomFatigueMethod
            (
                NXOpen::CAE::DurabilityRandomFatigueBuilder::RandomFatigueMethodEnum numberOfElementsInHysterisisLoop /** numberofelementsinhysterisisloop */ 
            );
            /**Returns  the event damage. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool EventDamage
            (
            );
            /**Sets  the event damage. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetEventDamage
            (
                bool eventDamage /** eventdamage */ 
            );
            /**Returns  the event life. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool EventLife
            (
            );
            /**Sets  the event life. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetEventLife
            (
                bool eventLife /** eventlife */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
