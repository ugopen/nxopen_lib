#ifndef NXOpen_PDM_PDMSESSION_HXX_INCLUDED
#define NXOpen_PDM_PDMSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_PdmSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PDM_CAEFileContainer.hxx>
#include <NXOpen/PDM_FileManagement.hxx>
#include <NXOpen/PDM_PartOperationBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class PdmSession;
    }
    class Session;
    namespace PDM
    {
        class AttributeGroupDescriptionCollection;
    }
    namespace PDM
    {
        class CAEFileContainer;
    }
    namespace PDM
    {
        class FileManagement;
    }
    namespace PDM
    {
        class PartOperationBuilder;
    }
    namespace PDM
    {
        class PdmSessionImpl;
        /** Represents the NX Manager session  <br> To obtain an instance of this class, refer to @link Session  Session @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  PdmSession
        {
            private: PdmSessionImpl * m_pdmsession_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PdmSession(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PdmSession();
            /**  Returns the connect string and discriminator used by NX session to connect to the Tcserver.
                         The client applications can use these settings to connect to the same Tcserver that NX
                         is using.
                         
                         Tcserver connect string: The connect string is path of the server hosting the services.
                         The connect string for the different transport protocols will be in the following form:
                         4-Tier(HTTP mode): similar to http:
                         2-Tier(IIOP mode): The Tcserver IOR string 
                         
                         Discriminator: The discriminator is a unique identifier and contains unique information related 
                         to a given TC server. This unique identifier (discriminator) is recognized by TC pool manager as
                         the session number that ties the server process to the client. The discriminator functionality 
                         is part of the SOA package. The discriminator allows multiple clients to connect to the same TC server.
                         In 2-Tier(IIOP mode), the discriminator will be an empty string.

                         To connect to the same Tcserver as NX, the client can create a Teamcenter::Soa::Client::Connection 
                         object using the connect string and then use the Teamcenter::Services::Core::SessionService to login
                         to Teamcenter Server with the discriminator and the connection object. More information about
                         connecting to the Teamcenter server can be found in the TC SOA API Documentation.

                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetTcserverSettings
            (
                NXString* connectString /** the connection string */,
                NXString* discriminator /** the discriminator */
            );
            /** Sets default folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultFolder
            (
                const NXString & defaultFolderSpec /** Default folder path including default folder name to be set */
            );
            /** Sets default folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetDefaultFolder
            (
                const char * defaultFolderSpec /** Default folder path including default folder name to be set */
            );
            /** Returns a new @link PDM::FileManagement PDM::FileManagement@endlink  object  @return  
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::FileManagement * NewFileManagement
            (
            );
            /** Returns a new @link PDM::CAEFileContainer PDM::CAEFileContainer@endlink  object  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::CAEFileContainer * NewCaeFileContainer
            (
            );
            /**Returns a new @link PDM::PartOperationBuilder PDM::PartOperationBuilder@endlink  object @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartOperationBuilder * CreateOperationBuilder
            (
                NXOpen::PDM::PartOperationBuilder::OperationType operation /** operation */ 
            );


            /** Returns a collection of @link PDM::AttributeGroupDescription PDM::AttributeGroupDescription@endlink  objects representing
                        attribute group types.  The collection contains attribute group descriptions for
                        @link PDM::IAttributeGroupOwner PDM::IAttributeGroupOwner@endlink  objects loaded within the NX session.
                        Use the @link PDM::IAttributeGroupOwner::GetAttributeGroupDescriptions PDM::IAttributeGroupOwner::GetAttributeGroupDescriptions@endlink 
                        to get the specific attribute group descriptions for an attribute group owner.  
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::PDM::AttributeGroupDescriptionCollection *AttributeGroupDescriptions();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
