#ifndef NXOpen_CAE_SOLVERAPPENDOPTION_HXX_INCLUDED
#define NXOpen_CAE_SOLVERAPPENDOPTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SolverAppendOption.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SolverAppendOption.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SolverAppendOption;
    }
    class NXObject;
    namespace CAE
    {
        class _SolverAppendOptionBuilder;
        class SolverAppendOptionImpl;
        /**  @brief  This class provides access to the append option setting for importing solver specific data into existing Fem/Sim  

           <br> Not support KF.  <br> 
         <br>  Created in NX7.5.2.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SolverAppendOption : public NXObject
        {
            /** Options to control how the imported input file is to be combined with the existing model */
            public: enum ImportBehaviorOption
            {
                ImportBehaviorOptionAppendModel/** append model */ ,
                ImportBehaviorOptionMergeWithExisting/** merge with existing */ 
            };

            /** Options to control if a solution is created during merge */
            public: enum SolutionOption
            {
                SolutionOptionDontCreate/** dont create */ ,
                SolutionOptionCreateNew/** create new */ 
            };

            /** Options to control how entities are merge with existing model */
            public: enum MergeOption
            {
                MergeOptionUseExisting/** use existing */ ,
                MergeOptionModifyExisting/** modify existing */ ,
                MergeOptionAppendNew/** append new */ 
            };

            private: SolverAppendOptionImpl * m_solverappendoption_impl;
            private: friend class  _SolverAppendOptionBuilder;
            protected: SolverAppendOption();
            public: ~SolverAppendOption();
            /**Returns  the solver name 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString SolverName
            (
            );
            /**Sets  the solver name 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSolverName
            (
                const NXString & solverName /** the solver name to indicate what type of data is being imported */
            );
            /**Sets  the solver name 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetSolverName
            (
                const char * solverName /** the solver name to indicate what type of data is being imported */
            );
            /**Returns  the append merge option 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAE::SolverAppendOption::ImportBehavior CAE::SolverAppendOption::ImportBehavior@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAE::SolverAppendOption::ImportBehavior instead.") bool DoAppendMerge
            (
            );
            /**Sets  the append merge option 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAE::SolverAppendOption::SetImportBehavior CAE::SolverAppendOption::SetImportBehavior@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAE::SolverAppendOption::SetImportBehavior instead.") void SetDoAppendMerge
            (
                bool doMerge /** true if new entities should be merged with existing model */
            );
            /**Returns the import behavior choice 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SolverAppendOption::ImportBehaviorOption ImportBehavior
            (
            );
            /**Sets the import behavior choice 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetImportBehavior
            (
                NXOpen::CAE::SolverAppendOption::ImportBehaviorOption behaviorOption /** how the input file should be imported */
            );
            /**Returns  the solution merge choice 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SolverAppendOption::SolutionOption SolutionMergeOption
            (
            );
            /**Sets  the solution merge choice 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSolutionMergeOption
            (
                NXOpen::CAE::SolverAppendOption::SolutionOption mergeChoice /** type of merging to perform for solutions */
            );
            /**Returns  the node merge choice 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SolverAppendOption::MergeOption NodeMergeOption
            (
            );
            /**Sets  the node merge choice 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNodeMergeOption
            (
                NXOpen::CAE::SolverAppendOption::MergeOption mergeChoice /** type of merging to perform for nodes */
            );
            /**Returns  the material merge choice 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SolverAppendOption::MergeOption MaterialMergeOption
            (
            );
            /**Sets  the material merge choice 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMaterialMergeOption
            (
                NXOpen::CAE::SolverAppendOption::MergeOption mergeChoice /** type of merging to perform for materials */
            );
            /**Returns  the physical property merge choice 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SolverAppendOption::MergeOption PptMergeOption
            (
            );
            /**Sets  the physical property merge choice 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPptMergeOption
            (
                NXOpen::CAE::SolverAppendOption::MergeOption mergeChoice /** type of merging to perform for ppts */
            );
            /** Gets the highest node label from the work Fem/Sim  @return  the highest node label 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetHighestNodeLabel
            (
            );
            /**Returns  the node offset 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int NodeOffset
            (
            );
            /**Sets  the node offset 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNodeOffset
            (
                int nodeOffset /** the node offset */
            );
            /** Gets the highest element label from the work Fem/Sim  @return  the highest element label 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetHighestElementLabel
            (
            );
            /**Returns  the element offset 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int ElementOffset
            (
            );
            /**Sets  the element offset 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetElementOffset
            (
                int elemOffset /** the element offset */
            );
            /** Gets the highest coordinate system label from the work Fem/Sim  @return  the highest coordinate system label 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetHighestCoordinateSystemLabel
            (
            );
            /**Returns  the coordinate system offset 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int CoordinateSystemOffset
            (
            );
            /**Sets  the coordinate system offset 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCoordinateSystemOffset
            (
                int csOffset /** the coordinate system offset */
            );
            /** Gets the highest physical property label from the work Fem/Sim  @return  the highest physical property label 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetHighestPhysicalPropertyLabel
            (
            );
            /**Returns  the physical property offset 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int PhysicalPropertyOffset
            (
            );
            /**Sets  the physical property offset 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPhysicalPropertyOffset
            (
                int physicalPropertyOffset /** the physical property offset */
            );
            /** Gets the highest label for all other entities from the work Fem/Sim  @return  the highest label for all other entities
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetHighestOthersLabel
            (
            );
            /**Returns  the offset for all other entities 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int OthersOffset
            (
            );
            /**Sets  the offset for all other entities 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetOthersOffset
            (
                int othersOffset /** the offset for all other entities */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
