#ifndef NXOpen_VALIDATE_PARSER_HXX_INCLUDED
#define NXOpen_VALIDATE_PARSER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_Parser.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class Parser;
    }
    class ErrorList;
    namespace Validate
    {
        class ResultObject;
    }
    namespace Validate
    {
        class _ParserBuilder;
        class ParserImpl;
        /**Represents a NX @link Validate::Parser Validate::Parser@endlink .
             <br> To create a new instance of this class, use @link Validate::ValidationManager::CreateParser  Validate::ValidationManager::CreateParser @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  Parser : public TaggedObject
        {
            /** The data source type of check result. */
            public: enum DataSourceTypes
            {
                DataSourceTypesMostRecentRun/** Result of most recent run */,
                DataSourceTypesResultFromPart/** Result from part */,
                DataSourceTypesResultFromTeamcenter/** Result from Teamcenter */,
                DataSourceTypesResultFromNXChecks/** Result from NX checks*/,
                DataSourceTypesResultFromLogFile/** Result from Log File */
            };

            private: ParserImpl * m_parser_impl;
            private: friend class  _ParserBuilder;
            protected: Parser();
            public: ~Parser();
            /** Runs parsing process 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void Commit
            (
            );
            /** Gets part result objects 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetPartResultObjects
            (
                std::vector<NXOpen::Validate::ResultObject *> & partResultObject /** partresultobject */ 
            );
            /** Gets profile result objects 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetProfileResultObjects
            (
                std::vector<NXOpen::Validate::ResultObject *> & profileResultObject /** profileresultobject */ 
            );
            /** Gets profile result objects from input object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetProfileResultObjects
            (
                NXOpen::Validate::ResultObject * resultObject /** resultobject */ ,
                std::vector<NXOpen::Validate::ResultObject *> & profileResultObject /** profileresultobject */ 
            );
            /** Gets test result objects 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetTestResultObjects
            (
                std::vector<NXOpen::Validate::ResultObject *> & testResultObject /** testresultobject */ 
            );
            /** Gets test result objects from input object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetTestResultObjects
            (
                NXOpen::Validate::ResultObject * resultObject /** resultobject */ ,
                std::vector<NXOpen::Validate::ResultObject *> & testResultObject /** testresultobject */ 
            );
            /** Gets entity set result objects from input object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetObjectSetResultObjects
            (
                NXOpen::Validate::ResultObject * resultObject /** resultobject */ ,
                std::vector<NXOpen::Validate::ResultObject *> & objectSetResultObject /** objectsetresultobject */ 
            );
            /** Gets entity result objects from input object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetObjectResultObjects
            (
                NXOpen::Validate::ResultObject * resultObject /** resultobject */ ,
                std::vector<NXOpen::Validate::ResultObject *> & objectResultObject /** objectresultobject */ 
            );
            /**Returns  the Max entity count to display of current module 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int MaxDisplayObjects
            (
            );
            /**Sets  the Max entity count to display of current module 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMaxDisplayObjects
            (
                int maxDisplayObjects /** maxdisplayobjects */ 
            );
            /**Returns  the result data source type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parser::DataSourceTypes DataSource
            (
            );
            /**Sets  the result data source type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDataSource
            (
                NXOpen::Validate::Parser::DataSourceTypes dataSource /** datasource */ 
            );
            /** Deletes result object, return error list  @return  List of errors encountered during the delete 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ErrorList * DeleteResultObject
            (
                NXOpen::Validate::ResultObject * resultObject /** resultobject */ 
            );
            /** Deletes result object, return error code  @return   
             <br>  Created in NX8.0.3.  <br>  
             <br> License requirements : None */
            public: int DeleteResult
            (
                NXOpen::Validate::ResultObject * resultObject /** resultobject */ 
            );
            /** Clears result objects 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void ClearResultObjects
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
