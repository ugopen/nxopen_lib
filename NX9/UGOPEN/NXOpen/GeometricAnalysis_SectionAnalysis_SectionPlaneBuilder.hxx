#ifndef NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONPLANEBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONPLANEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SectionAnalysis_SectionPlaneBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_SectionPlaneBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class SectionPlaneBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class _SectionPlaneBuilderBuilder;
            class SectionPlaneBuilderImpl;
            /** Represents a plane which is used to cut sections on faces or facet bodies 
             <br>  Created in NX7.0.0.  <br>  
            */
            class NXOPENCPP_GEOMETRICANALYSISEXPORT  SectionPlaneBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
            {
                /** The type of different section planes */
                public: enum PlaneType
                {
                    PlaneTypeXc/** XC plane */,
                    PlaneTypeYc/** YC plane */,
                    PlaneTypeZc/** ZC plane */,
                    PlaneTypeView/** View plane */,
                    PlaneTypePlane/** A user specifed plane */
                };

                private: SectionPlaneBuilderImpl * m_sectionplanebuilder_impl;
                private: friend class  _SectionPlaneBuilderBuilder;
                protected: SectionPlaneBuilder();
                public: ~SectionPlaneBuilder();
                /**Returns  the plane type 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionPlaneBuilder::PlaneType Plane
                (
                );
                /**Sets  the plane type 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetPlane
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionPlaneBuilder::PlaneType plane /** plane */ 
                );
                /**Returns  the plane origin 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point3d Origin
                (
                );
                /**Sets  the plane origin 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetOrigin
                (
                    const NXOpen::Point3d & origin /** origin */ 
                );
                /**Returns  the plane X axis 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Vector3d XAxis
                (
                );
                /**Sets  the plane X axis 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetXAxis
                (
                    const NXOpen::Vector3d & xAxis /** xaxis */ 
                );
                /**Returns  the plane Y axis 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Vector3d YAxis
                (
                );
                /**Sets  the plane Y axis 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetYAxis
                (
                    const NXOpen::Vector3d & yAxis /** yaxis */ 
                );
                /** Validate whether the inputs to the component are sufficient for 
                            commit to be called.  If the component is not in a state to commit
                            then an exception is thrown.  For example, if the component requires
                            you to set some property, this method will throw an exception if
                            you haven't set it.  This method throws a not-yet-implemented
                            NXException for some components.
                         @return  Was self validation successful 
                 <br>  Created in NX3.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual bool Validate
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
