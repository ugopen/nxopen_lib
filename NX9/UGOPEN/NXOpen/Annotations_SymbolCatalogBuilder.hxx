#ifndef NXOpen_ANNOTATIONS_SYMBOLCATALOGBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_SYMBOLCATALOGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_SymbolCatalogBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_SymbolCatalogBuilder.hxx>
#include <NXOpen/Annotations_SymbolCatalogParameterBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class SymbolCatalogBuilder;
    }
    namespace Annotations
    {
        class SymbolCatalogParameterBuilder;
    }
    namespace Annotations
    {
        class SymbolCatalogParameterBuilderList;
    }
    class Builder;
    namespace Annotations
    {
        class _SymbolCatalogBuilderBuilder;
        class SymbolCatalogBuilderImpl;
        /** 
                Represents a builder to instantiate a symbol from a parameterized family of standard 
                symbols defined in catalogs, eg. for standard fasteners.
             <br> To create a new instance of this class, use @link Annotations::CustomSymbolCollection::CreateSymbolCatalogBuilder  Annotations::CustomSymbolCollection::CreateSymbolCatalogBuilder @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  SymbolCatalogBuilder : public Builder
        {
            private: SymbolCatalogBuilderImpl * m_symbolcatalogbuilder_impl;
            private: friend class  _SymbolCatalogBuilderBuilder;
            protected: SymbolCatalogBuilder();
            public: ~SymbolCatalogBuilder();
            /**Returns  the node string of the fastener symbol,
                         NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NodeString
            (
            );
            /**Sets  the node string of the fastener symbol,
                         NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetNodeString
            (
                const NXString & nodeString /** nodestring */ 
            );
            /**Sets  the node string of the fastener symbol,
                         NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            void SetNodeString
            (
                const char * nodeString /** nodestring */ 
            );
            /**Returns  the list containing the parameters used to create the symbol.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SymbolCatalogParameterBuilderList * ParameterList
            (
            );
            /**Returns  the JA method support for accessing and setting Symbol Name value,
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SymbolName
            (
            );
            /**Sets  the JA method support for accessing and setting Symbol Name value,
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetSymbolName
            (
                const NXString & symbolName /** symbolname */ 
            );
            /**Sets  the JA method support for accessing and setting Symbol Name value,
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            void SetSymbolName
            (
                const char * symbolName /** symbolname */ 
            );
            /**Returns  the part file name,
                         NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartFileName
            (
            );
            /**Sets  the part file name,
                         NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetPartFileName
            (
                const NXString & partFileName /** partfilename */ 
            );
            /**Sets  the part file name,
                         NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            void SetPartFileName
            (
                const char * partFileName /** partfilename */ 
            );
            /**Returns  the item number, valid in team center
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ItemNumber
            (
            );
            /**Sets  the item number, valid in team center
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetItemNumber
            (
                const NXString & itemNumber /** itemnumber */ 
            );
            /**Sets  the item number, valid in team center
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            void SetItemNumber
            (
                const char * itemNumber /** itemnumber */ 
            );
            /**Returns  the revision, valid in team center
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Revision
            (
            );
            /**Sets  the revision, valid in team center
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetRevision
            (
                const NXString & revision /** revision */ 
            );
            /**Sets  the revision, valid in team center
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            void SetRevision
            (
                const char * revision /** revision */ 
            );
            /**Returns  the Item Name, valid in team center
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ItemName
            (
            );
            /**Sets  the Item Name, valid in team center
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetItemName
            (
                const NXString & itemName /** itemname */ 
            );
            /**Sets  the Item Name, valid in team center
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            void SetItemName
            (
                const char * itemName /** itemname */ 
            );
            /** Generates the item number, valid in team center 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void GenerateItemNumber
            (
            );
            /** Generates the revision number, valid in team center 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void GenerateRevision
            (
            );
            /**Returns  the path, get it from the reuse library
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Path
            (
            );
            /**Sets  the path, get it from the reuse library
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetPath
            (
                const NXString & path /** location of symbol */
            );
            /**Sets  the path, get it from the reuse library
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            void SetPath
            (
                const char * path /** location of symbol */
            );
            /**Returns  the variable of is part symbol or not, get it from the reuse library
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsPartSymbol
            (
            );
            /**Sets  the variable of is part symbol or not, get it from the reuse library
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetPartSymbol
            (
                bool isPartSymbol /** True If it is part symbol*/
            );
            /** Creates a @link Annotations::SymbolCatalogParameterBuilder Annotations::SymbolCatalogParameterBuilder@endlink  object.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXOpen::Annotations::SymbolCatalogParameterBuilder * NewParameter
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
