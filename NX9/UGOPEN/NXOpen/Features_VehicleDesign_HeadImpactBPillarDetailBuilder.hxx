#ifndef NXOpen_FEATURES_VEHICLEDESIGN_HEADIMPACTBPILLARDETAILBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VEHICLEDESIGN_HEADIMPACTBPILLARDETAILBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VehicleDesign_HeadImpactBPillarDetailBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_VehicleDesign_HeadImpactBPillarDetailBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace VehicleDesign
        {
            class HeadImpactBPillarDetailBuilder;
        }
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    namespace Features
    {
        namespace VehicleDesign
        {
            class _HeadImpactBPillarDetailBuilderBuilder;
            class HeadImpactBPillarDetailBuilderImpl;
            /** Represents a @link Features::VehicleDesign::HeadImpactBPillarDetailBuilder Features::VehicleDesign::HeadImpactBPillarDetailBuilder@endlink .  <br> This is an abstract class and cannot be instantiated.  <br> 
             <br>  Created in NX9.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  HeadImpactBPillarDetailBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
            {
                private: HeadImpactBPillarDetailBuilderImpl * m_headimpactbpillardetailbuilder_impl;
                private: friend class  _HeadImpactBPillarDetailBuilderBuilder;
                protected: HeadImpactBPillarDetailBuilder();
                public: ~HeadImpactBPillarDetailBuilder();
                /**Returns  the vertical minimum required approach angle. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ReqVerticalMin
                (
                );
                /**Returns  the vertical maximum required approach angle. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ReqVerticalMax
                (
                );
                /**Returns  the left horizontal minimum required approach angle. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ReqHorizontalLeftMin
                (
                );
                /**Returns  the left horizontal minimum required approach angle calculated value. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * HorizontalLeftMin
                (
                );
                /**Returns  the left horizontal maximum required approach angle. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ReqHorizontalLeftMax
                (
                );
                /**Returns  the left horizontal maximum required approach angle calculated value. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * HorizontalLeftMax
                (
                );
                /**Returns  the right horizontal minimum required approach angle. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ReqHorizontalRightMin
                (
                );
                /**Returns  the right horizontal minimum required approach angle calculated value. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * HorizontalRightMin
                (
                );
                /**Returns  the right horizontal maximum required approach angle. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ReqHorizontalRightMax
                (
                );
                /**Returns  the right horizontal maximum required approach angle calculated value. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * HorizontalRightMax
                (
                );
                /**Returns  the left BP1 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool BP1LeftFlag
                (
                );
                /**Sets  the left BP1 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP1LeftFlag
                (
                    bool bp1LeftFlag /** bp1leftflag */ 
                );
                /**Returns  the left BP1 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * BP1Left
                (
                );
                /**Sets  the left BP1 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP1Left
                (
                    NXOpen::Point * bp1Left /** bp1left */ 
                );
                /**Returns  the right BP1 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool BP1RightFlag
                (
                );
                /**Sets  the right BP1 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP1RightFlag
                (
                    bool bp1RightFlag /** bp1rightflag */ 
                );
                /**Returns  the right BP1 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * BP1Right
                (
                );
                /**Sets  the right BP1 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP1Right
                (
                    NXOpen::Point * bp1Right /** bp1right */ 
                );
                /**Returns  the left BP2 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool BP2LeftFlag
                (
                );
                /**Sets  the left BP2 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP2LeftFlag
                (
                    bool bp2LeftFlag /** bp2leftflag */ 
                );
                /**Returns  the left BP2 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * BP2Left
                (
                );
                /**Sets  the left BP2 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP2Left
                (
                    NXOpen::Point * bp2Left /** bp2left */ 
                );
                /**Returns  the right BP2 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool BP2RightFlag
                (
                );
                /**Sets  the right BP2 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP2RightFlag
                (
                    bool bp2RightFlag /** bp2rightflag */ 
                );
                /**Returns  the right BP2 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * BP2Right
                (
                );
                /**Sets  the right BP2 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP2Right
                (
                    NXOpen::Point * bp2Right /** bp2right */ 
                );
                /**Returns  the left BP3 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool BP3LeftFlag
                (
                );
                /**Sets  the left BP3 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP3LeftFlag
                (
                    bool bp3LeftFlag /** bp3leftflag */ 
                );
                /**Returns  the left BP3 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * BP3Left
                (
                );
                /**Sets  the left BP3 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP3Left
                (
                    NXOpen::Point * bp3Left /** bp3left */ 
                );
                /**Returns  the right BP3 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool BP3RightFlag
                (
                );
                /**Sets  the right BP3 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP3RightFlag
                (
                    bool bp3RightFlag /** bp3rightflag */ 
                );
                /**Returns  the right BP3 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * BP3Right
                (
                );
                /**Sets  the right BP3 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP3Right
                (
                    NXOpen::Point * bp3Right /** bp3right */ 
                );
                /**Returns  the left BP4 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool BP4LeftFlag
                (
                );
                /**Sets  the left BP4 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP4LeftFlag
                (
                    bool bp4LeftFlag /** bp4leftflag */ 
                );
                /**Returns  the left BP4 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * BP4Left
                (
                );
                /**Sets  the left BP4 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP4Left
                (
                    NXOpen::Point * bp4Left /** bp4left */ 
                );
                /**Returns  the right BP4 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool BP4RightFlag
                (
                );
                /**Sets  the right BP4 alternative point flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP4RightFlag
                (
                    bool bp4RightFlag /** bp4rightflag */ 
                );
                /**Returns  the right BP4 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * BP4Right
                (
                );
                /**Sets  the right BP4 alternative point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBP4Right
                (
                    NXOpen::Point * bp4Right /** bp4right */ 
                );
                /**Returns  the left Door Top additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool DoorTopLeftFlag
                (
                );
                /**Sets  the left Door Top additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDoorTopLeftFlag
                (
                    bool doorTopLeftFlag /** doortopleftflag */ 
                );
                /**Returns  the left Door Top additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * DoorTopLeft
                (
                );
                /**Sets  the left Door Top additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDoorTopLeft
                (
                    NXOpen::Point * doorTopLeft /** doortopleft */ 
                );
                /**Returns  the right Door Top additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool DoorTopRightFlag
                (
                );
                /**Sets  the right Door Top additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDoorTopRightFlag
                (
                    bool doorTopRightFlag /** doortoprightflag */ 
                );
                /**Returns  the right Door Top additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * DoorTopRight
                (
                );
                /**Sets  the right Door Top additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDoorTopRight
                (
                    NXOpen::Point * doorTopRight /** doortopright */ 
                );
                /**Returns  the left Daylight Bottom additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool DaylightBottomLeftFlag
                (
                );
                /**Sets  the left Daylight Bottom additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDaylightBottomLeftFlag
                (
                    bool daylightBottomLeftFlag /** daylightbottomleftflag */ 
                );
                /**Returns  the left Daylight Bottom additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * DaylightBottomLeft
                (
                );
                /**Sets  the left Daylight Bottom additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDaylightBottomLeft
                (
                    NXOpen::Point * daylightBottomLeft /** daylightbottomleft */ 
                );
                /**Returns  the right Daylight Bottom additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool DaylightBottomRightFlag
                (
                );
                /**Sets  the right Daylight Bottom additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDaylightBottomRightFlag
                (
                    bool daylightBottomRightFlag /** daylightbottomrightflag */ 
                );
                /**Returns  the right Daylight Bottom additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * DaylightBottomRight
                (
                );
                /**Sets  the right Daylight Bottom additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDaylightBottomRight
                (
                    NXOpen::Point * daylightBottomRight /** daylightbottomright */ 
                );
                /**Returns  the left PT4 additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool PT4LeftFlag
                (
                );
                /**Sets  the left PT4 additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPT4LeftFlag
                (
                    bool pt4LeftFlag /** pt4leftflag */ 
                );
                /**Returns  the left PT4 additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * PT4Left
                (
                );
                /**Sets  the left PT4 additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPT4Left
                (
                    NXOpen::Point * pt4Left /** pt4left */ 
                );
                /**Returns  the right PT4 additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool PT4RightFlag
                (
                );
                /**Sets  the right PT4 additional geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPT4RightFlag
                (
                    bool pt4RightFlag /** pt4rightflag */ 
                );
                /**Returns  the right PT4 additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * PT4Right
                (
                );
                /**Sets  the right PT4 additional geometry. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPT4Right
                (
                    NXOpen::Point * pt4Right /** pt4right */ 
                );
                /**Returns  the create construction geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool CreateGeometry
                (
                );
                /**Sets  the create construction geometry flag. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetCreateGeometry
                (
                    bool createGeometry /** creategeometry */ 
                );
                /** Validate whether the inputs to the component are sufficient for 
                            commit to be called.  If the component is not in a state to commit
                            then an exception is thrown.  For example, if the component requires
                            you to set some property, this method will throw an exception if
                            you haven't set it.  This method throws a not-yet-implemented
                            NXException for some components.
                         @return  Was self validation successful 
                 <br>  Created in NX3.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual bool Validate
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
