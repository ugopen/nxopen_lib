#ifndef NXOpen_PREFERENCES_ROUTINGELECTRICAL_HXX_INCLUDED
#define NXOpen_PREFERENCES_ROUTINGELECTRICAL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_RoutingElectrical.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_StockData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class RoutingElectrical;
    }
    namespace Preferences
    {
        class RoutingApplicationView;
    }
    namespace Preferences
    {
        class RoutingElectricalImpl;
        /** The RoutingElectrical object stores a set of route electrical
                preferences.  A valid application view file is necessary to get
                values other than defaults for the electrical preferences.  <br> To obtain an instance of this class, refer to @link Preferences::RoutingApplicationView  Preferences::RoutingApplicationView @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  RoutingElectrical
        {
            /** How to create terminal segments (if creating terminal segments). */
            public: enum CreateTerminalsType
            {
                CreateTerminalsTypeAll/** Create terminals to all terminals */,
                CreateTerminalsTypeListed/** Create terminals to listed terminals */,
                CreateTerminalsTypeRouted/** Create terminals to routed terminals */
            };

            /** Manual/Auto Assign component uses the component match method to determine
                        which component(s) are candidates for assignment to a component list record.

                        Matching consists of matching the:
                         o the file name of a component
                         o the component name
                         o Part Name field of the component list record to an attribute

                        If attribute name matching is specified, indicate the name of the attribute. */
            public: enum ComponentMatchType
            {
                ComponentMatchTypeFileName/** Match file name during component assignment. */,
                ComponentMatchTypeComponentName/** Match component name during component assignment. */,
                ComponentMatchTypeAttributeName/** Match attribute name during component assignment. */
            };

            private: RoutingElectricalImpl * m_routingelectrical_impl;
            private: NXOpen::Preferences::RoutingApplicationView* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit RoutingElectrical(NXOpen::Preferences::RoutingApplicationView *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~RoutingElectrical();
            /**Returns  the create terminals option.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingElectrical::CreateTerminalsType CreateTerminalsOption
            (
            );
            /**Sets  the create terminals option.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetCreateTerminalsOption
            (
                NXOpen::Preferences::RoutingElectrical::CreateTerminalsType createTerminalsOption /** create terminals option */ 
            );
            /**Returns  the terminal segment solid display option 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool TerminalSegmentSolidDisplay
            (
            );
            /**Sets  the terminal segment solid display option 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetTerminalSegmentSolidDisplay
            (
                bool terminalSegmentSolid /** terminal segment solid */ 
            );
            /** Gets the default harness name.  The default harness name replaces
                        the Harness field value of any records in an imported
                        connection/component list that are empty.  A blank string in the
                        Default_Harness_Name element below replaces blank Harness fields
                        with the leaf name of the work part.   @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString GetDefaultHarnessName
            (
            );
            /** Sets the default harness name 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetDefaultHarnessName
            (
                const NXString & defaultHarnessName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the default harness name 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetDefaultHarnessName
            (
                const char * defaultHarnessName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the level at which to automatically route a path. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool AutomaticRouteLevel
            (
            );
            /**Sets  the level at which to automatically route a path. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetAutomaticRouteLevel
            (
                bool isPinLevelRoute /** is pin level route */ 
            );
            /**Returns  the option to report auto/manual route errors to the listing window. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool ReportRouteErrors
            (
            );
            /**Sets  the option to report auto/manual route errors to the listing window. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetReportRouteErrors
            (
                bool reportRouteErrors /** report route errors */ 
            );
            /**Returns  the option to highlight a wire in the connection list navigator. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool HighlightWire
            (
            );
            /**Sets  the option to highlight a wire in the connection list navigator. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetHighlightWire
            (
                bool highlightWire /** highlight wire */ 
            );
            /**Returns  the component match option for automatic/manual component assignment. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingElectrical::ComponentMatchType ComponentMatchMethod
            (
            );
            /**Sets  the component match option for automatic/manual component assignment. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetComponentMatchMethod
            (
                NXOpen::Preferences::RoutingElectrical::ComponentMatchType componentMatchMethod /** component match method */ 
            );
            /** Gets the column name of the component list used for component matching
                       if the method is attribute matching.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString GetComponentMatchColumnHeading
            (
            );
            /** Sets the column name of the component list used for component matching
                       if the method is attribute matching. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetComponentMatchColumnHeading
            (
                const NXString & columnHeading /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the column name of the component list used for component matching
                       if the method is attribute matching. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetComponentMatchColumnHeading
            (
                const char * columnHeading /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the component attribute name used for component matching
                       if the method is attribute matching.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString GetComponentMatchComponentAttributeTitle
            (
            );
            /** Sets the component attribute name used for component matching
                       if the method is attribute matching. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetComponentMatchComponentAttributeTitle
            (
                const NXString & componentAttributeTitle /** component attribute title */ 
            );
            /** Sets the component attribute name used for component matching
                       if the method is attribute matching. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetComponentMatchComponentAttributeTitle
            (
                const char * componentAttributeTitle /** component attribute title */ 
            );
            /**Returns  the default length of a jumper wire. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString DefaultJumperLength
            (
            );
            /**Sets  the default length of a jumper wire. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetDefaultJumperLength
            (
                const NXString & defaultJumperLength /** default jumper length */ 
            );
            /**Sets  the default length of a jumper wire. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetDefaultJumperLength
            (
                const char * defaultJumperLength /** default jumper length */ 
            );
            /** Gets the Rlist_Filter_Blanking_Attribute.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString GetFilterBlankingAttribute
            (
            );
            /** Sets the Rlist_Filter_Blanking_Attribute. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetFilterBlankingAttribute
            (
                const NXString & attributeName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the Rlist_Filter_Blanking_Attribute. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetFilterBlankingAttribute
            (
                const char * attributeName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the option to export the XML routelist data with the formats and
                        filters information separately. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool StandaloneFilterFormatFile
            (
            );
            /**Sets  the option to export the XML routelist data with the formats and
                        filters information separately. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetStandaloneFilterFormatFile
            (
                bool standaloneFilterFormatFile /** standalone filter format file */ 
            );
            /** Gets the file name for the stand alone XML filters and formats file.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString GetFilterFormatFileName
            (
            );
            /** Sets the file name for the stand alone XML filters and formats file. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetFilterFormatFileName
            (
                const NXString & filterFormatFileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the file name for the stand alone XML filters and formats file. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetFilterFormatFileName
            (
                const char * filterFormatFileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the option to export the format at the top of a legacy routelist file. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool ExportFormatInLegacyFile
            (
            );
            /**Sets  the option to export the format at the top of a legacy routelist file. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetExportFormatInLegacyFile
            (
                bool exportFormat /** export format */ 
            );
            /**Returns  the default segment length tolerance to use for Formboard Synchronization. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: double FormboardSynchronizationLengthTolerance
            (
            );
            /**Sets  the default segment length tolerance to use for Formboard Synchronization. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetFormboardSynchronizationLengthTolerance
            (
                double segmentLengthTolerance /** segment length tolerance */ 
            );
            /** Gets the formboard frame sizes currently specified within the
                        Routing Electrical application.  Formboard frame sizes are character
                        strings are of the form Height x Length (units).

                        Units can be "in" or "mm" (case insensitive).

                        The Height, Length and units fields of the string are separated
                        by one of the following separator characters:

                               "x", "X",  any whitespace, ":" (colon), or a "," (comma)
                       @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXString> GetFormboardFrameSizes
            (
            );
            /** Sets a formboard frame size. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetFormboardFrameSizes
            (
                std::vector<NXString> & frameSizes /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the default bundle color. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: int BundleColor
            (
            );
            /**Sets  the default bundle color. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetBundleColor
            (
                int bundleColor /** bundle color */ 
            );
            /**Returns the option to record import and export activity in the Connection and Component Lists. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool RecordNetlistHistory
            (
            );
            /**Sets the option to record import and export activity in the Connection and Component Lists. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetRecordNetlistHistory
            (
                bool recordNetlistHistory /** Should Routing record the netlist history? */
            );
            /**Returns the option to Auto Route using centerline stock style (i.e. none) or simple stock style.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockStyle AutoRouteStockStyle
            (
            );
            /**Sets the option to Auto Route using centerline stock style (i.e. none) or simple stock style.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetAutoRouteStockStyle
            (
                NXOpen::Routing::StockStyle stockStyle /** Must be either @link Routing::StockStyleNone Routing::StockStyleNone@endlink ) or
                                                                                    @link Routing::StockStyleSimple Routing::StockStyleSimple@endlink ). */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
