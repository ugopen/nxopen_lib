#ifndef NXOpen_PREFERENCES_PARTDRAFTING_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTDRAFTING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartDrafting.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class PartDrafting;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    class NXColor;
    namespace Preferences
    {
        class PartDraftingImpl;
        /** Represents the set of drafting preferences applicable to part  <br> To obtain an instance of this class, refer to @link Preferences::PartPreferences  Preferences::PartPreferences @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  PartDrafting
        {
            /** Describes the available view style types for preview */
            public: enum ViewStyleType
            {
                ViewStyleTypeBorder/** Border  */,
                ViewStyleTypeWireframe/** Wireframe */,
                ViewStyleTypeHiddenWireframe/** Hidden Wireframe */,
                ViewStyleTypeShaded/** Shaded  */
            };

            /** Describes the available font types */
            public: enum FontType
            {
                FontTypeOriginal/** Original  */,
                FontTypeInvisible/** Invisible */,
                FontTypeSolid/** Solid */,
                FontTypeDashed/** Dashed */,
                FontTypePhantom/** Phantom */,
                FontTypeCenterline/** CenterLine  */,
                FontTypeDotted/** Dotted */,
                FontTypeLongDashed/** Long Dashed */,
                FontTypeDottedDashed/** Dotted Dashed */
            };

            /** Describes the available width types */
            public: enum WidthType
            {
                WidthTypeOriginal/** Original  */,
                WidthTypeThin/** Thin */,
                WidthTypeNormal/** Normal */,
                WidthTypeThick/** Thick */,
                WidthTypeThicknessOne = 5/** Width One */,
                WidthTypeThicknessTwo/** Width Two */,
                WidthTypeThicknessThree/** Width Three */,
                WidthTypeThicknessFour/** Width Four */,
                WidthTypeThicknessFive/** Width Five */,
                WidthTypeThicknessSix/** Width Six */,
                WidthTypeThicknessSeven/** Width Seven */,
                WidthTypeThicknessEight/** Width Eight */,
                WidthTypeThicknessNine/** Width Nine */
            };

            /** Describes the available break line style */
            public: enum BreakLineStyle
            {
                BreakLineStyleExisting/** Existing Curve */,
                BreakLineStyleSimple/** Simple */,
                BreakLineStyleStraight/** Straight */,
                BreakLineStyleSawtooth/** Sawtooth */,
                BreakLineStyleLongBreak/** LongBreak */,
                BreakLineStyleTubular/** Tubular */,
                BreakLineStyleSolidTubular/** Solid Tubular */,
                BreakLineStyleSolidRod/** Solid Rod */,
                BreakLineStyleJigsaw/** Jigsaw */,
                BreakLineStyleWood/** Wood */
            };

            /** Describes the update view without light weight data options */
            public: enum UpdateViewWithoutLwDataOption
            {
                UpdateViewWithoutLwDataOptionIgnore/** Ignore */,
                UpdateViewWithoutLwDataOptionNotify/** Notify */,
                UpdateViewWithoutLwDataOptionDoNotNotify/** Do Not Notify */,
                UpdateViewWithoutLwDataOptionGenerate/** Generate */
            };

            private: PartDraftingImpl * m_partdrafting_impl;
            private: NXOpen::Preferences::PartPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PartDrafting(NXOpen::Preferences::PartPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PartDrafting();
            /**Returns  the flag indicating whether to delay update of the drafting views during system 
                    initiated drawing updates  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool DelayViewUpdate
            (
            );
            /**Sets  the flag indicating whether to delay update of the drafting views during system 
                    initiated drawing updates  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDelayViewUpdate
            (
                bool isDelayViewUpdateOn /** isdelayviewupdateon */ 
            );
            /**Returns  the flag indicating whether the newly created views should update immediately even
                    when the view update is delayed. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool DelayUpdateOnCreation
            (
            );
            /**Sets  the flag indicating whether the newly created views should update immediately even
                    when the view update is delayed. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDelayUpdateOnCreation
            (
                bool isDelayUpdateOnCreationOn /** isdelayupdateoncreationon */ 
            );
            /**Returns  the option specifying the action when missing, incomplete or invalid lightweight 
                    bodies are found during view create or update 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::UpdateViewWithoutLwDataOption UpdateViewWithoutLwData
            (
            );
            /**Sets  the option specifying the action when missing, incomplete or invalid lightweight 
                    bodies are found during view create or update 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUpdateViewWithoutLwData
            (
                NXOpen::Preferences::PartDrafting::UpdateViewWithoutLwDataOption updateViewWithoutLWDataOption /** updateviewwithoutlwdataoption */ 
            );
            /**Returns  the flat indicating whether the smart lightweight views should show the smooth edges 
                    or render them as normal curves 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool EnableSmoothEdgesForLWView
            (
            );
            /**Sets  the flat indicating whether the smart lightweight views should show the smooth edges 
                    or render them as normal curves 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetEnableSmoothEdgesForLWView
            (
                bool enableSmoothEdges /** enablesmoothedges */ 
            );
            /**Returns  the flag indicating whether to display borders around drafting views, when selected 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayBorders
            (
            );
            /**Sets  the flag indicating whether to display borders around drafting views, when selected 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayBorders
            (
                bool displayBorders /** display borders */ 
            );
            /**Returns  the drafting view border color. The value should be between 1 and 216.
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int BorderColor
            (
            );
            /**Sets  the drafting view border color. The value should be between 1 and 216.
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBorderColor
            (
                int borderColor /** border color */ 
            );
            /**Returns  the flag indicating whether to retain @link Annotations::Annotation Annotations::Annotation@endlink  objects
                    when the geometry they are attached to is deleted. When false, the @link Annotations::Annotation Annotations::Annotation@endlink  
                    objects get deleted with the geometry. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool RetainAnnotations
            (
            );
            /**Sets  the flag indicating whether to retain @link Annotations::Annotation Annotations::Annotation@endlink  objects
                    when the geometry they are attached to is deleted. When false, the @link Annotations::Annotation Annotations::Annotation@endlink  
                    objects get deleted with the geometry. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRetainAnnotations
            (
                bool retainAnnotations /** retain annotations */ 
            );
            /**Returns  the color of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects. 
                    The value should be between 1 and 216. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int Color
            (
            );
            /**Sets  the color of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects. 
                    The value should be between 1 and 216. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetColor
            (
                int color /** color */ 
            );
            /**Returns  the line font of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::FontType Font
            (
            );
            /**Sets  the line font of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFont
            (
                NXOpen::Preferences::PartDrafting::FontType font /** font */ 
            );
            /**Returns  the line width of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::WidthType Width
            (
            );
            /**Sets  the line width of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWidth
            (
                NXOpen::Preferences::PartDrafting::WidthType width /** width */ 
            );
            /**Returns  the drafting view style type for preview when placing the view 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::ViewStyleType ViewStyle
            (
            );
            /**Sets  the drafting view style type for preview when placing the view 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetViewStyle
            (
                NXOpen::Preferences::PartDrafting::ViewStyleType viewStyle /** view style */ 
            );
            /**Returns  the drafting version objects setting when updating drafting objects and member views 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool VersionObjects
            (
            );
            /**Sets  the drafting version objects setting when updating drafting objects and member views 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVersionObjects
            (
                bool versonObjects /** verson objects */ 
            );
            /**Returns  the flag indicating whether to track a drafting view during preview
                    when placing the view. The cursor is tracked using XC/YC coordinates.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool ViewTracking
            (
            );
            /**Sets  the flag indicating whether to track a drafting view during preview
                    when placing the view. The cursor is tracked using XC/YC coordinates.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetViewTracking
            (
                bool viewTracking /** view tracking */ 
            );
            /**Returns  the initial sheet number 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString InitialSheetNumber
            (
            );
            /**Sets  the initial sheet number 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInitialSheetNumber
            (
                const NXString & initialSheetNumber /** initialsheetnumber */ 
            );
            /**Sets  the initial sheet number 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetInitialSheetNumber
            (
                const char * initialSheetNumber /** initialsheetnumber */ 
            );
            /**Returns  the initial secondary number 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString InitialSecondaryNumber
            (
            );
            /**Sets  the initial secondary number 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInitialSecondaryNumber
            (
                const NXString & initialSecondaryNumber /** initialsecondarynumber */ 
            );
            /**Sets  the initial secondary number 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetInitialSecondaryNumber
            (
                const char * initialSecondaryNumber /** initialsecondarynumber */ 
            );
            /**Returns  the delimiter  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Delimiter
            (
            );
            /**Sets  the delimiter  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDelimiter
            (
                const NXString & delimiter /** delimiter */ 
            );
            /**Sets  the delimiter  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetDelimiter
            (
                const char * delimiter /** delimiter */ 
            );
            /**Returns  the flag indicating whether to display solids in shaded member views with translucency.  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: bool Translucency
            (
            );
            /**Sets  the flag indicating whether to display solids in shaded member views with translucency.  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: void SetTranslucency
            (
                bool translucency /** translucency */ 
            );
            /**Returns  the flag indicating whether to display drawing using line antialiasing.  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: bool LineAntialiasing
            (
            );
            /**Sets  the flag indicating whether to display drawing using line antialiasing.  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: void SetLineAntialiasing
            (
                bool lineAntialiasing /** line antialiasing */ 
            );
            /**Returns  the flag indicating whether to display facet edges in shaded member views.  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: bool ShowFacetEdges
            (
            );
            /**Sets  the flag indicating whether to display facet edges in shaded member views.  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: void SetShowFacetEdges
            (
                bool showFacetEdges /** show facet edges */ 
            );
            /**Returns  the drafting active view color. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ActiveViewColor
            (
            );
            /**Sets  the drafting active view color. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetActiveViewColor
            (
                NXOpen::NXColor * borderColor /** border color */ 
            );
            /**Returns  the break line type. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::BreakLineStyle BreakLineType
            (
            );
            /**Sets  the break line type. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLineType
            (
                NXOpen::Preferences::PartDrafting::BreakLineStyle lineType /** line type */ 
            );
            /**Returns  the break line amplitude. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BreakLineAmplitude
            (
            );
            /**Sets   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLineExtension
            (
                double extension /** extension */ 
            );
            /**Returns   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BreakLineExtension
            (
            );
            /**Sets  the break line amplitude. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLineAmplitude
            (
                double amplitude /** amplitude */ 
            );
            /**Returns  the break line gap. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BreakLineGap
            (
            );
            /**Sets  the break line gap. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLineGap
            (
                double gap /** gap */ 
            );
            /**Returns  the break line width. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int BreakLineWidth
            (
            );
            /**Sets  the break line width. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLineWidth
            (
                int width /** width */ 
            );
            /**Returns  the break line color. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BreakLineColor
            (
            );
            /**Sets  the break line color. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLineColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the propagation of view break. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool PropagateBreakLines
            (
            );
            /**Sets  the propagation of view break. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPropagateBreakLines
            (
                bool doesPropagate /** doespropagate */ 
            );
            /**Returns  the break lines visibility. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool BreakLinesVisibility
            (
            );
            /**Sets  the break lines visibility. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLinesVisibility
            (
                bool isVisible /** isvisible */ 
            );
            /**Returns  the custom symbol smash behavior. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CustomSymbolSmashToSketch
            (
            );
            /**Sets  the custom symbol smash behavior. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetCustomSymbolSmashToSketch
            (
                bool isSmashToSketch /** issmashtosketch */ 
            );
            /**Returns  the frame bar tic direction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int FrameBarTicDirection
            (
            );
            /**Sets  the frame bar tic direction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFrameBarTicDirection
            (
                int ticDirection /** ticdirection */ 
            );
            /**Returns  the frame bar precision. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int FrameBarPrecision
            (
            );
            /**Sets  the frame bar precision. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFrameBarPrecision
            (
                int precision /** precision */ 
            );
            /**Returns  the flag indicating whether to associatively align the view when placing it 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool AssociativeAlignment
            (
            );
            /**Sets  the flag indicating whether to associatively align the view when placing it 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociativeAlignment
            (
                bool associativeAlignment /** associativealignment */ 
            );
            /**Returns  the minimum number of components for large assembly option to get enabled 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int MinimumComponentsForLargeAssemblyOption
            (
            );
            /**Sets  the minimum number of components for large assembly option to get enabled 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumComponentsForLargeAssemblyOption
            (
                int minComponents /** Minimum number of components for large assembly option */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
