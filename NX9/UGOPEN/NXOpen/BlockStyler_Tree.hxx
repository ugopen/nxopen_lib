#ifndef NXOpen_BLOCKSTYLER_TREE_HXX_INCLUDED
#define NXOpen_BLOCKSTYLER_TREE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BlockStyler_Tree.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_Node.hxx>
#include <NXOpen/BlockStyler_Tree.hxx>
#include <NXOpen/BlockStyler_TreeListMenu.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace BlockStyler
    {
        class Tree;
    }
    namespace BlockStyler
    {
        class Node;
    }
    namespace BlockStyler
    {
        class TreeListMenu;
    }
    namespace BlockStyler
    {
        class UIBlock;
    }
    namespace BlockStyler
    {
        class _TreeBuilder;
        class TreeImpl;
        /**Represents the Tree block in block styler automation. To start utilizing the tree use
           methods such as @link BlockStyler::Tree::InsertColumn BlockStyler::Tree::InsertColumn@endlink , @link BlockStyler::Tree::CreateNode BlockStyler::Tree::CreateNode@endlink , @link BlockStyler::Tree::InsertNode BlockStyler::Tree::InsertNode@endlink  etc.
           It is must to insert the column on the tree before inserting any node. Node can be created but cannot be inserted without the column available on the tree. 
           Note that some of the methods of this class such as @link BlockStyler::Tree::InsertColumn BlockStyler::Tree::InsertColumn@endlink  must be used in or after the BlockStyler.BlockDialog.DialogShown callback after 
           which tree is fully constructed and ready for use.
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENUICPPEXPORT  Tree : public BlockStyler::UIBlock
        {
            /**Represents the node insert option which is used while inserting the node in tree.*/
            public: enum NodeInsertOption
            {
                NodeInsertOptionFirst/**Node is placed first in the hierarchy in which it is inserted.*/,
                NodeInsertOptionLast/**Node is placed last in the hierarchy in which it is inserted.*/,
                NodeInsertOptionSort/**Node is sorted according to display text and placed accordingly in the hierarchy in which it is inserted*/,
                NodeInsertOptionAlwaysFirst/**Node is placed first in the hierarchy in which it is inserted. This is same as 
                                                                @link BlockStyler::Tree::NodeInsertOptionFirst BlockStyler::Tree::NodeInsertOptionFirst@endlink , except that it 
                                                                remains first after a column sort. If there is more than one node beneath a single parent 
                                                                with this option then they will be sorted relative to each other.
                                                                */,
                NodeInsertOptionAlwaysLast/**Node is placed last in the hierarchy in which it is inserted. This is same as 
                                                                @link BlockStyler::Tree::NodeInsertOptionLast BlockStyler::Tree::NodeInsertOptionLast@endlink , except that it 
                                                                remains last after a column sort. If there is more than one node beneath a single parent 
                                                                with this option then they will be sorted relative to each other.
                                                                */
            };

            /**Represents the column sort option.*/
            public: enum ColumnSortOption
            {
                ColumnSortOptionUnsorted/**Unsorted*/,
                ColumnSortOptionAscending/**Ascending*/,
                ColumnSortOptionDescending/**Descending*/
            };

            /**Represents column resize policy.*/
            public: enum ColumnResizePolicy
            {
                ColumnResizePolicyConstantWidth/** Constant width*/,
                ColumnResizePolicyResizeWithContents/**Width resized with contents.*/,
                ColumnResizePolicyResizeWithTree/**Width resize with tree window resize.*/
            };

            /**Represents the column display type. If the type is @link BlockStyler::Tree::ColumnDisplayIcon  BlockStyler::Tree::ColumnDisplayIcon @endlink 
                  then the provided text is interpreted as icon.*/
            public: enum ColumnDisplay
            {
                ColumnDisplayText/**Text*/,
                ColumnDisplayIcon/**Icon*/
            };

            /**Represents the state to allow/disallow the node label edit. Use these options in callback BlockStyler.Tree.OnBeginLabelEditCallback.*/
            public: enum BeginLabelEditState
            {
                BeginLabelEditStateAllow/**Use this option to allow label edit.*/,
                BeginLabelEditStateDisallow/**Use this option to disallow label edit.*/
            };

            /**Represents the state to accept/reject the edited label of node. Use these options in callback BlockStyler.Tree.OnEndLabelEditCallback.*/
            public: enum EndLabelEditState
            {
                EndLabelEditStateAcceptText/**Use this option to accept the edited text.*/,
                EndLabelEditStateRejectText/**Use this option to reject the edited text and retain the previous one.*/
            };

            /**Represents the options to accept or reject the changed value.*/
            public: enum EditControlOption
            {
                EditControlOptionAccept/**Use this option to allow edit.*/,
                EditControlOptionReject/**Use this option to disallow edit.*/
            };

            /**Represents the type of edit options. Use these options in edit control callback*/
            public: enum ControlType
            {
                ControlTypeNone/**None*/,
                ControlTypeComboBox/**Combo box.*/,
                ControlTypeListBox/**List box.*/
            };

            public: /**Represents the callback which gets called when the node is expanded. This is called only once.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback2<void, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *> OnExpandCallback;
            public: /** @brief 
                    Represents the callback which gets called for each node when the column is inserted using 
                    @link BlockStyler::Tree::InsertColumn BlockStyler::Tree::InsertColumn@endlink . This callback in not invoked if no node is 
                    available on the tree. 
                    

             
                   In this callback it is expected to provide column text for individual node.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<void, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int> OnInsertColumnCallback;
            public: /**Represents the callback which gets called when the node state is set 
                   by @link BlockStyler::Node::SetState BlockStyler::Node::SetState@endlink  and the corresponding 
                   state icon of node state is not known. This callback is expected to provide 
                   the icon name for the node state used in the application. This callback is 
                   called only once for any given node state.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<NXString, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int> StateIconNameCallback;
            public: /**Represents the callback which gets called when the node is inserted.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback2<void, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *> OnInsertNodeCallback;
            public: /**Represents the callback which gets called when pre selection is attempted on node.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback4<void, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int, bool> OnPreSelectCallback;
            public: /** @brief Represents the callback which gets called when the node is deleted from tree.
                  It is expected to perform only clean-up operation related to the deleted node such as clean-up of Node Data.
                   

             
                  Avoid operations such as node insert, node delete etc, and avoid calling any methods of tree. This is 
                  particularly severe when dialog is closed (through Ok, dialog-reset etc) because by then tree is unavailable and any usage of tree
                  method would raise exception. As the callback is called for each node, the exception would be raised number of times equaling number of nodes available on tree.
                  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback2<void, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *> OnDeleteNodeCallback;
            public: /**Represents the callback which gets called when the node is selected.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback4<void, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int, bool> OnSelectCallback;
            public: /**Represents the callback which gets called when the state icon is clicked. 
                   This callback does not get called when state is changed using the method 
                   @link BlockStyler::Node::SetState BlockStyler::Node::SetState@endlink . The node state can be 
                   changed in this callback using @link BlockStyler::Node::SetState BlockStyler::Node::SetState@endlink , 
                   e.g., node can be changed from checked state to unchecked state and vice-versa.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<void, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int> OnStateChangeCallback;
            public: /**Represents the callback which gets called when tree seeks the tooltip.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<NXString, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int> ToolTipTextCallback;
            public: /** @brief Represents the callback which gets called when column sort is attempted. The possible return values are 0, positive and
                    negative value, suggesting respectively that both nodes are same, first node greater than second, and first node smaller than second.
                    

             
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback4<int, NXOpen::BlockStyler::Tree *, int, NXOpen::BlockStyler::Node *, NXOpen::BlockStyler::Node *> ColumnSortCallback;
            public: /**Represents the callback which gets called when label edit is attempted on any column. The label edit is allowed/disallowed 
                   based on return value of this callback.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<NXOpen::BlockStyler::Tree::BeginLabelEditState, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int> OnBeginLabelEditCallback;
            public: /**Represents the callback which gets called when label edit is completed on any column. 
                   The edited label is accepted/rejected based on return value of this callback.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback4<NXOpen::BlockStyler::Tree::EndLabelEditState, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int, NXString> OnEndLabelEditCallback;
            public: /** @brief Represents the callback which gets called when edit is attempted on any cell. Edit-control is 
                   made available on the cell based on control type returned by this callback.
                    

             
                   Use @link BlockStyler::Tree::SetEditOptions BlockStyler::Tree::SetEditOptions@endlink  in this callback to show the options in the 
                   edit-control. Further BlockStyler.Tree.OnEditOptionSelectedCallback is called when option is selected.
                  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<NXOpen::BlockStyler::Tree::ControlType, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int> AskEditControlCallback;
            public: /**Represents the callback which gets called when user selects an option in edit-control set by 
                   BlockStyler.Tree.AskEditControlCallback. If returned @link BlockStyler::Tree::EditControlOptionAccept BlockStyler::Tree::EditControlOptionAccept@endlink  
                   then the edited option/text is accepted else it is rejected and old option/text remains.    
                  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback6<NXOpen::BlockStyler::Tree::EditControlOption, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int, int, NXString, NXOpen::BlockStyler::Tree::ControlType> OnEditOptionSelectedCallback;
            public: /**Represents the callback which gets called when MB3 or right click is attempted on node or tree. Value of Node parameter is NULL if 
                   MB3 is attempted on area other than node. This distinction allows to have separate menu for node and tree.
                    <br> 
                   The menu can be made available using two methods @link BlockStyler::Tree::CreateMenu BlockStyler::Tree::CreateMenu@endlink  and 
                   @link BlockStyler::Tree::SetMenu BlockStyler::Tree::SetMenu@endlink . Subsequently BlockStyler.Tree.OnMenuSelectionCallback
                   is invoked after the menu item is selected.     
                    <br> 
                  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<void, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int> OnMenuCallback;
            public: /**Represents the callback which gets called when one of the menu option is selected. 
                   Refer to callback BlockStyler.Tree.OnMenuCallback to make available the menu.
                   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<void, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int> OnMenuSelectionCallback;
            public: /**Represents the callback which gets called when node is dragged.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<NXOpen::BlockStyler::Node::DragType, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int> IsDragAllowedCallback;
            public: /** @brief 
                   Represents the callback which gets called when an attempt is made to drop the node on any target node. If multiple nodes 
                   are selected and dragged then this callback is invoked for each of the selected nodes. 
                    

             
                   If node is dragged using MB3 then the callback BlockStyler.Tree.OnDropMenuCallback 
                   is invoked which is expected to provide and show the menu. Subsequently, BlockStyler.Tree.OnDropCallback
                   might get invoked.
                  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback5<NXOpen::BlockStyler::Node::DropType, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int, NXOpen::BlockStyler::Node *, int> IsDropAllowedCallback;
            public: /**Represents the callback which gets called when nodes are dropped on any target node. This callback is invoked irrespective of case 
                   whether nodes are dragged using MB1 or MB3. If nodes are dragged using MB3 then BlockStyler.Tree.OnDropMenuCallback is called
                   prior to the invocation of this callback.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback7<bool, NXOpen::BlockStyler::Tree *, std::vector<NXOpen::BlockStyler::Node *>, int, NXOpen::BlockStyler::Node *, int, NXOpen::BlockStyler::Node::DropType, int> OnDropCallback;
            public: /**Represents the callback to show the menu when nodes are dragged using MB3 or right mouse click, and dropped on any target node. 
                  
                   <br> 
                   The menu can be made available using two methods @link BlockStyler::Tree::CreateMenu BlockStyler::Tree::CreateMenu@endlink  and 
                   @link BlockStyler::Tree::SetMenu BlockStyler::Tree::SetMenu@endlink . Subsequently, menu is shown and selected menu option is passed as paremeter in 
                   the callback BlockStyler.Tree.OnDropCallback       
                   <br>        
                   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback5<void, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int, NXOpen::BlockStyler::Node *, int> OnDropMenuCallback;
            public: /**Represents the callback which gets called when double clicked is performed on the node.
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback3<void, NXOpen::BlockStyler::Tree *, NXOpen::BlockStyler::Node *, int> OnDefaultActionCallback;
            private: TreeImpl * m_tree_impl;
            private: friend class  _TreeBuilder;
            protected: Tree();
            public: ~Tree();
            /**Creates the node but does not insert it. Use @link BlockStyler::Tree::InsertNode BlockStyler::Tree::InsertNode@endlink  to insert 
                    the node. @return Node
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * CreateNode
            (
                const NXString & displayText /**Specifies the display text of the node.*/
            );
            /**Creates the node but does not insert it. Use @link BlockStyler::Tree::InsertNode BlockStyler::Tree::InsertNode@endlink  to insert 
                    the node. @return Node
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::BlockStyler::Node * CreateNode
            (
                const char * displayText /**Specifies the display text of the node.*/
            );
            /**Inserts the node. Subsequently BlockStyler.Tree.OnInsertNodeCallback is called. 
                   Reinserting the node in same or different tree is not allowed.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void InsertNode
            (
                NXOpen::BlockStyler::Node * newNode /**New Node.*/,
                NXOpen::BlockStyler::Node * parentNode /**Parent node under which new node is supposed to be placed.*/,
                NXOpen::BlockStyler::Node * afterNode /**New node placed after this node. If there is mismatch between parent-node and after-node then former is honoured.*/,
                NXOpen::BlockStyler::Tree::NodeInsertOption nodeInsertOption /**Node insert option. Provide the value if after node is NULL. 
                                                                            This value is not considered if a valid after-node is supplied.*/
            );
            /**Deletes the node from tree. Further usage of deleted node is illegal. The last place where node can be used is in 
                  BlockStyler.Tree.OnDeleteNodeCallaback callback which gets called when node is deleted.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void DeleteNode
            (
                NXOpen::BlockStyler::Node * node /**Node to delete*/
            );
            /**Selects the provided node.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SelectNode
            (
                NXOpen::BlockStyler::Node * node /**Node to be selected*/,
                bool isSelect /**Select/Deselect flag. If true, the provided node is selected, else deselected.*/,
                bool isOtherNodeAffected /**Flag indicating whether selection of other nodes is affected. If true, 
                                                              all the previous selected nodes are deselected, else unaffected.*/
            );
            /**Selects the provided nodes.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SelectNodes
            (
                const std::vector<NXOpen::BlockStyler::Node *> & node /**Nodes to be selected*/,
                bool isSelect /**Select/Deselect flag. If true, the provided nodes are selected, else deselected.*/,
                bool isOtherNodeAffected /**Flag indicating whether selection of other nodes is affected. If true, 
                                                              all the previous selected nodes are deselected, else remain so.*/
            );
            /**Inserts column with following defaults: <br/> 
                   <ul>
                   <li>@link BlockStyler::Tree::ColumnSortOption BlockStyler::Tree::ColumnSortOption@endlink  as @link BlockStyler::Tree::ColumnSortOptionAscending BlockStyler::Tree::ColumnSortOptionAscending@endlink </li>
                   <li>Column sortable as True</li>
                   <li>Column visible as True</li>
                   <li>@link BlockStyler::Tree::ColumnDisplay BlockStyler::Tree::ColumnDisplay@endlink  as @link BlockStyler::Tree::ColumnDisplayText BlockStyler::Tree::ColumnDisplayText@endlink </li>
                   <li>@link BlockStyler::Tree::ColumnResizePolicy BlockStyler::Tree::ColumnResizePolicy@endlink  as @link BlockStyler::Tree::ColumnResizePolicyConstantWidth BlockStyler::Tree::ColumnResizePolicyConstantWidth@endlink </li>
                   </ul>
                   The new column is placed after the last available column. If no column is available then the inserted one becomes the first column of the tree.
                 @return Absolute column position.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int InsertColumn
            (
                int columnID /**Unique column Id associated with the column. Any further interaction with the column is done with this column Id.*/,
                const NXString & columnTitle /**Column header title.*/,
                int columnWidth /**Column width. Provide -1 for default width.*/
            );
            /**Inserts column with following defaults: <br/> 
                   <ul>
                   <li>@link BlockStyler::Tree::ColumnSortOption BlockStyler::Tree::ColumnSortOption@endlink  as @link BlockStyler::Tree::ColumnSortOptionAscending BlockStyler::Tree::ColumnSortOptionAscending@endlink </li>
                   <li>Column sortable as True</li>
                   <li>Column visible as True</li>
                   <li>@link BlockStyler::Tree::ColumnDisplay BlockStyler::Tree::ColumnDisplay@endlink  as @link BlockStyler::Tree::ColumnDisplayText BlockStyler::Tree::ColumnDisplayText@endlink </li>
                   <li>@link BlockStyler::Tree::ColumnResizePolicy BlockStyler::Tree::ColumnResizePolicy@endlink  as @link BlockStyler::Tree::ColumnResizePolicyConstantWidth BlockStyler::Tree::ColumnResizePolicyConstantWidth@endlink </li>
                   </ul>
                   The new column is placed after the last available column. If no column is available then the inserted one becomes the first column of the tree.
                 @return Absolute column position.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            int InsertColumn
            (
                int columnID /**Unique column Id associated with the column. Any further interaction with the column is done with this column Id.*/,
                const char * columnTitle /**Column header title.*/,
                int columnWidth /**Column width. Provide -1 for default width.*/
            );
            /**Gets the column title. @return Column header title.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString GetColumnTitle
            (
                int columnID /**Unique column Id associated with the column.*/
            );
            /**Sets the column title.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetColumnTitle
            (
                int columnID /**Unique column Id associated with the column.*/,
                const NXString & columnHeaderTitle /**Column header title.*/
            );
            /**Sets the column title.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetColumnTitle
            (
                int columnID /**Unique column Id associated with the column.*/,
                const char * columnHeaderTitle /**Column header title.*/
            );
            /**Gets the column Id for the provided column position. @return Unique column Id associated with the column.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int GetColumnId
            (
                int columnPosition /**Column position.*/
            );
            /**Gets column position. Returns -1 if no column is associated with the provided column Id. @return Column position.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int GetColumnPosition
            (
                int columnID /**Unique column Id associated with the column.*/
            );
            /**Gets column width @return Column width.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int GetColumnWidth
            (
                int columnID /**Unique column Id associated with the column.*/
            );
            /**Sets the column width
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetColumnWidth
            (
                int columnID /**Unique column Id associated with the column.*/,
                int columnWidth /**Column width.*/
            );
            /**Gets the column sort option. @return Column sort option.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Tree::ColumnSortOption GetColumnSortOption
            (
                int columnID /**Unique column Id associated with the column.*/
            );
            /**Sets the column sort option.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetColumnSortOption
            (
                int columnID /**Unique column Id associated with the column.*/,
                NXOpen::BlockStyler::Tree::ColumnSortOption sortOption /**Column sort option.*/
            );
            /**Gets the flag indicating whether the column is sortable. @return Flag indicating whether the column is sortable.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool GetColumnSortable
            (
                int columnID /**Unique column Id associated with the column.*/
            );
            /**Sets the flag indicating whether the column is sortable.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetColumnSortable
            (
                int columnID /**Unique column Id associated with the column.*/,
                bool isSortable /**Flag indicating whether the column is sortable.*/
            );
            /**Gets the flag indicating whether the column is visible. @return Flag indicating whether the column is visible.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool GetColumnVisible
            (
                int columnID /**Unique column Id associated with the column.*/
            );
            /**Sets the flag indicating whether the column is visible
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetColumnVisible
            (
                int columnID /**Unique column Id associated with the column*/,
                bool isVisible /**Flag indicating whether the column is visible*/
            );
            /**Gets the display type of the column. @return Display type.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Tree::ColumnDisplay GetColumnDisplayType
            (
                int columnID /**Unique column Id associated with the column.*/
            );
            /**Sets the display type of the column.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetColumnDisplayType
            (
                int columnID /**Unique column Id associated with the column.*/,
                NXOpen::BlockStyler::Tree::ColumnDisplay displayType /**Display type.*/
            );
            /**Gets the column resize policy. @return Resize policy.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Tree::ColumnResizePolicy GetColumnResizePolicy
            (
                int columnID /**Unique column Id associated with the column.*/
            );
            /**Sets the column resize policy.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetColumnResizePolicy
            (
                int columnID /**Unique column Id associated with the column*/,
                NXOpen::BlockStyler::Tree::ColumnResizePolicy resizePolicy /**Resize policy*/
            );
            /**Returns  the root node. If more than one root node is available in top hierarchy 
                  then the first root node is returned.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * RootNode
            (
            );
            /**Returns  the first selected node among the available selected nodes. 
                   Returns NULL if no node is selected.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * FirstSelectedNode
            (
            );
            /**Sets the pre selection time out. BlockStyler.Tree.OnPreSelectCallback is called based on this value.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPreSelectionTimeOut
            (
                double timeOut /**Time in millisecond*/
            );
            /**Gets the selected nodes. @return Selected nodes.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::BlockStyler::Node *> GetSelectedNodes
            (
            );
            /**Freezes the tree if the value is set to False which implies that no changes would occur 
                   in the tree after this point. The tree remains in that state until the value is set to True, 
                   after which the tree completely updates itself with the changes performed on it in between 
                   the two calls. Use this method to efficiently utilize the tree when it is subjected to enourmous changes.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void Redraw
            (
                bool redraw /**Flag corresponds to freeze/unfreeze of tree changes.*/
            );
            /**Returns  the number of column inserted in the tree.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfColumns
            (
            );
            /**Sets the on expand callback to the tree.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnExpandHandler
            (
                const NXOpen::BlockStyler::Tree::OnExpandCallback&  cb /**Callback*/
            );
            /**Sets the on insert column callback to the tree.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnInsertColumnHandler
            (
                const NXOpen::BlockStyler::Tree::OnInsertColumnCallback&  cb /**Callback.*/
            );
            /**Sets the state icon name callback.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetStateIconNameHandler
            (
                const NXOpen::BlockStyler::Tree::StateIconNameCallback&  cb /**Callback.*/
            );
            /** Sets the on insert node callback. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOnInsertNodeHandler
            (
                const NXOpen::BlockStyler::Tree::OnInsertNodeCallback&  cb /**Callback*/
            );
            /** Sets on pre select callback 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnPreSelectHandler
            (
                const NXOpen::BlockStyler::Tree::OnPreSelectCallback&  cb /**Callback*/
            );
            /** Sets on delete node callback 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOnDeleteNodeHandler
            (
                const NXOpen::BlockStyler::Tree::OnDeleteNodeCallback&  cb /**Callback.*/
            );
            /** Sets the on select node callback 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnSelectHandler
            (
                const NXOpen::BlockStyler::Tree::OnSelectCallback&  cb /**Callback.*/
            );
            /**Sets the on state change callback.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnStateChangeHandler
            (
                const NXOpen::BlockStyler::Tree::OnStateChangeCallback&  cb /**Callback*/
            );
            /**Sets the tool tip callback.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetToolTipTextHandler
            (
                const NXOpen::BlockStyler::Tree::ToolTipTextCallback&  cb /**Callback.*/
            );
            /**Sets the column sort callback.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetColumnSortHandler
            (
                const NXOpen::BlockStyler::Tree::ColumnSortCallback&  cb /**Callback*/
            );
            /**Sets the on-begin-label-edit callback
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnBeginLabelEditHandler
            (
                const NXOpen::BlockStyler::Tree::OnBeginLabelEditCallback&  cb /**Callback*/
            );
            /**Sets the on-end-label-edit callback
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnEndLabelEditHandler
            (
                const NXOpen::BlockStyler::Tree::OnEndLabelEditCallback&  cb /**Callback*/
            );
            /**Sets the node-edit-control callback
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAskEditControlHandler
            (
                const NXOpen::BlockStyler::Tree::AskEditControlCallback&  cb /**Callback*/
            );
            /** @brief Sets the options in edit-control. This method must be used
                   in BlockStyler.Tree.AskEditControlCallback to make available the options in edit-control.
                    

             
                  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetEditOptions
            (
                std::vector<NXString> & stringArray /**Options to be made availabe in edit-control*/,
                int defaultIndex /** Index for default selection. This is zero based, for instance if it is set to 1 then 2nd option is selected by default during edit operation.*/
            );
            /**Sets the on-end-label-edit callback
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnEditOptionSelectedHandler
            (
                const NXOpen::BlockStyler::Tree::OnEditOptionSelectedCallback&  cb /**Callback*/
            );
            /** Sets the on menu callback 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnMenuHandler
            (
                const NXOpen::BlockStyler::Tree::OnMenuCallback&  cb /**Callback.*/
            );
            /** Sets the on menu selection callback 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnMenuSelectionHandler
            (
                const NXOpen::BlockStyler::Tree::OnMenuSelectionCallback&  cb /**Callback.*/
            );
            /**Sets the callback handler for node drag
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetIsDragAllowedHandler
            (
                const NXOpen::BlockStyler::Tree::IsDragAllowedCallback&  cb /**Callback*/
            );
            /**Sets the callback handler for node drop
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetIsDropAllowedHandler
            (
                const NXOpen::BlockStyler::Tree::IsDropAllowedCallback&  cb /**Callback*/
            );
            /**Sets the callback handler for node drop
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnDropHandler
            (
                const NXOpen::BlockStyler::Tree::OnDropCallback&  cb /**Callback*/
            );
            /**Sets the callback handler for on drop menu.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOnDropMenuHandler
            (
                const NXOpen::BlockStyler::Tree::OnDropMenuCallback&  cb /**Callback*/
            );
            /** Sets the on select node callback 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetOnDefaultActionHandler
            (
                const NXOpen::BlockStyler::Tree::OnDefaultActionCallback&  cb /**Callback.*/
            );
            /** Creates the menu. Use @link BlockStyler::Tree::SetMenu BlockStyler::Tree::SetMenu@endlink  to set the created menu. @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::TreeListMenu * CreateMenu
            (
            );
            /** Sets the menu, resulting the menu to appear on the screen. This method must be used in callback which is intended to create
                    menu, such as BlockStyler.Tree.OnMenuCallback
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMenu
            (
                NXOpen::BlockStyler::TreeListMenu * menu /**Menu.*/
            );
            /**Copies the existing @link BlockStyler::Node BlockStyler::Node@endlink . The tree can copy either its own node or the node of another tree. 
                   The copied node can only be inserted into the tree which has copied that node. The column texts are not passed to the copied node. 
                 @return Copied node.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * CopyNode
            (
                NXOpen::BlockStyler::Node * sourceNode /**Source node. Can be node of other tree.*/
            );
            /**Returns  the CanStretchHeight. If true, height of list box will change.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CanStretchHeight
            (
            );
            /**Sets  the CanStretchHeight. If true, height of list box will change.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCanStretchHeight
            (
                bool stretchHeight /** stretchheight */ 
            );
            /**Returns  the Height
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int Height
            (
            );
            /**Sets  the Height
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHeight
            (
                int height /** height */ 
            );
            /**Returns  the Localize
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool Localize
            (
            );
            /**Sets  the Localize
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLocalize
            (
                bool localize /** localize */ 
            );
            /**Returns  the MaximumHeight
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int MaximumHeight
            (
            );
            /**Sets  the MaximumHeight
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumHeight
            (
                int maxHeight /** maxheight */ 
            );
            /**Returns  the MinimumHeight
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int MinimumHeight
            (
            );
            /**Sets  the MinimumHeight
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumHeight
            (
                int minHeight /** minheight */ 
            );
            /**Returns  the ScrollFrozenColumn. It specifies the number of columns to freeze while scrolling.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int ScrollFrozenColumn
            (
            );
            /**Sets  the ScrollFrozenColumn. It specifies the number of columns to freeze while scrolling.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetScrollFrozenColumn
            (
                int scrollFrozenColumn /** scrollfrozencolumn */ 
            );
            /**Returns  the ScrollLineNumber. It specifies the number of lines to scroll when the mouse wheel rotates.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int ScrollLineNumber
            (
            );
            /**Sets  the ScrollLineNumber. It specifies the number of lines to scroll when the mouse wheel rotates.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetScrollLineNumber
            (
                int scrollLineNumber /** scrolllinenumber */ 
            );
            /**Returns  the SelectionMode
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectionModeAsString
            (
            );
            /**Sets  the SelectionMode
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectionModeAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the SelectionMode
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetSelectionModeAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the SelectionMode @return Value to get from the property
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetSelectionModeMembers
            (
            );
            /**Returns  the ShowExpandCollapseMarker. If true, displays a sign as a marker alongside first node of the tree indicating if it is expanded or collapsed.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowExpandCollapseMarker
            (
            );
            /**Sets  the ShowExpandCollapseMarker. If true, displays a sign as a marker alongside first node of the tree indicating if it is expanded or collapsed.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetShowExpandCollapseMarker
            (
                bool show /** show */ 
            );
            /**Returns  the ShowHeader
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowHeader
            (
            );
            /**Sets  the ShowHeader
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetShowHeader
            (
                bool show /** show */ 
            );
            /**Returns  the ShowMultipleColumns
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowMultipleColumns
            (
            );
            /**Sets  the ShowMultipleColumns
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetShowMultipleColumns
            (
                bool show /** show */ 
            );
            /**Returns  the ShowToolTips
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowToolTips
            (
            );
            /**Sets  the ShowToolTips
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetShowToolTips
            (
                bool show /** show */ 
            );
            /**Returns  the SortRootNodes. If true, sorting of root nodes is allowed.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool SortRootNodes
            (
            );
            /**Sets  the SortRootNodes. If true, sorting of root nodes is allowed.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSortRootNodes
            (
                bool sort /** sort */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
