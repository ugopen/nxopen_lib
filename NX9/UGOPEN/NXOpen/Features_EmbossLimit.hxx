#ifndef NXOpen_FEATURES_EMBOSSLIMIT_HXX_INCLUDED
#define NXOpen_FEATURES_EMBOSSLIMIT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_EmbossLimit.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_EmbossLimit.hxx>
#include <NXOpen/Features_EmbossTarget.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class EmbossLimit;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class EmbossTarget;
    }
    namespace Features
    {
        class _EmbossLimitBuilder;
        class EmbossLimitImpl;
        /** Represents emboss start and end objects, meaning, targets and end-cap definitions.
                 <br>     
                This class provides methods to set and get the various emboss limit sub components.
                 <br>          
                 <br> 
                Following are default values and options:
                 <br>  
                 
                 <br> 
                <b>End-Cap Option</b>    @link  Features::EmbossLimit::EndcapMethodOffsetExact   Features::EmbossLimit::EndcapMethodOffsetExact @endlink 
                 <br>                 
                 <br> 
                <b>End-Cap Source Option</b>    @link  Features::EmbossLimit::EndcapSourceOptionTarget   Features::EmbossLimit::EndcapSourceOptionTarget @endlink 
                 <br>                 
                 <br> 
                <b>Emboss Target</b> (array)    EmbossTarget object
                 <br> 
                 <br> 
                <b>End-Cap Direction</b>    Translate direction 
                 <br> 
                 <br> 
                <b>Distance</b> (translate or offset)    2.0/5.0[in/mm]
                 <br> 
            
            
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  EmbossLimit : public TaggedObject
        {
            /** Describes the method that can be applied to the selected geometry to define the End-Cap. */
            public: enum EndcapMethod
            {
                EndcapMethodTranslation/** Indicates End-Cap geometry is a translation along a user controlled vector. */,
                EndcapMethodOffsetExact/** Indicates End-Cap geometry is formulated as an exact offset of the selected End-Cap geometry. Default creation. */,
                EndcapMethodOffsetApproximation/** Indicates End-Cap geometry is formulated as an approximate offset of the selected End-Cap geometry */,
                EndcapMethodNone/** Indicates End-Cap geometry is formulated by the selected geometry without displacement. */
            };

            /** Describes the geometry that is used to create the End-Cap face/body.*/
            public: enum EndcapSourceOption
            {
                EndcapSourceOptionTarget/** Indicates the geometries are some of the faces on the Target Body. Default creation. */,
                EndcapSourceOptionPlane/** Indicates the geometry is datum plane.*/,
                EndcapSourceOptionSection/** Indicates the geometry is the sketch plane on which the section resides. */,
                EndcapSourceOptionFace/** Indicates the geometries are selected surfaces not on the target. */
            };

            private: EmbossLimitImpl * m_embosslimit_impl;
            private: friend class  _EmbossLimitBuilder;
            protected: EmbossLimit();
            public: ~EmbossLimit();
            /**Sets  the endcap method to create the End-Cap 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndcapOption
            (
                NXOpen::Features::EmbossLimit::EndcapMethod endcapOption /** The End-Cap method to create the End-Cap. */
            );
            /**Returns  the endcap method to create the End-Cap 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EmbossLimit::EndcapMethod EndcapOption
            (
            );
            /**Sets  the endcap source option to decide where the End-Cap comes from
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndcapSource
            (
                NXOpen::Features::EmbossLimit::EndcapSourceOption endcapSourceOption /** The End-Cap source option to decide where the End-Cap comes from. */
            );
            /**Returns  the endcap source option to decide where the End-Cap comes from
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EmbossLimit::EndcapSourceOption EndcapSource
            (
            );
            /** The emboss targets 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargets
            (
                const std::vector<NXOpen::Features::EmbossTarget *> & targets /**Array of EmbossTarget object. In NX4, only one target is supported.*/
            );
            /** The emboss targets @return Array of EmbossTarget object. In NX4, only one target is supported.
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Features::EmbossTarget *> GetTargets
            (
            );
            /**Sets  the direction for translation
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDirection
            (
                NXOpen::Direction * direction /** The direction for translation. */
            );
            /**Returns  the direction for translation
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Direction
            (
            );
            /** The default distance expression formula string for offset or translation
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistance
            (
                const NXString & distance /** The default distance expression formula string for offset or translation. */
            );
            /** The default distance expression formula string for offset or translation
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetDistance
            (
                const char * distance /** The default distance expression formula string for offset or translation. */
            );
            /**Returns  the default distance for offset or translation
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Distance
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
