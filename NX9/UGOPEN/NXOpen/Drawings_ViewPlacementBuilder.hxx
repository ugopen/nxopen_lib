#ifndef NXOpen_DRAWINGS_VIEWPLACEMENTBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWPLACEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewPlacementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ViewPlacementBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ViewPlacementBuilder;
    }
    class Direction;
    namespace Drawings
    {
        class SelectDraftingView;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class SelectNXObject;
    class SelectTaggedObject;
    namespace Drawings
    {
        class _ViewPlacementBuilderBuilder;
        class ViewPlacementBuilderImpl;
        /**
            Represents a @link Drawings::ViewPlacementBuilder Drawings::ViewPlacementBuilder@endlink .  This class
            is used to define the origin of a view.
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ViewPlacementBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** view method */
            public: enum Method
            {
                MethodInfer/** Infer the view position */,
                MethodHorizontal/** Align the view horizontally to another view */,
                MethodVertical/** Align the view vertically to another view */,
                MethodPerpendicularToLine/** Align the view along some line to another view */,
                MethodOverlay/** Align the view on top of another view */,
                MethodPerpendicularToHingeLine/** Align the view along the hinge line */,
                MethodMax/** Should be the last enum in the list */
            };

            /** view option */
            public: enum Option
            {
                OptionToView/** Align to the view centers */,
                OptionModelPoint/** Align to the same point in the alignment view and the view being edited */,
                OptionPointToPoint/** Align a point in the alignment view to another point in the view being edited */
            };

            private: ViewPlacementBuilderImpl * m_viewplacementbuilder_impl;
            private: friend class  _ViewPlacementBuilderBuilder;
            protected: ViewPlacementBuilder();
            public: ~ViewPlacementBuilder();
            /**Returns  the placement location.  The location may be specified by either
                        selecting an object of @link Point Point@endlink  class or not
                        selecting an object and specifying a @link Point3d Point3d@endlink 
                        selected object point.  If the alignment method is set to
                        @link Drawings::ViewPlacementBuilder::MethodInfer Drawings::ViewPlacementBuilder::MethodInfer@endlink 
                        then the location defines the position of the view's center.
                        The location is not necessarily the position of the view.
                        The location provides a hint point that helps determine the view's
                        position based on the alignment method and alignment point specified. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * Placement
            (
            );
            /**Returns  the alignment method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewPlacementBuilder::Method AlignmentMethod
            (
            );
            /**Sets  the alignment method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAlignmentMethod
            (
                NXOpen::Drawings::ViewPlacementBuilder::Method alignmentMethod /** alignmentmethod */ 
            );
            /**Returns  the vector to align along.  The vector is only required for the
                        @link Drawings::ViewPlacementBuilder::MethodPerpendicularToLine Drawings::ViewPlacementBuilder::MethodPerpendicularToLine@endlink  alignment
                        method.  The vector must be set regardless of the alignment option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * AlignmentVector
            (
            );
            /**Sets  the vector to align along.  The vector is only required for the
                        @link Drawings::ViewPlacementBuilder::MethodPerpendicularToLine Drawings::ViewPlacementBuilder::MethodPerpendicularToLine@endlink  alignment
                        method.  The vector must be set regardless of the alignment option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAlignmentVector
            (
                NXOpen::Direction * alignmentVector /** alignmentvector */ 
            );
            /**Returns  the alignment option used to indicate what points in the views to align.
                        The alignment option is not used when the alignment method is set
                        to @link Drawings::ViewPlacementBuilder::MethodInfer Drawings::ViewPlacementBuilder::MethodInfer@endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewPlacementBuilder::Option AlignmentOption
            (
            );
            /**Sets  the alignment option used to indicate what points in the views to align.
                        The alignment option is not used when the alignment method is set
                        to @link Drawings::ViewPlacementBuilder::MethodInfer Drawings::ViewPlacementBuilder::MethodInfer@endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAlignmentOption
            (
                NXOpen::Drawings::ViewPlacementBuilder::Option alignmentOption /** alignmentoption */ 
            );
            /**Returns  the view to align to.  The view is required for all alignment
                        options.  The view is required for all alignment methods except for
                        @link Drawings::ViewPlacementBuilder::MethodInfer Drawings::ViewPlacementBuilder::MethodInfer@endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SelectDraftingView * AlignmentView
            (
            );
            /**Returns  the point to align to.  This point is only required for the
                        @link Drawings::ViewPlacementBuilder::OptionModelPoint Drawings::ViewPlacementBuilder::OptionModelPoint@endlink  and
                        @link Drawings::ViewPlacementBuilder::OptionPointToPoint Drawings::ViewPlacementBuilder::OptionPointToPoint@endlink  alignment options.
                        The point is required for all alignment methods except for
                        @link Drawings::ViewPlacementBuilder::MethodInfer Drawings::ViewPlacementBuilder::MethodInfer@endlink .
                        This point may be specified by either selecting an object of
                        @link Point Point@endlink  class or not selecting an object and specifying
                        a @link Point3d Point3d@endlink  selected object point.   
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObject * AlignmentPoint
            (
            );
            /**Returns  the point to align in the view being edited.  This point is only
                        required for the @link Drawings::ViewPlacementBuilder::OptionPointToPoint Drawings::ViewPlacementBuilder::OptionPointToPoint@endlink 
                        alignment option.  The point is required for all alignment methods
                        except @link Drawings::ViewPlacementBuilder::MethodInfer Drawings::ViewPlacementBuilder::MethodInfer@endlink .
                        This point may be specified by either selecting an object of
                        @link Point Point@endlink  class or not selecting an object and specifying
                        a @link Point3d Point3d@endlink  selected object point. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObject * CandidatePoint
            (
            );
            /**Returns  the lock offset flag.  Use the offset property if this flag is set
                        to true. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool LockOffset
            (
            );
            /**Sets  the lock offset flag.  Use the offset property if this flag is set
                        to true. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLockOffset
            (
                bool lockOffset /** lockoffset */ 
            );
            /**Returns  the offset.  If the lock offset flag is set to true then the offset
                        will be applied.  The offset has no meaning when used with the
                        @link Drawings::ViewPlacementBuilder::MethodOverlay Drawings::ViewPlacementBuilder::MethodOverlay@endlink .  If the
                        @link Drawings::ViewPlacementBuilder::MethodInfer Drawings::ViewPlacementBuilder::MethodInfer@endlink  method is set, then the offset
                        is defined as the distance from the view to its parent view.
                        For all other methods, the offset is defined as the distance along
                        the line being aligned to. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double Offset
            (
            );
            /**Sets  the offset.  If the lock offset flag is set to true then the offset
                        will be applied.  The offset has no meaning when used with the
                        @link Drawings::ViewPlacementBuilder::MethodOverlay Drawings::ViewPlacementBuilder::MethodOverlay@endlink .  If the
                        @link Drawings::ViewPlacementBuilder::MethodInfer Drawings::ViewPlacementBuilder::MethodInfer@endlink  method is set, then the offset
                        is defined as the distance from the view to its parent view.
                        For all other methods, the offset is defined as the distance along
                        the line being aligned to. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOffset
            (
                double offset /** offset */ 
            );
            /**Returns  the flag used to create a persistent alignment 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: bool Associative
            (
            );
            /**Sets  the flag used to create a persistent alignment 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
