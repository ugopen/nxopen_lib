#ifndef NXOpen_DIE_UNCUTREGIONSBUILDER_HXX_INCLUDED
#define NXOpen_DIE_UNCUTREGIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_UncutRegionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Die_UncutRegionsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class UncutRegionsBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class Section;
    namespace Die
    {
        class _UncutRegionsBuilderBuilder;
        class UncutRegionsBuilderImpl;
        /** Calculates the uncut regions of a curve given a radius value for the cut tool.  <br> To create a new instance of this class, use @link Die::DieCollection::CreateUncutRegionsBuilder  Die::DieCollection::CreateUncutRegionsBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  UncutRegionsBuilder : public Builder
        {
            /** Indicates which side of curve to check */
            public: enum ResultsType
            {
                ResultsTypeOneSide/** Find uncut regions on one side only */,
                ResultsTypeBothSides/** Find uncut regions on both sides of curve */
            };

            private: UncutRegionsBuilderImpl * m_uncutregionsbuilder_impl;
            private: friend class  _UncutRegionsBuilderBuilder;
            protected: UncutRegionsBuilder();
            public: ~UncutRegionsBuilder();
            /**Returns  the curves to check for uncut regions. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * Curves
            (
            );
            /**Returns  the tool axis. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ToolAxis
            (
            );
            /**Sets  the tool axis. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetToolAxis
            (
                NXOpen::Direction * toolAxis /** toolaxis */ 
            );
            /**Returns  the expression that contains the tool radius. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ToolSize
            (
            );
            /**Returns  the side of the curve to show the results. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::UncutRegionsBuilder::ResultsType Results
            (
            );
            /**Sets  the side of the curve to show the results. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetResults
            (
                NXOpen::Die::UncutRegionsBuilder::ResultsType results /** results */ 
            );
            /** Reverse the tool side 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void ReverseSide
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
