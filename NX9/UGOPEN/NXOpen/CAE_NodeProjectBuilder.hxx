#ifndef NXOpen_CAE_NODEPROJECTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_NODEPROJECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_NodeProjectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_NodeProjectBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class NodeProjectBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectFENodeList;
    }
    class Direction;
    class SelectTaggedObject;
    namespace CAE
    {
        class _NodeProjectBuilderBuilder;
        class NodeProjectBuilderImpl;
        /**
            Represents a @link CAE::NodeProjectBuilder CAE::NodeProjectBuilder@endlink 
             <br> To create a new instance of this class, use @link CAE::NodeElementManager::CreateNodeProjectBuilder  CAE::NodeElementManager::CreateNodeProjectBuilder @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  NodeProjectBuilder : public Builder
        {
            /** Represents the node project types */
            public: enum NodeProjectTypes
            {
                NodeProjectTypesProjectOnly/**project only */,
                NodeProjectTypesCopyAndProject/**copy and project */
            };

            /** Represents Projection Method */
            public: enum ProjectionMethodType
            {
                ProjectionMethodTypeByDirection/** By Direction*/,
                ProjectionMethodTypeShotestDistance/** along shortest distance*/
            };

            /**  Option to use label/increment or offset */
            public: enum LabelType
            {
                LabelTypeLabel/** label/increment*/,
                LabelTypeOffset/** offset*/
            };

            private: NodeProjectBuilderImpl * m_nodeprojectbuilder_impl;
            private: friend class  _NodeProjectBuilderBuilder;
            protected: NodeProjectBuilder();
            public: ~NodeProjectBuilder();
            /**Returns  the selected nodes to be extruded
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectFENodeList * Nodes
            (
            );
            /**Returns  the geometry on which projection will happen 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObject * Geometry
            (
            );
            /**Returns  the percent offset 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double PercentOffset
            (
            );
            /**Sets  the percent offset 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPercentOffset
            (
                double percentOffset /** percentoffset */ 
            );
            /**Returns  the method option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::NodeProjectBuilder::ProjectionMethodType MethodOption
            (
            );
            /**Sets  the method option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMethodOption
            (
                NXOpen::CAE::NodeProjectBuilder::ProjectionMethodType methodOption /** methodoption */ 
            );
            /**Returns  the vector along which projection will happen
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector along which projection will happen
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the projection tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the projection tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetTolerance
            (
                double tol /** tol */ 
            );
            /**Returns  the label option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::NodeProjectBuilder::LabelType LabelOption
            (
            );
            /**Sets  the label option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabelOption
            (
                NXOpen::CAE::NodeProjectBuilder::LabelType labelOption /** labeloption */ 
            );
            /**Returns  the label 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int Label
            (
            );
            /**Sets  the label 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabel
            (
                int label /** label */ 
            );
            /**Returns  the increment 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int Increment
            (
            );
            /**Sets  the increment 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetIncrement
            (
                int increment /** increment */ 
            );
            /**Returns  the offset 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int Offset
            (
            );
            /**Sets  the offset 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetOffset
            (
                int offset /** offset */ 
            );
            /**Returns  the copy option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::NodeProjectBuilder::NodeProjectTypes CopyOption
            (
            );
            /**Sets  the copy option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCopyOption
            (
                NXOpen::CAE::NodeProjectBuilder::NodeProjectTypes methodOption /** methodoption */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
