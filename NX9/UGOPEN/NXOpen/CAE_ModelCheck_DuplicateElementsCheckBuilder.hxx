#ifndef NXOpen_CAE_MODELCHECK_DUPLICATEELEMENTSCHECKBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELCHECK_DUPLICATEELEMENTSCHECKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelCheck_DuplicateElementsCheckBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ModelCheck_DuplicateElementsCheckBuilder.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/NXColor.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace ModelCheck
        {
            class DuplicateElementsCheckBuilder;
        }
    }
    class Builder;
    namespace CAE
    {
        class FEElement;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class NXColor;
    class SelectTaggedObjectList;
    namespace CAE
    {
        namespace ModelCheck
        {
            class _DuplicateElementsCheckBuilderBuilder;
            class DuplicateElementsCheckBuilderImpl;
            /** Represents a @link CAE::ModelCheck::DuplicateElementsCheckBuilder CAE::ModelCheck::DuplicateElementsCheckBuilder@endlink 
                        to check for duplicate elements within the candidate elements.
                         <br> 
                        Duplicate elements are elements which share the same corner nodes,but do not include
                        the middle nodes.
                         <br> 
                        The general workflow is:
                        <ol>
                        <li> Set the candidate elements </li>
                        <li> Set the display settings data </li>
                        <li> Identify the duplicate elements </li>
                        <li> Set the preference option </li>
                        <li> Delete the duplicate elements </li>
                        </ol>
                        You can delete duplicate elements through @link Builder::Commit Builder::Commit@endlink  or
                        @link CAE::ModelCheck::DuplicateElementsCheckBuilder::DeleteDuplicateElements CAE::ModelCheck::DuplicateElementsCheckBuilder::DeleteDuplicateElements@endlink .
                        Commits the builder to delete duplicate elements.
                    
             <br>  Created in NX8.5.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  DuplicateElementsCheckBuilder : public Builder
            {
                /** Represents the duplicate elements deleting preference */
                public: enum DeletePreference
                {
                    DeletePreferenceKeepHighLabel/** Keep the elements with higher labels */,
                    DeletePreferenceKeepLowLabel/** Keep the elements with lower labels */,
                    DeletePreferenceKeepSelected/** Keep the elements specified in the element list
                                                                                                                     @link CAE::ModelCheck::DuplicateElementsCheckBuilder::PreferenceElements CAE::ModelCheck::DuplicateElementsCheckBuilder::PreferenceElements @endlink and @link CAE::ModelCheck::DuplicateElementsCheckBuilder::SetPreferenceElements CAE::ModelCheck::DuplicateElementsCheckBuilder::SetPreferenceElements @endlink  */,
                    DeletePreferenceRemoveSelected/** Delete the elements specified in the element list
                                                                                                                     @link CAE::ModelCheck::DuplicateElementsCheckBuilder::PreferenceElements CAE::ModelCheck::DuplicateElementsCheckBuilder::PreferenceElements @endlink and @link CAE::ModelCheck::DuplicateElementsCheckBuilder::SetPreferenceElements CAE::ModelCheck::DuplicateElementsCheckBuilder::SetPreferenceElements @endlink  */
                };

                 /** Represents the display settings of duplicated elements detected */
                public:
                struct  DisplaySettings
                {
                    public: /** Whether to show duplicate elements */bool ShowDuplicateElements;
                    public: /** Whether to show labels of duplicate elements */bool ShowElementLabels;
                    public: /** The display color of duplicate elements */NXColor* ElementsColor;
                    public: /** The display line width of duplicate elements */NXOpen::DisplayableObject::ObjectWidth ElementsWidth;
                    public: DisplaySettings() :
                        ShowDuplicateElements(),
                        ShowElementLabels(),
                        ElementsColor(),
                        ElementsWidth((NXOpen::DisplayableObject::ObjectWidth)0)
                    {
                    }
                    /** Constructor for the DisplaySettings struct. */ 
                    public: DisplaySettings(bool showDuplicateElementsInitial /** Whether to show duplicate elements */, 
                            bool showElementLabelsInitial /** Whether to show labels of duplicate elements */, 
                            NXColor* elementsColorInitial /** The display color of duplicate elements */, 
                            NXOpen::DisplayableObject::ObjectWidth elementsWidthInitial /** The display line width of duplicate elements */) :
                        ShowDuplicateElements(showDuplicateElementsInitial),
                        ShowElementLabels(showElementLabelsInitial),
                        ElementsColor(elementsColorInitial),
                        ElementsWidth(elementsWidthInitial)
                    {
                    }
                };

                private: DuplicateElementsCheckBuilderImpl * m_duplicateelementscheckbuilder_impl;
                private: friend class  _DuplicateElementsCheckBuilderBuilder;
                protected: DuplicateElementsCheckBuilder();
                public: ~DuplicateElementsCheckBuilder();
                /**Returns  the selected objects to be checked. The objects must be @link CAE::Mesh CAE::Mesh@endlink  or
                                @link CAE::FEElement CAE::FEElement@endlink  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectTaggedObjectList * SelectionList
                (
                );
                /**Returns  the display settings for duplicate elements 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::ModelCheck::DuplicateElementsCheckBuilder::DisplaySettings DisplaySettingsData
                (
                );
                /**Sets  the display settings for duplicate elements 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetDisplaySettingsData
                (
                    const NXOpen::CAE::ModelCheck::DuplicateElementsCheckBuilder::DisplaySettings & displaySettings /** Display settings data */
                );
                /** Calculates to find the duplicate elements and display them in the
                                @link CAE::ModelCheck::DuplicateElementsCheckBuilder::DisplaySettings CAE::ModelCheck::DuplicateElementsCheckBuilder::DisplaySettings@endlink .
                                The detected duplicate elements are cached, to access the cached calculation result, you could use
                                @link CAE::ModelCheck::DuplicateElementsCheckBuilder::DuplicateElementGroupsCount CAE::ModelCheck::DuplicateElementsCheckBuilder::DuplicateElementGroupsCount @endlink and @link CAE::ModelCheck::DuplicateElementsCheckBuilder::SetDuplicateElementGroupsCount CAE::ModelCheck::DuplicateElementsCheckBuilder::SetDuplicateElementGroupsCount @endlink  and
                                @link CAE::ModelCheck::DuplicateElementsCheckBuilder::GetDuplicateElements CAE::ModelCheck::DuplicateElementsCheckBuilder::GetDuplicateElements@endlink . The previous
                                cached data will be cleaned automatically when you start a new identification. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void IdentifyDuplicateElements
                (
                );
                /**Returns  the duplicate elements group count, each group contains elements that are
                                duplicates of each other and each group contains at least two duplicate elements 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: int DuplicateElementGroupsCount
                (
                );
                /** Returns the duplicate elements of specified group index  @return  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: std::vector<NXOpen::CAE::FEElement *> GetDuplicateElements
                (
                    int groupIndex /** groupindex */ 
                );
                /**Returns  the duplicate elements deleting preference 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::ModelCheck::DuplicateElementsCheckBuilder::DeletePreference Preference
                (
                );
                /**Sets  the duplicate elements deleting preference 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetPreference
                (
                    NXOpen::CAE::ModelCheck::DuplicateElementsCheckBuilder::DeletePreference deletePreference /** Delete elements preference */
                );
                /**Returns  the preference elements for keep selected and remove selected options 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: NXOpen::CAE::SelectElementsBuilder * PreferenceElements
                (
                );
                /** Deletes the duplicate elements and clear all cached duplicate elements in this builder.
                                The method @link Builder::Commit Builder::Commit@endlink  will also do the same thing. Duplicate elements
                                can only be deleted when the context part of this builder is a @link CAE::BaseFemPart CAE::BaseFemPart@endlink  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void DeleteDuplicateElements
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
