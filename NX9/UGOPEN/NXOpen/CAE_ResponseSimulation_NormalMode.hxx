#ifndef NXOpen_CAE_RESPONSESIMULATION_NORMALMODE_HXX_INCLUDED
#define NXOpen_CAE_RESPONSESIMULATION_NORMALMODE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResponseSimulation_NormalMode.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class NormalMode;
        }
    }
    class NXObject;
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class _NormalModeBuilder;
            class NormalModeImpl;
            /** Represents the properties of one normal mode 
             <br>  Created in NX5.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  NormalMode : public NXObject
            {
                private: NormalModeImpl * m_normalmode_impl;
                private: friend class  _NormalModeBuilder;
                protected: NormalMode();
                public: ~NormalMode();
                /** Returns mode ID  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: int GetModeId
                (
                );
                /** Returns the natrual frequency of the normal mode  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double GetFrequency
                (
                );
                /** Returns the stiffeness of the normal mode  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double GetStiffeness
                (
                );
                /** Returns the mass of the normal mode  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double GetMass
                (
                );
                /** Returns the percent mass of X direction component  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double GetXMass
                (
                );
                /** Returns the percent mass of Y direction component  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double GetYMass
                (
                );
                /** Returns the percent mass of Z direction component  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double GetZMass
                (
                );
                /** Returns the percent mass of Rx direction component  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double GetRxMass
                (
                );
                /** Returns the percent mass of Ry direction component  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double GetRyMass
                (
                );
                /** Returns the percent mass of Rz direction component  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double GetRzMass
                (
                );
                /**Returns  the viscous factor 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double Viscous
                (
                );
                /**Sets  the viscous factor 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetViscous
                (
                    double viscous /** viscous */ 
                );
                /**Returns  the hysteretic factor 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double Hysteretic
                (
                );
                /**Sets  the hysteretic factor 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetHysteretic
                (
                    double hysteretic /** hysteretic */ 
                );
                /**Returns  the activate status 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool Active
                (
                );
                /**Sets  the activate status 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetActive
                (
                    bool active /** active */ 
                );
                /** Returns the physical viscous factor  @return  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double GetPhysicalViscous
                (
                );
                /** Returns the physical hysteretic factor  @return  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double GetPhysicalHysteretic
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
