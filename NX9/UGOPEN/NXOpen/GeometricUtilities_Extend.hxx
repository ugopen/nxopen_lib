#ifndef NXOpen_GEOMETRICUTILITIES_EXTEND_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_EXTEND_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_Extend.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class Extend;
    }
    class DisplayableObject;
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _ExtendBuilder;
        class ExtendImpl;
        /** Represents an extend data. 
            
         <br>  Created in NX3.0.1.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  Extend : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This enum represents the type of extend */
            public: enum ExtendType
            {
                ExtendTypeValue/** value */ ,
                ExtendTypeUntilNext/** until next */ ,
                ExtendTypeUntilSelected/** until selected */ ,
                ExtendTypeUntilExtended/** until extended */ ,
                ExtendTypeThroughAll/** through all */ ,
                ExtendTypeSymmetric/** symmetric */ ,
                ExtendTypePercent/** percent */ ,
                ExtendTypeArcLength/** arc length */ ,
                ExtendTypeThruPoint/** thru point */ 
            };

            private: ExtendImpl * m_extend_impl;
            private: friend class  _ExtendBuilder;
            protected: Extend();
            public: ~Extend();
            /**Sets  the extend target for the following types
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected@endlink .  
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilExtended NXOpen::GeometricUtilities::Extend::ExtendTypeUntilExtended@endlink .  
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilNext NXOpen::GeometricUtilities::Extend::ExtendTypeUntilNext@endlink .  
                    
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTarget
            (
                NXOpen::DisplayableObject * selectedObject /** For @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected@endlink 
                                                                                    it can be face, solid body,sheet body and datums.*/
            );
            /**Returns  the extend target for the following types
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected@endlink .  
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilExtended NXOpen::GeometricUtilities::Extend::ExtendTypeUntilExtended@endlink .  
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilNext NXOpen::GeometricUtilities::Extend::ExtendTypeUntilNext@endlink .  
                    
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject * Target
            (
            );
            /**Sets  the extend type 
                        @link NXOpen::GeometricUtilities::Extend::ExtendType NXOpen::GeometricUtilities::Extend::ExtendType@endlink .
                    
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimType
            (
                NXOpen::GeometricUtilities::Extend::ExtendType extendType /** extend type */ 
            );
            /**Returns  the extend type 
                        @link NXOpen::GeometricUtilities::Extend::ExtendType NXOpen::GeometricUtilities::Extend::ExtendType@endlink .
                    
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Extend::ExtendType TrimType
            (
            );
            /**Returns  the extend value for the following type
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeValue NXOpen::GeometricUtilities::Extend::ExtendTypeValue@endlink .
                    
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * Value
            (
            );
            /** Set extend value for the following type
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeValue NXOpen::GeometricUtilities::Extend::ExtendTypeValue@endlink .
                    
             <br>  @deprecated Deprecated in NX8.5.0.  To set the value of the expression modify the expression directly using @link GeometricUtilities::Extend::Value GeometricUtilities::Extend::Value@endlink  and @link Expression::SetRightHandSide Expression::SetRightHandSide@endlink . <br>  

             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  To set the value of the expression modify the expression directly using GeometricUtilities::Extend::Value and Expression::SetRightHandSide.") void SetValue
            (
                const NXString & valueExpression /** For @link NXOpen::GeometricUtilities::Extend::ExtendTypeValue NXOpen::GeometricUtilities::Extend::ExtendTypeValue@endlink   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set extend value for the following type
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeValue NXOpen::GeometricUtilities::Extend::ExtendTypeValue@endlink .
                    
             <br>  @deprecated Deprecated in NX8.5.0.  To set the value of the expression modify the expression directly using @link GeometricUtilities::Extend::Value GeometricUtilities::Extend::Value@endlink  and @link Expression::SetRightHandSide Expression::SetRightHandSide@endlink . <br>  

             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetValue
            (
                const char * valueExpression /** For @link NXOpen::GeometricUtilities::Extend::ExtendTypeValue NXOpen::GeometricUtilities::Extend::ExtendTypeValue@endlink   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
