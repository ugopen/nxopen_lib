#ifndef NXOpen_FEATURES_CYLINDERBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_CYLINDERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_CylinderBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_CylinderBuilder.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class CylinderBuilder;
    }
    class Axis;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    class SelectICurve;
    namespace Features
    {
        class _CylinderBuilderBuilder;
        class CylinderBuilderImpl;
        /**
            Represents a @link Features::Cylinder Features::Cylinder@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateCylinderBuilder  Features::FeatureCollection::CreateCylinderBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BooleanOption.Type </td> <td> 
         
        Create </td> </tr> 

        <tr><td> 
         
        Diameter.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        Height.Value </td> <td> 
         
        100.0 (millimeters part), 4.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ReverseDirection </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        AxisDiameterAndHeight </td> </tr> 

        </table>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  CylinderBuilder : public Features::FeatureBuilder
        {
            /** the cylinder types */
            public: enum Types
            {
                TypesAxisDiameterAndHeight/** Axis, Diameter and Height */,
                TypesArcAndHeight/** Arc and Height */
            };

            private: CylinderBuilderImpl * m_cylinderbuilder_impl;
            private: friend class  _CylinderBuilderBuilder;
            protected: CylinderBuilder();
            public: ~CylinderBuilder();
            /**Returns  the type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::CylinderBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: void SetType
            (
                NXOpen::Features::CylinderBuilder::Types type /** type */ 
            );
            /**Returns  the axis 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * Axis
            (
            );
            /**Sets  the axis 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: void SetAxis
            (
                NXOpen::Axis * axis /** axis */ 
            );
            /**Returns  the diameter. This will be used only when the law type is Axis, Diameter, and Height 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Diameter
            (
            );
            /**Returns  the height 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the boolean option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOption
            (
            );
            /**Returns  the arc 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectICurve * Arc
            (
            );
            /**Returns  the reverse direction
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: void SetReverseDirection
            (
                bool reverse /** reverse */ 
            );
            /**Returns  the cylinder origin
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Point3d Origin
            (
            );
            /**Sets  the cylinder origin
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: void SetOrigin
            (
                const NXOpen::Point3d & origin /** origin */ 
            );
            /**Returns  the cylinder direction
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: NXOpen::Vector3d Direction
            (
            );
            /**Sets  the cylinder direction
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: void SetDirection
            (
                const NXOpen::Vector3d & vector /** vector */ 
            );
            /**Returns  the option to keep associativity of the cylinder axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ParentAssociativity
            (
            );
            /**Sets  the option to keep associativity of the cylinder axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
            public: void SetParentAssociativity
            (
                bool parentAssociativity /** parentassociativity */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
