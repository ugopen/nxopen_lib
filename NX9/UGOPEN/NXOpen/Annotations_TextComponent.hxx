#ifndef NXOpen_ANNOTATIONS_TEXTCOMPONENT_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_TEXTCOMPONENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_TextComponent.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class TextComponent;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class TextComponentImpl;
        /** Represents a single text in an annotation and can be queried for 
                information about that text. This information includes the type of text, the number 
                of lines of text, the lines of text, and the origin in absolute coordinates. 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  TextComponent : public TransientObject
        {
            /** the text type. */
            public: enum TextType
            {
                TextTypeText/** primary dimension text or main text for draft aids     */,
                TextTypeDualDimension/** dual dimension text                                    */,
                TextTypeTolerance/** tolerance text                                         */,
                TextTypeDualTolerance/** dual tolerance text                                    */,
                TextTypeDiameterRadius/** diameter or radius or arc length symbol text           */,
                TextTypeAppendedAbove/** appended text above                                    */,
                TextTypeAppendedBelow/** appended text below                                    */,
                TextTypeAppendedBefore/** appended text before                                   */,
                TextTypeAppendedAfter/** appended text after                                    */,
                TextTypeChamferBefore/** chamfer text before                                    */,
                TextTypeChamferAfter/** chamfer text after                                     */,
                TextTypeChamferSize/** chamfer size text                                      */,
                TextTypeChamferXSymbol/** chamfer x symbol text                                  */,
                TextTypeChamferAngle/** chamfer angle symbol text                              */
            };

            private: TextComponentImpl * m_textcomponent_impl;
            /// \cond NX_NO_DOC 
            public: explicit TextComponent(void *ptr);
            /// \endcond 
            /** Free resources associated with the text component. After this method
                    is called, it is illegal to use the object.  In .NET, this method
                    is automatically called when the object is deleted by the garbage
                    collector.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~TextComponent();
            /**Returns  the text type.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TextComponent::TextType Type
            (
            );
            /** Gets all of the text for the text component. @return  the lines of text 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetText
            (
            );
            /**Returns  the number of lines of text.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberLines
            (
            );
            /**Returns  the text origin in absolute coordinates.
                    If the annotation is on a drawing, origin is returned 
                    in drawing space. If the annotation is on the model,
                    origin is returned in model space. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d Origin
            (
            );
            /**Returns  the text height.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double Height
            (
            );
            /**Returns  the text length.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double Length
            (
            );
            /** The text integerized length. @return  the text integerized length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int GetIntegerizedLength
            (
                int nth /** the nth text. nth starts with 0. */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
