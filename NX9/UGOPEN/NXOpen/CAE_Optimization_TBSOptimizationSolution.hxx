#ifndef NXOpen_CAE_OPTIMIZATION_TBSOPTIMIZATIONSOLUTION_HXX_INCLUDED
#define NXOpen_CAE_OPTIMIZATION_TBSOPTIMIZATIONSOLUTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Optimization_TBSOptimizationSolution.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Optimization_TBSDesignArea.hxx>
#include <NXOpen/CAE_Optimization_TBSObjectives.hxx>
#include <NXOpen/CAE_Optimization_TBSOptimizationParameters.hxx>
#include <NXOpen/CAE_Optimization_TBSOptimizationSolution.hxx>
#include <NXOpen/CAE_Optimization_TBSOutputControlOptions.hxx>
#include <NXOpen/CAE_Optimization_TBSSmooth.hxx>
#include <NXOpen/CAE_Optimization_TBSStopCondition.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Optimization
        {
            class TBSOptimizationSolution;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSConstraintCollection;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSDesignArea;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSDesignVariableCollection;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSObjectives;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSOptimizationParameters;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSOutputControlOptions;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSRestrictAreaCollection;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSSmooth;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSSmoothCollection;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSStopCondition;
        }
    }
    class NXObject;
    class TaggedObject;
    namespace CAE
    {
        namespace Optimization
        {
            class _TBSOptimizationSolutionBuilder;
            class TBSOptimizationSolutionImpl;
            /** Represents the solution to contain optimization setting  <br> This is an abstract class, and cannot be created.  <br> 
             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  TBSOptimizationSolution : public NXObject
            {
                /** Define the status of optimization result */
                public: enum ResultStatus
                {
                    ResultStatusValid/** The result is valid */,
                    ResultStatusOutOfDate/** The result is out-of-date */,
                    ResultStatusInvalid/** The result is invalid */
                };

                private: TBSOptimizationSolutionImpl * m_tbsoptimizationsolution_impl;
                private: friend class  _TBSOptimizationSolutionBuilder;
                protected: TBSOptimizationSolution();
                public: ~TBSOptimizationSolution();
                /**Returns  the design area that will be modified during optimization
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSDesignArea * DesignArea
                (
                );
                /**Returns  the objective function of the optimization 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSObjectives * Objectives
                (
                );
                /**Returns  the stop condition to end the optimization 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSStopCondition * StopCondition
                (
                );
                /**Returns  the parameters to control optimization 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSOptimizationParameters * ControlParameters
                (
                );
                /**Returns  the output control options of the optimization 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSOutputControlOptions * OutputControlOptions
                (
                );
                /** Solves the optimization solution 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void Solve
                (
                );
                /** Returns the iteration number during the optimization  @return  
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetIterationNumber
                (
                );
                /** Returns the post result file name and status  @return  
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSOptimizationSolution::ResultStatus GetPostResult
                (
                    int iterationID /** iterationid */ ,
                    NXString* postResultName /** postresultname */ 
                );
                /** Returns the result file name and status for a specified smoothing setting  @return  
                 <br>  @deprecated Deprecated in NX8.5.0.  Use @link CAE::Optimization::TBSSmooth::GetResults CAE::Optimization::TBSSmooth::GetResults@endlink  instead. <br>  

                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use CAE::Optimization::TBSSmooth::GetResults instead.") NXOpen::CAE::Optimization::TBSOptimizationSolution::ResultStatus GetSmoothResult
                (
                    NXOpen::CAE::Optimization::TBSSmooth * smooth /** smooth */ ,
                    NXString* smoothResultName /** smoothresultname */ 
                );
                /** Finds the @link  TaggedObject   TaggedObject @endlink  with the given identifier as recorded in a journal.
                                In general, this method should not be used in handwritten code and exists to support record 
                                and playback of journals. An exception will be thrown if no object can be found with the given journal identifier.  @return  
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::TaggedObject * Find
                (
                    const NXString & journalIdentifier /** Journal identifier of the object */
                );
                /** Finds the @link  TaggedObject   TaggedObject @endlink  with the given identifier as recorded in a journal.
                                In general, this method should not be used in handwritten code and exists to support record 
                                and playback of journals. An exception will be thrown if no object can be found with the given journal identifier.  @return  
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::TaggedObject * Find
                (
                    const char * journalIdentifier /** Journal identifier of the object */
                );
                /** Rename Solution and optionally rename associated results files 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: void Rename
                (
                    const NXString & name /** new solution name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                    bool renameResults /** true if you what associated results files to be renamed as well  */
                );
                /** Rename Solution and optionally rename associated results files 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                void Rename
                (
                    const char * name /** new solution name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                    bool renameResults /** true if you what associated results files to be renamed as well  */
                );
                /** Deletes an optimization solution and the associated result file optional 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void Destroy
                (
                    bool deleteResult /**  true if you want associated result files to be deleted as well */
                );


                /** Represents the restrict area collection belonging to this optimization solution 
                 <br>  Created in NX8.0.0.  <br>  
                */
                public: NXOpen::CAE::Optimization::TBSRestrictAreaCollection *RestrictAreas();
                /** Represents the response constrain collection belonging to this optimization solution 
                 <br>  Created in NX8.0.0.  <br>  
                */
                public: NXOpen::CAE::Optimization::TBSConstraintCollection *Constraints();
                /** Represents the design variable collection belonging to this optimization solution 
                 <br>  Created in NX8.0.0.  <br>  
                */
                public: NXOpen::CAE::Optimization::TBSDesignVariableCollection *DesignVariables();
                /** Represents the smooth collection belonging to this optimization solution 
                 <br>  Created in NX8.0.0.  <br>  
                */
                public: NXOpen::CAE::Optimization::TBSSmoothCollection *Smoothings();
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
