#ifndef NXOpen_CAM_LASERCUTOUTDEFINITION_HXX_INCLUDED
#define NXOpen_CAM_LASERCUTOUTDEFINITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_LaserCutoutDefinition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class LaserCutoutDefinition;
    }
    class Point;
    class Section;
    namespace CAM
    {
        class _LaserCutoutDefinitionBuilder;
        class LaserCutoutDefinitionImpl;
        /** Represents cutout definition settings for laser move 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  LaserCutoutDefinition : public TaggedObject
        {
            /** the Cutout Definition Type enum 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: enum Types
            {
                TypesGeometry/** Geometry */,
                TypesDimensions/** Dimensions */
            };

            private: LaserCutoutDefinitionImpl * m_lasercutoutdefinition_impl;
            private: friend class  _LaserCutoutDefinitionBuilder;
            protected: LaserCutoutDefinition();
            public: ~LaserCutoutDefinition();
            /**Returns  the Cutout Definition Type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::LaserCutoutDefinition::Types CutoutDefType
            (
            );
            /**Sets  the Cutout Definition Type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutoutDefType
            (
                NXOpen::CAM::LaserCutoutDefinition::Types type /** the cutout def type */
            );
            /**Returns  the Center Point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * CenterPoint
            (
            );
            /**Sets  the Center Point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCenterPoint
            (
                NXOpen::Point * newValue /** the center point*/
            );
            /**Returns  the Cutout Section 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * CutoutSection
            (
            );
            /**Sets  the Cutout Section 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutoutSection
            (
                NXOpen::Section * cutoutSection /** the Cutout Section */
            );
            /**Returns  the Diameter 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double Diameter
            (
            );
            /**Sets  the Diameter 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDiameter
            (
                double newValue /** the diameter value */
            );
            /**Returns  the Length 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double Length
            (
            );
            /**Sets  the Length 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLength
            (
                double newValue /** the length value */
            );
            /**Returns  the Width 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double Width
            (
            );
            /**Sets  the Width 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetWidth
            (
                double newValue /** the width value */
            );
            /**Returns  the Angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double Angle
            (
            );
            /**Sets  the Angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAngle
            (
                double newValue /** the angle value */
            );
            /**Returns  the Corner Radius 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double CornerRadius
            (
            );
            /**Sets  the Corner Radius 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCornerRadius
            (
                double newValue /** the corner radius value */
            );
            /**Returns  the Wrench Size 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double WrenchSize
            (
            );
            /**Sets  the Wrench Size 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetWrenchSize
            (
                double newValue /** the wrench size value */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
