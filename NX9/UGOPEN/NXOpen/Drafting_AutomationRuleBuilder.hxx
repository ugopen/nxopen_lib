#ifndef NXOpen_DRAFTING_AUTOMATIONRULEBUILDER_HXX_INCLUDED
#define NXOpen_DRAFTING_AUTOMATIONRULEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drafting_AutomationRuleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drafting_AutomationRuleBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drafting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drafting
    {
        class AutomationRuleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drafting
    {
        class _AutomationRuleBuilderBuilder;
        class AutomationRuleBuilderImpl;
        /** Represents a @link Drafting::AutomationRuleBuilder Drafting::AutomationRuleBuilder@endlink  
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_DRAFTINGEXPORT  AutomationRuleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: AutomationRuleBuilderImpl * m_automationrulebuilder_impl;
            private: friend class  _AutomationRuleBuilderBuilder;
            protected: AutomationRuleBuilder();
            public: ~AutomationRuleBuilder();
            /**Returns  the allow inside geometry option allows annotation inside geometry 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AllowInsideGeometry
            (
            );
            /**Sets  the allow inside geometry option allows annotation inside geometry 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetAllowInsideGeometry
            (
                bool allowInsideGeometry /** allowinsidegeometry */ 
            );
            /**Returns  the minimum gap from the view geometry to the annotation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double MinimumGapToGeometry
            (
            );
            /**Sets  the minimum gap from the view geometry to the annotation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetMinimumGapToGeometry
            (
                double minimumGapToGeometry /** minimumgaptogeometry */ 
            );
            /**Returns  the maximum gap from the view geometry to the annotation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double MaximumGapToGeometry
            (
            );
            /**Sets  the maximum gap from the view geometry to the annotation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetMaximumGapToGeometry
            (
                double maximumGapToGeometry /** maximumgaptogeometry */ 
            );
            /**Returns  the minimum gap between annotations 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double MinimumGapBetweenAnnotations
            (
            );
            /**Sets  the minimum gap between annotations 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetMinimumGapBetweenAnnotations
            (
                double minimumGapBetweenAnnotations /** minimumgapbetweenannotations */ 
            );
            /**Returns  the hide feet and inch marks option Show/Hide feet and inch marks. True to hide and False to show 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool HideFeetAndInchMarks
            (
            );
            /**Sets  the hide feet and inch marks option Show/Hide feet and inch marks. True to hide and False to show 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetHideFeetAndInchMarks
            (
                bool hideFeetAndInchMarks /** hidefeetandinchmarks */ 
            );
            /**Returns  the use feet inches and fraction determine wheather or not to display dimension value 
                        in feet, inches and fractions if it is greater than the specified value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseFeetInchesAndFraction
            (
            );
            /**Sets  the use feet inches and fraction determine wheather or not to display dimension value 
                        in feet, inches and fractions if it is greater than the specified value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetUseFeetInchesAndFraction
            (
                bool useFeetInchesAndFraction /** usefeetinchesandfraction */ 
            );
            /**Returns  the lower threshold display dimension value in feet, inches and fractions if
                        it is greater than the specified value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double LowerThreshold
            (
            );
            /**Sets  the lower threshold display dimension value in feet, inches and fractions if
                        it is greater than the specified value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetLowerThreshold
            (
                double lowerThreshold /** lowerthreshold */ 
            );
            /**Returns  the round feet and inches determine wheather or not to display dimension value 
                        in inches and fractions to nearest specified value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool RoundFeetAndInches
            (
            );
            /**Sets  the round feet and inches determine wheather or not to display dimension value 
                        in inches and fractions to nearest specified value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetRoundFeetAndInches
            (
                bool roundFeetAndInches /** roundfeetandinches */ 
            );
            /**Returns  the increment Display dimension value in inches and fractions to nearest specified value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double Increment
            (
            );
            /**Sets  the increment Display dimension value in inches and fractions to nearest specified value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetIncrement
            (
                double increment /** increment */ 
            );
            /**Returns  the equal dimension comparison tolerance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double EqualDimensionTolerance
            (
            );
            /**Sets  the equal dimension comparison tolerance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetEqualDimensionTolerance
            (
                double equalDimensionTolerance /** equaldimensiontolerance */ 
            );
            /**Returns  the reference geometry search gap tolerance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double ReferenceGeometryGapTolerance
            (
            );
            /**Sets  the reference geometry search gap tolerance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetReferenceGeometryGapTolerance
            (
                double referenceGeometryGapTolerance /** referencegeometrygaptolerance */ 
            );
            /** The automation rules in the order of decreasing priorities. So, the first
                        rule in the VLA has the highest priority  @return  Rules list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetRulesList
            (
            );
            /** The set of order list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetRulesList
            (
                std::vector<NXString> & rules /** Rules list */
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
