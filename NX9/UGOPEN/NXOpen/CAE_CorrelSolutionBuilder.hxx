#ifndef NXOpen_CAE_CORRELSOLUTIONBUILDER_HXX_INCLUDED
#define NXOpen_CAE_CORRELSOLUTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CorrelSolutionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_CorrelBaseBuilder.hxx>
#include <NXOpen/CAE_CorrelSolutionBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class CorrelSolutionBuilder;
    }
    namespace CAE
    {
        class CorrelBaseBuilder;
    }
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class _CorrelSolutionBuilderBuilder;
        class CorrelSolutionBuilderImpl;
        /** This is a manager to the @link CAE::CorrelSolution CAE::CorrelSolution@endlink  class.
            Object of type @link CAE::CorrelSolution CAE::CorrelSolution@endlink  can be
            created and edited only through this class
             <br> To create a new instance of this class, use @link CAE::CorrelSolutionCollection::CreateSolutionBuilder  CAE::CorrelSolutionCollection::CreateSolutionBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  CorrelSolutionBuilder : public CAE::CorrelBaseBuilder
        {
            /** The damping type enum */
            public: enum EnumDampingFrftype
            {
                EnumDampingFrftypeFromWorkModel/** from work model */,
                EnumDampingFrftypeSpecifyDamping/** from user input */
            };

            private: CorrelSolutionBuilderImpl * m_correlsolutionbuilder_impl;
            private: friend class  _CorrelSolutionBuilderBuilder;
            protected: CorrelSolutionBuilder();
            public: ~CorrelSolutionBuilder();
            /**Returns  the correlation metasolution name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Title
            (
            );
            /**Sets  the correlation metasolution name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetTitle
            (
                const NXString & title /** title */ 
            );
            /**Sets  the correlation metasolution name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            void SetTitle
            (
                const char * title /** title */ 
            );
            /**Returns  the work (analysis) solution of correlation 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SimSolution * WorkSolution
            (
            );
            /**Sets  the work (analysis) solution of correlation 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetWorkSolution
            (
                NXOpen::CAE::SimSolution * workSolution /** worksolution */ 
            );
            /**Returns  the reference (test) solution of correlation 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SimSolution * ReferenceSolution
            (
            );
            /**Sets  the reference (test) solution of correlation 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetReferenceSolution
            (
                NXOpen::CAE::SimSolution * referenceSolution /** referencesolution */ 
            );
            /**Returns  the option controlling which damping to consider when synthesizing FRF data from analysis results 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::CorrelSolutionBuilder::EnumDampingFrftype FrfDampingSource
            (
            );
            /**Sets  the option controlling which damping to consider when synthesizing FRF data from analysis results 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetFrfDampingSource
            (
                NXOpen::CAE::CorrelSolutionBuilder::EnumDampingFrftype frfDampingSource /** frfdampingsource */ 
            );
            /**Returns  the node-matching distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double NodeMatchingDistance
            (
            );
            /**Sets  the node-matching distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetNodeMatchingDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the node map size limit 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: int NodeMapSizeLimit
            (
            );
            /**Sets  the node map size limit 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetNodeMapSizeLimit
            (
                int limit /** limit */ 
            );
            /**Returns  the high-frequency filtering option for work modes 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool NodeMapSizeLimitActive
            (
            );
            /**Sets  the high-frequency filtering option for work modes 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetNodeMapSizeLimitActive
            (
                bool active /** active */ 
            );
            /**Returns  the low-frequency filtering option for work modes 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: bool LowFrequencyFilteringMode
            (
            );
            /**Sets  the low-frequency filtering option for work modes 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetLowFrequencyFilteringMode
            (
                bool lowFrequencyFilteringMode /** lowfrequencyfilteringmode */ 
            );
            /**Returns  the low-frequency cutoff for work modes 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: double LowFrequencyCutoff
            (
            );
            /**Sets  the low-frequency cutoff for work modes 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetLowFrequencyCutoff
            (
                double cutoffFrequency /** cutofffrequency */ 
            );
            /**Returns  the high-frequency filtering option for work modes 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: bool HighFrequencyFilteringMode
            (
            );
            /**Sets  the high-frequency filtering option for work modes 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetHighFrequencyFilteringMode
            (
                bool highFrequencyFilteringMode /** highfrequencyfilteringmode */ 
            );
            /**Returns  the high-frequency cutoff for work modes 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: double HighFrequencyCutoff
            (
            );
            /**Sets  the high-frequency cutoff for work modes 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetHighFrequencyCutoff
            (
                double cutoffFrequency /** cutofffrequency */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
