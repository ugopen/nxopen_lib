#ifndef NXOpen_CAM_TOOLBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TOOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ToolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_NCGroupBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class ToolBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    namespace CAM
    {
        class NCGroupBuilder;
    }
    namespace CAM
    {
        class Ude;
    }
    namespace CAM
    {
        class _ToolBuilderBuilder;
        class ToolBuilderImpl;
        /** Represents a Tool Builder  <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  ToolBuilder : public CAM::NCGroupBuilder
        {
            private: ToolBuilderImpl * m_toolbuilder_impl;
            private: friend class  _ToolBuilderBuilder;
            protected: ToolBuilder();
            public: ~ToolBuilder();
            /**Returns  the Tool Number  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * TlNumberBuilder
            (
            );
            /**Returns  the Manual Tool Change  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool TlManualToolChange
            (
            );
            /**Sets  the Manual Tool Change  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTlManualToolChange
            (
                bool tlManualToolChangeValue /**  the manual tool change value */
            );
            /**Returns  the Holder Number  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * TlHolderNumberBuilder
            (
            );
            /**Returns  the Catalog Number  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TlCtlgNum
            (
            );
            /**Sets  the Catalog Number  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTlCtlgNum
            (
                const NXString & tlCtlgNumValue /**  the catalog number value */
            );
            /**Sets  the Catalog Number  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetTlCtlgNum
            (
                const char * tlCtlgNumValue /**  the catalog number value */
            );
            /**Returns  the Cutter  Description  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TlDescription
            (
            );
            /**Sets  the Cutter  Description  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTlDescription
            (
                const NXString & tlDescriptionValue /**  the cutter  description  value */
            );
            /**Sets  the Cutter  Description  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetTlDescription
            (
                const char * tlDescriptionValue /**  the cutter  description  value */
            );
            /**Returns  the tool text  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TlText
            (
            );
            /**Sets  the tool text  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTlText
            (
                const NXString & tlText /**  the tool text value */
            );
            /**Sets  the tool text  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetTlText
            (
                const char * tlText /**  the tool text value */
            );
            /**Returns  the Cutter  Libref  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TlLibref
            (
            );
            /**Sets  the Cutter  Libref  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTlLibref
            (
                const NXString & tlLibRef /**  the cutter libref  value */
            );
            /**Sets  the Cutter  Libref  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetTlLibref
            (
                const char * tlLibRef /**  the cutter libref  value */
            );
            /**Returns  the channel's name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ChannelName
            (
            );
            /**Sets  the channel's name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetChannelName
            (
                const NXString & name /** the channel's name */
            );
            /**Sets  the channel's name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetChannelName
            (
                const char * name /** the channel's name */
            );
            /**Returns  the holder description 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXString HolderDescription
            (
            );
            /**Sets  the holder description 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetHolderDescription
            (
                const NXString & holderDescriptionValue /**the tool holder description value*/
            );
            /**Sets  the holder description 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetHolderDescription
            (
                const char * holderDescriptionValue /**the tool holder description value*/
            );
            /**Returns  the holder libref 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXString HolderLibraryReference
            (
            );
            /**Sets  the holder libref 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetHolderLibraryReference
            (
                const NXString & holderLibrefValue /**the tool holder library reference value*/
            );
            /**Sets  the holder libref 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetHolderLibraryReference
            (
                const char * holderLibrefValue /**the tool holder library reference value*/
            );
            /**Get tool material @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXString GetMaterial
            (
            );
            /**Set tool material
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaterial
            (
                const NXString & libRef /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Set tool material
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetMaterial
            (
                const char * libRef /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get material data
             <br>  Created in NX8.0.2.  <br>  
             <br> License requirements : None */
            public: void GetMaterialData
            (
                NXString* libRef /** libref */ ,
                NXString* name /** name */ ,
                NXString* description /** description */ ,
                NXString* code /** code */ 
            );
            /**Returns  the Library Data Object  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Ude * LibraryParametersBuilder
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
