#ifndef NXOpen_GATEWAY_BOOKMARK_HXX_INCLUDED
#define NXOpen_GATEWAY_BOOKMARK_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Gateway_Bookmark.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Gateway_Bookmark.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_gateway_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Gateway
    {
        class Bookmark;
    }
    class NXObject;
    namespace Gateway
    {
        class _BookmarkBuilder;
        class BookmarkImpl;

        /// \cond NX_NO_DOC 
        /** Represents a display bookmark, which is a transient object which is not stored with
                the NX part file.  A bookmark object exists during a session to hold data about
                a bookmark file.  <br> To obtain an instance of this class, use @link Gateway::BookmarkCollection Gateway::BookmarkCollection@endlink   <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_GATEWAYEXPORT  Bookmark : public NXObject
        {
            private: BookmarkImpl * m_bookmark_impl;
            private: friend class  _BookmarkBuilder;
            protected: Bookmark();
            public: ~Bookmark();
            /** Applies the parameters of a bookmark to the displayed part 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void Apply
            (
            );
            /** Renames the bookmark file that the bookmark object refers to.  The data from the
                    current displayed part is not saved to the bookmark file.
                      @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RenameBookmarkFile
            (
                const NXString & newSimpleName /** newsimplename */ 
            );
            /** Renames the bookmark file that the bookmark object refers to.  The data from the
                    current displayed part is not saved to the bookmark file.
                      @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            NXString RenameBookmarkFile
            (
                const char * newSimpleName /** newsimplename */ 
            );
            /** Saves a bookmark file from the current displayed part and the information in the
                    bookmark object.  The Simple Name and PathName attributes of the bookmark object
                    must already have been set.  If any of the other attributes (Description,
                    AssemblyContext, AssemblyContextType and DisplaySettings) have not been explicitly
                    set, their default values will be used. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveBookmarkFile
            (
                bool newBookmark /** True if a bookmark file of this name
                                                                            does not alreay exist (or at least
                                                                            should not exist.  False if a bookmark
                                                                            of this file already exists. */
            );
            /** Deletes the bookmark file that the bookmark object refers to.  It does not delete
                    the bookmark object itself.
                     
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteBookmarkFile
            (
            );
            /**Returns  the simple name assigned to the bookmark.  This does not include the directory path
                    nor the file extension.  The simple name must be included within the path name. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SimpleName
            (
            );
            /**Sets  the simple name assigned to the bookmark.  This does not include the directory path
                    nor the file extension.  The simple name must be included within the path name. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSimpleName
            (
                const NXString & simpleName /** simplename */ 
            );
            /**Sets  the simple name assigned to the bookmark.  This does not include the directory path
                    nor the file extension.  The simple name must be included within the path name. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetSimpleName
            (
                const char * simpleName /** simplename */ 
            );
            /**Returns  the full path name to the bookmark file associated with the bookmark object.  This
                    includes the directory path and the file extension. The simple_name must be included
                    withing the path_name.  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PathName
            (
            );
            /**Sets  the full path name to the bookmark file associated with the bookmark object.  This
                    includes the directory path and the file extension. The simple_name must be included
                    withing the path_name.  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPathName
            (
                const NXString & pathName /** pathname */ 
            );
            /**Sets  the full path name to the bookmark file associated with the bookmark object.  This
                    includes the directory path and the file extension. The simple_name must be included
                    withing the path_name.  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetPathName
            (
                const char * pathName /** pathname */ 
            );
            /**Returns   the description given by the user to the bookmark file.  If the description is not
                    specified, it defaults to the empty string. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Description
            (
            );
            /**Sets   the description given by the user to the bookmark file.  If the description is not
                    specified, it defaults to the empty string. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets   the description given by the user to the bookmark file.  If the description is not
                    specified, it defaults to the empty string. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /**Returns  whether assembly context data havs been saved with a bookmark file
                    (for an existing bookmark file) or whether assembly context data should be saved for
                    a new bookmark file.  If the AssemblyContext is not specified, it defaults to true. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssemblyContext
            (
            );
            /**Sets  whether assembly context data havs been saved with a bookmark file
                    (for an existing bookmark file) or whether assembly context data should be saved for
                    a new bookmark file.  If the AssemblyContext is not specified, it defaults to true. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssemblyContext
            (
                bool hasAssemblyContextDataBeenSaved /** hasassemblycontextdatabeensaved */ 
            );
            /**Returns  the type of assembly context which has been saved in the bookmark file
                    (for an existing bookmark file) or that should be saved in the bookmark file (for
                    an new bookmark file).  If the AssemblyContext property is false, then
                    the value of this property is ignored, and there is no assembly context data.
                    If AssemblyContext is true and AssemblyContextType is not specified, then it
                    has a default value of ComponentGroupsOptionsAndStructure. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int AssemblyContextType
            (
            );
            /**Sets  the type of assembly context which has been saved in the bookmark file
                    (for an existing bookmark file) or that should be saved in the bookmark file (for
                    an new bookmark file).  If the AssemblyContext property is false, then
                    the value of this property is ignored, and there is no assembly context data.
                    If AssemblyContext is true and AssemblyContextType is not specified, then it
                    has a default value of ComponentGroupsOptionsAndStructure. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssemblyContextType
            (
                int assemblyContextType /** assemblycontexttype */ 
            );
            /**Returns  the state of whether display settings have been saved with a bookmark file
                    (for an existing bookmark file) or whether display settings should be saved
                    for a new bookmark file.  If DisplaySettings is not specified, then its default
                    value of true is used.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplaySettings
            (
            );
            /**Sets  the state of whether display settings have been saved with a bookmark file
                    (for an existing bookmark file) or whether display settings should be saved
                    for a new bookmark file.  If DisplaySettings is not specified, then its default
                    value of true is used.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplaySettings
            (
                bool areDisplaySettingsEnabled /** aredisplaysettingsenabled */ 
            );
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
