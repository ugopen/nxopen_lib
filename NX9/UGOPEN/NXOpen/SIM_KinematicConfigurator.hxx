#ifndef NXOpen_SIM_KINEMATICCONFIGURATOR_HXX_INCLUDED
#define NXOpen_SIM_KINEMATICCONFIGURATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_KinematicConfigurator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_SimulationOptionsBuilder.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/SIM_IsvControlPanelBuilder.hxx>
#include <NXOpen/SIM_KinematicComponentBuilder.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        class KinematicConfigurator;
    }
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class CollisionPairBuilder;
    }
    namespace CAM
    {
        class ConvertFromMCDBuilder;
    }
    namespace CAM
    {
        class SimulationOptionsBuilder;
    }
    class NXObject;
    namespace SIM
    {
        class IsvControlPanelBuilder;
    }
    namespace SIM
    {
        class KinematicAxis;
    }
    namespace SIM
    {
        class KinematicAxisBuilder;
    }
    namespace SIM
    {
        class KinematicChain;
    }
    namespace SIM
    {
        class KinematicChainConfiguration;
    }
    namespace SIM
    {
        class KinematicComponent;
    }
    namespace SIM
    {
        class KinematicComponentCollection;
    }
    namespace SIM
    {
        class KinematicJunction;
    }
    namespace SIM
    {
        class KinematicJunctionBuilder;
    }
    namespace SIM
    {
        class KinematicSinumerikCaBuilder;
    }
    namespace SIM
    {
        class NcChannelSelectionData;
    }
    namespace SIM
    {
        class SimDebugBuilder;
    }
    namespace SIM
    {
        class SinumerikCaExportBuilder;
    }
    namespace SIM
    {
        class SinumerikCaFacetBuilder;
    }
    namespace SIM
    {
        class SinumerikCaPlaceholderBuilder;
    }
    namespace SIM
    {
        class SinumerikCaSimplifyBodiesBuilder;
    }
    namespace SIM
    {
        class _KinematicConfiguratorBuilder;
        class KinematicConfiguratorImpl;
        /**  @brief  Represents the ISV base class object  

            <br> To obtain an instance of this class, use @link Part::KinematicConfigurator  Part::KinematicConfigurator @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_SIMEXPORT  KinematicConfigurator : public NXObject
        {
            /** The unite types for spinning geometries */
            public: enum UniteTypes
            {
                UniteTypesCreate/** Create the spinning geometries as individual bodies */,
                UniteTypesUnite/** Unite the spinning geometries into one body */
            };

            private: KinematicConfiguratorImpl * m_kinematicconfigurator_impl;
            private: friend class  _KinematicConfiguratorBuilder;
            protected: KinematicConfigurator();
            public: ~KinematicConfigurator();
            /** Creates a builder for a kinematic junction  @return  The new junction builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") OR resource_manager_nx ("Teamcenter Resource Manager") */
            public: NXOpen::SIM::KinematicJunctionBuilder * CreateJunctionBuilder
            (
                NXOpen::SIM::KinematicComponent * parent /** The parent component */,
                NXOpen::SIM::KinematicJunction * jct /** The junction to edit.
                                                                                                   If NULL, a new junction is created */
            );
            /** Creates a builder for a kinematic axis  @return  The new axis builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::KinematicAxisBuilder * CreateAxisBuilder
            (
                NXOpen::SIM::KinematicComponent * parent /** The parent component */,
                NXOpen::SIM::KinematicJunction * jct /** The junction used for the axis */,
                NXOpen::SIM::KinematicAxis * axis /** The axis to edit. If NULL, a new axis is craeted */
            );
            /** Sets the custom name of the kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") OR resource_manager_nx ("Teamcenter Resource Manager") */
            public: void SetName
            (
                const NXString & name /** The new kinematic model name */
            );
            /** Sets the custom name of the kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") OR resource_manager_nx ("Teamcenter Resource Manager") */
            void SetName
            (
                const char * name /** The new kinematic model name */
            );
            /** Adds a new user class name to the list of user classes 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void AddUserClassification
            (
                const NXString & userClass /** The new user class name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds a new user class name to the list of user classes 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void AddUserClassification
            (
                const char * userClass /** The new user class name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Deletes a user class name from the list of user classes 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteUserClassification
            (
                const NXString & userClass /** The user class name to delete.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Deletes a user class name from the list of user classes 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void DeleteUserClassification
            (
                const char * userClass /** The user class name to delete.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Renames a user class name from the list 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void RenameUserClassification
            (
                const NXString & oldName /** The old user class name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & newName /** The new user class name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Renames a user class name from the list 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void RenameUserClassification
            (
                const char * oldName /** The old user class name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * newName /** The new user class name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get a list of all user classes 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void GetUserClassifications
            (
                std::vector<NXString> & uClasses /** The list of user classes   */
            );
            /** Adds a new user holding system to the list of holding systems 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void AddHoldingSystem
            (
                const NXString & holdSys /** The new holding system.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds a new user holding system to the list of holding systems 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void AddHoldingSystem
            (
                const char * holdSys /** The new holding system.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Delete a holding system from the list 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteHoldingSystem
            (
                const NXString & holdSys /** The holding system to delete.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Delete a holding system from the list 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void DeleteHoldingSystem
            (
                const char * holdSys /** The holding system to delete.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Delete all holding systems from the kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteAllHoldingSystems
            (
            );
            /** Renames a holding system from the list 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void RenameHoldingSystem
            (
                const NXString & oldName /** The old holding system   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & newName /** The new holding system   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Renames a holding system from the list 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void RenameHoldingSystem
            (
                const char * oldName /** The old holding system   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * newName /** The new holding system   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get a list of all holding systems 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void GetHoldingSystems
            (
                std::vector<NXString> & holdSys /** The holding systems           */
            );
            /** Adds a new user channel name to the list of channels 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void AddChannel
            (
                const NXString & channel /** The new channel name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds a new user channel name to the list of channels 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void AddChannel
            (
                const char * channel /** The new channel name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Deletes a channel name from the list of channels 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteChannel
            (
                const NXString & channel /** The channel name to delete.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Deletes a channel name from the list of channels 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void DeleteChannel
            (
                const char * channel /** The channel name to delete.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Deletes all channels from the kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteAllChannels
            (
            );
            /** Renames a channel name from the list 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void RenameChannel
            (
                const NXString & oldName /** The old channel name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & newName /** The new channel name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Renames a channel name from the list 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void RenameChannel
            (
                const char * oldName /** The old channel name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * newName /** The new channel name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get a list of all channels 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void GetChannels
            (
                std::vector<NXString> & channels /** The list of channels   */
            );
            /** Creates a copy of the given component and spins its assigned geometry around a spinning axis.
                        For tool components, the X-axis of the tool tip junction is used as spinning axis. If none
                        is defined and for other types of components, the X-axis of the WCS is used.
                        The new component has the same parent as the source component.  @return  The new spinning component 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") OR resource_manager_nx ("Teamcenter Resource Manager") */
            public: NXOpen::SIM::KinematicComponent * CreateSpinningClone
            (
                NXOpen::SIM::KinematicComponent * source /** The source component. */,
                bool combine /** Specifies whether to combine the spinning geometries into one, or not */
            );
            /** Finds component which are of the given system class in bitwise 
             <br>  @deprecated Deprecated in NX8.0.3.  Use @link FindComponentsBySystemClass FindComponentsBySystemClass@endlink  with @link KinematicComponentBuilder::SystemClass KinematicComponentBuilder::SystemClass@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") OR resource_manager_nx ("Teamcenter Resource Manager") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.3.  Use FindComponentsBySystemClass with KinematicComponentBuilder::SystemClass instead.") void FindComponentsBySystemClass
            (
                int sysclass /** The system class to look for in bitwise. */,
                std::vector<NXOpen::SIM::KinematicComponent *> & comps /** The found components */
            );
            /** Finds component which are of the given system class 
             <br>  Created in NX8.0.3.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") OR resource_manager_nx ("Teamcenter Resource Manager") */
            public: void FindComponentsBySystemClass
            (
                NXOpen::SIM::KinematicComponentBuilder::SystemClass sysclass /** The system class to look for. */,
                std::vector<NXOpen::SIM::KinematicComponent *> & comps /** The found components */
            );
            /** Find the junction with the given name  @return  The junction, if found 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::KinematicJunction * FindJunction
            (
                const NXString & name /** The name to look for   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Find the junction with the given name  @return  The junction, if found 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            NXOpen::SIM::KinematicJunction * FindJunction
            (
                const char * name /** The name to look for   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Finds a junction by its coordinate system  @return  The junction for the csys 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::KinematicJunction * FindJunction
            (
                NXOpen::NXObject * csys /** the csys of a junction */
            );
            /** Find the axis with the given name  @return  The axis, if found 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::KinematicAxis * FindAxis
            (
                const NXString & name /** The name to look for   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::SIM::KinematicComponent ** pComp /** The parent component of the axis */,
                NXOpen::SIM::KinematicJunction ** pJct /** The parent junction of the axis */
            );
            /** Find the axis with the given name  @return  The axis, if found 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            NXOpen::SIM::KinematicAxis * FindAxis
            (
                const char * name /** The name to look for   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::SIM::KinematicComponent ** pComp /** The parent component of the axis */,
                NXOpen::SIM::KinematicJunction ** pJct /** The parent junction of the axis */
            );
            /** Finds the @link SIM::KinematicComponent SIM::KinematicComponent@endlink  which is the parent of this component  @return  The parent Component. NULL if comp is root component 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::KinematicComponent * FindParentComponent
            (
                NXOpen::SIM::KinematicComponent * comp /** The component */
            );
            /** Finds the @link SIM::KinematicComponent SIM::KinematicComponent@endlink  which is the owner of this junction  @return  The owning component of the junction 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::KinematicComponent * FindOwnerOfJunction
            (
                NXOpen::SIM::KinematicJunction * jct /** The junction */
            );
            /** Deletes the entire kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteModel
            (
            );
            /** Deletes the given component 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteComponent
            (
                NXOpen::SIM::KinematicComponent * comp /** the component to delete */
            );
            /** Deletes the given junction 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteJunction
            (
                NXOpen::SIM::KinematicJunction * jct /** the component to delete */
            );
            /** Deletes the given axis 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteAxis
            (
                NXOpen::SIM::KinematicAxis * axis /** the component to delete */
            );
            /** Adds a new root component to the @link SIM::KinematicConfigurator SIM::KinematicConfigurator@endlink  object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void InsertRootComponent
            (
                NXOpen::SIM::KinematicComponent * newRoot /** The new root component */
            );
            /** Delete a root component from the @link SIM::KinematicConfigurator SIM::KinematicConfigurator@endlink  object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteRootComponent
            (
                NXOpen::SIM::KinematicComponent * oldRoot /** The root component to remove */
            );
            /** Gets a list of all junctions in the kinematic 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") OR resource_manager_nx ("Teamcenter Resource Manager") */
            public: void GetJunctions
            (
                std::vector<NXOpen::SIM::KinematicJunction *> & junctions /** The list of junctions */
            );
            /** Gets a list of all junction names in the kinematic 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void GetJunctionNames
            (
                std::vector<NXString> & junctions /** The list of junction names */
            );

            /// \cond NX_NO_DOC 
            /** Creates a sim debug builder  @return  The new sim debug builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::SimDebugBuilder * CreateSimDebugBuilder
            (
            );

            /// \endcond 
            /** Creates an NcChannelSelectionData object to which files and channels can be assigned.  This is used when constructing the builder.  @return  The NC channel selection data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::NcChannelSelectionData * CreateNcChannelSelectionData
            (
            );
            /** Creates an isv control panel builder  @return  The isv control panel builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::IsvControlPanelBuilder * CreateIsvControlPanelBuilder
            (
                NXOpen::SIM::IsvControlPanelBuilder::VisualizationType driverType /** The visualization type*/,
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Creates an isv control panel builder with given machine code file name.  @return  The isv control panel builder 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link KinematicConfigurator::CreateIsvControlPanelBuilder KinematicConfigurator::CreateIsvControlPanelBuilder@endlink  with @link KinematicConfigurator::CreateNcChannelSelectionData KinematicConfigurator::CreateNcChannelSelectionData@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use KinematicConfigurator::CreateIsvControlPanelBuilder with KinematicConfigurator::CreateNcChannelSelectionData instead.") NXOpen::SIM::IsvControlPanelBuilder * CreateIsvControlPanelBuilder
            (
                NXOpen::SIM::IsvControlPanelBuilder::VisualizationType driverType /** The visualization type*/,
                const NXString & filename /** The full path machine code filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates an isv control panel builder with given machine code file name.  @return  The isv control panel builder 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link KinematicConfigurator::CreateIsvControlPanelBuilder KinematicConfigurator::CreateIsvControlPanelBuilder@endlink  with @link KinematicConfigurator::CreateNcChannelSelectionData KinematicConfigurator::CreateNcChannelSelectionData@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            NXOpen::SIM::IsvControlPanelBuilder * CreateIsvControlPanelBuilder
            (
                NXOpen::SIM::IsvControlPanelBuilder::VisualizationType driverType /** The visualization type*/,
                const char * filename /** The full path machine code filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates an isv control panel builder with given machine code file name. @return  The isv control panel builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::IsvControlPanelBuilder * CreateIsvControlPanelBuilder
            (
                NXOpen::SIM::IsvControlPanelBuilder::VisualizationType driverType /** The visualization type*/,
                NXOpen::SIM::NcChannelSelectionData * channelData /** The NC channel selection data*/
            );
            /** Creates a simulation options  @return  The new simulation options 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::CAM::SimulationOptionsBuilder * CreateSimulationOptionsBuilder
            (
                NXOpen::CAM::SimulationOptionsBuilder::DialogType dialogType /** The dialog type */
            );
            /** Creates a collision pair builder  @return  The new collision pair builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::CAM::CollisionPairBuilder * CreateCollisionPairBuilder
            (
            );
            /** Creates a builder for a kinematic sinumerik ca config  @return  The new kinematic sinumerik ca builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::KinematicSinumerikCaBuilder * CreateKinematicSinumerikCaBuilder
            (
                NXOpen::SIM::KinematicComponent * comp /** the component to edit */
            );
            /** Creates a builder for a sinumerik ca simplify bodies  @return  The new sinumerik ca simplify bodies builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::SinumerikCaSimplifyBodiesBuilder * CreateSinumerikCaSimplifyBodiesBuilder
            (
            );
            /** Creates a builder for a sinumerik ca export spf  @return  The new sinumerik ca export builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::SinumerikCaExportBuilder * CreateSinumerikCaExportBuilder
            (
            );
            /** Creates a builder for a sinumerik ca facet  @return  The new sinumerik ca facet builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::SinumerikCaFacetBuilder * CreateSinumerikCaFacetBuilder
            (
            );
            /** Creates a builder for a sinumerik ca placeholder  @return  The new sinumerik ca placeholder builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::SinumerikCaPlaceholderBuilder * CreateSinumerikCaPlaceholderBuilder
            (
            );
            /**Returns  the isv control panel builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::IsvControlPanelBuilder * IsvControlPanelBuilder
            (
            );
            /** Creates a builder to convert from MCD  @return  The new convert from mcd builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::CAM::ConvertFromMCDBuilder * CreateConvertFromMcdBuilder
            (
            );
            /** Creates a builder for a kinematic chain configurator  @return  The new kinematic chain configuration builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::KinematicChainConfiguration * DefineKinematicChains
            (
            );
            /** Creates a builder for a kinematic chain  @return  The new kinematic chain builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXOpen::SIM::KinematicChain * CreateKinematicChain
            (
            );


            /** Returns the ComponentCollection instance belonging to this SimKim 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::SIM::KinematicComponentCollection *ComponentCollection();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
