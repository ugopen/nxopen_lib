#ifndef NXOpen_ROUTING_PLACEPARTBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_PLACEPARTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_PlacePartBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_PlacePartBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class PlacePartBuilder;
    }
    class Builder;
    namespace Routing
    {
        class AttributeHolder;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    class TaggedObject;
    namespace Routing
    {
        class _PlacePartBuilderBuilder;
        class PlacePartBuilderImpl;
        /** 
             <br> To create a new instance of this class, use @link Routing::RouteManager::CreatePlacePartBuilderPTS  Routing::RouteManager::CreatePlacePartBuilderPTS @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  PlacePartBuilder : public Builder
        {
            private: PlacePartBuilderImpl * m_placepartbuilder_impl;
            private: friend class  _PlacePartBuilderBuilder;
            protected: PlacePartBuilder();
            public: ~PlacePartBuilder();
            /** Load a part given the input part number. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void LoadPart
            (
                const NXString & partNumber /** Part number */
            );
            /** Load a part given the input part number. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void LoadPart
            (
                const char * partNumber /** Part number */
            );
            /** Load the specified part. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void LoadPart
            (
            );
            /** Set the reference set to use for the loaded part. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetActiveRefSet
            (
                const NXString & refSet /** Reference Set Name */
            );
            /** Set the reference set to use for the loaded part. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetActiveRefSet
            (
                const char * refSet /** Reference Set Name */
            );
            /** Set the layer for the loaded part. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetActiveLayer
            (
                int layerOption /** Layer Option  */,
                int layer /** Layer Number */
            );
            /** Complete the placement operation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void FinalizePlacement
            (
                NXOpen::Routing::CharacteristicList * optionalCharx /** Optional Charx to apply. */,
                NXOpen::Routing::CharacteristicList * requiredCharx /** Required Charx to apply. */,
                const NXString & name /** The component name to apply to the part. */,
                int layerOption /** The layer option. */,
                int layer /** The layer to apply. */,
                bool dfaultOStock /** Assign overstock to a fitting when a default is defined.*/
            );
            /** Complete the placement operation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void FinalizePlacement
            (
                NXOpen::Routing::CharacteristicList * optionalCharx /** Optional Charx to apply. */,
                NXOpen::Routing::CharacteristicList * requiredCharx /** Required Charx to apply. */,
                const char * name /** The component name to apply to the part. */,
                int layerOption /** The layer option. */,
                int layer /** The layer to apply. */,
                bool dfaultOStock /** Assign overstock to a fitting when a default is defined.*/
            );
            /** Update the loaded part with a new placement location and object.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UpdatePlacementObj
            (
                NXOpen::TaggedObject * placementObj /** New object to attach to. Can bee NULL. */,
                const NXOpen::Point3d & placementPos /** The new location for the part. */
            );
            /** Update the loaded part with a new placement location and object.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UnloadPart
            (
            );
            /** Get information about the parts being placed.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetLoadedPartInfo
            (
                NXOpen::TaggedObject ** loadedPart /** The PART object of the loaded part. */,
                NXOpen::TaggedObject ** loadedInst /** The Instance object of the loaded part. */
            );
            /** Get information about the parts being placed.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetLoadedPartInfo
            (
                NXOpen::TaggedObject * loadedPart /** The PART object of the loaded part. */,
                NXOpen::TaggedObject * loadedInst /** The Instance object of the loaded part. */
            );
            /** Replace the builder's part instance with a new instance.
                        This is used when the assemblies absolute positioning method is used. It will create
                        it's own part instance and we need make sure the builder has the new one. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ReplaceLoadedInstance
            (
                NXOpen::TaggedObject * partInst /** The instance object of the loaded part. */
            );
            /** Set a flag which tells the builder whether the part being placed is replacing
                        an existing part in the assembly. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetPlacePartOperation
            (
                bool replacePart /** True if replace part operation. */
            );
            /** Sets the final position of screw seat. This is required in builder when doing
                    finalize placement after (OK/Apply) . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetScrewSeatIntersectionPoint
            (
                const NXOpen::Point3d & intersectionPoint /** The final position of screw seat placement. */
            );
            /** Gets information about the final screw seat position.   @return  The final position of screw seat placement. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Point3d GetScrewSeatIntersectionPoint
            (
            );
            /** Sets a point in builder, which is required for final placement of screw seat.
                    This point is used for creating segments / constraints when finally placing the screw seat. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetScrewSeatEnd
            (
                const NXOpen::Point3d & point /** This is the internal point used in determining final position of screw seat placement. */
            );
            /** Gets the point from builder, used in final placement of screw seat. This point is used for creating 
                    segemnts / constraints when finally placing the screw seat.  @return  This is the internal point used in determining final position of screw seat placement.  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Point3d GetScrewSeatEnd
            (
            );
            /** Sets Attribute holder in builder, which is user for template attribute assignment. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAttributeHolder
            (
                NXOpen::Routing::AttributeHolder * attributeHolder /** Object to hold template attributes */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
