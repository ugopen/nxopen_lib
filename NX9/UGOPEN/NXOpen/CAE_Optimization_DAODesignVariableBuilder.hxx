#ifndef NXOpen_CAE_OPTIMIZATION_DAODESIGNVARIABLEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_OPTIMIZATION_DAODESIGNVARIABLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Optimization_DAODesignVariableBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_Optimization_DAODesignVariableBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Optimization
        {
            class DAODesignVariableBuilder;
        }
    }
    class Builder;
    class Expression;
    class NXObject;
    namespace CAE
    {
        namespace Optimization
        {
            class _DAODesignVariableBuilderBuilder;
            class DAODesignVariableBuilderImpl;
            /** Represents a @link CAE::Optimization::DAODesignVariableBuilder CAE::Optimization::DAODesignVariableBuilder@endlink .  <br> To create a new instance of this class, use @link CAE::Optimization::DAOSolutionCollection::CreateDesignVariableBuilder  CAE::Optimization::DAOSolutionCollection::CreateDesignVariableBuilder @endlink  <br> 
             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  DAODesignVariableBuilder : public Builder
            {
                /** Represents the design variable type */
                public: enum Variable
                {
                    VariableSectionProperty/** Section property variables */,
                    VariableShellProperty/** Shell property variables */,
                    VariableFeatureDimension/** Feature dimension variables */,
                    VariableSketchDimension/** Sketch dimension variables */,
                    VariableAllExpressions/** Variables from FEM, SIM and master part */,
                    VariableCount/** Variable type count */
                };

                private: DAODesignVariableBuilderImpl * m_daodesignvariablebuilder_impl;
                private: friend class  _DAODesignVariableBuilderBuilder;
                protected: DAODesignVariableBuilder();
                public: ~DAODesignVariableBuilder();
                /**Returns  the design variable name 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Name
                (
                );
                /**Sets  the design variable name 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetName
                (
                    const NXString & designVariableName /** Design variable name */
                );
                /**Sets  the design variable name 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                void SetName
                (
                    const char * designVariableName /** Design variable name */
                );
                /**Returns  the expression 
                 <br>  @deprecated Deprecated in NX8.5.0.  Use @link CAE::Optimization::DAODesignVariableBuilder::GetVariable CAE::Optimization::DAODesignVariableBuilder::GetVariable@endlink  instead. <br>  

                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use CAE::Optimization::DAODesignVariableBuilder::GetVariable instead.") NXOpen::Expression * Expression
                (
                );
                /**Sets  the expression 
                 <br>  @deprecated Deprecated in NX8.5.0.  Use @link CAE::Optimization::DAODesignVariableBuilder::SetVariable CAE::Optimization::DAODesignVariableBuilder::SetVariable@endlink  instead. <br>  

                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use CAE::Optimization::DAODesignVariableBuilder::SetVariable instead.") void SetExpression
                (
                    NXOpen::Expression * expression /** Expression */
                );
                /**Returns  the entity attached to expression 
                 <br>  @deprecated Deprecated in NX8.5.0.  Use @link CAE::Optimization::DAODesignVariableBuilder::GetVariable CAE::Optimization::DAODesignVariableBuilder::GetVariable@endlink  instead. <br>  

                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use CAE::Optimization::DAODesignVariableBuilder::GetVariable instead.") NXOpen::NXObject * AttachedEntity
                (
                );
                /**Sets  the entity attached to expression 
                 <br>  @deprecated Deprecated in NX8.5.0.  Use @link CAE::Optimization::DAODesignVariableBuilder::SetVariable CAE::Optimization::DAODesignVariableBuilder::SetVariable@endlink  instead. <br>  

                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use CAE::Optimization::DAODesignVariableBuilder::SetVariable instead.") void SetAttachedEntity
                (
                    NXOpen::NXObject * attachedEntity /** Attached entity */
                );
                /**Returns  the upper limit value 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double UpperLimit
                (
                );
                /**Sets  the upper limit value 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetUpperLimit
                (
                    double upperLimit /** Upper limit value */
                );
                /**Returns  the lower limit value 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double LowerLimit
                (
                );
                /**Sets  the lower limit value 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetLowerLimit
                (
                    double lowerLimit /** Lower limit value */
                );
                /**Returns  the flag if mark current design variable as global sensitivity design variable, only effective for global sensitivity optimization type 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: bool GlobalSensitivityFlag
                (
                );
                /**Sets  the flag if mark current design variable as global sensitivity design variable, only effective for global sensitivity optimization type 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetGlobalSensitivityFlag
                (
                    bool globalSensitivityFlag /** Global sensitivity design variable flag */
                );
                /** Gets the design variable 
                 <br>  Created in NX8.0.1.  <br>  
                 <br> License requirements : None */
                public: void GetVariable
                (
                    NXOpen::CAE::Optimization::DAODesignVariableBuilder::Variable* variableType /** Variable type */,
                    NXOpen::Expression ** variableExpression /** Variable expression */
                );
                /** Sets the design variable 
                 <br>  Created in NX8.0.1.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetVariable
                (
                    NXOpen::CAE::Optimization::DAODesignVariableBuilder::Variable variableType /** Variable type */,
                    NXOpen::Expression * variableExpression /** Variable Expression */
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
