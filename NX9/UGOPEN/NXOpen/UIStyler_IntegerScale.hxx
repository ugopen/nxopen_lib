#ifndef NXOpen_UISTYLER_INTEGERSCALE_HXX_INCLUDED
#define NXOpen_UISTYLER_INTEGERSCALE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_IntegerScale.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UIStyler
    {
        class IntegerScale;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        class IntegerScaleImpl;
        /** Represents a IntegerScale for UI Styler 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  IntegerScale : public UIStyler::StylerItem
        {
            public: /**Called when a dialog user moves the slider to a new position. 
                Do not terminate the dialog with a value-changed callback. The dialog should always return 
                UF_UI_CB_CONTINUE_DIALOG. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> ValueChanged;
            public: /**Called when a dialog user moves the slider up and down the scale. For example, if a user moves the 
                slider from 0 to 100, the dialog calls the drag callback 100 times, one for each value that the 
                slider moves across. 
                Do not terminate the dialog with a drag callback. The dialog should always return 
                UF_UI_CB_CONTINUE_DIALOG. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Drag;
            private: IntegerScaleImpl * m_integerscale_impl;
            /// \cond NX_NO_DOC 
            public: explicit IntegerScale(void *ptr);
            /// \endcond 
            /**Registers value change callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddValueChangedHandler
            (
                const NXOpen::UIStyler::IntegerScale::ValueChanged&  valuechangedevent /** Value changed event */,
                bool isDialogLaunchingEvent /** True if launch any dialog else False */
            );
            /**Registers drag callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddDragHandler
            (
                const NXOpen::UIStyler::IntegerScale::Drag&  dragevent /** dragevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /**Specifies the scale's maximum and minimum value.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLimits
            (
                int minimumValue /**to set minimum */,
                int maximumValue /**to set maximum */
            );
            /**Specifies the text for the minimum and maximum label. By default, the system uses the maximum/minimum 
                value as a text label.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLabels
            (
                const NXString & minimumLabel /**minimum limit for label   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & maximumLabel /**maximum limit for label   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies the text for the minimum and maximum label. By default, the system uses the maximum/minimum 
                value as a text label.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetLabels
            (
                const char * minimumLabel /**minimum limit for label   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * maximumLabel /**maximum limit for label   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetItemValue
            (
                int itemVal /** item val */ 
            );
            /**Returns  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int ItemValue
            (
            );
            /**Sets  the sensitivity of the dialog item. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /**TRUE if sensitive, FALSE if insensitive*/
            );
            /**Returns  the sensitivity of the dialog item. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Sensitivity
            (
            );
            /**Sets the visibility of the dialog item. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /**TRUE if visible, FALSE if invisible*/
            );
            /**Returns the visibility of the dialog item. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Visibility
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
