#ifndef NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_XYZPLANEBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_XYZPLANEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SectionAnalysis_XYZPlaneBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_XYZPlaneBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class XYZPlaneBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class _XYZPlaneBuilderBuilder;
            class XYZPlaneBuilderImpl;
            /** Represents the XYZ Plane specification for a @link GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder@endlink .
             <br>  Created in NX7.0.0.  <br>  
            */
            class NXOPENCPP_GEOMETRICANALYSISEXPORT  XYZPlaneBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
            {
                private: XYZPlaneBuilderImpl * m_xyzplanebuilder_impl;
                private: friend class  _XYZPlaneBuilderBuilder;
                protected: XYZPlaneBuilder();
                public: ~XYZPlaneBuilder();
                /**Returns  a value indicating whether X is enabled 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsXEnabled
                (
                );
                /**Sets  a value indicating whether X is enabled 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetXEnabled
                (
                    bool isXEnabled /** isxenabled */ 
                );
                /**Returns  a value indicating whether Y is enabled 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsYEnabled
                (
                );
                /**Sets  a value indicating whether Y is enabled 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetYEnabled
                (
                    bool isYEnabled /** isyenabled */ 
                );
                /**Returns  a value indicating whether Z is enabled 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsZEnabled
                (
                );
                /**Sets  a value indicating whether Z is enabled 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetZEnabled
                (
                    bool isZEnabled /** iszenabled */ 
                );
                /**Returns  a value indicating whether the number is used 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsNumberEnabled
                (
                );
                /**Sets  a value indicating whether the number is used 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetNumberEnabled
                (
                    bool isNumberEnabled /** isnumberenabled */ 
                );
                /**Returns  a value indicating how many sections should be created 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: int Number
                (
                );
                /**Sets  a value indicating how many sections should be created 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetNumber
                (
                    int number /** number */ 
                );
                /**Returns  a value indicating whether the spacing is applied 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsSpacingEnabled
                (
                );
                /**Sets  a value indicating whether the spacing is applied 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSpacingEnabled
                (
                    bool isSpacingEnabled /** isspacingenabled */ 
                );
                /**Returns  a value indicating the space between sections 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: double Spacing
                (
                );
                /**Sets  a value indicating the space between sections 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSpacing
                (
                    double spacing /** spacing */ 
                );
                /**Returns  the anchor position 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point3d AnchorOrigin
                (
                );
                /**Sets  the anchor position 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetAnchorOrigin
                (
                    const NXOpen::Point3d & anchorOrigin /** anchororigin */ 
                );
                /**Returns  the anchor X axis 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Vector3d AnchorXAxis
                (
                );
                /**Sets  the anchor X axis 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetAnchorXAxis
                (
                    const NXOpen::Vector3d & anchorXAxis /** anchorxaxis */ 
                );
                /**Returns  the anchor Y axis 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Vector3d AnchorYAxis
                (
                );
                /**Sets  the anchor Y axis 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetAnchorYAxis
                (
                    const NXOpen::Vector3d & anchorYAxis /** anchoryaxis */ 
                );
                /** Validate whether the inputs to the component are sufficient for 
                            commit to be called.  If the component is not in a state to commit
                            then an exception is thrown.  For example, if the component requires
                            you to set some property, this method will throw an exception if
                            you haven't set it.  This method throws a not-yet-implemented
                            NXException for some components.
                         @return  Was self validation successful 
                 <br>  Created in NX3.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual bool Validate
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
