#ifndef NXOpen_SIM_ISVCONTROLPANELBUILDER_HXX_INCLUDED
#define NXOpen_SIM_ISVCONTROLPANELBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_IsvControlPanelBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SIM_IsvControlPanelBuilder.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        class IsvControlPanelBuilder;
    }
    class Builder;
    namespace CAM
    {
        class SimulationOptionsBuilder;
    }
    namespace SIM
    {
        class SimDebugBuilder;
    }
    namespace SIM
    {
        class _IsvControlPanelBuilderBuilder;
        class IsvControlPanelBuilderImpl;
        /**
            Represents a @link SIM::IsvControlPanelBuilder SIM::IsvControlPanelBuilder@endlink 
             <br> To create a new instance of this class, use @link SIM::KinematicConfigurator::CreateIsvControlPanelBuilder  SIM::KinematicConfigurator::CreateIsvControlPanelBuilder @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_SIMEXPORT  IsvControlPanelBuilder : public Builder
        {
            /** The Visualization type */
            public: enum VisualizationType
            {
                VisualizationTypeMachineCodeSimulateCse/** Machine Code Simulate Cse */,
                VisualizationTypeMachineCodeSimulateMtd/** Machine Code Simulate Mtd */,
                VisualizationTypeToolPathSimulation/** Tool Path Simulate */
            };

            /** The Single Step type */
            public: enum SingleStepType
            {
                SingleStepTypeBlock/** Block */,
                SingleStepTypeMove/** Move */,
                SingleStepTypeEvent/** Event */,
                SingleStepTypeStepOut/** Step Out */,
                SingleStepTypeStepIn/** Step In */,
                SingleStepTypeDisplay/** Display */
            };

            private: IsvControlPanelBuilderImpl * m_isvcontrolpanelbuilder_impl;
            private: friend class  _IsvControlPanelBuilderBuilder;
            protected: IsvControlPanelBuilder();
            public: ~IsvControlPanelBuilder();
            /** Gets the visualization @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::IsvControlPanelBuilder::VisualizationType GetVisualization
            (
            );
            /** Sets the visualization 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetVisualization
            (
                NXOpen::SIM::IsvControlPanelBuilder::VisualizationType type /** The visualization type*/
            );
            /** Gets the show 3d material removal @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetShow3dMaterialRemoval
            (
            );
            /** Sets the show 3d material removal  @return  The dialog response, 
                                                     if the user don't define workpiece the autoblock dialog will displayed.
                                                     And if the user cancel it the response is UGII_CANCEL
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: int SetShow3dMaterialRemoval
            (
                bool state /** The state*/
            );
            /** Gets the show tool path @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetShowToolPath
            (
            );
            /** Sets the show tool path 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetShowToolPath
            (
                bool state /** The state*/
            );
            /** Gets the single step @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::IsvControlPanelBuilder::SingleStepType GetSingleStep
            (
            );
            /** Sets the single step 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetSingleStep
            (
                NXOpen::SIM::IsvControlPanelBuilder::SingleStepType type /** The single step type*/
            );
            /** Play to Machine Time
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void PlayToMachineTime
            (
                const NXString & machineTime /** The machine time in hh:mm:ss.s format  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Play to Machine Time
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            void PlayToMachineTime
            (
                const char * machineTime /** The machine time in hh:mm:ss.s format  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Simulation Control Panel: Play Forward
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void PlayForward
            (
            );
            /** Simulation Control Panel: Play Backward
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void PlayBackward
            (
            );
            /** Simulation Control Panel: Single Step Forward
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SingleStepForward
            (
            );
            /** Simulation Control Panel: Single Step Backward
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SingleStepBackward
            (
            );
            /** Simulation Control Panel: Step to Next Operation
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void StepToNextOperation
            (
            );
            /** Simulation Control Panel: Step to Previous Operation
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void StepToPreviousOperation
            (
            );
            /** Simulation Control Panel: Simulation Speed
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetSpeed
            (
                int simSpeed /** The simulation speed*/
            );
            /**Returns  the sim debug builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NXOpen::SIM::SimDebugBuilder * SimDebugBuilder
            (
            );
            /**Returns  the simulation options builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NXOpen::CAM::SimulationOptionsBuilder * SimulationOptionsBuilder
            (
            );
            /** Jump to machine time
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void JumpToMachineTime
            (
                const NXString & machineTime /** The machine time in hh:mm:ss.s format  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Jump to machine time
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            void JumpToMachineTime
            (
                const char * machineTime /** The machine time in hh:mm:ss.s format  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Jump to details line
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void JumpToDetailsLine
            (
                int line /** The details window line*/
            );
            /** Jump to nc program line
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void JumpToNcProgramLine
            (
                int line /** The nc program window line*/
            );
            /** Apply the simulation options
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void ApplySimulationOptions
            (
            );
            /** Simulation Control Panel: (Full) Reset Machine
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void ResetMachine
            (
            );
            /** Machine Control Panel: NC Reset for all channels
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlResetNc
            (
            );
            /** Machine Control Panel: NC Reset for specific channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlResetNc
            (
                std::vector<NXString> & channels /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Machine Control Panel: Reset Part
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlResetPart
            (
            );
            /** Machine Control Panel: Fast Reset Machine
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlResetMachine
            (
            );
            /** Machine Control Panel: Clear Alarms for all channels
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlClearAlarm
            (
            );
            /** Machine Control Panel: Clear Alarms for specific channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlClearAlarm
            (
                std::vector<NXString> & channels /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Machine Control Panel: Show HMI
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlShowHmi
            (
            );
            /** Machine Control Panel: Activate Machine Single Block Mode
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlSingleBlockMode
            (
                bool enable /** Enable or disable the single block mode*/
            );
            /** Machine Control Panel: Activate Machine Dry Run
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlDryRun
            (
                bool enable /** Enable or disable the dry run*/
            );
            /** Machine Control Panel: Sets Machine Feed Rate Override
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlFeedRateOverride
            (
                int value /** The feed rate override value*/
            );
            /** Machine Control Panel: Save the Machine Data (SRAM)
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlSaveMachineData
            (
            );
            /** Simulation Control Panel: Stop the simulation
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void Stop
            (
            );
            /** Machine Control Panel: Gets the Machine Feed Rate Override Maximum Value @return  The feed rate override max value
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: int MachineControlGetFeedRateOverrideMaximumValue
            (
            );
            /** Gets the Machine Cycle Time @return  The cycle time in ms
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: int MachineControlGetCycleTime
            (
            );
            /** Write Variable e.g. VDI Variable, Machine Data @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: bool MachineControlWriteVariable
            (
                const NXString & channelName /** The channel name, NULL or empty means all channels  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & variableName /** The variable name  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & variableValue /** The variable value  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & variableType /** The variable type: VDI_SWITCH, VDI_INTEGER, VDI_SINGLESTEP  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Write Variable e.g. VDI Variable, Machine Data @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            bool MachineControlWriteVariable
            (
                const char * channelName /** The channel name, NULL or empty means all channels  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * variableName /** The variable name  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * variableValue /** The variable value  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * variableType /** The variable type: VDI_SWITCH, VDI_INTEGER, VDI_SINGLESTEP  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Read Variable e.g. VDI Variable, Machine Data @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: bool MachineControlReadVariable
            (
                const NXString & channelName /** The channel name, NULL or empty means all channels  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & variableName /** The variable name  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXString* variableValue /** The variable value*/,
                NXString* variableType /** The variable type: VDI_SWITCH, VDI_INTEGER, VDI_SINGLESTEP*/
            );
            /** Read Variable e.g. VDI Variable, Machine Data @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            bool MachineControlReadVariable
            (
                const char * channelName /** The channel name, NULL or empty means all channels  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * variableName /** The variable name  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXString* variableValue /** The variable value*/,
                NXString* variableType /** The variable type: VDI_SWITCH, VDI_INTEGER, VDI_SINGLESTEP*/
            );
            /** Gets the Channel Names @return  the names of available channel 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: std::vector<NXString> MachineControlGetChannels
            (
            );
            /** Machine Control Panel: NC Stop for all channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlStopNc
            (
            );
            /** Machine Control Panel: NC Stop for specific channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlStopNc
            (
                std::vector<NXString> & channels /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Machine Control Panel: NC Start for all channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlStartNc
            (
            );
            /** Machine Control Panel: NC Start for specific channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlStartNc
            (
                std::vector<NXString> & channels /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
