#ifndef NXOpen_GEOMETRICUTILITIES_LAWBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_LAWBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_LawBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_AlongSpineBuilder.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/GeometricUtilities_MultiTransitionLawBuilder.hxx>
#include <NXOpen/GeometricUtilities_NonInflectingLawBuilder.hxx>
#include <NXOpen/GeometricUtilities_SShapedLawBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class AlongSpineBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class MultiTransitionLawBuilder;
    }
    namespace GeometricUtilities
    {
        class NonInflectingLawBuilder;
    }
    namespace GeometricUtilities
    {
        class SShapedLawBuilder;
    }
    class Section;
    class SelectLine;
    namespace GeometricUtilities
    {
        class _LawBuilderBuilder;
        class LawBuilderImpl;
        /** Represents a LawBuilder 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  LawBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** The law types */
            public: enum Type
            {
                TypeConstant/** constant law type*/,
                TypeLinear/** linear law type */,
                TypeCubic/** cubic law type  */,
                TypeLinearAlongSpine/** linear along spine law type  */,
                TypeCubicAlongSpine/** cubic along spine law type  */,
                TypeByEquation/** by equation law type  */,
                TypeByLawCurve/** by law curve law type  */,
                TypeMultiTransition/** multi-transition law type */,
                TypeNonInflecting/** non-inflecting law type */,
                TypeSShaped/** S-shaped law type */
            };

            /** Describes the option on whether to retain the original profile. */
            public: enum RetainLawCurveOption
            {
                RetainLawCurveOptionKeepOriginal/** Keeps the original profile as it is during edit pre NX3 parms */,
                RetainLawCurveOptionReplace/** Deletes the old profile, so that user has to select new one during edit pre NX3 parms */
            };

            private: LawBuilderImpl * m_lawbuilder_impl;
            private: friend class  _LawBuilderBuilder;
            protected: LawBuilder();
            public: ~LawBuilder();
            /**Returns  the law type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder::Type LawType
            (
            );
            /**Sets  the law type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetLawType
            (
                NXOpen::GeometricUtilities::LawBuilder::Type lawType /** Set the lawType */
            );
            /**Returns  the constant value. This will be used only when the law type is constant 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Value
            (
            );
            /**Returns  the start value. This will be used only when the law type is linear/cubic 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StartValue
            (
            );
            /**Returns  the end value. This will be used only when the law type is linear/cubic 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EndValue
            (
            );
            /**Returns  the option to retain law curve.  This will be used only during the edit of Pre NX3 feature Parms 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder::RetainLawCurveOption LawCurveOption
            (
            );
            /**Sets  the option to retain law curve.  This will be used only during the edit of Pre NX3 feature Parms 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetLawCurveOption
            (
                NXOpen::GeometricUtilities::LawBuilder::RetainLawCurveOption lawCurveOption /** lawcurveoption */ 
            );
            /**Returns  the linear or cubic along spine law. This will be used only when the law type is linear along spine/cubic along spine 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AlongSpineBuilder * AlongSpineData
            (
            );
            /**Returns  the parameter. This will be used only when the law type is by equation. 
                    Make sure that the expression should be created before setting it in to the builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Parameter
            (
            );
            /**Sets  the parameter. This will be used only when the law type is by equation. 
                    Make sure that the expression should be created before setting it in to the builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetParameter
            (
                const NXString & parameter /** Set the name of parameter expression */
            );
            /**Sets  the parameter. This will be used only when the law type is by equation. 
                    Make sure that the expression should be created before setting it in to the builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            void SetParameter
            (
                const char * parameter /** Set the name of parameter expression */
            );
            /**Returns  the function. This will be used only when the law type is by equation. 
                    Make sure that the expression should be created before setting it in to the builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Function
            (
            );
            /**Sets  the function. This will be used only when the law type is by equation. 
                    Make sure that the expression should be created before setting it in to the builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetFunction
            (
                const NXString & function /** Set the name of function expression */
            );
            /**Sets  the function. This will be used only when the law type is by equation. 
                    Make sure that the expression should be created before setting it in to the builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            void SetFunction
            (
                const char * function /** Set the name of function expression */
            );
            /**Returns  the law curve. This will be used only when the law type is by law curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * LawCurve
            (
            );
            /**Returns  the base line. This will be used only when the law type is by law curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectLine * BaseLine
            (
            );
            /**Returns  the reverse direction. This will be used only when the law type is by law curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction. This will be used only when the law type is by law curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** Set the reverse direction flag */
            );
            /** Sets the spine dynamically into builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSpineIntoBuilder
            (
                NXOpen::Section * spine /** Set the Spine into builder */
            );
            /**Returns  the multi transition law. This will be used only when the law type is multi transition law 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::MultiTransitionLawBuilder * MultiTransitionLaw
            (
            );
            /**Returns  the non inflecting law. This will be used only when the law type is non inflecting law 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::NonInflectingLawBuilder * NonInflectingLaw
            (
            );
            /**Returns  the s-shaped law. This will be used only when the law type is s-shaped law 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SShapedLawBuilder * SShapedLaw
            (
            );
            /**Returns  a value indicating if @link GeometricUtilities::LawBuilder::TypeCubicAlongSpine GeometricUtilities::LawBuilder::TypeCubicAlongSpine@endlink  is using simple cubic interpolation.
                        Simple cubic interpolation minimizes enforcement of automatic tangent constraints at the defining points. This option is valid only
                        when @link GeometricUtilities::LawBuilder::Type GeometricUtilities::LawBuilder::Type@endlink  is @link GeometricUtilities::LawBuilder::TypeCubicAlongSpine GeometricUtilities::LawBuilder::TypeCubicAlongSpine@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSimpleCubicAlongSpine
            (
            );
            /**Sets  a value indicating if @link GeometricUtilities::LawBuilder::TypeCubicAlongSpine GeometricUtilities::LawBuilder::TypeCubicAlongSpine@endlink  is using simple cubic interpolation.
                        Simple cubic interpolation minimizes enforcement of automatic tangent constraints at the defining points. This option is valid only
                        when @link GeometricUtilities::LawBuilder::Type GeometricUtilities::LawBuilder::Type@endlink  is @link GeometricUtilities::LawBuilder::TypeCubicAlongSpine GeometricUtilities::LawBuilder::TypeCubicAlongSpine@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSimpleCubicAlongSpine
            (
                bool isSimpleCubic /** issimplecubic */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
