#ifndef NXOpen_CAE_DURABILITYEVENTOVERRIDESBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DURABILITYEVENTOVERRIDESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurabilityEventOverridesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_DurabilityEventOverridesBuilder.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DurabilityEventOverridesBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class Expression;
    class PhysicalMaterial;
    namespace CAE
    {
        class _DurabilityEventOverridesBuilderBuilder;
        class DurabilityEventOverridesBuilderImpl;
        /** Represents a builder class for Event Overrides.
                The user can override the set of elements and/or the material to be used
                for the computation of durability data for a certain event using Event Overrides. <br> To create a new instance of this class, use @link CAE::DurabilitySolveOptionsCollection::CreateEventoverridesBuilder  CAE::DurabilitySolveOptionsCollection::CreateEventoverridesBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DurabilityEventOverridesBuilder : public Builder
        {
            /** the use elements enum.*/
            public: enum UseElementsEnum
            {
                UseElementsEnumAll/** All */,
                UseElementsEnumSelect/** Select */
            };

            private: DurabilityEventOverridesBuilderImpl * m_durabilityeventoverridesbuilder_impl;
            private: friend class  _DurabilityEventOverridesBuilderBuilder;
            protected: DurabilityEventOverridesBuilder();
            public: ~DurabilityEventOverridesBuilder();
            /**Returns  the name. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetName
            (
                const NXString & title /** title */ 
            );
            /**Sets  the name. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            void SetName
            (
                const char * title /** title */ 
            );
            /**Returns  the use selected elements. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurabilityEventOverridesBuilder::UseElementsEnum UseElements
            (
            );
            /**Sets  the use selected elements. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetUseElements
            (
                NXOpen::CAE::DurabilityEventOverridesBuilder::UseElementsEnum useElements /** useelements */ 
            );
            /**Returns  the select elements. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * Elements
            (
            );
            /**Returns  the default material temperature. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DefaultMaterialTemperature
            (
            );
            /**Returns  the override material. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool OverrideMaterial
            (
            );
            /**Sets  the override material. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetOverrideMaterial
            (
                bool overrideMaterial /** overridematerial */ 
            );
            /**Returns  the material.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PhysicalMaterial * MaterialTag
            (
            );
            /**Sets  the material.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetMaterialTag
            (
                NXOpen::PhysicalMaterial * materialTag /** materialtag */ 
            );
            /**Returns  the override material. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseNonLinear
            (
            );
            /**Sets  the override material. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetUseNonLinear
            (
                bool useNonLinear /** usenonlinear */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
