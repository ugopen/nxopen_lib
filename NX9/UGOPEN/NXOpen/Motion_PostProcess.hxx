#ifndef NXOpen_MOTION_POSTPROCESS_HXX_INCLUDED
#define NXOpen_MOTION_POSTPROCESS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_PostProcess.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class PostProcess;
    }
    namespace Motion
    {
        class MotionSession;
    }
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Assemblies
    {
        class Explosion;
    }
    class NXObject;
    namespace Motion
    {
        class PostProcessImpl;
        /** Represents the motion post process  <br> To obtain an instance of this class, refer to @link Motion::MotionSession  Motion::MotionSession @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  PostProcess
        {
            public: /** Post process user function callback before dialog destroy, This callback function will be call when user click the user button.
                        The input integer value can be used as current animation step number 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            typedef NXOpen::Callback1<void, int> UserFunctionBeforeDialogDestroy;
            private: PostProcessImpl * m_postprocess_impl;
            private: NXOpen::Motion::MotionSession* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PostProcess(NXOpen::Motion::MotionSession *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PostProcess();
            /** Captures an arrangement from motion result of active solution  @return  Assembly arrangement 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Assemblies::Arrangement * CaptureArrangement
            (
                const NXString & arrangementName /** Name for arrangement   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int animationStep /** Animation step */
            );
            /** Captures an arrangement from motion result of active solution  @return  Assembly arrangement 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::Assemblies::Arrangement * CaptureArrangement
            (
                const char * arrangementName /** Name for arrangement   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int animationStep /** Animation step */
            );
            /** Update design position 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void UpdateDesignPosition
            (
            );
            /** Create sequence  @return  Sequence 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::NXObject * CreateSequence
            (
                const NXString & sequenceName /** The sequence name */
            );
            /** Create sequence  @return  Sequence 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::NXObject * CreateSequence
            (
                const char * sequenceName /** The sequence name */
            );
            /** Trace current position 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void TraceCurrentPosition
            (
            );
            /** Trace entire mechanism 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void TraceEntireMechanism
            (
            );
            /** Trace intersection curve 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void TraceIntersectionCurve
            (
            );
            /** Explode mechanism  @return  @link Assemblies::Explosion Assemblies::Explosion@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Assemblies::Explosion * ExplodeMechanism
            (
                const NXString & explosionName /** Name for explosion */
            );
            /** Explode mechanism  @return  @link Assemblies::Explosion Assemblies::Explosion@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::Assemblies::Explosion * ExplodeMechanism
            (
                const char * explosionName /** Name for explosion */
            );
            /** Export to movie 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ExportToMovie
            (
                const NXString & movieName /** Name for movie to export */
            );
            /** Export to movie 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void ExportToMovie
            (
                const char * movieName /** Name for movie to export */
            );
            /** List measure 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ListMeasure
            (
            );
            /** List interference 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ListInterference
            (
            );
            /** Get interference option for animation/articulation/spreadsheet run  @return Interference on/off options 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool GetInterferenceOption
            (
            );
            /** Set interference option for animation/articulation/spreadsheet run 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetInterferenceOption
            (
                bool interferenceOn /**Interference on/off options */
            );
            /** Get measure option animation/articulation/spreadsheet run @return Measure on/off options 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool GetMeasureOption
            (
            );
            /** Set measure option animation/articulation/spreadsheet run
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMeasureOption
            (
                bool measureOn /**Measure on/off options */
            );
            /** Get trace option animation/articulation/spreadsheet run @return Trace on/off options 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool GetTraceOption
            (
            );
            /** Set articulation trace option animation/articulation/spreadsheet run
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTraceOption
            (
                bool traceOn /**Trace on/off options */
            );
            /** Get stop on event option animation/articulation/spreadsheet run @return Stop on event on/off options 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool GetStopOnEventOption
            (
            );
            /** Set articulation stop on event option animation/articulation/spreadsheet run
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStopOnEventOption
            (
                bool stopOnEventOn /**Stop on event on/off options */
            );
            /** Get the animation speed for motion animation  @return  The animation speed 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int GetSpeed
            (
            );
            /** Set the animation speed for motion animation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSpeed
            (
                int speed /** The animation speed */
            );
            /** Register user button for post process. If the functionBeforeUIDestroy is register, the motion post animation, articulation, spreadsheet run UI 
                        will display the user button as the buttonName and buttonTips setting. and in this button action, it will invoke the register function and 
                        the function by menu script registered 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void RegisterUserButton
            (
                const NXString & buttonName /** the name displayed on the button*/,
                const NXString & buttonTips /** the button tool tip */,
                const NXString & buttonMenuScriptName /** the menu script name of the button */,
                const NXOpen::Motion::PostProcess::UserFunctionBeforeDialogDestroy&  functionBeforeUIDestroy /** User function for this button before dialog destroy */
            );
            /** Register user button for post process. If the functionBeforeUIDestroy is register, the motion post animation, articulation, spreadsheet run UI 
                        will display the user button as the buttonName and buttonTips setting. and in this button action, it will invoke the register function and 
                        the function by menu script registered 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void RegisterUserButton
            (
                const char * buttonName /** the name displayed on the button*/,
                const char * buttonTips /** the button tool tip */,
                const char * buttonMenuScriptName /** the menu script name of the button */,
                const NXOpen::Motion::PostProcess::UserFunctionBeforeDialogDestroy&  functionBeforeUIDestroy /** User function for this button before dialog destroy */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
