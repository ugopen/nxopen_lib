#ifndef NXOpen_DIRECTIONCOLLECTION_HXX_INCLUDED
#define NXOpen_DIRECTIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DirectionCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Direction.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class DirectionCollection;
    class BasePart;
    class Direction;
    class Conic;
    class DatumAxis;
    class Expression;
    class Face;
    class IBaseCurve;
    class IBasePlane;
    class IParameterizedSurface;
    class Line;
    class Point;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class Port;
    }
    class Scalar;
    class Sketch;
    class SmartObject;
    class Xform;
    class DirectionCollectionImpl;
    /** Represents a collection of @link Direction Direction@endlink s.  <br> To obtain an instance of this class, refer to @link BasePart  BasePart @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  DirectionCollection : public TaggedObjectCollection
    {
        private: DirectionCollectionImpl * m_directioncollection_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit DirectionCollection(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~DirectionCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::DirectionCollection::iterator::copy,initializer)
        class iterator
        {
        public:
            /** Value type associated with iterator*/ 

            typedef Direction * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            { // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::DirectionCollection *context) : m_context(context), m_current(NULL_TAG)
            { // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::DirectionCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Creates a @link Direction Direction@endlink  without parameters.  @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            const NXOpen::Point3d & origin /** origin */ ,
            const NXOpen::Vector3d & vector /** vector */ ,
            NXOpen::SmartObject::UpdateOption update /** update */ 
        );
        /** Creates a @link Direction Direction@endlink  using a @link Line Line@endlink .  @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Line * line /** line */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  using a linear @link Edge Edge@endlink  or
               the axis of a conical @link Edge Edge@endlink .  @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::IBaseCurve * edge /** edge */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  using a @link DatumAxis DatumAxis@endlink .  @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::DatumAxis * datumAxis /** datum axis */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  using two @link Routing::ControlPoint Routing::ControlPoint@endlink s.  @return   
         <br>  Created in NX7.5.4.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Routing::ControlPoint * startPoint /** The Routing Control Points (RCPs) */,
            NXOpen::Routing::ControlPoint * endPoint /** The Routing Control Points (RCPs) */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  using two @link Point Point@endlink s.  @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Point * startPoint /** start point */ ,
            NXOpen::Point * endPoint /** end point */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  using the normal of a @link Face Face@endlink  or
               the axis of a cylindrical @link Face Face@endlink .  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::IParameterizedSurface * face /** face */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  using the normal of an @link IBasePlane IBasePlane@endlink .  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::IBasePlane * plane /** Plane or DatumPlane */,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  using the normal of a @link Sketch Sketch@endlink .  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Sketch * plane /** plane */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  using the axis of a @link Conic Conic@endlink .  @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Conic * conic /** conic */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  on a @link ICurve ICurve@endlink  using a
               @link Scalar Scalar@endlink  representing the t parameter.  @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::IBaseCurve * icurve /** icurve */ ,
            NXOpen::Scalar * t /** t */ ,
            NXOpen::Direction::OnCurveOption option /** option */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  on a @link ICurve ICurve@endlink  
               at a @link Point Point@endlink .  @return   
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::IBaseCurve * icurve /** icurve */ ,
            NXOpen::Point * point /** point */ ,
            NXOpen::Direction::OnCurveOption option /** option */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  on a parent @link ICurve ICurve@endlink  
               of a @link Point Point@endlink . 
               The input point could be an extract point whose parent point is a point on curve.
               User can optionally supply a curve in which case it is honored instead of looking for the parent
               curve of the input point. In that case input point is projected on the curve to find the direction
               at the projected location.
            @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirectionOnPointParentCurve
        (
            NXOpen::Point * atPoint /** An extract point or a non associative point in which case  
                                                               a curve should be specified.*/,
            NXOpen::IBaseCurve * curve /** Optional @link Curve Curve@endlink  or @link Edge Edge@endlink  input */,
            NXOpen::Direction::OnCurveOption option /** option */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** updateoption */ 
        );
        /** Creates a Direction normal to the @link Face Face@endlink  using two 
               @link Scalar Scalar@endlink s representing the u and v parameters.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Face * face /** face */ ,
            NXOpen::Scalar * u /** u */ ,
            NXOpen::Scalar * v /** v */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  on a @link Face Face@endlink  using two 
               @link Scalar Scalar@endlink s representing the u and v parameters with the option of
               direction on face.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Face * face /** face */ ,
            NXOpen::Scalar * u /** u */ ,
            NXOpen::Scalar * v /** v */ ,
            bool absoluteUv /** true if u and v are absolute parameters */,
            NXOpen::Direction::OnFaceOption option /** option */ ,
            NXOpen::Direction * sectionDirection /** necessary when option is @link Direction::OnFaceOptionSection Direction::OnFaceOptionSection@endlink  */,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a sectional @link Direction Direction@endlink  on a @link Face Face@endlink 
               using two @link Scalar Scalar@endlink s representing the u and v parameters and a 
               @link Scalar Scalar@endlink  representing section angle measured with respect to
               positive U parameter direction at u and v parameters of the face.   @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Face * face /** face */ ,
            NXOpen::Scalar * u /** u */ ,
            NXOpen::Scalar * v /** v */ ,
            bool absoluteUv /** true if u and v are absolute parameters */,
            NXOpen::Scalar * sectionAngle /** section angle */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  on a @link Face Face@endlink  
               at a @link Point Point@endlink . 
               The input point could be a point on curve whose parent curve is an edge or a
               curve on surface feature. Or it could be an extract point whose parent point is a point on face.
               User can optionally supply a face in which case it is honored instead of looking for the parent
               face of the input point. In that case input point is projected on the face to find the direction
               at the projected location.
            @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Point * atPoint /** A point on curve or an extract point. In case of a non associative point
                                                            a face must be specified. */,
            NXOpen::Face * face /** Optional input */,
            NXOpen::Direction::OnFaceOption option /** option */ ,
            NXOpen::SmartObject * sectionDirection /** An object of type @link Direction Direction@endlink  or @link Scalar Scalar@endlink  and is necessary when option is @link Direction::OnFaceOptionSection Direction::OnFaceOptionSection@endlink  */,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** updateoption */ 
        );
        /** Creates a @link Direction Direction@endlink  using an extract
               @link Direction Direction@endlink  with optional @link Xform Xform@endlink .  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Direction * directionExtract /** direction extract */ ,
            NXOpen::Xform * xform /** Optional Xform */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  based upon the parameters used
               to define the point. If the direction can be defined solely by the
               point then the vector parameter is ignored.  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Point * point /** point */ ,
            const NXOpen::Vector3d & vector /** vector */ 
        );
        /** Creates a @link Direction Direction@endlink  normal to a @link Face Face@endlink  at a
               given @link Point Point@endlink .  @return   
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Face * geomObj /** @link Face Face@endlink  */,
            NXOpen::Point * point /** @link Point Point@endlink */,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  reverse to that of given
               @link Direction Direction@endlink .  @return   
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Direction * direction /** @link Direction Direction@endlink  */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  aligned to that of given
               @link Routing::Port Routing::Port@endlink .  @return   
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Routing::Port * port /** @link Routing::Port Routing::Port@endlink  */,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  using two @link Direction Direction@endlink s.  @return   
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Direction * direction1 /** direction1 */ ,
            NXOpen::Direction * direction2 /** direction2 */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  using an @link Expression Expression@endlink .
            @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::Point * point /** point */ ,
            NXOpen::Expression * exp /** exp */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Direction Direction@endlink  using the normal of a non-planar 
               @link Face Face@endlink  at a @link Point Point@endlink 
            @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Direction * CreateDirection
        (
            NXOpen::IParameterizedSurface * face /** face */ ,
            NXOpen::Point * point /** point */ ,
            NXOpen::Sense sense /** sense */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
