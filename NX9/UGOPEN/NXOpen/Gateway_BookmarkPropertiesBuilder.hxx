#ifndef NXOpen_GATEWAY_BOOKMARKPROPERTIESBUILDER_HXX_INCLUDED
#define NXOpen_GATEWAY_BOOKMARKPROPERTIESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Gateway_BookmarkPropertiesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Gateway_BookmarkPropertiesBuilder.hxx>
#include <NXOpen/libnxopencpp_gateway_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Gateway
    {
        class BookmarkPropertiesBuilder;
    }
    class Builder;
    namespace Gateway
    {
        class _BookmarkPropertiesBuilderBuilder;
        class BookmarkPropertiesBuilderImpl;

        /// \cond NX_NO_DOC 
        /**
            Represents a @link Gateway::BookmarkPropertiesBuilder Gateway::BookmarkPropertiesBuilder@endlink .  This class is used
            to construct a <ja_object>Gateway.Bookmark</ja_object>, which is a transient object holding
            data about a bookmark file known to the current session.
             <br> This class is not supported for KF.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_GATEWAYEXPORT  BookmarkPropertiesBuilder : public Builder
        {
            /** Describes what data related to assemblies either is present in an existing
                    bookmark file, or is to be saved to a new bookmark file.  But if the
                    <ja_attribute>Gateway.BookmarkPropertiesBuilder.AssembyContext</ja_attribute> is
                    false, then no assembly data is present for an existing bookmark file, or no
                    assembly data is to be written for a new bookmark file. */
            public: enum ComponentOptions
            {
                ComponentOptionsComponentGroupsOptionsAndStructure/** component groups options and structure */ ,
                ComponentOptionsComponentGroupsAndLoadOptions/** component groups and load options */ ,
                ComponentOptionsComponentGroupsOnly/** component groups only */ 
            };

            private: BookmarkPropertiesBuilderImpl * m_bookmarkpropertiesbuilder_impl;
            private: friend class  _BookmarkPropertiesBuilderBuilder;
            protected: BookmarkPropertiesBuilder();
            public: ~BookmarkPropertiesBuilder();
            /**Returns  the bookmark name. For
                        @link Gateway::BookmarkPropertiesBuilder::SetBookmarkName Gateway::BookmarkPropertiesBuilder::SetBookmarkName@endlink ,
                        this should be the simple name of the bookmark file, not the full path name.
                        If you are creating a new bookmark file, pass NULL to the set method. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BookmarkName
            (
            );
            /**Sets  the bookmark name. For
                        @link Gateway::BookmarkPropertiesBuilder::SetBookmarkName Gateway::BookmarkPropertiesBuilder::SetBookmarkName@endlink ,
                        this should be the simple name of the bookmark file, not the full path name.
                        If you are creating a new bookmark file, pass NULL to the set method. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBookmarkName
            (
                const NXString & bookmarkName /** bookmarkname */ 
            );
            /**Sets  the bookmark name. For
                        @link Gateway::BookmarkPropertiesBuilder::SetBookmarkName Gateway::BookmarkPropertiesBuilder::SetBookmarkName@endlink ,
                        this should be the simple name of the bookmark file, not the full path name.
                        If you are creating a new bookmark file, pass NULL to the set method. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetBookmarkName
            (
                const char * bookmarkName /** bookmarkname */ 
            );
            /**Returns  the full path name for the bookmark file.  If you are creating a new bookmark file,
                        pass NULL to the set method. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PathName
            (
            );
            /**Sets  the full path name for the bookmark file.  If you are creating a new bookmark file,
                        pass NULL to the set method. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPathName
            (
                const NXString & pathName /** pathname */ 
            );
            /**Sets  the full path name for the bookmark file.  If you are creating a new bookmark file,
                        pass NULL to the set method. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetPathName
            (
                const char * pathName /** pathname */ 
            );
            /**Returns  the description for the bookmark file.  This property may be the empty string. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Description
            (
            );
            /**Sets  the description for the bookmark file.  This property may be the empty string. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets  the description for the bookmark file.  This property may be the empty string. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /**Returns  the state of whether it is allowed to update the content of an existing bookmark. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool UpdateContent
            (
            );
            /**Sets  the state of whether it is allowed to update the content of an existing bookmark. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUpdateContent
            (
                bool updateContent /** updatecontent */ 
            );
            /**Returns  the assembly context.  If true, assembly data is present in an existing bookmark
                    file, or is to be written to a new bookmark file.  If false, no assembly data is
                    present in an existing bookmark file, and no assembly data is to be written to
                    a new bookmark file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssemblyContext
            (
            );
            /**Sets  the assembly context.  If true, assembly data is present in an existing bookmark
                    file, or is to be written to a new bookmark file.  If false, no assembly data is
                    present in an existing bookmark file, and no assembly data is to be written to
                    a new bookmark file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssemblyContext
            (
                bool assemblyContext /** assemblycontext */ 
            );
            /**Returns  the component option.  Please refer to the explanation for
                    <ja_type>Gateway.BookmarkPropertiesBuilder.CompOption</ja_type>. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Gateway::BookmarkPropertiesBuilder::ComponentOptions ComponentOption
            (
            );
            /**Sets  the component option.  Please refer to the explanation for
                    <ja_type>Gateway.BookmarkPropertiesBuilder.CompOption</ja_type>. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentOption
            (
                NXOpen::Gateway::BookmarkPropertiesBuilder::ComponentOptions componentOption /** componentoption */ 
            );
            /**Returns  the display setting.  If true, most display settings are present in an existing
                    bookmark file, or are to be written to a new bookmark file.  If false, the display
                    settings are not in an existing bookmark file, and are not to be written to an
                    existing bookmark file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplaySetting
            (
            );
            /**Sets  the display setting.  If true, most display settings are present in an existing
                    bookmark file, or are to be written to a new bookmark file.  If false, the display
                    settings are not in an existing bookmark file, and are not to be written to an
                    existing bookmark file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplaySetting
            (
                bool displaySetting /** displaysetting */ 
            );
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
