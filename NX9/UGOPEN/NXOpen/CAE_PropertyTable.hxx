#ifndef NXOpen_CAE_PROPERTYTABLE_HXX_INCLUDED
#define NXOpen_CAE_PROPERTYTABLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PropertyTable.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePropertyTable.hxx>
#include <NXOpen/CAE_BeamSectionOffsetOptions.hxx>
#include <NXOpen/CAE_BeamSectionOptions.hxx>
#include <NXOpen/CAE_BeamSectionOrientationOptions.hxx>
#include <NXOpen/CAE_MaterialOptions.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PropertyTable;
    }
    class Axis;
    class BasePropertyTable;
    namespace CAE
    {
        class BeamSectionOffsetOptions;
    }
    namespace CAE
    {
        class BeamSectionOptions;
    }
    namespace CAE
    {
        class BeamSectionOrientationOptions;
    }
    namespace CAE
    {
        class MaterialOptions;
    }
    namespace CAE
    {
        class NamedPropertyTable;
    }
    namespace CAE
    {
        class SetManager;
    }
    class Direction;
    namespace Fields
    {
        class FieldExpression;
    }
    namespace Fields
    {
        class VectorFieldWrapper;
    }
    class NXObject;
    class Point;
    class Unit;
    namespace CAE
    {
        class _PropertyTableBuilder;
        class PropertyTableImpl;
        /**  @brief  Represents a property table  

           <br> This is a sub object  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PropertyTable : public BasePropertyTable
        {
            /** Property Types */
            public: enum PropertyType
            {
                PropertyTypeUnknown/** BASE_PROPERTY_TABLE_property_type_unknown               */,
                PropertyTypeString/** BASE_PROPERTY_TABLE_property_type_string                */,
                PropertyTypeBoolean/** BASE_PROPERTY_TABLE_property_type_boolean               */,
                PropertyTypeInteger/** BASE_PROPERTY_TABLE_property_type_integer               */,
                PropertyTypeDouble/** BASE_PROPERTY_TABLE_property_type_double                */,
                PropertyTypeFieldWrapper/** BASE_PROPERTY_TABLE_property_type_field_wrapper         */,
                PropertyTypeScalarFieldWrapper/** BASE_PROPERTY_TABLE_property_type_scalar_field_wrapper  */,
                PropertyTypeCoordinateSystem/** BASE_PROPERTY_TABLE_property_type_coordinate_system     */,
                PropertyTypeDoubleArray/** BASE_PROPERTY_TABLE_property_type_double_array          */,
                PropertyTypeIntegerArray/** BASE_PROPERTY_TABLE_property_type_integer_array         */,
                PropertyTypePhysicalMaterial/** BASE_PROPERTY_TABLE_property_type_physical_material     */,
                PropertyTypeMatrix/** BASE_PROPERTY_TABLE_property_type_matrix                */,
                PropertyTypeScalarTable/** BASE_PROPERTY_TABLE_property_type_scalar_table          */,
                PropertyTypeText = -1/** text */ ,
                PropertyTypeFieldExpression = -2/** field expression */ ,
                PropertyTypeVectorFieldWrapper = -3/** vector field wrapper */ ,
                PropertyTypeVector = -4/** vector */ ,
                PropertyTypeReference = -5/** reference */ ,
                PropertyTypePoint = -6/** point */ ,
                PropertyTypeDateTime = -7/** date time */ ,
                PropertyTypeNamedPropertyTableArray = -8/** named property table array */ ,
                PropertyTypeSetManager = -9/** set manager */ ,
                PropertyTypeNamedPropertyTable = -10/** named property table */ ,
                PropertyTypeAxis = -11/** axis */ ,
                PropertyTypeCaeSection = -12/** cae section */ ,
                PropertyTypeSectionOrientation = -13/** section orientation */ ,
                PropertyTypeSectionOffset = -14/** section offset */ 
            };

            private: PropertyTableImpl * m_propertytable_impl;
            private: friend class  _PropertyTableBuilder;
            protected: PropertyTable();
            public: ~PropertyTable();
            /** Returns the type of the property  @return  type of the property 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PropertyTable::PropertyType GetPropertyType
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the type of the property  @return  type of the property 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::PropertyTable::PropertyType GetPropertyType
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the text value of the property
                      @return  value of the property 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetTextPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the text value of the property
                      @return  value of the property 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXString> GetTextPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the text value of the property
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTextPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & propertyValue /** value of the property */
            );
            /** Sets the text value of the property
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void SetTextPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & propertyValue /** value of the property */
            );
            /** Returns the double value of the property with units
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetScalarWithDataPropertyValue
            (
                const NXString & propertyName /** name of the Scalar   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double* propertyValue /** The current double value of the Scalar */,
                NXOpen::Unit ** unitType /** Unit type for the Scalar NULL if the Scalar has no units */
            );
            /** Returns the double value of the property with units
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void GetScalarWithDataPropertyValue
            (
                const char * propertyName /** name of the Scalar   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double* propertyValue /** The current double value of the Scalar */,
                NXOpen::Unit ** unitType /** Unit type for the Scalar NULL if the Scalar has no units */
            );
            /** Sets the the Scalar property as a constant double value with units.
                        Use @link BasePropertyTable::SetScalarPropertyValue BasePropertyTable::SetScalarPropertyValue@endlink  to enable
                        Design Logic for this property.
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetScalarWithDataPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double propertyValue /** The double value for the Scalar */,
                NXOpen::Unit * unitType /** Unit type for the Scalar NULL if the Scalar has no units */
            );
            /** Sets the the Scalar property as a constant double value with units.
                        Use @link BasePropertyTable::SetScalarPropertyValue BasePropertyTable::SetScalarPropertyValue@endlink  to enable
                        Design Logic for this property.
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetScalarWithDataPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double propertyValue /** The double value for the Scalar */,
                NXOpen::Unit * unitType /** Unit type for the Scalar NULL if the Scalar has no units */
            );
            /** Sets the the Scalar property as a string value with units.
                        When the string does not represent a constant number, then an expression is created.
                        Once a property has an expression, subsequent set commands will retain the expression
                        and edit the new string into it.
                        The string must not be empty. To set this property to empty, use @link BasePropertyTable::SetTablePropertyWithoutValue BasePropertyTable::SetTablePropertyWithoutValue@endlink .
                        
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetScalarWithDataPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & propertyValue /** The string value for the Scalar   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unitType /** Unit type for the Scalar NULL if the Scalar has no units */
            );
            /** Sets the the Scalar property as a string value with units.
                        When the string does not represent a constant number, then an expression is created.
                        Once a property has an expression, subsequent set commands will retain the expression
                        and edit the new string into it.
                        The string must not be empty. To set this property to empty, use @link BasePropertyTable::SetTablePropertyWithoutValue BasePropertyTable::SetTablePropertyWithoutValue@endlink .
                        
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetScalarWithDataPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * propertyValue /** The string value for the Scalar   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unitType /** Unit type for the Scalar NULL if the Scalar has no units */
            );
            /** Returns the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                      @return  value of the property 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldExpression * GetScalarFieldPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                      @return  value of the property 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::FieldExpression * GetScalarFieldPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScalarFieldPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Fields::FieldExpression * propertyValue /** value of the property */
            );
            /** Sets the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void SetScalarFieldPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Fields::FieldExpression * propertyValue /** value of the property */
            );
            /** Returns the direction @link Direction Direction@endlink  value of the property
                      @return  value of the property 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * GetVectorPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the direction @link Direction Direction@endlink  value of the property
                      @return  value of the property 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Direction * GetVectorPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the direction @link Direction Direction@endlink  value of the property
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVectorPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Direction * propertyValue /** value of the property */
            );
            /** Sets the direction @link Direction Direction@endlink  value of the property
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void SetVectorPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Direction * propertyValue /** value of the property */
            );
            /** Returns the referenced object value of the property
                      @return  value of the property 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * GetReferencePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the referenced object value of the property
                      @return  value of the property 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::NXObject * GetReferencePropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the referenced object value of the property
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReferencePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::NXObject * propertyValue /** value of the property 
                                                                                            The object passed in can be of the following types 
                                                                                            @link CAE::CaeGroup CAE::CaeGroup@endlink 
                                                                                            @link CAE::CAEVertex CAE::CAEVertex@endlink 
                                                                                            @link CAE::CAEEdge CAE::CAEEdge@endlink 
                                                                                            @link CAE::CAEFace CAE::CAEFace@endlink 
                                                                                            @link CAE::CAEBody CAE::CAEBody@endlink 
                                                                                            @link CAE::SimBC CAE::SimBC@endlink 
                                                                                          */
            );
            /** Sets the referenced object value of the property
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void SetReferencePropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::NXObject * propertyValue /** value of the property 
                                                                                            The object passed in can be of the following types 
                                                                                            @link CAE::CaeGroup CAE::CaeGroup@endlink 
                                                                                            @link CAE::CAEVertex CAE::CAEVertex@endlink 
                                                                                            @link CAE::CAEEdge CAE::CAEEdge@endlink 
                                                                                            @link CAE::CAEFace CAE::CAEFace@endlink 
                                                                                            @link CAE::CAEBody CAE::CAEBody@endlink 
                                                                                            @link CAE::SimBC CAE::SimBC@endlink 
                                                                                          */
            );
            /** Returns the point value of the property
                      @return  value of the property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * GetPointPropertyValue
            (
                const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the point value of the property
                      @return  value of the property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Point * GetPointPropertyValue
            (
                const char * propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the point value of the property
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPointPropertyValue
            (
                const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Point * propertyValue /** value of the property */
            );
            /** Sets the point value of the property
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetPointPropertyValue
            (
                const char * propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Point * propertyValue /** value of the property */
            );
            /** Returns the date time value of the property
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void GetDateTimePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int* propertyYear /** year of the property */,
                int* propertyMonth /** month of the property */,
                int* propertyDay /** day of the property */,
                int* propertyHour /** hour of the property */,
                int* propertyMin /** minute of the property */,
                int* propertySecond /** second of the property */,
                int* propertyMsec /** milisecond of the property */
            );
            /** Returns the date time value of the property
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void GetDateTimePropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int* propertyYear /** year of the property */,
                int* propertyMonth /** month of the property */,
                int* propertyDay /** day of the property */,
                int* propertyHour /** hour of the property */,
                int* propertyMin /** minute of the property */,
                int* propertySecond /** second of the property */,
                int* propertyMsec /** milisecond of the property */
            );
            /** Returns the date time value of the property
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDateTimePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int propertyYear /** year of the property */,
                int propertyMonth /** month of the property */,
                int propertyDay /** day of the property */,
                int propertyHour /** hour of the property */,
                int propertyMin /** minute of the property */,
                int propertySecond /** second of the property */,
                int propertyMsec /** milisecond of the property */
            );
            /** Returns the date time value of the property
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetDateTimePropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int propertyYear /** year of the property */,
                int propertyMonth /** month of the property */,
                int propertyDay /** day of the property */,
                int propertyHour /** hour of the property */,
                int propertyMin /** minute of the property */,
                int propertySecond /** second of the property */,
                int propertyMsec /** milisecond of the property */
            );
            /** Returns the referenced array object value of the property
                      @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAE::NamedPropertyTable *> GetNamedPropertyTableArrayPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the referenced array object value of the property
                      @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXOpen::CAE::NamedPropertyTable *> GetNamedPropertyTableArrayPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the referenced object array value of the property
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNamedPropertyTableArrayPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::CAE::NamedPropertyTable *> & propertyValue /** property value */ 
            );
            /** Sets the referenced object array value of the property
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetNamedPropertyTableArrayPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::CAE::NamedPropertyTable *> & propertyValue /** property value */ 
            );
            /** Returns the referenced SetManager value of the property
                      @return  Value of Set Manager Reference 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SetManager * GetSetManagerPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the referenced SetManager value of the property
                      @return  Value of Set Manager Reference 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::SetManager * GetSetManagerPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the referenced referenced named property table object value of the property
                      @return  Value of Named Proeprty Table Reference 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::NamedPropertyTable * GetNamedPropertyTablePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the referenced referenced named property table object value of the property
                      @return  Value of Named Proeprty Table Reference 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::NamedPropertyTable * GetNamedPropertyTablePropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the referenced named property table object value of the property
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNamedPropertyTablePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::NamedPropertyTable * namedPropertyTable /** value of the property 
                                                                                                             The object passed in can be of the following types 
                                                                                                             @link CAE::PhysicalPropertyTable CAE::PhysicalPropertyTable@endlink  
                                                                                                             @link CAE::Laminate CAE::Laminate@endlink 
                                                                                                          */
            );
            /** Sets the referenced named property table object value of the property
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetNamedPropertyTablePropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::NamedPropertyTable * namedPropertyTable /** value of the property 
                                                                                                             The object passed in can be of the following types 
                                                                                                             @link CAE::PhysicalPropertyTable CAE::PhysicalPropertyTable@endlink  
                                                                                                             @link CAE::Laminate CAE::Laminate@endlink 
                                                                                                          */
            );
            /** Returns the axis @link Axis Axis@endlink 
                      @return  value of the property 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * GetAxisPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the axis @link Axis Axis@endlink 
                      @return  value of the property 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Axis * GetAxisPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the axis @link Axis Axis@endlink 
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAxisPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Axis * propertyValue /** value of the property */
            );
            /** Sets the axis @link Axis Axis@endlink 
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void SetAxisPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Axis * propertyValue /** value of the property */
            );
            /** Returns the  material options @link CAE::MaterialOptions CAE::MaterialOptions@endlink 
                      @return  material options 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::MaterialOptions * GetPhysicalMaterialPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the  material options @link CAE::MaterialOptions CAE::MaterialOptions@endlink 
                      @return  material options 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::MaterialOptions * GetPhysicalMaterialPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the material options @link CAE::MaterialOptions CAE::MaterialOptions@endlink 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPhysicalMaterialPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::MaterialOptions * materialOptions /** material options */
            );
            /** Sets the material options @link CAE::MaterialOptions CAE::MaterialOptions@endlink 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetPhysicalMaterialPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::MaterialOptions * materialOptions /** material options */
            );
            /** Returns the  beam section options @link CAE::BeamSectionOptions CAE::BeamSectionOptions@endlink 
                      @return  material options 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::BeamSectionOptions * GetCaeSectionPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the  beam section options @link CAE::BeamSectionOptions CAE::BeamSectionOptions@endlink 
                      @return  material options 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::BeamSectionOptions * GetCaeSectionPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the beam section options @link CAE::BeamSectionOptions CAE::BeamSectionOptions@endlink 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCaeSectionPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::BeamSectionOptions * beamSectionOptions /** material options */
            );
            /** Sets the beam section options @link CAE::BeamSectionOptions CAE::BeamSectionOptions@endlink 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetCaeSectionPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::BeamSectionOptions * beamSectionOptions /** material options */
            );
            /** Returns the vector field wrapper @link Fields::VectorFieldWrapper Fields::VectorFieldWrapper@endlink  
                      @return  value of the property 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::VectorFieldWrapper * GetVectorFieldWrapperPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the vector field wrapper @link Fields::VectorFieldWrapper Fields::VectorFieldWrapper@endlink  
                      @return  value of the property 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::VectorFieldWrapper * GetVectorFieldWrapperPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the vector field wrapper @link Fields::VectorFieldWrapper Fields::VectorFieldWrapper@endlink 
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVectorFieldWrapperPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Fields::VectorFieldWrapper * propertyValue /** value of the property */
            );
            /** Sets the vector field wrapper @link Fields::VectorFieldWrapper Fields::VectorFieldWrapper@endlink 
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetVectorFieldWrapperPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Fields::VectorFieldWrapper * propertyValue /** value of the property */
            );
            /** Returns the  beam section orientation options @link CAE::BeamSectionOrientationOptions CAE::BeamSectionOrientationOptions@endlink 
                      @return  section orientation options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::BeamSectionOrientationOptions * GetSectionOrientationPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the  beam section orientation options @link CAE::BeamSectionOrientationOptions CAE::BeamSectionOrientationOptions@endlink 
                      @return  section orientation options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::BeamSectionOrientationOptions * GetSectionOrientationPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the beam section orientation options @link CAE::BeamSectionOrientationOptions CAE::BeamSectionOrientationOptions@endlink 
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSectionOrientationPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::BeamSectionOrientationOptions * beamSectionOptions /** section orientation options */
            );
            /** Sets the beam section orientation options @link CAE::BeamSectionOrientationOptions CAE::BeamSectionOrientationOptions@endlink 
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetSectionOrientationPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::BeamSectionOrientationOptions * beamSectionOptions /** section orientation options */
            );
            /** Returns the  beam section offset options @link CAE::BeamSectionOffsetOptions CAE::BeamSectionOffsetOptions@endlink 
                      @return  section offset options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::BeamSectionOffsetOptions * GetSectionOffsetPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the  beam section offset options @link CAE::BeamSectionOffsetOptions CAE::BeamSectionOffsetOptions@endlink 
                      @return  section offset options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::BeamSectionOffsetOptions * GetSectionOffsetPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the beam section offset options @link CAE::BeamSectionOffsetOptions CAE::BeamSectionOffsetOptions@endlink 
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSectionOffsetPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::BeamSectionOffsetOptions * beamSectionOptions /** section offset options */
            );
            /** Sets the beam section offset options @link CAE::BeamSectionOffsetOptions CAE::BeamSectionOffsetOptions@endlink 
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetSectionOffsetPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::BeamSectionOffsetOptions * beamSectionOptions /** section offset options */
            );
            /** Returns the ext menu value of the property
                      @return  value of the property 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString GetExtMenuPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the ext menu value of the property
                      @return  value of the property 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXString GetExtMenuPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the ext menu value of the property
                     
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetExtMenuPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & propertyValue /** value of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the ext menu value of the property
                     
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetExtMenuPropertyValue
            (
                const char * propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * propertyValue /** value of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
