#ifndef NXOpen_BLOCKSTYLER_COMPOSITEBLOCK_HXX_INCLUDED
#define NXOpen_BLOCKSTYLER_COMPOSITEBLOCK_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BlockStyler_CompositeBlock.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_CompositeBlock.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace BlockStyler
    {
        class CompositeBlock;
    }
    namespace BlockStyler
    {
        class UIBlock;
    }
    namespace BlockStyler
    {
        class _CompositeBlockBuilder;
        class CompositeBlockImpl;
        /** A composite block is a block that contains other blocks 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  CompositeBlock : public BlockStyler::UIBlock
        {
            private: CompositeBlockImpl * m_compositeblock_impl;
            private: friend class  _CompositeBlockBuilder;
            protected: CompositeBlock();
            public: ~CompositeBlock();
            /** Finds a block contained in the composite block. Throws an exception if block not present @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::UIBlock * FindBlock
            (
                const NXString & blockName /** Block name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Finds a block contained in the composite block. Throws an exception if block not present @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::BlockStyler::UIBlock * FindBlock
            (
                const char * blockName /** Block name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets all the blocks available in the composite block  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::BlockStyler::UIBlock *> GetBlocks
            (
            );
            /**Returns  the block contained in the composite block that was last updated.
                For example, if the CompositeBlock is an item contained in a SetList and
                your update handler is notified that the CompositeBlock has been updated,
                this method returns which block inside the CompositeBlock has been updated. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::UIBlock * LastUpdated
            (
            );
            /**Returns  the Cue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString Cue
            (
            );
            /**Sets  the Cue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCue
            (
                const NXString & cue /** cue */ 
            );
            /**Sets  the Cue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetCue
            (
                const char * cue /** cue */ 
            );
            /**Returns  the Dialog Sizing
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int DialogSizing
            (
            );
            /**Sets  the Dialog Sizing
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDialogSizing
            (
                int enumIndex /** enumindex */ 
            );
            /**Returns  the Dialog Sizing as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString DialogSizingAsString
            (
            );
            /**Sets  the Dialog Sizing as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDialogSizingAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the Dialog Sizing as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetDialogSizingAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the Dialog Sizing members @return Value to get from the property
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetDialogSizingMembers
            (
            );
            /**Returns  the Navigation Style
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int NavigationStyle
            (
            );
            /**Returns  the Navigation Style as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString NavigationStyleAsString
            (
            );
            /** Gets the Navigation Style members @return Value to get from the property
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetNavigationStyleMembers
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
