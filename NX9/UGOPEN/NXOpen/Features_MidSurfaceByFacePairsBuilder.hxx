#ifndef NXOpen_FEATURES_MIDSURFACEBYFACEPAIRSBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MIDSURFACEBYFACEPAIRSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MidSurfaceByFacePairsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_MidSurfaceByFacePairsBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class MidSurfaceByFacePairsBuilder;
    }
    class Expression;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class NXObject;
    class ScCollector;
    class SelectBodyList;
    namespace Features
    {
        class _MidSurfaceByFacePairsBuilderBuilder;
        class MidSurfaceByFacePairsBuilderImpl;
        /**
            Represents a @link Features::MidSurfaceByFacePairs Features::MidSurfaceByFacePairs@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateMidSurfaceByFacePairsBuilder  Features::FeatureCollection::CreateMidSurfaceByFacePairsBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AutoPopulateSideTwoOption </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        HideBodyOption </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MergeAngleTolerance </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        PairingStrategy </td> <td> 
         
        Progressive </td> </tr> 

        <tr><td> 
         
        SearchDistance.Value </td> <td> 
         
        2.0 (millimeters part), 0.078 (inches part) </td> </tr> 

        <tr><td> 
         
        ThicknessRatio </td> <td> 
         
        0.1 </td> </tr> 

        <tr><td> 
         
        ThicknessValue.Value </td> <td> 
         
        2.0 (millimeters part), 0.078 (inches part) </td> </tr> 

        <tr><td> 
         
        TrimmingOption </td> <td> 
         
        AdvancedTrimming </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  MidSurfaceByFacePairsBuilder : public Features::FeatureBuilder
        {
            /** pairing strategy */
            public: enum PairingStrategyType
            {
                PairingStrategyTypeProgressive/**Progressive thickness is used*/,
                PairingStrategyTypeThickness/**Find all faces within search distance */,
                PairingStrategyTypeManual/**Manual pairing process */
            };

            /** trimming options */
            public: enum TrimmingOptionType
            {
                TrimmingOptionTypeAdvancedTrimming/**Advanced trimming*/,
                TrimmingOptionTypeBodyBasedTrimming/**Body based trimming*/,
                TrimmingOptionTypeTrimtoSide1withNoExtension/**Trim to master*/,
                TrimmingOptionTypeSkipTrimming/**Skip trimming for replacement sheets*/
            };

            /** midsurface options */
            public: enum SurfaceType
            {
                SurfaceTypeStandard/**Default surface creation method*/,
                SurfaceTypeSide1/**Use side 1 faces as mid sheet */,
                SurfaceTypeOffset/**Use offset */,
                SurfaceTypeCloudOfPoints/**Cloud of points*/,
                SurfaceTypeLarge/**Use single largest surface*/
            };

            private: MidSurfaceByFacePairsBuilderImpl * m_midsurfacebyfacepairsbuilder_impl;
            private: friend class  _MidSurfaceByFacePairsBuilderBuilder;
            protected: MidSurfaceByFacePairsBuilder();
            public: ~MidSurfaceByFacePairsBuilder();
            /**Returns  the solid bodies for midsurface definition 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * BodySelection
            (
            );
            /**Returns  the ignore face selection 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * IgnoreFaceSelection
            (
            );
            /**Returns  the pairing strategy used by automatic pairs 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MidSurfaceByFacePairsBuilder::PairingStrategyType PairingStrategy
            (
            );
            /**Sets  the pairing strategy used by automatic pairs 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPairingStrategy
            (
                NXOpen::Features::MidSurfaceByFacePairsBuilder::PairingStrategyType pairingStrategy /** pairingstrategy */ 
            );
            /**Returns  the dt ratio for ignoring small features 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double ThicknessRatio
            (
            );
            /**Sets  the dt ratio for ignoring small features 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThicknessRatio
            (
                double thicknessRatio /** thicknessratio */ 
            );
            /**Returns  the thickness value when pairing strategy is set to Thickness 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThicknessValue
            (
            );
            /**Returns  the merge angle tolerance 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: double MergeAngleTolerance
            (
            );
            /**Sets  the merge angle tolerance 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMergeAngleTolerance
            (
                double mergeAngleTolerance /** mergeangletolerance */ 
            );
            /**Returns  the side one faces for manual pair 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SideOneSelection
            (
            );
            /**Returns  the side two faces for manual pair 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SideTwoSelection
            (
            );
            /**Returns  the auto populate side two faces option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool AutoPopulateSideTwoOption
            (
            );
            /**Sets  the auto populate side two faces option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAutoPopulateSideTwoOption
            (
                bool autoPopulateSideTwoOption /** autopopulatesidetwooption */ 
            );
            /**Returns  the search distance to be used when searching for side 2 faces 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SearchDistance
            (
            );
            /** Automatically populate side two faces 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void AutoPopulateSideTwo
            (
            );
            /**Returns  the user defined sheet selection 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SheetSelection
            (
            );
            /** Create or edit a face pair from selected side1 and side2 faces  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> CreateFacePair
            (
            );
            /** Reverse face pair 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ReverseFacePair
            (
                const std::vector<NXOpen::NXObject *> & facePairs /** Pairs to be reversed */
            );
            /** Use cloud of points to generate neutral sheet 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ModifyMidsurface
            (
                NXOpen::Features::MidSurfaceByFacePairsBuilder::SurfaceType surfaceOption /** surfaceoption */ ,
                const std::vector<NXOpen::NXObject *> & facePairs /** Pairs to use cloud of points */
            );
            /** Deletes the face pair 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void DeleteFacePair
            (
                const std::vector<NXOpen::NXObject *> & facePairs /** Pairs to be deleted */
            );
            /** Merges the face pairs 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void MergeFacePairs
            (
                const std::vector<NXOpen::NXObject *> & facePairs /** Pairs to be merged */
            );
            /**Returns  the trimming option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MidSurfaceByFacePairsBuilder::TrimmingOptionType TrimmingOption
            (
            );
            /**Sets  the trimming option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimmingOption
            (
                NXOpen::Features::MidSurfaceByFacePairsBuilder::TrimmingOptionType trimmingOption /** trimmingoption */ 
            );
            /** Trim the face pairs 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void Trim
            (
                NXOpen::Features::MidSurfaceByFacePairsBuilder::TrimmingOptionType trimmingOption /** trimmingoption */ ,
                const std::vector<NXOpen::NXObject *> & facePairs /** Pairs to be deleted */
            );
            /**Returns  the hide solid body option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool HideBodyOption
            (
            );
            /**Sets  the hide solid body option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHideBodyOption
            (
                bool hideBodyOption /** hidebodyoption */ 
            );
            /**Returns  the immediate update 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool UpdateOption
            (
            );
            /**Sets  the immediate update 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUpdateOption
            (
                bool updateOption /** updateoption */ 
            );
            /** Set face pair to edit 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetupFacePairInContext
            (
                NXOpen::Features::Feature * facePair /** Face pair to edit*/
            );
            /** Validate and filter out invalid items from the selection list 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ValidateSelection
            (
                int selectionType /** 0 - BodySelection, 1 - SideOneSelection, 2 - SideTwoSelection */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
