#ifndef NXOpen_MOTION_MARKERTONODEDATA_HXX_INCLUDED
#define NXOpen_MOTION_MARKERTONODEDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_MarkerToNodeData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/Motion_MarkerToNodeData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class MarkerToNodeData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXObject;
    namespace Motion
    {
        class _MarkerToNodeDataBuilder;
        class MarkerToNodeDataImpl;
        /** 
            Represents the marker to node data which is a list item in @link Motion::FlexBodyBuilder  Motion::FlexBodyBuilder @endlink 
            
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  MarkerToNodeData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: MarkerToNodeDataImpl * m_markertonodedata_impl;
            private: friend class  _MarkerToNodeDataBuilder;
            protected: MarkerToNodeData();
            public: ~MarkerToNodeData();
            /**Returns  the marker or joint object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::NXObject * Marker
            (
            );
            /**Sets  the marker or joint object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMarker
            (
                NXOpen::NXObject * marker /** marker */ 
            );
            /**Returns  the i or j marker identity 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int MarkerPosition
            (
            );
            /**Sets  the i or j marker identity 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMarkerPosition
            (
                int markerPosition /** markerposition */ 
            );
            /**Returns  the node id 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int NodeId
            (
            );
            /**Sets  the node id 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetNodeId
            (
                int nodeID /** nodeid */ 
            );
            /**Returns  whether to move the marker to node 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool Move
            (
            );
            /**Sets  whether to move the marker to node 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMove
            (
                bool move /** move */ 
            );
            /** Gets the node location  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<double> GetNodeLocation
            (
            );
            /** Sets the node locations  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetNodeLocation
            (
                const std::vector<double> & nodeLocation /** nodelocation */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
