#ifndef NXOpen_DIE_PADCHILDBUILDER_HXX_INCLUDED
#define NXOpen_DIE_PADCHILDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_PadChildBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class PadChildBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class ILocation;
    class IOrientation;
    class IProfile;
    class IReferenceAxis;
    class Point;
    namespace Die
    {
        class _PadChildBuilderBuilder;
        class PadChildBuilderImpl;
        /** Represents a Die Pad Child sub feature.  <br> This sub feature is created via the main feature builder.  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  PadChildBuilder : public Features::FeatureBuilder
        {
            /** Settings for the shape type of the die pad. */
            public: enum ShapeTypeOption
            {
                ShapeTypeOptionRectangular/** Rectangular pad. */,
                ShapeTypeOptionCircular/** Circular pad. */,
                ShapeTypeOptionCurve/** Curve defined pad. */
            };

            private: PadChildBuilderImpl * m_padchildbuilder_impl;
            private: friend class  _PadChildBuilderBuilder;
            protected: PadChildBuilder();
            public: ~PadChildBuilder();
            /** Sets the shape profile of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetShape
            (
                NXOpen::Die::DirectionOption direction /** Profile direction. */,
                const std::vector<NXOpen::IProfile *> & profileEntries /** The profile entries, can be curves, edges, faces, sketches or curve features. */
            );
            /** Gets the shape profile of the die pads.  @return  The profile entries, will be curves, edges, faces, sketches or curve features. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: std::vector<NXOpen::IProfile *> GetShape
            (
                NXOpen::Die::DirectionOption* direction /** Profile direction. */
            );
            /**Sets  the location of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetLocation
            (
                NXOpen::ILocation * location /** location */ 
            );
            /**Returns  the location of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::ILocation * Location
            (
            );
            /** Translates the location of the die pad by the specified amount. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void TranslateLocation
            (
                const NXOpen::Vector3d & translateDist /** A scaled vector indicating the distance to translate */
            );
            /**Sets  the orientation plane of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetOrientationPlane
            (
                NXOpen::IOrientation * orientationPlane /** orientation plane */ 
            );
            /**Returns  the orientation plane of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::IOrientation * OrientationPlane
            (
            );
            /**Sets  the location offset direction of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetLocationOffsetDirection
            (
                NXOpen::IReferenceAxis * locationOffsetDirection /** location offset direction */ 
            );
            /**Returns  the location offset direction of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::IReferenceAxis * LocationOffsetDirection
            (
            );
            /**Sets  the limiting surface of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetLimitingSurface
            (
                NXOpen::IOrientation * limitingSurface /** limiting surface */ 
            );
            /**Returns  the limiting surface of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::IOrientation * LimitingSurface
            (
            );
            /** Sets the hole centers of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetHoleCenters
            (
                const std::vector<NXOpen::Point *> & holes /** The hole centers. */
            );
            /** Gets the hole centers of the die pad.  @return  The hole centers. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: std::vector<NXOpen::Point *> GetHoleCenters
            (
            );
            /**Sets  the surface offset of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetSurfaceOffset
            (
                double surfaceOffset /** surface offset */ 
            );
            /**Returns  the surface offset of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double SurfaceOffset
            (
            );
            /**Sets  the location offset of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetLocationOffset
            (
                double locationOffset /** location offset */ 
            );
            /**Returns  the location offset of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double LocationOffset
            (
            );
            /**Sets  the diameter of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDiameter
            (
                double diameter /** diameter */ 
            );
            /**Returns  the diameter of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double Diameter
            (
            );
            /**Sets  the length of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetLength
            (
                double length /** length */ 
            );
            /**Returns  the length of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double Length
            (
            );
            /**Sets  the width of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetWidth
            (
                double width /** width */ 
            );
            /**Returns  the width of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double Width
            (
            );
            /**Sets  the height of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetHeight
            (
                double height /** height */ 
            );
            /**Returns  the height of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double Height
            (
            );
            /**Sets  the relief width of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetReliefWidth
            (
                double reliefWidth /** relief width */ 
            );
            /**Returns  the relief width of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double ReliefWidth
            (
            );
            /**Sets  the relief depth of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetReliefDepth
            (
                double reliefDepth /** relief depth */ 
            );
            /**Returns  the relief depth of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double ReliefDepth
            (
            );
            /**Sets  the hole diameter of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetHoleDiameter
            (
                double holeDiameter /** hole diameter */ 
            );
            /**Returns  the hole diameter of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double HoleDiameter
            (
            );
            /**Returns  the center hole switch of the die pad, if true the center hole will be created in the pad, if false it will not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: bool CenterHole
            (
            );
            /**Sets  the center hole switch of the die pad, if true the center hole will be created in the pad, if false it will not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCenterHole
            (
                bool centerHole /** center hole */ 
            );
            /**Returns  the relief switch of the die pad, if true the relief will be built around the pad, if false it will not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: bool Relief
            (
            );
            /**Sets  the relief switch of the die pad, if true the relief will be built around the pad, if false it will not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetRelief
            (
                bool relief /** relief */ 
            );
            /**Returns  the shape type of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::PadChildBuilder::ShapeTypeOption ShapeType
            (
            );
            /**Sets  the shape type of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetShapeType
            (
                NXOpen::Die::PadChildBuilder::ShapeTypeOption shapeType /** shape type */ 
            );
            /**Sets  the value to reverse the orientation of the orientation plane,
                 if true the pad orientation normal will be reversed,
                 if false it will not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetReverseOrientation
            (
                bool reverseOrientation /** reverse orientation */ 
            );
            /**Returns  the value to reverse the orientation of the orientation plane,
                 if true the pad orientation normal will be reversed,
                 if false it will not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: bool ReverseOrientation
            (
            );
            /** Gets the hole attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void GetHoleAttributes
            (
                NXString* title /** Title for attribute. */,
                NXString* value /** Value of attribute. */,
                int* color /** Color of hole faces. */,
                NXString* diameterTitle /** Title for diameter attribute. */
            );
            /** Sets the hole attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetHoleAttributes
            (
                const NXString & title /** Title for attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** Value of attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** Color of hole faces. */,
                const NXString & diameterTitle /** Title for diameter attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the hole attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            void SetHoleAttributes
            (
                const char * title /** Title for attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * value /** Value of attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** Color of hole faces. */,
                const char * diameterTitle /** Title for diameter attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the pad attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void GetPadAttributes
            (
                NXString* title /** Title for attribute. */,
                NXString* value /** Value of attribute. */,
                int* color /** Color of pad faces. */
            );
            /** Sets the pad attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPadAttributes
            (
                const NXString & title /** Title for attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** Value of attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** Color of pad faces. */
            );
            /** Sets the pad attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            void SetPadAttributes
            (
                const char * title /** Title for attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * value /** Value of attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** Color of pad faces. */
            );
            /** Gets the relief attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void GetReliefAttributes
            (
                NXString* title /** Title for attribute. */,
                NXString* value /** Value of attribute. */,
                int* color /** Color of relief faces. */
            );
            /** Sets the relief attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetReliefAttributes
            (
                const NXString & title /** Title for attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** Value of attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** Color of relief faces. */
            );
            /** Sets the relief attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            void SetReliefAttributes
            (
                const char * title /** Title for attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * value /** Value of attribute.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** Color of relief faces. */
            );
            /**Sets  the design status of the die pad, if true the pad will be built into the model, if false it will not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDesignStatus
            (
                bool designStatus /** design status */ 
            );
            /**Returns  the design status of the die pad, if true the pad will be built into the model, if false it will not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: bool DesignStatus
            (
            );
            /**Returns  the build status of the die pad. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieBuildStatusOption BuildStatus
            (
            );
            /**Sets  the display status of the die pad, if true input data to the pad will be displayed, 
                    if false the input data will not be displayed. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDisplayStatus
            (
                bool displayStatus /** display status */ 
            );
            /**Returns  the display status of the die pad, if true input data to the pad will be displayed, 
                    if false the input data will not be displayed. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: bool DisplayStatus
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
