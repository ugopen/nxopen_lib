#ifndef NXOpen_FEATURES_SHIPDESIGN_STEELFEATURESPREADSHEETBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHIPDESIGN_STEELFEATURESPREADSHEETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShipDesign_SteelFeatureSpreadsheetBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Features_ShipDesign_SteelFeatureSpreadsheetBuilder.hxx>
#include <NXOpen/Tooling_SpreadsheetData.hxx>
#include <NXOpen/Tooling_SpreadsheetDataParameter.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace ShipDesign
        {
            class SteelFeatureSpreadsheetBuilder;
        }
    }
    class Builder;
    namespace Features
    {
        class Feature;
    }
    class TaggedObject;
    namespace Tooling
    {
        class SpreadsheetData;
    }
    namespace Tooling
    {
        class SpreadsheetDataParameter;
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class _SteelFeatureSpreadsheetBuilderBuilder;
            class SteelFeatureSpreadsheetBuilderImpl;
            /**
                    Represents a @link Features::ShipDesign::SteelFeatureSpreadsheetBuilder Features::ShipDesign::SteelFeatureSpreadsheetBuilder@endlink  builder. 
                    It is used to manage the data contained in the ship sketch based steel feature block.
                     <br> This class is sub-object of another builder, and cannot be directly instantiated.  <br> 
             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  SteelFeatureSpreadsheetBuilder : public Builder
            {
                private: SteelFeatureSpreadsheetBuilderImpl * m_steelfeaturespreadsheetbuilder_impl;
                private: friend class  _SteelFeatureSpreadsheetBuilderBuilder;
                protected: SteelFeatureSpreadsheetBuilder();
                public: ~SteelFeatureSpreadsheetBuilder();
                /** 
                            Set the context entity on which the context attribute is stored.  For example, if
                            you're spreadsheet builder is being used to create an endcut, the body you're about
                            to cut should be set as the context entity.  Refer to the individual feature's 
                            documentation to see what context entity is expected for the feature you're using.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void SetContextEntity
                (
                    NXOpen::TaggedObject * contextEntity /** contextentity */ 
                );
                /** 
                            Set the possible context attribute count (assuming the context entity has not yet been created).
                            If you have any possible context attributes set in this builder, the context entity will
                            be ignored, and the context attribute will be selected from the list of possible context attributes.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void SetPossibleContextAttributeCount
                (
                    int possibleContextAttributeCount /** the number of possible context attributes (use this before setting each possible context attribute via SetPossibleContextAttribute)  */
                );
                /** 
                            Set a possible context attribute (assuming the context entity has not yet been created).
                            If you have any possible context attributes set in this builder, the context entity will
                            be ignored, and the context attribute will be selected from the list of possible context attributes.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void SetPossibleContextAttribute
                (
                    int possibleContextAttributeIndex /** the index into the possible context attribute array we wish to set */,
                    const NXString & possibleContextAttribute /** possiblecontextattribute */ 
                );
                /** 
                            Set a possible context attribute (assuming the context entity has not yet been created).
                            If you have any possible context attributes set in this builder, the context entity will
                            be ignored, and the context attribute will be selected from the list of possible context attributes.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                void SetPossibleContextAttribute
                (
                    int possibleContextAttributeIndex /** the index into the possible context attribute array we wish to set */,
                    const char * possibleContextAttribute /** possiblecontextattribute */ 
                );
                /**Returns  the section type 
                 <br>  @deprecated Deprecated in NX8.5.0.  Removed with no replacement <br>  

                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Removed with no replacement") int SectionType
                (
                );
                /**Sets  the section type 
                 <br>  @deprecated Deprecated in NX8.5.0.  Use @link Features::ShipDesign::SteelFeatureSpreadsheetBuilder Features::ShipDesign::SteelFeatureSpreadsheetBuilder@endlink .SetSectionType() <br>  

                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use Features::ShipDesign::SteelFeatureSpreadsheetBuilder.SetSectionType()") void SetSectionType
                (
                    int nSectionType /** nsectiontype */ 
                );
                /**
                            This method sets the section type outside the block. It provides a way for the block user
                            to set up the section type by a string value. the block will look up the registration
                            spreadsheet to translate it into number value.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void SetSectionType
                (
                    const NXString & strSectionType /** strsectiontype */ 
                );
                /**
                            This method sets the section type outside the block. It provides a way for the block user
                            to set up the section type by a string value. the block will look up the registration
                            spreadsheet to translate it into number value.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                void SetSectionType
                (
                    const char * strSectionType /** strsectiontype */ 
                );
                /**Sets the section sub type by string value.
                 <br>  Created in NX8.5.1.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void SetSectionSubType1
                (
                    const NXString & strSectionType /** strsectiontype */ 
                );
                /**Sets the section sub type by string value.
                 <br>  Created in NX8.5.1.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                void SetSectionSubType1
                (
                    const char * strSectionType /** strsectiontype */ 
                );
                /** Sets the section sub type2 by string value.
                 <br>  Created in NX8.5.1.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void SetSectionSubType2
                (
                    const NXString & strSectionType /** strsectiontype */ 
                );
                /** Sets the section sub type2 by string value.
                 <br>  Created in NX8.5.1.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                void SetSectionSubType2
                (
                    const char * strSectionType /** strsectiontype */ 
                );
                /** Set default section types of the builder when a new context entity is set.
                 <br>  Created in NX8.5.1.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void SetsDefaultTypesFromContext
                (
                );
                /** 
                            Thie method reads the model file name from the spread sheet, imports the sketch template
                            into current work part, and updates the attribute values and expresseion values from the 
                            data spreadsheet. 
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void ImportSketch
                (
                );
                /** 
                            This method retrieves all the features that are imported into current work part.
                             @return  
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::Features::Feature *> GetImportedSketches
                (
                );
                /** 
                            This method changes the value of a parameter and queries from the spread sheet to update
                            the related parameter values. A call to UI method UpdateDlgLayout is needed afterwards
                            if UI is concerned.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void EditPrimaryParameter
                (
                    const NXString & parameterName /** the parameter name */,
                    const NXString & parameterValue /** the parameter value */
                );
                /** 
                            This method changes the value of a parameter and queries from the spread sheet to update
                            the related parameter values. A call to UI method UpdateDlgLayout is needed afterwards
                            if UI is concerned.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                void EditPrimaryParameter
                (
                    const char * parameterName /** the parameter name */,
                    const char * parameterValue /** the parameter value */
                );
                /** 
                            This method simply changes the value of a parameter. Parameter could be an expression 
                            or an attribute. Also a call to UI method UpdateDlgLayout is needed afterwards if UI is 
                            concerned.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void EditParameter
                (
                    const NXString & parameterName /** the parameter name */,
                    const NXString & parameterValue /** the parameter value */
                );
                /** 
                            This method simply changes the value of a parameter. Parameter could be an expression 
                            or an attribute. Also a call to UI method UpdateDlgLayout is needed afterwards if UI is 
                            concerned.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                void EditParameter
                (
                    const char * parameterName /** the parameter name */,
                    const char * parameterValue /** the parameter value */
                );
                /** 
                            This method retrieves all the parameter values related to the current imported
                            sketch template.
                             @return  Array of structures with the parameter data. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::Tooling::SpreadsheetDataParameter *> GetParameterValues
                (
                );
                /** 
                            It retrieves the KRUSpreadsheetData object to the builder. In most cases, this method is used
                            internally.
                             @return  
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Tooling::SpreadsheetData * GetSpreadsheetData
                (
                );
                /** 
                            It sets the KRUSpreadsheetData object to the builder. In most cases, this method is used
                            internally.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSpreadsheetData
                (
                    NXOpen::Tooling::SpreadsheetData * pKRUData /** pkrudata */ 
                );
                /** 
                            This method cleans up the imported features from current work part, also it rereads 
                            the data file  and registration. If UI is concerned, UpdateDlgLayout should be called in UI.
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void ResetBuilderData
                (
                );
                /** 
                            This method caches parameter data from spreadsheet to the builder.   
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void CacheSpreadsheetData
                (
                );
                /** 
                            This method takes parameter name and parameter value pairs as input and updates the related
                            geometries by updating the expressions, i.e. sketches.   
                            
                 <br>  Created in NX8.0.1.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void UpdateSpreadsheetData
                (
                    std::vector<NXString> & paramNames /** paramnames */ ,
                    std::vector<NXString> & paramValues /** paramvalues */ 
                );
                /** 
                            This method restores parameter data inside the builder. 
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void RestoreSpreadsheetData
                (
                );
                /** 
                            This method finds the available section types for the current context data.
                            It will do lookups in the registration file to see which context attribute
                            in the table matches the current possible context attributes or the current
                            context entitie's attributes.  Then it repopulates the list of available
                            section types that are used with the current context attribute.  All of
                            these table lookups can be expensive for performance.
                             @return  Array of available section types 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: std::vector<NXString> GetAvailableSectionTypes
                (
                );
                /**Returns  
                            the steel feature type (eg: Profile, Edge Reinforcement, etc)
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: NXString SteelFeatureType
                (
                );
                /**Sets  
                            the steel feature type (eg: Profile, Edge Reinforcement, etc)
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void SetSteelFeatureType
                (
                    const NXString & steelFeatureType /** steelfeaturetype */ 
                );
                /**Sets  
                            the steel feature type (eg: Profile, Edge Reinforcement, etc)
                            
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                void SetSteelFeatureType
                (
                    const char * steelFeatureType /** steelfeaturetype */ 
                );
                /** 
                            This method sets the rule inputs. 
                            The rule inputs will be used to evaluate the section rules and parameter rules defined in xml 
                            rule file.
                            Ensure the inputs have been clearly described as comment in the xml rule file, so
                            the user can use them when they want to modify the rules.
                            
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void SetRuleInputs
                (
                    std::vector<NXString> & inputNames /** inputnames */ ,
                    std::vector<NXString> & inputValues /** inputvalues */ 
                );
                /** 
                            This method updates the parameters in the steel feature data spreadsheet using parameters rules. 
                            The rule inputs should be set before you call this method.
                            
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") OR nx_ship_basic ("Ship Basic Design") */
                public: void UpdateParametersUsingRules
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
