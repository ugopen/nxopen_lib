#ifndef NXOpen_TOOLING_SPREADSHEETDATA_HXX_INCLUDED
#define NXOpen_TOOLING_SPREADSHEETDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_SpreadsheetData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Tooling_SpreadsheetData.hxx>
#include <NXOpen/Tooling_SpreadsheetDataParameter.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class SpreadsheetData;
    }
    class NXObject;
    namespace Tooling
    {
        class SpreadsheetDataParameter;
    }
    namespace Tooling
    {
        class SpreadsheetDataImpl;
        /**
                Represents the spreadsheet.
             
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  SpreadsheetData : public TransientObject
        {
            /** Represents the different spreadsheet parameter status */
            public: enum ParameterStatus
            {
                ParameterStatusLock = 1/** User can't change the value in UI */,
                ParameterStatusSystemKey/** This is system key parameter */,
                ParameterStatusUserKey = 4/** Key parameter analyzed from spreadsheet search */,
                ParameterStatusHideStatus = 8/** Not shown in UI */,
                ParameterStatusScaleItem = 16/** This is a scale item */,
                ParameterStatusReadOnly = 32/** This parameter is read only */,
                ParameterStatusModified = 64/** The parameter value is changed */,
                ParameterStatusForceColor = 128/** If the parameter uses user value, normally it shows in UI in a different color. If this status is set, the parameter value will be shown in the same color. */,
                ParameterStatusHiddenValue = 256/** The parameter has value, but it should be hidden to user */,
                ParameterStatusOptionValue = 512/** The parameter has multiple value, but not treated as key parameter */
            };

            /** Represents the different attribute or expression section in spreadsheet */
            public: enum KeywordType
            {
                KeywordTypeObjectAttribute = 1/** Object attribute defined in spreadsheet */,
                KeywordTypePartAttribute/** Part attribute defined in spreadsheet */,
                KeywordTypeExpression = 4/** Expression defined in spreadsheet */
            };

            private: SpreadsheetDataImpl * m_spreadsheetdata_impl;
            /// \cond NX_NO_DOC 
            public: explicit SpreadsheetData(void *ptr);
            /// \endcond 
            /** Dispose the spreadsheet object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~SpreadsheetData();
            /** Close the spreadsheet and exit excel App 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void Close
            (
            );
            /** Load the data from given spreadsheet file 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void ReadData
            (
                const NXString & spreadsheetFileName /** Spreadsheet file name, give CLI name in NX/Manager environment */
            );
            /** Load the data from given spreadsheet file 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void ReadData
            (
                const char * spreadsheetFileName /** Spreadsheet file name, give CLI name in NX/Manager environment */
            );
            /** Load the data from part family part 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void ReadData
            (
                NXOpen::NXObject * familyPart /** the part family part */
            );
            /** Get the parameters with current select/input value  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void GetParameterValue
            (
                std::vector<NXOpen::Tooling::SpreadsheetDataParameter *> & parameters /** Array of structures with the parameter data. */
            );
            /** Change the primary parameter of the spreadsheet 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SelectPrimaryParameter
            (
                const NXString & parameterName /** the parameter name */,
                const NXString & parameterValue /** the parameter value */
            );
            /** Change the primary parameter of the spreadsheet 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SelectPrimaryParameter
            (
                const char * parameterName /** the parameter name */,
                const char * parameterValue /** the parameter value */
            );
            /** Modify the spreadsheet parameter. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void EditParameter
            (
                const NXString & parameterName /** the parameter name */,
                const NXString & parameterValue /** the parameter value */
            );
            /** Modify the spreadsheet parameter. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void EditParameter
            (
                const char * parameterName /** the parameter name */,
                const char * parameterValue /** the parameter value */
            );
            /** Sets the Lock/Hide or other status of spreadsheet parameter. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void SetParameterStatus
            (
                const NXString & parameterName /** the parameter name */,
                int parameterStatus /** the parameter status as defined in @link SpreadsheetData::ParameterStatus SpreadsheetData::ParameterStatus@endlink . */,
                bool isAdd /** Specifies whether the parameter status should be added or removed. If true, then the status is added, else it is removed.*/
            );
            /** Sets the Lock/Hide or other status of spreadsheet parameter. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            void SetParameterStatus
            (
                const char * parameterName /** the parameter name */,
                int parameterStatus /** the parameter status as defined in @link SpreadsheetData::ParameterStatus SpreadsheetData::ParameterStatus@endlink . */,
                bool isAdd /** Specifies whether the parameter status should be added or removed. If true, then the status is added, else it is removed.*/
            );
            /** Search the spreadsheet by the given conditions. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SearchRecords
            (
                const NXString & searchConditions /** the search conditions */
            );
            /** Search the spreadsheet by the given conditions. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SearchRecords
            (
                const char * searchConditions /** the search conditions */
            );
            /** Add object to be updated according to the spreadsheet data 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void AddAssociatedObject
            (
                NXOpen::NXObject * associatedObject /** the object to be updated according to the spreadsheet data */
            );
            /** Update the associated objects according to the spreadsheet data 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void Update
            (
            );
            /** Get the object, part attributes or expressions defined in spreadsheet 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void GetDefinedAttributesExpressions
            (
                NXOpen::Tooling::SpreadsheetData::KeywordType keywordType /** keywordtype */ ,
                std::vector<NXString> & objOrPartAttrNames /** Object name or part attribute to find part */,
                std::vector<NXString> & attrNames /** attrnames */ ,
                std::vector<NXString> & attrValues /** Array of structures with the object attributes data. */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
