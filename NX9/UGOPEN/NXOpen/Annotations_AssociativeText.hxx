#ifndef NXOpen_ANNOTATIONS_ASSOCIATIVETEXT_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ASSOCIATIVETEXT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_AssociativeText.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class AssociativeText;
    }
    namespace Annotations
    {
        class Annotation;
    }
    class NXObject;
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class AssociativeTextImpl;
        /** Associative text class creates text associated to object and part attributes as well as
                object properties such as a drawing sheet name.  The associative text is constructed using special
                NX text control sequences.         
                 <br> 
                The text created using this class can be added to a table cell, note text, dimension appended text etc...  <br> 
             
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  AssociativeText : public TransientObject
        {
            /** the associative text property type to be used with the object */
            public: enum PropertyType
            {
                PropertyTypeDrawingNumberOfSheets/** Drawing sheet number of sheets */,
                PropertyTypeDrawingNumberOfPrimarySheets/** Drawing sheet number of primary sheets */,
                PropertyTypeDrawingSheetName/** Drawing sheet name */,
                PropertyTypeDrawingSheetNumber/** Drawing sheet number */,
                PropertyTypeDrawingSheetRevision/** Drawing sheet revision */,
                PropertyTypeDrawingSheetScaleNumerator/** Drawing sheet scale numerator */,
                PropertyTypeDrawingSheetScaleDenominator/** Drawing sheet scale denominator */,
                PropertyTypeDrawingSheetSize/** Drawing sheet size */,
                PropertyTypeDrawingSheetUnits/** Drawing sheet units */,
                PropertyTypeDrawingSheetZone/** Drawing sheet zone */,
                PropertyTypeDrawingSheetProjectionAngle/** Drawing sheet projection angle */,
                PropertyTypeDrawingMasterPartName/** Drawing master part name */,
                PropertyTypeDrawingPartName/** Drawing part name */,
                PropertyTypeDrawingViewPrefix/** Drawing view prefix */,
                PropertyTypeDrawingViewRotationAngle/** View rotation angle */
            };

            private: AssociativeTextImpl * m_associativetext_impl;
            /// \cond NX_NO_DOC 
            public: explicit AssociativeText(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~AssociativeText();
            /** Returns the associative text for the input object and its property. 
                     <br>   
                    For example, drawing sheet name, where the object is the drawing sheet and its name is the property. <br> 
                     @return  the associative text 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetObjectPropertyText
            (
                NXOpen::NXObject * object /** the object */,
                NXOpen::Annotations::AssociativeText::PropertyType type /** the object property */
            );
            /** Returns the associative text for the input object and attribute title.  @return  the associative text 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetObjectAttributeText
            (
                NXOpen::NXObject * object /** the object */,
                const NXString & attributeTitle /** the object attribute title */
            );
            /** Returns the associative text for the input object and attribute title.  @return  the associative text 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            NXString GetObjectAttributeText
            (
                NXOpen::NXObject * object /** the object */,
                const char * attributeTitle /** the object attribute title */
            );
            /** Returns the associative text for the part attribute title.  @return  the associative text 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetPartAttributeText
            (
                const NXString & attributeTitle /** the part attribute title */
            );
            /** Returns the associative text for the part attribute title.  @return  the associative text 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            NXString GetPartAttributeText
            (
                const char * attributeTitle /** the part attribute title */
            );
            /** Evaluate the associative text specified.  Convert associative text
                    to the string that it represents.  The following associative text
                    control sequences will be evaluated: part attribute references,
                    object attribute references, expression references, and object
                    property references.  Example:
                    The value of part attribute "ATT1" is "Value1".  The text that
                    represents the reference to part attribute "ATT1" is "\<W@ATT1\>"
                    The value of expression "p1" is "3.00".  The text that represents the
                    reference to expression "p1" is "\<X0.2@p1\>".
                    The value of object property "\<WRef1*0@$SH_SHEET_NAME\>" is "Sheet 1".
                    Given the input text "\<WRef1*0@$SH_SHEET_NAME\> \<X0.2@p1\> \<W@ATT1\>"
                    the evaluated text returned will be "Sheet 1 3.00 Value1"  @return  the text with the evaluated associative text 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetEvaluatedText
            (
                NXOpen::Annotations::Annotation * ann /** Annotation used to determine
                                the object property value when the object is not specified.  For example, given
                                annotation 123 and 456 where 123 resides in "Sheet 1" and 456 resides in "Sheet 2"
                                then the evaluated text returned for the input text "\<W@$SH_SHEET_NAME\>" for
                                annotation 123 is "Sheet 1" and for annotation 456 is "Sheet 2" */,
                const NXString & text /** the text containing assiative text to evaluate */
            );
            /** Evaluate the associative text specified.  Convert associative text
                    to the string that it represents.  The following associative text
                    control sequences will be evaluated: part attribute references,
                    object attribute references, expression references, and object
                    property references.  Example:
                    The value of part attribute "ATT1" is "Value1".  The text that
                    represents the reference to part attribute "ATT1" is "\<W@ATT1\>"
                    The value of expression "p1" is "3.00".  The text that represents the
                    reference to expression "p1" is "\<X0.2@p1\>".
                    The value of object property "\<WRef1*0@$SH_SHEET_NAME\>" is "Sheet 1".
                    Given the input text "\<WRef1*0@$SH_SHEET_NAME\> \<X0.2@p1\> \<W@ATT1\>"
                    the evaluated text returned will be "Sheet 1 3.00 Value1"  @return  the text with the evaluated associative text 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            NXString GetEvaluatedText
            (
                NXOpen::Annotations::Annotation * ann /** Annotation used to determine
                                the object property value when the object is not specified.  For example, given
                                annotation 123 and 456 where 123 resides in "Sheet 1" and 456 resides in "Sheet 2"
                                then the evaluated text returned for the input text "\<W@$SH_SHEET_NAME\>" for
                                annotation 123 is "Sheet 1" and for annotation 456 is "Sheet 2" */,
                const char * text /** the text containing assiative text to evaluate */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
