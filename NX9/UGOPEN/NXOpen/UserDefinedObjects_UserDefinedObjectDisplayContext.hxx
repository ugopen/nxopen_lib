#ifndef NXOpen_USERDEFINEDOBJECTS_USERDEFINEDOBJECTDISPLAYCONTEXT_HXX_INCLUDED
#define NXOpen_USERDEFINEDOBJECTS_USERDEFINEDOBJECTDISPLAYCONTEXT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UserDefinedObjects_UserDefinedObjectDisplayContext.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_userdefinedobjects_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UserDefinedObjects
    {
        class UserDefinedObjectDisplayContext;
    }
    class View;
    namespace UserDefinedObjects
    {
    }
    namespace UserDefinedObjects
    {
        class UserDefinedObjectDisplayContextImpl;
        /** This class is used to display User Defined Objects 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_USERDEFINEDOBJECTSEXPORT  UserDefinedObjectDisplayContext : public TransientObject
        {
            /** This enumerated type specifies the type of marker to be displayed. */
            public: enum PolyMarker
            {
                PolyMarkerNoMarker/** no marker */ ,
                PolyMarkerPoint/** point */ ,
                PolyMarkerDot/** dot */ ,
                PolyMarkerAsterisk/** asterisk */ ,
                PolyMarkerCircle/** circle */ ,
                PolyMarkerPoundsign/** poundsign */ ,
                PolyMarkerX/** x */ ,
                PolyMarkerGridpoint/** gridpoint */ ,
                PolyMarkerSquare/** square */ ,
                PolyMarkerTriangleMarker/** triangle marker */ ,
                PolyMarkerDiamond/** diamond */ ,
                PolyMarkerCenterline/** centerline */ ,
                PolyMarkerConsFix/** cons fix */ ,
                PolyMarkerConsHorizontal/** cons horizontal */ ,
                PolyMarkerConsVertical/** cons vertical */ ,
                PolyMarkerConsParallel/** cons parallel */ ,
                PolyMarkerConsPerpendicular/** cons perpendicular */ ,
                PolyMarkerConsTangent/** cons tangent */ ,
                PolyMarkerConsConcentric/** cons concentric */ ,
                PolyMarkerConsCoincident/** cons coincident */ ,
                PolyMarkerConsCollinear/** cons collinear */ ,
                PolyMarkerConsPointOnCurve/** cons point on curve */ ,
                PolyMarkerConsMidpoint/** cons midpoint */ ,
                PolyMarkerConsEqualLength/** cons equal length */ ,
                PolyMarkerConsEqualRadius/** cons equal radius */ ,
                PolyMarkerConsConstantLength/** cons constant length */ ,
                PolyMarkerConsConstantAngle/** cons constant angle */ ,
                PolyMarkerConsMirror/** cons mirror */ ,
                PolyMarkerDimRadius/** dim radius */ ,
                PolyMarkerDimDiameter/** dim diameter */ ,
                PolyMarkerDimParallel/** dim parallel */ ,
                PolyMarkerDimPerpendicular/** dim perpendicular */ ,
                PolyMarkerConsSlope/** cons slope */ ,
                PolyMarkerConsString/** cons string */ ,
                PolyMarkerConsUniformScaled/** cons uniform scaled */ ,
                PolyMarkerConsNonUniformScaled/** cons non uniform scaled */ ,
                PolyMarkerConsAssocTrim/** cons assoc trim */ ,
                PolyMarkerConsAssocOffset/** cons assoc offset */ ,
                PolyMarkerDisp2tResSpotWeld/** disp2t res spot weld */ ,
                PolyMarkerDisp3tResSpotWeld/** disp3t res spot weld */ ,
                PolyMarkerDisp4tResSpotWeld/** disp4t res spot weld */ ,
                PolyMarkerDisp2tDcSpotWeld/** disp2t dc spot weld */ ,
                PolyMarkerDisp3tDcSpotWeld/** disp3t dc spot weld */ ,
                PolyMarkerDisp4tDcSpotWeld/** disp4t dc spot weld */ ,
                PolyMarkerDisp2tKpcSpotWeld/** disp2t kpc spot weld */ ,
                PolyMarkerDisp3tKpcSpotWeld/** disp3t kpc spot weld */ ,
                PolyMarkerDisp4tKpcSpotWeld/** disp4t kpc spot weld */ ,
                PolyMarkerDisp2tProcSpotWeld/** disp2t proc spot weld */ ,
                PolyMarkerDisp3tProcSpotWeld/** disp3t proc spot weld */ ,
                PolyMarkerDisp4tProcSpotWeld/** disp4t proc spot weld */ ,
                PolyMarkerArcSpotWeld/** arc spot weld */ ,
                PolyMarkerClinchWeld/** clinch weld */ ,
                PolyMarkerAnchor/** anchor */ ,
                PolyMarkerLeftLeaderConnection/** left leader connection */ ,
                PolyMarkerRightLeaderConnection/** right leader connection */ ,
                PolyMarkerFilledCircle/** filled circle */ ,
                PolyMarkerFilledSquare/** filled square */ ,
                PolyMarkerLargeFilledSquare/** large filled square */ ,
                PolyMarkerDatumPoint/** datum point */ ,
                PolyMarkerSnappingDiamond/** snapping diamond */ ,
                PolyMarkerCircleInCircle/** circle in circle */ ,
                PolyMarkerCircleInSquare/** circle in square */ ,
                PolyMarkerSquareInSquare/** square in square */ ,
                PolyMarkerFilledLeftTriangle/** filled left triangle */ ,
                PolyMarkerFilledRightTriangle/** filled right triangle */ ,
                PolyMarkerFilledUpTriangle/** filled up triangle */ ,
                PolyMarkerFilledDownTriangle/** filled down triangle */ ,
                PolyMarkerFilledLeftTriangleInCircle/** filled left triangle in circle */ ,
                PolyMarkerFilledRightTriangleInCircle/** filled right triangle in circle */ ,
                PolyMarkerFilledUpTriangleInCircle/** filled up triangle in circle */ ,
                PolyMarkerFilledDownTriangleInCircle/** filled down triangle in circle */ ,
                PolyMarkerFilledLeftTriangleInSquare/** filled left triangle in square */ ,
                PolyMarkerFilledRightTriangleInSquare/** filled right triangle in square */ ,
                PolyMarkerFilledUpTriangleInSquare/** filled up triangle in square */ ,
                PolyMarkerFilledDownTriangleInSquare/** filled down triangle in square */ ,
                PolyMarkerRoundedCross/** rounded cross */ ,
                PolyMarkerFilledDiamond/** filled diamond */ ,
                PolyMarkerUpDownTriangles/** up down triangles */ ,
                PolyMarkerLeftRightTriangles/** left right triangles */ ,
                PolyMarkerSmallWheel/** small wheel */ ,
                PolyMarkerLargeWheel/** large wheel */ ,
                PolyMarkerHollowCircle/** hollow circle */ ,
                PolyMarkerPreviewPerpendicular/** preview perpendicular */ ,
                PolyMarkerPreviewHorizontal/** preview horizontal */ ,
                PolyMarkerPreviewVertical/** preview vertical */ ,
                PolyMarkerPreviewTangent/** preview tangent */ ,
                PolyMarkerPreviewParallel/** preview parallel */ ,
                PolyMarkerPreviewPointOnCurve/** preview point on curve */ ,
                PolyMarkerPreviewCollinear/** preview collinear */ ,
                PolyMarkerRuler/** ruler */ ,
                PolyMarkerProtractor/** protractor */ ,
                PolyMarkerSketchNotebook/** sketch notebook */ ,
                PolyMarkerArcEndPoint/** arc end point */ ,
                PolyMarkerDisp2PtArcMarker/** disp2pt arc marker */ ,
                PolyMarkerBigAsterisk/** big asterisk */ ,
                PolyMarkerLineInCircle/** line in circle */ ,
                PolyMarkerPlusInCircle/** plus in circle */ ,
                PolyMarkerCenterOfRotation/** center of rotation */ ,
                PolyMarkerPreviewX/** preview x */ ,
                PolyMarkerPreviewY/** preview y */ ,
                PolyMarkerPreviewZ/** preview z */ ,
                PolyMarkerDisp2tGeneralSpotWeld/** disp2t general spot weld */ ,
                PolyMarkerDisp3tGeneralSpotWeld/** disp3t general spot weld */ ,
                PolyMarkerDisp4tGeneralSpotWeld/** disp4t general spot weld */ ,
                PolyMarkerDisp2tVitalSpotWeld/** disp2t vital spot weld */ ,
                PolyMarkerDisp3tVitalSpotWeld/** disp3t vital spot weld */ ,
                PolyMarkerDisp4tVitalSpotWeld/** disp4t vital spot weld */ ,
                PolyMarkerDisp2tImportantSpotWeld/** disp2t important spot weld */ ,
                PolyMarkerDisp3tImportantSpotWeld/** disp3t important spot weld */ ,
                PolyMarkerDisp4tImportantSpotWeld/** disp4t important spot weld */ ,
                PolyMarkerDisp2tSemipanelSpotWeld/** disp2t semipanel spot weld */ ,
                PolyMarkerDisp3tSemipanelSpotWeld/** disp3t semipanel spot weld */ ,
                PolyMarkerDisp4tSemipanelSpotWeld/** disp4t semipanel spot weld */ ,
                PolyMarkerInvalidMarker/** invalid marker */ 
            };

            /** The enumerated type facet to be displayed */
            public: enum FacetType
            {
                FacetTypeTriangle/** The facet topology is a triangle facet */,
                FacetTypePolygon/** The facet topology is a polygon facet */,
                FacetTypeTristrip/** The facet topology is a tristrip facet */
            };

            /** This enumerated type specifies the type of reference point used in the text box. */
            public: enum TextRef
            {
                TextRefSystemDefault/** Display the text using the system default */,
                TextRefTopLeft/** Display the text with the given position in the top left of the text box */,
                TextRefTopCenter/** Display the text with the given position in the top center of the text box */,
                TextRefTopRight/** Display the text with the given position in the top right of the text box */,
                TextRefMiddleLeft/** Display the text with the given position in the middle left of the text box */,
                TextRefMiddleCenter/** Display the text with the given position in middle center of text box */,
                TextRefMiddleRight/** Display the text with the given position in middle right of text box */,
                TextRefBottomLeft/** Display the text with the given position in bottom left of text box */,
                TextRefBottomCenter/** Display the text with the given position in bottom center of text box */,
                TextRefBottomRight/** Display the text with the given position in bottom right of text box */
            };

            /** This enumerated type specifies the type of reference point used in the text box
                        for standard_text methods. */
            public: enum StandardTextRef
            {
                StandardTextRefSystemDefault/** Display the text using the system
                                                                                             default reference point position */,
                StandardTextRefBaselineStart = 0/** Display the text starting on the
                                                                                             baseline, at the left end of the
                                                                                             text box for left-to-right text,
                                                                                             or at the right end of the text box
                                                                                             for right-to-left text */,
                StandardTextRefBaselineCenter/** Display the text with the given position
                                                                                          in the horizontal center of the text box
                                                                                          at the baseline */,
                StandardTextRefBaselineEnd/** Display the text starting on the baseline,
                                                                                        at the right end of the text box
                                                                                        for left-to-right text,
                                                                                        or at the left end of the text box
                                                                                        for right-to-left text */,
                StandardTextRefTopLeft/** Display the text with the given position
                                                                                        in the top left of the text box */,
                StandardTextRefTopCenter/** Display the text with the given position
                                                                                        in the top center of the text box */,
                StandardTextRefTopRight/** Display the text with the given position
                                                                                        in the top right of the text box */,
                StandardTextRefMiddleLeft/** Display the text with the given position
                                                                                        in the middle left of the text box */,
                StandardTextRefMiddleCenter/** Display the text with the given position
                                                                                        in middle center of text box */,
                StandardTextRefMiddleRight/** Display the text with the given position
                                                                                        in middle right of text box */,
                StandardTextRefBottomLeft/** Display the text with the given position
                                                                                        in bottom left of text box */,
                StandardTextRefBottomCenter/** Display the text with the given position
                                                                                        in bottom center of text box */,
                StandardTextRefBottomRight/** Display the text with the given position
                                                                                        in bottom right of text box */
            };

            /**  Provides a way to specify the size of the desired text, as small,
                         medium or large (normal is a synonym for medium). */
            public: enum TextSize
            {
                TextSizeSmall/** small */ ,
                TextSizeNormal/** normal */ ,
                TextSizeMedium = 1/** medium */ ,
                TextSizeLarge/** large */ ,
                TextSizeNumSizes/** num sizes */ 
            };

            /** The enumerated view mode */
            public: enum ViewMode
            {
                ViewModeNotShaded = 1/** The view is not shaded */,
                ViewModePartiallyShaded/** The view is partially shaded */,
                ViewModeFullyShaded/** The view is fully shaded */,
                ViewModeAnalysisShaded/** The view is analysis shaded */,
                ViewModeStudioShaded/** The view is studio shaded */
            };

            private: UserDefinedObjectDisplayContextImpl * m_userdefinedobjectdisplaycontext_impl;
            /// \cond NX_NO_DOC 
            public: explicit UserDefinedObjectDisplayContext(void *ptr);
            /// \endcond 
            /** Frees the memory associated with this object.  After invocation of this
                      method, the object is no longer valid.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~UserDefinedObjectDisplayContext();
            /** Displays an arc for a @link UserDefinedObject UserDefinedObject@endlink .  
                        The arc will be created in a plane whose normal is the Z axis 
                        of the orientation matrix  
                         (matrix[0-2] is the X axis of the orientation matrix,  
                          matrix[3-5] is the Y axis of the orientation matrix, and
                          matrix[6-8] is the Y axis of the orientation matrix.)
                        The start and end angles are measured relative to
                        the X and Y axis of this orientation matrix. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayArc
            (
                const NXOpen::Point3d & center /** Center of the arc (absolute coordinates transformed by the orientation matrix) */,
                const NXOpen::Matrix3x3 & original /** Orientation matrix for the arc. */,
                double radius /** Radius of the arc.  Must be greater than zero. */,
                double startAngle /** Start angle in radians  */,
                double endAngle /** End angle in radians */
            );
            /** Displays a circle for a @link UserDefinedObject UserDefinedObject@endlink .  
                        The circle will be created in a plane which is normal to
                        the Z axis of the orientation matrix.  
                         (matrix[0-2] is the X axis of the orientation matrix,  
                          matrix[3-5] is the Y axis of the orientation matrix, and
                          matrix[6-8] is the Y axis of the orientation matrix.) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayCircle
            (
                const NXOpen::Point3d & center /** Center of the arc (absolute coordinates transformed by the orientation matrix) */,
                const NXOpen::Matrix3x3 & original /** Orientation matrix for the arc. */,
                double radius /** Radius of the arc.  Must be greater than zero. */,
                bool filled /** True if the interior of the circle is solid filled, 
                                                         otherwise the interior is not filled */
            );
            /** Displays a polyline (a connected set of line segements) for a @link UserDefinedObject UserDefinedObject@endlink .  
                        The line segments are defined by an array of points.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayPolyline
            (
                const std::vector<NXOpen::Point3d> & points /** Array of point coordinates which define the polyline.
                                                                                 points[0-2] defines the first point, points[3-5] defines the second point, etc. */
            );
            /** Displays a series of points for a @link UserDefinedObject UserDefinedObject@endlink . 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayPoints
            (
                const std::vector<NXOpen::Point3d> & points /** Array of point coordinates. 
                                                                                  points[0-2] defines the first point, points[3-5] defines the second point, etc.*/,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::PolyMarker markerType /** The type of marker displayed for each point */
            );
            /** Displays a polygon (a closed set of line segements) for a @link UserDefinedObject UserDefinedObject@endlink .  
                        The line segments are defined by an array of points. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayPolygon
            (
                const std::vector<NXOpen::Point3d> & points /** Array of point coordinates which define the polyline.
                                                                                  points[0-2] defines the first end point, points[3-5] defines the second end point, etc. */,
                bool filled /** True if the interior of the polygon is solid filled, 
                                                         otherwise the interior is not filled */
            );
            /** Displays a series of facets for a @link UserDefinedObject UserDefinedObject@endlink . 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayFacets
            (
                int numVertices /** Number of points to define a facet. */,
                int numFacets /** Number of facets to display. */,
                const std::vector<NXOpen::Point3d> & vertices /** Array of point coordinates which define the vertices of the facets.
                            For example assume num_facets = 2 and num_vertices = 3, then vertices[0-2] defines the point of the first vertex of the first facet,
                            vertices[3-5] defines the second vertex point of the first facet, and vertices[6-8] defines the last vertex point of the first facet.
                            Next vertices[9-11] define the first vertex point of the second facet, vertices[12-14] is the second vertex of the second facet, and last
                            vertices[15-17] defines the last vertex of the second facet. */,
                const std::vector<NXOpen::Vector3d> & normals /** Array of vectors which define the normal to the facet at a vertex point.
                            Normal vectors must be unit vectors, and they should point out away from the faceted object.
                            For example assume num_facets = 2 and num_vertices = 3, then normals[0-8] define the normal vectors at each verte point in the first facet, 
                            and normals[9-17] define the normals for the vertex points of the second facet.  
                            More specifically normals[0-2] should define a unit normal vector out away from the facet at the point defined by vertices[0-2].  
                            Likewise normals[3-5] should define a unit normal vector out away from the facet at the point defined by vertices[3-5]. */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::FacetType typeOfFacet /** The format of the facet in the facet array */
            );
            /** Displays a text string using an NX text font for a
                        @link UserDefinedObject UserDefinedObject@endlink . 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayText
            (
                const NXString & text /**  Text string to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point in abs */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::TextRef referencePoint /** Reference point of text box */
            );
            /** Displays a text string using an NX text font for a
                        @link UserDefinedObject UserDefinedObject@endlink . 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void DisplayText
            (
                const char * text /**  Text string to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point in abs */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::TextRef referencePoint /** Reference point of text box */
            );
            /** Displays a single line "Standard Text" string using "Absolute Geometry" for a
                        @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text" string uses one
                        of the fonts available from the operating system.  "Absolute Geometry"
                        means that the text scales and rotates with the view, so it appears larger
                        when you zoom in and smaller when you zoom out.  This is the type of text
                        normally used by NX Drafting.   Note that the text will be displayed on
                        the Absolute XY plane. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayAbsoluteStandardText
            (
                int fontIndex /**  Index of the text font to be used.
                                                                    This must be an index of a standard font.
                                                                    It may be 0 to use the default font. */,
                const NXString & fontStyle /**  The name of a style supported by the given font.
                                                                    Specify NULL to use the default style for the font,
                                                                    which usually is Regular (no bold, no italic).
                                                                    If a non-NULL style does not exist for the font,
                                                                    the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                   in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const NXString & string /**  Text string to display */,
                double glyphWidth /** Width  of text in units of the Displayed Part */,
                double glyphHeight /** Height of text in units of the Displayed Part */
            );
            /** Displays a single line "Standard Text" string using "Absolute Geometry" for a
                        @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text" string uses one
                        of the fonts available from the operating system.  "Absolute Geometry"
                        means that the text scales and rotates with the view, so it appears larger
                        when you zoom in and smaller when you zoom out.  This is the type of text
                        normally used by NX Drafting.   Note that the text will be displayed on
                        the Absolute XY plane. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void DisplayAbsoluteStandardText
            (
                int fontIndex /**  Index of the text font to be used.
                                                                    This must be an index of a standard font.
                                                                    It may be 0 to use the default font. */,
                const char * fontStyle /**  The name of a style supported by the given font.
                                                                    Specify NULL to use the default style for the font,
                                                                    which usually is Regular (no bold, no italic).
                                                                    If a non-NULL style does not exist for the font,
                                                                    the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                   in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const char * string /**  Text string to display */,
                double glyphWidth /** Width  of text in units of the Displayed Part */,
                double glyphHeight /** Height of text in units of the Displayed Part */
            );
            /** Displays a multi-line "Standard Text" string using "Absolute Geometry" for a
                        @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text" string uses one
                        of the fonts available from the operating system.  "Absolute Geometry"
                        means that the text scales and rotates with the view, so it appears larger
                        when you zoom in and smaller when you zoom out.  This is the type of text
                        normally used by NX Drafting.   Note that the text will be displayed on
                        the Absolute XY plane. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayMultiLineAbsoluteStandardText
            (
                int fontIndex /**  Index of the text font to be used.
                                                                     This must be an index of a standard font.
                                                                     It may be 0 to use the default font. */,
                const NXString & fontStyle /**  The name of a style supported by the given font.
                                                                    Specify NULL to use the default style for the font,
                                                                    which usually is Regular (no bold, no italic).
                                                                    If a non-NULL style does not exist for the font,
                                                                    the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                    in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const std::vector<NXString> & strings /** Array of text strings to display */,
                double glyphWidth /** Width  of text in units of the Displayed Part */,
                double glyphHeight /** Height of text in units of the Displayed Part */
            );
            /** Displays a multi-line "Standard Text" string using "Absolute Geometry" for a
                        @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text" string uses one
                        of the fonts available from the operating system.  "Absolute Geometry"
                        means that the text scales and rotates with the view, so it appears larger
                        when you zoom in and smaller when you zoom out.  This is the type of text
                        normally used by NX Drafting.   Note that the text will be displayed on
                        the Absolute XY plane. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void DisplayMultiLineAbsoluteStandardText
            (
                int fontIndex /**  Index of the text font to be used.
                                                                     This must be an index of a standard font.
                                                                     It may be 0 to use the default font. */,
                const char * fontStyle /**  The name of a style supported by the given font.
                                                                    Specify NULL to use the default style for the font,
                                                                    which usually is Regular (no bold, no italic).
                                                                    If a non-NULL style does not exist for the font,
                                                                    the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                    in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const std::vector<NXString> & strings /** Array of text strings to display */,
                double glyphWidth /** Width  of text in units of the Displayed Part */,
                double glyphHeight /** Height of text in units of the Displayed Part */
            );
            /** Displays a single line "Standard Text" string using "Screen Geometry" for a
                        @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text" string uses one
                        of the fonts available from the operating system.  "Screen Geometry" means
                        that the text remains parallel to the screen and appears the same physical
                        size on the screen regardless of the view scale. This method is not
                        supported for 2D output such as CGM.  Note that the text will be displayed on
                        the Absolute XY plane.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayScreenStandardText
            (
                int fontIndex /**  Index of the text font to be used.
                                                                    This must be an index of a standard font.
                                                                    It may be 0 to use the default font. */,
                const NXString & fontStyle /**  The name of a style supported by the given font.
                                                                    Specify NULL to use the default style for the font,
                                                                    which usually is Regular (no bold, no italic).
                                                                    If a non-NULL style does not exist for the font,
                                                                    the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                   in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const NXString & string /**  Text string to display */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::TextSize textSize /** see enum values */
            );
            /** Displays a single line "Standard Text" string using "Screen Geometry" for a
                        @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text" string uses one
                        of the fonts available from the operating system.  "Screen Geometry" means
                        that the text remains parallel to the screen and appears the same physical
                        size on the screen regardless of the view scale. This method is not
                        supported for 2D output such as CGM.  Note that the text will be displayed on
                        the Absolute XY plane.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void DisplayScreenStandardText
            (
                int fontIndex /**  Index of the text font to be used.
                                                                    This must be an index of a standard font.
                                                                    It may be 0 to use the default font. */,
                const char * fontStyle /**  The name of a style supported by the given font.
                                                                    Specify NULL to use the default style for the font,
                                                                    which usually is Regular (no bold, no italic).
                                                                    If a non-NULL style does not exist for the font,
                                                                    the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                   in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const char * string /**  Text string to display */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::TextSize textSize /** see enum values */
            );
            /** Displays a multi-line "Standard Text" string using "Screen Geometry" for a
                        @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text" string uses one
                        of the fonts available from the operating system.  "Screen Geometry" means
                        that the text remains parallel to the screen and appears the same physical
                        size on the screen regardless of the view scale. This method is not
                        supported for 2D output such as CGM.  Note that the text will be displayed on
                        the Absolute XY plane.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayMultiLineScreenStandardText
            (
                int fontIndex /**  Index of the text font to be used.
                                                                     This must be an index of a standard font.
                                                                     It may be 0 to use the default font. */,
                const NXString & fontStyle /**  The name of a style supported by the given font.
                                                                     Specify NULL to use the default style for the font,
                                                                     which usually is Regular (no bold, no italic).
                                                                     If a non-NULL style does not exist for the font,
                                                                     the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                    in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const std::vector<NXString> & strings /** Array of text strings to display */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::TextSize textSize /** see enum values */
            );
            /** Displays a multi-line "Standard Text" string using "Screen Geometry" for a
                        @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text" string uses one
                        of the fonts available from the operating system.  "Screen Geometry" means
                        that the text remains parallel to the screen and appears the same physical
                        size on the screen regardless of the view scale. This method is not
                        supported for 2D output such as CGM.  Note that the text will be displayed on
                        the Absolute XY plane.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void DisplayMultiLineScreenStandardText
            (
                int fontIndex /**  Index of the text font to be used.
                                                                     This must be an index of a standard font.
                                                                     It may be 0 to use the default font. */,
                const char * fontStyle /**  The name of a style supported by the given font.
                                                                     Specify NULL to use the default style for the font,
                                                                     which usually is Regular (no bold, no italic).
                                                                     If a non-NULL style does not exist for the font,
                                                                     the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                    in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const std::vector<NXString> & strings /** Array of text strings to display */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::TextSize textSize /** see enum values */
            );
            /** Displays a single line "Standard Text" string using "Absolute Rotation and Screen
                        Size Geometry" for a @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text"
                        string uses one of the fonts available from the operating system.
                        "Absolute Rotation and Screen Size Geometry" means the text appears the
                        same physical sized on the screen regardless of the view scale (like
                        "Screen Geometry"), the text remains front-facing and approximately
                        upright (similar to "Screen Geometry"), but the orientation of the text
                        changes as the user rotates the view (like "Absolute Geometry").
                        The text will be displayed on the XY plane of the absolute coordinate system.
                        This method is not supported for 2D output such as CGM. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayAbsoluteRotationScreenSizeStandardText
            (
                int fontIndex /** Index of the text font to be used.
                                                                   This must be an index of a standard font.
                                                                   It may be 0 to use the default font. */,
                const NXString & fontStyle /**  The name of a style supported by the given font.
                                                                    Specify NULL to use the default style for the font,
                                                                    which usually is Regular (no bold, no italic).
                                                                    If a non-NULL style does not exist for the font,
                                                                    the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                   in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const NXString & string /** Text string to display */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::TextSize textSize /** see enum values */
            );
            /** Displays a single line "Standard Text" string using "Absolute Rotation and Screen
                        Size Geometry" for a @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text"
                        string uses one of the fonts available from the operating system.
                        "Absolute Rotation and Screen Size Geometry" means the text appears the
                        same physical sized on the screen regardless of the view scale (like
                        "Screen Geometry"), the text remains front-facing and approximately
                        upright (similar to "Screen Geometry"), but the orientation of the text
                        changes as the user rotates the view (like "Absolute Geometry").
                        The text will be displayed on the XY plane of the absolute coordinate system.
                        This method is not supported for 2D output such as CGM. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void DisplayAbsoluteRotationScreenSizeStandardText
            (
                int fontIndex /** Index of the text font to be used.
                                                                   This must be an index of a standard font.
                                                                   It may be 0 to use the default font. */,
                const char * fontStyle /**  The name of a style supported by the given font.
                                                                    Specify NULL to use the default style for the font,
                                                                    which usually is Regular (no bold, no italic).
                                                                    If a non-NULL style does not exist for the font,
                                                                    the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                   in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const char * string /** Text string to display */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::TextSize textSize /** see enum values */
            );
            /** Displays a multi-line "Standard Text" string using "Absolute Rotation and Screen
                        Size Geometry" for a @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text"
                        string uses one of the fonts available from the operating system.
                        "Absolute Rotation and Screen Size Geometry" means the text appears the
                        same physical sized on the screen regardless of the view scale (like
                        "Screen Geometry"), the text remains front-facing and approximately
                        upright (similar to "Screen Geometry"), but the orientation of the text
                        changes as the user rotates the view (like "Absolute Geometry").
                        The text will be displayed on the XY plane of the absolute coordinate system.
                        This method is not supported for 2D output such as CGM. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayMultiLineAbsoluteRotationScreenSizeStandardText
            (
                int fontIndex /** Index of the text font to be used.
                                                                    This must be an index of a standard font.
                                                                    It may be 0 to use the default font. */,
                const NXString & fontStyle /**  The name of a style supported by the given font.
                                                                     Specify NULL to use the default style for the font,
                                                                     which usually is Regular (no bold, no italic).
                                                                     If a non-NULL style does not exist for the font,
                                                                     the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                    in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const std::vector<NXString> & strings /** Array of text strings to display */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::TextSize textSize /** see enum values */
            );
            /** Displays a multi-line "Standard Text" string using "Absolute Rotation and Screen
                        Size Geometry" for a @link UserDefinedObject UserDefinedObject@endlink . A "Standard Text"
                        string uses one of the fonts available from the operating system.
                        "Absolute Rotation and Screen Size Geometry" means the text appears the
                        same physical sized on the screen regardless of the view scale (like
                        "Screen Geometry"), the text remains front-facing and approximately
                        upright (similar to "Screen Geometry"), but the orientation of the text
                        changes as the user rotates the view (like "Absolute Geometry").
                        The text will be displayed on the XY plane of the absolute coordinate system.
                        This method is not supported for 2D output such as CGM. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void DisplayMultiLineAbsoluteRotationScreenSizeStandardText
            (
                int fontIndex /** Index of the text font to be used.
                                                                    This must be an index of a standard font.
                                                                    It may be 0 to use the default font. */,
                const char * fontStyle /**  The name of a style supported by the given font.
                                                                     Specify NULL to use the default style for the font,
                                                                     which usually is Regular (no bold, no italic).
                                                                     If a non-NULL style does not exist for the font,
                                                                     the font's default style will be used. */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point
                                                                    in Absolute Coordinates */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::StandardTextRef referencePointType /** Reference point type of text box */,
                const std::vector<NXString> & strings /** Array of text strings to display */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::TextSize textSize /** see enum values */
            );
            /** Displays a single character in the given font and style centered at the given position.
                        The character will always be displayed parallel to the screen.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayUnicodeMarker
            (
                const NXString & unicodeChar /** A single Unicode character to display
                                                                     at the given coordinate position. */,
                int fontIndex /** Index of the text font to be used.
                                                                     This must be an index of a standard font.
                                                                     It may be 0 to use the default font. */,
                const NXString & fontStyle /** The name of a style supported by the given font.
                                                                     Specify NULL to use the default style for the font,
                                                                     which usually is Regular (no bold, no italic).
                                                                     If a non-NULL style does not exist for the font,
                                                                     the font's default style will be used. */,
                const NXOpen::Point3d & markerCoordinates /** Position for the center of the marker
                                                                                 in Absolute Coordinates */,
                double markerSize /** In inches on the screen */
            );
            /** Displays a single character in the given font and style centered at the given position.
                        The character will always be displayed parallel to the screen.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void DisplayUnicodeMarker
            (
                const char * unicodeChar /** A single Unicode character to display
                                                                     at the given coordinate position. */,
                int fontIndex /** Index of the text font to be used.
                                                                     This must be an index of a standard font.
                                                                     It may be 0 to use the default font. */,
                const char * fontStyle /** The name of a style supported by the given font.
                                                                     Specify NULL to use the default style for the font,
                                                                     which usually is Regular (no bold, no italic).
                                                                     If a non-NULL style does not exist for the font,
                                                                     the font's default style will be used. */,
                const NXOpen::Point3d & markerCoordinates /** Position for the center of the marker
                                                                                 in Absolute Coordinates */,
                double markerSize /** In inches on the screen */
            );
            /** Displays a single character in the given font and style centered at the given position.
                        The character will always be displayed parallel to the screen.
                     @return  View tag of the view being displayed
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::View * GetViewMode
            (
                bool* isViewModeValid /** True if the view mode was returned and False if no information was available */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::ViewMode* viewMode /** View mode describes the views shading
                                                                                        and face analysis mode - see enum values for more details */,
                bool* isAttenPtValid /** True if the attention point was returned and
                                                                                        False if no information was available */,
                NXOpen::Point3d* attentionPoint /** The attention point of the geometry just displayed */,
                bool* isDrawingViewOpen /** Is the drawing view open for display?
                                                                                        If true then geometry may be added to
                                                                                        the drawing. If false another view
                                                                                        which is not the drawing is open */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
