#ifndef NXOpen_BLOCKSTYLER_ENUMERATION_HXX_INCLUDED
#define NXOpen_BLOCKSTYLER_ENUMERATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BlockStyler_Enumeration.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_Enumeration.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace BlockStyler
    {
        class Enumeration;
    }
    namespace BlockStyler
    {
        class UIBlock;
    }
    namespace BlockStyler
    {
        class _EnumerationBuilder;
        class EnumerationImpl;
        /** Represents an Enumeration block
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENUICPPEXPORT  Enumeration : public BlockStyler::UIBlock
        {
            private: EnumerationImpl * m_enumeration_impl;
            private: friend class  _EnumerationBuilder;
            protected: Enumeration();
            public: ~Enumeration();
            /**Returns  the AllowShortcuts.
                    If true, the 'Show Shortcuts' option is available.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool AllowShortcuts
            (
            );
            /**Sets  the AllowShortcuts.
                    If true, the 'Show Shortcuts' option is available.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAllowShortcuts
            (
                bool allow /** allow */ 
            );
            /** Gets the BalloonTooltipImages @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBalloonTooltipImages
            (
            );
            /** Sets the BalloonTooltipImages
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipImages
            (
                std::vector<NXString> & imageStrings /** image strings */ 
            );
            /**Returns  the BalloonTooltipLayout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString BalloonTooltipLayoutAsString
            (
            );
            /**Sets  the BalloonTooltipLayout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipLayoutAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the BalloonTooltipLayout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetBalloonTooltipLayoutAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the BalloonTooltipLayout members  @return Value to get from the property
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBalloonTooltipLayoutMembers
            (
            );
            /** Gets the BalloonTooltipTexts @return Value to get from the property 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBalloonTooltipTexts
            (
            );
            /** Sets the BalloonTooltipTexts
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipTexts
            (
                std::vector<NXString> & tooltipTextArray /**Value to set for the property. */
            );
            /**Returns  the Localize.
                    If true, the Label is translated to current locale language.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool Localize
            (
            );
            /**Sets  the Localize.
                    If true, the Label is translated to current locale language.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLocalize
            (
                bool localize /** localize */ 
            );
            /** Gets the Bitmaps @return Value to get for the property. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBitmaps
            (
            );
            /** Sets the Bitmaps
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBitmaps
            (
                std::vector<NXString> & bitmapsStrings /**Value to set for the property. */
            );
            /**Returns  the HighQualityBitmap
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool HighQualityBitmap
            (
            );
            /**Sets  the HighQualityBitmap
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHighQualityBitmap
            (
                bool highQuality /** high quality */ 
            );
            /**Returns  the BorderVisibility
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool BorderVisibility
            (
            );
            /**Sets  the BorderVisibility
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBorderVisibility
            (
                bool visibility /** visibility */ 
            );
            /** Gets EnumSensitivity @return  Array of integers with the value 0 or 1. If 1 then the corresponding enum member is sensitive otherwise it is insensitive. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetEnumSensitivity
            (
            );
            /** Sets EnumSensitivity
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetEnumSensitivity
            (
                const std::vector<int> & valueVector /** Array of integers with the value 0 or 1. If 1 then the corresponding enum member is sensitive otherwise it is insensitive. */
            );
            /** Gets EnumVisibility @return  Array of integers with the value 0 or 1. If 1 then the corresponding enum member is visible otherwise it is hidden. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetEnumVisibility
            (
            );
            /** Sets EnumVisibility
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetEnumVisibility
            (
                const std::vector<int> & valueVector /** Array of integers with the value 0 or 1. If 1 then the corresponding enum member is visible otherwise it is hidden. */
            );
            /**Returns  the IconsOnly.
                    If true, the enumeration options are shown as bitmaps only 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IconsOnly
            (
            );
            /**Sets  the IconsOnly.
                    If true, the enumeration options are shown as bitmaps only 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetIconsOnly
            (
                bool iconsOnly /** icons only */ 
            );
            /** Gets InitialShortcuts.
                    Specifies the set of shortcuts that are displayed when the dialog is initially shown. Valid only if AllowShortcuts property is true.  @return  Array of integers with length between 0 and N-1, where N is the number of enumeration options 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetInitialShortcuts
            (
            );
            /** Sets InitialShortcuts.
                    Specifies the set of shortcuts that are displayed when the dialog is initially shown. Valid only if AllowShortcuts property is true.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetInitialShortcuts
            (
                const std::vector<int> & valueVector /** Array of integers with length between 0 and N-1, where N is the number of enumeration options */
            );
            /**Returns  the LabelVisibility
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool LabelVisibility
            (
            );
            /**Sets  the LabelVisibility
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLabelVisibility
            (
                bool visibility /** visibility */ 
            );
            /**Returns  the Layout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString LayoutAsString
            (
            );
            /**Sets  the Layout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLayoutAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the Layout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetLayoutAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the Layout members  @return Value to get from the property 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetLayoutMembers
            (
            );
            /**Returns  the NumberOfColumns
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfColumns
            (
            );
            /**Sets  the NumberOfColumns
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetNumberOfColumns
            (
                int numColumn /** num column */ 
            );
            /**Returns  the PackedColumns.
                    If true, each column takes up as much space as required for labels in that column. If false,
                    the longest label amongst all options dictates the width of all columns.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PackedColumns
            (
            );
            /**Sets  the PackedColumns.
                    If true, each column takes up as much space as required for labels in that column. If false,
                    the longest label amongst all options dictates the width of all columns.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPackedColumns
            (
                bool packedColumns /** packed columns */ 
            );
            /**Returns  the PresentationStyle as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString PresentationStyleAsString
            (
            );
            /**Sets  the PresentationStyle as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPresentationStyleAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the PresentationStyle as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetPresentationStyleAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the PresentationStyle members  @return Value to get from the property
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetPresentationStyleMembers
            (
            );
            /**Returns  the RetainValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool RetainValue
            (
            );
            /**Sets  the RetainValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRetainValue
            (
                bool retain /** retain */ 
            );
            /**Returns  the Value as string.
                    Represents the currently selected option of enum.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ValueAsString
            (
            );
            /**Sets  the Value as string.
                    Represents the currently selected option of enum.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetValueAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the Value as string.
                    Represents the currently selected option of enum.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetValueAsString
            (
                const char * enumString /** enumstring */ 
            );
            /**Gets the Enum members. @return Array of member names
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetEnumMembers
            (
            );
            /**Sets the Enum members.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetEnumMembers
            (
                std::vector<NXString> & memberStrings /**Array of member names*/
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
