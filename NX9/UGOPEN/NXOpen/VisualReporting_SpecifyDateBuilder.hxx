#ifndef NXOpen_VISUALREPORTING_SPECIFYDATEBUILDER_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_SPECIFYDATEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_SpecifyDateBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/DateBuilder.hxx>
#include <NXOpen/VisualReporting_SpecifyDateBuilder.hxx>
#include <NXOpen/libnxopencpp_visualreporting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace VisualReporting
    {
        class SpecifyDateBuilder;
    }
    class Builder;
    class DateBuilder;
    namespace VisualReporting
    {
        class _SpecifyDateBuilderBuilder;
        class SpecifyDateBuilderImpl;
        /** Represents a Specify Date Builder <br> To create a new instance of this class, use @link VisualReporting::VisualReportManager::CreateSpecifyDateBuilder  VisualReporting::VisualReportManager::CreateSpecifyDateBuilder @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_VISUALREPORTINGEXPORT  SpecifyDateBuilder : public Builder
        {
            private: SpecifyDateBuilderImpl * m_specifydatebuilder_impl;
            private: friend class  _SpecifyDateBuilderBuilder;
            protected: SpecifyDateBuilder();
            public: ~SpecifyDateBuilder();
            /**Returns  the date 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::DateBuilder * Date
            (
            );
            /**Returns  the current date as string
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString DateString
            (
            );
            /**Returns  the current relative date string 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString RelativeDateString
            (
            );
            /**Sets  the current relative date string 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetRelativeDateString
            (
                const NXString & dateString /** date string */ 
            );
            /**Sets  the current relative date string 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void SetRelativeDateString
            (
                const char * dateString /** date string */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
