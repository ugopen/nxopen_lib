#ifndef NXOpen_MENUBAR_CONTEXTMENU_HXX_INCLUDED
#define NXOpen_MENUBAR_CONTEXTMENU_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MenuBar_ContextMenu.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MenuBar_ContextMenuEntry.hxx>
#include <NXOpen/MenuBar_MenuButton.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MenuBar
    {
        class ContextMenu;
    }
    namespace MenuBar
    {
        class ContextMenuEntry;
    }
    namespace MenuBar
    {
        class MenuButton;
    }
    namespace MenuBar
    {
    }
    namespace MenuBar
    {
        class ContextMenuImpl;
        /** Represents a Context Menu 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENUICPPEXPORT  ContextMenu : public TransientObject
        {
            private: ContextMenuImpl * m_contextmenu_impl;
            /// \cond NX_NO_DOC 
            public: explicit ContextMenu(void *ptr);
            /// \endcond 
            /**Returns  the number of @link MenuBar::ContextMenuEntry MenuBar::ContextMenuEntry@endlink  objects in this menu. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfEntries
            (
            );
            /** Returns the @link MenuBar::ContextMenuEntry MenuBar::ContextMenuEntry@endlink  at the specified index in the menu.  @return  the menu entry at this position 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MenuBar::ContextMenuEntry * GetEntry
            (
                int index /** index of menu entry to return */
            );
            /** Returns the submenu for the entry at the specified index in the menu. 
                        The menu entry at this index must be of type 
                        @link MenuBar::ContextMenuEntry::TypeSubmenu MenuBar::ContextMenuEntry::TypeSubmenu@endlink .
                      @return  the submenu at this position 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MenuBar::ContextMenu * GetSubmenu
            (
                int index /** index of submenu to return */
            );
            /** Indicates whether or not this menu contains a 
                        @link MenuBar::ContextMenuEntry MenuBar::ContextMenuEntry@endlink  which 
                        has the given name.
                     @return  the menu entry with this name 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool HasEntryWithName
            (
                const NXString & name /** name of menu entry to search for   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Indicates whether or not this menu contains a 
                        @link MenuBar::ContextMenuEntry MenuBar::ContextMenuEntry@endlink  which 
                        has the given name.
                     @return  the menu entry with this name 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            bool HasEntryWithName
            (
                const char * name /** name of menu entry to search for   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Given the name of a menu entry, returns the first
                        @link MenuBar::ContextMenuEntry MenuBar::ContextMenuEntry@endlink  in this menu which
                        matches. 
                     @return  the menu entry with this name 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MenuBar::ContextMenuEntry * GetEntryWithName
            (
                const NXString & name /** name of menu entry to search for   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Given the name of a menu entry, returns the first
                        @link MenuBar::ContextMenuEntry MenuBar::ContextMenuEntry@endlink  in this menu which
                        matches. 
                     @return  the menu entry with this name 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::MenuBar::ContextMenuEntry * GetEntryWithName
            (
                const char * name /** name of menu entry to search for   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the index of the @link MenuBar::ContextMenuEntry MenuBar::ContextMenuEntry@endlink 
                        object within this menu.
                     @return  the index for that menu entry 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int GetIndexOfEntry
            (
                NXOpen::MenuBar::ContextMenuEntry * entry /** an entry in the menu */
            );
            /** Adds a menu bar button to the context menu. Use 
                        @link MenuBar::MenuBarManager::GetButtonFromName MenuBar::MenuBarManager::GetButtonFromName@endlink  
                        to find the button to add to the menu.
                     @return  the new menu entry 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MenuBar::ContextMenuEntry * AddMenuButton
            (
                NXOpen::MenuBar::MenuButton * button /** the menu bar button to add to the menu */,
                int index /** position at which to create the new button. Use -1 to add the button to the end of the menu. */
            );
            /** Adds a separator to the context menu. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void AddSeparator
            (
                int index /** position at which to create the separator. Use -1 to add the separator to the end of the menu. */
            );
            /** Adds a submenu to the context menu.  @return  the new submenu 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MenuBar::ContextMenu * AddSubmenu
            (
                const NXString & label /** label for the cascade menu */,
                int index /** position at which to create the sub-menu. Use -1 to add the sub-menu to the end of the menu. */
            );
            /** Adds a submenu to the context menu.  @return  the new submenu 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::MenuBar::ContextMenu * AddSubmenu
            (
                const char * label /** label for the cascade menu */,
                int index /** position at which to create the sub-menu. Use -1 to add the sub-menu to the end of the menu. */
            );
            /** Makes a specified menu entry the default for the menu. 
                    
                        This entry will be displayed in bold text on the menu. It will be the action
                        that is performed in response to a double-click event in the UI.
                        
                        The menu entry must have a type of @link MenuBar::ContextMenuEntry::TypePushButton MenuBar::ContextMenuEntry::TypePushButton@endlink 
                        or @link MenuBar::ContextMenuEntry::TypeToggleButton MenuBar::ContextMenuEntry::TypeToggleButton@endlink . 
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultEntry
            (
                NXOpen::MenuBar::ContextMenuEntry * entry /** the menu entry to become the default for the menu */
            );
            /** Prevents the indicated menu entry from being shown on the menu. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void HideEntry
            (
                NXOpen::MenuBar::ContextMenuEntry * entry /** the menu entry to hide */
            );
            /** Reorders the menu to move a menu entry to a new position in the list. 
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void MoveEntry
            (
                NXOpen::MenuBar::ContextMenuEntry * entry /** the menu entry to be moved */,
                int index /** the new position */
            );
            /** Frees the object from memory.  After this method is called,
                        it is illegal to use the object.  In .NET, this method is automatically
                        called when the object is deleted by the garbage collector. 
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual ~ContextMenu();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
