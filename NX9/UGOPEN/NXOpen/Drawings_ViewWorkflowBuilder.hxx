#ifndef NXOpen_DRAWINGS_VIEWWORKFLOWBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWWORKFLOWBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewWorkflowBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ViewWorkflowBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ViewWorkflowBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace Drawings
    {
        class _ViewWorkflowBuilderBuilder;
        class ViewWorkflowBuilderImpl;
        /** Represents a @link Drawings::ViewWorkflowBuilder Drawings::ViewWorkflowBuilder@endlink  
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ViewWorkflowBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Represents the preview stle option */
            public: enum Style
            {
                StyleBorder/** border */ ,
                StyleWireframe/** wireframe */ ,
                StyleHiddenWireframe/** hidden wireframe */ ,
                StyleShaded/** shaded */ 
            };

            /** Represents the extracted edge face display option */
            public: enum Display
            {
                DisplayDisplayandEmphasize/** displayand emphasize */ ,
                DisplayCurvesOnly/** curves only */ 
            };

            /** Represents option for handling bodies with no valid lightweight data */
            public: enum Handlingbodies
            {
                HandlingbodiesOmitBodiesfromView/** omit bodiesfrom view */ ,
                HandlingbodiesStopUpdateandNotifyUser/** stop updateand notify user */ ,
                HandlingbodiesStopUpdate/** stop update */ ,
                HandlingbodiesGenerate/** generate */ 
            };

            private: ViewWorkflowBuilderImpl * m_viewworkflowbuilder_impl;
            private: friend class  _ViewWorkflowBuilderBuilder;
            protected: ViewWorkflowBuilder();
            public: ~ViewWorkflowBuilder();
            /**Returns  the display view borders on the the drawing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayBorders
            (
            );
            /**Sets  the display view borders on the the drawing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplayBorders
            (
                bool displayBorders /** displayborders */ 
            );
            /**Returns  the border color of view 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BorderColor
            (
            );
            /**Sets  the border color of view 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetBorderColor
            (
                NXOpen::NXColor * borderColor /** bordercolor */ 
            );
            /**Returns  the active views border color 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ActiveSketchViewColor
            (
            );
            /**Sets  the active views border color 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetActiveSketchViewColor
            (
                NXOpen::NXColor * activeSketchViewColor /** activesketchviewcolor */ 
            );
            /**Returns  the style of the preview when adding a view to the drawing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewWorkflowBuilder::Style PreviewStyle
            (
            );
            /**Sets  the style of the preview when adding a view to the drawing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPreviewStyle
            (
                NXOpen::Drawings::ViewWorkflowBuilder::Style previewStyle /** previewstyle */ 
            );
            /**Returns  the cursor tracking enable XC/YC coordinates in dynamic input boxes when placing a view on a drawing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool CursorTracking
            (
            );
            /**Sets  the cursor tracking enable XC/YC coordinates in dynamic input boxes when placing a view on a drawing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCursorTracking
            (
                bool cursorTracking /** cursortracking */ 
            );
            /**Returns  the associative alignment enable alignement between views
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssociativeAlignment
            (
            );
            /**Sets  the associative alignment enable alignement between views
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAssociativeAlignment
            (
                bool associativeAlignment /** associativealignment */ 
            );
            /**Returns  the face display provides options in an extracted edge view that are available for selection 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewWorkflowBuilder::Display FaceDisplay
            (
            );
            /**Sets  the face display provides options in an extracted edge view that are available for selection 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFaceDisplay
            (
                NXOpen::Drawings::ViewWorkflowBuilder::Display faceDisplay /** facedisplay */ 
            );
            /**Returns  the handling bodies provides option for update view without lightweight data 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewWorkflowBuilder::Handlingbodies HandlingBodies
            (
            );
            /**Sets  the handling bodies provides option for update view without lightweight data 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHandlingBodies
            (
                NXOpen::Drawings::ViewWorkflowBuilder::Handlingbodies handlingBodies /** handlingbodies */ 
            );
            /**Returns  the on view selection determines whether or not components should be loaded as needed for selection in lightweight 
                        views for accurate dimensioning 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool OnViewSelection
            (
            );
            /**Sets  the on view selection determines whether or not components should be loaded as needed for selection in lightweight 
                        views for accurate dimensioning 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOnViewSelection
            (
                bool onViewSelection /** onviewselection */ 
            );
            /**Returns  the on legacy view update determines whether or not components should be loaded as needed to update lightweight views 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool OnLegacyViewUpdate
            (
            );
            /**Sets  the on legacy view update determines whether or not components should be loaded as needed to update lightweight views 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOnLegacyViewUpdate
            (
                bool onLegacyViewUpdate /** onlegacyviewupdate */ 
            );
            /**Returns  the use translucency determines translucency settings for faces when displaying a drawing sheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseTranslucency
            (
            );
            /**Sets  the use translucency determines translucency settings for faces when displaying a drawing sheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetUseTranslucency
            (
                bool useTranslucency /** usetranslucency */ 
            );
            /**Returns  the use line antialiasing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseLineAntialiasing
            (
            );
            /**Sets  the use line antialiasing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetUseLineAntialiasing
            (
                bool useLineAntialiasing /** uselineantialiasing */ 
            );
            /**Returns  the show facet edges determines whether or not facet edges will be shown on shaded faces when displaying a drawing sheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowFacetEdges
            (
            );
            /**Sets  the show facet edges determines whether or not facet edges will be shown on shaded faces when displaying a drawing sheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowFacetEdges
            (
                bool showFacetEdges /** showfacetedges */ 
            );
            /**Returns  the large assembly step threshold option establishes the minimum number of components (loaded or unloaded) a part may have to be considered a 
                        large assembly. When the number of components exceeds this number, the View Creation Wizard provides an extra step 
                        to optimize part settings for large assemblies. A value of zero will force the system to always use the optimized 
                        part settings for large assemblies 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int LargeAssemblyStepThreshold
            (
            );
            /**Sets  the large assembly step threshold option establishes the minimum number of components (loaded or unloaded) a part may have to be considered a 
                        large assembly. When the number of components exceeds this number, the View Creation Wizard provides an extra step 
                        to optimize part settings for large assemblies. A value of zero will force the system to always use the optimized 
                        part settings for large assemblies 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLargeAssemblyStepThreshold
            (
                int largeAssemblyStepThreshold /** largeassemblystepthreshold */ 
            );
            /**Returns  the enable smooth edges for light weight view determines whether smooth edges will be shown or not when view is light weight 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableSmoothEdgesForLWView
            (
            );
            /**Sets  the enable smooth edges for light weight view determines whether smooth edges will be shown or not when view is light weight 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetEnableSmoothEdgesForLWView
            (
                bool enableSmoothEdgesForLWView /** enablesmoothedgesforlwview */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
