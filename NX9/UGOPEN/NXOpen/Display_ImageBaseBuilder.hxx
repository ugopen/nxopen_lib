#ifndef NXOpen_DISPLAY_IMAGEBASEBUILDER_HXX_INCLUDED
#define NXOpen_DISPLAY_IMAGEBASEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_ImageBaseBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Display_ImageBaseBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_display_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Display
    {
        class ImageBaseBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class Point;
    namespace Display
    {
        class _ImageBaseBuilderBuilder;
        class ImageBaseBuilderImpl;
        /** Represents a @link Display::ImageBaseBuilder Display::ImageBaseBuilder@endlink .
            Serves as the base class for all @link Display::ImageBase Display::ImageBase@endlink  builders.
            @link Display::ImageBase Display::ImageBase@endlink  base class provides definition, orientation,
            sizing, and display setting controls for image based objects. 
             <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_DISPLAYEXPORT  ImageBaseBuilder : public Builder
        {
            /** Specifies image reference base point choice. */
            public: enum BasePointChoices
            {
                BasePointChoicesBottomLeft/** bottom left */,
                BasePointChoicesBottomCenter/** bottom center */,
                BasePointChoicesBottomRight/** bottom left */,
                BasePointChoicesMiddleLeft/** middle left */,
                BasePointChoicesMiddleCenter/** middle center */,
                BasePointChoicesMiddleRight/** middle right */,
                BasePointChoicesTopLeft/** top left */,
                BasePointChoicesTopCenter/** top center */,
                BasePointChoicesTopRight/** top right */,
                BasePointChoicesUserDefined/** user defined */
            };

            /** Specifies image alignment reference direction type. */
            public: enum ReferenceDirection
            {
                ReferenceDirectionHorizontal/** horizontal reference direction */,
                ReferenceDirectionVertical/** vertical reference direction */
            };

            /** Describes insertion point type. */
            public: enum InsertionPoint
            {
                InsertionPointDefault/** default insertion point type */,
                InsertionPointUserDefined/** user defined insertion point type */
            };

            /** Describes size options. */
            public: enum SizeOptions
            {
                SizeOptionsUserDefined/** user defined option */,
                SizeOptionsImageSize/** image size option */,
                SizeOptionsReferenceScaling/** reference scaling option */
            };

            /** Describes image color modes. */
            public: enum ImageColorModes
            {
                ImageColorModesRgb/** rgb color mode */,
                ImageColorModesGreyscale/** grey scale color mode */,
                ImageColorModesMonochrome/** monochrome color mode */
            };

            /** Transparency Color From */
            public: enum TransparencyColorFrom
            {
                TransparencyColorFromNone/** No Transparency Color */,
                TransparencyColorFromFromImage/** Transparency Color from image */,
                TransparencyColorFromPixelColor/** pixel color */ 
            };

            private: ImageBaseBuilderImpl * m_imagebasebuilder_impl;
            private: friend class  _ImageBaseBuilderBuilder;
            protected: ImageBaseBuilder();
            public: ~ImageBaseBuilder();
            /**Returns  the image reference base point choice. If you choose 
                    @link Display::ImageBaseBuilder::BasePointChoicesUserDefined Display::ImageBaseBuilder::BasePointChoicesUserDefined@endlink , 
                    use @link Display::ImageBaseBuilder::SetUserBasePoint Display::ImageBaseBuilder::SetUserBasePoint@endlink  
                    to set a point as the User-Defined point. 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::ImageBaseBuilder::BasePointChoices BasePointChoice
            (
            );
            /**Sets  the image reference base point choice. If you choose 
                    @link Display::ImageBaseBuilder::BasePointChoicesUserDefined Display::ImageBaseBuilder::BasePointChoicesUserDefined@endlink , 
                    use @link Display::ImageBaseBuilder::SetUserBasePoint Display::ImageBaseBuilder::SetUserBasePoint@endlink  
                    to set a point as the User-Defined point. 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBasePointChoice
            (
                NXOpen::Display::ImageBaseBuilder::BasePointChoices basePoint /** basepoint */ 
            );
            /**Returns  the user defined base point. This is valid when you set 
                    @link Display::ImageBaseBuilder::BasePointChoice Display::ImageBaseBuilder::BasePointChoice @endlink and @link Display::ImageBaseBuilder::SetBasePointChoice Display::ImageBaseBuilder::SetBasePointChoice @endlink  to 
                    @link Display::ImageBaseBuilder::BasePointChoicesUserDefined Display::ImageBaseBuilder::BasePointChoicesUserDefined@endlink  
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * UserBasePoint
            (
            );
            /**Sets  the user defined base point. This is valid when you set 
                    @link Display::ImageBaseBuilder::BasePointChoice Display::ImageBaseBuilder::BasePointChoice @endlink and @link Display::ImageBaseBuilder::SetBasePointChoice Display::ImageBaseBuilder::SetBasePointChoice @endlink  to 
                    @link Display::ImageBaseBuilder::BasePointChoicesUserDefined Display::ImageBaseBuilder::BasePointChoicesUserDefined@endlink  
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUserBasePoint
            (
                NXOpen::Point * basePoint /** basepoint */ 
            );
            /**Returns  the image insertion point type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::ImageBaseBuilder::InsertionPoint InsertionPointOption
            (
            );
            /**Sets  the image insertion point type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInsertionPointOption
            (
                NXOpen::Display::ImageBaseBuilder::InsertionPoint insertPoint /** insertpoint */ 
            );
            /**Returns  the user defined insertion point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * UserInsertionPoint
            (
            );
            /**Sets  the user defined insertion point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUserInsertionPoint
            (
                NXOpen::Point * insertPoint /** insertpoint */ 
            );
            /**Returns  the image alignment reference direction type.
                    @link Display::ImageBaseBuilder::ReferenceDirectionHorizontal Display::ImageBaseBuilder::ReferenceDirectionHorizontal@endlink 
                    means rotate the image to align its horizontal direction with the user-specified 
                    reference direction (if defined). 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::ImageBaseBuilder::ReferenceDirection ReferenceDirectionOption
            (
            );
            /**Sets  the image alignment reference direction type.
                    @link Display::ImageBaseBuilder::ReferenceDirectionHorizontal Display::ImageBaseBuilder::ReferenceDirectionHorizontal@endlink 
                    means rotate the image to align its horizontal direction with the user-specified 
                    reference direction (if defined). 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReferenceDirectionOption
            (
                NXOpen::Display::ImageBaseBuilder::ReferenceDirection referenceDirection /** referencedirection */ 
            );
            /**Returns  the user defined reference direction vector. A direction normal to 
                    the plane of the image is invalid.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * UserReferenceDirection
            (
            );
            /**Sets  the user defined reference direction vector. A direction normal to 
                    the plane of the image is invalid.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUserReferenceDirection
            (
                NXOpen::Direction * userDirection /** userdirection */ 
            );
            /** Align Image to Reference Direction
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AlignImageToReferenceDirection
            (
            );
            /**Returns  the current rotation angle of image from aligned reference direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RotateAngleOfReferenceVector
            (
            );
            /** Rotates the image 90 degrees counter-clockwise. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RotateLeft
            (
            );
            /** Rotates the image 90 degrees clockwise. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RotateRight
            (
            );
            /** Flips the image horizontally. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void FlipHorizontal
            (
            );
            /** Flips the image vertically. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void FlipVertical
            (
            );
            /** Orients and fits the work view's view direction along the reverse normal direction of the image 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void OrientViewToImage
            (
            );
            /**Returns  the image file 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ImageFile
            (
            );
            /**Sets  the image file 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImageFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the image file 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetImageFile
            (
                const char * filename /** filename */ 
            );
            /** Provide a list of names of the @link Display::ImageData Display::ImageData@endlink 
                    objects saved in current part file.
                     @return  Array of @link Display::ImageData Display::ImageData@endlink  names 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetImagesInPart
            (
            );
            /** Set a @link Display::ImageData Display::ImageData@endlink  object currently 
                    stored in the part as the image used by the builder. 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImageFromPart
            (
                const NXString & imageName /** Name of @link Display::ImageData Display::ImageData@endlink  object */
            );
            /** Set a @link Display::ImageData Display::ImageData@endlink  object currently 
                    stored in the part as the image used by the builder. 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetImageFromPart
            (
                const char * imageName /** Name of @link Display::ImageData Display::ImageData@endlink  object */
            );
            /** Get the image corner points. The points define a rectangular region
                    and are ordered counter-clockwise.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetCornerPoints
            (
                NXOpen::Point3d* point1 /** first corner point of image */,
                NXOpen::Point3d* point2 /** second corner point of image */,
                NXOpen::Point3d* point3 /** third corner point of image */,
                NXOpen::Point3d* point4 /** fourth corner point of image */
            );
            /** Set the image corner points.  The points must define a rectangular
                    region and be ordered counter-clockwise.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCornerPoints
            (
                const NXOpen::Point3d & point1 /** first corner point of image */,
                const NXOpen::Point3d & point2 /** second corner point of image */,
                const NXOpen::Point3d & point3 /** third corner point of image */,
                const NXOpen::Point3d & point4 /** fourth corner point of image */
            );
            /**Returns  the transparency color option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::ImageBaseBuilder::TransparencyColorFrom TransparencyColorOption
            (
            );
            /**Sets  the transparency color option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTransparencyColorOption
            (
                NXOpen::Display::ImageBaseBuilder::TransparencyColorFrom transparencyColorOption /** transparencycoloroption */ 
            );
            /** Gets the transparency color (RGB value) of the image; only valid
                    when @link Display::ImageBaseBuilder::TransparencyColorOption Display::ImageBaseBuilder::TransparencyColorOption @endlink and @link Display::ImageBaseBuilder::SetTransparencyColorOption Display::ImageBaseBuilder::SetTransparencyColorOption @endlink 
                    is set to @link Display::ImageBaseBuilder::TransparencyColorFromPixelColor Display::ImageBaseBuilder::TransparencyColorFromPixelColor@endlink .
                    The length of the output array will always be 3.  Each color value of 
                    the double array is in the range 0.0 to 1.0. 
                     @return  RGB color array 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetTransparentPixelColor
            (
            );
            /** Sets the transparency color (RGB value) of the image; only valid
                    when @link Display::ImageBaseBuilder::TransparencyColorOption Display::ImageBaseBuilder::TransparencyColorOption @endlink and @link Display::ImageBaseBuilder::SetTransparencyColorOption Display::ImageBaseBuilder::SetTransparencyColorOption @endlink 
                    is set to @link Display::ImageBaseBuilder::TransparencyColorFromPixelColor Display::ImageBaseBuilder::TransparencyColorFromPixelColor@endlink .
                    The length of the input array should always be 3.  Each color value of 
                    the double array must be in the range 0.0 to 1.0. 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTransparentPixelColor
            (
                const std::vector<double> & transparencyColor /** RGB color array */
            );
            /** Gets the foreground color (RGB value) of the image; only valid
                    when @link Display::ImageBaseBuilder::ColorMode Display::ImageBaseBuilder::ColorMode @endlink and @link Display::ImageBaseBuilder::SetColorMode Display::ImageBaseBuilder::SetColorMode @endlink 
                    is set to @link Display::ImageBaseBuilder::ImageColorModesGreyscale Display::ImageBaseBuilder::ImageColorModesGreyscale@endlink .
                    The length of the output array will always be 3.  Each color value of 
                    the double array is in the range 0.0 to 1.0. 
                     @return  RGB color array 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetForegroundColor
            (
            );
            /** Sets the foreground color (RGB value) of the image; only valid
                    when @link Display::ImageBaseBuilder::ColorMode Display::ImageBaseBuilder::ColorMode @endlink and @link Display::ImageBaseBuilder::SetColorMode Display::ImageBaseBuilder::SetColorMode @endlink 
                    is set to @link Display::ImageBaseBuilder::ImageColorModesGreyscale Display::ImageBaseBuilder::ImageColorModesGreyscale@endlink .
                    The length of the input array should always be 3.  Each color value of 
                    the double array must be in the range 0.0 to 1.0. 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetForegroundColor
            (
                const std::vector<double> & foregroundColor /** RGB color array */
            );
            /** Gets the background color (RGB value) of the image; only valid
                    when @link Display::ImageBaseBuilder::ColorMode Display::ImageBaseBuilder::ColorMode @endlink and @link Display::ImageBaseBuilder::SetColorMode Display::ImageBaseBuilder::SetColorMode @endlink 
                    is set to @link Display::ImageBaseBuilder::ImageColorModesGreyscale Display::ImageBaseBuilder::ImageColorModesGreyscale@endlink .
                    The length of the output array will always be 3.  Each color value of 
                    the double array is in the range 0.0 to 1.0. 
                     @return  RGB color array 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetBackgroundColor
            (
            );
            /** Sets the background color (RGB value) of the image; only valid
                    when @link Display::ImageBaseBuilder::ColorMode Display::ImageBaseBuilder::ColorMode @endlink and @link Display::ImageBaseBuilder::SetColorMode Display::ImageBaseBuilder::SetColorMode @endlink 
                    is set to @link Display::ImageBaseBuilder::ImageColorModesGreyscale Display::ImageBaseBuilder::ImageColorModesGreyscale@endlink .
                    The length of the input array should always be 3.  Each color value of 
                    the double array must be in the range 0.0 to 1.0. 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBackgroundColor
            (
                const std::vector<double> & backgroundColor /** RGB color array */
            );
            /**Returns  the lock aspect ratio 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool LockAspectRatio
            (
            );
            /**Sets  the lock aspect ratio 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLockAspectRatio
            (
                bool lockAspectRatio /** lockaspectratio */ 
            );
            /**Returns  the size option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::ImageBaseBuilder::SizeOptions SizeOption
            (
            );
            /**Sets  the size option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSizeOption
            (
                NXOpen::Display::ImageBaseBuilder::SizeOptions sizeOption /** sizeoption */ 
            );
            /**Returns  the image reference point1; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink .
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ImageReferencePoint1
            (
            );
            /**Sets  the image reference point1; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink .
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImageReferencePoint1
            (
                NXOpen::Point * imageReferencePoint1 /** imagereferencepoint1 */ 
            );
            /**Returns  the model reference point1; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink .
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ModelReferencePoint1
            (
            );
            /**Sets  the model reference point1; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink .
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetModelReferencePoint1
            (
                NXOpen::Point * modelReferencePoint1 /** modelreferencepoint1 */ 
            );
            /**Returns  the image reference point2; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink .
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ImageReferencePoint2
            (
            );
            /**Sets  the image reference point2; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink .
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImageReferencePoint2
            (
                NXOpen::Point * imageReferencePoint2 /** imagereferencepoint2 */ 
            );
            /**Returns  the model reference point2; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink .
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ModelReferencePoint2
            (
            );
            /**Sets  the model reference point2; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink .
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetModelReferencePoint2
            (
                NXOpen::Point * modelReferencePoint2 /** modelreferencepoint2 */ 
            );
            /**Returns  the image reference point3; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink 
                    and @link Display::ImageBaseBuilder::LockAspectRatio Display::ImageBaseBuilder::LockAspectRatio @endlink and @link Display::ImageBaseBuilder::SetLockAspectRatio Display::ImageBaseBuilder::SetLockAspectRatio @endlink  
                    is set to False.
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ImageReferencePoint3
            (
            );
            /**Sets  the image reference point3; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink 
                    and @link Display::ImageBaseBuilder::LockAspectRatio Display::ImageBaseBuilder::LockAspectRatio @endlink and @link Display::ImageBaseBuilder::SetLockAspectRatio Display::ImageBaseBuilder::SetLockAspectRatio @endlink  
                    is set to False.
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImageReferencePoint3
            (
                NXOpen::Point * imageReferencePoint3 /** imagereferencepoint3 */ 
            );
            /**Returns  the model reference point3; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink 
                    and @link Display::ImageBaseBuilder::LockAspectRatio Display::ImageBaseBuilder::LockAspectRatio @endlink and @link Display::ImageBaseBuilder::SetLockAspectRatio Display::ImageBaseBuilder::SetLockAspectRatio @endlink  
                    is set to False.
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ModelReferencePoint3
            (
            );
            /**Sets  the model reference point3; only valid when 
                    @link Display::ImageBaseBuilder::SizeOption Display::ImageBaseBuilder::SizeOption @endlink and @link Display::ImageBaseBuilder::SetSizeOption Display::ImageBaseBuilder::SetSizeOption @endlink  is set to 
                    @link Display::ImageBaseBuilder::SizeOptionsReferenceScaling Display::ImageBaseBuilder::SizeOptionsReferenceScaling@endlink 
                    and @link Display::ImageBaseBuilder::LockAspectRatio Display::ImageBaseBuilder::LockAspectRatio @endlink and @link Display::ImageBaseBuilder::SetLockAspectRatio Display::ImageBaseBuilder::SetLockAspectRatio @endlink  
                    is set to False.
                    Reference Scaling provides sizing the image by defining image reference 
                    points and matching them with corresponding model reference points.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetModelReferencePoint3
            (
                NXOpen::Point * modelReferencePoint3 /** modelreferencepoint3 */ 
            );
            /**Returns  the width of the image as an expression. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Width
            (
            );
            /**Returns  the height of the image as an expression. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /** Resets the image to its original size. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ResetImageSize
            (
            );
            /**Returns  the transparency pixel color tolerance. The range of this value is 
                    0 to 255.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int PixelColorTolerance
            (
            );
            /**Sets  the transparency pixel color tolerance. The range of this value is 
                    0 to 255.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPixelColorTolerance
            (
                int colorTolerence /** colortolerence */ 
            );
            /**Returns  the overall translucency. The range of this value is 0 to 100. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int OverallTranslucency
            (
            );
            /**Sets  the overall translucency. The range of this value is 0 to 100. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOverallTranslucency
            (
                int overallTranslucency /** overalltranslucency */ 
            );
            /**Returns  the color mode to display the image. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::ImageBaseBuilder::ImageColorModes ColorMode
            (
            );
            /**Sets  the color mode to display the image. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetColorMode
            (
                NXOpen::Display::ImageBaseBuilder::ImageColorModes colorMode /** colormode */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
