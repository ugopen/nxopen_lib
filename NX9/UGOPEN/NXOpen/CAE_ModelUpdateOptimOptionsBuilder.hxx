#ifndef NXOpen_CAE_MODELUPDATEOPTIMOPTIONSBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELUPDATEOPTIMOPTIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelUpdateOptimOptionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ModelUpdateOptimOptionsBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ModelUpdateOptimOptionsBuilder;
    }
    class Builder;
    namespace CAE
    {
        class _ModelUpdateOptimOptionsBuilderBuilder;
        class ModelUpdateOptimOptionsBuilderImpl;
        /** Represents a @link CAE::ModelUpdateOptimOptionsBuilder CAE::ModelUpdateOptimOptionsBuilder@endlink   <br> To create a new instance of this class, use @link CAE::ModelUpdateSolution::CreateOptimOptionsBuilder  CAE::ModelUpdateSolution::CreateOptimOptionsBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ModelUpdateOptimOptionsBuilder : public Builder
        {
            /** the method of the optimizer */
            public: enum MethodChoice
            {
                MethodChoiceLeastSquares/** Least Squares method */,
                MethodChoiceSteepestDescent/** Steepest Descent method */,
                MethodChoiceGeneticAlgorithm/** Genetic Algorithm method */
            };

            /** the mode of the Steepest Descent method */
            public: enum SteepestDescMethodChoice
            {
                SteepestDescMethodChoiceLinear/** Linear mode */,
                SteepestDescMethodChoiceFractional/** Fractional mode */
            };

            private: ModelUpdateOptimOptionsBuilderImpl * m_modelupdateoptimoptionsbuilder_impl;
            private: friend class  _ModelUpdateOptimOptionsBuilderBuilder;
            protected: ModelUpdateOptimOptionsBuilder();
            public: ~ModelUpdateOptimOptionsBuilder();
            /**Returns  the maximum iterations 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int MaxIterations
            (
            );
            /**Sets  the maximum iterations 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetMaxIterations
            (
                int maxIterations /** maxiterations */ 
            );
            /**Returns  the minimum improvement 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double MinImprovement
            (
            );
            /**Sets  the minimum improvement 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetMinImprovement
            (
                double minImprovement /** minimprovement */ 
            );
            /**Returns  the design variable weight 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double DesignVarWeight
            (
            );
            /**Sets  the design variable weight 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetDesignVarWeight
            (
                double designVarWeight /** designvarweight */ 
            );
            /**Returns  the design variable linear range 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double DesignVarLinearRange
            (
            );
            /**Sets  the design variable linear range 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetDesignVarLinearRange
            (
                double designVarLinearRange /** designvarlinearrange */ 
            );
            /**Returns  the method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelUpdateOptimOptionsBuilder::MethodChoice Method
            (
            );
            /**Sets  the method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetMethod
            (
                NXOpen::CAE::ModelUpdateOptimOptionsBuilder::MethodChoice method /** method */ 
            );
            /**Returns  the least squares auto filter design variable 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool LeastSqrAutoFilter
            (
            );
            /**Sets  the least squares auto filter design variable 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetLeastSqrAutoFilter
            (
                bool leastSqrAutoFilter /** leastsqrautofilter */ 
            );
            /**Returns  the steepest descent method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelUpdateOptimOptionsBuilder::SteepestDescMethodChoice SteepestDescMethod
            (
            );
            /**Sets  the steepest descent method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetSteepestDescMethod
            (
                NXOpen::CAE::ModelUpdateOptimOptionsBuilder::SteepestDescMethodChoice steepestDescMethod /** steepestdescmethod */ 
            );
            /**Returns  the steepest descent max inner iterations 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int SteepestDescMaxInnerIter
            (
            );
            /**Sets  the steepest descent max inner iterations 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetSteepestDescMaxInnerIter
            (
                int steepestDescMaxInnerIter /** steepestdescmaxinneriter */ 
            );
            /**Returns  the steepest descent design variable step 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double SteepestDescDVarStep
            (
            );
            /**Sets  the steepest descent design variable step 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetSteepestDescDVarStep
            (
                double steepestDescDVarStep /** steepestdescdvarstep */ 
            );
            /**Returns  the genetic algorithm optimizer number of individuals 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int GaOptNumIndividuals
            (
            );
            /**Sets  the genetic algorithm optimizer number of individuals 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetGaOptNumIndividuals
            (
                int gaOptNumIndividuals /** gaoptnumindividuals */ 
            );
            /**Returns  the genetic algorithm optimizer number of generations 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int GaOptNumGenerations
            (
            );
            /**Sets  the genetic algorithm optimizer number of generations 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetGaOptNumGenerations
            (
                int gaOptNumGenerations /** gaoptnumgenerations */ 
            );
            /**Returns  the genetic algorithm optimizer number of genes 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int GaOptNumGenes
            (
            );
            /**Sets  the genetic algorithm optimizer number of genes 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetGaOptNumGenes
            (
                int gaOptNumGenes /** gaoptnumgenes */ 
            );
            /** Do the optimization of model update 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void Optimize
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
