#ifndef NXOpen_PDM_PARTFROMPARTBUILDER_HXX_INCLUDED
#define NXOpen_PDM_PARTFROMPARTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_PartFromPartBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PDM_PartBuilder.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class PartFromPartBuilder;
    }
    namespace PDM
    {
        class PartBuilder;
    }
    namespace PDM
    {
        class PartFromPartBuilderImpl;
        /** This class provides the methods necessary to create a new part in NX Manager
            from an existing part.
            
             <br> 
            The operation that this builder supports is equivalent to the file save as operation which can:
            <ol>
               <li>Copy a non-master dataset into a previously existing item revision,</li>
               <li>Save a master dataset (and possibly non-master datasets) into a new revision of the same item,</li>
               <li>Save any master or non-master dataset as a completely new item.</li>
            </ol>
             <br> 

             <br> The part that is saved is always the work part. If the save is successful, then the newly
            saved part will be the display part. <br> 

             <br> This class is a singleton meaning only one instance of it can be exist at a time. <br> 
            
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  PartFromPartBuilder : public PDM::PartBuilder
        {
            /** This enum is used to specify which non-master parts and dependent files
                    should be saved during the save as operation. */
            public: enum FileSaveAs
            {
                FileSaveAsSome/** save selected during save as */,
                FileSaveAsAll/** save all during save as */,
                FileSaveAsNone/** save none during save as */
            };

            private: PartFromPartBuilderImpl * m_partfrompartbuilder_impl;
            /// \cond NX_NO_DOC 
            public: explicit PartFromPartBuilder(void *ptr);
            /// \endcond 
            /** Free resources associated with the instance. After this method
                    is called, it is illegal to use the object.  In .NET, this method
                    is automatically called when the object is deleted by the garbage
                    collector. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PartFromPartBuilder();
            /**Sets  the non-master parts to save during the save as operation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNonmasterSaveAsOption
            (
                NXOpen::PDM::PartFromPartBuilder::FileSaveAs saveOption /** save option */ 
            );
            /**Returns  the non-master parts to save during the save as operation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartFromPartBuilder::FileSaveAs NonmasterSaveAsOption
            (
            );
            /**Sets  the dependent files to save during the save as operation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDependentFileSaveAsOption
            (
                NXOpen::PDM::PartFromPartBuilder::FileSaveAs saveOption /** save option */ 
            );
            /**Returns  the dependent files to save during the save as operation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartFromPartBuilder::FileSaveAs DependentFileSaveAsOption
            (
            );
            /** Initializes the list of non-master parts that can be saved during the
                    save as operation. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateNonmasterList
            (
            );
            /** Gets the list of non-master parts.  @return  Non-master part file names 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetNonmasterList
            (
            );
            /** Returns whether or not the non-master part specified will actually
                    get saved during the save as operation.  @return  True means that this non-master will be saved.
                            False means that this non-master will not be saved. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetNonmasterToSaveAs
            (
                const NXString & partName /** the non-master part that the caller
                                wants to save or not save   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns whether or not the non-master part specified will actually
                    get saved during the save as operation.  @return  True means that this non-master will be saved.
                            False means that this non-master will not be saved. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            bool GetNonmasterToSaveAs
            (
                const char * partName /** the non-master part that the caller
                                wants to save or not save   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets whether or not the non-master part specified will actually
                    get saved during the save as operation. True means that it will be
                    saved. False means that it will not be saved.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNonmasterToSaveAs
            (
                const NXString & partName /** the non-master part whose save option is being set here   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool doSaveAs /** True means that this non-master part will be saved.
                                False means that this non-master part will not be saved. */
            );
            /** Sets whether or not the non-master part specified will actually
                    get saved during the save as operation. True means that it will be
                    saved. False means that it will not be saved.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void SetNonmasterToSaveAs
            (
                const char * partName /** the non-master part whose save option is being set here   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool doSaveAs /** True means that this non-master part will be saved.
                                False means that this non-master part will not be saved. */
            );
            /** Sets the name the non-master part will get saved as. It will get saved as the
                    original non-master name if this method is not called.  @return  Whether  or not the name is a valid data set
                            name. The name will get set on the builder no matter if it is valid or not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool EditNonmasterNameToSaveAs
            (
                const NXString & oldName /** the non-master part whose save as name is being set here   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & newName /** the new name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the name the non-master part will get saved as. It will get saved as the
                    original non-master name if this method is not called.  @return  Whether  or not the name is a valid data set
                            name. The name will get set on the builder no matter if it is valid or not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            bool EditNonmasterNameToSaveAs
            (
                const char * oldName /** the non-master part whose save as name is being set here   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * newName /** the new name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates the new part that has been fully-specified by calling methods on this
                    builder. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void Commit
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
