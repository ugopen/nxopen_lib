#ifndef NXOpen_ROUTING_DUCTREINFORCEMENTBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_DUCTREINFORCEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DuctReinforcementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Routing_DuctReinforcementBuilder.hxx>
#include <NXOpen/Routing_PathStockBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class DuctReinforcementBuilder;
    }
    class Builder;
    class Curve;
    class Expression;
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace Routing
    {
        class PathStockBuilder;
    }
    namespace Routing
    {
        class SelectStock;
    }
    namespace Routing
    {
        class _DuctReinforcementBuilderBuilder;
        class DuctReinforcementBuilderImpl;
        /**
                Builder for creating/editing duct reinforcements. Rules can be defined based on which the type of
                reinforcement to be placed on the input duct will be determined.
                See @link Routing::DuctReinforcement Routing::DuctReinforcement@endlink  for Duct Reinforcement
                class documentation.
             <br> To create a new instance of this class, use @link Routing::RouteManager::CreateDuctReinforcementBuilder  Routing::RouteManager::CreateDuctReinforcementBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        IntervalExpression.Value </td> <td> 
         
        100 (millimeters part), 4 (inches part) </td> </tr> 

        <tr><td> 
         
        NumberOfPairs </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ReinforcementType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        SpacingExpression.Value </td> <td> 
         
        50 (millimeters part), 2 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX8.5.2.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  DuctReinforcementBuilder : public Builder
        {
            /** Specifies the type of duct reinforcements. */
            public: enum ReinforcementTypes
            {
                ReinforcementTypesNone/** none */ ,
                ReinforcementTypesInside/** inside */ ,
                ReinforcementTypesOutside/** outside */ 
            };

            private: DuctReinforcementBuilderImpl * m_ductreinforcementbuilder_impl;
            private: friend class  _DuctReinforcementBuilderBuilder;
            protected: DuctReinforcementBuilder();
            public: ~DuctReinforcementBuilder();
            /**Returns  the duct that is to be reinforced. 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::SelectStock * ParentDuct
            (
            );
            /**Returns  the type of reinforcement 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::DuctReinforcementBuilder::ReinforcementTypes ReinforcementType
            (
            );
            /**Sets  the type of reinforcement 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetReinforcementType
            (
                NXOpen::Routing::DuctReinforcementBuilder::ReinforcementTypes reinforcementType /** reinforcementtype */ 
            );
            /**Returns  the stock settings for parallel reinforcements 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::PathStockBuilder * ParallelReinforcement
            (
            );
            /**Sets  the stock settings for parallel reinforcements 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetParallelReinforcement
            (
                NXOpen::Routing::PathStockBuilder * parallelStockBuilder /** parallelstockbuilder */ 
            );
            /**Returns  the stock settings for perpendicular reinforcements 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::PathStockBuilder * PerpendicularReinforcement
            (
            );
            /**Sets  the stock settings for perpendicular reinforcements 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetPerpendicularReinforcement
            (
                NXOpen::Routing::PathStockBuilder * perpendicularStockBuilder /** perpendicularstockbuilder */ 
            );
            /**Returns  the number of pairs of outside reinforcements going parallel to axis of the duct 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: int NumberOfPairs
            (
            );
            /**Sets  the number of pairs of outside reinforcements going parallel to axis of the duct 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetNumberOfPairs
            (
                int numberOfPairs /** numberofpairs */ 
            );
            /**Returns  the distance between each pair of reinforcement 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Expression * SpacingExpression
            (
            );
            /**Returns  the distance between each set of reinforcement stocks going perpendicular to axis of the duct 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Expression * IntervalExpression
            (
            );
            /**Returns  the minimum clearance value for duct reinforcement
                        It defines the minimum distance from the beginning and end of the path to place the 
                        first and last piece of reinforcement stock. 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * MinimumClearance
            (
            );
            /**Returns  the path curve that is used to specify perpendicular reinforcement defining points.
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Curve * PathCurve
            (
            );
            /** The path curve that is used to specify perpendicular reinforcement defining points.
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void UpdatePathCurve
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
