#ifndef NXOpen_MOTION_ARTICULATIONCONTROL_HXX_INCLUDED
#define NXOpen_MOTION_ARTICULATIONCONTROL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_ArticulationControl.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion.hxx>
#include <NXOpen/Motion_ArticulationControl.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class ArticulationControl;
    }
    namespace Motion
    {
        class Joint;
    }
    class Unit;
    namespace Motion
    {
        class _ArticulationControlBuilder;
        class ArticulationControlImpl;
        /** Represents the @link Motion::ArticulationControl Motion::ArticulationControl@endlink   <br> An instance of this class can not be obtained  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  ArticulationControl : public TaggedObject
        {
            private: ArticulationControlImpl * m_articulationcontrol_impl;
            private: friend class  _ArticulationControlBuilder;
            protected: ArticulationControl();
            public: ~ArticulationControl();
            /** Get the articulation joints displacement
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void GetArticulationJointsDisplacement
            (
                NXOpen::Motion::Joint * jointTag /** The special articulation joint object */,
                int* currentStep /** The current step index */,
                double* displacement /** The articulation joint displacement value within current step */,
                NXOpen::Unit ** displacementUnit /** The articulation joint displacement unit */
            );
            /** Articulation solve with joint driver step size and number of step as input 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ArticulationSolve
            (
                int numSteps /**The number of step will take in one action*/,
                const std::vector<NXOpen::Motion::Joint *> & jointTags /**Articulation joint tags */,
                const std::vector<double> & stepSize /**Articulation joint step size */,
                const std::vector<NXOpen::Unit *> & stepSizeUnit /**Articulation joint step size unit*/
            );
            /** Articulation solve with joint driver displacement as input 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ArticulationSolve
            (
                const std::vector<NXOpen::Motion::Joint *> & jointTags /** Articulation joint tags */,
                const std::vector<double> & displacement /** Articulation joint displacement*/,
                const std::vector<NXOpen::Unit *> & displacementUnit /** Articulation joint displacement units*/
            );
            /** Articulation to design position 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void StepToDesignPosition
            (
            );
            /** Articulation to assembly position 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void StepToAssemblyPosition
            (
            );
            /** Articulation stop 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void Stop
            (
            );
            /** Articulation finish 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void Finish
            (
            );
            /** Articulation joints 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void GetArticulationJoints
            (
                std::vector<NXOpen::Motion::Joint *> & jointTags /** The articulation joint array */
            );
            /**Returns  the articulation joint limits setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool JointsLimits
            (
            );
            /**Sets  the articulation joint limits setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetJointsLimits
            (
                bool jointLimits /** jointlimits */ 
            );
            /**Returns  the articulation delay 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int Delay
            (
            );
            /**Sets  the articulation delay 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDelay
            (
                int delay /** delay */ 
            );
            /**Returns  the active view 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ActiveView ActiveView
            (
            );
            /**Sets  the active view 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActiveView
            (
                NXOpen::Motion::ActiveView activeView /** activeview */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
