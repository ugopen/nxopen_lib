#ifndef NXOpen_CAE_RESPONSESIMULATION_FREQUENCYDEFINITION_HXX_INCLUDED
#define NXOpen_CAE_RESPONSESIMULATION_FREQUENCYDEFINITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResponseSimulation_FrequencyDefinition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class FrequencyDefinition;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class _FrequencyDefinitionBuilder;
            class FrequencyDefinitionImpl;
            /** Represents the frequency setting to perform FRF evaluation 
             <br>  Created in NX5.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  FrequencyDefinition : public TaggedObject
            {
                /** Specifies the method for interpolation */
                public: enum InterpolationMethod
                {
                    InterpolationMethodLogLog/** log log */ ,
                    InterpolationMethodLogLinear/** log linear */ ,
                    InterpolationMethodLinearLinear/** linear linear */ 
                };

                /** Specifies the method to define frequency */
                public: enum Definition
                {
                    DefinitionRange/** range */ ,
                    DefinitionModalContribution/** modal contribution */ 
                };

                private: FrequencyDefinitionImpl * m_frequencydefinition_impl;
                private: friend class  _FrequencyDefinitionBuilder;
                protected: FrequencyDefinition();
                public: ~FrequencyDefinition();
                /**Returns  the method to define frequency
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::FrequencyDefinition::Definition EvaluationType
                (
                );
                /**Sets  the method to define frequency
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetEvaluationType
                (
                    NXOpen::CAE::ResponseSimulation::FrequencyDefinition::Definition type /** type */ 
                );
                /**Returns  the start value of frequency range. Only available when the frequency is defined
                        by @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange@endlink  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double StartValue
                (
                );
                /**Sets  the start value of frequency range. Only available when the frequency is defined
                        by @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange@endlink  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetStartValue
                (
                    double startValue /** start value */ 
                );
                /**Returns  the end value of frequency range. Only available when the frequency is defined 
                        by @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange@endlink  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double EndValue
                (
                );
                /**Sets  the end value of frequency range. Only available when the frequency is defined 
                        by @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange@endlink  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetEndValue
                (
                    double endValue /** end value */ 
                );
                /**Returns  the additional spectral lines. Only available when frequency is defined 
                        by @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange@endlink  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: int SpectralLine
                (
                );
                /**Sets  the additional spectral lines. Only available when frequency is defined 
                        by @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange@endlink  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSpectralLine
                (
                    int spectralLines /** spectral lines */ 
                );
                /**Returns  the interpolation method. Only available when the frequency is defined by
                        @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange@endlink  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::FrequencyDefinition::InterpolationMethod InterpolationMethodOption
                (
                );
                /**Sets  the interpolation method. Only available when the frequency is defined by
                        @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange CAE::ResponseSimulation::FrequencyDefinition::DefinitionRange@endlink  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetInterpolationMethodOption
                (
                    NXOpen::CAE::ResponseSimulation::FrequencyDefinition::InterpolationMethod interpolationMethod /** interpolation method */ 
                );
                /** Returns frequency values to perform FRF evaluation. Only available when the frequency definition 
                        method is @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionModalContribution CAE::ResponseSimulation::FrequencyDefinition::DefinitionModalContribution@endlink   @return  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: std::vector<double> GetFrequencies
                (
                );
                /** Sets the frequency values to perform FRF evaluation. Only available when the frequency definition 
                        method is @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionModalContribution CAE::ResponseSimulation::FrequencyDefinition::DefinitionModalContribution@endlink  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetFrequencies
                (
                    const std::vector<double> & frequencies /** frequencies */ 
                );
                /**Returns  the option for generating maximum contributors or not. Only available when
                        frequency definition metod is @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionModalContribution CAE::ResponseSimulation::FrequencyDefinition::DefinitionModalContribution@endlink  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool GenerateMaximumContributors
                (
                );
                /**Sets  the option for generating maximum contributors or not. Only available when
                        frequency definition metod is @link CAE::ResponseSimulation::FrequencyDefinition::DefinitionModalContribution CAE::ResponseSimulation::FrequencyDefinition::DefinitionModalContribution@endlink  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetGenerateMaximumContributors
                (
                    bool generateMaximumContributors /** generatemaximumcontributors */ 
                );
                /**Returns  the number of contributors. Only available when maximu contributors
                         will be generated 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: int ContributorNumber
                (
                );
                /**Sets  the number of contributors. Only available when maximu contributors
                         will be generated 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetContributorNumber
                (
                    int contributorNumber /** contributornumber */ 
                );
                /**Returns  the option to normalize results. Only available when maximu contributors
                         will be generated 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool NormalizeResults
                (
                );
                /**Sets  the option to normalize results. Only available when maximu contributors
                         will be generated 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetNormalizeResults
                (
                    bool normalizeResults /** normalizeresults */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
