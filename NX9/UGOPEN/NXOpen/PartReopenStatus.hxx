#ifndef NXOpen_PARTREOPENSTATUS_HXX_INCLUDED
#define NXOpen_PARTREOPENSTATUS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PartReopenStatus.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class PartReopenStatus;
    class PartReopenStatusImpl;
    /** Contains information about a part after an attempt was made to
    reopen it. Instances of this class are retrieved from
    @link PartReopenReport::GetStatuses PartReopenReport::GetStatuses@endlink . 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  PartReopenStatus : public TransientObject
    {
        private: PartReopenStatusImpl * m_partreopenstatus_impl;
        /// \cond NX_NO_DOC 
        public: explicit PartReopenStatus(void *ptr);
        /// \endcond 
        /** Free resources associated with the instance. After this method
            is called, it is illegal to use the object.  In .NET, this method
            is automatically called when the object is deleted by the garbage
            collector. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~PartReopenStatus();
        /**Returns  the name of the part before it was reopened. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString BeforeName
        (
        );
        /**Returns  the name of the part after it was reopened. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString AfterName
        (
        );
        /**Returns  whether or not the part was closed. If true, then the part could not
            be closed because it was modified in the session, and no flag was set
            to allow reopening of parts modified in the session. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool CouldNotClose
        (
        );
        /**Returns  whether part is modified on disk. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool ModifiedOnDisk
        (
        );
        /**Returns  whether part is modified in session. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool ModifiedInSession
        (
        );
        /**Returns  the load status value from part load. This will be 0 if the load was
            successful. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: int LoadStatus
        (
        );
        /**Returns  the description of the load status value from part load. This will
            be a blank string if the load was successful. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString LoadStatusDescription
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
