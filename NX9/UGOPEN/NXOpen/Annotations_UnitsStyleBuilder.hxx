#ifndef NXOpen_ANNOTATIONS_UNITSSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_UNITSSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_UnitsStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_UnitsStyleBuilder.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class UnitsStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _UnitsStyleBuilderBuilder;
        class UnitsStyleBuilderImpl;
        /**
            Represents a @link Annotations::UnitsStyleBuilder Annotations::UnitsStyleBuilder@endlink .
            This class queries and sets units and format preferences when creating or editing a dimension. 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  UnitsStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: UnitsStyleBuilderImpl * m_unitsstylebuilder_impl;
            private: friend class  _UnitsStyleBuilderBuilder;
            protected: UnitsStyleBuilder();
            public: ~UnitsStyleBuilder();
            /**Returns  the decimal point character 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DecimalPointCharacter DecimalPointCharacter
            (
            );
            /**Sets  the decimal point character 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDecimalPointCharacter
            (
                NXOpen::Annotations::DecimalPointCharacter decimalPointCharacter /** decimalpointcharacter */ 
            );
            /**Returns  the dimension tolerance placement relative to the dimension value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TolerancePlacement DimensionTolerancePlacement
            (
            );
            /**Sets  the dimension tolerance placement relative to the dimension value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionTolerancePlacement
            (
                NXOpen::Annotations::TolerancePlacement dimensionTolerancePlacement /** dimensiontoleranceplacement */ 
            );
            /**Returns  the display trailing zeros setting for linear dimensions and tolerances 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayTrailingZeros
            (
            );
            /**Sets  the display trailing zeros setting for linear dimensions and tolerances 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDisplayTrailingZeros
            (
                bool displayTrailingZeros /** displaytrailingzeros */ 
            );
            /**Returns  the display leading dimension zeros setting for
                        linear dimensions and fractional angular dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayLeadingDimensionZeros
            (
            );
            /**Sets  the display leading dimension zeros setting for
                        linear dimensions and fractional angular dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDisplayLeadingDimensionZeros
            (
                bool displayLeadingDimensionZeros /** displayleadingdimensionzeros */ 
            );
            /**Returns  the display leading tolerance zeros setting for
                        linear dimensions and fractional angular dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayLeadingToleranceZeros
            (
            );
            /**Sets  the display leading tolerance zeros setting for
                        linear dimensions and fractional angular dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDisplayLeadingToleranceZeros
            (
                bool displayLeadingToleranceZeros /** displayleadingtolerancezeros */ 
            );
            /**Returns  the decimal and fraction text format for nonmetric dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DimensionTextFormat LinearFractionType
            (
            );
            /**Sets  the decimal and fraction text format for nonmetric dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLinearFractionType
            (
                NXOpen::Annotations::DimensionTextFormat linearFractionType /** linearfractiontype */ 
            );
            /**Returns  the dimension linear units 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DimensionUnit DimensionLinearUnits
            (
            );
            /**Sets  the dimension linear units 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionLinearUnits
            (
                NXOpen::Annotations::DimensionUnit dimensionLinearUnits /** dimensionlinearunits */ 
            );
            /**Returns  the dimension angular format and precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AngularDimensionFormat DimensionAngularFormat
            (
            );
            /**Sets  the dimension angular format and precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionAngularFormat
            (
                NXOpen::Annotations::AngularDimensionFormat dimensionAngularFormat /** dimensionangularformat */ 
            );
            /**Returns  the tolerance angular format and precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AngularDimensionFormat ToleranceAngularFormat
            (
            );
            /**Sets  the tolerance angular format and precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceAngularFormat
            (
                NXOpen::Annotations::AngularDimensionFormat toleranceAngularFormat /** toleranceangularformat */ 
            );
            /**Returns  the angular suppress zeros option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AngularSuppressZeros AngularSuppressZeros
            (
            );
            /**Sets  the angular suppress zeros option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAngularSuppressZeros
            (
                NXOpen::Annotations::AngularSuppressZeros angularSuppressZeros /** angularsuppresszeros */ 
            );
            /**Returns  the dual dimension format.
                        This specifies both the creation and position of the dual dimension 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DualDimensionPlacement DualDimensionFormat
            (
            );
            /**Sets  the dual dimension format.
                        This specifies both the creation and position of the dual dimension 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualDimensionFormat
            (
                NXOpen::Annotations::DualDimensionPlacement dualDimensionFormat /** dualdimensionformat */ 
            );
            /**Returns  the dual dimension units 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DimensionUnit DualDimensionUnits
            (
            );
            /**Sets  the dual dimension units 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualDimensionUnits
            (
                NXOpen::Annotations::DimensionUnit dualDimensionUnits /** dualdimensionunits */ 
            );
            /**Returns  the decimal and fraction format for dual nonmetric dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DimensionTextFormat DualFractionType
            (
            );
            /**Sets  the decimal and fraction format for dual nonmetric dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualFractionType
            (
                NXOpen::Annotations::DimensionTextFormat dualFractionType /** dualfractiontype */ 
            );
            /**Returns  the convert primary tolerance option.
                        A value of True means that the dual dimension tolerance is automatically
                        set by converting the primary dimension tolerance value to the dual dimension units 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ConvertPrimaryTolerance
            (
            );
            /**Sets  the convert primary tolerance option.
                        A value of True means that the dual dimension tolerance is automatically
                        set by converting the primary dimension tolerance value to the dual dimension units 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetConvertPrimaryTolerance
            (
                bool convertPrimaryTolerance /** convertprimarytolerance */ 
            );
            /**Returns  the fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool FractionalDisplay
            (
            );
            /**Sets  the fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFractionalDisplay
            (
                bool fractionalDisplay /** fractionaldisplay */ 
            );
            /**Returns  the numerator degrees of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int NumeratorDegrees
            (
            );
            /**Sets  the numerator degrees of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNumeratorDegrees
            (
                int numeratorDegrees /** numeratordegrees */ 
            );
            /**Returns  the numerator minutes of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int NumeratorMinutes
            (
            );
            /**Sets  the numerator minutes of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNumeratorMinutes
            (
                int numeratorMinutes /** numeratorminutes */ 
            );
            /**Returns  the numerator seconds of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int NumeratorSeconds
            (
            );
            /**Sets  the numerator seconds of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNumeratorSeconds
            (
                int numeratorSeconds /** numeratorseconds */ 
            );
            /**Returns  the numerator fractional degrees of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double NumeratorFraction
            (
            );
            /**Sets  the numerator fractional degrees of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNumeratorFraction
            (
                double numeratorFraction /** numeratorfraction */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
