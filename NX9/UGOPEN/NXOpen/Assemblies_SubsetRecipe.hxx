#ifndef NXOpen_ASSEMBLIES_SUBSETRECIPE_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_SUBSETRECIPE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_SubsetRecipe.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_AttributeSearchTerm.hxx>
#include <NXOpen/Assemblies_BoxSearchTerm.hxx>
#include <NXOpen/Assemblies_ExplicitSearchTerm.hxx>
#include <NXOpen/Assemblies_GroupSearchTerm.hxx>
#include <NXOpen/Assemblies_Partition.hxx>
#include <NXOpen/Assemblies_PartitionSearchTerm.hxx>
#include <NXOpen/Assemblies_PlaneSearchTerm.hxx>
#include <NXOpen/Assemblies_ProximitySearchTerm.hxx>
#include <NXOpen/Assemblies_SearchResultElement.hxx>
#include <NXOpen/Assemblies_SearchTerm.hxx>
#include <NXOpen/Assemblies_SearchTermBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        class SubsetRecipe;
    }
    namespace Assemblies
    {
        class SubsetBuilder;
    }
    namespace Assemblies
    {
        class SearchTerm;
    }
    namespace Assemblies
    {
        class AttributeSearchTerm;
    }
    namespace Assemblies
    {
        class BoxSearchTerm;
    }
    namespace Assemblies
    {
        class ExplicitSearchTerm;
    }
    namespace Assemblies
    {
        class GroupSearchTerm;
    }
    namespace Assemblies
    {
        class Partition;
    }
    namespace Assemblies
    {
        class PartitionSearchTerm;
    }
    namespace Assemblies
    {
        class PlaneSearchTerm;
    }
    namespace Assemblies
    {
        class ProximitySearchTerm;
    }
    namespace Assemblies
    {
        class SearchResultElement;
    }
    namespace Assemblies
    {
        class SearchTermBuilder;
    }
    namespace Assemblies
    {
        class SubsetRecipeImpl;
        /**
                A subset recipe is used by a @link Assemblies::SubsetBuilder Assemblies::SubsetBuilder@endlink  to collect @link SearchTerm SearchTerm@endlink s.
                The search terms specify the search that defines the contents of a @link Assemblies::Subset Assemblies::Subset@endlink .
             <br> To obtain an instance of this class, refer to @link Assemblies::SubsetBuilder  Assemblies::SubsetBuilder @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_ASSEMBLIESEXPORT  SubsetRecipe : public TaggedObjectCollection
        {
            private: SubsetRecipeImpl * m_subsetrecipe_impl;
            private: NXOpen::Assemblies::SubsetBuilder* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SubsetRecipe(NXOpen::Assemblies::SubsetBuilder *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SubsetRecipe();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Assemblies::SubsetRecipe::iterator::copy,initializer)
            class iterator
            {
            public:
                /** Value type associated with iterator*/ 

                typedef Assemblies::SearchTerm * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                { // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Assemblies::SubsetRecipe *context) : m_context(context), m_current(NULL_TAG)
                { // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_ASSEMBLIESEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_ASSEMBLIESEXPORT  void next();
                NXOpen::Assemblies::SubsetRecipe *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the @link SearchTerm SearchTerm@endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.
                
                    An exception will be thrown if no object can be found with the given journal identifier.  @return  Search term found, or null if no such search term exists.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::SearchTerm * FindObject
            (
                const NXString & journalIdentifier /** Name of the search term to be found */
            );
            /** Finds the @link SearchTerm SearchTerm@endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.
                
                    An exception will be thrown if no object can be found with the given journal identifier.  @return  Search term found, or null if no such search term exists.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            NXOpen::Assemblies::SearchTerm * FindObject
            (
                const char * journalIdentifier /** Name of the search term to be found */
            );
            /** Creates a @link Assemblies::ExplicitSearchTerm Assemblies::ExplicitSearchTerm@endlink  and
                        adds it to the recipe at the end of the list of search terms.
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::ExplicitSearchTerm * CreateExplicitSearchTerm
            (
                NXOpen::Assemblies::SearchTerm::SearchTermLogicType logicType /** logictype */ ,
                NXOpen::Assemblies::SearchResultElement * searchResultElement /** searchresultelement */ 
            );
            /** Creates a @link Assemblies::GroupSearchTerm Assemblies::GroupSearchTerm@endlink  of @link Assemblies::ExplicitSearchTerm Assemblies::ExplicitSearchTerm@endlink s and
                        adds it to the recipe at the end of the list of search terms.
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::GroupSearchTerm * CreateExplicitSearchTermGroup
            (
                NXOpen::Assemblies::SearchTerm::SearchTermLogicType logicType /** logictype */ ,
                const std::vector<NXOpen::Assemblies::SearchResultElement *> & searchResultElements /** searchresultelements */ 
            );
            /** Add a @link Assemblies::SearchTermBuilder Assemblies::SearchTermBuilder@endlink  to the recipe.  When this search term builder
                        is committed the search term will be added to the recipe at the end of the list of search terms.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void AddSearchTermBuilder
            (
                NXOpen::Assemblies::SearchTermBuilder * searchTermBuilder /** searchtermbuilder */ 
            );
            /** Creates a @link Assemblies::BoxSearchTerm Assemblies::BoxSearchTerm@endlink  and
                        adds it to the recipe at the end of the list of search terms.
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::BoxSearchTerm * CreateBoxSearchTerm
            (
                NXOpen::Assemblies::SearchTerm::SearchTermLogicType logicType /** logictype */ ,
                NXOpen::Assemblies::BoxSearchTerm::BoxOverlapLogicType overlapType /** overlaptype */ ,
                const NXOpen::Point3d & bottomCorner /** Vertex of zone in workset part coordinates */,
                const NXOpen::Point3d & topCorner /** Opposite vertex of zone in workset part coordinates */,
                bool trueShapeRefinement /** Apply TrueShape refinement to volume search */
            );
            /** Creates a @link Assemblies::ProximitySearchTerm Assemblies::ProximitySearchTerm@endlink  and
                        adds it to the recipe at the end of the list of search terms.
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::ProximitySearchTerm * CreateProximitySearchTerm
            (
                NXOpen::Assemblies::SearchTerm::SearchTermLogicType logicType /** logictype */ ,
                const std::vector<NXOpen::Assemblies::SearchResultElement *> & seeds /** seeds */ ,
                double distance /** Distance in workset part units */,
                bool trueShapeRefinement /** Apply TrueShape refinement to proximity search */
            );
            /** Creates a @link Assemblies::PlaneSearchTerm Assemblies::PlaneSearchTerm@endlink  and
                        adds it to the recipe at the end of the list of search terms.
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::PlaneSearchTerm * CreatePlaneSearchTerm
            (
                NXOpen::Assemblies::SearchTerm::SearchTermLogicType logicType /** logictype */ ,
                NXOpen::Assemblies::PlaneSearchTerm::PlaneOverlapLogicType overlapType /** overlaptype */ ,
                const NXOpen::Vector3d & normal /** Unitized plane normal */,
                double displacement /** Displacement in workset part units */,
                const NXOpen::Point3d & pointOnPlane /** Point On Plane in workset part coordinates */,
                bool trueShapeRefinement /** Apply TrueShape refinement to plane search */
            );
            /** Creates a @link Assemblies::AttributeSearchTerm Assemblies::AttributeSearchTerm@endlink  and
                        adds it to the recipe at the end of the list of search terms.
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::AttributeSearchTerm * CreateAttributeSearchTerm
            (
                NXOpen::Assemblies::SearchTerm::SearchTermLogicType logicType /** logictype */ ,
                const NXString & queryName /** Name of the saved query upon which this search term is based */,
                std::vector<NXString> & entries /** search criteria entries */,
                std::vector<NXString> & values /** search criteria values */
            );
            /** Creates a @link Assemblies::AttributeSearchTerm Assemblies::AttributeSearchTerm@endlink  and
                        adds it to the recipe at the end of the list of search terms.
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            NXOpen::Assemblies::AttributeSearchTerm * CreateAttributeSearchTerm
            (
                NXOpen::Assemblies::SearchTerm::SearchTermLogicType logicType /** logictype */ ,
                const char * queryName /** Name of the saved query upon which this search term is based */,
                std::vector<NXString> & entries /** search criteria entries */,
                std::vector<NXString> & values /** search criteria values */
            );
            /** Creates a @link Assemblies::PartitionSearchTerm Assemblies::PartitionSearchTerm@endlink  and
                        adds it to the recipe at the end of the list of search terms.
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::PartitionSearchTerm * CreatePartitionSearchTerm
            (
                NXOpen::Assemblies::SearchTerm::SearchTermLogicType logicType /** logictype */ ,
                NXOpen::Assemblies::Partition * partition /** The partition upon which this search term is based */
            );
            /** Creates a @link Assemblies::GroupSearchTerm Assemblies::GroupSearchTerm@endlink  of @link Assemblies::PartitionSearchTerm Assemblies::PartitionSearchTerm@endlink s and
                        adds it to the recipe at the end of the list of search terms.
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::GroupSearchTerm * CreatePartitionSearchTermGroup
            (
                NXOpen::Assemblies::SearchTerm::SearchTermLogicType logicType /** logictype */ ,
                const std::vector<NXOpen::Assemblies::Partition *> & partitions /** partitions */ 
            );
            /** Move a @link SearchTerm SearchTerm@endlink  up to another location in the recipe.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void MoveUp
            (
                NXOpen::Assemblies::SearchTerm * searchTerm /** searchterm */ 
            );
            /** Move a @link SearchTerm SearchTerm@endlink  down to another location in the recipe.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void MoveDown
            (
                NXOpen::Assemblies::SearchTerm * searchTerm /** searchterm */ 
            );
            /** Put the @link SearchTerm SearchTerm@endlink s in a new @link GroupSearchTerm GroupSearchTerm@endlink .
                        The group is placed in the recipe at the location of the first search term.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void Group
            (
                NXOpen::Assemblies::SearchTerm::SearchTermLogicType logicType /** logictype */ ,
                const std::vector<NXOpen::Assemblies::SearchTerm *> & searchTerms /** searchterms */ 
            );
            /** Any @link GroupSearchTerm GroupSearchTerm@endlink s in the input search terms will be removed
                        from the recipe.  The members of the group will be re-parented as members of the
                        group's parent.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void Ungroup
            (
                const std::vector<NXOpen::Assemblies::SearchTerm *> & searchTerms /** searchterms */ 
            );
            /** Removes the @link SearchTerm SearchTerm@endlink s from the recipe and deletes them.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void DeleteSearchTerms
            (
                const std::vector<NXOpen::Assemblies::SearchTerm *> & searchTerms /** searchterms */ 
            );
            /** Changes the search term logic of each @link SearchTerm SearchTerm@endlink s passed in.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetSearchTermLogic
            (
                NXOpen::Assemblies::SearchTerm::SearchTermLogicType logicType /** logictype */ ,
                const std::vector<NXOpen::Assemblies::SearchTerm *> & searchTerms /** searchterms */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
