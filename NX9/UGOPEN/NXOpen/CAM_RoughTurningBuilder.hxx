#ifndef NXOpen_CAM_ROUGHTURNINGBUILDER_HXX_INCLUDED
#define NXOpen_CAM_ROUGHTURNINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_RoughTurningBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_RoughFinishTurningBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class RoughTurningBuilder;
    }
    namespace CAM
    {
        class CutStrategy;
    }
    namespace CAM
    {
        class FirstPlunge;
    }
    namespace CAM
    {
        class NcmTurnRoughBuilder;
    }
    namespace CAM
    {
        class PostEventsCiBuilder;
    }
    namespace CAM
    {
        class RoughFinishTurningBuilder;
    }
    namespace CAM
    {
        class StepoverBuilder;
    }
    namespace CAM
    {
        class TurnDirection;
    }
    class Point;
    namespace CAM
    {
        class _RoughTurningBuilderBuilder;
        class RoughTurningBuilderImpl;
        /** Represents a RoughTurning Builder  <br> To create a new instance of this class, use @link CAM::OperationCollection::CreateRoughTurningBuilder  CAM::OperationCollection::CreateRoughTurningBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  RoughTurningBuilder : public CAM::RoughFinishTurningBuilder
        {
            /** the Part Off Position Mode types 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: enum PartOffPositionModeTypes
            {
                PartOffPositionModeTypesAutomatic/** Part Off Position Mode: Automatic */,
                PartOffPositionModeTypesSpecify/** Part Off Position Mode: Specify */
            };

            /** the Part Off Depth Mode types 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: enum PartOffDepthModeTypes
            {
                PartOffDepthModeTypesDivide/** Part Off Depth Mode: Divide */,
                PartOffDepthModeTypesCleanFirstWall/** Part Off Depth Mode: Clean First Wall */,
                PartOffDepthModeTypesCleanBothWalls/** Part Off Depth Mode: Clean Both Walls */,
                PartOffDepthModeTypesStock/** Part Off Depth Mode: Stock */,
                PartOffDepthModeTypesDistance/** Part Off Depth Mode: Distance */
            };

            /** the Reversal Mode types 
             <br>  Created in NX6.0.0.  <br>  
            */
            public: enum ReversalModeTypes
            {
                ReversalModeTypesAsLevel/** Reversal mode: As Level */,
                ReversalModeTypesInverse/** Reversal mode: Inverse */,
                ReversalModeTypesClosest/** Reversal mode: Closest */,
                ReversalModeTypesCutLater/** Reversal mode: Cut Later */,
                ReversalModeTypesOmit/** Reversal mode: Omit */
            };

            /** the Cleanup types 
             <br>  Created in NX6.0.0.  <br>  
            */
            public: enum CleanupTypes
            {
                CleanupTypesNone/** Cleanup mode: None */,
                CleanupTypesAll/** Cleanup mode: All */,
                CleanupTypesSteepOnly/** Cleanup mode: Steep only */,
                CleanupTypesAllButSteep/** Cleanup mode: All but steep */,
                CleanupTypesLevelOnly/** Cleanup mode: Level only */,
                CleanupTypesAllButLevel/** Cleanup mode: All but level */,
                CleanupTypesDownOnly/** Cleanup mode: Down only */,
                CleanupTypesPerReversal/** Cleanup mode: Per reversal */
            };

            /** the Level Depth Mode types 
             <br>  Created in NX6.0.0.  <br>  
            */
            public: enum LevelDepthModeTypes
            {
                LevelDepthModeTypesFromTool/** Level depth mode: From Tool */,
                LevelDepthModeTypesSpecify/** Level depth mode: Specify */
            };

            private: RoughTurningBuilderImpl * m_roughturningbuilder_impl;
            private: friend class  _RoughTurningBuilderBuilder;
            protected: RoughTurningBuilder();
            public: ~RoughTurningBuilder();
            /**Returns  the Cut Strategy 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutStrategy * CutStrategy
            (
            );
            /**Returns  the Rough Direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TurnDirection * Direction
            (
            );
            /**Returns  the Part Off Position Mode 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughTurningBuilder::PartOffPositionModeTypes PartOffPositionMode
            (
            );
            /**Sets  the Part Off Position Mode 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPartOffPositionMode
            (
                NXOpen::CAM::RoughTurningBuilder::PartOffPositionModeTypes partOffPositionMode /** the part off position mode */
            );
            /**Returns  the Part Off Position Point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PartOffPositionPoint
            (
            );
            /**Sets  the Part Off Position Point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPartOffPositionPoint
            (
                NXOpen::Point * partOffPositionPoint /** the part off position point */
            );
            /**Returns  the Part Off Depth Mode 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughTurningBuilder::PartOffDepthModeTypes PartOffDepthMode
            (
            );
            /**Sets  the Part Off Depth Mode 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPartOffDepthMode
            (
                NXOpen::CAM::RoughTurningBuilder::PartOffDepthModeTypes partOffDepthMode /** the part off depth mode */
            );
            /**Returns  the Part Off Depth Value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double PartOffDepthValue
            (
            );
            /**Sets  the Part Off Depth Value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPartOffDepthValue
            (
                double partOffDepthValue /** the part off depth value */
            );
            /**Returns  the Part Off Events 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::PostEventsCiBuilder * PartOffEvents
            (
            );
            /**Returns  the Reversal Mode 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughTurningBuilder::ReversalModeTypes ReversalMode
            (
            );
            /**Sets  the Reversal Mode 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReversalMode
            (
                NXOpen::CAM::RoughTurningBuilder::ReversalModeTypes reversalMode /** the reversal mode */
            );
            /**Returns  the Cleanup
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughTurningBuilder::CleanupTypes Cleanup
            (
            );
            /**Sets  the Cleanup
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCleanup
            (
                NXOpen::CAM::RoughTurningBuilder::CleanupTypes cleanupMode /** the cleanup type */
            );
            /**Returns  the Level Depth Mode 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughTurningBuilder::LevelDepthModeTypes LevelDepthMode
            (
            );
            /**Sets  the Level Depth Mode 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLevelDepthMode
            (
                NXOpen::CAM::RoughTurningBuilder::LevelDepthModeTypes levelDepthMode /** the level depth mode */
            );
            /**Returns  the level depth 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double LevelDepth
            (
            );
            /**Sets  the level depth 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLevelDepth
            (
                double levelDepth /** the level depth */
            );
            /**Returns  the First Plunge 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::FirstPlunge * FirstPlunge
            (
            );
            /**Returns  the Safe Distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double SafeDistance
            (
            );
            /**Sets  the Safe Distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSafeDistance
            (
                double safeDistanceValue /** the safe distance */
            );
            /**Returns  the Stepover
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::StepoverBuilder * Stepover
            (
            );
            /**Returns  the non-cutting builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmTurnRoughBuilder * NonCuttingBuilder
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
