#ifndef NXOpen_OPTIMIZATION_OPTIMIZATIONBUILDER_HXX_INCLUDED
#define NXOpen_OPTIMIZATION_OPTIMIZATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Optimization_OptimizationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Optimization_OptimizationBuilder.hxx>
#include <NXOpen/libnxopencpp_optimization_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Optimization
    {
        class OptimizationBuilder;
    }
    class Builder;
    class NXObject;
    namespace Optimization
    {
        class _OptimizationBuilderBuilder;
        class OptimizationBuilderImpl;
        /** Represents a @link Optimization::OptimizationBuilder Optimization::OptimizationBuilder@endlink   <br> To create a new instance of this class, use @link Optimization::OptimizationCollection::CreateOptimizationBuilder  Optimization::OptimizationCollection::CreateOptimizationBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_OPTIMIZATIONEXPORT  OptimizationBuilder : public Builder
        {
            /** Optimization type for objective */
            public: enum OptimizationTargetType
            {
                OptimizationTargetTypeMinimum/** Target is minimum value of design objective */,
                OptimizationTargetTypeMaximum/** Target is maximum value of design objective */,
                OptimizationTargetTypeTarget/** Target is specified value of design objective */
            };

            /** Attribute type */
            public: enum OptimizationAttributeType
            {
                OptimizationAttributeTypeExpression/** Expression attribute */,
                OptimizationAttributeTypeKFAttribute/** KF attribute */,
                OptimizationAttributeTypeGeometryParameter/** Geometry/feature parameter attribute*/
            };

            /** Constraint limit type */
            public: enum OptimizationConstraintLimitType
            {
                OptimizationConstraintLimitTypeUpper/** Upper limit */,
                OptimizationConstraintLimitTypeLower/** Lower limit */
            };

            /** Algorithm type */
            public: enum OptimizationAlgorithmType
            {
                OptimizationAlgorithmTypeSimulatedAnnealing/** Simulated annealing */,
                OptimizationAlgorithmTypeGlobalSimplex/** Global simplex */,
                OptimizationAlgorithmTypePowell/** Powell */,
                OptimizationAlgorithmTypeConjugateGradient/** Conjugate gradient */,
                OptimizationAlgorithmTypeLexicographic/** Lexicographic */,
                OptimizationAlgorithmTypePatternSwarm/** Pattern swarm */
            };

            /** Convergence speed type */
            public: enum OptimizationConvergenceSpeedType
            {
                OptimizationConvergenceSpeedTypeSlow/** Slow convergence speed */,
                OptimizationConvergenceSpeedTypeMedium/** Medium convergence speed*/,
                OptimizationConvergenceSpeedTypeFast/** Fast convergence speed*/,
                OptimizationConvergenceSpeedTypeInfinite/** Infinite convergence speed*/
            };

             /** Defined Objective Structure */
            public:
            struct  OptimizationObjective
            {
                public: /** Attribute name */NXString AttributeName;
                public: /** Object which the attribute belongs to, it makes sense with geometry design variable type*/NXOpen::NXObject * AttributeObject;
                public: /** Objectibe type */NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType ObjectiveType;
                public: /** Value of objective target */double ObjectiveTargetValue;
                public: OptimizationObjective() :
                    AttributeName(),
                    AttributeObject(),
                    ObjectiveType((NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType)0),
                    ObjectiveTargetValue()
                {
                }
                /** Constructor for the OptimizationObjective struct. */ 
                public: OptimizationObjective(const NXString &attributeNameInitial /** Attribute name */, 
                        NXOpen::NXObject * attributeObjectInitial /** Object which the attribute belongs to, it makes sense with geometry design variable type*/, 
                        NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType objectiveTypeInitial /** Objectibe type */, 
                        double objectiveTargetValueInitial /** Value of objective target */) :
                    AttributeName(attributeNameInitial),
                    AttributeObject(attributeObjectInitial),
                    ObjectiveType(objectiveTypeInitial),
                    ObjectiveTargetValue(objectiveTargetValueInitial)
                {
                }
            };

             /** Defined variable structure */
            public:
            struct  OptimizationVariable
            {
                public: /** Attribute name */NXString AttributeName;
                public: /** Object which the attribute belongs to, it makes sense with geometry design variable type*/NXOpen::NXObject * AttributeObject;
                public: /** Variable type */NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType VariableType;
                public: /** Lower limit value */double VariableLowerLimitValue;
                public: /** Upper limit value */double VariableUpperLimitValue;
                public: OptimizationVariable() :
                    AttributeName(),
                    AttributeObject(),
                    VariableType((NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType)0),
                    VariableLowerLimitValue(),
                    VariableUpperLimitValue()
                {
                }
                /** Constructor for the OptimizationVariable struct. */ 
                public: OptimizationVariable(const NXString &attributeNameInitial /** Attribute name */, 
                        NXOpen::NXObject * attributeObjectInitial /** Object which the attribute belongs to, it makes sense with geometry design variable type*/, 
                        NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType variableTypeInitial /** Variable type */, 
                        double variableLowerLimitValueInitial /** Lower limit value */, 
                        double variableUpperLimitValueInitial /** Upper limit value */) :
                    AttributeName(attributeNameInitial),
                    AttributeObject(attributeObjectInitial),
                    VariableType(variableTypeInitial),
                    VariableLowerLimitValue(variableLowerLimitValueInitial),
                    VariableUpperLimitValue(variableUpperLimitValueInitial)
                {
                }
            };

             /** Defined constraint structure */
            public:
            struct  OptimizationConstraint
            {
                public: /** Attribute name */NXString AttributeName;
                public: /** Object which the attribute belongs to, it makes sense with geometry design variable type*/NXOpen::NXObject * AttributeObject;
                public: /** Constraint type */NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType ConstraintType;
                public: /** Lower limit value */double ConstraintLowerLimitValue;
                public: /** Upper limit value */double ConstraintUpperLimitValue;
                public: /** constraint limit type, lower type or upper type*/NXOpen::Optimization::OptimizationBuilder::OptimizationConstraintLimitType ConstraintLimitType;
                public: OptimizationConstraint() :
                    AttributeName(),
                    AttributeObject(),
                    ConstraintType((NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType)0),
                    ConstraintLowerLimitValue(),
                    ConstraintUpperLimitValue(),
                    ConstraintLimitType((NXOpen::Optimization::OptimizationBuilder::OptimizationConstraintLimitType)0)
                {
                }
                /** Constructor for the OptimizationConstraint struct. */ 
                public: OptimizationConstraint(const NXString &attributeNameInitial /** Attribute name */, 
                        NXOpen::NXObject * attributeObjectInitial /** Object which the attribute belongs to, it makes sense with geometry design variable type*/, 
                        NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType constraintTypeInitial /** Constraint type */, 
                        double constraintLowerLimitValueInitial /** Lower limit value */, 
                        double constraintUpperLimitValueInitial /** Upper limit value */, 
                        NXOpen::Optimization::OptimizationBuilder::OptimizationConstraintLimitType constraintLimitTypeInitial /** constraint limit type, lower type or upper type*/) :
                    AttributeName(attributeNameInitial),
                    AttributeObject(attributeObjectInitial),
                    ConstraintType(constraintTypeInitial),
                    ConstraintLowerLimitValue(constraintLowerLimitValueInitial),
                    ConstraintUpperLimitValue(constraintUpperLimitValueInitial),
                    ConstraintLimitType(constraintLimitTypeInitial)
                {
                }
            };

            private: OptimizationBuilderImpl * m_optimizationbuilder_impl;
            private: friend class  _OptimizationBuilderBuilder;
            protected: OptimizationBuilder();
            public: ~OptimizationBuilder();
            /**Returns  the study name which is unique in one part 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StudyName
            (
            );
            /**Sets  the study name which is unique in one part 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStudyName
            (
                const NXString & studyName /** studyname */ 
            );
            /**Sets  the study name which is unique in one part 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetStudyName
            (
                const char * studyName /** studyname */ 
            );
            /**Returns  the optimization type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Optimization::OptimizationBuilder::OptimizationTargetType OptimizationType
            (
            );
            /**Sets  the optimization type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptimizationType
            (
                NXOpen::Optimization::OptimizationBuilder::OptimizationTargetType optimizationType /** optimizationtype */ 
            );
            /**Returns  the algorithm type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Optimization::OptimizationBuilder::OptimizationAlgorithmType AlgorithmType
            (
            );
            /**Sets  the algorithm type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAlgorithmType
            (
                NXOpen::Optimization::OptimizationBuilder::OptimizationAlgorithmType algorithmType /** algorithmtype */ 
            );
            /** Run optimization process 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void RunOptimization
            (
            );
            /**Returns  the convergence speed type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Optimization::OptimizationBuilder::OptimizationConvergenceSpeedType ConvergenceSpeedType
            (
            );
            /**Sets  the convergence speed type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetConvergenceSpeedType
            (
                NXOpen::Optimization::OptimizationBuilder::OptimizationConvergenceSpeedType convergenceSpeedType /** convergencespeedtype */ 
            );
            /**Returns  the maximum number of updates allowed without converging to a solutionthe maximum iterations time
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int MaxNumberIteration
            (
            );
            /**Sets  the maximum number of updates allowed without converging to a solutionthe maximum iterations time
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaxNumberIteration
            (
                int maxNumberIteration /** maxnumberiteration */ 
            );
            /**Returns  the maximum time allowed for this run in seconds 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int MaxTime
            (
            );
            /**Sets  the maximum time allowed for this run in seconds 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaxTime
            (
                int maxTime /** maxtime */ 
            );
            /**Returns  the absolute criteria for optimizer to determine convergence. This value is
                        multiplied by the first objective result,and if the difference in last two 
                        objective results is less than this, then it is converged 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double AbsoluteConvergenceCriteria
            (
            );
            /**Sets  the absolute criteria for optimizer to determine convergence. This value is
                        multiplied by the first objective result,and if the difference in last two 
                        objective results is less than this, then it is converged 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAbsoluteConvergenceCriteria
            (
                double absoluteConvergenceCriteria /** absoluteconvergencecriteria */ 
            );
            /**Returns  the relative criteria for optimizer
                        to determine convergence.  If one minus
                        the ratio of the last two iterations is
                        less than this value, the solution is converged 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double RelativeConvergenceCriteria
            (
            );
            /**Sets  the relative criteria for optimizer
                        to determine convergence.  If one minus
                        the ratio of the last two iterations is
                        less than this value, the solution is converged 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRelativeConvergenceCriteria
            (
                double relativeConvergenceCriteria /** relativeconvergencecriteria */ 
            );
            /**Returns  the property - is update display 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsUpdateDisp
            (
            );
            /**Sets  the property - is update display 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUpdateDisp
            (
                bool isUpdateDisp /** isupdatedisp */ 
            );
            /**Returns  the property - is show graph 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsShowGraph
            (
            );
            /**Sets  the property - is show graph 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowGraph
            (
                bool isShowGraph /** isshowgraph */ 
            );
            /** Returns the objectives  @return  Objectives 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Optimization::OptimizationBuilder::OptimizationObjective> GetOptimizationObjectives
            (
            );
            /** Sets the objectives 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptimizationObjectives
            (
                std::vector<NXString> & attributeNames /** Objective attribute name array   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & attributeObjects /** Objective attribute object array */,
                const std::vector<NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType> & objectiveTypes /** Objective attribute type array */,
                const std::vector<double> & objectiveTargetValues /** Objective target value array */
            );
            /** Returns the variables  @return  Variables 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Optimization::OptimizationBuilder::OptimizationVariable> GetOptimizationVariables
            (
            );
            /** Sets the variables 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptimizationVariables
            (
                std::vector<NXString> & attributeNames /** Variable attribute name array   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & attributeObjects /** Variable attribute object array */,
                const std::vector<NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType> & variableTypes /** Variable attribute type array */,
                const std::vector<double> & variableLowerLimitValue /** Variable lower limit value array */,
                const std::vector<double> & variableUpperLimitValue /** Variable upper limit value array */
            );
            /** Returns the constraints  @return  Constraints 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Optimization::OptimizationBuilder::OptimizationConstraint> GetOptimizationConstraints
            (
            );
            /** Sets the constraints 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptimizationConstraints
            (
                std::vector<NXString> & attributeNames /** Constraint attribute name array   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & attributeObjects /** Constraint attribute type array */,
                const std::vector<NXOpen::Optimization::OptimizationBuilder::OptimizationAttributeType> & constraintTypes /** Constraint attribute type array */,
                const std::vector<double> & constraintLowerLimitValue /** Constraint lower limit value array */,
                const std::vector<double> & constraintUpperLimitValue /** Constraint upper limit value array */,
                const std::vector<NXOpen::Optimization::OptimizationBuilder::OptimizationConstraintLimitType> & constraintLimitType /** Constraint atribute limit type array */
            );
            /** Build all the objectives 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void BuildAllObjectives
            (
            );
            /** Remove all the objectives 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveAllObjectives
            (
            );
            /** Build all the variables 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void BuildAllVariables
            (
            );
            /** Remove all the variables 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveAllVariables
            (
            );
            /** Build all the constraints 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void BuildAllConstraints
            (
            );
            /** Remove all the constraints 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveAllConstraints
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
