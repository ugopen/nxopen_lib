#ifndef NXOpen_PARAMLIBPARAMETER_HXX_INCLUDED
#define NXOpen_PARAMLIBPARAMETER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ParamLibParameter.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ParamLibParameter;
    class BasePropertyTable;
    class NXObject;
    class _ParamLibParameterBuilder;
    class ParamLibParameterImpl;
    /** Represents Parameter 
     <br>  Created in NX1847.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ParamLibParameter : public NXOpen::NXObject
    {
        private: ParamLibParameterImpl * m_paramlibparameter_impl;
        private: friend class  _ParamLibParameterBuilder;
        protected: ParamLibParameter();
        public: ~ParamLibParameter();
        /** Returns the parameter library type this parameter belogns to.
                 @return  the library type for the parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetLibraryType
        (
        );
        /** Returns the parameter type.
                 @return  the type for the parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: int GetParameterType
        (
        );
        /** Returns the parameter id.
                 @return  the id for the parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: int GetId
        (
        );
        /** Sets the parameter id.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetId
        (
            int parameterId /** the id for the parameter */
        );
        /** Returns the parameter category.
                 @return  the category for the parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetCategory
        (
        );
        /** Sets the parameter category.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCategory
        (
            const NXString & parameterCategory /** the category for the parameter */
        );
        /** Sets the parameter category.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void SetCategory
        (
            const char * parameterCategory /** the category for the parameter */
        );
        /** Sets the parameter category using international character set.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetParameterCategory
        (
            const NXString & parameterCategory /** the category for the parameter */
        );
        /** Sets the parameter category using international character set.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void SetParameterCategory
        (
            const char * parameterCategory /** the category for the parameter */
        );
        /** Returns the parameter category using international character set.
                 @return  the category for the parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetParameterCategory
        (
        );
        /** Returns the parameter sub-category.
                 @return  the subcategory for the parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetSubcategory
        (
        );
        /** Sets the parameter sub-category.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSubcategory
        (
            const NXString & parameterSubcategory /** the subcategory for the parameter */
        );
        /** Sets the parameter sub-category.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void SetSubcategory
        (
            const char * parameterSubcategory /** the subcategory for the parameter */
        );
        /** Returns the parameter alternate name.
                 @return  the alternate name for the parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetAlternatename
        (
        );
        /** Sets the parameter alternate name.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAlternatename
        (
            const NXString & parameterAlternatename /** the alternate name for the parameter */
        );
        /** Sets the parameter alternate name.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void SetAlternatename
        (
            const char * parameterAlternatename /** the alternate name for the parameter */
        );
        /** Returns the parameter description.
                 @return  the description for the parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetDescription
        (
        );
        /** Sets the parameter description.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDescription
        (
            const NXString & parameterDescription /** the description for the parameter */
        );
        /** Sets the parameter description.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void SetDescription
        (
            const char * parameterDescription /** the description for the parameter */
        );
        /** Returns true if the parameter is locally defined (not a library/Teamcenter parameter).
                 @return  true if it is a locally defined parameter and false if it is a loaded library parameter or Teamcenter item revision 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsNonlibraryParameter
        (
        );
        /** Returns true if the parameter is loaded from a library (not Teamcenter).
                 @return  true if it a loaded library parameter and false if it is a local parameter or  a Teamcenter item revision 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsLoadedLibraryParameter
        (
        );
        /** Returns true if the parameter is loaded from Teamcenter.
                 @return  true if it a loaded Teamcenter parameter and false if it is a local parameter or a loaded library parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsLoadedTeamcenterParameterItem
        (
        );
        /** Returns the library name if the parameter was loaded from a library.
                 @return  the name of the library or NULL for nonlibrary parameters 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetLibraryName
        (
        );
        /** Returns the Teamcenter item if the parameter was loaded from Teamcenter.
                 @return  the Teamcenter item or NULL for non-Teamcenter parameters 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetTeamcenterParameterItem
        (
        );
        /** Returns the parameter version .
                 @return  the parameter version or NULL for non-versioned parameters 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetVersion
        (
        );
        /** Returns whether the parameter was copied from another parameter.
                 @return  true if it is a copy of another (parent) parameter and false if it is not 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: bool HasParentparameter
        (
        );
        /** Returns the parent parameter that the parameter was copied from.
                 @return  parameter that the parameter was originally copied from (parent) 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameter * GetParentparameter
        (
        );
        /** Returns whether the parameter was copied from a library parameter.
                 @return  true if it is a copy of a library parameter and false if it is not 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: bool HasParentlibraryparameter
        (
        );
        /** Returns the parent libary parameter information.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void GetParentlibraryparameter
        (
            NXString* parentName /** parentname */ ,
            NXString* parentLibraryName /** parentlibraryname */ 
        );
        /** Returns whether the parameter can be modified or not.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: bool GetParameterEditable
        (
        );
        /** Sets whether a parameter can be modified or not. Note: library parameters cannot be set to be able to be modified.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetParameterEditable
        (
            bool isEditable /** iseditable */ 
        );
        /** Removes the parameter assignment from all the objects that has it currently assigned.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void UnassignAllObjects
        (
        );
        /** Finds the objects using this parameter.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void GetUsage
        (
            std::vector<NXOpen::NXObject *> & objects /** the objects using the parameter */
        );
        /** Creates new (copied) parameter with same properties as the original parameter.  The name of the new (copied) parameter will be unique and based on the name of the original parameter.
                 @return  the new parameter copied from this parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameter * Copy
        (
            NXOpen::NXObject * partObject /** object in part where to copy parameter to */
        );
        /** Copies a library parameter to a part.  
                 @return  the new parameter copied from this parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameter * CopyLibParamToPart
        (
            NXOpen::NXObject * partObject /** object in part where to copy parameter to */
        );
        /** Copies a library parameter to a part.  The copied (local) parameter can either be set to be editable or non-editable which determines whether the parameter can be modified or not.
                 @return  the new parameter copied from this parameter 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ParamLibParameter * CopyLibParamToPart
        (
            NXOpen::NXObject * partObject /** object in part where to copy parameter to */,
            bool editable /** when true, creates a local parameter ready for user editting.  When false, it creates an exact copy of a loaded library parameter.  
                                                                                        The difference between loading and copying with this set to false is loading will get the latest library version whereas if the 
                                                                                        library parameter passed in is not synchronized with the latest version, the copy will also not be synchronized with the latest version. */
        );
        /** Deletes a parameter from the part.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void Delete
        (
        );
        /** Deletes User Parameter (UPARAM) Model Property Values from a parameter.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteUserParameterModels
        (
        );
        /** Deletes Orphaned User Parameter (UPARAM) Models and Properties from a parameter. A model or property
                    is considered orphaned if it exists on the parameter, but doesn't exist in the current environment.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteOrphanedUserParameterModels
        (
        );
        /** Re-synchronizes a loaded library parameter to match its latest library definition.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void ResyncWithLibraryDefinition
        (
        );
        /** Re-synchronizes a parameter with its definition. The definition could be a library definition
                    or a parent parameter's (from a copy) definition.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateParameterProperties
        (
        );
        /** Displays the property values for the parameter in the information window. 
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void InfoParameter
        (
        );
        /** Writes the property values for the parameter to a file. 
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void InfoParameterToFile
        (
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const NXString & pcFileName /** the full path including filename of file where the information should be written */
        );
        /** Writes the property values for the parameter to a file. 
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void InfoParameterToFile
        (
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const char * pcFileName /** the full path including filename of file where the information should be written */
        );
        /** Returns the property table that contains the properties for this parameter.
                
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePropertyTable * GetPropTable
        (
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
