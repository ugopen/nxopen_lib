#ifndef NXOpen_FEATURES_SHIPDESIGN_DRAWINGSHEETBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHIPDESIGN_DRAWINGSHEETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShipDesign_DrawingSheetBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_ShipDesign_DrawingTemplateBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace ShipDesign
        {
            class DrawingSheetBuilder;
        }
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class DrawingTemplateBuilder;
        }
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class SectionViewBuilderList;
        }
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class _DrawingSheetBuilderBuilder;
            class DrawingSheetBuilderImpl;
            /** Represents a @link NXOpen::Features::ShipDesign::DrawingSheetBuilder NXOpen::Features::ShipDesign::DrawingSheetBuilder@endlink .
                    This class is used to define a drawing sheet in @link NXOpen::Features::ShipDesign::DrawingPartBuilder NXOpen::Features::ShipDesign::DrawingPartBuilder@endlink , in this case user can define 
                    the drawing sheet manually as he want.
                    Originally, we use a @link NXOpen::Features::ShipDesign::SectionDrawingBuilder NXOpen::Features::ShipDesign::SectionDrawingBuilder@endlink  class and a list of @link NXOpen::Features::ShipDesign::SectionViewBuilder NXOpen::Features::ShipDesign::SectionViewBuilder@endlink  
                    and the command will calculate the arrangement (like how many drawing parts/draw sheets need to create and which view in which sheet ) 
                    automatically. User can't define which view in which sheet.

                     @code 
                    In this project we make user has ability to define the arrangement in a tree like
                    Drawing Part1
                    |- Drawing Sheet1
                          |-View1
                          |-View2
                    |- Drawing Sheet2
                          |- View3
                          |- View4
                    Drawing Part2
                    | - Drawing Sheet1
                          |- View5
                          |- View6
                     @endcode 

                    So we add @link NXOpen::Features::ShipDesign::DrawingPartBuilder NXOpen::Features::ShipDesign::DrawingPartBuilder@endlink  and @link NXOpen::Features::ShipDesign::DrawingSheetBuilder NXOpen::Features::ShipDesign::DrawingSheetBuilder@endlink  between them and make them has structure as below:
                    @link NXOpen::Features::ShipDesign::SectionDrawingBuilder NXOpen::Features::ShipDesign::SectionDrawingBuilder@endlink 
                        @link NXOpen::Features::ShipDesign::DrawingPartBuilder NXOpen::Features::ShipDesign::DrawingPartBuilder@endlink 
                            @link NXOpen::Features::ShipDesign::DrawingSheetBuilder NXOpen::Features::ShipDesign::DrawingSheetBuilder@endlink 
                                @link NXOpen::Features::ShipDesign::SectionViewBuilder NXOpen::Features::ShipDesign::SectionViewBuilder@endlink 

                     <br> To create a new instance of this class, use @link NXOpen::Features::ShipDesign::DrawingPartBuilder::CreateDrawingSheetBuilder  NXOpen::Features::ShipDesign::DrawingPartBuilder::CreateDrawingSheetBuilder @endlink  <br> 
             <br>  Created in NX12.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  DrawingSheetBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
            {
                /** Settings to indicate the view layout type by row and column in hroizontal or vertical order.*/
                public: enum LayoutOptions
                {
                    LayoutOptionsHorizontal/** horizontal */ ,
                    LayoutOptionsVertical/** vertical */ 
                };

                private: DrawingSheetBuilderImpl * m_drawingsheetbuilder_impl;
                private: friend class  _DrawingSheetBuilderBuilder;
                protected: DrawingSheetBuilder();
                public: ~DrawingSheetBuilder();
                /**Returns  the drawing sheet name into which the views should be arranged. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString SheetName
                (
                );
                /**Sets  the drawing sheet name into which the views should be arranged. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetSheetName
                (
                    const NXString & sheetName /** sheetname */ 
                );
                /**Sets  the drawing sheet name into which the views should be arranged. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                void SetSheetName
                (
                    const char * sheetName /** sheetname */ 
                );
                /**Returns  the number of rows into which the views should be arranged on the drawing sheet. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: int RowCount
                (
                );
                /**Sets  the number of rows into which the views should be arranged on the drawing sheet. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetRowCount
                (
                    int rowCount /** rowcount */ 
                );
                /**Returns  the number of column into which the views should be arranged on the drawing sheet. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: int ColumnCount
                (
                );
                /**Sets  the number of column into which the views should be arranged on the drawing sheet. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetColumnCount
                (
                    int columnCount /** columncount */ 
                );
                /**Returns  the view layout option. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::DrawingSheetBuilder::LayoutOptions Layout
                (
                );
                /**Sets  the view layout option. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetLayout
                (
                    NXOpen::Features::ShipDesign::DrawingSheetBuilder::LayoutOptions layout /** layout */ 
                );
                /**Returns  the sheet scale 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString SheetScale
                (
                );
                /**Sets  the sheet scale 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetSheetScale
                (
                    const NXString & sheetScale /** sheetscale */ 
                );
                /**Sets  the sheet scale 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                void SetSheetScale
                (
                    const char * sheetScale /** sheetscale */ 
                );
                /**Returns  the drawing template builder, which represents a @link NXOpen::Features::ShipDesign::DrawingTemplateBuilder NXOpen::Features::ShipDesign::DrawingTemplateBuilder@endlink . 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::DrawingTemplateBuilder * DrawingTemplate
                (
                );
                /**Returns  the section view list 
                 <br>  Created in NX12.0.1.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::SectionViewBuilderList * ViewList
                (
                );
                /**Returns  the assembly drawing symbol options
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool SymbolFlag
                (
                );
                /**Sets  the assembly drawing symbol options
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetSymbolFlag
                (
                    bool flag /** flag */ 
                );
                /** Validate whether the inputs to the component are sufficient for 
                            commit to be called.  If the component is not in a state to commit
                            then an exception is thrown.  For example, if the component requires
                            you to set some property, this method will throw an exception if
                            you haven't set it.  This method throws a not yet implemented
                            NXException for some components.
                         @return  Was self validation successful 
                 <br>  Created in NX3.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual bool Validate
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
