#ifndef NXOpen_CAE_POST_HXX_INCLUDED
#define NXOpen_CAE_POST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Post.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_BaseIteration.hxx>
#include <NXOpen/CAE_BeamDisplayParameters.hxx>
#include <NXOpen/CAE_CaeGroupCollection.hxx>
#include <NXOpen/CAE_Hotspot.hxx>
#include <NXOpen/CAE_PostAnnotation.hxx>
#include <NXOpen/CAE_PostAnnotationBuilder.hxx>
#include <NXOpen/CAE_PostGraph.hxx>
#include <NXOpen/CAE_PostLegend.hxx>
#include <NXOpen/CAE_PostSelectionEntity.hxx>
#include <NXOpen/CAE_PostShowhideBuilder.hxx>
#include <NXOpen/CAE_Result.hxx>
#include <NXOpen/CAE_Xyplot_Plot.hxx>
#include <NXOpen/NXColor.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class Post;
    }
    class Session;
    namespace CAE
    {
        class BaseResultType;
    }
    namespace CAE
    {
        class BeamDisplayParameters;
    }
    namespace CAE
    {
        class ClippingParameters;
    }
    namespace CAE
    {
        class CrossSectionParameters;
    }
    namespace CAE
    {
        class DeformationParameters;
    }
    namespace CAE
    {
        class Hotspot;
    }
    namespace CAE
    {
        class HotspotRecipe;
    }
    namespace CAE
    {
        class Iteration;
    }
    namespace CAE
    {
        class PostAnnotation;
    }
    namespace CAE
    {
        class PostAnnotationBuilder;
    }
    namespace CAE
    {
        class PostGraph;
    }
    namespace CAE
    {
        class PostLegend;
    }
    namespace CAE
    {
        class PostMesh;
    }
    namespace CAE
    {
        class PostPreference;
    }
    namespace CAE
    {
        class PostProcessingSession;
    }
    namespace CAE
    {
        class PostSelectionEntity;
    }
    namespace CAE
    {
        class PostShowhideBuilder;
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class RSEvent;
        }
    }
    namespace CAE
    {
        class Result;
    }
    namespace CAE
    {
        class ResultParameters;
    }
    namespace CAE
    {
        class ResultParametersWithNodalForceReport;
    }
    namespace CAE
    {
        class ResultParametersWithProbe;
    }
    namespace CAE
    {
        class SimPart;
    }
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class Plot;
        }
    }
    class NXColor;
    class TaggedObject;
    class Unit;
    namespace CAE
    {
        class PostImpl;
        /** Represents Post-Processing  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  Post
        {
            /** Fringe plot display color scheme type */
            public: enum DisplayColorSchemeType
            {
                DisplayColorSchemeTypeFringe/** fringe */ ,
                DisplayColorSchemeTypeMid/** mid */ ,
                DisplayColorSchemeTypePid/** pid */ ,
                DisplayColorSchemeTypeMesh/** mesh */ 
            };

            /** Fringe styles */
            public: enum Style
            {
                StyleSmoothContours/** smooth contours */ ,
                StyleBandedContours/** banded contours */ ,
                StyleElements/** elements */ ,
                StyleIsoLines/** iso lines */ ,
                StyleIsoSurfaces/** iso surfaces */ ,
                StyleCubes/** cubes */ ,
                StyleSpheres/** spheres */ ,
                StyleArrows/** arrows */ ,
                StyleTensors/** tensors */ ,
                StyleStreamlines/** streamlines */ 
            };

            /** Plot Styles */
            public: enum PlotStyle
            {
                PlotStyleContours/** contours */ ,
                PlotStyleIsoLines/** iso lines */ ,
                PlotStyleIsoSurfaces/** iso surfaces */ ,
                PlotStyleCubes/** cubes */ ,
                PlotStyleSpheres/** spheres */ ,
                PlotStyleArrows/** arrows */ ,
                PlotStyleTensors/** tensors */ ,
                PlotStyleStreamlines/** streamlines */ 
            };

            /** Colorbar Styles like smooth or banded */
            public: enum ColorbarStyle
            {
                ColorbarStyleSmooth/** smooth */ ,
                ColorbarStyleBanded/** banded */ 
            };

            /** Band styles */
            public: enum BandStyle
            {
                BandStyleDefault/** default */ ,
                BandStyleLine/** line */ ,
                BandStyleValInline/** val inline */ 
            };

            /** Show header display options */
            public: enum ShowHeader
            {
                ShowHeaderNone/** none */ ,
                ShowHeaderAutomatic/** automatic */ ,
                ShowHeaderCustomized/** customized */ ,
                ShowHeaderCompact/** compact */ 
            };

            /** legend display options */
            public: enum Legend
            {
                LegendDetailed/** detailed */ ,
                LegendColorbarOnly/** colorbar only */ ,
                LegendHeaderOnly/** header only */ 
            };

            /** colorbar thresholds */
            public: enum Threshold
            {
                ThresholdResult/** result */ ,
                ThresholdDisplayed/** displayed */ ,
                ThresholdSpecified/** specified */ ,
                ThresholdViewportResult/** viewport result */ ,
                ThresholdViewportDisplayed/** viewport displayed */ 
            };

            /** colorbar spacing styles */
            public: enum Spacing
            {
                SpacingEquallySpaced/** equally spaced */ ,
                SpacingRoundOff/** round off */ ,
                SpacingLevelIncrement/** level increment */ 
            };

            /** colorbar spectrums */
            public: enum Spectrum
            {
                SpectrumStructural/** structural */ ,
                SpectrumThermal/** thermal */ ,
                SpectrumGrayScale/** gray scale */ ,
                SpectrumStopLight/** stop light */ 
            };

            /** Colorbar scales */
            public: enum Scale
            {
                ScaleAutomatic/** automatic */ ,
                ScaleLinear/** linear */ ,
                ScaleLogarithmic/** logarithmic */ 
            };

            /** Colorbar format */
            public: enum Format
            {
                FormatAuto/** auto */ ,
                FormatFixedPoint/** fixed point */ ,
                FormatScientific/** scientific */ 
            };

            /** Colorbar position */
            public: enum Position
            {
                PositionLeft/** left */ ,
                PositionRight/** right */ ,
                PositionNone/** none */ 
            };

            /** Edge display styles */
            public: enum EdgeStyle
            {
                EdgeStyleExternal/** external */ ,
                EdgeStyleFeature/** feature */ ,
                EdgeStyleWireframe/** wireframe */ ,
                EdgeStyleNone/** none */ ,
                EdgeStylePolygonedge/** polygonedge */ 
            };

            /** Face display styles */
            public: enum FaceStyle
            {
                FaceStyleOpaque/** opaque */ ,
                FaceStyleTranslucent/** translucent */ ,
                FaceStyleNone/** none */ 
            };

            /** Face display styles */
            public: enum FaceFillStyle
            {
                FaceFillStyleFill/** fill */ ,
                FaceFillStyleNoFill/** no fill */ 
            };

            /** Mark render styles */
            public: enum MarkRenderStyle
            {
                MarkRenderStyleLine/** line */ ,
                MarkRenderStyleSolid/** solid */ 
            };

            /** Mark styles for tensors */
            public: enum MarkTensorStyle
            {
                MarkTensorStyleBoxAndArrows/** box and arrows */ ,
                MarkTensorStyleOnlyArrows/** only arrows */ ,
                MarkTensorStyleOnlyBox/** only box */ ,
                MarkTensorStyleOnlyLine/** only line */ 
            };

            /** Mark component combination */
            public: enum MarkComponentCombinationType
            {
                MarkComponentCombinationTypeNormal/** normal */ ,
                MarkComponentCombinationTypePrincipal/** principal */ ,
                MarkComponentCombinationTypeShear/** shear */ ,
                MarkComponentCombinationTypeForce/** force */ ,
                MarkComponentCombinationTypeMoment/** moment */ 
            };

            /** Mark color options */
            public: enum MarkColor
            {
                MarkColorResultValue/** result value */ ,
                MarkColorSpecified/** specified */ ,
                MarkColorTextcolor/** textcolor */ 
            };

            /** Mark size options */
            public: enum MarkSize
            {
                MarkSizeResultValue/** result value */ ,
                MarkSizeSpecified/** specified */ 
            };

            /** Maximum mark size options */
            public: enum MarkMaximumSize
            {
                MarkMaximumSizePercentageOfModel/** percentage of model */ ,
                MarkMaximumSizeSpecifiedLength/** specified length */ 
            };

            /** Beam contour scale methods */
            public: enum BeamContourScaleMethod
            {
                BeamContourScaleMethodPercentModel/** percent model */ ,
                BeamContourScaleMethodAbsolute/** absolute */ 
            };

            /** Mark resultant component combination type */
            public: enum MarkResultantCompCombinationType
            {
                MarkResultantCompCombinationTypeNone/** none */ ,
                MarkResultantCompCombinationTypeXy/** xy */ ,
                MarkResultantCompCombinationTypeYz/** yz */ ,
                MarkResultantCompCombinationTypeZx/** zx */ 
            };

            /** Mark locations 
             <br>  @deprecated Deprecated in NX12.0.0.  Mark Location no longer supported. Mark will be displayed at the result location. Change result location by changing node/element combination. <br>  
            */
            public: enum NX_DEPRECATED("Deprecated in NX12.0.0.  Mark Location no longer supported. Mark will be displayed at the result location. Change result location by changing node/element combination.") MarkLocation
            {
                MarkLocationNodes/** nodes */ ,
                MarkLocationElements/** elements */ 
            };

            /** Mark hide options */
            public: enum MarkHide
            {
                MarkHideResultPercent/** result percent */ ,
                MarkHideAbsoluteResultPercent/** absolute result percent */ ,
                MarkHideResultValue/** result value */ 
            };

            /** Target operators */
            public: enum Target
            {
                TargetFreeFacees/** free facees */ ,
                TargetVolume/** volume */ ,
                TargetCuttingPlane/** cutting plane */ ,
                TargetAxisSymmetry3D/** axis symmetry3d */ 
            };

            /** Min-Max marker display options */
            public: enum Marker
            {
                MarkerMinimumAndMaximum/** minimum and maximum */ ,
                MarkerMinimumOnly/** minimum only */ ,
                MarkerMaximumOnly/** maximum only */ 
            };

            /** Animation types */
            public: enum AnimationType
            {
                AnimationTypeResult/** result */ ,
                AnimationTypeIterations/** iterations */ ,
                AnimationTypeStreamline/** streamline */ 
            };

            /** Animation styles */
            public: enum AnimationStyle
            {
                AnimationStyleLinear/** linear */ ,
                AnimationStyleModal/** modal */ ,
                AnimationStyleForwardwave/** forwardwave */ ,
                AnimationStyleBackwardwave/** backwardwave */ 
            };

            /** Animation styles */
            public: enum AnimationIterationTypes
            {
                AnimationIterationTypesValue/** value */ ,
                AnimationIterationTypesNone/** none */ 
            };

            /** Animation controls */
            public: enum AnimationControl
            {
                AnimationControlBack/** back */ ,
                AnimationControlNext/** next */ ,
                AnimationControlPlay/** play */ ,
                AnimationControlPause/** pause */ ,
                AnimationControlStop/** stop */ ,
                AnimationControlSetFrame/** set frame */ ,
                AnimationControlFullCycle/** full cycle */ ,
                AnimationControlDelay/** delay */ ,
                AnimationControlStreamline/** streamline */ 
            };

            /** Clip hither-yon-cutplaneonly options */
            public: enum ClipSide
            {
                ClipSidePositive/** positive */ ,
                ClipSideNegative/** negative */ ,
                ClipSideBoth/** both */ 
            };

            /** Cutting plane options */
            public: enum ClipPlane
            {
                ClipPlaneX/** x */ ,
                ClipPlaneY/** y */ ,
                ClipPlaneZ/** z */ 
            };

            /** Criteria for value sharing for extracted stream line data */
            public: enum ValueSharingCriterion
            {
                ValueSharingCriterionAverage/** average */ ,
                ValueSharingCriterionMinimum/** minimum */ ,
                ValueSharingCriterionMaximum/** maximum */ 
            };

            /** Criteria for value sharing of extracted data at a graph point */
            public: enum NodeValueSharingCriterion
            {
                NodeValueSharingCriterionAverage/** average */ ,
                NodeValueSharingCriterionMinimum/** minimum */ ,
                NodeValueSharingCriterionMaximum/** maximum */ ,
                NodeValueSharingCriterionSum/** sum */ 
            };

            /** NoData treatments for extracted data at a graph point */
            public: enum NoDataTreatment
            {
                NoDataTreatmentIgnore/** ignore */ ,
                NoDataTreatmentSpecifiedValue/** specified value */ 
            };

            /** Abcissa types for graph */
            public: enum Abcissa
            {
                AbcissaUneven/** uneven */ ,
                AbcissaEven/** even */ ,
                AbcissaSequenced/** sequenced */ 
            };

            /** Export types for postview display */
            public: enum Export
            {
                ExportAscii/** ascii */ ,
                ExportJt/** jt */ ,
                ExportVrml/** vrml */ 
            };

            /** Show hide options for user group visibiliy control */
            public: enum GroupVisibility
            {
                GroupVisibilityShowOnly/** show only */ ,
                GroupVisibilityShow/** show */ ,
                GroupVisibilityHide/** hide */ 
            };

            /** Direction options for streamline extraction */
            public: enum StreamlineDirection
            {
                StreamlineDirectionUpstream/** upstream */ ,
                StreamlineDirectionDownstream/** downstream */ ,
                StreamlineDirectionBoth/** both */ 
            };

            /** Intergration schemes for streamline extraction */
            public: enum IntegrationScheme
            {
                IntegrationSchemeEuler/** euler */ ,
                IntegrationSchemeRk2/** rk2 */ ,
                IntegrationSchemeRk4/** rk4 */ 
            };

            /** Streamline display styles */
            public: enum StreamlineStyle
            {
                StreamlineStyleLine/** line */ ,
                StreamlineStyleRibbon/** ribbon */ ,
                StreamlineStyleTube/** tube */ ,
                StreamlineStyleBubble/** bubble */ 
            };

            /** Streamline color options */
            public: enum StreamlineColor
            {
                StreamlineColorResultValue/** result value */ ,
                StreamlineColorSpecified/** specified */ ,
                StreamlineColorTextcolor/** textcolor */ 
            };

            /** Streamline size options */
            public: enum StreamlineSize
            {
                StreamlineSizePercentageOfModel/** percentage of model */ ,
                StreamlineSizeSpecifiedLength/** specified length */ 
            };

            /** Streamline line weight options */
            public: enum StreamlineLineWeight
            {
                StreamlineLineWeightThin/** thin */ ,
                StreamlineLineWeightNormal/** normal */ ,
                StreamlineLineWeightThick/** thick */ 
            };

            /** Synchronization options for streamlines */
            public: enum StreamlineSynchronization
            {
                StreamlineSynchronizationUpstream/** upstream */ ,
                StreamlineSynchronizationDownstream/** downstream */ ,
                StreamlineSynchronizationSeedPoint/** seed point */ 
            };

            /** Drawing methods for overflow and under flor values */
            public: enum LimitDisplay
            {
                LimitDisplayNone/** none */ ,
                LimitDisplayShaded/** shaded */ ,
                LimitDisplayTranslucent/** translucent */ ,
                LimitDisplayClipped/** clipped */ 
            };

            /** Axis about which axis symmetric model rotates to create 3D display */
            public: enum AxisymetricAxis
            {
                AxisymetricAxisNone/** none */  = -1,
                AxisymetricAxisX/** x */ ,
                AxisymetricAxisY/** y */ ,
                AxisymetricAxisZ/** z */ 
            };

             /** Colorbar settings */
            public:
            struct Colorbar
            {
                public: /** spectrum */ NXOpen::CAE::Post::Spectrum Spectrum;
                public: /** invert spectrum */ bool InvertSpectrum;
                public: /** scale */ NXOpen::CAE::Post::Scale Scale;
                public: /** automatic level */ bool AutomaticLevel;
                public: /** number of levels */ int NumberOfLevels;
                public: /** threshold */ NXOpen::CAE::Post::Threshold Threshold;
                public: /** threshold minimum */ double ThresholdMinimum;
                public: /** threshold maximum */ double ThresholdMaximum;
                public: /** show overflow above */ bool ShowOverflowAbove;
                public: /** show overflow below */ bool ShowOverflowBelow;
                public: /** overflow above color */ NXColor* OverflowAboveColor;
                public: /** overflow below color */ NXColor* OverflowBelowColor;
                public: /** position */ NXOpen::CAE::Post::Position Position;
                public: /** overflow */ NXOpen::CAE::Post::LimitDisplay Overflow;
                public: /** underflow */ NXOpen::CAE::Post::LimitDisplay Underflow;
                public: /** spacing */ NXOpen::CAE::Post::Spacing Spacing;
                public: /** increment per level */ double IncrementPerLevel;
                public: Colorbar() :
                    Spectrum((NXOpen::CAE::Post::Spectrum)0),
                    InvertSpectrum(),
                    Scale((NXOpen::CAE::Post::Scale)0),
                    AutomaticLevel(),
                    NumberOfLevels(),
                    Threshold((NXOpen::CAE::Post::Threshold)0),
                    ThresholdMinimum(),
                    ThresholdMaximum(),
                    ShowOverflowAbove(),
                    ShowOverflowBelow(),
                    OverflowAboveColor(),
                    OverflowBelowColor(),
                    Position((NXOpen::CAE::Post::Position)0),
                    Overflow((NXOpen::CAE::Post::LimitDisplay)0),
                    Underflow((NXOpen::CAE::Post::LimitDisplay)0),
                    Spacing((NXOpen::CAE::Post::Spacing)0),
                    IncrementPerLevel()
                {
                }
                /** Constructor for the Colorbar struct. */ 
                public: Colorbar(NXOpen::CAE::Post::Spectrum spectrumInitial /** spectrum */ , 
                        bool invertSpectrumInitial /** invert spectrum */ , 
                        NXOpen::CAE::Post::Scale scaleInitial /** scale */ , 
                        bool automaticLevelInitial /** automatic level */ , 
                        int numberOfLevelsInitial /** number of levels */ , 
                        NXOpen::CAE::Post::Threshold thresholdInitial /** threshold */ , 
                        double thresholdMinimumInitial /** threshold minimum */ , 
                        double thresholdMaximumInitial /** threshold maximum */ , 
                        bool showOverflowAboveInitial /** show overflow above */ , 
                        bool showOverflowBelowInitial /** show overflow below */ , 
                        NXColor* overflowAboveColorInitial /** overflow above color */ , 
                        NXColor* overflowBelowColorInitial /** overflow below color */ , 
                        NXOpen::CAE::Post::Position positionInitial /** position */ , 
                        NXOpen::CAE::Post::LimitDisplay overflowInitial /** overflow */ , 
                        NXOpen::CAE::Post::LimitDisplay underflowInitial /** underflow */ , 
                        NXOpen::CAE::Post::Spacing spacingInitial /** spacing */ , 
                        double incrementPerLevelInitial /** increment per level */ ) :
                    Spectrum(spectrumInitial),
                    InvertSpectrum(invertSpectrumInitial),
                    Scale(scaleInitial),
                    AutomaticLevel(automaticLevelInitial),
                    NumberOfLevels(numberOfLevelsInitial),
                    Threshold(thresholdInitial),
                    ThresholdMinimum(thresholdMinimumInitial),
                    ThresholdMaximum(thresholdMaximumInitial),
                    ShowOverflowAbove(showOverflowAboveInitial),
                    ShowOverflowBelow(showOverflowBelowInitial),
                    OverflowAboveColor(overflowAboveColorInitial),
                    OverflowBelowColor(overflowBelowColorInitial),
                    Position(positionInitial),
                    Overflow(overflowInitial),
                    Underflow(underflowInitial),
                    Spacing(spacingInitial),
                    IncrementPerLevel(incrementPerLevelInitial)
                {
                }
            };

             /** Headerlines */
            public:
            struct Headerlines
            {
                public: /** show */ bool Show;
                public: /** line */ NXString Line;
                public: Headerlines() :
                    Show(),
                    Line()
                {
                }
                /** Constructor for the Headerlines struct. */ 
                public: Headerlines(bool showInitial /** show */ , 
                        const NXString &lineInitial /** line */ ) :
                    Show(showInitial),
                    Line(lineInitial)
                {
                }
            };

             /** Edge and Face display settings */
            public:
            struct EdgeFace
            {
                public: /** edge style */ NXOpen::CAE::Post::EdgeStyle EdgeStyle;
                public: /** edge color */ NXColor* EdgeColor;
                public: /** face style */ NXOpen::CAE::Post::FaceStyle FaceStyle;
                public: /** face color */ NXColor* FaceColor;
                public: EdgeFace() :
                    EdgeStyle((NXOpen::CAE::Post::EdgeStyle)0),
                    EdgeColor(),
                    FaceStyle((NXOpen::CAE::Post::FaceStyle)0),
                    FaceColor()
                {
                }
                /** Constructor for the EdgeFace struct. */ 
                public: EdgeFace(NXOpen::CAE::Post::EdgeStyle edgeStyleInitial /** edge style */ , 
                        NXColor* edgeColorInitial /** edge color */ , 
                        NXOpen::CAE::Post::FaceStyle faceStyleInitial /** face style */ , 
                        NXColor* faceColorInitial /** face color */ ) :
                    EdgeStyle(edgeStyleInitial),
                    EdgeColor(edgeColorInitial),
                    FaceStyle(faceStyleInitial),
                    FaceColor(faceColorInitial)
                {
                }
            };

             /** Edge and Face Fill display settings */
            public:
            struct PrimaryEdgeFace
            {
                public: /** edge style */ NXOpen::CAE::Post::EdgeStyle EdgeStyle;
                public: /** edge color */ NXColor* EdgeColor;
                public: /** face style */ NXOpen::CAE::Post::FaceFillStyle FaceStyle;
                public: /** face color */ NXColor* FaceColor;
                public: PrimaryEdgeFace() :
                    EdgeStyle((NXOpen::CAE::Post::EdgeStyle)0),
                    EdgeColor(),
                    FaceStyle((NXOpen::CAE::Post::FaceFillStyle)0),
                    FaceColor()
                {
                }
                /** Constructor for the PrimaryEdgeFace struct. */ 
                public: PrimaryEdgeFace(NXOpen::CAE::Post::EdgeStyle edgeStyleInitial /** edge style */ , 
                        NXColor* edgeColorInitial /** edge color */ , 
                        NXOpen::CAE::Post::FaceFillStyle faceStyleInitial /** face style */ , 
                        NXColor* faceColorInitial /** face color */ ) :
                    EdgeStyle(edgeStyleInitial),
                    EdgeColor(edgeColorInitial),
                    FaceStyle(faceStyleInitial),
                    FaceColor(faceColorInitial)
                {
                }
            };

             /** Mark display settings */
            public:
            struct Mark
            {
                public: /** show arrow x component */ bool ShowArrowXComponent;
                public: /** show arrow y component */ bool ShowArrowYComponent;
                public: /** show arrow z component */ bool ShowArrowZComponent;
                public: /** show arrow magnitude */ bool ShowArrowMagnitude;
                public: /** mark render style */ NXOpen::CAE::Post::MarkRenderStyle MarkRenderStyle;
                public: /** mark tensor style */ NXOpen::CAE::Post::MarkTensorStyle MarkTensorStyle;
                public: /** mark color */ NXOpen::CAE::Post::MarkColor MarkColor;
                public: /** specified color */ NXColor* SpecifiedColor;
                public: /** mark size */ NXOpen::CAE::Post::MarkSize MarkSize;
                public: /** mark maximum size */ NXOpen::CAE::Post::MarkMaximumSize MarkMaximumSize;
                public: /** model precent value */ double ModelPrecentValue;
                public: /** specified length value */ double SpecifiedLengthValue;
                public: /** mark location */ NXOpen::CAE::Post::MarkLocation MarkLocation;
                public: /** hide marks below */ bool HideMarksBelow;
                public: /** below mark hide type */ NXOpen::CAE::Post::MarkHide BelowMarkHideType;
                public: /** below result percent */ double BelowResultPercent;
                public: /** below result value */ double BelowResultValue;
                public: /** display numerical value with arrow */ bool DisplayNumericalValueWithArrow;
                public: /** doublesided */ bool DoubleSided;
                public: /** mark component combination type */ NXOpen::CAE::Post::MarkComponentCombinationType MarkComponentCombinationType;
                public: /** show tensor component1 */ bool ShowTensorComponent1;
                public: /** show tensor component2 */ bool ShowTensorComponent2;
                public: /** show tensor component3 */ bool ShowTensorComponent3;
                public: /** show tensor component4 */ bool ShowTensorComponent4;
                public: /** display component label with arrow */ bool DisplayComponentLabelWithArrow;
                public: /** show arrow resultant */ bool ShowArrowResultant;
                public: /** mark resultant comp combination type */ NXOpen::CAE::Post::MarkResultantCompCombinationType MarkResultantCompCombinationType;
                public: Mark() :
                    ShowArrowXComponent(),
                    ShowArrowYComponent(),
                    ShowArrowZComponent(),
                    ShowArrowMagnitude(),
                    MarkRenderStyle((NXOpen::CAE::Post::MarkRenderStyle)0),
                    MarkTensorStyle((NXOpen::CAE::Post::MarkTensorStyle)0),
                    MarkColor((NXOpen::CAE::Post::MarkColor)0),
                    SpecifiedColor(),
                    MarkSize((NXOpen::CAE::Post::MarkSize)0),
                    MarkMaximumSize((NXOpen::CAE::Post::MarkMaximumSize)0),
                    ModelPrecentValue(),
                    SpecifiedLengthValue(),
                    MarkLocation((NXOpen::CAE::Post::MarkLocation)0),
                    HideMarksBelow(),
                    BelowMarkHideType((NXOpen::CAE::Post::MarkHide)0),
                    BelowResultPercent(),
                    BelowResultValue(),
                    DisplayNumericalValueWithArrow(),
                    DoubleSided(),
                    MarkComponentCombinationType((NXOpen::CAE::Post::MarkComponentCombinationType)0),
                    ShowTensorComponent1(),
                    ShowTensorComponent2(),
                    ShowTensorComponent3(),
                    ShowTensorComponent4(),
                    DisplayComponentLabelWithArrow(),
                    ShowArrowResultant(),
                    MarkResultantCompCombinationType((NXOpen::CAE::Post::MarkResultantCompCombinationType)0)
                {
                }
                /** Constructor for the Mark struct. */ 
                public: Mark(bool showArrowXComponentInitial /** show arrow x component */ , 
                        bool showArrowYComponentInitial /** show arrow y component */ , 
                        bool showArrowZComponentInitial /** show arrow z component */ , 
                        bool showArrowMagnitudeInitial /** show arrow magnitude */ , 
                        NXOpen::CAE::Post::MarkRenderStyle markRenderStyleInitial /** mark render style */ , 
                        NXOpen::CAE::Post::MarkTensorStyle markTensorStyleInitial /** mark tensor style */ , 
                        NXOpen::CAE::Post::MarkColor markColorInitial /** mark color */ , 
                        NXColor* specifiedColorInitial /** specified color */ , 
                        NXOpen::CAE::Post::MarkSize markSizeInitial /** mark size */ , 
                        NXOpen::CAE::Post::MarkMaximumSize markMaximumSizeInitial /** mark maximum size */ , 
                        double modelPrecentValueInitial /** model precent value */ , 
                        double specifiedLengthValueInitial /** specified length value */ , 
                        NXOpen::CAE::Post::MarkLocation markLocationInitial /** mark location */ , 
                        bool hideMarksBelowInitial /** hide marks below */ , 
                        NXOpen::CAE::Post::MarkHide belowMarkHideTypeInitial /** below mark hide type */ , 
                        double belowResultPercentInitial /** below result percent */ , 
                        double belowResultValueInitial /** below result value */ , 
                        bool displayNumericalValueWithArrowInitial /** display numerical value with arrow */ , 
                        bool doubleSidedInitial /** doublesided */ , 
                        NXOpen::CAE::Post::MarkComponentCombinationType markComponentCombinationTypeInitial /** mark component combination type */ , 
                        bool showTensorComponent1Initial /** show tensor component1 */ , 
                        bool showTensorComponent2Initial /** show tensor component2 */ , 
                        bool showTensorComponent3Initial /** show tensor component3 */ , 
                        bool showTensorComponent4Initial /** show tensor component4 */ , 
                        bool displayComponentLabelWithArrowInitial /** display component label with arrow */ , 
                        bool showArrowResultantInitial /** show arrow resultant */ , 
                        NXOpen::CAE::Post::MarkResultantCompCombinationType markResultantCompCombinationTypeInitial /** mark resultant comp combination type */ ) :
                    ShowArrowXComponent(showArrowXComponentInitial),
                    ShowArrowYComponent(showArrowYComponentInitial),
                    ShowArrowZComponent(showArrowZComponentInitial),
                    ShowArrowMagnitude(showArrowMagnitudeInitial),
                    MarkRenderStyle(markRenderStyleInitial),
                    MarkTensorStyle(markTensorStyleInitial),
                    MarkColor(markColorInitial),
                    SpecifiedColor(specifiedColorInitial),
                    MarkSize(markSizeInitial),
                    MarkMaximumSize(markMaximumSizeInitial),
                    ModelPrecentValue(modelPrecentValueInitial),
                    SpecifiedLengthValue(specifiedLengthValueInitial),
                    MarkLocation(markLocationInitial),
                    HideMarksBelow(hideMarksBelowInitial),
                    BelowMarkHideType(belowMarkHideTypeInitial),
                    BelowResultPercent(belowResultPercentInitial),
                    BelowResultValue(belowResultValueInitial),
                    DisplayNumericalValueWithArrow(displayNumericalValueWithArrowInitial),
                    DoubleSided(doubleSidedInitial),
                    MarkComponentCombinationType(markComponentCombinationTypeInitial),
                    ShowTensorComponent1(showTensorComponent1Initial),
                    ShowTensorComponent2(showTensorComponent2Initial),
                    ShowTensorComponent3(showTensorComponent3Initial),
                    ShowTensorComponent4(showTensorComponent4Initial),
                    DisplayComponentLabelWithArrow(displayComponentLabelWithArrowInitial),
                    ShowArrowResultant(showArrowResultantInitial),
                    MarkResultantCompCombinationType(markResultantCompCombinationTypeInitial)
                {
                }
            };

             /** Streamline data extraction parameters */
            public:
            struct StreamlineData
            {
                public: /** value shareing criterion */ NXOpen::CAE::Post::ValueSharingCriterion ValueShareingCriterion;
                public: /** no data treatment */ NXOpen::CAE::Post::NoDataTreatment NoDataTreatment;
                public: /** no data value */ double NoDataValue;
                public: StreamlineData() :
                    ValueShareingCriterion((NXOpen::CAE::Post::ValueSharingCriterion)0),
                    NoDataTreatment((NXOpen::CAE::Post::NoDataTreatment)0),
                    NoDataValue()
                {
                }
                /** Constructor for the StreamlineData struct. */ 
                public: StreamlineData(NXOpen::CAE::Post::ValueSharingCriterion valueShareingCriterionInitial /** value shareing criterion */ , 
                        NXOpen::CAE::Post::NoDataTreatment noDataTreatmentInitial /** no data treatment */ , 
                        double noDataValueInitial /** no data value */ ) :
                    ValueShareingCriterion(valueShareingCriterionInitial),
                    NoDataTreatment(noDataTreatmentInitial),
                    NoDataValue(noDataValueInitial)
                {
                }
            };

             /** Streamline display settings */
            public:
            struct Streamline
            {
                public: /** data params */ NXOpen::CAE::Post::StreamlineData DataParams;
                public: /** stream style */ NXOpen::CAE::Post::StreamlineStyle StreamStyle;
                public: /** stream color */ NXOpen::CAE::Post::StreamlineColor StreamColor;
                public: /** specified color */ NXColor* SpecifiedColor;
                public: /** stream size */ NXOpen::CAE::Post::StreamlineSize StreamSize;
                public: /** model precent value */ double ModelPrecentValue;
                public: /** specified length value */ double SpecifiedLengthValue;
                public: /** lineweight */ NXOpen::CAE::Post::StreamlineLineWeight Lineweight;
                public: /** stream sync */ NXOpen::CAE::Post::StreamlineSynchronization StreamSync;
                public: /** bubble timestep */ double BubbleTimestep;
                public: Streamline() :
                    DataParams(),
                    StreamStyle((NXOpen::CAE::Post::StreamlineStyle)0),
                    StreamColor((NXOpen::CAE::Post::StreamlineColor)0),
                    SpecifiedColor(),
                    StreamSize((NXOpen::CAE::Post::StreamlineSize)0),
                    ModelPrecentValue(),
                    SpecifiedLengthValue(),
                    Lineweight((NXOpen::CAE::Post::StreamlineLineWeight)0),
                    StreamSync((NXOpen::CAE::Post::StreamlineSynchronization)0),
                    BubbleTimestep()
                {
                }
                /** Constructor for the Streamline struct. */ 
                public: Streamline(const NXOpen::CAE::Post::StreamlineData &dataParamsInitial /** data params */ , 
                        NXOpen::CAE::Post::StreamlineStyle streamStyleInitial /** stream style */ , 
                        NXOpen::CAE::Post::StreamlineColor streamColorInitial /** stream color */ , 
                        NXColor* specifiedColorInitial /** specified color */ , 
                        NXOpen::CAE::Post::StreamlineSize streamSizeInitial /** stream size */ , 
                        double modelPrecentValueInitial /** model precent value */ , 
                        double specifiedLengthValueInitial /** specified length value */ , 
                        NXOpen::CAE::Post::StreamlineLineWeight lineweightInitial /** lineweight */ , 
                        NXOpen::CAE::Post::StreamlineSynchronization streamSyncInitial /** stream sync */ , 
                        double bubbleTimestepInitial /** bubble timestep */ ) :
                    DataParams(dataParamsInitial),
                    StreamStyle(streamStyleInitial),
                    StreamColor(streamColorInitial),
                    SpecifiedColor(specifiedColorInitial),
                    StreamSize(streamSizeInitial),
                    ModelPrecentValue(modelPrecentValueInitial),
                    SpecifiedLengthValue(specifiedLengthValueInitial),
                    Lineweight(lineweightInitial),
                    StreamSync(streamSyncInitial),
                    BubbleTimestep(bubbleTimestepInitial)
                {
                }
            };

             /** Animation settings for streamline animation */
            public:
            struct AnimationStreamline
            {
                public: /** show guides */ bool ShowGuides;
                public: /** stream sync */ NXOpen::CAE::Post::StreamlineSynchronization StreamSync;
                public: /** between 0.0 and 1.0 */double ActiveRegionStartFactor;
                public: /** between 0.0 and 1.0 */double ActiveRegionEndFactor;
                public: /** number of increments */ int NumberOfIncrements;
                public: /** continuous pulse */ bool ContinuousPulse;
                public: /** number of time periods */ int NumberOfTimePeriods;
                public: /** more than 2.0 */double FramesPerPulse;
                public: /** not yet supported */double PulseDutycycle;
                public: AnimationStreamline() :
                    ShowGuides(),
                    StreamSync((NXOpen::CAE::Post::StreamlineSynchronization)0),
                    ActiveRegionStartFactor(),
                    ActiveRegionEndFactor(),
                    NumberOfIncrements(),
                    ContinuousPulse(),
                    NumberOfTimePeriods(),
                    FramesPerPulse(),
                    PulseDutycycle()
                {
                }
                /** Constructor for the AnimationStreamline struct. */ 
                public: AnimationStreamline(bool showGuidesInitial /** show guides */ , 
                        NXOpen::CAE::Post::StreamlineSynchronization streamSyncInitial /** stream sync */ , 
                        double activeRegionStartFactorInitial /** between 0.0 and 1.0 */, 
                        double activeRegionEndFactorInitial /** between 0.0 and 1.0 */, 
                        int numberOfIncrementsInitial /** number of increments */ , 
                        bool continuousPulseInitial /** continuous pulse */ , 
                        int numberOfTimePeriodsInitial /** number of time periods */ , 
                        double framesPerPulseInitial /** more than 2.0 */, 
                        double pulseDutycycleInitial /** not yet supported */) :
                    ShowGuides(showGuidesInitial),
                    StreamSync(streamSyncInitial),
                    ActiveRegionStartFactor(activeRegionStartFactorInitial),
                    ActiveRegionEndFactor(activeRegionEndFactorInitial),
                    NumberOfIncrements(numberOfIncrementsInitial),
                    ContinuousPulse(continuousPulseInitial),
                    NumberOfTimePeriods(numberOfTimePeriodsInitial),
                    FramesPerPulse(framesPerPulseInitial),
                    PulseDutycycle(pulseDutycycleInitial)
                {
                }
            };

             /** Animation settings */
            public:
            struct Animation
            {
                public: /** animation type */ NXOpen::CAE::Post::AnimationType AnimationType;
                public: /** animation style */ NXOpen::CAE::Post::AnimationStyle AnimationStyle;
                public: /** number of frames */ int NumberOfFrames;
                public: /** start loadcase */ int StartLoadcase;
                public: /** start iteration */ int StartIteration;
                public: /** end loadcase */ int EndLoadcase;
                public: /** end iteration */ int EndIteration;
                public: /** iteration increment */ int IterationIncrement;
                public: /** full cycle */ bool FullCycle;
                public: /** milliseconds */int Delay;
                public: /** animation streamline */ NXOpen::CAE::Post::AnimationStreamline AnimationStreamline;
                public: /** iteration type */ NXOpen::CAE::Post::AnimationIterationTypes IterationType;
                public: /** iter value type */ NXOpen::CAE::BaseIteration::IterationValueType IterValueType;
                public: /** Animate color */bool Color;
                public: /** Animate deformation */bool Deformation;
                public: /** Save Frames In Memory */bool SaveFramesInMemory;
                public: Animation() :
                    AnimationType((NXOpen::CAE::Post::AnimationType)0),
                    AnimationStyle((NXOpen::CAE::Post::AnimationStyle)0),
                    NumberOfFrames(),
                    StartLoadcase(),
                    StartIteration(),
                    EndLoadcase(),
                    EndIteration(),
                    IterationIncrement(),
                    FullCycle(),
                    Delay(),
                    AnimationStreamline(),
                    IterationType((NXOpen::CAE::Post::AnimationIterationTypes)0),
                    IterValueType((NXOpen::CAE::BaseIteration::IterationValueType)0),
                    Color(),
                    Deformation(),
                    SaveFramesInMemory()
                {
                }
                /** Constructor for the Animation struct. */ 
                public: Animation(NXOpen::CAE::Post::AnimationType animationTypeInitial /** animation type */ , 
                        NXOpen::CAE::Post::AnimationStyle animationStyleInitial /** animation style */ , 
                        int numberOfFramesInitial /** number of frames */ , 
                        int startLoadcaseInitial /** start loadcase */ , 
                        int startIterationInitial /** start iteration */ , 
                        int endLoadcaseInitial /** end loadcase */ , 
                        int endIterationInitial /** end iteration */ , 
                        int iterationIncrementInitial /** iteration increment */ , 
                        bool fullCycleInitial /** full cycle */ , 
                        int delayInitial /** milliseconds */, 
                        const NXOpen::CAE::Post::AnimationStreamline &animationStreamlineInitial /** animation streamline */ , 
                        NXOpen::CAE::Post::AnimationIterationTypes iterationTypeInitial /** iteration type */ , 
                        NXOpen::CAE::BaseIteration::IterationValueType iterValueTypeInitial /** iter value type */ , 
                        bool colorInitial /** Animate color */, 
                        bool deformationInitial /** Animate deformation */, 
                        bool saveFramesInMemoryInitial /** Save Frames In Memory */) :
                    AnimationType(animationTypeInitial),
                    AnimationStyle(animationStyleInitial),
                    NumberOfFrames(numberOfFramesInitial),
                    StartLoadcase(startLoadcaseInitial),
                    StartIteration(startIterationInitial),
                    EndLoadcase(endLoadcaseInitial),
                    EndIteration(endIterationInitial),
                    IterationIncrement(iterationIncrementInitial),
                    FullCycle(fullCycleInitial),
                    Delay(delayInitial),
                    AnimationStreamline(animationStreamlineInitial),
                    IterationType(iterationTypeInitial),
                    IterValueType(iterValueTypeInitial),
                    Color(colorInitial),
                    Deformation(deformationInitial),
                    SaveFramesInMemory(saveFramesInMemoryInitial)
                {
                }
            };

             /** Animation settings */
            public:
            struct AnimationParameters
            {
                public: /** animation type */ NXOpen::CAE::Post::AnimationType AnimationType;
                public: /** animation style */ NXOpen::CAE::Post::AnimationStyle AnimationStyle;
                public: /** number of frames */ int NumberOfFrames;
                public: /** start iteration */NXOpen::CAE::Iteration * AnimStartIteration;
                public: /** end iteration */NXOpen::CAE::Iteration * AnimEndIteration;
                public: /** iteration increment */ int IterationIncrement;
                public: /** full cycle */ bool FullCycle;
                public: /** milliseconds */int Delay;
                public: /** animation streamline */ NXOpen::CAE::Post::AnimationStreamline AnimationStreamline;
                public: /** iteration type */ NXOpen::CAE::Post::AnimationIterationTypes IterationType;
                public: /** iter value type */ NXOpen::CAE::BaseIteration::IterationValueType IterValueType;
                public: /** Animate color */bool Color;
                public: /** Animate deformation */bool Deformation;
                public: /** Save Frames In Memory */bool SaveFramesInMemory;
                public: AnimationParameters() :
                    AnimationType((NXOpen::CAE::Post::AnimationType)0),
                    AnimationStyle((NXOpen::CAE::Post::AnimationStyle)0),
                    NumberOfFrames(),
                    AnimStartIteration(),
                    AnimEndIteration(),
                    IterationIncrement(),
                    FullCycle(),
                    Delay(),
                    AnimationStreamline(),
                    IterationType((NXOpen::CAE::Post::AnimationIterationTypes)0),
                    IterValueType((NXOpen::CAE::BaseIteration::IterationValueType)0),
                    Color(),
                    Deformation(),
                    SaveFramesInMemory()
                {
                }
                /** Constructor for the AnimationParameters struct. */ 
                public: AnimationParameters(NXOpen::CAE::Post::AnimationType animationTypeInitial /** animation type */ , 
                        NXOpen::CAE::Post::AnimationStyle animationStyleInitial /** animation style */ , 
                        int numberOfFramesInitial /** number of frames */ , 
                        NXOpen::CAE::Iteration * animStartIterationInitial /** start iteration */, 
                        NXOpen::CAE::Iteration * animEndIterationInitial /** end iteration */, 
                        int iterationIncrementInitial /** iteration increment */ , 
                        bool fullCycleInitial /** full cycle */ , 
                        int delayInitial /** milliseconds */, 
                        const NXOpen::CAE::Post::AnimationStreamline &animationStreamlineInitial /** animation streamline */ , 
                        NXOpen::CAE::Post::AnimationIterationTypes iterationTypeInitial /** iteration type */ , 
                        NXOpen::CAE::BaseIteration::IterationValueType iterValueTypeInitial /** iter value type */ , 
                        bool colorInitial /** Animate color */, 
                        bool deformationInitial /** Animate deformation */, 
                        bool saveFramesInMemoryInitial /** Save Frames In Memory */) :
                    AnimationType(animationTypeInitial),
                    AnimationStyle(animationStyleInitial),
                    NumberOfFrames(numberOfFramesInitial),
                    AnimStartIteration(animStartIterationInitial),
                    AnimEndIteration(animEndIterationInitial),
                    IterationIncrement(iterationIncrementInitial),
                    FullCycle(fullCycleInitial),
                    Delay(delayInitial),
                    AnimationStreamline(animationStreamlineInitial),
                    IterationType(iterationTypeInitial),
                    IterValueType(iterValueTypeInitial),
                    Color(colorInitial),
                    Deformation(deformationInitial),
                    SaveFramesInMemory(saveFramesInMemoryInitial)
                {
                }
            };

             /** Cutting-plane display settings */
            public:
            struct Clipping
            {
                public: /** show outline */ bool ShowOutline;
                public: /** show clipped ghost */ bool ShowClippedGhost;
                public: /** clip value */ double ClipValue;
                public: /** side */ NXOpen::CAE::Post::ClipSide Side;
                public: /** plane */ NXOpen::CAE::Post::ClipPlane Plane;
                public: /** Any absolute or work */NXOpen::CAE::Result::CoordinateSystem PlaneCoordinateSystem;
                public: Clipping() :
                    ShowOutline(),
                    ShowClippedGhost(),
                    ClipValue(),
                    Side((NXOpen::CAE::Post::ClipSide)0),
                    Plane((NXOpen::CAE::Post::ClipPlane)0),
                    PlaneCoordinateSystem((NXOpen::CAE::Result::CoordinateSystem)0)
                {
                }
                /** Constructor for the Clipping struct. */ 
                public: Clipping(bool showOutlineInitial /** show outline */ , 
                        bool showClippedGhostInitial /** show clipped ghost */ , 
                        double clipValueInitial /** clip value */ , 
                        NXOpen::CAE::Post::ClipSide sideInitial /** side */ , 
                        NXOpen::CAE::Post::ClipPlane planeInitial /** plane */ , 
                        NXOpen::CAE::Result::CoordinateSystem planeCoordinateSystemInitial /** Any absolute or work */) :
                    ShowOutline(showOutlineInitial),
                    ShowClippedGhost(showClippedGhostInitial),
                    ClipValue(clipValueInitial),
                    Side(sideInitial),
                    Plane(planeInitial),
                    PlaneCoordinateSystem(planeCoordinateSystemInitial)
                {
                }
            };

             /** 3D Axi-symmetric model display settings */
            public:
            struct Axisymmetric
            {
                public: /** number of section */ int NumberOfSection;
                public: /** revolve angle */ double RevolveAngle;
                public: /** axisym axis */ NXOpen::CAE::Post::AxisymetricAxis AxisymAxis;
                public: Axisymmetric() :
                    NumberOfSection(),
                    RevolveAngle(),
                    AxisymAxis((NXOpen::CAE::Post::AxisymetricAxis)0)
                {
                }
                /** Constructor for the Axisymmetric struct. */ 
                public: Axisymmetric(int numberOfSectionInitial /** number of section */ , 
                        double revolveAngleInitial /** revolve angle */ , 
                        NXOpen::CAE::Post::AxisymetricAxis axisymAxisInitial /** axisym axis */ ) :
                    NumberOfSection(numberOfSectionInitial),
                    RevolveAngle(revolveAngleInitial),
                    AxisymAxis(axisymAxisInitial)
                {
                }
            };

             /** Annotation box display settings */
            public:
            struct AnnotationBox
            {
                public: /** line color */ NXColor* LineColor;
                public: /** area color */ NXColor* AreaColor;
                public: /** show border */ bool ShowBorder;
                public: /** fill area */ bool FillArea;
                public: /** area translucency */ bool AreaTranslucency;
                public: AnnotationBox() :
                    LineColor(),
                    AreaColor(),
                    ShowBorder(),
                    FillArea(),
                    AreaTranslucency()
                {
                }
                /** Constructor for the AnnotationBox struct. */ 
                public: AnnotationBox(NXColor* lineColorInitial /** line color */ , 
                        NXColor* areaColorInitial /** area color */ , 
                        bool showBorderInitial /** show border */ , 
                        bool fillAreaInitial /** fill area */ , 
                        bool areaTranslucencyInitial /** area translucency */ ) :
                    LineColor(lineColorInitial),
                    AreaColor(areaColorInitial),
                    ShowBorder(showBorderInitial),
                    FillArea(fillAreaInitial),
                    AreaTranslucency(areaTranslucencyInitial)
                {
                }
            };

             /** Annotation text settings */
            public:
            struct Text
            {
                public: /** font */ int Font;
                public: /** size */ int Size;
                public: /** color */ NXColor* Color;
                public: /** bold */ int Bold;
                public: Text() :
                    Font(),
                    Size(),
                    Color(),
                    Bold()
                {
                }
                /** Constructor for the Text struct. */ 
                public: Text(int fontInitial /** font */ , 
                        int sizeInitial /** size */ , 
                        NXColor* colorInitial /** color */ , 
                        int boldInitial /** bold */ ) :
                    Font(fontInitial),
                    Size(sizeInitial),
                    Color(colorInitial),
                    Bold(boldInitial)
                {
                }
            };

             /** Streamline extraction parameters */
            public:
            struct StreamlineExtraction
            {
                public: /** direction */ NXOpen::CAE::Post::StreamlineDirection Direction;
                public: /** maximum time elapsed */ double MaximumTimeElapsed;
                public: /** max integration steps */ int MaxIntegrationSteps;
                public: /** limit step size */ bool LimitStepSize;
                public: /** maximum step size */ double MaximumStepSize;
                public: /** not yet supported */NXOpen::CAE::Post::IntegrationScheme IntegrationScheme;
                public: /** disjoint restart */ bool DisjointRestart;
                public: StreamlineExtraction() :
                    Direction((NXOpen::CAE::Post::StreamlineDirection)0),
                    MaximumTimeElapsed(),
                    MaxIntegrationSteps(),
                    LimitStepSize(),
                    MaximumStepSize(),
                    IntegrationScheme((NXOpen::CAE::Post::IntegrationScheme)0),
                    DisjointRestart()
                {
                }
                /** Constructor for the StreamlineExtraction struct. */ 
                public: StreamlineExtraction(NXOpen::CAE::Post::StreamlineDirection directionInitial /** direction */ , 
                        double maximumTimeElapsedInitial /** maximum time elapsed */ , 
                        int maxIntegrationStepsInitial /** max integration steps */ , 
                        bool limitStepSizeInitial /** limit step size */ , 
                        double maximumStepSizeInitial /** maximum step size */ , 
                        NXOpen::CAE::Post::IntegrationScheme integrationSchemeInitial /** not yet supported */, 
                        bool disjointRestartInitial /** disjoint restart */ ) :
                    Direction(directionInitial),
                    MaximumTimeElapsed(maximumTimeElapsedInitial),
                    MaxIntegrationSteps(maxIntegrationStepsInitial),
                    LimitStepSize(limitStepSizeInitial),
                    MaximumStepSize(maximumStepSizeInitial),
                    IntegrationScheme(integrationSchemeInitial),
                    DisjointRestart(disjointRestartInitial)
                {
                }
            };

             /** Streamline seed point definition */
            public:
            struct StreamlineSeed
            {
                public: /** extraction */ NXOpen::CAE::Post::StreamlineExtraction Extraction;
                public: /** coordinates */ NXOpen::Point3d Coordinates;
                public: /** -1 if not known */int ElementId;
                public: StreamlineSeed() :
                    Extraction(),
                    Coordinates(),
                    ElementId()
                {
                }
                /** Constructor for the StreamlineSeed struct. */ 
                public: StreamlineSeed(const NXOpen::CAE::Post::StreamlineExtraction &extractionInitial /** extraction */ , 
                        const NXOpen::Point3d &coordinatesInitial /** coordinates */ , 
                        int elementIdInitial /** -1 if not known */) :
                    Extraction(extractionInitial),
                    Coordinates(coordinatesInitial),
                    ElementId(elementIdInitial)
                {
                }
            };

             /** Graph extraction parameters */
            public:
            struct GraphParameters
            {
                public: /** Not yet supported */bool UseDeformedConfiguration;
                public: /** include intersections */ bool IncludeIntersections;
                public: /** value shareing criterion */ NXOpen::CAE::Post::NodeValueSharingCriterion ValueShareingCriterion;
                public: /** no data treatment */ NXOpen::CAE::Post::NoDataTreatment NoDataTreatment;
                public: /** no data value */ double NoDataValue;
                public: /** abcissa */ NXOpen::CAE::Post::Abcissa Abcissa;
                public: GraphParameters() :
                    UseDeformedConfiguration(),
                    IncludeIntersections(),
                    ValueShareingCriterion((NXOpen::CAE::Post::NodeValueSharingCriterion)0),
                    NoDataTreatment((NXOpen::CAE::Post::NoDataTreatment)0),
                    NoDataValue(),
                    Abcissa((NXOpen::CAE::Post::Abcissa)0)
                {
                }
                /** Constructor for the GraphParameters struct. */ 
                public: GraphParameters(bool useDeformedConfigurationInitial /** Not yet supported */, 
                        bool includeIntersectionsInitial /** include intersections */ , 
                        NXOpen::CAE::Post::NodeValueSharingCriterion valueShareingCriterionInitial /** value shareing criterion */ , 
                        NXOpen::CAE::Post::NoDataTreatment noDataTreatmentInitial /** no data treatment */ , 
                        double noDataValueInitial /** no data value */ , 
                        NXOpen::CAE::Post::Abcissa abcissaInitial /** abcissa */ ) :
                    UseDeformedConfiguration(useDeformedConfigurationInitial),
                    IncludeIntersections(includeIntersectionsInitial),
                    ValueShareingCriterion(valueShareingCriterionInitial),
                    NoDataTreatment(noDataTreatmentInitial),
                    NoDataValue(noDataValueInitial),
                    Abcissa(abcissaInitial)
                {
                }
            };

             /** Graph handle */
            public:
            struct GraphIds
            {
                public: /** graph file id */ int GraphFileId;
                public: /** graph set id */ int GraphSetId;
                public: GraphIds() :
                    GraphFileId(),
                    GraphSetId()
                {
                }
                /** Constructor for the GraphIds struct. */ 
                public: GraphIds(int graphFileIdInitial /** graph file id */ , 
                        int graphSetIdInitial /** graph set id */ ) :
                    GraphFileId(graphFileIdInitial),
                    GraphSetId(graphSetIdInitial)
                {
                }
            };

             /** Tolerances used for comparing postview ASCII display files */
            public:
            struct ASCIIDiffTolerances
            {
                public: /** error allowed on coordinate values */double Coorderr;
                public: /** error allowed on data values */double Dataerr;
                public: /** absolute tolerance on rgb values */double Rgbtol;
                public: /** absolute tolerance on coordinate values */double Coordtol;
                public: /** absolute tolerance on data values */double Datatol;
                public: /** zero tolerance on any value */double Zerotol;
                public: ASCIIDiffTolerances() :
                    Coorderr(),
                    Dataerr(),
                    Rgbtol(),
                    Coordtol(),
                    Datatol(),
                    Zerotol()
                {
                }
                /** Constructor for the ASCIIDiffTolerances struct. */ 
                public: ASCIIDiffTolerances(double coorderrInitial /** error allowed on coordinate values */, 
                        double dataerrInitial /** error allowed on data values */, 
                        double rgbtolInitial /** absolute tolerance on rgb values */, 
                        double coordtolInitial /** absolute tolerance on coordinate values */, 
                        double datatolInitial /** absolute tolerance on data values */, 
                        double zerotolInitial /** zero tolerance on any value */) :
                    Coorderr(coorderrInitial),
                    Dataerr(dataerrInitial),
                    Rgbtol(rgbtolInitial),
                    Coordtol(coordtolInitial),
                    Datatol(datatolInitial),
                    Zerotol(zerotolInitial)
                {
                }
            };

            /** Mass size options */
            public: enum MassSizeOption
            {
                MassSizeOptionPercentageOfModel/** percentage of model */ ,
                MassSizeOptionSpecifiedLength/** specified length */ 
            };

             /** Mass display settings */
            public:
            struct Mass
            {
                public: /** mass size option */ NXOpen::CAE::Post::MassSizeOption MassSizeOption;
                public: /** model precent value */ double ModelPrecentValue;
                public: /** specified length value */ double SpecifiedLengthValue;
                public: Mass() :
                    MassSizeOption((NXOpen::CAE::Post::MassSizeOption)0),
                    ModelPrecentValue(),
                    SpecifiedLengthValue()
                {
                }
                /** Constructor for the Mass struct. */ 
                public: Mass(NXOpen::CAE::Post::MassSizeOption massSizeOptionInitial /** mass size option */ , 
                        double modelPrecentValueInitial /** model precent value */ , 
                        double specifiedLengthValueInitial /** specified length value */ ) :
                    MassSizeOption(massSizeOptionInitial),
                    ModelPrecentValue(modelPrecentValueInitial),
                    SpecifiedLengthValue(specifiedLengthValueInitial)
                {
                }
            };

            /** Spring size options */
            public: enum SpringSizeOption
            {
                SpringSizeOptionPercentageOfModel/** percentage of model */ ,
                SpringSizeOptionSpecifiedLength/** specified length */ 
            };

             /** Spring display settings */
            public:
            struct Spring
            {
                public: /** spring size option */ NXOpen::CAE::Post::SpringSizeOption SpringSizeOption;
                public: /** model precent value */ double ModelPrecentValue;
                public: /** specified length value */ double SpecifiedLengthValue;
                public: Spring() :
                    SpringSizeOption((NXOpen::CAE::Post::SpringSizeOption)0),
                    ModelPrecentValue(),
                    SpecifiedLengthValue()
                {
                }
                /** Constructor for the Spring struct. */ 
                public: Spring(NXOpen::CAE::Post::SpringSizeOption springSizeOptionInitial /** spring size option */ , 
                        double modelPrecentValueInitial /** model precent value */ , 
                        double specifiedLengthValueInitial /** specified length value */ ) :
                    SpringSizeOption(springSizeOptionInitial),
                    ModelPrecentValue(modelPrecentValueInitial),
                    SpecifiedLengthValue(specifiedLengthValueInitial)
                {
                }
            };

            private: PostImpl * m_post_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit Post(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~Post();
            /** Returns the list of current Postview Ids  @return   the list of current Postview Ids 
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: std::vector<int> GetPostviewIds
            (
            );
            /** Load an existing result file that is not associated with a solution.
                        Returns a result handle that may be used in PostviewCreate* calls  @return   
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int LoadImportedResult
            (
                const NXString & resultName /** result name */ ,
                const NXString & fileName /** file name */ ,
                const std::vector<NXOpen::Unit *> & units /** units */ 
            );
            /** Load an existing result file that is not associated with a solution.
                        Returns a result handle that may be used in PostviewCreate* calls  @return   
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            int LoadImportedResult
            (
                const char * resultName /** result name */ ,
                const char * fileName /** file name */ ,
                const std::vector<NXOpen::Unit *> & units /** units */ 
            );
            /** Load results for a solution.
                        Returns a result handle that may be used in PostviewCreate* calls  @return   
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::ResultManager::CreateSolutionResult NXOpen::CAE::ResultManager::CreateSolutionResult@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::ResultManager::CreateSolutionResult instead.") int LoadSolutionResult
            (
                NXOpen::CAE::SimSolution * solution /** solution */ 
            );
            /** Load results for a Response analysis event.
                        Returns a result handle that may be used in PostviewCreate* calls  @return   
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int LoadRaEventResult
            (
                NXOpen::CAE::ResponseSimulation::RSEvent * raEvent /** ra event */ 
            );
            /** Unload results that use the input file name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void UnloadResultFile
            (
                const NXString & fileName /** file name */ 
            );
            /** Unload results that use the input file name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            void UnloadResultFile
            (
                const char * fileName /** file name */ 
            );
            /** Unload the input result id. The result id is what was obtained from 
                        LoadImportedResult or LoadSolutionResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void UnloadResult
            (
                int resultId /** result id */ 
            );
            /** Synchronize the Groups in Post-Processing with those in the Simulation Part 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void UpdateUserGroupsFromSimPart
            (
                NXOpen::CAE::SimPart * simpart /** simpart */ 
            );
            /** Create a new post view with default settings on a loaded result id. 
                        The result id is what was obtained from LoadImportedResult or LoadSolutionResult. 
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::Post::CreatePostview NXOpen::CAE::Post::CreatePostview@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::Post::CreatePostview instead.") int CreatePostview
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                int resultId /** result id */ ,
                bool overlay /** overlay */ 
            );
            /** Creates a new post view with the given display color scheme.
                        Only fringe color scheme needs a result but others can be plotted without a result attached to them.  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int CreateNewPostview
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                int resultId /** result id */ ,
                bool overlay /** overlay */ ,
                NXOpen::CAE::Post::DisplayColorSchemeType colorscheme /** colorscheme */ 
            );
            /** Create a new post view with specified result on a loaded result id. 
                        The result id is what was obtained from LoadImportedResult or LoadSolutionResult.
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls 
                        @link NXOpen::CAE::Result::ResultParameters NXOpen::CAE::Result::ResultParameters@endlink  has been replaced by @link NXOpen::CAE::ResultParameters NXOpen::CAE::ResultParameters@endlink 
                        This method is replaced by @link NXOpen::CAE::Post::CreatePostviewForResult NXOpen::CAE::Post::CreatePostviewForResult@endlink  @return  
             <br>  @deprecated Deprecated in NX7.5.1.  Use @link NXOpen::CAE::Post::CreatePostviewForResult NXOpen::CAE::Post::CreatePostviewForResult@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX7.5.1.  Use NXOpen::CAE::Post::CreatePostviewForResult instead.") int CreatePostviewForResult
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                int resultId /** result id */ ,
                bool overlay /** overlay */ ,
                const NXOpen::CAE::Result::ResultParameters & result /** result */ 
            );
            /** Create a new post view with specified result on a loaded result id. 
                        The result id is what was obtained from LoadImportedResult or LoadSolutionResult.
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls 
                        @link NXOpen::CAE::Result::ResultParameters NXOpen::CAE::Result::ResultParameters@endlink  has been replaced by @link NXOpen::CAE::ResultParameters NXOpen::CAE::ResultParameters@endlink 
                        This method is replaced by @link NXOpen::CAE::Post::CreatePostviewForResult NXOpen::CAE::Post::CreatePostviewForResult@endlink  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int CreateNewPostviewForResult
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                int resultId /** result id */ ,
                bool overlay /** overlay */ ,
                const NXOpen::CAE::Result::ResultParameters & result /** result */ ,
                NXOpen::CAE::Post::DisplayColorSchemeType colorscheme /** colorscheme */ 
            );
            /** Create a new cross-section view with specified result on a loaded result id.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int CreateCrossSectionViewForResult
            (
                int viewIndex /** 0 thru 8, viewport number to place cross-section view in */,
                int resultId /** result id */ ,
                NXOpen::CAE::CrossSectionParameters * result /** result */ 
            );
            /** End all post processing activity in the input view port index 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteViewport
            (
                int viewIndex /** 0 thru 8, viewport number to remove post displays */
            );
            /** Rename a postview. 
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewRename
            (
                int postviewId /** postview id */ ,
                const NXString & newName /** new name */ 
            );
            /** Rename a postview. 
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            void PostviewRename
            (
                int postviewId /** postview id */ ,
                const char * newName /** new name */ 
            );
            /** Delete a postview
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewDelete
            (
                int postviewId /** postview id */ 
            );
            /** Set the input postview id as the current postview if it is one of several overlaid postviews
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetCurrentInOverlay
            (
                int postviewId /** postview id */ 
            );
            /** Play or Replay the animation for the input postview id with the input animation parameters.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
                        This interface works only in interactive mode.
                        @link NXOpen::CAE::Post::Animation NXOpen::CAE::Post::Animation@endlink  has been replaced by @link NXOpen::CAE::Post::AnimationParameters NXOpen::CAE::Post::AnimationParameters@endlink 
                        This method is replaced by @link NXOpen::CAE::Post::PostviewAnimationPlay NXOpen::CAE::Post::PostviewAnimationPlay@endlink 
                    
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::Post::PostviewAnimationPlay NXOpen::CAE::Post::PostviewAnimationPlay@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::Post::PostviewAnimationPlay instead.") void PostviewAnimationPlay
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Animation & animation /** animation */ 
            );
            /** Control animation for the input postview id
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
                        This interface works only in interactive mode.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewAnimationControl
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Post::AnimationControl control /** control */ ,
                int frame /** frame number to use with control = SetFrame */,
                bool fullCycle /** to be used with control = FullCycle */,
                int delay /** milliseconds, to use with control = Delay */
            );
            /** Control streamline animation for the input postview id
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        This interface works only in interactive mode.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewAnimationControlStreamline
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::AnimationStreamline & control /** control */ 
            );
            /** Control vector display size animation for the input postview id
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        This interface works only in interactive mode.
                     
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewAnimationVectorDisplaySizeControl
            (
                int postviewId /** postview id */ ,
                bool vectorDisplaySizeControl /** vector display size control */ 
            );
            /** Set the min-max markers on-off for the input postview id.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewMarkerOnOff
            (
                int postviewId /** postview id */ ,
                bool showMarker /** show marker */ 
            );
            /** Apply a loaded template on the input postview id.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyTemplate
            (
                int postviewId /** postview id */ ,
                int templateId /** template id */ 
            );
            /** Apply a template file on the input postview id.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyTemplateFile
            (
                int postviewId /** postview id */ ,
                const NXString & xmlFileName /** xml file name */ 
            );
            /** Apply a template file on the input postview id.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            void PostviewApplyTemplateFile
            (
                int postviewId /** postview id */ ,
                const char * xmlFileName /** xml file name */ 
            );
            /** Perform a Show All on the input postview id.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyShowAll
            (
                int postviewId /** postview id */ 
            );
            /** Set the visibility of an element group container in the input postview id with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyGroupContainerVisibility
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result::GroupContainer container /** container */ ,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of a super element of the current representation in the input postview id with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplySEVisibility
            (
                int postviewId /** postview id */ ,
                int superelementId /** superelement id */ ,
                bool visibility /** visibility */ 
            );
            /** Set the representation of the super element in postivew.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplySERepresentation
            (
                int postviewId /** postview id */ ,
                int superelementId /** superelement id */ ,
                NXOpen::CAE::Result::SuperElementRep representation /** representation */ 
            );
            /** Set the representation of the multiple super elements in postivew.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplySERepresentation
            (
                int postviewId /** postview id */ ,
                const std::vector<int> & superelementIds /** superelement ids */ ,
                NXOpen::CAE::Result::SuperElementRep representation /** representation */ 
            );
            /** Set visibility of all super elements in the postview 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyAllSEVis
            (
                int pvid /** pvid */ ,
                bool visibility /** visibility */ 
            );
            /** Gets all the representations of a super element in postivew.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewAskSERepresentations
            (
                int postviewId /** postview id */ ,
                int superelementId /** superelement id */ ,
                std::vector<NXOpen::CAE::Result::SuperElementRep> & representation /** representation */ 
            );
            /** Set the visibility of an element group container in the input postview id with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyGroupContainerVisibility
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result * result /** result */ ,
                NXOpen::CAE::Result::GroupContainer container /** container */ ,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of an element group container(s) in the input postview id with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyGroupContainerVisibility
            (
                int postviewId /** postview id */ ,
                const std::vector<NXOpen::CAE::Result::GroupContainer> & container /** container */ ,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of an element group container(s) in the input postview id with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyGroupContainerVisibility
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result * result /** result */ ,
                const std::vector<NXOpen::CAE::Result::GroupContainer> & container /** container */ ,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of an element group (index) within a container (1D, 2D, Connector etc) in 
                        the input postview id with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyGroupVisibility
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result::GroupContainer container /** container */ ,
                int group /** 0 thru number of groups in container - 1 */,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of an element group (index) within a container (1D, 2D, Connector etc) in 
                        the input postview id with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyGroupVisibility
            (
                int postviewId /** postview id */ ,
                int resultId /** result id */ ,
                NXOpen::CAE::Result::GroupContainer container /** container */ ,
                int group /** 0 thru number of groups in container - 1 */,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of an element group(s) (index) within a container (1D, 2D, Connector etc) in 
                        the input postview id with immediate effect.
                        The container and group id array are associated 1 to 1 with each other.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyGroupVisibility
            (
                int postviewId /** postview id */ ,
                const std::vector<NXOpen::CAE::Result::GroupContainer> & container /** container */ ,
                const std::vector<int> & group /** group */ ,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of an element group(s) (index) within a container (1D, 2D, Connector etc) in 
                        the input postview id with immediate effect.
                        The container and group id array are associated 1 to 1 with each other.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyGroupVisibility
            (
                int postviewId /** postview id */ ,
                int resultId /** result id */ ,
                const std::vector<NXOpen::CAE::Result::GroupContainer> & container /** container */ ,
                const std::vector<int> & group /** group */ ,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of a coordinate system container in the input postview id with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyCsysContainerVisibility
            (
                int postviewId /** postview id */ ,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of a coordinate system (id) in
                        the input postview id with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewApplyCsysVisibility
            (
                int postviewId /** postview id */ ,
                int id /** coordinate system id */,
                bool visibility /** visibility */ 
            );
            /** Control visibility of one or more usergroups with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewApplyUserGroupVisibility
            (
                int postviewId /** postview id */ ,
                const std::vector<int> & usergroupIds /** usergroup ids */ ,
                NXOpen::CAE::Post::GroupVisibility visibility /** visibility */ 
            );
            /** Control visibility of one or more usergroups with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewApplyUserGroupVisibility
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result * result /** result */ ,
                const std::vector<int> & usergroupIds /** usergroup ids */ ,
                NXOpen::CAE::Post::GroupVisibility visibility /** visibility */ 
            );
            /** Control visibility of one or more usergroups with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewApplyUserGroupVisibility
            (
                int postviewId /** postview id */ ,
                const std::vector<NXOpen::CAE::Result *> & results /** results */ ,
                const std::vector<int> & usergroupIds /** usergroup ids */ ,
                NXOpen::CAE::Post::GroupVisibility visibility /** visibility */ 
            );
            /** Returns the list of gids as per the group names provided.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewGetUserGroupGids
            (
                int postviewId /** postview id */ ,
                const std::vector<NXString> & usergroupNames /** usergroup names */ ,
                std::vector<int> & usergroupsGids /** usergroups gids */ 
            );
            /** Set the fringe style in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::CAE::Post::PostviewSetStyle NXOpen::CAE::Post::PostviewSetStyle@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::CAE::Post::PostviewSetStyle instead.") void PostviewSetStyle
            (
                int postviewId /** postview id */ ,
                int showStyle /** show style */ ,
                NXOpen::CAE::Post::Style style /** style */ 
            );
            /** Set the fringe style in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetStyle
            (
                int postviewId /** postview id */ ,
                int showStyle /** show style */ ,
                NXOpen::CAE::Post::PlotStyle style /** style */ 
            );
            /** Set the fringe plot colorbar style in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult.
                        Plot colorbar style as smooth or banded can be set and the default plot style will be smooth. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetColorbarStyle
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Post::ColorbarStyle colorbarStyle /** colorbar style */ 
            );
            /** Set the color scheme in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostViewSetColorScheme
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Post::DisplayColorSchemeType colorScheme /** color scheme */ 
            );
            /** Set the target operator in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetTarget
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Post::Target target /** target */ 
            );
            /** Set the result for color display in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
                        @link NXOpen::CAE::Result::ResultParameters NXOpen::CAE::Result::ResultParameters@endlink  has been replaced by @link NXOpen::CAE::ResultParameters NXOpen::CAE::ResultParameters@endlink 
                        This method is replaced by @link NXOpen::CAE::Post::PostviewSetResult NXOpen::CAE::Post::PostviewSetResult@endlink 
             <br>  @deprecated Deprecated in NX7.5.1.  Use @link NXOpen::CAE::Post::PostviewSetResult NXOpen::CAE::Post::PostviewSetResult@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX7.5.1.  Use NXOpen::CAE::Post::PostviewSetResult instead.") void PostviewSetResult
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Result::ResultParameters & result /** result */ 
            );
            /** Set the band style in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetBandStyle
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Post::BandStyle bandstyle /** bandstyle */ 
            );
            /** Set the result for color display in the input cross-section view id. Needs a CrossSectionViewUpdate call to take effect.
                        The input cross-section view id is what was returned from CreateCrossSectionViewForResult 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void CrossSectionViewSetResult
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::CrossSectionParameters * result /** result */ 
            );
            /** Set the result for deformed shape in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
                        @link NXOpen::CAE::Result::DeformationParameters NXOpen::CAE::Result::DeformationParameters@endlink  has been replaced by @link NXOpen::CAE::DeformationParameters NXOpen::CAE::DeformationParameters@endlink 
                        This method is replaced by @link NXOpen::CAE::Post::PostviewSetDeformation NXOpen::CAE::Post::PostviewSetDeformation@endlink 
             <br>  @deprecated Deprecated in NX7.5.1.  Use @link NXOpen::CAE::Post::PostviewSetDeformation NXOpen::CAE::Post::PostviewSetDeformation@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX7.5.1.  Use NXOpen::CAE::Post::PostviewSetDeformation instead.") void PostviewSetDeformation
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Result::DeformationParameters & deformation /** deformation */ 
            );
            /** Set the velocity field for streamline extraction in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
                        @link NXOpen::CAE::Result::VelocityParameters NXOpen::CAE::Result::VelocityParameters@endlink  is no longer been supported
                        This method is replaced by @link NXOpen::CAE::Post::PostviewSetStreamlineVelocity NXOpen::CAE::Post::PostviewSetStreamlineVelocity@endlink 
             <br>  @deprecated Deprecated in NX7.5.1.  Use @link NXOpen::CAE::Post::PostviewSetStreamlineVelocity NXOpen::CAE::Post::PostviewSetStreamlineVelocity@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX7.5.1.  Use NXOpen::CAE::Post::PostviewSetStreamlineVelocity instead.") void PostviewSetStreamlineVelocity
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Result::VelocityParameters & velocity /** velocity */ 
            );
            /** Set the seed set to use for streamline extraction in the input postview id. Needs a PostviewUpdate call to take effect.
                         The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewSetStreamlineSeedSet
            (
                int postviewId /** postview id */ ,
                int seedsetId /** seedset id */ 
            );
            /** Set the mark display options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetMark
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Mark & mark /** mark */ 
            );
            /** Set the streamline display options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewSetStreamline
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Streamline & streamline /** streamline */ 
            );
            /** Set the primary display to be deformed/undeformed in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetDeformed
            (
                int postviewId /** postview id */ ,
                bool deformed /** deformed */ 
            );
            /** Set the undeformed display in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetUndeformed
            (
                int postviewId /** postview id */ ,
                bool undeformed /** undeformed */ 
            );
            /** Set synchronization of the color and deformed display in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetColorDisplayDeformationSynchronization
            (
                int postviewId /** postview id */ ,
                bool synchronization /** synchronization */ 
            );
            /** Set the primary display to be deformed/undeformed in the input postview id. Specify any additional
                        undeformed display and whether the load case and iteration are to sunchronized for the 
                        color display and deformed shape. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetDeformedUndeformedSynchronization
            (
                int postviewId /** postview id */ ,
                bool showDeformedPrimaryDisplay /** show deformed primary display */ ,
                bool showUndeformedModel /** show undeformed model */ ,
                bool synchronizeLoadCaseAndIteration /** synchronize load case and iteration */ 
            );
            /** Set colorbar options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetColorbar
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Colorbar & colorbar /** colorbar */ 
            );
            /** Set color bar options along with custom overwrite options in the input postview id. 
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::CAE::Post::PostviewSetColorbar NXOpen::CAE::Post::PostviewSetColorbar@endlink  and @link NXOpen::CAE::Post::PostviewSetColorbar NXOpen::CAE::Post::PostviewSetColorbar@endlink  instead. <br>  

             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::CAE::Post::PostviewSetColorbar and NXOpen::CAE::Post::PostviewSetColorbar instead.") void PostviewSetColorbar
            (
                int postviewId /** Post view id.*/,
                const NXOpen::CAE::Post::Colorbar & colorbar /** Color bar.*/,
                bool customOverwrite /** custom overwrite */ ,
                const std::vector<double> & rangeValue /** Range values.*/,
                const std::vector<NXOpen::NXColor::Rgb> & rangeColors /** Range colors.*/
            );
            /** Set color bar options along with custom overwrite value or color options in the input postview id. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetColorbar
            (
                int postviewId /** Post view id.*/,
                const NXOpen::CAE::Post::Colorbar & colorbar /** Color bar.*/,
                bool customOverwriteValue /** custom overwrite value */ ,
                bool customOverwriteColor /** custom overwrite color */ ,
                const std::vector<double> & rangeValue /** Range values.*/,
                const std::vector<NXOpen::NXColor::Rgb> & rangeColors /** Range colors.*/
            );
            /** Get colorbar options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Post::Colorbar PostviewGetColorbar
            (
                int postviewId /** postview id */ ,
                int* customOverwrite /** custom overwrite */ 
            );
            /** Get colorbar options along with custom overwrite options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult  @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Post::Colorbar PostviewGetColorbarWithCustomOptions
            (
                int postviewId /** postview id */ ,
                bool* customOverwriteValue /** custom overwrite value */ ,
                bool* customOverwriteColor /** custom overwrite color */ 
            );
            /** Set show header option in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetShowHeader
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Post::ShowHeader showHeader /** show header */ 
            );
            /** Set headerlines in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetHeaderlines
            (
                int postviewId /** postview id */ ,
                const std::vector<NXOpen::CAE::Post::Headerlines> & headerlines /** headerlines */ 
            );
            /** Get show header option in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Post::ShowHeader PostviewGetShowHeader
            (
                int postviewId /** postview id */ 
            );
            /** Set legend options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::CAE::Post::PostviewSetShowHeader NXOpen::CAE::Post::PostviewSetShowHeader@endlink  and @link NXOpen::CAE::Post::PostviewSetColorbar NXOpen::CAE::Post::PostviewSetColorbar@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::CAE::Post::PostviewSetShowHeader and NXOpen::CAE::Post::PostviewSetColorbar instead.") void PostviewSetLegend
            (
                int postviewId /** postview id */ ,
                bool showLegend /** show legend */ ,
                NXOpen::CAE::Post::Legend legend /** legend */ 
            );
            /** Set edge and face styles and colors for both primary and undeformed displays in the input 
                        postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link NXOpen::CAE::Post::PostviewSetEdgeFace NXOpen::CAE::Post::PostviewSetEdgeFace@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use NXOpen::CAE::Post::PostviewSetEdgeFace instead.") void PostviewSetEdgeFace
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::EdgeFace & primaryEdgeface /** primary edgeface */ ,
                const NXOpen::CAE::Post::EdgeFace & undeformedEdgeface /** undeformed edgeface */ 
            );
            /** Set edge and face styles and colors for primary display in the input 
                        postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreateCrossSectionViewForResult 
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link NXOpen::CAE::Post::PostviewSetEdgeFace NXOpen::CAE::Post::PostviewSetEdgeFace@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use NXOpen::CAE::Post::PostviewSetEdgeFace instead.") void PostviewSetEdgeFace
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::EdgeFace & edgeface /** edgeface */ 
            );
            /** Orients and disables all rotations in the input 
                        postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreateCrossSectionViewForResult 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void CrossSectionViewSetLockRotation
            (
                int postviewId /** postview id */ ,
                bool lockRotation /** lock rotation */ 
            );
            /** Set text color used for legend and identify in the input postview id. The other options are not 
                        yet supported. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetText
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Text & text /** text */ 
            );
            /** Get text color used for legend in the input postview id.Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Post::Text PostviewGetText
            (
                int postviewId /** postview id */ 
            );
            /** Set text formating used for legend and identify in the input postview id. The other options are not 
                        yet supported. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetFormat
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Post::Format format /** format */ ,
                int numdecimal /** numdecimal */ 
            );
            /** Get text formating used for legend in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewGetFormat
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Post::Format* format /** format */ ,
                int* numdecimal /** numdecimal */ 
            );
            /** Set legend positioning in the input postview id. The other options are not 
                        yet supported. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  @deprecated Deprecated in NX12.0.0.  Set @link NXOpen::CAE::PostPreference NXOpen::CAE::PostPreference@endlink  Position set through post preferences instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Set NXOpen::CAE::PostPreference Position set through post preferences instead.") void PostviewSetPosition
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Post::Position position /** position */ 
            );
            /** Set min-max marker options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  @deprecated Deprecated in NX9.0.0.  Set @link NXOpen::CAE::PostAnnotation NXOpen::CAE::PostAnnotation@endlink  show hide instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Set NXOpen::CAE::PostAnnotation show hide instead.") void PostviewSetMarker
            (
                int postviewId /** postview id */ ,
                bool showMarker /** show marker */ ,
                NXOpen::CAE::Post::Marker marker /** marker */ 
            );
            /** Set min-max marker box options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  @deprecated Deprecated in NX9.0.0.  Set @link NXOpen::CAE::PostAnnotation NXOpen::CAE::PostAnnotation@endlink  Display Attribute directly instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Set NXOpen::CAE::PostAnnotation Display Attribute directly instead.") void PostviewSetAnnotationBox
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::AnnotationBox & annotationBox /** annotation box */ 
            );
            /** Set font size options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetFontSize
            (
                int postviewId /** postview id */ ,
                bool autoFontSize /** auto font size */ ,
                double fontScale /** font scale */ 
            );
            /** Set font size options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewGetFontSize
            (
                int postviewId /** postview id */ ,
                int* autoFontSize /** auto font size */ ,
                double* fontScale /** font scale */ 
            );
            /** Set cutting-plane options in the input postview id. Needs a PostviewUpdate call to take effect.
                        In addition, needs to have @link NXOpen::CAE::Post::Target NXOpen::CAE::Post::Target@endlink  set to @link NXOpen::CAE::Post::TargetAxisSymmetry3D NXOpen::CAE::Post::TargetAxisSymmetry3D@endlink  
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetAxisymmetric
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Axisymmetric & axisymmetric /** axisymmetric */ 
            );
            /** Set clipping options in the input postview id. Needs a PostviewUpdate call to take effect.
                        In addition, needs to have the @link NXOpen::CAE::Post::Target NXOpen::CAE::Post::Target@endlink  set to @link NXOpen::CAE::Post::TargetCuttingPlane NXOpen::CAE::Post::TargetCuttingPlane@endlink  
                        for the model to appear clipped.
                        @link NXOpen::CAE::Post::Clipping NXOpen::CAE::Post::Clipping@endlink  has been replaced by @link NXOpen::CAE::ClippingParameters NXOpen::CAE::ClippingParameters@endlink 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  @deprecated Deprecated in NX7.5.1.  Use @link NXOpen::CAE::Post::PostviewSetClipping NXOpen::CAE::Post::PostviewSetClipping@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX7.5.1.  Use NXOpen::CAE::Post::PostviewSetClipping instead.") void PostviewSetClipping
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Clipping & clipping /** clipping */ 
            );
            /** Set lighted option in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetLighting
            (
                int postviewId /** postview id */ ,
                bool lighted /** If true fringe display is drawn with the lighting setting provided in view setting  
                                if false fringe display drawn with the color set color without botherring about surface normal and view angle*/
            );
            /** Set compression option in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetCompression
            (
                int postviewId /** postview id */ ,
                bool compress /** true -  This option will compress the memory needed for displaying the model.Option will draw the model 
                                        as one connected set.
                                false - This option will draw the each element as separatly to improve the quality of the display*/,
                double featureangle /** Angle is used to determine if the element edge is feature edge or not. If angle between 
                              the elements under consideration is more than the given angle then separete element normal 
                              are used for drawing the faces */,
                double banddifference /** Value is used check edge vertices result values comparision in case element-nodal and elemental display. 
                                If the value of the vertices are in same band then the differnce between those values 
                                should less than differnce of the banddifference mentioned. If the difference is more than this 
                                value then those will be considered as difference vertices*/
            );
            /** Set cutting-plane options in the input postview id. Needs a PostviewUpdate call to take effect.
                        In addition, needs to have the Target set to CuttingPlane for the model to appear clipped.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetClipping
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::ClippingParameters * clipping /** clipping */ 
            );
            /** Set the visibility of an element group container in the input postview id. 
                        Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetGroupContainerVisibility
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result::GroupContainer container /** container */ ,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of an element group (index) within a container (1D, 2D, Connector etc) in 
                        the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetGroupVisibility
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result::GroupContainer container /** container */ ,
                int group /** 0 thru number of groups in container - 1 */,
                bool visibility /** visibility */ 
            );
            /** Make the input postview id up-to-date with all the settings made via PostviewSet* methods so far.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewUpdate
            (
                int postviewId /** postview id */ 
            );
            /** Capture an animated gif image for an input postview id is that is already animating.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
                        This interface works only in interactive mode.
                    
             <br>  @deprecated Deprecated in NX1926.0.0.  use @link NXOpen::CAE::Post::PostviewCaptureAllViewportsToGif NXOpen::CAE::Post::PostviewCaptureAllViewportsToGif@endlink  for multiple animations. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  use NXOpen::CAE::Post::PostviewCaptureAllViewportsToGif for multiple animations.") void PostviewCaptureAnimatedGif
            (
                int postviewId /** postview id */ ,
                const NXString & fileName /** file name */ ,
                bool includeOverlayedPostviews /** include overlayed postviews */ ,
                bool whiteBackground /** white background */ 
            );
            /** Capture an animated gif image for an input postview id is that is already animating.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
                        This interface works only in interactive mode.
                    
             <br>  @deprecated Deprecated in NX1926.0.0.  use @link NXOpen::CAE::Post::PostviewCaptureAllViewportsToGif NXOpen::CAE::Post::PostviewCaptureAllViewportsToGif@endlink  for multiple animations. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            void PostviewCaptureAnimatedGif
            (
                int postviewId /** postview id */ ,
                const char * fileName /** file name */ ,
                bool includeOverlayedPostviews /** include overlayed postviews */ ,
                bool whiteBackground /** white background */ 
            );
            /** Export the display of the input postview id to the specified format. VRML is not yet supported.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewExportDisplay
            (
                int postviewId /** postview id */ ,
                const NXString & fileName /** file name */ ,
                NXOpen::CAE::Post::Export format /** format */ ,
                bool ignoreClipping /** ignore clipping */ ,
                bool ignoreVisibility /** ignore visibility */ 
            );
            /** Export the display of the input postview id to the specified format. VRML is not yet supported.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            void PostviewExportDisplay
            (
                int postviewId /** postview id */ ,
                const char * fileName /** file name */ ,
                NXOpen::CAE::Post::Export format /** format */ ,
                bool ignoreClipping /** ignore clipping */ ,
                bool ignoreVisibility /** ignore visibility */ 
            );
            /** Save all the setting of the input postview id to a template xml file, capture image,
                        and load template for future use.
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult.
                        Returns a template handle that may be used in PostviewApplyTemplate and Template* calls   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int PostviewSaveTemplate
            (
                int postviewId /** postview id */ 
            );
            /** Save all the setting of the input postview id to a template xml file. no image capture.
                        xml file is not loaded, and can be reused only via PostviewApplyTemplateFile 
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewExportTemplate
            (
                int postviewId /** postview id */ ,
                const NXString & xmlFileName /** xml file name */ 
            );
            /** Save all the setting of the input postview id to a template xml file. no image capture.
                        xml file is not loaded, and can be reused only via PostviewApplyTemplateFile 
                        The input postview id is what was returned from CreatePostview, CreatePostviewForResult, or CreateCrossSectionViewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            void PostviewExportTemplate
            (
                int postviewId /** postview id */ ,
                const char * xmlFileName /** xml file name */ 
            );
            /** Activate or deactivate the laminate critical ply id label display for a given post view. The critical
                        ply id display is only supported for @link NXOpen::CAE::LaminateGraphicalReport NXOpen::CAE::LaminateGraphicalReport@endlink  results, for 
                        specific datasets. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void PostviewSetCriticalPlyIdDisplay
            (
                int postviewId /** Id of the post view on which the display is to be (de)activated */,
                bool displayCriticalPlies /** If true, the critical ply ids will be displayed on elements */
            );
            /** Activate or deactivate the laminate layer ply id label display for a given post view. The critical
                        layer id display is only supported for @link NXOpen::CAE::LaminateGraphicalReport NXOpen::CAE::LaminateGraphicalReport@endlink  results, for 
                        specific datasets. 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void PostviewSetCriticalLayerIdDisplay
            (
                int postviewId /** Id of the post view on which the display is to be (de)activated */,
                bool displayCriticalLayers /** If true, the critical layer ids will be displayed on elements */
            );
            /** Activate or deactivate the laminate critical loadcase id label display for a given post view. The critical
                        loadcase id display is only supported for @link NXOpen::CAE::LaminateGraphicalReport NXOpen::CAE::LaminateGraphicalReport@endlink  results, for 
                        specific datasets. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void PostviewSetCriticalLoadIdDisplay
            (
                int postviewId /** Id of the post view on which the display is to be (de)activated */,
                bool displayCriticalLoads /** If true, the critical loadcase ids will be displayed on elements */
            );
            /** Create a User Group using element or node labels. Returns a usergroup handle that 
                        may be used in UserGroup* calls and in PostViewApplyUserGroupVisibility  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int CreateUserGroupFromEntityLabels
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::CaeGroupCollection::EntityType entityType /** entity type */ ,
                const std::vector<int> & labels /** labels */ 
            );
            /** Create a User Group using element or node labels. Returns a usergroup handle that 
                        may be used in UserGroup* calls and in PostViewApplyUserGroupVisibility 
                        Added result tag in version 12 for super element support @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int CreateUserGroupFromEntityLabels
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result * result /** result */ ,
                NXOpen::CAE::CaeGroupCollection::EntityType entityType /** entity type */ ,
                const std::vector<int> & labels /** labels */ 
            );
            /** Delete a User Group. 
                        The input usergroup id is what was returned from CreateUserGroupFromEntityLabels 
             <br>  @deprecated Deprecated in NX11.0.0.  use @link NXOpen::CAE::Post::UserGroupRename NXOpen::CAE::Post::UserGroupRename@endlink  with resulttag. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  use NXOpen::CAE::Post::UserGroupRename with resulttag.") void UserGroupRename
            (
                int usergroupId /** usergroup id */ ,
                const NXString & newName /** new name */ 
            );
            /** Delete a User Group. 
                        The input usergroup id is what was returned from CreateUserGroupFromEntityLabels 
             <br>  @deprecated Deprecated in NX11.0.0.  use @link NXOpen::CAE::Post::UserGroupRename NXOpen::CAE::Post::UserGroupRename@endlink  with resulttag. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void UserGroupRename
            (
                int usergroupId /** usergroup id */ ,
                const char * newName /** new name */ 
            );
            /** Rename a User Group. 
                        The input usergroup id is what was returned from CreateUserGroupFromEntityLabels 
             <br>  @deprecated Deprecated in NX11.0.0.  use @link NXOpen::CAE::Post::UserGroupDelete NXOpen::CAE::Post::UserGroupDelete@endlink  with resulttag. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  use NXOpen::CAE::Post::UserGroupDelete with resulttag.") void UserGroupDelete
            (
                int usergroupId /** usergroup id */ 
            );
            /** Create a seed set that can be used to specify the start points for streamline extraction. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a seedset handle that maye be used in StreamlineSeedSet* calls and PostVeiwSetStreamlineSeedSet  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int CreateStreamlineSeedSet
            (
                int postviewId /** postview id */ ,
                const NXString & name /** name */ ,
                const std::vector<NXOpen::CAE::Post::StreamlineSeed> & seeds /** seeds */ 
            );
            /** Create a seed set that can be used to specify the start points for streamline extraction. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a seedset handle that maye be used in StreamlineSeedSet* calls and PostVeiwSetStreamlineSeedSet  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            int CreateStreamlineSeedSet
            (
                int postviewId /** postview id */ ,
                const char * name /** name */ ,
                const std::vector<NXOpen::CAE::Post::StreamlineSeed> & seeds /** seeds */ 
            );
            /** Delete a Seed Set. 
                        The input seedset id is what was returned from @link NXOpen::CAE::Post::CreateStreamlineSeedSet NXOpen::CAE::Post::CreateStreamlineSeedSet@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void StreamlineSeedSetDelete
            (
                int seedsetId /** seedset id */ 
            );
            /** Create a path from an ordered set of node ids on the input postview id. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a path handle that maye be used in CreateSpatialGraph and Path* calls  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  use @link NXOpen::CAE::ResultManager::CreateQueryCurvePost NXOpen::CAE::ResultManager::CreateQueryCurvePost@endlink  with nodes, elements or free points. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  use NXOpen::CAE::ResultManager::CreateQueryCurvePost with nodes, elements or free points.") int CreatePathFromNodeIds
            (
                int postviewId /** postview id */ ,
                const NXString & name /** name */ ,
                const std::vector<int> & nodeIds /** node ids */ 
            );
            /** Create a path from an ordered set of node ids on the input postview id. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a path handle that maye be used in CreateSpatialGraph and Path* calls  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  use @link NXOpen::CAE::ResultManager::CreateQueryCurvePost NXOpen::CAE::ResultManager::CreateQueryCurvePost@endlink  with nodes, elements or free points. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            int CreatePathFromNodeIds
            (
                int postviewId /** postview id */ ,
                const char * name /** name */ ,
                const std::vector<int> & nodeIds /** node ids */ 
            );
            /** Create a path from an ordered set of element ids on the input postview id. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a path handle that maye be used in CreateSpatialGraph and Path* calls  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  use @link NXOpen::CAE::ResultManager::CreateQueryCurvePost NXOpen::CAE::ResultManager::CreateQueryCurvePost@endlink  with nodes, elements or free points. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  use NXOpen::CAE::ResultManager::CreateQueryCurvePost with nodes, elements or free points.") int CreatePathFromElemIds
            (
                int postviewId /** postview id */ ,
                const NXString & name /** name */ ,
                const std::vector<int> & elemIds /** elem ids */ 
            );
            /** Create a path from an ordered set of element ids on the input postview id. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a path handle that maye be used in CreateSpatialGraph and Path* calls  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  use @link NXOpen::CAE::ResultManager::CreateQueryCurvePost NXOpen::CAE::ResultManager::CreateQueryCurvePost@endlink  with nodes, elements or free points. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            int CreatePathFromElemIds
            (
                int postviewId /** postview id */ ,
                const char * name /** name */ ,
                const std::vector<int> & elemIds /** elem ids */ 
            );
            /** Create a path from an ordered set of points on the input postview id. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a path handle that maye be used in CreateSpatialGraph and Path* calls  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  use @link NXOpen::CAE::ResultManager::CreateQueryCurvePost NXOpen::CAE::ResultManager::CreateQueryCurvePost@endlink  with nodes, elements or free points. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  use NXOpen::CAE::ResultManager::CreateQueryCurvePost with nodes, elements or free points.") int CreatePathFromPoints
            (
                int postviewId /** postview id */ ,
                const NXString & name /** name */ ,
                const std::vector<double> & points /** points */ ,
                int numberOfInsertPointsPerSegment /** greater than or equal to 0 */
            );
            /** Create a path from an ordered set of points on the input postview id. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a path handle that maye be used in CreateSpatialGraph and Path* calls  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  use @link NXOpen::CAE::ResultManager::CreateQueryCurvePost NXOpen::CAE::ResultManager::CreateQueryCurvePost@endlink  with nodes, elements or free points. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            int CreatePathFromPoints
            (
                int postviewId /** postview id */ ,
                const char * name /** name */ ,
                const std::vector<double> & points /** points */ ,
                int numberOfInsertPointsPerSegment /** greater than or equal to 0 */
            );
            /** Delete the input path id. 
                        The input path id is what was returned from CreatePathFromNodeIds or CreatePathFromPoints 
             <br>  @deprecated Deprecated in NX11.0.0.  use @link NXOpen::CAE::ResultManager::DeleteQueryCurve NXOpen::CAE::ResultManager::DeleteQueryCurve@endlink  to delete the query curves <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  use NXOpen::CAE::ResultManager::DeleteQueryCurve to delete the query curves") void PathDelete
            (
                int pathId /** path id */ 
            );
            /** Create a graph by extracting data from the input postview id, along an input path id 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        The input path id is what was returned from CreatePathFromNodeIds or CreatePathFromPoints.
                        Returns a graph handle that may be used in PlotGraph and Graph* calls  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::Post::GraphIds CreateSpatialGraph
            (
                int postviewId /** postview id */ ,
                const NXString & name /** name */ ,
                const NXOpen::CAE::Post::GraphParameters & graph /** graph */ ,
                int pathId /** path id */ 
            );
            /** Create a graph by extracting data from the input postview id, along an input path id 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        The input path id is what was returned from CreatePathFromNodeIds or CreatePathFromPoints.
                        Returns a graph handle that may be used in PlotGraph and Graph* calls  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::Post::GraphIds CreateSpatialGraph
            (
                int postviewId /** postview id */ ,
                const char * name /** name */ ,
                const NXOpen::CAE::Post::GraphParameters & graph /** graph */ ,
                int pathId /** path id */ 
            );
            /** Create a graph by extracting data from the input postview id, at the input node label or point,
                        for the input iterations. Iterations specified as start, end and step.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        The input path id is what was returned from CreatePathFromNodeIds or CreatePathFromPoints.
                        Returns a graph handle that may be used in PlotGraph and Graph* calls  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::Post::GraphIds CreateHistoryGraph
            (
                int postviewId /** postview id */ ,
                const NXString & name /** name */ ,
                const NXOpen::CAE::Post::GraphParameters & graph /** graph */ ,
                int startIteration /** start iteration */ ,
                int endIteration /** end iteration */ ,
                int iterationIncrement /** iteration increment */ ,
                int nodeLabel /** node label */ ,
                const std::vector<double> & point /** point */ 
            );
            /** Create a graph by extracting data from the input postview id, at the input node label or point,
                        for the input iterations. Iterations specified as start, end and step.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        The input path id is what was returned from CreatePathFromNodeIds or CreatePathFromPoints.
                        Returns a graph handle that may be used in PlotGraph and Graph* calls  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::Post::GraphIds CreateHistoryGraph
            (
                int postviewId /** postview id */ ,
                const char * name /** name */ ,
                const NXOpen::CAE::Post::GraphParameters & graph /** graph */ ,
                int startIteration /** start iteration */ ,
                int endIteration /** end iteration */ ,
                int iterationIncrement /** iteration increment */ ,
                int nodeLabel /** node label */ ,
                const std::vector<double> & point /** point */ 
            );
            /** Plot or Overlay the input graph specfied by graph_ids. 
                        The input graph_ids is what was returned from CreateSpatialGraph or CreateHistoryGraph 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PlotGraph
            (
                int viewIndex /** view index */ ,
                const NXOpen::CAE::Post::GraphIds & graphIds /** graph ids */ ,
                bool overlay /** overlay */ 
            );
            /** Delete the input graph specfied by graph_ids.
                        The input graph_ids is what was returned from CreateSpatialGraph or CreateHistoryGraph 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void GraphDelete
            (
                const NXOpen::CAE::Post::GraphIds & graphIds /** graph ids */ 
            );
            /** Delete a loaded template xml file specified by template_id.
                        The input template_id is what was returned from PostviewSaveTemplate or TemplateSearch 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void TemplateDelete
            (
                int templateId /** template id */ 
            );
            /** Rename a loaded template xml file specified by template_id.
                        The input template_id is what was returned from PostviewSaveTemplate or TemplateSearch 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void TemplateRename
            (
                int templateId /** template id */ ,
                const NXString & newName /** new name */ 
            );
            /** Rename a loaded template xml file specified by template_id.
                        The input template_id is what was returned from PostviewSaveTemplate or TemplateSearch 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            void TemplateRename
            (
                int templateId /** template id */ ,
                const char * newName /** new name */ 
            );
            /** Search for a template handle for loaded template xml file specified by its name.
                        Returns a template handle that may be used in PostviewApplyTemplate and Template* calls  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int TemplateSearch
            (
                const NXString & name /** name */ 
            );
            /** Search for a template handle for loaded template xml file specified by its name.
                        Returns a template handle that may be used in PostviewApplyTemplate and Template* calls  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            int TemplateSearch
            (
                const char * name /** name */ 
            );
            /** Set a loaded template as the default postview settings to be used for all subsequent
                        PostviewCreate calls.
                        The input template_id is what was returned from PostviewSaveTemplate or TemplateSearch 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void TemplateSetAsDefault
            (
                int templateId /** template id */ 
            );
            /** Delete all loaded template xml files 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteAllTemplates
            (
            );
            /** Loads a template xml files from user specified location  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXString LoadTemplate
            (
                const NXString & filename /** filename */ ,
                const NXString & name /** name */ ,
                int* templateId /** template id */ 
            );
            /** Loads a template xml files from user specified location  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXString LoadTemplate
            (
                const char * filename /** filename */ ,
                const char * name /** name */ ,
                int* templateId /** template id */ 
            );
            /** Search and load template xml files 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void ReloadTemplates
            (
            );
            /** Use factory defaults rather than a template for the default postview settings to be used
                        in all subsequent PostviewCreate calls 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetFactoryDefaultTemplate
            (
            );
            /** Utility to compare post ascii files  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXString CompareDisplayFiles
            (
                const NXString & benchmarkFileName /** benchmark file name */ ,
                const NXString & testFileName /** test file name */ ,
                const NXOpen::CAE::Post::ASCIIDiffTolerances & tolerances /** tolerances */ 
            );
            /** Utility to compare post ascii files  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXString CompareDisplayFiles
            (
                const char * benchmarkFileName /** benchmark file name */ ,
                const char * testFileName /** test file name */ ,
                const NXOpen::CAE::Post::ASCIIDiffTolerances & tolerances /** tolerances */ 
            );
            /** Create a new post view with default settings on a loaded result id. 
                        The result id is what was obtained from LoadImportedResult or LoadSolutionResult. 
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int CreatePostview
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                NXOpen::CAE::Result * result /** result */ ,
                bool overlay /** overlay */ 
            );
            /** Create a new post view with default settings on a loaded result id. 
                        The result id is what was obtained from LoadImportedResult or LoadSolutionResult. 
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int CreateNewPostview
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                NXOpen::CAE::Result * result /** result */ ,
                bool overlay /** overlay */ ,
                NXOpen::CAE::Post::DisplayColorSchemeType colorscheme /** colorscheme */ 
            );
            /** Create a new post view with specified result on a loaded result id. 
                        The result id is what was obtained from LoadImportedResult or LoadSolutionResult.
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int CreatePostviewForResult
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                NXOpen::CAE::Result * result /** result */ ,
                bool overlay /** overlay */ ,
                NXOpen::CAE::ResultParameters * resultParamter /** result paramter */ 
            );
            /** Create a new post view with specified result on a loaded result id. 
                        The result id is what was obtained from LoadImportedResult or LoadSolutionResult.
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int CreateNewPostviewForResult
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                NXOpen::CAE::Result * result /** result */ ,
                bool overlay /** overlay */ ,
                NXOpen::CAE::ResultParameters * resultParamter /** result paramter */ ,
                NXOpen::CAE::Post::DisplayColorSchemeType colorscheme /** colorscheme */ 
            );
            /** Returns the @link NXOpen::CAE::Result NXOpen::CAE::Result@endlink  and a copy of the @link NXOpen::CAE::ResultParameters NXOpen::CAE::ResultParameters@endlink  which define the 
                        input postview ID.   
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void GetResultForPostview
            (
                int postviewId /** postview ID */,
                NXOpen::CAE::Result ** result /** @link NXOpen::CAE::Result NXOpen::CAE::Result@endlink  which defines input postview    */,
                NXOpen::CAE::ResultParameters ** resultParamter /** a copy of the @link NXOpen::CAE::ResultParameters NXOpen::CAE::ResultParameters@endlink  which defines input postview, It is user's responsibility to destroy the result parameters object once done
                            using @link NXOpen::CAE::ResultManager::DeleteResultParameters NXOpen::CAE::ResultManager::DeleteResultParameters@endlink , in order to free up system resources*/
            );
            /** Create a new post view with specified result on a loaded result id. 
                        Also create overlays of any loaded super element results associated
                        with the result id and set the color bar ranges to the viewport displayed.
                        Set the deformation scale to Absolute with a scale factor of 1.
                        The result id is what was obtained from LoadImportedResult or LoadSolutionResult.
                        Returns an array of postview handles that may be used in Postview*, CreatePath* and CreateGraph* calls 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void CreatePostviewsForResultAndSE
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                NXOpen::CAE::Result * result /** result */ ,
                NXOpen::CAE::ResultParameters * resultParamter /** result paramter */ ,
                std::vector<int> & postviewIds /** postview ids */ 
            );
            /** Set the result for color display in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetResult
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::ResultParameters * resultParamter /** result paramter */ 
            );
            /** Set the result for deformed shape in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetDeformation
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::DeformationParameters * deformation /** deformation */ 
            );
            /** Set the velocity field for streamline extraction in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewSetStreamlineVelocity
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::BaseResultType * velocity /** velocity */ 
            );
            /** Creates min/max annotation object  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::PostAnnotationBuilder NXOpen::CAE::PostAnnotationBuilder@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::PostAnnotationBuilder instead.") NXOpen::CAE::PostAnnotation * CreateAnnotation
            (
                int postviewId /** postview id */ ,
                const NXString & name /** Annotation name*/,
                int num /** Number of minimum or maximum*/,
                bool max /** true means maximum, false is minimum*/,
                const std::vector<NXString> & usertext /** Additional text in each box*/
            );
            /** Creates min/max annotation object  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::PostAnnotationBuilder NXOpen::CAE::PostAnnotationBuilder@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::CAE::PostAnnotation * CreateAnnotation
            (
                int postviewId /** postview id */ ,
                const char * name /** Annotation name*/,
                int num /** Number of minimum or maximum*/,
                bool max /** true means maximum, false is minimum*/,
                const std::vector<NXString> & usertext /** Additional text in each box*/
            );
            /** Creates entity annotation object  @return  
             <br>  @deprecated Deprecated in NX9.0.0.  use @link NXOpen::CAE::Post::CreateAnnotation NXOpen::CAE::Post::CreateAnnotation@endlink  with extra face parameter. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  use NXOpen::CAE::Post::CreateAnnotation with extra face parameter.") NXOpen::CAE::PostAnnotation * CreateAnnotation
            (
                int postviewId /** postview id */ ,
                const NXString & name /** Annotation name*/,
                const std::vector<int> & entities /** List of node or elements*/,
                const std::vector<int> & subEntities /** List of nodes for element-nodal result*/,
                const std::vector<NXString> & usertext /** Additional text in each box*/
            );
            /** Creates entity annotation object  @return  
             <br>  @deprecated Deprecated in NX9.0.0.  use @link NXOpen::CAE::Post::CreateAnnotation NXOpen::CAE::Post::CreateAnnotation@endlink  with extra face parameter. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::CAE::PostAnnotation * CreateAnnotation
            (
                int postviewId /** postview id */ ,
                const char * name /** Annotation name*/,
                const std::vector<int> & entities /** List of node or elements*/,
                const std::vector<int> & subEntities /** List of nodes for element-nodal result*/,
                const std::vector<NXString> & usertext /** Additional text in each box*/
            );
            /** Creates entity annotation object  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::PostAnnotationBuilder NXOpen::CAE::PostAnnotationBuilder@endlink  instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::PostAnnotationBuilder instead.") NXOpen::CAE::PostAnnotation * CreateAnnotation
            (
                int postviewId /** postview id */ ,
                const NXString & name /** Annotation name*/,
                const std::vector<int> & elements /** List of node or elements*/,
                const std::vector<int> & nodes /** List of nodes */,
                const std::vector<int> & elmedgeface /** List of super entity(face/edge) for node and elements pick*/,
                const std::vector<NXString> & usertext /** Additional text in each box*/
            );
            /** Creates entity annotation object  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::PostAnnotationBuilder NXOpen::CAE::PostAnnotationBuilder@endlink  instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::CAE::PostAnnotation * CreateAnnotation
            (
                int postviewId /** postview id */ ,
                const char * name /** Annotation name*/,
                const std::vector<int> & elements /** List of node or elements*/,
                const std::vector<int> & nodes /** List of nodes */,
                const std::vector<int> & elmedgeface /** List of super entity(face/edge) for node and elements pick*/,
                const std::vector<NXString> & usertext /** Additional text in each box*/
            );
            /** Creates user location box annotation object  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::PostAnnotationBuilder NXOpen::CAE::PostAnnotationBuilder@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::PostAnnotationBuilder instead.") NXOpen::CAE::PostAnnotation * CreateAnnotation
            (
                int postviewId /** postview id */ ,
                const NXString & name /** Annotation name*/,
                double xcoord /** Parametric x screen coordinate, varies from 0 to 1*/,
                double ycoord /** Parametric y screen coordinate, varies from 0 to 1*/,
                const std::vector<NXString> & usertext /** Additional text in each box*/
            );
            /** Creates user location box annotation object  @return  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::PostAnnotationBuilder NXOpen::CAE::PostAnnotationBuilder@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::CAE::PostAnnotation * CreateAnnotation
            (
                int postviewId /** postview id */ ,
                const char * name /** Annotation name*/,
                double xcoord /** Parametric x screen coordinate, varies from 0 to 1*/,
                double ycoord /** Parametric y screen coordinate, varies from 0 to 1*/,
                const std::vector<NXString> & usertext /** Additional text in each box*/
            );
            /** Gets all @link NXOpen::CAE::PostAnnotation NXOpen::CAE::PostAnnotation@endlink  in this post view 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void GetAnnotations
            (
                int postviewId /** postview id */ ,
                std::vector<NXOpen::CAE::PostAnnotation *> & annotation /** annotation */ 
            );
            /** Plot or overlay @link NXOpen::CAE::PostGraph NXOpen::CAE::PostGraph@endlink  objects as XY plot  @return  @link NXOpen::CAE::Xyplot::Plot NXOpen::CAE::Xyplot::Plot@endlink  object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Xyplot::Plot * Plotgraphs
            (
                int windowIndex /** Window Index will be -1 for plotting it in main nx window */,
                int viewIndex /** View Index */,
                const std::vector<NXOpen::CAE::PostGraph *> & graphs /** @link NXOpen::CAE::PostGraph NXOpen::CAE::PostGraph@endlink  object list*/,
                bool overlay /** overlay option */
            );
            /** Deletes @link NXOpen::CAE::PostGraph NXOpen::CAE::PostGraph@endlink  objects 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void Deletegraphs
            (
                const std::vector<NXOpen::CAE::PostGraph *> & graphs /** @link NXOpen::CAE::PostGraph NXOpen::CAE::PostGraph@endlink  object list*/
            );
            /** Create a new post view for a given probe.
                        If Probe is loadcase/iteration varying, it will create postview of first available loadcase iteration.
                        User can set new loadcase, iteration and update postview using @link NXOpen::CAE::Post::PostviewUpdate NXOpen::CAE::Post::PostviewUpdate@endlink 
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int CreatePostview
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                NXOpen::CAE::ResultParametersWithProbe * probeparams /** probeparams */ ,
                bool overlay /** overlay */ 
            );
            /** Set the result for color display in the input for postview which is created with a probe @link NXOpen::CAE::Post::CreatePostview NXOpen::CAE::Post::CreatePostview@endlink . 
                        Needs a PostviewUpdate call to take effect. The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetResultWithProbe
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::ResultParametersWithProbe * probeparams /** probeparams */ 
            );
            /** Creates a clone of a given postview. The clone postview has to be created in a different viewport than the source postview  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int PostviewCreateClone
            (
                int postviewId /** postview id */ ,
                int viewIndex /** view index */ 
            );
            /** Play or Replay the animation for the input postview id with the input animation parameters.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
                        This interface works only in interactive mode.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewAnimationPlay
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::AnimationParameters & animation /** animation */ 
            );
            /** Delete a User Group. 
                        The input usergroup id is what was returned from CreateUserGroupFromEntityLabels 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void UserGroupRename
            (
                NXOpen::CAE::Result * result /** result */ ,
                int usergroupId /** usergroup id */ ,
                const NXString & newName /** new name */ 
            );
            /** Delete a User Group. 
                        The input usergroup id is what was returned from CreateUserGroupFromEntityLabels 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void UserGroupRename
            (
                NXOpen::CAE::Result * result /** result */ ,
                int usergroupId /** usergroup id */ ,
                const char * newName /** new name */ 
            );
            /** Rename a User Group. 
                        The input usergroup id is what was returned from CreateUserGroupFromEntityLabels 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void UserGroupDelete
            (
                NXOpen::CAE::Result * result /** result */ ,
                int usergroupId /** usergroup id */ 
            );
            /** Creates an Annotation builder object  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostAnnotationBuilder * CreateAnnotationBuilder
            (
                int pvid /** pvid */ 
            );
            /** Return the current visiblity states of elements  @return   the list of element ids 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: std::vector<int> GetElemsVisibility
            (
                int pvid /** pvid */ ,
                bool* includeOrExculdes /**  if the element is visibile or not */
            );
            /** Returns array of @link NXOpen::CAE::PostSelectionEntity NXOpen::CAE::PostSelectionEntity@endlink  objects. 
                    cutting should be applied prior to calling this method by @link NXOpen::CAE::Post::PostviewSetClipping NXOpen::CAE::Post::PostviewSetClipping@endlink 
                    to get cutting information from this object.
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void GetClipLocations
            (
                int pvid /** pvid */ ,
                std::vector<NXOpen::CAE::PostSelectionEntity *> & cutinfos /** @link NXOpen::CAE::PostSelectionEntity NXOpen::CAE::PostSelectionEntity@endlink  object */
            );
            /** Creates @link NXOpen::CAE::PostShowhideBuilder NXOpen::CAE::PostShowhideBuilder@endlink  object  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostShowhideBuilder * CreatePostShowhideBuilder
            (
                int pvid /** pvid */ 
            );
            /** Make a mesh transparent
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetMeshTransparency
            (
                int pvid /** pvid */ ,
                const std::vector<NXOpen::CAE::PostMesh *> & meshes /** meshes */ ,
                bool isTransparent /** istransparent */ 
            );
            /** Make all entities in postview transparent 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetGlobalTranslucency
            (
                int pvid /** pvid */ ,
                bool isTranslucent /** istranslucent */ 
            );
            /** Create a new post view for a given free body.
                        If FreeBody is loadcase varying, it will create postview of first available loadcase iteration.
                        User can set new loadcase, iteration and update postview using @link NXOpen::CAE::Post::PostviewUpdate NXOpen::CAE::Post::PostviewUpdate@endlink 
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls  @return  
             <br>  @deprecated Deprecated in NX1953.0.0.  use @link NXOpen::CAE::Post::JA_SPP_CreatePostviewFromNodalForceReportParameters NXOpen::CAE::Post::JA_SPP_CreatePostviewFromNodalForceReportParameters@endlink  instead. <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  use NXOpen::CAE::Post::JA_SPP_CreatePostviewFromNodalForceReportParameters instead.") int CreatePostview
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                NXOpen::CAE::ResultParametersWithNodalForceReport * nodalforcereportparams /** nodalforcereportparams */ 
            );
            /** Set the result for color display in the input for postview which is created with a free body @link NXOpen::CAE::Post::CreatePostview NXOpen::CAE::Post::CreatePostview@endlink . 
                        Needs a PostviewUpdate call to take effect. The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetResultWithNodalForceReport
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::ResultParametersWithNodalForceReport * nodalforcereportparams /** nodalforcereportparams */ 
            );
            /** Set edge and face styles and colors for both primary and undeformed displays in the input 
                        postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetEdgeFace
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::PrimaryEdgeFace & primaryEdgeface /** primary edgeface */ ,
                const NXOpen::CAE::Post::EdgeFace & undeformedEdgeface /** undeformed edgeface */ 
            );
            /** Set edge and face styles and colors for primary display in the input 
                        postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreateCrossSectionViewForResult 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetEdgeFace
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::PrimaryEdgeFace & primaryEdgeface /** primary edgeface */ 
            );
            /** Caluclate the distance between two nodes.
                        input Node1 and Node2 deformation status of nodes and return calculated distance
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: double PostviewCalculateDistanceBetweenEntities
            (
                int pvid /** pvid */ ,
                NXOpen::CAE::PostSelectionEntity * postSel1 /** @link NXOpen::CAE::PostSelectionEntity NXOpen::CAE::PostSelectionEntity@endlink  object */,
                bool defstate1 /** is selected node deformed */,
                NXOpen::CAE::PostSelectionEntity * postSel2 /** @link NXOpen::CAE::PostSelectionEntity NXOpen::CAE::PostSelectionEntity@endlink  object */,
                bool defstate2 /** is selected node deformed */
            );
            /** Gets the Legend object from the input postview id. 
                    Destruction of this object is the responsibility of the caller.  @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostLegend * PostviewGetLegend
            (
                int postviewId /** postview id */ 
            );
            /** Sets the Legend object to the input postview id. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetLegend
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::PostLegend * legend /** legend */ 
            );
            /** Set the mass display options in the input postview id. Needs a PostviewUpdate call to take effect.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetMass
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Mass & mass /** mass */ 
            );
            /** Shows beam contours in the postview 
             <br>  @deprecated Deprecated in NX1953.0.0.  Instead use @link NXOpen::CAE::Post::PostviewSetBeamDisplay NXOpen::CAE::Post::PostviewSetBeamDisplay@endlink  with Style as LineAndDiagram. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Instead use NXOpen::CAE::Post::PostviewSetBeamDisplay with Style as LineAndDiagram.") void PostviewShowBeamContour
            (
                int posviewId /** posviewid */ ,
                bool showBeamContour /** showbeamcontour */ 
            );
            /** Set the method used to scale beam contour size
             <br>  @deprecated Deprecated in NX1953.0.0.  Instead use @link NXOpen::CAE::Post::PostviewSetBeamDisplay NXOpen::CAE::Post::PostviewSetBeamDisplay@endlink  with Style as LineAndDiagram. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Instead use NXOpen::CAE::Post::PostviewSetBeamDisplay with Style as LineAndDiagram.") void PostviewSetBeamContourScaleMethod
            (
                int posviewId /** posviewid */ ,
                NXOpen::CAE::Post::BeamContourScaleMethod method /** method */ 
            );
            /** A numerical factor used to scale beam contour size
             <br>  @deprecated Deprecated in NX1953.0.0.  Instead use @link NXOpen::CAE::Post::PostviewSetBeamDisplay NXOpen::CAE::Post::PostviewSetBeamDisplay@endlink  with Style as LineAndDiagram. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Instead use NXOpen::CAE::Post::PostviewSetBeamDisplay with Style as LineAndDiagram.") void PostviewSetBeamContourScaleFactor
            (
                int posviewId /** posviewid */ ,
                double factor /** factor */ 
            );
            /** Ask hotspot recipes which match with the result type of postview
                    
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::TaggedObject *> PostviewAskHotspotRecipes
            (
                int posviewId /** posviewid */ 
            );
            /** Resolve hotspot recipe which match with the result type of postview
                    
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewAskHotspotsOfRecipe
            (
                int posviewId /** posviewid */ ,
                NXOpen::CAE::HotspotRecipe * recipe /** recipe */ ,
                std::vector<NXOpen::CAE::Hotspot *> & listhotspot /** listhotspot */ 
            );
            /** Set the spring display options in the input postview id. Needs a PostviewUpdate call to take effect.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetSpring
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Spring & spring /** spring */ 
            );
            /** Set the draw option for legend box in the input postview id. Needs a PostviewUpdate call to take effect.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetDrawForLegendBox
            (
                int postviewId /** postview id */ ,
                bool draw /** draw */ 
            );
            /** Ask the draw option for legend box in the input postview id. Needs a PostviewUpdate call to take effect.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult  @return  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: bool PostviewAskDrawForLegendBox
            (
                int postviewId /** postview id */ 
            );
            /** Set the fill option for legend box in the input postview id. Needs a PostviewUpdate call to take effect.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetFillForLegendBox
            (
                int postviewId /** postview id */ ,
                bool fill /** fill */ 
            );
            /** Ask the fill option for legend box in the input postview id. Needs a PostviewUpdate call to take effect.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult  @return  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: bool PostviewAskFillForLegendBox
            (
                int postviewId /** postview id */ 
            );
            /** Set the fill color opion for legend box in the input postview id. Needs a PostviewUpdate call to take effect.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetFillColorForLegendBox
            (
                int postviewId /** postview id */ ,
                int fillColor /** fill color */ 
            );
            /** Ask the fill color opion for legend box in the input postview id. Needs a PostviewUpdate call to take effect.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult  @return  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int PostviewAskFillColorForLegendBox
            (
                int postviewId /** postview id */ 
            );
            /** Set the translucent option legend box in the input postview id. Needs a PostviewUpdate call to take effect.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetFillTranslucentForLegendBox
            (
                int postviewId /** postview id */ ,
                bool translucent /** translucent */ 
            );
            /** Ask the translucent option legend box in the input postview id. Needs a PostviewUpdate call to take effect.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult  @return  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: bool PostviewAskFillTranslucentForLegendBox
            (
                int postviewId /** postview id */ 
            );
            /** Capture an animated gif image for an input postview id is that is already animating.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
                    This interface works only in interactive mode.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewCaptureAllViewportsToGif
            (
                const NXString & fileName /** file name */ ,
                bool includeOverlayedPostviews /** include overlayed postviews */ ,
                bool whiteBackground /** white background */ 
            );
            /** Capture an animated gif image for an input postview id is that is already animating.
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
                    This interface works only in interactive mode.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            void PostviewCaptureAllViewportsToGif
            (
                const char * fileName /** file name */ ,
                bool includeOverlayedPostviews /** include overlayed postviews */ ,
                bool whiteBackground /** white background */ 
            );
            /** Create a new post view for a given free body.
                        If FreeBody is loadcase varying, it will create postview of first available loadcase iteration.
                        User can set new loadcase, iteration and update postview using @link NXOpen::CAE::Post::PostviewUpdate NXOpen::CAE::Post::PostviewUpdate@endlink 
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls  @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int CreatePostviewFromNodalForceReportParameters
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                NXOpen::CAE::ResultParametersWithNodalForceReport * nodalforcereportparams /** nodalforcereportparams */ ,
                bool overlay /** overlay */ 
            );
            /** Get the beam display options in the input postview id.
                    The @link NXOpen::CAE::BeamDisplayParameters NXOpen::CAE::BeamDisplayParameters@endlink  object must be destroyed @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::BeamDisplayParameters * PostviewGetBeamDisplay
            (
                int postviewId /** postviewid */ 
            );
            /** Set the beam display options in the input postview id. Needs a PostviewUpdate call to take effect. 
                    The input postview id is what was returned from CreatePostview or CreatePostviewForResult 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void PostviewSetBeamDisplay
            (
                int postviewId /** postviewid */ ,
                NXOpen::CAE::BeamDisplayParameters * param /** param */ 
            );
            /** Returns the @link NXOpen::CAE::ResultParametersWithNodalForceReport NXOpen::CAE::ResultParametersWithNodalForceReport@endlink  object associated with postview created from nodal force reports.
                        It is user's responsibility to destroy the result parameters object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResultParametersWithNodalForceReport NXOpen::CAE::ResultManager::DeleteResultParametersWithNodalForceReport@endlink , in order to free up system resources.
                     @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultParametersWithNodalForceReport * AskResultParametersWithNodalForceReport
            (
                int pvid /** pvid */ 
            );
            /** Set the @link NXOpen::CAE::ResultParametersWithNodalForceReport NXOpen::CAE::ResultParametersWithNodalForceReport@endlink  object associated with postview created from nodal force reports.
                        Needs a PostviewUpdate call to take effect. 
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResultParametersWithNodalForceReport
            (
                int pvid /** pvid */ ,
                NXOpen::CAE::ResultParametersWithNodalForceReport * resultParameter /** result parameter */ 
            );


            /** Returns the @link NXOpen::CAE::PostPreference NXOpen::CAE::PostPreference@endlink  belonging to this session 
             <br>  Created in NX10.0.0.  <br>  
            */
            public: NXOpen::CAE::PostPreference *Preference();
            /** Returns the @link NXOpen::CAE::PostProcessingSession NXOpen::CAE::PostProcessingSession@endlink  belonging to this session 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::CAE::PostProcessingSession *PostProcessingSession();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
