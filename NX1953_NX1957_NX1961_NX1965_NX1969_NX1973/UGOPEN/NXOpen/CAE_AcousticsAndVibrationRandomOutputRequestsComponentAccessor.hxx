#ifndef NXOpen_CAE_ACOUSTICSANDVIBRATIONRANDOMOUTPUTREQUESTSCOMPONENTACCESSOR_HXX_INCLUDED
#define NXOpen_CAE_ACOUSTICSANDVIBRATIONRANDOMOUTPUTREQUESTSCOMPONENTACCESSOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AcousticsAndVibrationRandomOutputRequestsComponentAccessor.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class AcousticsAndVibrationRandomOutputRequestsComponentAccessor;
    }
    class NXObject;
    namespace CAE
    {
        class _AcousticsAndVibrationRandomOutputRequestsComponentAccessorBuilder;
        class AcousticsAndVibrationRandomOutputRequestsComponentAccessorImpl;
        /**
            Builds a @link NXOpen::CAE::AcousticsAndVibrationRandomOutputRequestsComponentAccessor NXOpen::CAE::AcousticsAndVibrationRandomOutputRequestsComponentAccessor@endlink  object
             <br> There is no kf creator for this.  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  AcousticsAndVibrationRandomOutputRequestsComponentAccessor : public NXOpen::NXObject
        {
            /** The intermediate entity type */
            public: enum IntermediateEntity
            {
                IntermediateEntityNode/** node */ 
            };

            /** The node selection type */
            public: enum NsType
            {
                NsTypeAllNodes/** all nodes */ ,
                NsTypeSubsetOfNodes/** subset of nodes */ 
            };

            private: AcousticsAndVibrationRandomOutputRequestsComponentAccessorImpl * m_acousticsandvibrationrandomoutputrequestscomponentaccessor_impl;
            private: friend class  _AcousticsAndVibrationRandomOutputRequestsComponentAccessorBuilder;
            protected: AcousticsAndVibrationRandomOutputRequestsComponentAccessor();
            public: ~AcousticsAndVibrationRandomOutputRequestsComponentAccessor();
            /**Returns  the csd flag 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool Csd
            (
            );
            /**Sets  the csd flag 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCsd
            (
                bool csd /** csd */ 
            );
            /**Returns  the psd flag 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool Psd
            (
            );
            /**Sets  the psd flag 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPsd
            (
                bool psd /** psd */ 
            );
            /**Returns  the node selection type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AcousticsAndVibrationRandomOutputRequestsComponentAccessor::NsType NodeSelectionType
            (
            );
            /**Sets  the node selection type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNodeSelectionType
            (
                NXOpen::CAE::AcousticsAndVibrationRandomOutputRequestsComponentAccessor::NsType nodeSelectionType /** nodeselectiontype */ 
            );
            /** Sets the first response entities by labels. Clears previous selection.
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFirstResponseSelectedEntities
            (
                NXOpen::CAE::AcousticsAndVibrationRandomOutputRequestsComponentAccessor::IntermediateEntity entityType /** entitytype */ ,
                const std::vector<int> & intermediateNodes /** intermediatenodes */ 
            );
            /** Sets the second response entities by labels. Clears previous selection.
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSecondResponseSelectedEntities
            (
                NXOpen::CAE::AcousticsAndVibrationRandomOutputRequestsComponentAccessor::IntermediateEntity entityType /** entitytype */ ,
                const std::vector<int> & intermediateNodes /** intermediatenodes */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
