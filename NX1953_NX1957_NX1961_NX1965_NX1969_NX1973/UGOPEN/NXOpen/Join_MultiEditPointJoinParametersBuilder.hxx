#ifndef NXOpen_JOIN_MULTIEDITPOINTJOINPARAMETERSBUILDER_HXX_INCLUDED
#define NXOpen_JOIN_MULTIEDITPOINTJOINPARAMETERSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Join_MultiEditPointJoinParametersBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libjoinopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Join
    {
        class MultiEditPointJoinParametersBuilder;
    }
    class Builder;
    class Direction;
    class ScCollector;
    class TaggedObject;
    namespace Join
    {
        class _MultiEditPointJoinParametersBuilderBuilder;
        class MultiEditPointJoinParametersBuilderImpl;
        /** Represents a MultiEditPointJoinParametersBuilder class  <br> To create a new instance of this class, use @link NXOpen::Join::JoinManager::CreateMultiEditPointJoinParametersBuilder  NXOpen::Join::JoinManager::CreateMultiEditPointJoinParametersBuilder @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class JOINOPENCPPEXPORT  MultiEditPointJoinParametersBuilder : public NXOpen::Builder
        {
            private: MultiEditPointJoinParametersBuilderImpl * m_multieditpointjoinparametersbuilder_impl;
            private: friend class  _MultiEditPointJoinParametersBuilderBuilder;
            protected: MultiEditPointJoinParametersBuilder();
            public: ~MultiEditPointJoinParametersBuilder();
            /** Set an integer value for the table cell (row, colummn) 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void SetIntegerValue
            (
                int row /** row of cell */,
                int column /** column of cell */,
                int value /** value of cell */
            );
            /** Set a double value for the table cell (row, colummn) 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void SetDoubleValue
            (
                int row /** row of cell */,
                int column /** column of cell */,
                double value /** value of cell */
            );
            /** Makes a fixed vector copy of the input vector tag and sets in the table cell (row, colummn) 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void SetVectorTagValue
            (
                int row /** row of cell */,
                int column /** column of cell */,
                NXOpen::Direction * vector /** vector tag */
            );
            /** Sets collector containing faces to define alignment direction 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void SetStackupNormalSurface
            (
                int row /** row of cell */,
                NXOpen::ScCollector * collector /** holds selection for normal surface */
            );

            /// \cond NX_NO_DOC 
            /** Set a flag that this row has been changed so that commit method will be executed.
                        This is used when a custom attribute has been changed since the journaling is done by the 
                        attributes function. This api does not need to be exposed to the user since it is only needed for
                        redo to work properly. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void SetRowChanged
            (
                int row /** row of cell */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets a custom attribute holder object that holds the attributes temporarily.
                    The custom attributes for the @link NXOpen::Features::BodyFeature NXOpen::Features::BodyFeature@endlink  could be set on this object. 
                    If the attributes match the attributes' description in the join feature description, the custom attributes are created on the feature. Otherwise, ignored.
                    Do not delete this object, deletion results in undefined behavior. 
                    This api does not need to be exposed to the user since it is only needed for redo to work properly. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::TaggedObject * GetCustomAttributesHolder
            (
                int row /** row of cell */
            );

            /// \endcond 
            /** Set a boolean value for the table cell (row, colummn) 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void SetBooleanValue
            (
                int row /** row of cell */,
                int column /** column of cell */,
                bool value /** value of cell */
            );
            /** Set a hardware pin value for the table cell (row, colummn) 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void SetHardwarePin
            (
                int row /** row of cell */,
                int column /** column of cell */,
                const NXString & pinName /** pinname */ ,
                const NXString & pinPath /** pinpath */ ,
                const NXString & pinFamilyInstanceName /** pinfamilyinstancename */ 
            );
            /** Set a hardware pin value for the table cell (row, colummn) 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            void SetHardwarePin
            (
                int row /** row of cell */,
                int column /** column of cell */,
                const char * pinName /** pinname */ ,
                const char * pinPath /** pinpath */ ,
                const char * pinFamilyInstanceName /** pinfamilyinstancename */ 
            );
            /** Set a hardware pin specification value for the table row 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void SetHardwarePinSpecification
            (
                int row /** row of table */,
                const NXString & pinSpecificationName /** pinspecificationname */ 
            );
            /** Set a hardware pin specification value for the table row 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            void SetHardwarePinSpecification
            (
                int row /** row of table */,
                const char * pinSpecificationName /** pinspecificationname */ 
            );
            /** Set a hardware head side parts value for the table cell (row, colummn) 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void SetHeadSideParts
            (
                int row /** row of cell */,
                int column /** column of cell */,
                std::vector<NXString> & headNames /** List of names */,
                std::vector<NXString> & headPaths /** List of paths */,
                std::vector<NXString> & headFamilyInstanceNames /** List of head family instance names */
            );
            /** Set a hardware tail side parts value for the table cell (row, colummn) 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void SetTailSideParts
            (
                int row /** row of cell */,
                int column /** column of cell */,
                std::vector<NXString> & tailNames /** List of names */,
                std::vector<NXString> & tailPaths /** List of paths */,
                std::vector<NXString> & tailFamilyInstanceNames /** List of tail family instance names */
            );
            /** Load/update hardware for feature corresponding to table row. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void LoadHardware
            (
                int row /** row of table */
            );
            /** Unload hardware for feature corresponding to table row. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void UnloadHardware
            (
                int row /** row of table */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
