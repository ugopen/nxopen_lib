#ifndef NXOpen_AME_AMEDEBUGSESSION_HXX_INCLUDED
#define NXOpen_AME_AMEDEBUGSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_AmeDebugSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class AmeDebugSession;
    }
    class Session;
    namespace AME
    {
        class INodeObject;
    }
    namespace AME
    {
        class PageObject;
    }
    class Part;
    class TaggedObject;
    namespace AME
    {
        class AmeDebugSessionImpl;

        /// \cond NX_NO_DOC 
        /** Represents a class that is used for AME testing.  This class shouldn't be made available to customers  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  AmeDebugSession
        {
            /** Represents type of the object*/

            /// \cond NX_NO_DOC 
            public: enum ObjectType
            {
                ObjectTypeProject/** Represents @link NXOpen::AME::Project NXOpen::AME::Project@endlink   */,
                ObjectTypePageObject/** Represents @link NXOpen::AME::PageObject NXOpen::AME::PageObject@endlink   */
            };


            /// \endcond 
            /** Represents type of the navigator*/

            /// \cond NX_NO_DOC 
            public: enum NavigatorType
            {
                NavigatorTypeFunction/** Function Aspect Navigator  */,
                NavigatorTypeLocation/** Location Aspect Navigator  */,
                NavigatorTypeProduct/** Product Aspect Navigator   */,
                NavigatorTypeAutomation/** Automation Navigator       */,
                NavigatorTypeDocument/** Document Navigator         */,
                NavigatorTypeBulkEngineering/** Bulk Engineering Navigator */,
                NavigatorTypeUpstreamData/** Upstream Data Navigator    */,
                NavigatorTypeEClass/** eCl@ss Navigator           */,
                NavigatorTypeCabinet/** Cabinet Navigator          */,
                NavigatorTypeProductStructure/** Product Structure Navigator*/,
                NavigatorTypeSymbolStructure/** Symbol Structure Navigator */
            };


            /// \endcond 
            /** Represents print option for object's attribute printing*/

            /// \cond NX_NO_DOC 
            public: enum PrintOption
            {
                PrintOptionAttributesOfObjects/** Prints Only Attributes Of Primary Object   */,
                PrintOptionAttributesOfAllSourceObjects/** Prints Attributes of Primary Object and All other Source Objects   */,
                PrintOptionAttributesOfAllSourceObjectsAndAllData/** Prints Attributes Of Primary Object, All its Source Objects and all Data  */
            };


            /// \endcond 
            private: AmeDebugSessionImpl * m_amedebugsession_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit AmeDebugSession(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static AmeDebugSession* theAmeDebugSession;
            /** Returns the AmeDebugSession object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static AmeDebugSession* GetAmeDebugSession(NXOpen::Session *owner);
            public: ~AmeDebugSession();

            /// \cond NX_NO_DOC 
            /** Prints navigator infomation 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintNavigatorInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints structure of input @link NXOpen::AME::AmeDebugSession::NavigatorType NXOpen::AME::AmeDebugSession::NavigatorType@endlink . 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintNavigatorInformation
            (
                NXOpen::AME::AmeDebugSession::NavigatorType navigator /** navigator */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints structure of input. Except Physical Ports and Shadow Objects @link NXOpen::AME::AmeDebugSession::NavigatorType NXOpen::AME::AmeDebugSession::NavigatorType@endlink . 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintNavigatorNodeInformationSkipDependant
            (
                NXOpen::AME::AmeDebugSession::NavigatorType navigator /** navigator */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints structure of input @link NXOpen::AME::INodeObject NXOpen::AME::INodeObject@endlink .
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintNavigatorStructureOfNode
            (
                NXOpen::AME::INodeObject * nodeObject /** nodeobject */ ,
                NXOpen::AME::AmeDebugSession::PrintOption printOption /** printoption */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints information of input @link NXOpen::AME::AmeDebugSession::ObjectType NXOpen::AME::AmeDebugSession::ObjectType@endlink . 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintObjectInformation
            (
                NXOpen::AME::AmeDebugSession::ObjectType objectType /** objecttype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints sw specific information 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintSoftwareInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** A dummy function to cause the Session object to be includded 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void Dummy
            (
                NXOpen::Part * part /** part */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints hw specific information 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintHardwareInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints sw specific object information 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintPouInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints validation information for all objects
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ValidateAllObjects
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints PlcSymbol information
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PlcSymbolInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints PlcUserConstants information
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PlcUserConstantInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints EO Attributes information
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void EoAttributesInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints Query Object Attributes information
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void QueryobjectInformation
            (
                bool printResults /** printresults */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints External Object information
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ExternalObjectInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints Ports information
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PortsInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints EPLAN Macros information
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void EplanMacrosInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints Stations information
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void HardwareObjectsAttributeInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints Stations information
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintStationsInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints sw code content 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintPouContent
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints sw code content 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintEplanProjectSettings
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints ad expression information 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintAdExpressions
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints ad evaluator data 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintAdEvaluatorData
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints sw data model
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintPouData
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints eplan project generation request 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintEplanProjectGenerationRequest
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints eplan project template info
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintEplanProjectTemplateData
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints schematic symbol information 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintSchematicSymbolProperties
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints connection properties settings 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintConnectionPropertiesSettings
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints connection annotation settings 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintConnectionAnnotationSettings
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints schematic symbol assignment information 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintSchematicSymbolAssignmentToTypeInfo
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints grid settings
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintGridSettings
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints eclass mappings
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintEclassMappingInfo
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints eclass product information
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintEclassProductInfo
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints template variant information
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintTemplateVariantData
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints value set data
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintValueSetData
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints report value sets data
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintReportValueSetsData
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints connection properties 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintConnectionProperties
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints EODef Attributes information
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintEodefAttributesInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints structure of input @link NXOpen::AME::AmeDebugSession::NavigatorType NXOpen::AME::AmeDebugSession::NavigatorType@endlink . 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintNavigatorNodeInformation
            (
                NXOpen::AME::AmeDebugSession::NavigatorType navigator /** navigator */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints Product Definition properties
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintProductDefinitionProperties
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints Product Component properties
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintProductComponentsProperties
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints FormSheet properties
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintFormsheetProperties
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints Cabinet Design information
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintCabinetInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints Memory Area information
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintMemoryAreaInformation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints attribute matching input category, title and type if it is set on the object
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintAttrOfObject
            (
                NXOpen::TaggedObject * sourceObject /** sourceobject */ ,
                const NXString & attrCategory /** attrcategory */ ,
                const NXString & attrTitle /** attrtitle */ ,
                int type /** type */ 
            );
            /** Prints attribute matching input category, title and type if it is set on the object
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void PrintAttrOfObject
            (
                NXOpen::TaggedObject * sourceObject /** sourceobject */ ,
                const char * attrCategory /** attrcategory */ ,
                const char * attrTitle /** attrtitle */ ,
                int type /** type */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Validates attribute matching input category, title and type if it is set on the object
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ValidateAttrOfObject
            (
                NXOpen::TaggedObject * sourceObject /** sourceobject */ ,
                const NXString & attrCategory /** attrcategory */ ,
                const NXString & attrTitle /** attrtitle */ ,
                int type /** type */ ,
                const NXString & value /** value */ 
            );
            /** Validates attribute matching input category, title and type if it is set on the object
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void ValidateAttrOfObject
            (
                NXOpen::TaggedObject * sourceObject /** sourceobject */ ,
                const char * attrCategory /** attrcategory */ ,
                const char * attrTitle /** attrtitle */ ,
                int type /** type */ ,
                const char * value /** value */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints all set attributes of the input category 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintAllAttrsOfCategory
            (
                NXOpen::TaggedObject * sourceObject /** sourceobject */ ,
                const NXString & attrCategory /** attrcategory */ 
            );
            /** Prints all set attributes of the input category 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void PrintAllAttrsOfCategory
            (
                NXOpen::TaggedObject * sourceObject /** sourceobject */ ,
                const char * attrCategory /** attrcategory */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints all set attributes of the input object
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintAllAttrsOfObject
            (
                NXOpen::TaggedObject * sourceObject /** sourceobject */ ,
                NXOpen::AME::AmeDebugSession::PrintOption printOption /** printoption */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints all set attributes of  all objects of the input type available in current project 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXOpen::TaggedObject *> PrintAllAttrsOfAllObjects
            (
                NXOpen::TaggedObject * sourceObject /** sourceobject */ ,
                NXOpen::AME::AmeDebugSession::PrintOption printOption /** printoption */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints data for the active project
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintActiveProject
            (
                NXOpen::AME::AmeDebugSession::PrintOption printOption /** printoption */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Print nodes in active oreder from navigator. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintOrderOfNavigatorNodes
            (
                NXOpen::AME::AmeDebugSession::NavigatorType navigator /** navigator */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints Nodes and Annotations of node of selected PageObject>.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintNodesAnnotationsOfPagenode
            (
                NXOpen::AME::PageObject * pageObject /** pageobject */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints input classification class id and class ids of all children classes.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintClassificationHierarchyOfClass
            (
                const NXString & classId /** classid */ 
            );
            /** Prints input classification class id and class ids of all children classes.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void PrintClassificationHierarchyOfClass
            (
                const char * classId /** classid */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints attributes of input classification class. Inherited attributes are also printed.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintClassificationPropertiesOfClass
            (
                const NXString & classId /** classid */ 
            );
            /** Prints attributes of input classification class. Inherited attributes are also printed.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void PrintClassificationPropertiesOfClass
            (
                const char * classId /** classid */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints attributes including inherited attributes of input classification class and all its children classes.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintClassificationPropertiesOfClassHierarchy
            (
                const NXString & classId /** classid */ 
            );
            /** Prints attributes including inherited attributes of input classification class and all its children classes.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void PrintClassificationPropertiesOfClassHierarchy
            (
                const char * classId /** classid */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints ids (@DB/ID/Rev) of all classified objects of input classification class and all its children classes.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintClassifiedobjectsOfClassHierarchy
            (
                const NXString & classId /** classid */ 
            );
            /** Prints ids (@DB/ID/Rev) of all classified objects of input classification class and all its children classes.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void PrintClassifiedobjectsOfClassHierarchy
            (
                const char * classId /** classid */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints sub structure of input @link NXOpen::AME::INodeObject NXOpen::AME::INodeObject@endlink .
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintNavigatorSubStructureOfNode
            (
                NXOpen::AME::INodeObject * nodeObject /** nodeobject */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints entire folder structure contents with childrens.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintFolderStructure
            (
                const NXString & classId /** classid */ 
            );
            /** Prints entire folder structure contents with childrens.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void PrintFolderStructure
            (
                const char * classId /** classid */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints drawing standard project setting 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintDrawingStandardProjectSettings
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Prints connection annotations 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PrintConnectionAnnotations
            (
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
