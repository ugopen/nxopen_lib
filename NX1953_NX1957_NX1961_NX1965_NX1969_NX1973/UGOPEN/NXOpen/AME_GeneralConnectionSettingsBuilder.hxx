#ifndef NXOpen_AME_GENERALCONNECTIONSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_AME_GENERALCONNECTIONSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_GeneralConnectionSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_TeeJunctionTypes.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class GeneralConnectionSettingsBuilder;
    }
    class Builder;
    namespace AME
    {
        class _GeneralConnectionSettingsBuilderBuilder;
        class GeneralConnectionSettingsBuilderImpl;
        /** Builder for the General Connection Settings dialog  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateGeneralConnectionSettingsBuilder  NXOpen::AME::AMEManager::CreateGeneralConnectionSettingsBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  GeneralConnectionSettingsBuilder : public NXOpen::Builder
        {
            private: GeneralConnectionSettingsBuilderImpl * m_generalconnectionsettingsbuilder_impl;
            private: friend class  _GeneralConnectionSettingsBuilderBuilder;
            protected: GeneralConnectionSettingsBuilder();
            public: ~GeneralConnectionSettingsBuilder();
            /**Returns  the setting for Auto-Connection between symbols 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool AutoConnection
            (
            );
            /**Sets  the setting for Auto-Connection between symbols 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAutoConnection
            (
                bool autoConnection /** autoconnection */ 
            );
            /**Returns  the setting for keep connection on moving the symbols 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool KeepConnectionOnMove
            (
            );
            /**Sets  the setting for keep connection on moving the symbols 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetKeepConnectionOnMove
            (
                bool keepConnection /** keepconnection */ 
            );
            /**Returns  the point wiring setting 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool EnablePointWiring
            (
            );
            /**Sets  the point wiring setting 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetEnablePointWiring
            (
                bool pointWiring /** pointwiring */ 
            );
            /**Returns  the minimal segment length setting 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: double MinimalSegmentLength
            (
            );
            /**Sets  the minimal segment length setting 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetMinimalSegmentLength
            (
                double segmentLength /** segmentlength */ 
            );
            /** Resets general connection settings to default 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ResetToDefault
            (
            );
            /**Returns  the representation style for TeeJunction 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AmeJunctionRepresentationStyleType JunctionRepresentationStyle
            (
            );
            /**Sets  the representation style for TeeJunction 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetJunctionRepresentationStyle
            (
                NXOpen::AME::AmeJunctionRepresentationStyleType junctionRepresentationStyle /** junctionrepresentationstyle */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
