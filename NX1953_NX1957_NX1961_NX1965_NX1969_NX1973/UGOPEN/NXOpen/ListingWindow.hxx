#ifndef NXOpen_LISTINGWINDOW_HXX_INCLUDED
#define NXOpen_LISTINGWINDOW_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ListingWindow.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ListingWindow;
    class Session;
    class ListingWindowImpl;
    /**
    Represents a ListingWindow.    
     <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ListingWindow
    {
        /** Describes the type of listing window */
        public: enum DeviceType
        {
            DeviceTypeWindow/** The UI's Information window */,
            DeviceTypeFile/** Output is written to a file instead of the Information window */,
            DeviceTypeFileAndWindow/** Output is written to a file and to the Information window */,
            DeviceTypeNone/** Output is not written anywhere; output gets discarded */
        };

        private: ListingWindowImpl * m_listingwindow_impl;
        private: NXOpen::Session* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit ListingWindow(NXOpen::Session *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~ListingWindow();
        /** Opens the listing window.  The listing window must be open before
            lines can be written to it 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Open
        (
        );
        /** Closes the stream to the listing window.  The window itself is not closed. 
            If the listing window is a file,
            this will flush the buffer and close the file. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Close
        (
        );
        /** Closes the listing window actually from the UI. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void CloseWindow
        (
        );
        /** Writes a line to the listing window.
            The listing window must be open before you can write to it.
            If the listing window is a file, the output is buffered, so the
            output may not appear in the file until the buffer gets flushed.
            The buffer is flushed when the listing window gets closed.
            And the maximum number of characters displayed in one line is 132.
            
            If NULL is passed in this method will do nothing.
              
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void WriteLine
        (
            const NXString & msg /** Line to write */
        );
        /** Writes a line to the listing window.
            The listing window must be open before you can write to it.
            If the listing window is a file, the output is buffered, so the
            output may not appear in the file until the buffer gets flushed.
            The buffer is flushed when the listing window gets closed.
            And the maximum number of characters displayed in one line is 132.
            
            If NULL is passed in this method will do nothing.
              
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void WriteLine
        (
            const char * msg /** Line to write */
        );
        /** Writes a full line to the listing window.
            The listing window must be open before you can write to it.
            If the listing window is a file, the output is buffered, so the
            output may not appear in the file until the buffer gets flushed.
            The buffer is flushed when the listing window gets closed.
            And number of characters displayed in one line has no limit which
            is different from @link NXOpen::ListingWindow::WriteLine NXOpen::ListingWindow::WriteLine@endlink 
            
            If NULL is passed in this method will do nothing.
              
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void WriteFullline
        (
            const NXString & msg /** Line to write */
        );
        /** Writes a full line to the listing window.
            The listing window must be open before you can write to it.
            If the listing window is a file, the output is buffered, so the
            output may not appear in the file until the buffer gets flushed.
            The buffer is flushed when the listing window gets closed.
            And number of characters displayed in one line has no limit which
            is different from @link NXOpen::ListingWindow::WriteLine NXOpen::ListingWindow::WriteLine@endlink 
            
            If NULL is passed in this method will do nothing.
              
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void WriteFullline
        (
            const char * msg /** Line to write */
        );
        /**Returns  a flag indicating whether the listing window is open.
            To open the window, use @link NXOpen::Arc NXOpen::Arc@endlink .
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsOpen
        (
        );
        /** Changes where the listing window output is sent.  The
            listing window output can be sent to the Information window 
            of the Unigraphics session, to a file, or to both.

            Note: file output is buffered.  If file output is used, the buffer
            will not be flushed until the output device is changed again.
            E.g.
             @code 
            ListingWindow.SelectDevice(File, "log.txt")
            ListingWindow.Open()
            ListingWindow.WriteLine("output")
            ListingWindow.Close()
            ' buffer is not flushed yet
            ListingWindow.SelectDevice(Window, "")
            ' now the buffer is flushed
             @endcode 
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SelectDevice
        (
            NXOpen::ListingWindow::DeviceType deviceType /** The type of device (file, Information window, or both) */,
            const NXString & fileName /** Name of the file.  Used only if the device type is file. */
        );
        /** Changes where the listing window output is sent.  The
            listing window output can be sent to the Information window 
            of the Unigraphics session, to a file, or to both.

            Note: file output is buffered.  If file output is used, the buffer
            will not be flushed until the output device is changed again.
            E.g.
             @code 
            ListingWindow.SelectDevice(File, "log.txt")
            ListingWindow.Open()
            ListingWindow.WriteLine("output")
            ListingWindow.Close()
            ' buffer is not flushed yet
            ListingWindow.SelectDevice(Window, "")
            ' now the buffer is flushed
             @endcode 
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SelectDevice
        (
            NXOpen::ListingWindow::DeviceType deviceType /** The type of device (file, Information window, or both) */,
            const char * fileName /** Name of the file.  Used only if the device type is file. */
        );
        /**Returns  the device type for the window.  The device type indicates
            whether the output for the listing window is sent to the Information window, 
            to a file, or to both 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ListingWindow::DeviceType Device
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
