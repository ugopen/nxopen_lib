#ifndef NXOpen_GEOMETRICUTILITIES_HELIXPATTERN_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_HELIXPATTERN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_HelixPattern.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class HelixPattern;
    }
    class Axis;
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _HelixPatternBuilder;
        class HelixPatternImpl;
        /** the Helix pattern definition.  Allows specification along
                both the angular and radial directions. 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  HelixPattern : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** This defines helix direction method */
            public: enum DirectionTypes
            {
                DirectionTypesRighthand/** Right hand orientation. */,
                DirectionTypesLefthand/** Left hand orientation. */
            };

            /** defines Helix size options for Helix type pattern.   */
            public: enum SizeOptions
            {
                SizeOptionsCountAngleDistance/** use Count, Angle, Distance to define a Helix */,
                SizeOptionsCountHelixPitchAndTurns/** use Count, Helix Pitch, Turns to define a Helix */,
                SizeOptionsCountHelixPitchAndSpan/** use Count, Helix Pitch, Span to define a Helix */,
                SizeOptionsAngleHelixPitchAndTurns/** use Angle, Helix Pitch, Turns to define a Helix */,
                SizeOptionsAngleHelixPitchAndSpan/** use Angle, Helix Pitch, Span to define a Helix */
            };

            private: HelixPatternImpl * m_helixpattern_impl;
            private: friend class  _HelixPatternBuilder;
            protected: HelixPattern();
            public: ~HelixPattern();
            /**Returns  the rotation axis for the pattern. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * RotationAxis
            (
            );
            /**Sets  the rotation axis for the pattern. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRotationAxis
            (
                NXOpen::Axis * rotationAxis /** rotationaxis */ 
            );
            /**Returns  the type of helix direction method 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::HelixPattern::DirectionTypes DirectionType
            (
            );
            /**Sets  the type of helix direction method 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDirectionType
            (
                NXOpen::GeometricUtilities::HelixPattern::DirectionTypes directionType /** directiontype */ 
            );
            /**Returns  the Helix size option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::HelixPattern::SizeOptions SizeOption
            (
            );
            /**Sets  the Helix size option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSizeOption
            (
                NXOpen::GeometricUtilities::HelixPattern::SizeOptions option /** option */ 
            );
            /**Returns  the count of instances for the Helix type pattern 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CountOfInstances
            (
            );
            /**Returns  the angle pitch expression for the Helix type pattern 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * AnglePitch
            (
            );
            /**Returns  the distance pitch expression for the Helix type pattern 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DistancePitch
            (
            );
            /**Returns  the helix pitch expression for the Helix type pattern 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HelixPitch
            (
            );
            /**Returns  the helix span expression for the Helix type pattern 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HelixSpan
            (
            );
            /**Returns  the number of turns for the Helix type pattern 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * NumberOfTurns
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
