#ifndef NXOpen_CAE_FEMCREATIONOPTIONS_HXX_INCLUDED
#define NXOpen_CAE_FEMCREATIONOPTIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_FemCreationOptions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_BaseFemPart.hxx>
#include <NXOpen/CAE_FemSynchronizeOptions.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class FemCreationOptions;
    }
    class Body;
    namespace CAE
    {
        class FemSynchronizeOptions;
    }
    class CoordinateSystem;
    class Part;
    namespace CAE
    {
        class FemCreationOptionsImpl;
        /**  @brief  Represents the FEM creation options to be used when a FEM part is created  

          <br> To create a new instance of this class, use @link NXOpen::CAE::FemPart::NewFemCreationOptions  NXOpen::CAE::FemPart::NewFemCreationOptions @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  FemCreationOptions : public NXOpen::TransientObject
        {
            /** Used to specify the option of specifying bodies to use from the CAD Part while creating @link CAE::FemPart CAE::FemPart@endlink . */
            public: enum UseBodiesOption
            {
                UseBodiesOptionSelectedBodies/** Use selected bodies from the cad part */,
                UseBodiesOptionVisibleBodies/** Use all visible bodies from the cad part */,
                UseBodiesOptionAllBodies/** Use all bodies from the cad part */
            };

            /** Used to specify the option of layer visibility settings from either the CAD Part or Fem Template or both while creating @link CAE::FemPart CAE::FemPart@endlink . */
            public: enum LayerVisibilityOption
            {
                LayerVisibilityOptionPart/** Use layer visibility setting from cad part */,
                LayerVisibilityOptionFemTemplate/** Use layer visibility setting from fem template */,
                LayerVisibilityOptionAll/**Use layer visibility setting from cad part and fem template */
            };

            private: FemCreationOptionsImpl * m_femcreationoptions_impl;
            /// \cond NX_NO_DOC 
            public: explicit FemCreationOptions(void *ptr);
            /// \endcond 
            /** Destroys the object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~FemCreationOptions();
            /** Set associated CAD data 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCadData
            (
                NXOpen::Part * cadPart /** the cad part to be associated with the fem part*/,
                const NXString & idealizedPartName /** the name of the idealized part to be created. */
            );
            /** Set associated CAD data 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetCadData
            (
                NXOpen::Part * cadPart /** the cad part to be associated with the fem part*/,
                const char * idealizedPartName /** the name of the idealized part to be created. */
            );
            /** Set flag to create the idealized part with an autogenerate name, ignoring name set in @link CAE::FemCreationOptions::SetCadData CAE::FemCreationOptions::SetCadData@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAutoGenIdeal
            (
                bool autoGenIdeal /** Create the ideal part and autogenerate a name for the idealized part */
            );
            /** Set CAE geometry options 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGeometryOptions
            (
                NXOpen::CAE::FemCreationOptions::UseBodiesOption useBodiesOption /** Specify bodies to use from the cad part while creating the fem part */,
                const std::vector<NXOpen::Body *> & bodies /** the bodies to be used */,
                NXOpen::CAE::FemSynchronizeOptions * geometrySyncOptions /** geometry sync options */
            );
            /** Set layer visibility options 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLayerVisibilityOptions
            (
                NXOpen::CAE::FemCreationOptions::LayerVisibilityOption layerVisibilityOption /** Specify the layer visibility settings to be copied from either the CAD Part or Fem Template or both while creating the fem part */
            );
            /** Set Solver, Analysis Type, and Axisymmetric Abstraction Type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSolverOptions
            (
                const NXString & solverName /** the name of the solver. Refer to NX help for more information */,
                const NXString & analysisType /** the name of the analysis type. Refer to NX help for more information */,
                NXOpen::CAE::BaseFemPart::AxisymAbstractionType abstractionType /** the axisymmetric abstraction type. Refer to NX help for more information */
            );
            /** Set Solver, Analysis Type, and Axisymmetric Abstraction Type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetSolverOptions
            (
                const char * solverName /** the name of the solver. Refer to NX help for more information */,
                const char * analysisType /** the name of the analysis type. Refer to NX help for more information */,
                NXOpen::CAE::BaseFemPart::AxisymAbstractionType abstractionType /** the axisymmetric abstraction type. Refer to NX help for more information */
            );
            /** Set FEM Part file descriptive text 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDescription
            (
                std::vector<NXString> & description /** description */
            );
            /** Set the morphing enabled flag
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMorphingFlag
            (
                bool isMorphEnabled /** Is Mesh Morphing enabled or not */
            );
            /** Set the cyclic symmetry coordinate system options 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCyclicSymmetryData
            (
                bool useCyclicSymmetryCsys /** Use the selected cyclic symmetry csys or not */,
                NXOpen::CoordinateSystem * cyclicSymmetryCsys /** tag of selected cyclic symmetry or null  */
            );
            /** Set the axi plane check flag
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAxiPlaneCheckState
            (
                bool axiPlaneCheckState /** axi plane check state */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
