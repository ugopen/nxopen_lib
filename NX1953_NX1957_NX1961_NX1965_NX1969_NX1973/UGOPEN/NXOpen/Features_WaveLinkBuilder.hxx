#ifndef NXOpen_FEATURES_WAVELINKBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_WAVELINKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_WaveLinkBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_CompositeCurveBuilder.hxx>
#include <NXOpen/Features_ExtractFaceBuilder.hxx>
#include <NXOpen/Features_MirrorBodyBuilder.hxx>
#include <NXOpen/Features_WaveDatumBuilder.hxx>
#include <NXOpen/Features_WavePointBuilder.hxx>
#include <NXOpen/Features_WaveRoutingBuilder.hxx>
#include <NXOpen/Features_WaveSketchBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class WaveLinkBuilder;
    }
    namespace Features
    {
        class CompositeCurveBuilder;
    }
    namespace Features
    {
        class ExtractFaceBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class MirrorBodyBuilder;
    }
    namespace Features
    {
        class WaveDatumBuilder;
    }
    namespace Features
    {
        class WavePointBuilder;
    }
    namespace Features
    {
        class WaveRoutingBuilder;
    }
    namespace Features
    {
        class WaveSketchBuilder;
    }
    namespace Features
    {
        class _WaveLinkBuilderBuilder;
        class WaveLinkBuilderImpl;
        /**
            Represents a Wavelink Feature builder.
            Inputs to this class can be convergent objects.
             <br> To create a new instance of this class, use @link NXOpen::Features::BaseFeatureCollection::CreateWaveLinkBuilder  NXOpen::Features::BaseFeatureCollection::CreateWaveLinkBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Associative </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.AllowSelfIntersection </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.Associative </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.CurveFitData.CurveJoinMethod </term> <description> 
         
        No </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.CurveFitData.Degree </term> <description> 
         
        7 </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.CurveFitData.FitMethod </term> <description> 
         
        DegreeAndSegments </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.CurveFitData.IsAdvancedFit </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.CurveFitData.IsAlignShape </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.CurveFitData.MaximumDegree </term> <description> 
         
        7 </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.CurveFitData.MaximumSegments </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.CurveFitData.MinimumDegree </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.CurveFitData.Segments </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.HideOriginal </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        CompositeCurveBuilder.InheritDisplayProperties </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        CopyThreads </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        ExtractFaceBuilder.AngleTolerance </term> <description> 
         
        45.0 </description> </item> 

        <item><term> 
         
        ExtractFaceBuilder.Associative </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        ExtractFaceBuilder.CopyThreads </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        ExtractFaceBuilder.DeleteHoles </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        ExtractFaceBuilder.FixAtCurrentTimestamp </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        ExtractFaceBuilder.InheritDisplayProperties </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        ExtractFaceBuilder.IsPsmOutputBody </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        ExtractFaceBuilder.MakePositionIndependent </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        ExtractFaceBuilder.ReplacementAssistant.OneToOne </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        MirrorBodyBuilder.Associative </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        MirrorBodyBuilder.CopyThreads </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        MirrorBodyBuilder.FixAtCurrentTimestamp </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        MirrorBodyBuilder.InheritDisplayProperties </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        MirrorBodyBuilder.MakePositionIndependent </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        MirrorBodyBuilder.ParentPartType </term> <description> 
         
        WorkPart </description> </item> 

        <item><term> 
         
        MirrorBodyBuilder.ReplacementAssistant.OneToOne </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        WaveDatumBuilder.Associative </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        WaveDatumBuilder.DisplayScale </term> <description> 
         
        2.0 </description> </item> 

        <item><term> 
         
        WaveDatumBuilder.InheritDisplayProperties </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        WaveDatumBuilder.ParentPart </term> <description> 
         
        OtherPart </description> </item> 

        <item><term> 
         
        WavePointBuilder.Associative </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        WavePointBuilder.DrawLineBetweenPoints </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        WavePointBuilder.InheritDisplayProperties </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        WavePointBuilder.ParentPart </term> <description> 
         
        OtherPart </description> </item> 

        <item><term> 
         
        WaveRoutingBuilder.Associative </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        WaveSketchBuilder.Associative </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        WaveSketchBuilder.DisplayReferenceGeometry </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        WaveSketchBuilder.InheritDisplayProperties </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        WaveSketchBuilder.ParentPart </term> <description> 
         
        OtherPart </description> </item> 

        </list> 

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  WaveLinkBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Wave Linker type */
            public: enum Types
            {
                TypesCurveLink/** curve link */ ,
                TypesPointLink/** point link */ ,
                TypesDatumLink/** datum link */ ,
                TypesSketchLink/** sketch link */ ,
                TypesFaceLink/** face link */ ,
                TypesRegionLink/** region link */ ,
                TypesBodyLink/** body link */ ,
                TypesMirrorBodyLink/** mirror body link */ ,
                TypesRoutingObjectLink/** routing object link */ 
            };

            private: WaveLinkBuilderImpl * m_wavelinkbuilder_impl;
            private: friend class  _WaveLinkBuilderBuilder;
            protected: WaveLinkBuilder();
            public: ~WaveLinkBuilder();
            /**Returns  the type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::WaveLinkBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::WaveLinkBuilder::Types type /** type */ 
            );
            /**Returns  the associative 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the blank original 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool BlankOriginal
            (
            );
            /**Sets  the blank original 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBlankOriginal
            (
                bool blankoriginal /** blankoriginal */ 
            );
            /**Returns  the fix at timestamp option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool FixAtCurrentTimestamp
            (
            );
            /**Sets  the fix at timestamp option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFixAtCurrentTimestamp
            (
                bool timestamp /** timestamp */ 
            );
            /**Returns the composite curve builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::CompositeCurveBuilder * CompositeCurveBuilder
            (
            );
            /**Returns the extractfacebuilder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder * ExtractFaceBuilder
            (
            );
            /**Sets the extractfacebuilder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtractFaceBuilder
            (
                NXOpen::Features::ExtractFaceBuilder * extractFaceBuilder /** extractfacebuilder */ 
            );
            /**Returns the wave datum builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::WaveDatumBuilder * WaveDatumBuilder
            (
            );
            /**Sets the wave datum builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetWaveDatumBuilder
            (
                NXOpen::Features::WaveDatumBuilder * wavedatumBuilder /** wavedatumbuilder */ 
            );
            /**Returns the wave sketch builder 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::WaveSketchBuilder * WaveSketchBuilder
            (
            );
            /**Sets the wave sketch builder 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetWaveSketchBuilder
            (
                NXOpen::Features::WaveSketchBuilder * wavesketchBuilder /** wavesketchbuilder */ 
            );
            /**Returns the wave routing builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::WaveRoutingBuilder * WaveRoutingBuilder
            (
            );
            /**Sets the wave routing builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetWaveRoutingBuilder
            (
                NXOpen::Features::WaveRoutingBuilder * waveroutingBuilder /** waveroutingbuilder */ 
            );
            /**Returns the wave point builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::WavePointBuilder * WavePointBuilder
            (
            );
            /**Sets the wave point builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetWavePointBuilder
            (
                NXOpen::Features::WavePointBuilder * wavepointBuilder /** wavepointbuilder */ 
            );
            /**Returns the mirrorbodybuilder
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MirrorBodyBuilder * MirrorBodyBuilder
            (
            );
            /**Sets the mirrorbodybuilder
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMirrorBodyBuilder
            (
                NXOpen::Features::MirrorBodyBuilder * mirrorBodyBuilder /** mirrorbodybuilder */ 
            );
            /**Returns  the copy threads option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CopyThreads
            (
            );
            /**Sets  the copy threads option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCopyThreads
            (
                bool copyThreads /** copythreads */ 
            );
            /**Returns  the make position independent option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool MakePositionIndependent
            (
            );
            /**Sets  the make position independent option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMakePositionIndependent
            (
                bool makePositionIndependent /** makepositionindependent */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
