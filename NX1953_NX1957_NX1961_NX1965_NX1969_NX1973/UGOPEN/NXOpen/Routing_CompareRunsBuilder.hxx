#ifndef NXOpen_ROUTING_COMPARERUNSBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_COMPARERUNSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_CompareRunsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class CompareRunsBuilder;
    }
    class Builder;
    namespace Routing
    {
        class _CompareRunsBuilderBuilder;
        class CompareRunsBuilderImpl;
        /** Represents a @link NXOpen::Routing::CompareRunsBuilder NXOpen::Routing::CompareRunsBuilder@endlink , used to compare runs in the work 
                part to the ones in another part, or to runs defined in xml files gathered in a folder 
                (native mode) or on an item revision (managed mode).
             <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreateCompareRunsBuilder  NXOpen::Routing::RouteManager::CreateCompareRunsBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        CompareTypesEnum </term> <description> 
         
        Xml </description> </item> 

        </list> 

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  CompareRunsBuilder : public NXOpen::Builder
        {
            /** The Compare Type selection Enum. */
            public: enum CompareTypes
            {
                CompareTypesXml/** xml */ ,
                CompareTypesPart/** part */ 
            };

            private: CompareRunsBuilderImpl * m_comparerunsbuilder_impl;
            private: friend class  _CompareRunsBuilderBuilder;
            protected: CompareRunsBuilder();
            public: ~CompareRunsBuilder();
            /**Returns  the full path input to the compare runs algorithm.  Can be a folder or an item revision for xml comparisons, or a part.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString InputPathString
            (
            );
            /**Sets  the full path input to the compare runs algorithm.  Can be a folder or an item revision for xml comparisons, or a part.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetInputPathString
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the full path input to the compare runs algorithm.  Can be a folder or an item revision for xml comparisons, or a part.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetInputPathString
            (
                const char * filename /** filename */ 
            );
            /**Returns  the Compare type: part or xml 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::CompareRunsBuilder::CompareTypes CompareTypesEnum
            (
            );
            /**Sets  the Compare type: part or xml 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetCompareTypesEnum
            (
                NXOpen::Routing::CompareRunsBuilder::CompareTypes compareTypesEnum /** comparetypesenum */ 
            );
            /**Returns  the option to report discrepancies down to attribute level. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool ReportDiscrepancies
            (
            );
            /**Sets  the option to report discrepancies down to attribute level. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetReportDiscrepancies
            (
                bool reportDiscrepancies /** reportdiscrepancies */ 
            );
            /**Returns  the filter used to limit which runs are compared among those in the folder or on the item revision 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString FilterString
            (
            );
            /**Sets  the filter used to limit which runs are compared among those in the folder or on the item revision 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetFilterString
            (
                const NXString & filterString /** filterstring */ 
            );
            /**Sets  the filter used to limit which runs are compared among those in the folder or on the item revision 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetFilterString
            (
                const char * filterString /** filterstring */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
