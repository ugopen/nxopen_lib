#ifndef NXOpen_ANNOTATIONS_PMI_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_PMI_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_Pmi.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_AssociatedObject.hxx>
#include <NXOpen/Annotations_PmiBalloonNoteData.hxx>
#include <NXOpen/Annotations_PmiCoordinateNoteData.hxx>
#include <NXOpen/Annotations_PmiDatumData.hxx>
#include <NXOpen/Annotations_PmiDimensionData.hxx>
#include <NXOpen/Annotations_PmiEnterpriseIdentifierData.hxx>
#include <NXOpen/Annotations_PmiExportControlData.hxx>
#include <NXOpen/Annotations_PmiFcfData.hxx>
#include <NXOpen/Annotations_PmiGovernmentSecurityInfoData.hxx>
#include <NXOpen/Annotations_PmiLineWeldData.hxx>
#include <NXOpen/Annotations_PmiLocatorDesignatorData.hxx>
#include <NXOpen/Annotations_PmiMaterialSpecificationData.hxx>
#include <NXOpen/Annotations_PmiNoteData.hxx>
#include <NXOpen/Annotations_PmiPartIdentificationData.hxx>
#include <NXOpen/Annotations_PmiProcessSpecificationData.hxx>
#include <NXOpen/Annotations_PmiProprietaryInfoData.hxx>
#include <NXOpen/Annotations_PmiRegionData.hxx>
#include <NXOpen/Annotations_PmiSurfaceFinishData.hxx>
#include <NXOpen/Annotations_IPmi.hxx>
#include <NXOpen/Annotations_IPmiSemantics.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class Pmi;
    }
    namespace Annotations
    {
        class Annotation;
    }
    namespace Annotations
    {
        class AssociatedObject;
    }
    namespace Annotations
    {
        class BusinessModifier;
    }
    namespace Annotations
    {
        class IPmi;
    }
    namespace Annotations
    {
        class IPmiSemantics;
    }
    namespace Annotations
    {
        class PmiBalloonNoteData;
    }
    namespace Annotations
    {
        class PmiCoordinateNoteData;
    }
    namespace Annotations
    {
        class PmiDatumData;
    }
    namespace Annotations
    {
        class PmiDimensionData;
    }
    namespace Annotations
    {
        class PmiEnterpriseIdentifierData;
    }
    namespace Annotations
    {
        class PmiExportControlData;
    }
    namespace Annotations
    {
        class PmiFcfData;
    }
    namespace Annotations
    {
        class PmiGovernmentSecurityInfoData;
    }
    namespace Annotations
    {
        class PmiLineWeldData;
    }
    namespace Annotations
    {
        class PmiLocatorDesignatorData;
    }
    namespace Annotations
    {
        class PmiMaterialSpecificationData;
    }
    namespace Annotations
    {
        class PmiNoteData;
    }
    namespace Annotations
    {
        class PmiPartIdentificationData;
    }
    namespace Annotations
    {
        class PmiProcessSpecificationData;
    }
    namespace Annotations
    {
        class PmiProprietaryInfoData;
    }
    namespace Annotations
    {
        class PmiRegionData;
    }
    namespace Annotations
    {
        class PmiSurfaceFinishData;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class INXObject;
    class NXObject;
    namespace Annotations
    {
        class _PmiBuilder;
        class PmiImpl;
        /** Represents a PMI(Product and Manufacturing Information) object. A PMI object
                is used to embed non-geometric information into part. It is displayed in the 
                graphics area using objects called PMI Display Instances represented by 
                subclasses of @link NXOpen::Annotations::Annotation NXOpen::Annotations::Annotation@endlink  and inheriting from
                @link NXOpen::Annotations::IPmi NXOpen::Annotations::IPmi@endlink .  
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  Pmi : public NXOpen::NXObject, public virtual NXOpen::Annotations::IPmi, public virtual NXOpen::Annotations::IPmiSemantics
        {
            private: PmiImpl * m_pmi_impl;
            private: friend class  _PmiBuilder;
            protected: Pmi();
            public: ~Pmi();
            /** Returns all the objects that display this PMI in graphics area.  @return  List of display instances 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::Annotation *> GetDisplayInstances
            (
            );
            /** Returns the business modifiers  @return  List of business modifiers 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual std::vector<NXOpen::Annotations::BusinessModifier *> GetBusinessModifiers
            (
            );
            /** Sets the business modifiers.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetBusinessModifiers
            (
                const std::vector<NXOpen::Annotations::BusinessModifier *> & businessModifiers /** List of new business modifiers */
            );
            /** Adds the business modifiers. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual void AddBusinessModifiers
            (
                const std::vector<NXOpen::Annotations::BusinessModifier *> & businessModifiers /** List of new business modifiers */
            );
            /** Returns the associated object  @return  Associated object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Annotations::AssociatedObject * GetAssociatedObject
            (
            );
            /** Returns the shared associated objects  @return  Shared associated objects 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Annotations::AssociatedObject * GetSharedAssociatedObject
            (
            );
            /** Sets the associated object.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetAssociatedObject
            (
                NXOpen::Annotations::AssociatedObject * assocObj /** New associated object */
            );
            /**Returns  the index. It is a unique integer assigned to a PMI object.

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual int Index
            (
            );
            /**Sets  the index. It is a unique integer assigned to a PMI object.

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetIndex
            (
                int index /** New integer for PMI object */
            );
            /**Returns  a flag indicating whether the annotation is mirrored 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual bool IsMirrored
            (
            );
            /**Returns  a flag indicating whether the pmi is wave linked 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual bool IsWaveLinked
            (
            );
            /**Returns  the source pmi of linked pmi which is linked via wave or mirror. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Annotations::Annotation * LinkSource
            (
            );
            /** Returns the PMI Datum semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiDatumData * GetDatumData
            (
            );
            /** Returns the PMI Dimension semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiDimensionData * GetDimensionData
            (
            );
            /** Returns the PMI Feature Control Frame semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiFcfData * GetFcfData
            (
            );
            /** Returns the PMI Note semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiNoteData * GetNoteData
            (
            );
            /** Returns the PMI Line Weld semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiLineWeldData * GetLineWeldData
            (
            );
            /** Returns the PMI Region semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiRegionData * GetRegionData
            (
            );
            /** Returns the PMI Proprietary Information semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiProprietaryInfoData * GetProprietaryInfoData
            (
            );
            /** Returns the PMI Government Security Information semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiGovernmentSecurityInfoData * GetGovernmentSecurityInfoData
            (
            );
            /** Returns the PMI Export Control semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiExportControlData * GetExportControlData
            (
            );
            /** Returns the PMI Balloon Note semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiBalloonNoteData * GetBalloonNoteData
            (
            );
            /** Returns the PMI Material Specification semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiMaterialSpecificationData * GetMaterialSpecificationData
            (
            );
            /** Returns the PMI Enterprise Identifier semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiEnterpriseIdentifierData * GetEnterpriseIdentifierData
            (
            );
            /** Returns the PMI Process Specification semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiProcessSpecificationData * GetProcessSpecificationData
            (
            );
            /** Returns the PMI Part Identification semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiPartIdentificationData * GetPartIdentificationData
            (
            );
            /** Returns the PMI Locator Designator semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiLocatorDesignatorData * GetLocatorDesignatorData
            (
            );
            /** Returns the PMI Coordinate Note semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiCoordinateNoteData * GetCoordinateNoteData
            (
            );
            /** Returns the PMI Surface Finish semantic data  @return  PMI semantic data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual NXOpen::Annotations::PmiSurfaceFinishData * GetSurfaceFinishData
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
