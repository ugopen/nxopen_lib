#ifndef NXOpen_FEATURES_AEROFLANGEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_AEROFLANGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_AeroFlangeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/GeometricUtilities_CurveLengthBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class AeroFlangeBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class CurveLengthBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace GeometricUtilities
    {
        class ProjectionOptions;
    }
    class Plane;
    class ScCollector;
    class Section;
    namespace Features
    {
        class _AeroFlangeBuilderBuilder;
        class AeroFlangeBuilderImpl;
        /**
            Represents a @link NXOpen::Features::AeroFlange NXOpen::Features::AeroFlange@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::AeroCollection::CreateAeroFlangeBuilder  NXOpen::Features::AeroCollection::CreateAeroFlangeBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AlignRefType0 </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        AlignRefType1 </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        BooleanOperation.Type </term> <description> 
         
        Create </description> </item> 

        <item><term> 
         
        CurveLength.EndOffset0.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        CurveLength.EndOffset1.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        CurveLength.EndType0 </term> <description> 
         
        Value </description> </item> 

        <item><term> 
         
        CurveLength.EndType1 </term> <description> 
         
        Value </description> </item> 

        <item><term> 
         
        GuideObjectType </term> <description> 
         
        Face </description> </item> 

        <item><term> 
         
        Limit1Offset.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        Limit1Type </term> <description> 
         
        FromGuideCurve </description> </item> 

        <item><term> 
         
        Limit2Offset.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        Limit2Type </term> <description> 
         
        FromGuideCurve </description> </item> 

        <item><term> 
         
        ReverseThicknessDirection </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        ReverseThicknessOffsetDirection </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        ReverseWidthOffsetDirection </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        Thickness.Value </term> <description> 
         
        2 (millimeters part), 0.1 (inches part) </description> </item> 

        <item><term> 
         
        ThicknessDimensionType </term> <description> 
         
        Simple </description> </item> 

        <item><term> 
         
        ThicknessOffset.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        Width1.Value </term> <description> 
         
        25 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        Width2.Value </term> <description> 
         
        25 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        WidthDimensionType </term> <description> 
         
        Simple </description> </item> 

        <item><term> 
         
        WidthMethod </term> <description> 
         
        OffsetGuideCurveAlongSkin </description> </item> 

        <item><term> 
         
        WidthOffset.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  AeroFlangeBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** This attribute represents the Guide Object types */
            public: enum GuideObjectTypes
            {
                GuideObjectTypesFace/** Guide object is face */,
                GuideObjectTypesDatumPlane/** Guide object is datum plane */,
                GuideObjectTypesCurve/** Guide object is curve */
            };

            /** This attribute represents the options for thickness dimension */
            public: enum ThicknessDimensionOptions
            {
                ThicknessDimensionOptionsSimple/** simple */ ,
                ThicknessDimensionOptionsSymmetric/** symmetric */ 
            };

            /** This attribute represents the width method */
            public: enum WidthMethods
            {
                WidthMethodsOffsetGuideFace/** offset guide face */ ,
                WidthMethodsOffsetGuideCurveAlongSkin/** offset guide curve along skin */ 
            };

            /** This attribute represents the options for width dimension */
            public: enum WidthDimensionOptions
            {
                WidthDimensionOptionsSimple/** simple */ ,
                WidthDimensionOptionsSymmetric/** symmetric */ ,
                WidthDimensionOptionsAsymmetric/** asymmetric */ 
            };

            /** This attribute represents the limit object types */
            public: enum LimitObjectTypes
            {
                LimitObjectTypesFromGuideCurve/** from guide curve */ ,
                LimitObjectTypesFromSelected/** from selected */ 
            };

            /** This attribute represents the options for on path dimension */
            public: enum PointOption
            {
                PointOptionArcLength/** arc length */ ,
                PointOptionPercentArcLength/** percent arc length */ ,
                PointOptionParameterArcLength/** parameter arc length */ ,
                PointOptionThroughPoint/** through point */ 
            };

            /** This attribute represents align end type */
            public: enum AlignReferenceType
            {
                AlignReferenceTypeNone/** none */ ,
                AlignReferenceTypeLengthFace/** length face */ ,
                AlignReferenceTypeSkin/** skin */ ,
                AlignReferenceTypeGuideFace/** guide face */ 
            };

            private: AeroFlangeBuilderImpl * m_aeroflangebuilder_impl;
            private: friend class  _AeroFlangeBuilderBuilder;
            protected: AeroFlangeBuilder();
            public: ~AeroFlangeBuilder();
            /**Returns  the skin face collector 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SkinFaceCollector
            (
            );
            /**Returns  the guide object type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroFlangeBuilder::GuideObjectTypes GuideObjectType
            (
            );
            /**Sets  the guide object type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetGuideObjectType
            (
                NXOpen::Features::AeroFlangeBuilder::GuideObjectTypes guideObjectType /** guideobjecttype */ 
            );
            /**Returns  the guide faces 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * GuideFaces
            (
            );
            /**Returns  the plane 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the plane 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the section 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );
            /**Returns  the project direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ProjectionOptions * ProjectDirection
            (
            );
            /**Returns  the thickness dimension type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroFlangeBuilder::ThicknessDimensionOptions ThicknessDimensionType
            (
            );
            /**Sets  the thickness dimension type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetThicknessDimensionType
            (
                NXOpen::Features::AeroFlangeBuilder::ThicknessDimensionOptions thicknessDimensionType /** thicknessdimensiontype */ 
            );
            /**Returns  the thickness 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Thickness
            (
            );
            /**Returns  the reverse thickness direction flag. Indicates whether the thickness direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseThicknessDirection
            (
            );
            /**Sets  the reverse thickness direction flag. Indicates whether the thickness direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetReverseThicknessDirection
            (
                bool reverseThicknessDirection /** reversethicknessdirection */ 
            );
            /**Returns  the thickness offset 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThicknessOffset
            (
            );
            /**Returns  the reverse thickness offset direction flag. Indicates whether the thickness offset direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseThicknessOffsetDirection
            (
            );
            /**Sets  the reverse thickness offset direction flag. Indicates whether the thickness offset direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetReverseThicknessOffsetDirection
            (
                bool reverseThicknessOffsetDirection /** reversethicknessoffsetdirection */ 
            );
            /**Returns  the width method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroFlangeBuilder::WidthMethods WidthMethod
            (
            );
            /**Sets  the width method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetWidthMethod
            (
                NXOpen::Features::AeroFlangeBuilder::WidthMethods widthMethod /** widthmethod */ 
            );
            /**Returns  the width dimension type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroFlangeBuilder::WidthDimensionOptions WidthDimensionType
            (
            );
            /**Sets  the width dimension type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetWidthDimensionType
            (
                NXOpen::Features::AeroFlangeBuilder::WidthDimensionOptions widthDimensionType /** widthdimensiontype */ 
            );
            /**Returns  the width1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Width1
            (
            );
            /**Returns  the reverse width1 direction flag. Indicates whether the width1 direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseWidth1Direction
            (
            );
            /**Sets  the reverse width1 direction flag. Indicates whether the width1 direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetReverseWidth1Direction
            (
                bool reverseWidth1Direction /** reversewidth1direction */ 
            );
            /**Returns  the width offset 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * WidthOffset
            (
            );
            /**Returns  the reverse width offset direction flag. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseWidthOffsetDirection
            (
            );
            /**Sets  the reverse width offset direction flag. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetReverseWidthOffsetDirection
            (
                bool reverseWidthOffsetDirection /** reversewidthoffsetdirection */ 
            );
            /**Returns  the width2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Width2
            (
            );
            /**Returns  the reverse width2 direction flag. Indicates whether the width2 direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseWidth2Direction
            (
            );
            /**Sets  the reverse width2 direction flag. Indicates whether the width2 direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetReverseWidth2Direction
            (
                bool reverseWidth2Direction /** reversewidth2direction */ 
            );
            /**Returns  the limit1 type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroFlangeBuilder::LimitObjectTypes Limit1Type
            (
            );
            /**Sets  the limit1 type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetLimit1Type
            (
                NXOpen::Features::AeroFlangeBuilder::LimitObjectTypes limit1Type /** limit1type */ 
            );
            /**Returns  the limit1 point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * Limit1Point
            (
            );
            /**Returns  the flag of whether limit1 measure expression used 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsLimit1MeasureExpressionUsed
            (
            );
            /**Sets  the flag of whether limit1 measure expression used 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLimit1MeasureExpressionUsed
            (
                bool isLimit1MeasureExpressionUsed /** islimit1measureexpressionused */ 
            );
            /**Returns  the limit1 selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * Limit1Selection
            (
            );
            /**Returns  the limit1 offset 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Limit1Offset
            (
            );
            /**Returns  the reverse limit1 offset direction flag. Indicates whether the limit1 offset direction has been flipped from its initial inferred direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseLimit1OffsetDirection
            (
            );
            /**Sets  the reverse limit1 offset direction flag. Indicates whether the limit1 offset direction has been flipped from its initial inferred direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetReverseLimit1OffsetDirection
            (
                bool reverseLimit1OffsetDirection /** reverselimit1offsetdirection */ 
            );
            /**Returns  the limit2 type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroFlangeBuilder::LimitObjectTypes Limit2Type
            (
            );
            /**Sets  the limit2 type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetLimit2Type
            (
                NXOpen::Features::AeroFlangeBuilder::LimitObjectTypes limit2Type /** limit2type */ 
            );
            /**Returns  the limit2 point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * Limit2Point
            (
            );
            /**Returns  the flag of whether limit2 measure expression used 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: bool IsLimit2MeasureExpressionUsed
            (
            );
            /**Sets  the flag of whether limit2 measure expression used 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetLimit2MeasureExpressionUsed
            (
                bool isLimit2MeasureExpressionUsed /** islimit2measureexpressionused */ 
            );
            /**Returns  the limit2 selection 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * Limit2Selection
            (
            );
            /**Returns  the limit2 offset 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Limit2Offset
            (
            );
            /**Returns  the reverse limit2 offset direction flag. Indicates whether the limit2 offset direction has been flipped from its initial inferred direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseLimit2OffsetDirection
            (
            );
            /**Sets  the reverse limit2 offset direction flag. Indicates whether the limit2 offset direction has been flipped from its initial inferred direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetReverseLimit2OffsetDirection
            (
                bool reverseLimit2OffsetDirection /** reverselimit2offsetdirection */ 
            );
            /**Returns  the boolean operation 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /**Returns  the curve length builder
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveLengthBuilder * CurveLength
            (
            );
            /**Returns  the align ref type0 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroFlangeBuilder::AlignReferenceType AlignRefType0
            (
            );
            /**Sets  the align ref type0 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAlignRefType0
            (
                NXOpen::Features::AeroFlangeBuilder::AlignReferenceType alignRefType0 /** alignreftype0 */ 
            );
            /**Returns  the align ref type1 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroFlangeBuilder::AlignReferenceType AlignRefType1
            (
            );
            /**Sets  the align ref type1 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAlignRefType1
            (
                NXOpen::Features::AeroFlangeBuilder::AlignReferenceType alignRefType1 /** alignreftype1 */ 
            );
            /** Construct guide curves 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void ConstructGuidecurves
            (
                bool deleteGuideCurves /** deleteguidecurves */ ,
                bool showGuideCurves /** showguidecurves */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
