#ifndef NXOpen_REPORT_DOUBLEARGUMENT_HXX_INCLUDED
#define NXOpen_REPORT_DOUBLEARGUMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Report_DoubleArgument.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Report_BaseArgument.hxx>
#include <NXOpen/libnxopencpp_report_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Report
    {
        class DoubleArgument;
    }
    namespace Report
    {
        class BaseArgument;
    }
    namespace Report
    {
        class _DoubleArgumentBuilder;
        class DoubleArgumentImpl;
        /** Represents an argument for double type data. This class
                does not include upper bound and lower bound in default.  <br> Not support KF.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_REPORTEXPORT  DoubleArgument : public NXOpen::Report::BaseArgument
        {
            private: DoubleArgumentImpl * m_doubleargument_impl;
            private: friend class  _DoubleArgumentBuilder;
            protected: DoubleArgument();
            public: ~DoubleArgument();
            /**Returns  the maximum value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double MaximumValue
            (
            );
            /**Sets  the maximum value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumValue
            (
                double maximumValue /** maximumvalue */ 
            );
            /**Returns   @brief  a value that indicates whether includes the upper bound.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeUpperBound
            (
            );
            /**Sets   @brief  a value that indicates whether includes the upper bound.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIncludeUpperBound
            (
                bool includeUpperBound /** includeupperbound */ 
            );
            /**Returns  the minimum value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double MimimumValue
            (
            );
            /**Sets  the minimum value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMimimumValue
            (
                double minimumValue /** minimumvalue */ 
            );
            /**Returns   @brief  a value that indicates whether includes the lower bound.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeLowerBound
            (
            );
            /**Sets   @brief  a value that indicates whether includes the lower bound.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIncludeLowerBound
            (
                bool includeLowerBound /** includelowerbound */ 
            );
            /**Returns  the arguement dafault value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double DefaultValue
            (
            );
            /**Sets  the arguement dafault value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultValue
            (
                double argumentValue /** argumentvalue */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
