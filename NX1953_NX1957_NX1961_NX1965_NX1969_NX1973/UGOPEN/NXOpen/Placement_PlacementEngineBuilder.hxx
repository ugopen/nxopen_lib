#ifndef NXOpen_PLACEMENT_PLACEMENTENGINEBUILDER_HXX_INCLUDED
#define NXOpen_PLACEMENT_PLACEMENTENGINEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Placement_PlacementEngineBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Placement_PlacementSolution.hxx>
#include <NXOpen/libnxopencpp_placement_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Placement
    {
        class PlacementEngineBuilder;
    }
    class Builder;
    namespace Placement
    {
        class PlacementSolution;
    }
    namespace Placement
    {
        class _PlacementEngineBuilderBuilder;
        class PlacementEngineBuilderImpl;
        /** Represents a builder class that will create and work with placement solutions.
             <br> An instance of this class can be obtained from @link NXOpen::RoutingCommon::PartPlacementBuilder::InitializePlacementEngineBuilder NXOpen::RoutingCommon::PartPlacementBuilder::InitializePlacementEngineBuilder@endlink   <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_PLACEMENTEXPORT  PlacementEngineBuilder : public NXOpen::Builder
        {
            private: PlacementEngineBuilderImpl * m_placementenginebuilder_impl;
            private: friend class  _PlacementEngineBuilderBuilder;
            protected: PlacementEngineBuilder();
            public: ~PlacementEngineBuilder();
            /** Computes and returns the placement solutions
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Placement::PlacementSolution *> ComputePlacementSolutions
            (
            );
            /** Sets the input PlacementSolutions as the filtered solutions on the PlacementEngineBuilder in the given order.
                        Different clients can have their own methodology for filtering the solutions 
                        e.g. Part Placement can decide to filter out solutions based on a particular port on the input placeable object.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFilteredPlacementSolutions
            (
                const std::vector<NXOpen::Placement::PlacementSolution *> & placementSolutions /** placementsolutions */ 
            );
            /** Sets the transform on part being placed using the supplied placement solution.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void ApplyPlacementSolution
            (
                NXOpen::Placement::PlacementSolution * placementSolution /** placementsolution */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
