#ifndef NXOpen_EXPRESSION_HXX_INCLUDED
#define NXOpen_EXPRESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Expression.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Expression;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class Unit;
    class _ExpressionBuilder;
    class ExpressionImpl;
    /** Represents an expression.  <br> To create a new instance of this class, use @link NXOpen::ExpressionCollection::CreateWithUnits  NXOpen::ExpressionCollection::CreateWithUnits @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  Expression : public NXOpen::NXObject
    {
        /** Indicates the units to use when getting an expression's value. */
        public: enum UnitsOption
        {
            UnitsOptionBase/** Base part units. Base units used when storing the value internally. These are part specific.  */,
            UnitsOptionExpression/** Expression units. Units specified on the LHS of the expression string. */,
            UnitsOptionDataEntry/** Data entry units as set by the units manager.*/,
            UnitsOptionInfo/** Object information units as set by the units manager */
        };

        /** Status of the expression. */
        public: enum StatusOption
        {
            StatusOptionOutOfDate/** Expression is out of date. */,
            StatusOptionUpToDate/** Expression is up to date. */,
            StatusOptionLocked/** Expression status is locked. */,
            StatusOptionDelayed/** Expression status is delayed. */,
            StatusOptionBroken/** Expression link is broken. */,
            StatusOptionUnknown/** Expression status cannot be determined. */
        };

        private: ExpressionImpl * m_expression_impl;
        private: friend class  _ExpressionBuilder;
        protected: Expression();
        public: ~Expression();
        /**Returns  the expression as a string in the form: "name = formula".
                Replaces @link Equation Equation@endlink  for new applications code.
                This function will return the expression string for all expressions.
            
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString ExpressionString
        (
        );
        /**Returns  the expression as a string in the form: "name = formula".
                NOTE: Avoid this function in new application code.
                 <br> 
                    This function may return a modified equation if the expression involves angles.
                    If the units of the left and right hand sides of the expression do not have 
                    matching angle dimensions then the legacy system required that a conversion factor
                    be applied as follows (no matter what units were used for the arcAngle):
                    The modification performed by this function can, if needed for some parts, be
                    suppressed by setting the environment variable UGII_KF_DONT_CONVERT_FORMULAS_FOR_RADIAN_UNITS
                 <br> 
                 <br> 
                          [mm]arcRadius = 5
                          [degrees]arcAngle = 5
                          [mm]arcLength = arcRadius * arcAngle * pi() / 180.
                 <br> 
                 <br> 
                    This is no longer needed and, in fact, will give wrong results. So expressions
                    are modified on load to remove this conversion factor (pi()/180.). However, legacy callers to this function would
                    expect it to be there, so this function will add it, even if the actual equation is:
                 <br> 
                 <br> 
                          [mm]arcLength = arcRadius * arcAngle
                 <br> 
                 <br> 
                To return the actual equation for all expressions, use instead @link ExpressionString ExpressionString@endlink .
                 <br> 
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Equation
        (
        );
        /** Get the formula part of the expression string: "name = formula".
                Replaces @link RightHandSide RightHandSide@endlink  for new application code.
             @return  
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetFormula
        (
        );
        /** Set the formula part of the expression string: "name = formula".
                Replaces @link SetRightHandSide SetRightHandSide@endlink  for new application code.
            
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFormula
        (
            const NXString & rightHandSide /** right hand side */ 
        );
        /** Set the formula part of the expression string: "name = formula".
                Replaces @link SetRightHandSide SetRightHandSide@endlink  for new application code.
            
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        void SetFormula
        (
            const char * rightHandSide /** right hand side */ 
        );
        /**Returns  the formula (right hand side) of the expression string: "name = formula".
                NOTE: Avoid this function in new application code.
                 <br>  When setting/getting this property, this function may set/return a modified formula if the expression involves angles.
                    If the units of the left and right hand sides of the expression do not have 
                    matching angle dimensions then the legacy system required that a conversion factor
                    be applied as follows (no matter what units were used for arcAngle):
                    The modification performed by these functions can, if needed for some parts, be
                    suppressed by setting the environment variable UGII_KF_DONT_CONVERT_FORMULAS_FOR_RADIAN_UNITS
                 <br> 
                 <br> 
                          [mm]arcRadius = 5
                          [degrees]arcAngle = 5
                          [mm]arcLength = arcRadius * arcAngle * pi() / 180.
                 <br> 
                     
                 <br> 
                    This is no longer needed and, in fact, will give wrong results. Expressions
                    are modified on load to remove this conversion factor (pi()/180.). However, legacy callers of this function would
                    expect it to be there, so this function will add it, even when returning the formula:
                 <br> 
                 <br> 
                           [mm]arcLength = arcRadius * arcAngle
                 <br> 

                 <br> 
                To set/get the actual right hand side for all expressions, use instead @link GetFormula GetFormula@endlink .
                 <br> 
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString RightHandSide
        (
        );
        /**Sets  the formula (right hand side) of the expression string: "name = formula".
                NOTE: Avoid this function in new application code.
                 <br>  When setting/getting this property, this function may set/return a modified formula if the expression involves angles.
                    If the units of the left and right hand sides of the expression do not have 
                    matching angle dimensions then the legacy system required that a conversion factor
                    be applied as follows (no matter what units were used for arcAngle):
                    The modification performed by these functions can, if needed for some parts, be
                    suppressed by setting the environment variable UGII_KF_DONT_CONVERT_FORMULAS_FOR_RADIAN_UNITS
                 <br> 
                 <br> 
                          [mm]arcRadius = 5
                          [degrees]arcAngle = 5
                          [mm]arcLength = arcRadius * arcAngle * pi() / 180.
                 <br> 
                     
                 <br> 
                    This is no longer needed and, in fact, will give wrong results. Expressions
                    are modified on load to remove this conversion factor (pi()/180.). However, legacy callers of this function would
                    expect it to be there, so this function will add it, even when returning the formula:
                 <br> 
                 <br> 
                           [mm]arcLength = arcRadius * arcAngle
                 <br> 

                 <br> 
                To set/get the actual right hand side for all expressions, use instead @link GetFormula GetFormula@endlink .
                 <br> 
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetRightHandSide
        (
            const NXString & rightHandSide /** right hand side */ 
        );
        /**Sets  the formula (right hand side) of the expression string: "name = formula".
                NOTE: Avoid this function in new application code.
                 <br>  When setting/getting this property, this function may set/return a modified formula if the expression involves angles.
                    If the units of the left and right hand sides of the expression do not have 
                    matching angle dimensions then the legacy system required that a conversion factor
                    be applied as follows (no matter what units were used for arcAngle):
                    The modification performed by these functions can, if needed for some parts, be
                    suppressed by setting the environment variable UGII_KF_DONT_CONVERT_FORMULAS_FOR_RADIAN_UNITS
                 <br> 
                 <br> 
                          [mm]arcRadius = 5
                          [degrees]arcAngle = 5
                          [mm]arcLength = arcRadius * arcAngle * pi() / 180.
                 <br> 
                     
                 <br> 
                    This is no longer needed and, in fact, will give wrong results. Expressions
                    are modified on load to remove this conversion factor (pi()/180.). However, legacy callers of this function would
                    expect it to be there, so this function will add it, even when returning the formula:
                 <br> 
                 <br> 
                           [mm]arcLength = arcRadius * arcAngle
                 <br> 

                 <br> 
                To set/get the actual right hand side for all expressions, use instead @link GetFormula GetFormula@endlink .
                 <br> 
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SetRightHandSide
        (
            const char * rightHandSide /** right hand side */ 
        );
        /**Returns  the value of a number expression in base units.
                Replaces @link Value Value @endlink and @link SetValue SetValue @endlink  for new application code.
                NOTE: Base units for angles is radians. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: double NumberValue
        (
        );
        /**Sets  the value of a number expression in base units.
                Replaces @link Value Value @endlink and @link SetValue SetValue @endlink  for new application code.
                NOTE: Base units for angles is radians. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNumberValue
        (
            double expressionValue /** expressionvalue */ 
        );
        /**Returns  the value of a number expression in base units (except for angle-related expressionss - see below).
                NOTE: Avoid this function in new application code.
                 <br>  If the expression has an angular dimension, then the value is assumed to be
                based on degrees, which will not be the base unit value.
                 <br> 
                 <br> 
                To always set or get the actual base unit value, use @link NumberValue NumberValue @endlink and @link SetNumberValue SetNumberValue @endlink  instead.
                 <br>  
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: double Value
        (
        );
        /**Sets  the value of a number expression in base units (except for angle-related expressionss - see below).
                NOTE: Avoid this function in new application code.
                 <br>  If the expression has an angular dimension, then the value is assumed to be
                based on degrees, which will not be the base unit value.
                 <br> 
                 <br> 
                To always set or get the actual base unit value, use @link NumberValue NumberValue @endlink and @link SetNumberValue SetNumberValue @endlink  instead.
                 <br>  
            
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : None */
        public: void SetValue
        (
            double expressionValue /** expressionvalue */ 
        );
        /** Set the value of a number expression in specified units.
                The units specified have to be compatible with the expression units, but do not have to be the same.
                If the units specified are NULL, then the value is assumed to be in the expression's units, to
                correspond to such expressions as
                 <br> 
                     [mm]L = 5
                 <br> 
            
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNumberValueWithUnits
        (
            double numberValue /** numbervalue */ ,
            NXOpen::Unit * units /** units */ 
        );
        /** Get the number value of a number expression in specified units.
                The value is returned in the units that are also returned as requested by this method.
            
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void GetNumberValueWithUnits
        (
            NXOpen::Expression::UnitsOption unitsOption /** use base units, expression units, data entry units or object info units. */,
            double* numberValue /** numbervalue */ ,
            NXOpen::Unit ** unit /** unit */ 
        );
        /**Returns  the value of string expression.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString StringValue
        (
        );
        /**Returns  the value of a boolean expression.
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool BooleanValue
        (
        );
        /**Returns  the value of an integer expression.
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int IntegerValue
        (
        );
        /**Returns  the value of point expression in base units.
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point3d PointValue
        (
        );
        /** Get the value of a point expression in the specified units. @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point3d GetPointValueWithUnits
        (
            NXOpen::Expression::UnitsOption unitsOption /** use base units, expression units, data entry units or object info units. */
        );
        /**Returns  the value of a vector expression in base units.
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Vector3d VectorValue
        (
        );
        /** Get the value of a vector expression in specified units. @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Vector3d GetVectorValueWithUnits
        (
            NXOpen::Expression::UnitsOption unitsOption /** use base units, expression units, data entry units or object info units. */
        );
        /**Returns  whether the expression is user locked. If this property is false, 
                then the expression can be over-ridden from another part. (This
                is the default state for newly created expressions.) If this 
                property is true, you are not allowed to over-ride it.  This corresponds 
                to the interactive option RMB Toggle Interpart Override Lock.

                 <br> Note that if an expression is currently over-ridden, you cannot set
                its lock property.  In this instance, an exception will be thrown. 
                 <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsUserLocked
        (
        );
        /**Sets  whether the expression is user locked. If this property is false, 
                then the expression can be over-ridden from another part. (This
                is the default state for newly created expressions.) If this 
                property is true, you are not allowed to over-ride it.  This corresponds 
                to the interactive option RMB Toggle Interpart Override Lock.

                 <br> Note that if an expression is currently over-ridden, you cannot set
                its lock property.  In this instance, an exception will be thrown. 
                 <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUserLocked
        (
            bool isLocked /** is locked */ 
        );
        /** Changes the comment. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void EditComment
        (
            const NXString & newComment /** comment */
        );
        /** Changes the comment. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void EditComment
        (
            const char * newComment /** comment */
        );
        /**Returns  whether the expression is a geometric expression.  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsGeometricExpression
        (
        );
        /** Returns an array of the features that use the supplied expression.   @return  array of features, or empty array 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::Features::Feature *> GetUsingFeatures
        (
        );
        /** Returns the feature that created the supplied expression.
             <br> This is the feature that created it during feature creation.  For example,
            the expression "p0 = x" is owned by feature "BLOCK(0)". 
             <br> 

             <br> This works with both normal expressions and expressions created by the
            geometric expression feature. 
             <br>    @return  owning feature or NULL 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Features::Feature * GetOwningFeature
        (
        );
        /** Returns the feature whose rpo_transform created the supplied positioning dimension expression.
             <br> This is the feature that created it during positioning the feature.  For example,
            the expression "p0 = x" is owned by the Transform of feature "Boss(2)". 
             <br> 
            
             <br> This works with expressions created by the feature with rpo. 
             <br>    @return  owning rpo feature or NULL 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Features::Feature * GetOwningRpoFeature
        (
        );
        /** Returns the descriptor for the expression, or NULL if there is no descriptor.  Currently, only feature
            expressions have descriptors.  @return  Expression descriptor. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetDescriptor
        (
        );
        /**Returns  the units for the expression.  This must only be used on number expressions.
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Unit * Units
        (
        );
        /**Sets  the units for the expression.  This must only be used on number expressions.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUnits
        (
            NXOpen::Unit * unitType /** unit type */ 
        );
        /**Returns  the type of the expression. Will be one of the following strings:
                "Number", "String", "Boolean", "Integer", "Point", "Vector", "List" and "Geometric" 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Type
        (
        );
        /**Returns  whether the expression is owned by a measurement.  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsMeasurementExpression
        (
        );
        /**Returns  the description of the expression. 
                This can be used to get the "A"::x formatted name for interpart expressions.
            
         <br>  Created in NX5.0.2.  <br>  
         <br> License requirements : None */
        public: NXString Description
        (
        );
        /** Returns all the referencing expressions of the expression 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::Expression *> GetReferencingExpressions
        (
        );
        /**Returns  whether the expression is edit locked.  If this property is false, 
                then the expression can be edited.  (This is the default state for 
                newly created expressions.)  If this property is true, 
                then the expression cannot be edited.  This corresponds 
                to the interactive option RMB Lock Formula/RMB Unlock Formula.
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool IsNoEdit
        (
        );
        /**Sets  whether the expression is edit locked.  If this property is false, 
                then the expression can be edited.  (This is the default state for 
                newly created expressions.)  If this property is true, 
                then the expression cannot be edited.  This corresponds 
                to the interactive option RMB Lock Formula/RMB Unlock Formula.
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetNoEdit
        (
            bool isNoEdit /** is no edit */ 
        );
        /**Returns  whether the expression is update locked.  If this property is false, 
                then the expression can update.  (This is the default state for 
                newly created expressions.)  If this property is true, 
                then the expression cannot update.
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsNoUpdate
        (
        );
        /**Sets  whether the expression is update locked.  If this property is false, 
                then the expression can update.  (This is the default state for 
                newly created expressions.)  If this property is true, 
                then the expression cannot update.
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNoUpdate
        (
            bool isNoUpdate /** is no update */ 
        );
        /**Returns  whether the expression is an interpart expression. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsInterpartExpression
        (
        );
        /** The source part name and source expression name of the interpart expression 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void GetInterpartExpressionNames
        (
            NXString* partName /** part name */ ,
            NXString* expName /** exp name */ 
        );
        /**Returns  whether the expression formula is locked from user edit.  This can be for a variety of
                reasons.  It can be locked by user,  locked by internal sub system,  part of a measure
                or geometric expression, or locked because of interpart relations. This corresponds
                to the set of expressions governed by the show locked formula expression toggle on the 
                expression dialog. 
            
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsRightHandSideLockedFromEdit
        (
        );
        /** Get the value of the expression in specified units.
                NOTE: Avoid this function in new application code.
                This method must only be used on number expressions.
                 <br>  If the dimensionality of the expression contains an angle dimension and the option specified is
                @link Expression::UnitsOption::Base Expression::UnitsOption::Base@endlink , then the value returned is converted 
                so that the angular dimension is expressed in degrees.
                The only other option supported here is @link Expression::UnitsOption::Expression Expression::UnitsOption::Expression@endlink 
                 <br> 
                 <br> 
                To return the correct base unit value, use @link GetNumberValueWithUnits GetNumberValueWithUnits@endlink  instead.
                 <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: double GetValueUsingUnits
        (
            NXOpen::Expression::UnitsOption unitsOption /** use base units or expression units */
        );
        /**Returns  the @link NXOpen::Expression::StatusOption NXOpen::Expression::StatusOption@endlink  of the expression. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression::StatusOption Status
        (
        );
        /** Make the expression constant. This removes any parents, interpart link information and changes the formula to be constant. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void MakeConstant
        (
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
