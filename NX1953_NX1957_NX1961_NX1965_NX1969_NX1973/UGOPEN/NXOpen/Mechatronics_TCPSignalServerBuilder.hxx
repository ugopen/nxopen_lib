#ifndef NXOpen_MECHATRONICS_TCPSIGNALSERVERBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_TCPSIGNALSERVERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_TCPSignalServerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class TCPSignalServerBuilder;
    }
    class Builder;
    class NXObject;
    namespace Mechatronics
    {
        class _TCPSignalServerBuilderBuilder;
        class TCPSignalServerBuilderImpl;
        /**  @brief  Represents a @link Mechatronics::TCPSignalServerBuilder Mechatronics::TCPSignalServerBuilder@endlink  builder.  

          
             <br> This class is sub-object of another builder, and cannot be directly instantiated.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  TCPSignalServerBuilder : public NXOpen::Builder
        {
             /**  @brief  Represents the data type  

              */
            public:
            struct Signal
            {
                public: /** Signal Object         */NXOpen::NXObject * SignalTag;
                public: /**Signal Checked Status  */bool BChecked;
                public: /** Adress value          */NXString Offset;
                public: Signal() :
                    SignalTag(),
                    BChecked(),
                    Offset()
                {
                }
                /** Constructor for the Signal struct. */ 
                public: Signal(NXOpen::NXObject * signalTagInitial /** Signal Object         */, 
                        bool bCheckedInitial /**Signal Checked Status  */, 
                        const NXString &offsetInitial /** Adress value          */) :
                    SignalTag(signalTagInitial),
                    BChecked(bCheckedInitial),
                    Offset(offsetInitial)
                {
                }
            };

            private: TCPSignalServerBuilderImpl * m_tcpsignalserverbuilder_impl;
            private: friend class  _TCPSignalServerBuilderBuilder;
            protected: TCPSignalServerBuilder();
            public: ~TCPSignalServerBuilder();
            /**  @brief  Gets TCP connection names  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXString> GetConnectionNames
            (
            );
            /**  @brief  Sets TCP connection names  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetConnectionNames
            (
                std::vector<NXString> & names /** names */ 
            );
            /**  @brief  Gets connection information  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void GetConnectionInformation
            (
                const NXString & connectionName /** connectionname */ ,
                NXString* remoteIP /** From 1872, didn't support this output paramter */,
                int* remotePort /** remoteport */ ,
                NXString* localIP /** localip */ ,
                int* localPort /** localport */ ,
                int* rcvBufSize /** rcvbufsize */ ,
                int* sendBufSize /** sendbufsize */ ,
                double* updateTime /** updatetime */ ,
                std::vector<NXOpen::Mechatronics::TCPSignalServerBuilder::Signal> & signals /** Array of Signal */
            );
            /**  @brief  Gets connection information  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void GetConnectionInformation
            (
                const char * connectionName /** connectionname */ ,
                NXString* remoteIP /** From 1872, didn't support this output paramter */,
                int* remotePort /** remoteport */ ,
                NXString* localIP /** localip */ ,
                int* localPort /** localport */ ,
                int* rcvBufSize /** rcvbufsize */ ,
                int* sendBufSize /** sendbufsize */ ,
                double* updateTime /** updatetime */ ,
                std::vector<NXOpen::Mechatronics::TCPSignalServerBuilder::Signal> & signals /** Array of Signal */
            );
            /**  @brief  Sets connection information  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetConnectionInformation
            (
                const NXString & connectionName /** connectionname */ ,
                const NXString & remoteIP /** From 1872, didn't support this input paramter */,
                int remotePort /** remoteport */ ,
                const NXString & localIP /** localip */ ,
                int localPort /** localport */ ,
                int rcvBufSize /** rcvbufsize */ ,
                int sendBufSize /** sendbufsize */ ,
                double updateTime /** updatetime */ ,
                const std::vector<NXOpen::Mechatronics::TCPSignalServerBuilder::Signal> & signals /** Array of Signal */
            );
            /**  @brief  Sets connection information  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetConnectionInformation
            (
                const char * connectionName /** connectionname */ ,
                const char * remoteIP /** From 1872, didn't support this input paramter */,
                int remotePort /** remoteport */ ,
                const char * localIP /** localip */ ,
                int localPort /** localport */ ,
                int rcvBufSize /** rcvbufsize */ ,
                int sendBufSize /** sendbufsize */ ,
                double updateTime /** updatetime */ ,
                const std::vector<NXOpen::Mechatronics::TCPSignalServerBuilder::Signal> & signals /** Array of Signal */
            );
            /**Returns   @brief  the selected configuration name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedConfigurationName
            (
            );
            /**Sets   @brief  the selected configuration name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSelectedConfigurationName
            (
                const NXString & configurationName /** configurationname */ 
            );
            /**Sets   @brief  the selected configuration name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetSelectedConfigurationName
            (
                const char * configurationName /** configurationname */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
