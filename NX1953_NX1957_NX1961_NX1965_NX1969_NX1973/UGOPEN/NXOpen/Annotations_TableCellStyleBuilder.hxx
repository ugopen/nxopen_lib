#ifndef NXOpen_ANNOTATIONS_TABLECELLSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_TABLECELLSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_TableCellStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class TableCellStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _TableCellStyleBuilderBuilder;
        class TableCellStyleBuilderImpl;
        /**
            Represents a @link NXOpen::Annotations::TableCellStyleBuilder NXOpen::Annotations::TableCellStyleBuilder@endlink .
            This class queries and sets preferences for table cells.
            
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  TableCellStyleBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** the valid zero display types */
            public: enum ZeroDisplayType
            {
                ZeroDisplayTypeZero/** zero */ ,
                ZeroDisplayTypeDash/** dash */ ,
                ZeroDisplayTypeEmpty/** empty */ 
            };

            /** the valid text alignment types */
            public: enum TextAlignmentType
            {
                TextAlignmentTypeTopLeft/** Top left*/ = 1,
                TextAlignmentTypeTopCenter/** Top center */,
                TextAlignmentTypeTopRight/** Top right */,
                TextAlignmentTypeMidLeft/** Mid left */,
                TextAlignmentTypeMidCenter/** Mid center */,
                TextAlignmentTypeMidRight/** Mid right*/,
                TextAlignmentTypeBottomLeft/** Bottom left*/,
                TextAlignmentTypeBottomCenter/** Bottom center*/,
                TextAlignmentTypeBottomRight/** Bottom right */
            };

            /** the date format types */
            public: enum DateFormatTypes
            {
                DateFormatTypesDdmmmyyyy/** ddmmmyyyy */ ,
                DateFormatTypesDdmmm/** ddmmm */ ,
                DateFormatTypesMmmyyyy/** mmmyyyy */ ,
                DateFormatTypesMmddyyyy/** mmddyyyy */ ,
                DateFormatTypesYymmmdd/** yymmmdd */ ,
                DateFormatTypesYyyymmdd/** yyyymmdd */ ,
                DateFormatTypesDdmmyyyy/** ddmmyyyy */ 
            };

            /** the time format types */
            public: enum TimeFormatTypes
            {
                TimeFormatTypesHhmm24/** 24 hh:mm */,
                TimeFormatTypesHhmm12/** 12 hh:mm AM/PM */,
                TimeFormatTypesHhmmss24/** 24 hh:mm:ss */,
                TimeFormatTypesHhmmss12/** 12 hh:mm:ss AM/PM */
            };

            /** the cell format types */
            public: enum CellFormatTypes
            {
                CellFormatTypesText/** Text */ = 1,
                CellFormatTypesFloat/** Float */,
                CellFormatTypesFixed/** Fixed */,
                CellFormatTypesGeneral/** General */,
                CellFormatTypesMonetary/** Monetary */,
                CellFormatTypesComma/** Comma */,
                CellFormatTypesFractionHalfSize/** Fraction half size */,
                CellFormatTypesFractionThreeQuarterSize/** Fraction three quarter size */,
                CellFormatTypesFractionFullSize/** Fraction full size */,
                CellFormatTypesDegreesDegreeUnits/** Degrees */,
                CellFormatTypesDegreesRadianUnits/** Radians */,
                CellFormatTypesPercent/** Percent */,
                CellFormatTypesDegrees/** Radians */,
                CellFormatTypesHex/** Hex */,
                CellFormatTypesLogic/** Logic */,
                CellFormatTypesHidden/** Hidden */,
                CellFormatTypesCustom/** Custom */,
                CellFormatTypesDate/** Date */,
                CellFormatTypesTime/** Time */,
                CellFormatTypesDateTime/** Date-Time */
            };

            /** the valid cell format types 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypes NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypes@endlink  instead. <br>  
            */
            public: enum NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypes instead.") FormatType
            {
                FormatTypeText/** text */  = 1,
                FormatTypeFloat/** float */ ,
                FormatTypeFixed/** fixed */ ,
                FormatTypeGeneral/** general */ ,
                FormatTypeMonetary/** monetary */ ,
                FormatTypeComma/** comma */ ,
                FormatTypeFractionHalfSize/** fraction half size */ ,
                FormatTypeFractionThreeQuarterSize/** fraction three quarter size */ ,
                FormatTypeFractionFullSize/** fraction full size */ ,
                FormatTypeDegreesDegreeUnits/** Degrees */,
                FormatTypeDegreesRadianUnits/** Radians */,
                FormatTypePercent/** percent */ ,
                FormatTypeDegrees/** Radians */,
                FormatTypeHex/** hex */ ,
                FormatTypeLogic/** logic */ ,
                FormatTypeDateDmy/** date dmy */ ,
                FormatTypeDateDm/** date dm */ ,
                FormatTypeDateMy/** date my */ ,
                FormatTypeDateMdy/** date mdy */ ,
                FormatTypeDateYmd/** date ymd */ ,
                FormatTypeDateY4md/** date y4md */ ,
                FormatTypeDateDmyDot/** date dmy dot */ ,
                FormatTypeTimeHm/** time hm */ ,
                FormatTypeTimeHms/** time hms */ ,
                FormatTypeHidden/** hidden */ ,
                FormatTypeCustom/** custom */ 
            };

            /** the valid border location types */
            public: enum BorderLocationType
            {
                BorderLocationTypeAll/** all */ ,
                BorderLocationTypeLeft/** left */ ,
                BorderLocationTypeTop/** top */ ,
                BorderLocationTypeRight/** right */ ,
                BorderLocationTypeBottom/** bottom */ ,
                BorderLocationTypeMiddle/** middle */ ,
                BorderLocationTypeCenter/** center */ 
            };

            /** the valid tab direction */
            public: enum TabDirectionType
            {
                TabDirectionTypeRight/** right */ ,
                TabDirectionTypeLeft/** left */ ,
                TabDirectionTypeUp/** up */ ,
                TabDirectionTypeDown/** down */ 
            };

            /** the fit method types */
            public: enum FitMethodType
            {
                FitMethodTypeOverwriteBorder/** overwrite border */  = 1,
                FitMethodTypeAutoSizeText/** auto size text */ ,
                FitMethodTypeWrap/** wrap */ ,
                FitMethodTypeAbbreviate/** abbreviate */ ,
                FitMethodTypeRemoveSpaces/** remove spaces */ ,
                FitMethodTypeAutoSizeRow/** auto size row */ ,
                FitMethodTypeAutoSizeCol/** auto size col */ ,
                FitMethodTypeTruncate/** truncate */ 
            };

            private: TableCellStyleBuilderImpl * m_tablecellstylebuilder_impl;
            private: friend class  _TableCellStyleBuilderBuilder;
            protected: TableCellStyleBuilder();
            public: ~TableCellStyleBuilder();
            /**Returns  the cell format 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatType NXOpen::Annotations::TableCellStyleBuilder::CellFormatType@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::Annotations::TableCellStyleBuilder::CellFormatType instead.") NXOpen::Annotations::TableCellStyleBuilder::FormatType Format
            (
            );
            /**Sets  the cell format 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::Annotations::TableCellStyleBuilder::SetCellFormatType NXOpen::Annotations::TableCellStyleBuilder::SetCellFormatType@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::Annotations::TableCellStyleBuilder::SetCellFormatType instead.") void SetFormat
            (
                NXOpen::Annotations::TableCellStyleBuilder::FormatType format /** format */ 
            );
            /**Returns  the cell format 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypes CellFormatType
            (
            );
            /**Sets  the cell format 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetCellFormatType
            (
                NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypes format /** format */ 
            );
            /**Returns  the cell date format.  It is valid to use this when the 
                        @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatType NXOpen::Annotations::TableCellStyleBuilder::CellFormatType@endlink  
                       is either @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDate NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDate@endlink  or
                       @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDateTime NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDateTime@endlink .
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TableCellStyleBuilder::DateFormatTypes DateFormatType
            (
            );
            /**Sets  the cell date format.  It is valid to use this when the 
                        @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatType NXOpen::Annotations::TableCellStyleBuilder::CellFormatType@endlink  
                       is either @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDate NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDate@endlink  or
                       @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDateTime NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDateTime@endlink .
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDateFormatType
            (
                NXOpen::Annotations::TableCellStyleBuilder::DateFormatTypes dateFormat /** dateformat */ 
            );
            /**Returns  the cell time format.  It is valid to use this when the 
                    @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatType NXOpen::Annotations::TableCellStyleBuilder::CellFormatType@endlink  
                    is either @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesTime NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesTime@endlink  or
                    @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDateTime NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDateTime@endlink .
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TableCellStyleBuilder::TimeFormatTypes TimeFormatType
            (
            );
            /**Sets  the cell time format.  It is valid to use this when the 
                    @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatType NXOpen::Annotations::TableCellStyleBuilder::CellFormatType@endlink  
                    is either @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesTime NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesTime@endlink  or
                    @link NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDateTime NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypesDateTime@endlink .
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTimeFormatType
            (
                NXOpen::Annotations::TableCellStyleBuilder::TimeFormatTypes timeFormat /** timeformat */ 
            );
            /**Returns  the precision 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int Precision
            (
            );
            /**Sets  the precision 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetPrecision
            (
                int precision /** precision */ 
            );
            /**Returns  the text alignment 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TableCellStyleBuilder::TextAlignmentType TextAlignment
            (
            );
            /**Sets  the text alignment 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTextAlignment
            (
                NXOpen::Annotations::TableCellStyleBuilder::TextAlignmentType textAlignment /** textalignment */ 
            );
            /**Returns  the prefix 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Prefix
            (
            );
            /**Sets  the prefix 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetPrefix
            (
                const NXString & prefix /** prefix */ 
            );
            /**Sets  the prefix 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void SetPrefix
            (
                const char * prefix /** prefix */ 
            );
            /**Returns  the suffix 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Suffix
            (
            );
            /**Sets  the suffix 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSuffix
            (
                const NXString & suffix /** suffix */ 
            );
            /**Sets  the suffix 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void SetSuffix
            (
                const char * suffix /** suffix */ 
            );
            /**Returns  the slant angle in degrees 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double SlantAngle
            (
            );
            /**Sets  the slant angle in degrees 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSlantAngle
            (
                double slantAngle /** slantangle */ 
            );
            /**Returns  the zero display 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TableCellStyleBuilder::ZeroDisplayType ZeroDisplay
            (
            );
            /**Sets  the zero display 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetZeroDisplay
            (
                NXOpen::Annotations::TableCellStyleBuilder::ZeroDisplayType zeroDisplay /** zerodisplay */ 
            );
            /**Returns  the is a formula 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsAFormula
            (
            );
            /**Sets  the is a formula 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAFormula
            (
                bool isAFormula /** isaformula */ 
            );
            /**Returns  the increment value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double IncrementValue
            (
            );
            /**Sets  the increment value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetIncrementValue
            (
                double incrementValue /** incrementvalue */ 
            );
            /**Returns  the increment as percent flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncrementIsPercentage
            (
            );
            /**Sets  the increment as percent flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetIncrementIsPercentage
            (
                bool incrementValue /** incrementvalue */ 
            );
            /**Returns  the url 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Url
            (
            );
            /**Sets  the url 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetUrl
            (
                const NXString & url /** url */ 
            );
            /**Sets  the url 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void SetUrl
            (
                const char * url /** url */ 
            );
            /**Returns  the border location 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TableCellStyleBuilder::BorderLocationType BorderLocation
            (
            );
            /**Sets  the border location 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetBorderLocation
            (
                NXOpen::Annotations::TableCellStyleBuilder::BorderLocationType borderLocation /** borderlocation */ 
            );
            /**Returns  the border color
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int BorderColor
            (
            );
            /**Sets  the border color
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetBorderColor
            (
                int borderColor /** bordercolor */ 
            );
            /**Returns  the border font
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int BorderFont
            (
            );
            /**Sets  the border font
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetBorderFont
            (
                int borderFont /** borderfont */ 
            );
            /**Returns  the border width
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int BorderWidth
            (
            );
            /**Sets  the border width
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetBorderWidth
            (
                int borderWidth /** borderwidth */ 
            );
            /** Returns the fit methods 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::TableCellStyleBuilder::FitMethodType> GetFitMethods
            (
            );
            /** Set fit methods 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFitMethods
            (
                const std::vector<NXOpen::Annotations::TableCellStyleBuilder::FitMethodType> & fitMethods /** fitmethods */ 
            );
            /**Returns  the tab direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TableCellStyleBuilder::TabDirectionType TabDirection
            (
            );
            /**Sets  the tab direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTabDirection
            (
                NXOpen::Annotations::TableCellStyleBuilder::TabDirectionType tabDirection /** tabdirection */ 
            );
            /**Returns  the protect cell 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ProtectCell
            (
            );
            /**Sets  the protect cell 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetProtectCell
            (
                bool protectCell /** protectcell */ 
            );
            /**Returns  the show leading zeroes flag 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowLeadingZeroes
            (
            );
            /**Sets  the show leading zeroes flag 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetShowLeadingZeroes
            (
                bool showLeadingZeroes /** showleadingzeroes */ 
            );
            /**Returns  the show trailing zeroes flag
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowTrailingZeroes
            (
            );
            /**Sets  the show trailing zeroes flag
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetShowTrailingZeroes
            (
                bool showTrailingZeroes /** showtrailingzeroes */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
