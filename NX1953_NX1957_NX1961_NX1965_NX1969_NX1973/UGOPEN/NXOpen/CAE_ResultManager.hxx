#ifndef NXOpen_CAE_RESULTMANAGER_HXX_INCLUDED
#define NXOpen_CAE_RESULTMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResultManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_GeometryQueryHelper.hxx>
#include <NXOpen/CAE_PostCoordinateSystem.hxx>
#include <NXOpen/CAE_PostSelectionEntity.hxx>
#include <NXOpen/CAE_QueryCurvePost.hxx>
#include <NXOpen/CAE_Result.hxx>
#include <NXOpen/CAE_ResultProbe.hxx>
#include <NXOpen/CAE_ResultToSCD5Converter.hxx>
#include <NXOpen/CAE_ResultsManipulationBuilder.hxx>
#include <NXOpen/Fields_FieldTable.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ResultManager;
    }
    class Session;
    class BasePart;
    namespace CAE
    {
        class AxiSymmetricParameters;
    }
    namespace CAE
    {
        class CacheResultRecipeBuilder;
    }
    namespace CAE
    {
        class ClippingParameters;
    }
    namespace CAE
    {
        class CreateJtBuilder;
    }
    namespace CAE
    {
        class CrossSectionParameters;
    }
    namespace CAE
    {
        class CyclicSymmetricParameters;
    }
    namespace CAE
    {
        class DeformationParameters;
    }
    namespace CAE
    {
        class DurabilityEvent;
    }
    namespace CAE
    {
        class DurabilityMetaSolution;
    }
    namespace CAE
    {
        class FreeBodyResultsBuilder;
    }
    namespace CAE
    {
        class GeometryQueryHelper;
    }
    namespace CAE
    {
        class GraphFromResultProbeBuilder;
    }
    namespace CAE
    {
        class HotspotRecipe;
    }
    namespace CAE
    {
        class HotspotRecipeBuilder;
    }
    namespace CAE
    {
        class ImportResultParameters;
    }
    namespace CAE
    {
        class ImportedResult;
    }
    namespace CAE
    {
        class LaminateDynamicEvent;
    }
    namespace CAE
    {
        class LaminateGraphicalReport;
    }
    namespace CAE
    {
        class NodalForceReport;
    }
    namespace CAE
    {
        namespace Optimization
        {
            class DAOSolution;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSOptimizationSolution;
        }
    }
    namespace CAE
    {
        class Post3DGraphBuilder;
    }
    namespace CAE
    {
        class PostCoordinateSystem;
    }
    namespace CAE
    {
        class PostGraphAcrossIterationsBuilder;
    }
    namespace CAE
    {
        class PostGraphAlongPathBuilder;
    }
    namespace CAE
    {
        class PostGraphOrbitBuilder;
    }
    namespace CAE
    {
        class PostJtExportBuilder;
    }
    namespace CAE
    {
        class PostSelectionEntity;
    }
    namespace CAE
    {
        class QueryCurvePost;
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class RSEvent;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class Solution;
        }
    }
    namespace CAE
    {
        class Result;
    }
    namespace CAE
    {
        class ResultAccess;
    }
    namespace CAE
    {
        class ResultParameters;
    }
    namespace CAE
    {
        class ResultParametersWithNodalForceReport;
    }
    namespace CAE
    {
        class ResultParametersWithProbe;
    }
    namespace CAE
    {
        class ResultProbe;
    }
    namespace CAE
    {
        class ResultToSCD5Converter;
    }
    namespace CAE
    {
        class ResultUnitSystem;
    }
    namespace CAE
    {
        class ResultVariable;
    }
    namespace CAE
    {
        class ResultsCombinationBuilder;
    }
    namespace CAE
    {
        class ResultsEnvelopeBuilder;
    }
    namespace CAE
    {
        class ResultsExtractionBuilder;
    }
    namespace CAE
    {
        class ResultsManipulationEnvelopeBuilder;
    }
    namespace CAE
    {
        class ResultsModelExportBuilder;
    }
    namespace CAE
    {
        class ResultsReductionBuilder;
    }
    namespace CAE
    {
        class SignalProcessingDBSettings;
    }
    namespace CAE
    {
        class SimResultReference;
    }
    namespace CAE
    {
        class SimSimulation;
    }
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class SolutionResult;
    }
    namespace CAE
    {
        class TransientResultsReductionBuilder;
    }
    namespace Fields
    {
        class Field;
    }
    namespace Fields
    {
        class FieldLinksTable;
    }
    namespace Fields
    {
        class FieldManager;
    }
    namespace Fields
    {
        class FieldReference;
    }
    namespace Fields
    {
        class FieldTable;
    }
    namespace Fields
    {
        class FieldVariable;
    }
    class TaggedObject;
    class Unit;
    namespace CAE
    {
        class ResultManagerImpl;
        /** Manages results  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX6.0.2.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ResultManager
        {
            private: ResultManagerImpl * m_resultmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ResultManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ResultManager();
            /** Opens a imported result object given a solver results file and the unit systems that these results are defined in.
                        If there is no root part found then this api will open a part and then import the result in it.
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ImportedResult * OpenImportedResult
            (
                const NXString & filename /** filename */ ,
                const NXString & resultname /** resultname */ ,
                const NXOpen::CAE::Result::ResultBasicUnit & unitsystem /** unitsystem */ 
            );
            /** Opens a imported result object given a solver results file and the unit systems that these results are defined in.
                        If there is no root part found then this api will open a part and then import the result in it.
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::CAE::ImportedResult * OpenImportedResult
            (
                const char * filename /** filename */ ,
                const char * resultname /** resultname */ ,
                const NXOpen::CAE::Result::ResultBasicUnit & unitsystem /** unitsystem */ 
            );
            /** Creates a imported result object given a solver results file and the unit systems that these results are defined in.
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources
                     @return  
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link NXOpen::CAE::ResultManager::CreateResultFromImportParameters NXOpen::CAE::ResultManager::CreateResultFromImportParameters@endlink  <br>  

             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use NXOpen::CAE::ResultManager::CreateResultFromImportParameters") NXOpen::CAE::ImportedResult * CreateImportedResult
            (
                const NXString & filename /** filename */ ,
                const NXOpen::CAE::Result::ResultBasicUnit & unitsystem /** unitsystem */ 
            );
            /** Creates a imported result object given a solver results file and the unit systems that these results are defined in.
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources
                     @return  
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link NXOpen::CAE::ResultManager::CreateResultFromImportParameters NXOpen::CAE::ResultManager::CreateResultFromImportParameters@endlink  <br>  

             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::CAE::ImportedResult * CreateImportedResult
            (
                const char * filename /** filename */ ,
                const NXOpen::CAE::Result::ResultBasicUnit & unitsystem /** unitsystem */ 
            );
            /** Creates a imported result object given a solver results file and the unit systems that these results are defined in.
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources
                     @return  
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link NXOpen::CAE::ResultManager::CreateResultFromImportParameters NXOpen::CAE::ResultManager::CreateResultFromImportParameters@endlink  <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use NXOpen::CAE::ResultManager::CreateResultFromImportParameters") NXOpen::CAE::ImportedResult * CreateImportedResult
            (
                const NXString & filename /** filename */ ,
                const NXString & resultname /** resultname */ ,
                const NXOpen::CAE::Result::ResultBasicUnit & unitsystem /** unitsystem */ 
            );
            /** Creates a imported result object given a solver results file and the unit systems that these results are defined in.
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources
                     @return  
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link NXOpen::CAE::ResultManager::CreateResultFromImportParameters NXOpen::CAE::ResultManager::CreateResultFromImportParameters@endlink  <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::CAE::ImportedResult * CreateImportedResult
            (
                const char * filename /** filename */ ,
                const char * resultname /** resultname */ ,
                const NXOpen::CAE::Result::ResultBasicUnit & unitsystem /** unitsystem */ 
            );
            /** Creates a imported result object given a solver results file. The unit systems is inferred from the result file and Part.
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources
                     @return  
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link NXOpen::CAE::ResultManager::CreateResultFromImportParameters NXOpen::CAE::ResultManager::CreateResultFromImportParameters@endlink  <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use NXOpen::CAE::ResultManager::CreateResultFromImportParameters") NXOpen::CAE::ImportedResult * CreateImportedResult
            (
                const NXString & filename /** filename */ ,
                const NXString & resultname /** resultname */ 
            );
            /** Creates a imported result object given a solver results file. The unit systems is inferred from the result file and Part.
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources
                     @return  
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link NXOpen::CAE::ResultManager::CreateResultFromImportParameters NXOpen::CAE::ResultManager::CreateResultFromImportParameters@endlink  <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::CAE::ImportedResult * CreateImportedResult
            (
                const char * filename /** filename */ ,
                const char * resultname /** resultname */ 
            );
            /** Creates a imported result object given a solver results file and the unit systems that these results are defined in.
                        use @link NXOpen::CAE::ResultManager::CreateImportResultParameters NXOpen::CAE::ResultManager::CreateImportResultParameters@endlink  to create a parameter object
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ImportedResult * CreateResultFromImportParameters
            (
                NXOpen::CAE::ImportResultParameters * parameters /** parameters */ 
            );
            /** Creates a solution result object given a @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources.
                        More than one @link NXOpen::CAE::SolutionResult NXOpen::CAE::SolutionResult@endlink  object can be created for same solution, it is 
                        user's responsibility to delete each one of them. 
                     @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::SolutionResult * CreateSolutionResult
            (
                NXOpen::CAE::SimSolution * solution /** solution */ 
            );
            /** Creates a reference result object given a @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink  
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources.
                        More than one @link NXOpen::CAE::SolutionResult NXOpen::CAE::SolutionResult@endlink  object can be created for same solution, it is 
                        user's responsibility to delete each one of them.
                     @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::SolutionResult * CreateReferenceResult
            (
                NXOpen::CAE::SimResultReference * solution /** solution */ 
            );
            /** Creates a result object given a Super Element ID within 
                        an existing @link NXOpen::CAE::Result NXOpen::CAE::Result@endlink .
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Result * CreateSeResult
            (
                NXOpen::CAE::Result * parentResult /** parent result */ ,
                int seid /** seid */ 
            );
            /** Creates a solution result object given a @link NXOpen::CAE::ResponseSimulation::Solution  NXOpen::CAE::ResponseSimulation::Solution @endlink  
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources.
                        More than one @link NXOpen::CAE::SolutionResult NXOpen::CAE::SolutionResult@endlink  object can be created for same solution, it is 
                        user's responsibility to delete each one of them.
                     @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::SolutionResult * CreateResponseSolutionResult
            (
                NXOpen::CAE::ResponseSimulation::Solution * responseSolution /** responsesolution */ 
            );
            /** Creates a solution result object given a @link NXOpen::CAE::ResponseSimulation::RSEvent  NXOpen::CAE::ResponseSimulation::RSEvent @endlink  
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources.
                        More than one @link NXOpen::CAE::SolutionResult NXOpen::CAE::SolutionResult@endlink  object can be created for same solution, it is 
                        user's responsibility to delete each one of them.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::SolutionResult * CreateResponseEventResult
            (
                NXOpen::CAE::ResponseSimulation::RSEvent * responseSolution /** responsesolution */ 
            );
            /** Creates a solution result object given a @link NXOpen::CAE::DurabilityEvent NXOpen::CAE::DurabilityEvent@endlink  
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources.
                        More than one @link NXOpen::CAE::SolutionResult NXOpen::CAE::SolutionResult@endlink  object can be created for same solution, it is 
                        user's responsibility to delete each one of them.
                     @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::SolutionResult * CreateDurabilityEventResult
            (
                NXOpen::CAE::DurabilityEvent * durablityEvent /** durablityevent */ 
            );
            /** Creates a solution result object given a @link NXOpen::CAE::Optimization::TBSOptimizationSolution NXOpen::CAE::Optimization::TBSOptimizationSolution@endlink  
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources.
                        More than one @link NXOpen::CAE::SolutionResult NXOpen::CAE::SolutionResult@endlink  object can be created for same solution, it is 
                        user's responsibility to delete each one of them.
                     @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::SolutionResult * CreateTbsOptimizationSolutionResult
            (
                NXOpen::CAE::Optimization::TBSOptimizationSolution * tbsOptimizationSolution /** tbsoptimizationsolution */ 
            );
            /** Creates a solution result object given a @link NXOpen::CAE::Optimization::DAOSolution NXOpen::CAE::Optimization::DAOSolution@endlink  
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources.
                        More than one @link NXOpen::CAE::SolutionResult NXOpen::CAE::SolutionResult@endlink  object can be created for same solution, it is 
                        user's responsibility to delete each one of them.
                     @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::SolutionResult * CreateDaoOptimizationSolutionResult
            (
                NXOpen::CAE::Optimization::DAOSolution * daoOptimizationSolution /** daooptimizationsolution */ 
            );
            /** Creates a solution result object given a @link NXOpen::CAE::LaminateDynamicEvent NXOpen::CAE::LaminateDynamicEvent@endlink  
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources.
                        More than one @link NXOpen::CAE::SolutionResult NXOpen::CAE::SolutionResult@endlink  object can be created for same solution, it is 
                        user's responsibility to delete each one of them.
                     @return  Created solution result given the input dynamic event 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::SolutionResult * CreateLaminateDynamicEventResult
            (
                NXOpen::CAE::LaminateDynamicEvent * dynEvent /** The dynamic event */
            );
            /** Creates a solution result object given a @link NXOpen::CAE::LaminateGraphicalReport NXOpen::CAE::LaminateGraphicalReport@endlink  
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources.
                        More than one @link NXOpen::CAE::SolutionResult NXOpen::CAE::SolutionResult@endlink  object can be created for same solution, it is 
                        user's responsibility to delete each one of them.
                     @return  Created solution result given the input laminate graphical report specifications 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::SolutionResult * CreateLaminateGraphicalReportResult
            (
                NXOpen::CAE::LaminateGraphicalReport * lamGraphReport /** The laminate graphical report specifications */
            );
            /** Creates a result parameter object.
                        It is user's responsibility to destroy the result parameters object once done 
                        using @link NXOpen::CAE::ResultManager::DeleteResultParameters NXOpen::CAE::ResultManager::DeleteResultParameters@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultParameters * CreateResultParameters
            (
            );
            /** Creates a cross section parameter object.
                        It is user's responsibility to destroy the cross section parameters object once done 
                        using @link NXOpen::CAE::ResultManager::DeleteCrossSectionParameters NXOpen::CAE::ResultManager::DeleteCrossSectionParameters@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::CrossSectionParameters * CreateCrossSectionParameters
            (
            );
            /** Creates a result parameter object for given Result Probe.
                        It is user's responsibility to destroy the result parameters object once done 
                        using @link NXOpen::CAE::ResultManager::DeleteResultParametersWithProbe NXOpen::CAE::ResultManager::DeleteResultParametersWithProbe@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultParametersWithProbe * CreateResultParametersWithProbe
            (
                NXOpen::CAE::ResultProbe * resultProbe /** result probe */ 
            );
            /** Creates a field from the lists of independent, dependent variables along with a given Result Probe.
                     @return  field 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Fields::Field * CreateTableFieldFromProbe
            (
                const NXString & fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the table field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables to be associated with the table field */,
                NXOpen::CAE::ResultProbe * resultProbe /** result probe */ ,
                bool createTableOfFields /** When output field is both time/frequency and space varying, it is possible to create a table of fields*/
            );
            /** Creates a field from the lists of independent, dependent variables along with a given Result Probe.
                     @return  field 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::Fields::Field * CreateTableFieldFromProbe
            (
                const char * fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the table field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables to be associated with the table field */,
                NXOpen::CAE::ResultProbe * resultProbe /** result probe */ ,
                bool createTableOfFields /** When output field is both time/frequency and space varying, it is possible to create a table of fields*/
            );
            /** Creates a result access object
                        It is user's responsibility to destroy the result access object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResultAccess NXOpen::CAE::ResultManager::DeleteResultAccess@endlink , in order to free up system resources        
                     @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultAccess * CreateResultAccess
            (
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                NXOpen::CAE::ResultParameters * parameters /** defines the specific results state you wish to access */
            );
            /** Creates a result access object based on an existing Post View
                        It is user's responsibility to destroy the result access object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResultAccess NXOpen::CAE::ResultManager::DeleteResultAccess@endlink , in order to free up system resources        
                     @return  
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultAccess * CreateResultAccess
            (
                int postViewID /** an existing PostView Id */
            );
            /** Creates a cyclic symmetric object based on an existing Post View
                        It is user's responsibility to destroy the result access object once done
                        using @link NXOpen::CAE::ResultManager::DeleteCyclicSymmetricParameters NXOpen::CAE::ResultManager::DeleteCyclicSymmetricParameters@endlink , in order to free up system resources        
                     @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::CyclicSymmetricParameters * CreateCyclicSymmetricParameters
            (
            );
            /** Creates a axisymmetric object based on an existing Post View
                        It is user's responsibility to destroy the result access object once done
                        using @link NXOpen::CAE::ResultManager::DeleteAxiSymmetricParameters NXOpen::CAE::ResultManager::DeleteAxiSymmetricParameters@endlink , in order to free up system resources        
                     @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::AxiSymmetricParameters * CreateAxiSymmetricParameters
            (
            );
            /** Delete a @link NXOpen::CAE::Result  NXOpen::CAE::Result @endlink  object. If a @link NXOpen::CAE::ResultAccess  NXOpen::CAE::ResultAccess @endlink  object referencing it, that will also be deleted.
                    This will only delete the the result passed to it and not other instances of Result Object.
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteResult
            (
                NXOpen::CAE::Result * result /** result */ 
            );
            /** Delete a @link NXOpen::CAE::ResultAccess NXOpen::CAE::ResultAccess@endlink  object. 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteResultAccess
            (
                NXOpen::CAE::ResultAccess * result /** result */ 
            );
            /** Delete a @link NXOpen::CAE::ResultParameters NXOpen::CAE::ResultParameters@endlink  object. 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteResultParameters
            (
                NXOpen::CAE::ResultParameters * result /** result */ 
            );
            /** Delete a @link NXOpen::CAE::CrossSectionParameters NXOpen::CAE::CrossSectionParameters@endlink  object. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteCrossSectionParameters
            (
                NXOpen::CAE::CrossSectionParameters * crossSection /** cross section */ 
            );
            /** Delete a @link NXOpen::CAE::ResultParametersWithProbe NXOpen::CAE::ResultParametersWithProbe@endlink  object. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteResultParametersWithProbe
            (
                NXOpen::CAE::ResultParametersWithProbe * result /** result */ 
            );
            /** Delete a @link NXOpen::CAE::CyclicSymmetricParameters NXOpen::CAE::CyclicSymmetricParameters@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteCyclicSymmetricParameters
            (
                NXOpen::CAE::CyclicSymmetricParameters * cyclicSymmetricParameter /** cyclic symmetric parameter */ 
            );
            /** Delete a @link NXOpen::CAE::AxiSymmetricParameters NXOpen::CAE::AxiSymmetricParameters@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteAxiSymmetricParameters
            (
                NXOpen::CAE::AxiSymmetricParameters * axiSymmetricParameter /** axi symmetric parameter */ 
            );
            /** Convert older version of ODB file to currently supported version 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: void ConvertOdbFile
            (
                const NXString & inputFileName /** input file name */ ,
                const NXString & outputFileName /** output file name */ 
            );
            /** Convert older version of ODB file to currently supported version 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            void ConvertOdbFile
            (
                const char * inputFileName /** input file name */ ,
                const char * outputFileName /** output file name */ 
            );
            /** Creates a deformation parameter object.
                        It is user's responsibility to destroy the deformation parameters object once done 
                        using @link NXOpen::CAE::ResultManager::DeleteDeformationParameters NXOpen::CAE::ResultManager::DeleteDeformationParameters@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::DeformationParameters * CreateDeformationParameters
            (
            );
            /** Delete a @link NXOpen::CAE::DeformationParameters NXOpen::CAE::DeformationParameters@endlink  object. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteDeformationParameters
            (
                NXOpen::CAE::DeformationParameters * result /** result */ 
            );
            /** Creates a free body results builder.
                        It is user's responsibility to destroy the builder object once done 
                        using @link NXOpen::CAE::ResultManager::DeleteFreeBodyResultsBuilder NXOpen::CAE::ResultManager::DeleteFreeBodyResultsBuilder@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::FreeBodyResultsBuilder * CreateFreeBodyResultsBuilder
            (
            );
            /** Delete a @link NXOpen::CAE::FreeBodyResultsBuilder NXOpen::CAE::FreeBodyResultsBuilder@endlink  object. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteFreeBodyResultsBuilder
            (
                NXOpen::CAE::FreeBodyResultsBuilder * builder /** builder */ 
            );
            /** Creates a results combination builder.
                        It is user's responsibility to destroy the builder object once done 
                     @return  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultsCombinationBuilder * CreateResultsCombinationBuilder
            (
            );
            /** Creates a results envelope builder.
                        It is user's responsibility to destroy the builder object once done 
                     @return  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultsEnvelopeBuilder * CreateResultsEnvelopeBuilder
            (
            );
            /** Creates a results reduction builder.
                        It is user's responsibility to destroy the builder object once done 
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultsReductionBuilder * CreateResultsReductionBuilder
            (
            );
            /** Creates a transient results reduction builder.
                        It is user's responsibility to destroy the builder object once done 
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::TransientResultsReductionBuilder * CreateTransientResultsReductionBuilder
            (
            );

            /// \cond NX_NO_DOC 
            /** Creates a results extraction builder.
                        It is user's responsibility to detroy this builder object once done. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultsExtractionBuilder * CreateResultsExtractionBuilder
            (
            );

            /// \endcond 
            /** Returns a @link NXOpen::CAE::Result NXOpen::CAE::Result@endlink    @return  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::TaggedObject * FindObject
            (
                const NXString & journalIdentifier /** Journal identifier of the object */
            );
            /** Returns a @link NXOpen::CAE::Result NXOpen::CAE::Result@endlink    @return  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::TaggedObject * FindObject
            (
                const char * journalIdentifier /** Journal identifier of the object */
            );
            /** Creates a clipping parameter object.
                        It is user's responsibility to destroy the clipping parameters object once done 
                        using @link NXOpen::CAE::ResultManager::DeleteClippingParameters NXOpen::CAE::ResultManager::DeleteClippingParameters@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ClippingParameters * CreateClippingParameters
            (
            );
            /** Delete a @link NXOpen::CAE::ClippingParameters NXOpen::CAE::ClippingParameters@endlink  object. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteClippingParameters
            (
                NXOpen::CAE::ClippingParameters * result /** result */ 
            );
            /** Creates a post csys object from coordinate system source.
                        It is user's responsibility to destroy the csys object once done 
                     @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostCoordinateSystem * CreatePostCoordinatesystem
            (
                NXOpen::CAE::Result * result /** result */ ,
                NXOpen::CAE::Result::CoordinateSystemSource source /** source */ ,
                int selectedcsysid /** selectedcsysid */ 
            );
            /** Creates a post csys object from given orientation and origin.
                        It is user's responsibility to destroy the csys object once done 
                     @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostCoordinateSystem * CreatePostCoordinatesystem
            (
                const NXOpen::Matrix3x3 & orientation /** orientation */ ,
                const NXOpen::Point3d & origin /** origin */ ,
                NXOpen::CAE::PostCoordinateSystem::CoordinateSystemType csysType /** csystype */ 
            );
            /** Creates a global post coordinatesystem object.
                        It is user's responsibility to destroy the csys object once done 
                     @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostCoordinateSystem * CreatePostCoordinatesystemFromGlobal
            (
                NXOpen::CAE::PostCoordinateSystem::CoordinateSystemType csysType /** csystype */ 
            );
            /** Delete a @link NXOpen::CAE::PostCoordinateSystem NXOpen::CAE::PostCoordinateSystem@endlink  object. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeletePostCoordinatesystem
            (
                NXOpen::CAE::PostCoordinateSystem * result /** result */ 
            );
            /** Creates a builder for exporting a component or result type JT
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::CreateJtBuilder * CreateJtBuilder
            (
            );
            /** Creates a builder for exporting a component or result type JT
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostJtExportBuilder * CreatePostJtBuilder
            (
            );
            /** Delete a @link NXOpen::CAE::PostJtExportBuilder NXOpen::CAE::PostJtExportBuilder@endlink  object. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeletePostJtBuilder
            (
                NXOpen::CAE::PostJtExportBuilder * builder /** builder */ 
            );
            /** Creates a model export builder.
                        It is user's responsibility to destroy the builder object once done 
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultsModelExportBuilder * CreateResultsModelExportBuilder
            (
            );
            /** Returns a builder used for creating graphs of Postview result values across iterations.
                        It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphAcrossIterationsBuilder * CreateGraphAcrossIterationsBuilder
            (
                int pvid /** pvid */ 
            );
            /** Returns a builder used for creating graphs of two postview result values across iterations.
                        It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphAcrossIterationsBuilder * CreateGraphAcrossIterationsBuilder
            (
                int firstpvid /** firstpvid */ ,
                int secondpvid /** secondpvid */ 
            );
            /** Returns a builder used for creating graphs across iterations of result values of result parameter.
                        It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphAcrossIterationsBuilder * CreateGraphAcrossIterationsBuilder
            (
                NXOpen::CAE::Result * result /** set result */,
                NXOpen::CAE::ResultParameters * parameter /** parameter */ 
            );
            /** Returns a builder used for creating graphs across iterations of result values of result parameter.
                        It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::ResultManager::CreateGraphFromResultProbesBuilder NXOpen::CAE::ResultManager::CreateGraphFromResultProbesBuilder@endlink  instead. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::ResultManager::CreateGraphFromResultProbesBuilder instead.") NXOpen::CAE::PostGraphAcrossIterationsBuilder * CreateGraphAcrossIterationsBuilder
            (
                NXOpen::CAE::ResultProbe * parameter /** parameter */ 
            );
            /** Returns a builder used for creating graph from result probes.
                        It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::GraphFromResultProbeBuilder * CreateGraphFromResultProbesBuilder
            (
            );
            /** Returns a builder used for creating graphs across iterations of result values two result parameters.
                        It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphAcrossIterationsBuilder * CreateGraphAcrossIterationsBuilder
            (
                NXOpen::CAE::Result * result /** set result */,
                NXOpen::CAE::ResultParameters * parameter1 /** parameter1 */ ,
                NXOpen::CAE::ResultParameters * parameter2 /** parameter2 */ 
            );
            /** Returns a builder used for creating graphs across iterations of result values of expression.
                        It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphAcrossIterationsBuilder * CreateGraphAcrossIterationsBuilder
            (
                NXOpen::CAE::Result * result /** set result */,
                const std::vector<NXOpen::CAE::ResultParameters *> & parameters /** set result parameters */,
                std::vector<NXString> & names /** set result names */,
                const NXString & formula /** set formula */
            );
            /** Returns a builder used for creating graphs across iterations of result values of expression.
                        It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::CAE::PostGraphAcrossIterationsBuilder * CreateGraphAcrossIterationsBuilder
            (
                NXOpen::CAE::Result * result /** set result */,
                const std::vector<NXOpen::CAE::ResultParameters *> & parameters /** set result parameters */,
                std::vector<NXString> & names /** set result names */,
                const char * formula /** set formula */
            );
            /** Returns a builder used for creating the graph of result values of Postview result defined by series of 
                        entities or path object. It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphAlongPathBuilder * CreateGraphAlongPathBuilder
            (
                int pvid /** pvid */ 
            );
            /** Returns a builder used for creating the graph of result values of two postviews 
                        defined by series of entities or path object. It is user's responsibility to destroy the 
                        builder object once done using @link Builder::Destroy Builder::Destroy@endlink , 
                        in order to free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphAlongPathBuilder * CreateGraphAlongPathBuilder
            (
                int firstpvid /** firstpvid */ ,
                int secondpvid /** secondpvid */ 
            );
            /** Returns a builder used for creating the graph of result values series of entities 
                        or path object defined by result parameter. It is user's responsibility to destroy 
                        the builder object once done using @link Builder::Destroy Builder::Destroy@endlink , 
                        in order to free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphAlongPathBuilder * CreateGraphAlongPathBuilder
            (
                NXOpen::CAE::Result * result /** set result */,
                NXOpen::CAE::ResultParameters * parameter /** parameter */ 
            );
            /** Returns a builder used for creating the graph of result values series of entities 
                        or path object defined by result parameter. It is user's responsibility to destroy 
                        the builder object once done using @link Builder::Destroy Builder::Destroy@endlink , 
                        in order to free up system resources
                     @return  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::ResultManager::CreateGraphFromResultProbesBuilder NXOpen::CAE::ResultManager::CreateGraphFromResultProbesBuilder@endlink  instead. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::ResultManager::CreateGraphFromResultProbesBuilder instead.") NXOpen::CAE::PostGraphAlongPathBuilder * CreateGraphAlongPathBuilder
            (
                NXOpen::CAE::ResultProbe * parameter /** parameter */ 
            );
            /** Returns a builder used for creating the graph of result values of series of entities 
                        or path object defined by two result parameter. It is user's responsibility to destroy 
                        the builder object once done using @link Builder::Destroy Builder::Destroy@endlink , in order to 
                        free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphAlongPathBuilder * CreateGraphAlongPathBuilder
            (
                NXOpen::CAE::Result * result /** set result */,
                NXOpen::CAE::ResultParameters * parameter1 /** parameter1 */ ,
                NXOpen::CAE::ResultParameters * parameter2 /** parameter2 */ 
            );
            /** Returns a builder used for creating the orbit graph from postview.
                        It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphOrbitBuilder * CreateGraphOrbitBuilder
            (
                int pvid /** pvid */ 
            );
            /** Returns a builder used for creating the orbit graph from result defined by result parameter.
                        It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphOrbitBuilder * CreateGraphOrbitBuilder
            (
                NXOpen::CAE::Result * result /** set result */,
                NXOpen::CAE::ResultParameters * parameter /** parameter */ 
            );
            /** Creates a result access reference field object.
                        The created field is automatically made persistent and stored in the collection of fields for the part.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::Fields::FieldReference * CreateResultAccessReferenceField
            (
                NXOpen::Fields::FieldManager * fieldManager /** field manager in part */,
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                NXOpen::CAE::ResultParameters * parameters /** defines the specific results state you wish to access */,
                const NXString & depDomainName /** alphanumeric string; it must match with existing domain names */,
                const NXString & fieldName /** field name */
            );
            /** Creates a result access reference field object.
                        The created field is automatically made persistent and stored in the collection of fields for the part.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::Fields::FieldReference * CreateResultAccessReferenceField
            (
                NXOpen::Fields::FieldManager * fieldManager /** field manager in part */,
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                NXOpen::CAE::ResultParameters * parameters /** defines the specific results state you wish to access */,
                const char * depDomainName /** alphanumeric string; it must match with existing domain names */,
                const char * fieldName /** field name */
            );
            /** Creates a result access reference field object with the specified independent domain.
                        The created field is automatically made persistent and stored in the collection of fields for the part.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::Fields::FieldReference * CreateResultAccessReferenceField
            (
                NXOpen::Fields::FieldManager * fieldManager /** field manager in part */,
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                NXOpen::CAE::ResultParameters * parameters /** defines the specific results state you wish to access */,
                const NXString & indepDomainName /** alphanumeric string; it must match with existing domain names */,
                const NXString & depDomainName /** alphanumeric string; it must match with existing domain names */,
                const NXString & fieldName /** field name */
            );
            /** Creates a result access reference field object with the specified independent domain.
                        The created field is automatically made persistent and stored in the collection of fields for the part.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::Fields::FieldReference * CreateResultAccessReferenceField
            (
                NXOpen::Fields::FieldManager * fieldManager /** field manager in part */,
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                NXOpen::CAE::ResultParameters * parameters /** defines the specific results state you wish to access */,
                const char * indepDomainName /** alphanumeric string; it must match with existing domain names */,
                const char * depDomainName /** alphanumeric string; it must match with existing domain names */,
                const char * fieldName /** field name */
            );
            /** Creates a result access reference field object that is evaluated at node, element, or element-node id's.
                        The created field is automatically made persistent and stored in the collection of fields for the part.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::Fields::FieldReference * CreateIdResultAccessReferenceField
            (
                NXOpen::Fields::FieldManager * fieldManager /** field manager in part */,
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                NXOpen::CAE::ResultParameters * parameters /** defines the specific results state you wish to access */,
                const NXString & depDomainName /** alphanumeric string; it must match with existing domain names */,
                const NXString & fieldName /** field name */
            );
            /** Creates a result access reference field object that is evaluated at node, element, or element-node id's.
                        The created field is automatically made persistent and stored in the collection of fields for the part.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::Fields::FieldReference * CreateIdResultAccessReferenceField
            (
                NXOpen::Fields::FieldManager * fieldManager /** field manager in part */,
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                NXOpen::CAE::ResultParameters * parameters /** defines the specific results state you wish to access */,
                const char * depDomainName /** alphanumeric string; it must match with existing domain names */,
                const char * fieldName /** field name */
            );
            /** Creates a result access reference field object that supports 4D (hetergeneous) domains such as time-cartesian.
                        The created field is automatically made persistent and stored in the collection of fields for the part.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::Fields::FieldReference * Create4dResultAccessReferenceField
            (
                NXOpen::Fields::FieldManager * fieldManager /** field manager in part */,
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                NXOpen::CAE::ResultParameters * parameters /** defines the specific results state you wish to access */,
                const NXString & indepDomainName /** alphanumeric string; it must match with existing domain names */,
                const NXString & depDomainName /** alphanumeric string; it must match with existing domain names */,
                const NXString & fieldName /** field name */
            );
            /** Creates a result access reference field object that supports 4D (hetergeneous) domains such as time-cartesian.
                        The created field is automatically made persistent and stored in the collection of fields for the part.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::Fields::FieldReference * Create4dResultAccessReferenceField
            (
                NXOpen::Fields::FieldManager * fieldManager /** field manager in part */,
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                NXOpen::CAE::ResultParameters * parameters /** defines the specific results state you wish to access */,
                const char * indepDomainName /** alphanumeric string; it must match with existing domain names */,
                const char * depDomainName /** alphanumeric string; it must match with existing domain names */,
                const char * fieldName /** field name */
            );
            /** Creates Result Variable object  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultVariable * CreateResultvariable
            (
                NXOpen::CAE::SimSimulation * sim /** Simulation */,
                NXOpen::CAE::Result::Quantity quan /** quan */ ,
                NXOpen::CAE::Result::Location loc /** loc */ ,
                NXOpen::CAE::Result::Component comp /** comp */ ,
                const NXString & restypename /** Result Type UserName, If not sure pass empty string*/,
                const NXString & name /** Result Variable name*/
            );
            /** Creates Result Variable object  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::CAE::ResultVariable * CreateResultvariable
            (
                NXOpen::CAE::SimSimulation * sim /** Simulation */,
                NXOpen::CAE::Result::Quantity quan /** quan */ ,
                NXOpen::CAE::Result::Location loc /** loc */ ,
                NXOpen::CAE::Result::Component comp /** comp */ ,
                const char * restypename /** Result Type UserName, If not sure pass empty string*/,
                const char * name /** Result Variable name*/
            );
            /** Returns a builder used for creating 3d graphs across iterations.
                        It is user's responsibility to destroy the builder object once done 
                        using @link Builder::Destroy Builder::Destroy@endlink , in order to free up system resources
                     @return  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::ResultManager::CreateGraphFromResultProbesBuilder NXOpen::CAE::ResultManager::CreateGraphFromResultProbesBuilder@endlink  instead. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::ResultManager::CreateGraphFromResultProbesBuilder instead.") NXOpen::CAE::Post3DGraphBuilder * Create3dGraphBuilder
            (
                NXOpen::CAE::ResultProbe * parameter /** parameter */ 
            );
            /** Exports Results from ResultProbe in UNV file format.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ExportUnvFromProbe
            (
                const NXString & fileName /** file name with full path */,
                const std::vector<NXOpen::CAE::ResultProbe *> & probeArray /** ResultProbes */
            );
            /** Exports Results from ResultProbe in UNV file format.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void ExportUnvFromProbe
            (
                const char * fileName /** file name with full path */,
                const std::vector<NXOpen::CAE::ResultProbe *> & probeArray /** ResultProbes */
            );
            /** Creates query curve from an ordered set 
                     @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::QueryCurvePost * CreateQueryCurvePost
            (
                NXOpen::CAE::Result * result /** Result */,
                const NXString & name /** Name of the post query curve */,
                const std::vector<NXOpen::CAE::QueryCurvePost::Entity> & entities /** Query curve entities array */,
                int numInsertPointsPerSegment /** Insert points between two consecuting entities*/
            );
            /** Creates query curve from an ordered set 
                     @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::CAE::QueryCurvePost * CreateQueryCurvePost
            (
                NXOpen::CAE::Result * result /** Result */,
                const char * name /** Name of the post query curve */,
                const std::vector<NXOpen::CAE::QueryCurvePost::Entity> & entities /** Query curve entities array */,
                int numInsertPointsPerSegment /** Insert points between two consecuting entities*/
            );
            /** Delete a QueryCurvePost 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void DeleteQueryCurve
            (
                NXOpen::CAE::QueryCurvePost * queryCurvePost /** Query curve post to be deleted */
            );
            /** Creates a result access reference field object that is evaluated at node, element, or element-node id's.
                        The created field is automatically made persistent and stored in the collection of fields for the part. 
                        A sub modle is used to filter the elem/nodes that need to be evaluated 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void ConstructSubmodelForResultAccessReferenceField
            (
                NXOpen::Fields::FieldReference * refField /** field that in part */,
                NXOpen::Fields::FieldManager * fieldManager /** field manager in part */,
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                const std::vector<int> & elem /** submodel element ID */,
                bool includeOrExculde /** includeorexculde */ 
            );
            /** Creates a table for the model. A submodel could be used when creating the table.  @return  The table of fields created
             <br>  @deprecated Deprecated in NX1926.0.0.  Use new version of @link NXOpen::CAE::ResultManager::JA_RESULT_MANAGER_create_table_field_for_model NXOpen::CAE::ResultManager::JA_RESULT_MANAGER_create_table_field_for_model@endlink  instead. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Use new version of NXOpen::CAE::ResultManager::JA_RESULT_MANAGER_create_table_field_for_model instead.") NXOpen::Fields::FieldTable * CreateTableFieldForModel
            (
                const NXString & fieldName /** field name */,
                int indepDomainType /** Independe domain type, must not be heterogeneous domain */,
                int depDomainType /** Dependent domain type, must not be heterogeneous domain */,
                int nodevalshare /** Data manupulation type */,
                int pvid /** Post view id */,
                bool isdeform /** If the current view is deformed or not*/,
                const std::vector<int> & elem /** Submodel elements*/,
                bool includeOrExculde /** if the submodel elements are included or excluded*/
            );
            /** Creates a table for the model. A submodel could be used when creating the table.  @return  The table of fields created
             <br>  @deprecated Deprecated in NX1926.0.0.  Use new version of @link NXOpen::CAE::ResultManager::JA_RESULT_MANAGER_create_table_field_for_model NXOpen::CAE::ResultManager::JA_RESULT_MANAGER_create_table_field_for_model@endlink  instead. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::Fields::FieldTable * CreateTableFieldForModel
            (
                const char * fieldName /** field name */,
                int indepDomainType /** Independe domain type, must not be heterogeneous domain */,
                int depDomainType /** Dependent domain type, must not be heterogeneous domain */,
                int nodevalshare /** Data manupulation type */,
                int pvid /** Post view id */,
                bool isdeform /** If the current view is deformed or not*/,
                const std::vector<int> & elem /** Submodel elements*/,
                bool includeOrExculde /** if the submodel elements are included or excluded*/
            );
            /** Creates a table of fields for the model. A submodel could be used when creating the table. A 4d field is created. @return  The table of fields created
             <br>  @deprecated Deprecated in NX1926.0.0.  Use new version of @link NXOpen::CAE::ResultManager::JA_RESULT_MANAGER_create_table_of_fields_for_model NXOpen::CAE::ResultManager::JA_RESULT_MANAGER_create_table_of_fields_for_model@endlink  instead. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Use new version of NXOpen::CAE::ResultManager::JA_RESULT_MANAGER_create_table_of_fields_for_model instead.") NXOpen::Fields::FieldLinksTable * CreateTableOfFieldsForModel
            (
                const NXString & fieldName /** field name */,
                int indepDomainType /** Independe domain type, must be heterogeneous domain */,
                int depDomainType /** Dependent domain type, must not be heterogeneous domain */,
                int nodevalshare /** Data manupulation type */,
                int pvid /** Post view id */,
                bool isdeform /** If the current view is deformed or not*/,
                const std::vector<int> & elem /** Submodel elements*/,
                const std::vector<int> & node /** Submodel nodes. Nodes are added primarily for elemental-nodal type of table, where not all nodes of a elements are in the table*/,
                bool includeOrExculde /** if the submodel are included or excluded*/,
                const std::vector<double> & primValues /** primary independent domain variable values*/,
                const std::vector<int> & lcases /** Load cases for the primary independent domain variable*/,
                const std::vector<int> & iters /** Iterations for the primary independent domain variable*/,
                const std::vector<int> & subiters /** Sub Iterations for the primary independent domain variable*/
            );
            /** Creates a table of fields for the model. A submodel could be used when creating the table. A 4d field is created. @return  The table of fields created
             <br>  @deprecated Deprecated in NX1926.0.0.  Use new version of @link NXOpen::CAE::ResultManager::JA_RESULT_MANAGER_create_table_of_fields_for_model NXOpen::CAE::ResultManager::JA_RESULT_MANAGER_create_table_of_fields_for_model@endlink  instead. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::Fields::FieldLinksTable * CreateTableOfFieldsForModel
            (
                const char * fieldName /** field name */,
                int indepDomainType /** Independe domain type, must be heterogeneous domain */,
                int depDomainType /** Dependent domain type, must not be heterogeneous domain */,
                int nodevalshare /** Data manupulation type */,
                int pvid /** Post view id */,
                bool isdeform /** If the current view is deformed or not*/,
                const std::vector<int> & elem /** Submodel elements*/,
                const std::vector<int> & node /** Submodel nodes. Nodes are added primarily for elemental-nodal type of table, where not all nodes of a elements are in the table*/,
                bool includeOrExculde /** if the submodel are included or excluded*/,
                const std::vector<double> & primValues /** primary independent domain variable values*/,
                const std::vector<int> & lcases /** Load cases for the primary independent domain variable*/,
                const std::vector<int> & iters /** Iterations for the primary independent domain variable*/,
                const std::vector<int> & subiters /** Sub Iterations for the primary independent domain variable*/
            );
            /** Get available iterations given the limits. 
                        numLimitItems must be 3 specifying that minLimit and maxLimit contains min/max 1.loadcase, 2. iteration and 3. subiteration
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void GetIterationsWithLimits
            (
                int resid /** result id */,
                int lcase /** load case to look for*/,
                int iteration /** iteration to look for*/,
                int superiter /** super iteration to look for*/,
                const std::vector<int> & minLimit /** minimum loadcase,iteration and subiteration*/,
                const std::vector<int> & maxLimit /** maximum load case,iteration and subiteration*/,
                std::vector<double> & primValues /** primary independent domain variable values*/,
                std::vector<int> & lcases /** Load cases for the primary independent domain variable*/,
                std::vector<int> & iters /** Iterations for the primary independent domain variable*/,
                std::vector<int> & subiters /** Sub Iterations for the primary independent domain variable*/
            );
            /** Creates a result access reference field object that supports 4D (hetergeneous) domains such as time-cartesian.
                        The created field is automatically made persistent and stored in the collection of fields for the part. 
                        The primary independent domain is limited by the input
                     @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::Fields::FieldReference * Create4dResultAccessReferenceFieldWithLimits
            (
                NXOpen::Fields::FieldManager * fieldManager /** field manager in part */,
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                NXOpen::CAE::ResultParameters * parameters /** defines the specific results state you wish to access */,
                const NXString & indepDomainName /** alphanumeric string; it must match with existing domain names */,
                const NXString & depDomainName /** alphanumeric string; it must match with existing domain names */,
                const NXString & fieldName /** field name */,
                const std::vector<int> & minLimit /** minimum loadcase,iteration and subiteration*/,
                const std::vector<int> & maxLimit /** maximum load case,iteration and subiteration*/
            );
            /** Creates a result access reference field object that supports 4D (hetergeneous) domains such as time-cartesian.
                        The created field is automatically made persistent and stored in the collection of fields for the part. 
                        The primary independent domain is limited by the input
                     @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::Fields::FieldReference * Create4dResultAccessReferenceFieldWithLimits
            (
                NXOpen::Fields::FieldManager * fieldManager /** field manager in part */,
                NXOpen::CAE::Result * result /** analysis results for which you want to access information */,
                NXOpen::CAE::ResultParameters * parameters /** defines the specific results state you wish to access */,
                const char * indepDomainName /** alphanumeric string; it must match with existing domain names */,
                const char * depDomainName /** alphanumeric string; it must match with existing domain names */,
                const char * fieldName /** field name */,
                const std::vector<int> & minLimit /** minimum loadcase,iteration and subiteration*/,
                const std::vector<int> & maxLimit /** maximum load case,iteration and subiteration*/
            );
            /** Creates a field from the lists of independent, dependent variables along with a given NodalForceReport.
                     @return  field 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Fields::Field * CreateTableFieldFromNodalForceReport
            (
                const NXString & fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the table field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables to be associated with the table field */,
                NXOpen::CAE::NodalForceReport * nodalForceReport /** nodal force report */ 
            );
            /** Creates a field from the lists of independent, dependent variables along with a given NodalForceReport.
                     @return  field 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::Fields::Field * CreateTableFieldFromNodalForceReport
            (
                const char * fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the table field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables to be associated with the table field */,
                NXOpen::CAE::NodalForceReport * nodalForceReport /** nodal force report */ 
            );
            /** Exports the field from the lists of independent variables along with a given NodalForceReport.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ExportNodalForceReportToFieldFile
            (
                NXOpen::CAE::NodalForceReport * nodalForceReport /** nodal force report */ ,
                const NXString & fileName /** file name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the table field */,
                bool exportForceField /** export force field option */,
                bool exportMomemtField /** export moment field option*/
            );
            /** Exports the field from the lists of independent variables along with a given NodalForceReport.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void ExportNodalForceReportToFieldFile
            (
                NXOpen::CAE::NodalForceReport * nodalForceReport /** nodal force report */ ,
                const char * fileName /** file name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the table field */,
                bool exportForceField /** export force field option */,
                bool exportMomemtField /** export moment field option*/
            );
            /** Creates a result parameter object for given Free Body.
                        It is user's responsibility to destroy the result parameters object once done 
                        using @link NXOpen::CAE::ResultManager::DeleteResultParametersWithNodalForceReport NXOpen::CAE::ResultManager::DeleteResultParametersWithNodalForceReport@endlink , in order to free up system resources
                     @return  
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link NXOpen::CAE::ResultManager::CreateResultParametersWithNodalForceReports NXOpen::CAE::ResultManager::CreateResultParametersWithNodalForceReports@endlink  <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use NXOpen::CAE::ResultManager::CreateResultParametersWithNodalForceReports") NXOpen::CAE::ResultParametersWithNodalForceReport * CreateResultParametersWithNodalForceReport
            (
                NXOpen::CAE::NodalForceReport * nodalForceReport /** nodal force report */ 
            );
            /** Creates a result parameter object for specified Nodal force reports.
                        It is user's responsibility to destroy the result parameters object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResultParametersWithNodalForceReport NXOpen::CAE::ResultManager::DeleteResultParametersWithNodalForceReport@endlink , in order to free up system resources.
                        Incase of multiple nodal force reports:
                        - All the nodal force reports should belong to same solution
                        - The AddAllForcesAndMoments property when creating the nodal force reports by @link NXOpen::CAE::NodalForceReportBuilder NXOpen::CAE::NodalForceReportBuilder@endlink  must be true.
                        - All the Nodal force reports should have same loadcase and same type of coordinate system.
                         @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultParametersWithNodalForceReport * CreateResultParametersWithNodalForceReports
            (
                const std::vector<NXOpen::CAE::NodalForceReport *> & freebodyList /** Nodal force reports for creating the postview  */
            );
            /** Delete a @link NXOpen::CAE::ResultParametersWithNodalForceReport NXOpen::CAE::ResultParametersWithNodalForceReport@endlink  object. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteResultParametersWithNodalForceReport
            (
                NXOpen::CAE::ResultParametersWithNodalForceReport * result /** result */ 
            );
            /** Creates a selection entity object.
                        It is user's responsibility to destroy the selection entity object once done 
                        using @link NXOpen::CAE::PostSelectionEntity::Delete NXOpen::CAE::PostSelectionEntity::Delete@endlink , in order to free up system resources
                     @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostSelectionEntity * CreatePostSelectionEntity
            (
            );
            /** Creates a builder for creating a result type cache
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::CacheResultRecipeBuilder * CreateResultCacheRecipeBuilder
            (
                NXOpen::CAE::Result * iresult /** Result to be create cached */
            );
            /** Exports Result Probes to field file
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void ExportProbesToFieldFile
            (
                const std::vector<NXOpen::CAE::ResultProbe *> & probes /** probes to be exported */,
                const NXString & filename /** filename */ 
            );
            /** Exports Result Probes to field file
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            void ExportProbesToFieldFile
            (
                const std::vector<NXOpen::CAE::ResultProbe *> & probes /** probes to be exported */,
                const char * filename /** filename */ 
            );
            /** Creates a solution result object given a @link NXOpen::CAE::DurabilityMetaSolution NXOpen::CAE::DurabilityMetaSolution@endlink  
                        It is user's responsibility to destroy the result object once done
                        using @link NXOpen::CAE::ResultManager::DeleteResult NXOpen::CAE::ResultManager::DeleteResult@endlink , in order to free up system resources.
                        More than one @link NXOpen::CAE::SolutionResult NXOpen::CAE::SolutionResult@endlink  object can be created for same meta solution, it is 
                        user's responsibility to delete each one of them. 
                     @return  Created solution result given the input durability meta solution
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::SolutionResult * CreateDurabilityMetaSolutionResult
            (
                NXOpen::CAE::DurabilityMetaSolution * durMetaSol /** the durablity meta solution*/
            );
            /** Creates a builder for hotspot recipe command
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::HotspotRecipeBuilder * CreateHotspotRecipeBuilder
            (
                NXOpen::CAE::SimSimulation * part /** part */ ,
                NXOpen::CAE::HotspotRecipe * recipe /** recipe */ 
            );
            /** Create dB Settings 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SignalProcessingDBSettings * CreateDbSettings
            (
            );
            /** Delete dB Settings 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteDbSettings
            (
                NXOpen::CAE::SignalProcessingDBSettings * dBSettings /** dbsettings */ 
            );
            /** Creates a results manipulation envelope builder.
                        It is user's responsibility to detroy this builder object once done. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultsManipulationEnvelopeBuilder * CreateResultsManipulationEnvelopeBuilder
            (
            );
            /** Creates a table of sub fields for the model. A submodel could be used when creating the table. A 4d field is created. @return  The table of fields created
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::Fields::FieldLinksTable * CreateTableOfFieldsForModel
            (
                const NXString & fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & primIndepVarArray /** primary independent variables to be associated with the table field and these are of time or frequency type */,
                const std::vector<NXOpen::Fields::FieldVariable *> & secondIndepVarArray /** secondary independent variables to be associated with the table field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables to be associated with the table field */,
                NXOpen::CAE::ResultsManipulationBuilder::ElementValueAtNode nodevalshare /** Data manupulation type */,
                int pvid /** Post view id */,
                bool isdeform /** If the current view is deformed or not*/,
                const std::vector<int> & elem /** Submodel elements*/,
                const std::vector<int> & node /** Submodel nodes. Nodes are added primarily for elemental-nodal type of table, where not all nodes of a elements are in the table*/,
                bool includeOrExculde /** if the submodel are included or excluded*/,
                const std::vector<double> & primValues /** primary independent domain variable values*/,
                const std::vector<int> & lcases /** Load cases for the primary independent domain variable*/,
                const std::vector<int> & iters /** Iterations for the primary independent domain variable*/,
                const std::vector<int> & subiters /** Sub Iterations for the primary independent domain variable*/,
                NXOpen::Fields::FieldTable::DuplicateValueOption duplicateValueOption /**Duplicate value processing option variable*/
            );
            /** Creates a table of sub fields for the model. A submodel could be used when creating the table. A 4d field is created. @return  The table of fields created
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::Fields::FieldLinksTable * CreateTableOfFieldsForModel
            (
                const char * fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & primIndepVarArray /** primary independent variables to be associated with the table field and these are of time or frequency type */,
                const std::vector<NXOpen::Fields::FieldVariable *> & secondIndepVarArray /** secondary independent variables to be associated with the table field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables to be associated with the table field */,
                NXOpen::CAE::ResultsManipulationBuilder::ElementValueAtNode nodevalshare /** Data manupulation type */,
                int pvid /** Post view id */,
                bool isdeform /** If the current view is deformed or not*/,
                const std::vector<int> & elem /** Submodel elements*/,
                const std::vector<int> & node /** Submodel nodes. Nodes are added primarily for elemental-nodal type of table, where not all nodes of a elements are in the table*/,
                bool includeOrExculde /** if the submodel are included or excluded*/,
                const std::vector<double> & primValues /** primary independent domain variable values*/,
                const std::vector<int> & lcases /** Load cases for the primary independent domain variable*/,
                const std::vector<int> & iters /** Iterations for the primary independent domain variable*/,
                const std::vector<int> & subiters /** Sub Iterations for the primary independent domain variable*/,
                NXOpen::Fields::FieldTable::DuplicateValueOption duplicateValueOption /**Duplicate value processing option variable*/
            );
            /** Creates a table of field for the model having duplicate value option as an argument. A submodel could be used when creating the table.  @return  The table of fields created
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::Fields::FieldTable * CreateTableFieldForModel
            (
                const NXString & fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the table field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables to be associated with the table field */,
                NXOpen::CAE::ResultsManipulationBuilder::ElementValueAtNode nodevalshare /** Data manupulation type */,
                int pvid /** Post view id */,
                bool isdeform /** If the current view is deformed or not*/,
                const std::vector<int> & elem /** Submodel elements*/,
                const std::vector<int> & node /** Submodel nodes. Nodes are added primarily for elemental-nodal type of table, where not all nodes of a elements are in the table*/,
                bool includeOrExculde /** if the submodel elements are included or excluded*/,
                NXOpen::Fields::FieldTable::DuplicateValueOption duplicateValueOption /** duplicatevalueoption */ 
            );
            /** Creates a table of field for the model having duplicate value option as an argument. A submodel could be used when creating the table.  @return  The table of fields created
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            NXOpen::Fields::FieldTable * CreateTableFieldForModel
            (
                const char * fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the table field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables to be associated with the table field */,
                NXOpen::CAE::ResultsManipulationBuilder::ElementValueAtNode nodevalshare /** Data manupulation type */,
                int pvid /** Post view id */,
                bool isdeform /** If the current view is deformed or not*/,
                const std::vector<int> & elem /** Submodel elements*/,
                const std::vector<int> & node /** Submodel nodes. Nodes are added primarily for elemental-nodal type of table, where not all nodes of a elements are in the table*/,
                bool includeOrExculde /** if the submodel elements are included or excluded*/,
                NXOpen::Fields::FieldTable::DuplicateValueOption duplicateValueOption /** duplicatevalueoption */ 
            );
            /** Creates a imported result object. It can be used to create a  @link NXOpen::CAE::ImportedResult NXOpen::CAE::ImportedResult@endlink   object
                        It is user's responsibility to destroy the result object once done
                     @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ImportResultParameters * CreateImportResultParameters
            (
            );
            /** Creates a result unit system. This object can be passed around to create a @link NXOpen::CAE::Result NXOpen::CAE::Result@endlink    object
                        It is user's responsibility to destroy the result object once done
                     @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultUnitSystem * CreateResultUnitSystem
            (
                NXOpen::BasePart * part /** part */ 
            );

            /// \cond NX_NO_DOC 
            /** Creates a @link  NXOpen::CAE::ResultToSCD5Converter   NXOpen::CAE::ResultToSCD5Converter @endlink  to convert a result to simcenter data file. 
                        It is user's responsibility to destroy this object.
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ResultToSCD5Converter * CreateScd5Converter
            (
            );

            /// \endcond 
            /** Creates a @link  NXOpen::CAE::GeometryQueryHelper   NXOpen::CAE::GeometryQueryHelper @endlink  to speed up @link  NXOpen::CAE::ResultAccess   NXOpen::CAE::ResultAccess @endlink  at location queries
                     @return  
             <br>  @deprecated Deprecated in NX1953.0.0.  This functionality is no longer needed. <br>  

             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  This functionality is no longer needed.") NXOpen::CAE::GeometryQueryHelper * CreateGeometryQueryHelper
            (
                NXOpen::CAE::Result * result /** result */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
