#ifndef NXOpen_EDGE_HXX_INCLUDED
#define NXOpen_EDGE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Edge.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_DraftingCurveInfo.hxx>
#include <NXOpen/GeometricUtilities_CurveLocation.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/IBaseCurve.hxx>
#include <NXOpen/ICurve.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/IProfile.hxx>
#include <NXOpen/IReferenceAxis.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Edge;
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Body;
    class DisplayableObject;
    namespace Drawings
    {
        class DraftingCurveInfo;
    }
    class Face;
    class IBaseCurve;
    class ICurve;
    class INXObject;
    class IProfile;
    class IReferenceAxis;
    class _EdgeBuilder;
    class EdgeImpl;
    /** Represents an edge  <br> An edge is obtained from its parent @link NXOpen::Body NXOpen::Body@endlink   <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  Edge : public NXOpen::DisplayableObject, public virtual NXOpen::IReferenceAxis, public virtual NXOpen::ICurve, public virtual NXOpen::IProfile
    {
        /** Solid edge type. */
        public: enum EdgeType
        {
            EdgeTypeRubber/** Rubber edge, no curve attached */,
            EdgeTypeLinear/** Linear edge */,
            EdgeTypeCircular/** Circular edge */,
            EdgeTypeElliptical/** Elliptical edge */,
            EdgeTypeIntersection/** Intersection edge */,
            EdgeTypeSpline/** Spline edge */,
            EdgeTypeSpCurve/** SP curve edge */,
            EdgeTypeForeign/** Foreign edge */,
            EdgeTypeConstantParameter/** Constant parameter edge */,
            EdgeTypeTrimmedCurve/** Trimmed curve edge */,
            EdgeTypeConvergent/** Convergent edge */,
            EdgeTypeUndefined/** Undefined */
        };

        private: EdgeImpl * m_edge_impl;
        private: friend class  _EdgeBuilder;
        protected: Edge();
        public: ~Edge();
        /**Returns  the solid type of the edge 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Edge::EdgeType SolidEdgeType
        (
        );
        /**  @brief Returns the faces connected to the edge. 

         
                The faces are sorted according to the journal identifier of the face.
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: std::vector<NXOpen::Face *> GetFaces
        (
        );
        /**  @brief Returns the faces connected to the edge. 

         
                The faces returned from this method are in no guaranteed order.
                    This method will be faster than @link NXOpen::Edge::GetFaces NXOpen::Edge::GetFaces@endlink .
                
             @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: std::vector<NXOpen::Face *> GetUnsortedFaces
        (
        );
        /** Returns the vertices of the edge. If the edge is closed, the second vertex is the same as the first. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void GetVertices
        (
            NXOpen::Point3d* vertex1 /** First vertex in the edge */,
            NXOpen::Point3d* vertex2 /** Second vertex in the edge */
        );
        /** Returns the body containing this edge  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Body * GetBody
        (
        );
        /** Creates new DraftingCurveInfo object  @return  New DraftingCurveInfo object. Returns NULL if the input curve 
                                                                                                                       is not a drafting curve 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: virtual NXOpen::Drawings::DraftingCurveInfo * GetDraftingCurveInfo
        (
        );
        /** Returns the length of the object  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual double GetLength
        (
        );
        /**Returns  the reference state of a curve 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: virtual bool IsReference
        (
        );
        /** Finds the locations associated with this curve  @return  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: virtual std::vector<NXOpen::GeometricUtilities::CurveLocation> GetLocations
        (
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
