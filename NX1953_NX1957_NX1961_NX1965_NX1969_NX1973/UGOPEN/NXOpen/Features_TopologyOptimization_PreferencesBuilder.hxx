#ifndef NXOpen_FEATURES_TOPOLOGYOPTIMIZATION_PREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_TOPOLOGYOPTIMIZATION_PREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_TopologyOptimization_PreferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace TopologyOptimization
        {
            class PreferencesBuilder;
        }
    }
    class Builder;
    class Expression;
    namespace Features
    {
        namespace TopologyOptimization
        {
            class _PreferencesBuilderBuilder;
            class PreferencesBuilderImpl;

            /// \cond NX_NO_DOC 
            /**
                    Represents a @link Features::TopologyOptimization::Preferences Features::TopologyOptimization::Preferences@endlink  builder
                     <br> To create a new instance of this class, use @link NXOpen::Features::TopologyOptimizationFeature::CreatePreferencesBuilder  NXOpen::Features::TopologyOptimizationFeature::CreatePreferencesBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            ProcessorChoice </term> <description> 
             
            LocalGPU </description> </item> 

            <item><term> 
             
            ResolutionVoxelSize.Value </term> <description> 
             
            1 (millimeters part), 0.04 (inches part) </description> </item> 

            </list> 

             <br>  Created in NX1953.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  PreferencesBuilder : public NXOpen::Builder
            {
                /** Processor option */
                public: enum ProcessorOption
                {
                    ProcessorOptionLocalGPU/** local gpu */ ,
                    ProcessorOptionLocalCPUBackground/** local cpubackground */ ,
                    ProcessorOptionLocalCPUForeground/** local cpuforeground */ 
                };

                private: PreferencesBuilderImpl * m_preferencesbuilder_impl;
                private: friend class  _PreferencesBuilderBuilder;
                protected: PreferencesBuilder();
                public: ~PreferencesBuilder();

                /// \cond NX_NO_DOC 
                /**Returns  the resolution voxel size 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ResolutionVoxelSize
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the study quality. It has range 1 to 10. 
                                value 1 means high quality but could take long time to get ultra fine optimization result;
                                value 10 means low quality and get coarse optimization result.
                            
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: int StudyQuality
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the study quality. It has range 1 to 10. 
                                value 1 means high quality but could take long time to get ultra fine optimization result;
                                value 10 means low quality and get coarse optimization result.
                            
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetStudyQuality
                (
                    int studyQualityFactor /** studyqualityfactor */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the processor choice 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::TopologyOptimization::PreferencesBuilder::ProcessorOption ProcessorChoice
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the processor choice 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetProcessorChoice
                (
                    NXOpen::Features::TopologyOptimization::PreferencesBuilder::ProcessorOption processorChoice /** processorchoice */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Set resolution voxel size by the given study quality 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetResolutionVoxelSizeByStudyQuality
                (
                    int studyQualityFactor /** studyqualityfactor */ 
                );

                /// \endcond 
            };

            /// \endcond 
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
