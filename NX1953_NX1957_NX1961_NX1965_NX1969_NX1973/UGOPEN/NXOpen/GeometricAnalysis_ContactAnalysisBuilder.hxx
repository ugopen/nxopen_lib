#ifndef NXOpen_GEOMETRICANALYSIS_CONTACTANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_CONTACTANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_ContactAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricAnalysis_FaceAnalysisNormalsBuilder.hxx>
#include <NXOpen/GeometricUtilities_DisplayResolutionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class ContactAnalysisBuilder;
    }
    class Builder;
    class Expression;
    namespace GeometricAnalysis
    {
        class FaceAnalysisNormalsBuilder;
    }
    namespace GeometricUtilities
    {
        class DisplayResolutionBuilder;
    }
    class NXColor;
    class ScCollector;
    namespace GeometricAnalysis
    {
        class _ContactAnalysisBuilderBuilder;
        class ContactAnalysisBuilderImpl;

        /// \cond NX_NO_DOC 
        /** Represents a Contact Analysis builder. 
                The Contact analysis will be performed on selected Sheet or Solid Bodies.
                And the Radius Analysis will be carried out on the ball touching areas
                The Output for the Contact Analysis will be Areas Touched by Ball and Areas Not Touched by ball 
                The Output for radius Analysis will be Sharp Areas, Intemediate areas and Smooth areas
                Also The results can be modulated for different resolutions <br> To create a new instance of this class, use @link NXOpen::GeometricAnalysis::AnalysisResultCollection::CreateContactAnalysisBuilder  NXOpen::GeometricAnalysis::AnalysisResultCollection::CreateContactAnalysisBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AutomaticUpdate </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        BallDiameter.Value </term> <description> 
         
        165.000 (millimeters part), 6.496 (inches part) </description> </item> 

        <item><term> 
         
        CreateMinRadiusPoints </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CreatePointsAtStepDist </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        DisplayContourCurves </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        DisplayResolution.AngleTolerance </term> <description> 
         
        15.0 </description> </item> 

        <item><term> 
         
        DisplayResolution.EdgeTolerance </term> <description> 
         
        0.005 </description> </item> 

        <item><term> 
         
        DisplayResolution.FaceTolerance </term> <description> 
         
        0.005 </description> </item> 

        <item><term> 
         
        DisplayResolution.Resolution </term> <description> 
         
        Standard </description> </item> 

        <item><term> 
         
        DisplayResolution.WidthTolerance </term> <description> 
         
        0.3 </description> </item> 

        <item><term> 
         
        EnableRadiusAnalysis </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ExternalBallDiameter.Value </term> <description> 
         
        165.000 (millimeters part), 6.496 (inches part) </description> </item> 

        <item><term> 
         
        HemishpericalBallDiameter.Value </term> <description> 
         
        165.000 (millimeters part), 6.496 (inches part) </description> </item> 

        <item><term> 
         
        InternalBallDiameter.Value </term> <description> 
         
        100.000 (millimeters part), 3.937 (inches part) </description> </item> 

        <item><term> 
         
        MaximumRadius.Value </term> <description> 
         
        5.000 (millimeters part), 0.197 (inches part) </description> </item> 

        <item><term> 
         
        MinimumRadius.Value </term> <description> 
         
        2.500 (millimeters part), 0.098 (inches part) </description> </item> 

        <item><term> 
         
        ProtrusionLimit.Value </term> <description> 
         
        5.000 (millimeters part), 0.197 (inches part) </description> </item> 

        <item><term> 
         
        RamDiameter.Value </term> <description> 
         
        50.000 (millimeters part), 1.969 (inches part) </description> </item> 

        <item><term> 
         
        ShowOnlyContactAnalysisAreas </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowOnlySharpAreas </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        StepDistance.Value </term> <description> 
         
        50.000 (millimeters part), 1.969 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICANALYSISEXPORT  ContactAnalysisBuilder : public NXOpen::Builder
        {
            private: ContactAnalysisBuilderImpl * m_contactanalysisbuilder_impl;
            private: friend class  _ContactAnalysisBuilderBuilder;
            protected: ContactAnalysisBuilder();
            public: ~ContactAnalysisBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the body selection on which the Contact analysis and Radius Analysis will be carried out
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BodySelection
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Contact analysis normals. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceAnalysisNormalsBuilder * Normals
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the toggle Toggle to Show only Ball touching Areas 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowOnlyContactAnalysisAreas
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the toggle Toggle to Show only Ball touching Areas 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetShowOnlyContactAnalysisAreas
            (
                bool showOnlyContactAnalysisAreas /** showonlycontactanalysisareas */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Ball Diameter for Ball Contact Analysis 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BallDiameter
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the External Ball Diameter for Fold Measurement Analysis  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ExternalBallDiameter
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Internal Ball Diameter for Fold Measurement Analysis 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * InternalBallDiameter
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Hemishperical Ball Diameter for Ram Apparatus Analysis   
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HemishpericalBallDiameter
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Ram Diameter for Ram Apparatus Analysis 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RamDiameter
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the protrusion limit is Threshold for Ram Apparatus Analysis and Fold Measurement Analysis 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ProtrusionLimit
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the toggle that enables radius analysis 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableRadiusAnalysis
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the toggle that enables radius analysis 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetEnableRadiusAnalysis
            (
                bool enableRadiusAnalysis /** enableradiusanalysis */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the toggle that enables show only sharp areas
                        the Radius Analysis will be performed on the Ball touching Araeas 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowOnlySharpAreas
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the toggle that enables show only sharp areas
                        the Radius Analysis will be performed on the Ball touching Araeas 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetShowOnlySharpAreas
            (
                bool showOnlySharpAreas /** showonlysharpareas */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum radius is Threshold for smooth areas
                        Areas exceeding this threshold are considered as smooth areas 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumRadius
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum radius is Threshold for smooth areas
                        Areas having less radius than this threshold are considered as Sharp Areas. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumRadius
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the toggle to Create and label the minimum radius point from all the sharp regions  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateMinRadiusPoints
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the toggle to Create and label the minimum radius point from all the sharp regions  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetCreateMinRadiusPoints
            (
                bool createMinRadiusPoints /** createminradiuspoints */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the toggle to create equidistant points at given step distance  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreatePointsAtStepDist
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the toggle to create equidistant points at given step distance  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetCreatePointsAtStepDist
            (
                bool createPointsAtStepDist /** createpointsatstepdist */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the step distance to Create equidistant points on selected bodies 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StepDistance
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Create Check Points 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void CreateCheckPoints
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Create Section Curves 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void CreateSectionCurves
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the toggle to Display Contour Curves 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayContourCurves
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the toggle to Display Contour Curves 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetDisplayContourCurves
            (
                bool displayContourCurves /** displaycontourcurves */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Create Save Contour Curves 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SaveContourCurves
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the disp resolution will decide the fineness of faceting traingles 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DisplayResolutionBuilder * DisplayResolution
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Color for Areas Not Touched by Ball of Given Ball Diameter 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * AreasNotTouchedByBall
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the Color for Areas Not Touched by Ball of Given Ball Diameter 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetAreasNotTouchedByBall
            (
                NXOpen::NXColor * areasNotTouchedByBall /** areasnottouchedbyball */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Color for Areas Touched by Ball of Given Ball Diameter 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * AreasTouchedByBall
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the Color for Areas Touched by Ball of Given Ball Diameter 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetAreasTouchedByBall
            (
                NXOpen::NXColor * areasTouchedByBall /** areastouchedbyball */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the color for Sharp Areas Where the Radius is Less than Minimum Radius  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SharpAreas
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the color for Sharp Areas Where the Radius is Less than Minimum Radius  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetSharpAreas
            (
                NXOpen::NXColor * sharpAreas /** sharpareas */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Color for Areas Where the Radius is Between Minimum Radius and Maximum Radius  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * IntermediateAreas
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the Color for Areas Where the Radius is Between Minimum Radius and Maximum Radius  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetIntermediateAreas
            (
                NXOpen::NXColor * intermediateAreas /** intermediateareas */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Color for Smooth Areas Where the Radius is Less Than Minimum Radius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SmoothAreas
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the Color for Smooth Areas Where the Radius is Less Than Minimum Radius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetSmoothAreas
            (
                NXOpen::NXColor * smoothAreas /** smoothareas */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the toggle that automatic update 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticUpdate
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the toggle that automatic update 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetAutomaticUpdate
            (
                bool automaticUpdate /** automaticupdate */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update the checker 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void Update
            (
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
