#ifndef NXOpen_CAM_GROUPFEATURES_HXX_INCLUDED
#define NXOpen_CAM_GROUPFEATURES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_GroupFeatures.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CAMFeature.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class GroupFeatures;
    }
    class Builder;
    namespace CAM
    {
        class CAMFeature;
    }
    class Direction;
    class ScCollector;
    namespace CAM
    {
        class _GroupFeaturesBuilder;
        class GroupFeaturesImpl;
        /** Represents the group features command  <br> To create a new instance of this class, use @link NXOpen::CAM::NCGroupCollection::CreateGroupFeatures  NXOpen::CAM::NCGroupCollection::CreateGroupFeatures @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        FeaturesToGroupType </term> <description> 
         
        All </description> </item> 

        <item><term> 
         
        GroupByAttributes </term> <description> 
         
        Predefined </description> </item> 

        <item><term> 
         
        GroupByMachiningAccessDirection </term> <description> 
         
        false </description> </item> 

        </list> 

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  GroupFeatures : public NXOpen::Builder
        {
            /** Available types for the features to group */
            public: enum FeaturesToGroupTypes
            {
                FeaturesToGroupTypesAll/** all */ ,
                FeaturesToGroupTypesBelowTopFace/** below top face */ ,
                FeaturesToGroupTypesSpecifyFeatures/** specify features */ 
            };

            private: GroupFeaturesImpl * m_groupfeatures_impl;
            private: friend class  _GroupFeaturesBuilder;
            protected: GroupFeatures();
            public: ~GroupFeatures();
            /**Returns  the features to group enumeration 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::GroupFeatures::FeaturesToGroupTypes FeaturesToGroupType
            (
            );
            /**Sets  the features to group enumeration 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFeaturesToGroupType
            (
                NXOpen::CAM::GroupFeatures::FeaturesToGroupTypes groupType /** group type */ 
            );
            /**Returns  the top face collector 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * TopFaceCollector
            (
            );
            /** Set the list of input features 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInputFeatures
            (
                const std::vector<NXOpen::CAM::CAMFeature *> & ftrs /** ftrs */ 
            );
            /** Set the feature types to filter 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFeatureTypes
            (
                std::vector<NXString> & ftrTypes /** ftr types */ 
            );
            /** Set the machining access directions to filter
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMachiningAccessDirections
            (
                const std::vector<NXOpen::Direction *> & vecDirectionTags /** vecdirectiontags */ ,
                double dTolerance /** dtolerance */ 
            );
            /**Returns  the group by identical attributes flag 
             <br>  @deprecated Deprecated in NX9.0.1.  Use @link CAM::GroupFeatures::GroupByAttributes CAM::GroupFeatures::GroupByAttributes@endlink  instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.1.  Use CAM::GroupFeatures::GroupByAttributes instead.") bool GroupByIdenticalAttributes
            (
            );
            /**Sets  the group by identical attributes flag 
             <br>  @deprecated Deprecated in NX9.0.1.  Use @link CAM::GroupFeatures::SetGroupByAttributes CAM::GroupFeatures::SetGroupByAttributes@endlink  instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NX_DEPRECATED("Deprecated in NX9.0.1.  Use CAM::GroupFeatures::SetGroupByAttributes instead.") void SetGroupByIdenticalAttributes
            (
                bool enable /** enable */ 
            );
            /**Returns  the group by attributes options - None, All, Predefined 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: NXString GroupByAttributes
            (
            );
            /**Sets  the group by attributes options - None, All, Predefined 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGroupByAttributes
            (
                const NXString & groupBy /** group by */ 
            );
            /**Sets  the group by attributes options - None, All, Predefined 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetGroupByAttributes
            (
                const char * groupBy /** group by */ 
            );
            /**Returns  the group by machining access direction flag 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool GroupByMachiningAccessDirection
            (
            );
            /**Sets  the group by machining access direction flag 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGroupByMachiningAccessDirection
            (
                bool enable /** enable */ 
            );
            /**Returns  the geometry location 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GeometryLocation
            (
            );
            /**Sets  the geometry location 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGeometryLocation
            (
                const NXString & geometryLocation /** geometry location */ 
            );
            /**Sets  the geometry location 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetGeometryLocation
            (
                const char * geometryLocation /** geometry location */ 
            );
            /** Create the feature groups 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void CreateFeatureGroups
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
