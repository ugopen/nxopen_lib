#ifndef NXOpen_DISPLAY_CAMERABUILDER_HXX_INCLUDED
#define NXOpen_DISPLAY_CAMERABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_CameraBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_display_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Display
    {
        class CameraBuilder;
    }
    class Builder;
    namespace Display
    {
        class _CameraBuilderBuilder;
        class CameraBuilderImpl;
        /**
        Represents a @link NXOpen::Display::CameraBuilder NXOpen::Display::CameraBuilder@endlink 
         <br> Cameras are not supported in KF.  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_DISPLAYEXPORT  CameraBuilder : public NXOpen::Builder
        {
            /** the camera types */
            public: enum Types
            {
                TypesParallel/**  Parallel Projection */,
                TypesPerspective/** Perspective Projection */
            };

            /** the way to define the field of view angle */
            public: enum LensAngle
            {
                LensAngleStock/** Stock Lenses */,
                LensAngleFov/** Field of View */,
                LensAngleMagnification/** Magnification */
            };

            /** Predefined lenses: 28, 35, 50, 70, 105, 135, 210, 300mm */
            public: enum StockLens
            {
                StockLensS28/** 28mm */,
                StockLensS35/** 35mm */,
                StockLensS50/** 50mm */,
                StockLensS70/** 70mm */,
                StockLensS105/** 105mm */,
                StockLensS135/** 135mm */,
                StockLensS210/** 210mm */,
                StockLensS300/** 300mm */
            };

            /** either horizontal or vertical measure */
            public: enum FovMeasured
            {
                FovMeasuredHorizontally/** Horizontal */,
                FovMeasuredVertically/** Vertical  */
            };

            /** Predefined lens flare types: Standard, 35mm, 50mm, 105mm, 
                    polygonal, 35mm poly, 50mm poly, 105mm poly, spark, star */
            public: enum LensFlare
            {
                LensFlareStandard/** Standard lens */,
                LensFlareS35/** 35mm */,
                LensFlareS50/** 50mm */,
                LensFlareS105/** 105mm */,
                LensFlarePolygonal/** polygonal */,
                LensFlareP35/** 35mm poly */,
                LensFlareP50/** 50mm poly */,
                LensFlareP105/** 105mm poly */,
                LensFlareSpark/** spark lens */,
                LensFlareStar/** star lens */
            };

            /** Predefined apertures: f2.8, f5.6, f8, f11, f16, f22 */
            public: enum Aperture
            {
                ApertureF28/** f2.8 */,
                ApertureF56/** f5.6 */,
                ApertureF8/** f8   */,
                ApertureF11/** f11  */,
                ApertureF16/** f16  */,
                ApertureF22/** f22     */
            };

            private: CameraBuilderImpl * m_camerabuilder_impl;
            private: friend class  _CameraBuilderBuilder;
            protected: CameraBuilder();
            public: ~CameraBuilder();
            /**Returns  the camera type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::CameraBuilder::Types Type
            (
            );
            /**Sets  the camera type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Display::CameraBuilder::Types type /** type */ 
            );
            /**Returns  the camera name as a TEXT string.  Note that internally the camera name
                    is stored as a char* string.  Any characters which cannot be
                    mapped to 8-bit characters will be replaced by # characters. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CameraName
            (
            );
            /**Sets  the camera name as a TEXT string.  Note that internally the camera name
                    is stored as a char* string.  Any characters which cannot be
                    mapped to 8-bit characters will be replaced by # characters. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCameraName
            (
                const NXString & cameraName /** camera name */ 
            );
            /**Sets  the camera name as a TEXT string.  Note that internally the camera name
                    is stored as a char* string.  Any characters which cannot be
                    mapped to 8-bit characters will be replaced by # characters. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetCameraName
            (
                const char * cameraName /** camera name */ 
            );
            /**Returns  the camera name as a char string 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: NXString CameraNameChar
            (
            );
            /**Sets  the camera name as a char string 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCameraNameChar
            (
                const NXString & cameraName /** camera name */ 
            );
            /**Sets  the camera name as a char string 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            void SetCameraNameChar
            (
                const char * cameraName /** camera name */ 
            );
            /**Returns  the coordinates of the camera point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d CameraPosition
            (
            );
            /**Sets  the coordinates of the camera point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCameraPosition
            (
                const NXOpen::Point3d & position /** position */ 
            );
            /**Returns  the camera rotation matrix 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 CameraMatrix
            (
            );
            /**Sets  the camera rotation matrix 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCameraMatrix
            (
                const NXOpen::Matrix3x3 & cameraMatrix /** camera matrix */ 
            );
            /**Returns  the perspective distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double PerspectiveDistance
            (
            );
            /**Sets  the perspective distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPerspectiveDistance
            (
                double perspectiveDistance /** perspectivedistance */ 
            );
            /**Returns  whether to use the target point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseTargetPoint
            (
            );
            /**Sets  whether to use the target point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseTargetPoint
            (
                bool useTargetPoint /** usetargetpoint */ 
            );
            /**Returns  the coordinates of the target point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d TargetPosition
            (
            );
            /**Sets  the coordinates of the target point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetPosition
            (
                const NXOpen::Point3d & position /** position */ 
            );
            /**Returns  the target point rotation matrix 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 TargetMatrix
            (
            );
            /**Sets  the target point rotation matrix 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetMatrix
            (
                const NXOpen::Matrix3x3 & matrix /** matrix */ 
            );
            /**Returns  the lens angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::CameraBuilder::LensAngle LensAngleType
            (
            );
            /**Sets  the lens angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLensAngleType
            (
                NXOpen::Display::CameraBuilder::LensAngle lensAngleType /** lensangletype */ 
            );
            /**Returns  the stock lens type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::CameraBuilder::StockLens StockLensType
            (
            );
            /**Sets  the stock lens type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStockLensType
            (
                NXOpen::Display::CameraBuilder::StockLens stockLensType /** stocklenstype */ 
            );
            /**Returns  the field of view measured 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::CameraBuilder::FovMeasured FieldOfViewMeasured
            (
            );
            /**Sets  the field of view measured 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFieldOfViewMeasured
            (
                NXOpen::Display::CameraBuilder::FovMeasured fovMeasuredType /** fovmeasuredtype */ 
            );
            /**Returns  the field of view angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double FieldOfViewAngle
            (
            );
            /**Sets  the field of view angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFieldOfViewAngle
            (
                double fieldOfViewAngle /** fieldofviewangle */ 
            );
            /**Returns  the magnification 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Magnification
            (
            );
            /**Sets  the magnification 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMagnification
            (
                double magnification /** magnification */ 
            );
            /**Returns  the front clipping distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double FrontClippingDistance
            (
            );
            /**Sets  the front clipping distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFrontClippingDistance
            (
                double frontClippingDistance /** frontclippingdistance */ 
            );
            /**Returns  the back clipping distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double BackClippingDistance
            (
            );
            /**Sets  the back clipping distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBackClippingDistance
            (
                double backClippingDistance /** backclippingdistance */ 
            );
            /**Returns  the lens flare toggle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool LensFlareToggle
            (
            );
            /**Sets  the lens flare toggle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLensFlareToggle
            (
                bool lensFlareToggle /** lensflaretoggle */ 
            );
            /**Returns  the hidden lens flare toggle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool HiddenLensFlareToggle
            (
            );
            /**Sets  the hidden lens flare toggle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHiddenLensFlareToggle
            (
                bool hiddenLensFlareToggle /** hiddenlensflaretoggle */ 
            );
            /**Returns  the lens flare type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::CameraBuilder::LensFlare LensFlareType
            (
            );
            /**Sets  the lens flare type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLensFlareType
            (
                NXOpen::Display::CameraBuilder::LensFlare lensFlareType /** lensflaretype */ 
            );
            /**Returns  the lens flare intensity 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double LensFlareIntensity
            (
            );
            /**Sets  the lens flare intensity 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLensFlareIntensity
            (
                double lensFlareIntensity /** lensflareintensity */ 
            );
            /**Returns  the depth of field toggle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool DepthOfFieldToggle
            (
            );
            /**Sets  the depth of field toggle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDepthOfFieldToggle
            (
                bool depthOfFieldToggle /** depthoffieldtoggle */ 
            );
            /**Returns  the aperture 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::CameraBuilder::Aperture ApertureType
            (
            );
            /**Sets  the aperture 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetApertureType
            (
                NXOpen::Display::CameraBuilder::Aperture apertureType /** aperturetype */ 
            );
            /**Returns  the focal distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double FocalDistance
            (
            );
            /**Sets  the focal distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFocalDistance
            (
                double focalDistance /** focaldistance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
