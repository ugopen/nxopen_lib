#ifndef NXOpen_GATEWAY_MASSEXPORTBUILDER_HXX_INCLUDED
#define NXOpen_GATEWAY_MASSEXPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Gateway_MassExportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_gateway_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Gateway
    {
        class MassExportBuilder;
    }
    class Builder;
    class SelectNXObjectList;
    namespace Gateway
    {
        class _MassExportBuilderBuilder;
        class MassExportBuilderImpl;
        /** Represents a @link NXOpen::Gateway::MassExportBuilder NXOpen::Gateway::MassExportBuilder@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Gateway::MassCollection::CreateExportBuilder  NXOpen::Gateway::MassCollection::CreateExportBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Output </term> <description> 
         
        Information </description> </item> 

        </list> 

         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_GATEWAYEXPORT  MassExportBuilder : public NXOpen::Builder
        {
            /** the node type */
            public: enum NodeType
            {
                NodeTypeComponentHeader/** component header */  = 2,
                NodeTypeBodyHeader/** body header */ ,
                NodeTypePerComponentResult/** per component result */ ,
                NodeTypePerBodyResult/** per body result */ ,
                NodeTypeOverallResult/** overall result */ 
            };

            /** the component header node ID */
            public: enum ComponentHeader
            {
                ComponentHeaderReferenceSetPrecedence/** reference set precedence */ ,
                ComponentHeaderReferenceSetUsed/** reference set used */ ,
                ComponentHeaderComponentGroup/** component group */ ,
                ComponentHeaderArrangement/** arrangement */ ,
                ComponentHeaderAccuracy/** accuracy */ ,
                ComponentHeaderCount/** count */ 
            };

            /** the body header node ID */
            public: enum BodyHeader
            {
                BodyHeaderReferenceSetUsed/** reference set used */ ,
                BodyHeaderAccuracy/** accuracy */ ,
                BodyHeaderCount/** count */ 
            };

            /** the per component result node ID */
            public: enum PerComponentResult
            {
                PerComponentResultComponentName/** component name */ ,
                PerComponentResultObjectDisplayName/** object display name */ ,
                PerComponentResultItemID/** item id */ ,
                PerComponentResultItemName/** item name */ ,
                PerComponentResultItemRevision/** item revision */ ,
                PerComponentResultFileName/** file name */ ,
                PerComponentResultDescriptivePartName/** descriptive part name */ ,
                PerComponentResultParentName/** parent name */ ,
                PerComponentResultCount/** count */ 
            };

            /** the per body result node ID */
            public: enum PerBodyResult
            {
                PerBodyResultBodyName/** body name */ ,
                PerBodyResultCount/** count */ 
            };

            /** the overall result node ID */
            public: enum OverallResult
            {
                OverallResultDensity/** density */ ,
                OverallResultDensitySource/** density source */ ,
                OverallResultArea/** area */ ,
                OverallResultAreaSource/** area source */ ,
                OverallResultVolume/** volume */ ,
                OverallResultVolumeSource/** volume source */ ,
                OverallResultMass/** mass */ ,
                OverallResultMassSource/** mass source */ ,
                OverallResultWeight/** weight */ ,
                OverallResultWeightSource/** weight source */ ,
                OverallResultCenterOfMassWCS/** center of mass wcs */ ,
                OverallResultCenterOfMassAbsolute/** center of mass absolute */ ,
                OverallResultCenterOfMassSource/** center of mass source */ ,
                OverallResultFirstMomentsWCS/** first moments wcs */ ,
                OverallResultMomentsOfInertiaWCS/** moments of inertia wcs */ ,
                OverallResultMomentsOfInertiaCentroidal/** moments of inertia centroidal */ ,
                OverallResultMomentsOfInertiaCentroidalSource/** moments of inertia centroidal source */ ,
                OverallResultMomentsOfInertiaSpherical/** moments of inertia spherical */ ,
                OverallResultProductsOfInertiaWCS/** products of inertia wcs */ ,
                OverallResultProductsOfInertiaCentroidal/** products of inertia centroidal */ ,
                OverallResultProductsOfInertiaCentroidalSource/** products of inertia centroidal source */ ,
                OverallResultPrincipalMomentsOfInertia/** principal moments of inertia */ ,
                OverallResultRadiiOfGyrationWCS/** radii of gyration wcs */ ,
                OverallResultRadiiOfGyrationCentroidal/** radii of gyration centroidal */ ,
                OverallResultRadiiOfGyrationSpherical/** radii of gyration spherical */ ,
                OverallResultPrincipalAxisWCS/** principal axis wcs */ ,
                OverallResultEstimatedErrorRanges/** estimated error ranges */ ,
                OverallResultWarnings/** warnings */ ,
                OverallResultCount/** count */ 
            };

            /** the data modes */
            public: enum DataModes
            {
                DataModesAssemblyOnly/** assembly only */ ,
                DataModesIncludeChildren/** include children */ ,
                DataModesSolid/** solid */ 
            };

            /** the output types */
            public: enum OutputTypes
            {
                OutputTypesInformation/** information */ ,
                OutputTypesXlsx/** xlsx */ ,
                OutputTypesCsv/** csv */ ,
                OutputTypesXml/** xml */ ,
                OutputTypesJson/** json */ 
            };

            private: MassExportBuilderImpl * m_massexportbuilder_impl;
            private: friend class  _MassExportBuilderBuilder;
            protected: MassExportBuilder();
            public: ~MassExportBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the objects 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * Objects
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the include children 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Gateway::MassExportBuilder::DataModes DataMode
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the include children 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void SetDataMode
            (
                NXOpen::Gateway::MassExportBuilder::DataModes dataMode /** datamode */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the output 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Gateway::MassExportBuilder::OutputTypes Output
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the output 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void SetOutput
            (
                NXOpen::Gateway::MassExportBuilder::OutputTypes output /** output */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the file name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FileName
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the file name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void SetFileName
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the file name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            void SetFileName
            (
                const char * fileName /** filename */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the template file name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TemplateFileName
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the template file name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void SetTemplateFileName
            (
                const NXString & templateFileName /** templatefilename */ 
            );
            /**Sets  the template file name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            void SetTemplateFileName
            (
                const char * templateFileName /** templatefilename */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the use legacy layout for XLSX 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseLegacyLayoutForXLSX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the use legacy layout for XLSX 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void SetUseLegacyLayoutForXLSX
            (
                bool useLegacyLayout /** uselegacylayout */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Load system default template values 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void LoadSystemDefault
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Save current selection as default template 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void SaveAsDefault
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Restore to default template 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void RestoreDefault
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Save a template file 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void SaveToFile
            (
                const NXString & fileName /** filename */ 
            );
            /** Save a template file 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            void SaveToFile
            (
                const char * fileName /** filename */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Open from a template file 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void OpenFromFile
            (
                const NXString & fileName /** filename */ 
            );
            /** Open from a template file 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            void OpenFromFile
            (
                const char * fileName /** filename */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Set node toggle state 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void SetToggleState
            (
                NXOpen::Gateway::MassExportBuilder::NodeType nodeType /** nodetype */ ,
                int nodeId /** nodeid */ ,
                bool state /** state */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Move up node 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void MoveUp
            (
                NXOpen::Gateway::MassExportBuilder::NodeType nodeType /** nodetype */ ,
                int nodeId /** nodeid */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Move down node 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void MoveDown
            (
                NXOpen::Gateway::MassExportBuilder::NodeType nodeType /** nodetype */ ,
                int nodeId /** nodeid */ 
            );

            /// \endcond 
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
