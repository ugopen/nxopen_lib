#ifndef NXOpen_FEATURES_FEATURECOLLECTION_HXX_INCLUDED
#define NXOpen_FEATURES_FEATURECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FeatureCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Features_CopyPasteBuilder.hxx>
#include <NXOpen/Features_Feature.hxx>
#include <NXOpen/Features_FeatureReplayBuilder.hxx>
#include <NXOpen/Features_JoinCurvesBuilder.hxx>
#include <NXOpen/Features_PaintParametersBuilder.hxx>
#include <NXOpen/Features_RasterImage.hxx>
#include <NXOpen/Features_ReferenceMapperBuilder.hxx>
#include <NXOpen/Features_RemoveParametersBuilder.hxx>
#include <NXOpen/Features_ReplaceFeatureBuilder.hxx>
#include <NXOpen/Features_SketchConversionReport.hxx>
#include <NXOpen/Features_ThroughCurveMeshBuilder.hxx>
#include <NXOpen/Features_ThroughCurvesBuilder.hxx>
#include <NXOpen/HumanPosturePrediction.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/Session.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class FeatureCollection;
    }
    class BasePart;
    namespace Features
    {
        class Feature;
    }
    class Body;
    class Curve;
    class CutView;
    namespace Die
    {
        class DieCollection;
    }
    class Edge;
    class ErrorList;
    class Face;
    namespace Features
    {
        class AOCSBuilder;
    }
    namespace Features
    {
        class AVDACollection;
    }
    namespace Features
    {
        class AdaptiveShell;
    }
    namespace Features
    {
        class AdaptiveShellBuilder;
    }
    namespace Features
    {
        class AdmMoveFace;
    }
    namespace Features
    {
        class AdmMoveFaceBuilder;
    }
    namespace Features
    {
        class AdmOffsetRegion;
    }
    namespace Features
    {
        class AdmOffsetRegionBuilder;
    }
    namespace Features
    {
        class AdmResizeFace;
    }
    namespace Features
    {
        class AdmResizeFaceBuilder;
    }
    namespace Features
    {
        class AeroCollection;
    }
    namespace Features
    {
        class AestheticFaceBlend;
    }
    namespace Features
    {
        class AestheticFaceBlendBuilder;
    }
    namespace Features
    {
        class AlgorithmicFeatureBuilder;
    }
    namespace Features
    {
        class AnalyzePocket;
    }
    namespace Features
    {
        class AnalyzePocketBuilder;
    }
    namespace Features
    {
        class AngularDim;
    }
    namespace Features
    {
        class AngularDimBuilder;
    }
    namespace Features
    {
        class AssemblyCut;
    }
    namespace Features
    {
        class AssemblyCutBuilder;
    }
    namespace Features
    {
        class AutomotiveCollection;
    }
    namespace Features
    {
        class BlendPocket;
    }
    namespace Features
    {
        class BlendPocketBuilder;
    }
    namespace Features
    {
        class BlockFeatureBuilder;
    }
    namespace Features
    {
        class BodyByEquation;
    }
    namespace Features
    {
        class BodyByEquationBuilder;
    }
    namespace Features
    {
        class BooleanBuilder;
    }
    namespace Features
    {
        class BooleanFeature;
    }
    namespace Features
    {
        class BoundedPlane;
    }
    namespace Features
    {
        class BoundedPlaneBuilder;
    }
    namespace Features
    {
        class BridgeCurve;
    }
    namespace Features
    {
        class BridgeCurveBuilder;
    }
    namespace Features
    {
        class BridgeCurveBuilderEx;
    }
    namespace Features
    {
        class BridgeSurface;
    }
    namespace Features
    {
        class BridgeSurfaceBuilder;
    }
    namespace Features
    {
        class ChamferBuilder;
    }
    namespace Features
    {
        class ChangeShellThickness;
    }
    namespace Features
    {
        class ChangeShellThicknessBuilder;
    }
    namespace Features
    {
        class CircularBlendCurve;
    }
    namespace Features
    {
        class CircularBlendCurveBuilder;
    }
    namespace Features
    {
        class Coaxial;
    }
    namespace Features
    {
        class CoaxialBuilder;
    }
    namespace Features
    {
        class ColorFaceBuilder;
    }
    namespace Features
    {
        class ColorFeatureBuilder;
    }
    namespace Features
    {
        class ColorFeatureGroupBuilder;
    }
    namespace Features
    {
        class CombinedProjection;
    }
    namespace Features
    {
        class CombinedProjectionBuilder;
    }
    namespace Features
    {
        class CompositeCurveBuilder;
    }
    namespace Features
    {
        class ConcaveFaces;
    }
    namespace Features
    {
        class ConcaveFacesBuilder;
    }
    namespace Features
    {
        class Cone;
    }
    namespace Features
    {
        class ConeBuilder;
    }
    namespace Features
    {
        class CoplanarBuilder;
    }
    namespace Features
    {
        class CopyFaceBuilder;
    }
    namespace Features
    {
        class CopyPasteBuilder;
    }
    namespace Features
    {
        class CurveFeatureCollection;
    }
    namespace Features
    {
        class CurveLengthBuilder;
    }
    namespace Features
    {
        class CurveOnSurface;
    }
    namespace Features
    {
        class CurveOnSurfaceBuilder;
    }
    namespace Features
    {
        class CustomAttributeCollection;
    }
    namespace Features
    {
        class CustomFeatureBuilder;
    }
    namespace Features
    {
        class CustomFeatureDataCollection;
    }
    namespace Features
    {
        class CutFaceBuilder;
    }
    namespace Features
    {
        class CylinderBuilder;
    }
    namespace Features
    {
        class DatumAxisBuilder;
    }
    namespace Features
    {
        class DatumCsysBuilder;
    }
    namespace Features
    {
        class DatumPlaneBuilder;
    }
    namespace Features
    {
        class DeformDefinitionBuilder;
    }
    namespace Features
    {
        class DeleteBody;
    }
    namespace Features
    {
        class DeleteBodyBuilder;
    }
    namespace Features
    {
        class DeleteEdge;
    }
    namespace Features
    {
        class DeleteEdgeBuilder;
    }
    namespace Features
    {
        class DeleteFaceBuilder;
    }
    namespace Features
    {
        class DesignFeatureCollection;
    }
    namespace Features
    {
        class DesignGroup;
    }
    namespace Features
    {
        class DesignGroupBuilder;
    }
    namespace Features
    {
        class DetailFeatureCollection;
    }
    namespace Features
    {
        class DividefaceBuilder;
    }
    namespace Features
    {
        class DraftBodyBuilder;
    }
    namespace Features
    {
        class DraftBuilder;
    }
    namespace Features
    {
        class DraftingSplineBuilder;
    }
    namespace Features
    {
        class EdgeBlendBuilder;
    }
    namespace Features
    {
        class EdgeSymmetryBuilder;
    }
    namespace Features
    {
        class EditCrossSection;
    }
    namespace Features
    {
        class EditCrossSectionBuilder;
    }
    namespace Features
    {
        class EditDimensionBuilder;
    }
    namespace Features
    {
        class EditWithRollbackManager;
    }
    namespace Features
    {
        class EmbedManagerBuilder;
    }
    namespace Features
    {
        class EmbossBody;
    }
    namespace Features
    {
        class EmbossBodyBuilder;
    }
    namespace Features
    {
        class EmbossBuilder;
    }
    namespace Features
    {
        class Enlarge;
    }
    namespace Features
    {
        class EnlargeBuilder;
    }
    namespace Features
    {
        class Extension;
    }
    namespace Features
    {
        class ExtensionBuilder;
    }
    namespace Features
    {
        class ExtractFaceBuilder;
    }
    namespace Features
    {
        class ExtrudeBuilder;
    }
    namespace Features
    {
        class FaceBlendBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class FeatureGroup;
    }
    namespace Features
    {
        class FeatureReplayBuilder;
    }
    namespace Features
    {
        class FitCurve;
    }
    namespace Features
    {
        class FitCurveBuilder;
    }
    namespace Features
    {
        class FitSurface;
    }
    namespace Features
    {
        class FitSurfaceBuilder;
    }
    namespace Features
    {
        class Fixed;
    }
    namespace Features
    {
        class FixedBuilder;
    }
    namespace Features
    {
        class FlowBlend;
    }
    namespace Features
    {
        class FlowBlendBuilder;
    }
    namespace Features
    {
        class FreeTransformerBuilder;
    }
    namespace Features
    {
        class FreeformCurveCollection;
    }
    namespace Features
    {
        class FreeformSurfaceCollection;
    }
    namespace Features
    {
        class GeneralConic;
    }
    namespace Features
    {
        class GeneralConicBuilder;
    }
    namespace Features
    {
        class GeodesicSketchCollection;
    }
    namespace Features
    {
        class GeomcopyBuilder;
    }
    namespace Features
    {
        class GlobalShaping;
    }
    namespace Features
    {
        class GlobalShapingBuilder;
    }
    namespace Features
    {
        class GroupFace;
    }
    namespace Features
    {
        class GroupFaceBuilder;
    }
    namespace Features
    {
        class GuidedExtensionBuilderEx;
    }
    namespace Features
    {
        class Helix;
    }
    namespace Features
    {
        class HelixBuilder;
    }
    namespace Features
    {
        class HoleFeatureBuilder;
    }
    namespace Features
    {
        class HolePackage;
    }
    namespace Features
    {
        class HolePackageBuilder;
    }
    namespace Features
    {
        class HumanBuilder;
    }
    namespace Features
    {
        class IForm;
    }
    namespace Features
    {
        class IFormBuilder;
    }
    namespace Features
    {
        class InstanceFeature;
    }
    namespace Features
    {
        class InstanceFeatureBuilder;
    }
    namespace Features
    {
        class IntersectionCurveBuilder;
    }
    namespace Features
    {
        class IsolateFeature;
    }
    namespace Features
    {
        class IsolateFeatureBuilder;
    }
    namespace Features
    {
        class IsoparametricCurves;
    }
    namespace Features
    {
        class IsoparametricCurvesBuilder;
    }
    namespace Features
    {
        class JoinCurvesBuilder;
    }
    namespace Features
    {
        class LabelChamfer;
    }
    namespace Features
    {
        class LabelChamferBuilder;
    }
    namespace Features
    {
        class LabelNotchBlend;
    }
    namespace Features
    {
        class LabelNotchBlendBuilder;
    }
    namespace Features
    {
        class LatticeFeatureCollection;
    }
    namespace Features
    {
        class LawCurve;
    }
    namespace Features
    {
        class LawCurveBuilder;
    }
    namespace Features
    {
        class LawExtension;
    }
    namespace Features
    {
        class LawExtensionBuilder;
    }
    namespace Features
    {
        class LawExtensionBuilderEx;
    }
    namespace Features
    {
        class LinearDimension;
    }
    namespace Features
    {
        class LinearDimensionBuilder;
    }
    namespace Features
    {
        class LinkedFacet;
    }
    namespace Features
    {
        class LinkedFacetBuilder;
    }
    namespace Features
    {
        class MakeOffset;
    }
    namespace Features
    {
        class MakeOffsetBuilder;
    }
    namespace Features
    {
        class Maple;
    }
    namespace Features
    {
        class MapleBuilder;
    }
    namespace Features
    {
        class MasterCutBuilder;
    }
    namespace Features
    {
        class MatchEdge;
    }
    namespace Features
    {
        class MatchEdgeBuilder;
    }
    namespace Features
    {
        class MathIntegration;
    }
    namespace Features
    {
        class MathIntegrationBuilder;
    }
    namespace Features
    {
        class MeshSurfaceBuilder;
    }
    namespace Features
    {
        class MeshTransformerBuilder;
    }
    namespace Features
    {
        class MidSurfaceByFacePairsBuilder;
    }
    namespace Features
    {
        class MidSurfaceUserDefined;
    }
    namespace Features
    {
        class MidSurfaceUserDefinedBuilder;
    }
    namespace Features
    {
        class Mirror;
    }
    namespace Features
    {
        class MirrorBodyBuilder;
    }
    namespace Features
    {
        class MirrorBuilder;
    }
    namespace Features
    {
        class MirrorCurveBuilder;
    }
    namespace Features
    {
        class MirrorFaceBuilder;
    }
    namespace Features
    {
        class MirrorFeatureBuilder;
    }
    namespace Features
    {
        class MorphMeshCollection;
    }
    namespace Features
    {
        class MoveBody;
    }
    namespace Features
    {
        class MoveBodyBuilder;
    }
    namespace Features
    {
        class MoveFaceBuilder;
    }
    namespace Features
    {
        class NSidedSurface;
    }
    namespace Features
    {
        class NSidedSurfaceBuilder;
    }
    namespace Features
    {
        class OffsetCurveBuilder;
    }
    namespace Features
    {
        class OffsetEmbossBuilder;
    }
    namespace Features
    {
        class OffsetFaceBuilder;
    }
    namespace Features
    {
        class OffsetRegionBuilder;
    }
    namespace Features
    {
        class OffsetSurfaceBuilder;
    }
    namespace Features
    {
        class OptimizeCurveBuilder;
    }
    namespace Features
    {
        class OptimizeFaceBuilder;
    }
    namespace Features
    {
        class OvercrownBuilder;
    }
    namespace Features
    {
        class PaintParametersBuilder;
    }
    namespace Features
    {
        class Parallel;
    }
    namespace Features
    {
        class ParallelBuilder;
    }
    namespace Features
    {
        class PartModule;
    }
    namespace Features
    {
        class PartModuleBuilder;
    }
    namespace Features
    {
        class PasteFaceBuilder;
    }
    namespace Features
    {
        class PatchBuilder;
    }
    namespace Features
    {
        class PatchOpeningsBuilder;
    }
    namespace Features
    {
        class PatternFaceBuilder;
    }
    namespace Features
    {
        class PatternFaceFeature;
    }
    namespace Features
    {
        class PatternFaceFeatureBuilder;
    }
    namespace Features
    {
        class PatternFeatureBuilder;
    }
    namespace Features
    {
        class PatternGeometry;
    }
    namespace Features
    {
        class PatternGeometryBuilder;
    }
    namespace Features
    {
        class Perpendicular;
    }
    namespace Features
    {
        class PerpendicularBuilder;
    }
    namespace Features
    {
        class PointSet;
    }
    namespace Features
    {
        class PointSetBuilder;
    }
    namespace Features
    {
        class PoleSmoothing;
    }
    namespace Features
    {
        class PoleSmoothingBuilder;
    }
    namespace Features
    {
        class PrintCsysFeatureCollection;
    }
    namespace Features
    {
        class ProjectCurveBuilder;
    }
    namespace Features
    {
        class Promotion;
    }
    namespace Features
    {
        class PromotionBuilder;
    }
    namespace Features
    {
        class PullFace;
    }
    namespace Features
    {
        class PullFaceBuilder;
    }
    namespace Features
    {
        class RPOBuilder;
    }
    namespace Features
    {
        class RadialDimension;
    }
    namespace Features
    {
        class RadialDimensionBuilder;
    }
    namespace Features
    {
        class RadiateFace;
    }
    namespace Features
    {
        class RadiateFaceBuilder;
    }
    namespace Features
    {
        class RapidSurface;
    }
    namespace Features
    {
        class RapidSurfaceBuilder;
    }
    namespace Features
    {
        class RasterImage;
    }
    namespace Features
    {
        class ReferenceMapperBuilder;
    }
    namespace Features
    {
        class RefitFace;
    }
    namespace Features
    {
        class RefitFaceBuilder;
    }
    namespace Features
    {
        class RemoveParametersBuilder;
    }
    namespace Features
    {
        class ReorderBlends;
    }
    namespace Features
    {
        class ReorderBlendsBuilder;
    }
    namespace Features
    {
        class ReplaceBlend;
    }
    namespace Features
    {
        class ReplaceBlendBuilder;
    }
    namespace Features
    {
        class ReplaceFaceBuilder;
    }
    namespace Features
    {
        class ReplaceFeatureBuilder;
    }
    namespace Features
    {
        class ResizeBlendBuilder;
    }
    namespace Features
    {
        class ResizeChamfer;
    }
    namespace Features
    {
        class ResizeChamferBuilder;
    }
    namespace Features
    {
        class ResizeFaceBuilder;
    }
    namespace Features
    {
        class ResizeHole;
    }
    namespace Features
    {
        class ResizeHoleBuilder;
    }
    namespace Features
    {
        class ResizePattern;
    }
    namespace Features
    {
        class ResizePatternBuilder;
    }
    namespace Features
    {
        class ResizePlaneBuilder;
    }
    namespace Features
    {
        class RevolveBuilder;
    }
    namespace Features
    {
        class RibbonBuilder;
    }
    namespace Features
    {
        class RuledBuilder;
    }
    namespace Features
    {
        class ScaleBuilder;
    }
    namespace Features
    {
        class SectionCurveBuilder;
    }
    namespace Features
    {
        class SectionEdit;
    }
    namespace Features
    {
        class SectionEditBuilder;
    }
    namespace Features
    {
        class SectionInertiaAnalysis;
    }
    namespace Features
    {
        class SectionInertiaAnalysisBuilder;
    }
    namespace Features
    {
        class SectionSurface;
    }
    namespace Features
    {
        class SectionSurfaceBuilder;
    }
    namespace Features
    {
        class SectionSurfaceBuilderEx;
    }
    namespace Features
    {
        class SewBuilder;
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class AeroSheetmetalManager;
        }
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class SheetmetalManager;
        }
    }
    namespace Features
    {
        class ShellBuilder;
    }
    namespace Features
    {
        class ShellFace;
    }
    namespace Features
    {
        class ShellFaceBuilder;
    }
    namespace Features
    {
        class ShipCollection;
    }
    namespace Features
    {
        class ShowRelatedFacesBuilder;
    }
    namespace Features
    {
        class SilhouetteFlange;
    }
    namespace Features
    {
        class SilhouetteFlangeBuilder;
    }
    namespace Features
    {
        class SketchConversionReport;
    }
    namespace Features
    {
        class SketchFitCurveBuilder;
    }
    namespace Features
    {
        class SketchSplineBuilder;
    }
    namespace Features
    {
        class SmoothSpline;
    }
    namespace Features
    {
        class SmoothSplineBuilder;
    }
    namespace Features
    {
        class SnipSurface;
    }
    namespace Features
    {
        class SnipSurfaceBuilder;
    }
    namespace Features
    {
        class Sphere;
    }
    namespace Features
    {
        class SphereBuilder;
    }
    namespace Features
    {
        class SphericalCorner;
    }
    namespace Features
    {
        class SphericalCornerBuilder;
    }
    namespace Features
    {
        class SplitBody;
    }
    namespace Features
    {
        class SplitBodyBuilder;
    }
    namespace Features
    {
        class StructureDesignCollection;
    }
    namespace Features
    {
        class StudioSpline;
    }
    namespace Features
    {
        class StudioSplineBuilder;
    }
    namespace Features
    {
        class StudioSplineBuilderEx;
    }
    namespace Features
    {
        class StudioSurfaceBuilder;
    }
    namespace Features
    {
        class StudioXform;
    }
    namespace Features
    {
        class StudioXformBuilder;
    }
    namespace Features
    {
        class StudioXformBuilderEx;
    }
    namespace Features
    {
        class StyledBlend;
    }
    namespace Features
    {
        class StyledBlendBuilder;
    }
    namespace Features
    {
        class StyledCorner;
    }
    namespace Features
    {
        class StyledCornerBuilder;
    }
    namespace Features
    {
        class StyledSweepBuilder;
    }
    namespace Features
    {
        class SweepAlongGuide;
    }
    namespace Features
    {
        class SweepAlongGuideBuilder;
    }
    namespace Features
    {
        class SweepFeatureCollection;
    }
    namespace Features
    {
        class Swept;
    }
    namespace Features
    {
        class SweptBuilder;
    }
    namespace Features
    {
        class Symmetric;
    }
    namespace Features
    {
        class SymmetricBuilder;
    }
    namespace Features
    {
        class SynchronousCurveCollection;
    }
    namespace Features
    {
        class SynchronousEdgeCollection;
    }
    namespace Features
    {
        class Tangent;
    }
    namespace Features
    {
        class TangentBuilder;
    }
    namespace Features
    {
        class Text;
    }
    namespace Features
    {
        class TextBuilder;
    }
    namespace Features
    {
        class ThickenBuilder;
    }
    namespace Features
    {
        class Thread;
    }
    namespace Features
    {
        class ThreadBuilder;
    }
    namespace Features
    {
        class ThroughCurveMeshBuilder;
    }
    namespace Features
    {
        class ThroughCurvesBuilder;
    }
    namespace Features
    {
        class ToolingCollection;
    }
    namespace Features
    {
        class ToolingFeatureCollection;
    }
    namespace Features
    {
        class TrimBody2;
    }
    namespace Features
    {
        class TrimBody2Builder;
    }
    namespace Features
    {
        class TrimBodyBuilder;
    }
    namespace Features
    {
        class TrimCurve;
    }
    namespace Features
    {
        class TrimCurve2;
    }
    namespace Features
    {
        class TrimCurve2Builder;
    }
    namespace Features
    {
        class TrimCurveBuilder;
    }
    namespace Features
    {
        class TrimExtendBuilder;
    }
    namespace Features
    {
        class TrimFeatureCollection;
    }
    namespace Features
    {
        class TrimSheetBuilder;
    }
    namespace Features
    {
        class TubeBuilder;
    }
    namespace Features
    {
        class Unsew;
    }
    namespace Features
    {
        class UnsewBuilder;
    }
    namespace Features
    {
        class UntrimBuilder;
    }
    namespace Features
    {
        class UserDefinedObjectFeatureBuilder;
    }
    namespace Features
    {
        class VarOffsetFace;
    }
    namespace Features
    {
        class VarOffsetFaceBuilder;
    }
    namespace Features
    {
        class VariableOffset;
    }
    namespace Features
    {
        class VariableOffsetBuilder;
    }
    namespace Features
    {
        class VarsweepBuilder;
    }
    namespace Features
    {
        class VehicleDesignCollection;
    }
    namespace Features
    {
        class VirtualBlendEdgeBuilder;
    }
    namespace Features
    {
        class VirtualCurve;
    }
    namespace Features
    {
        class VirtualCurveBuilder;
    }
    namespace Features
    {
        class WaveDatumBuilder;
    }
    namespace Features
    {
        class WavePointBuilder;
    }
    namespace Features
    {
        class WaveRoutingBuilder;
    }
    namespace Features
    {
        class WaveSketchBuilder;
    }
    namespace Features
    {
        class WrapBuilder;
    }
    namespace Features
    {
        class WrapGeometry;
    }
    namespace Features
    {
        class WrapGeometryBuilder;
    }
    namespace Features
    {
        class WrapUnwrap;
    }
    namespace GeometricUtilities
    {
        class ConvertFeatureGroupsToDesignGroupsBuilder;
    }
    namespace GeometricUtilities
    {
        class ConvertFeatureGroupsToModulesBuilder;
    }
    namespace GeometricUtilities
    {
        class MoveToGroupBuilder;
    }
    namespace GeometricUtilities
    {
        class NestModuleBuilder;
    }
    namespace GeometricUtilities
    {
        class PartModuleRelationshipBuilder;
    }
    namespace GeometricUtilities
    {
        class RenameLinkedPartModulePartBuilder;
    }
    namespace GeometricUtilities
    {
        class RenewFeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class UnnestModuleBuilder;
    }
    class HumanPosturePrediction;
    class HumanPosturePredictionBuilder;
    class NXObject;
    class Spline;
    namespace Weld
    {
        class WeldManager;
    }
    namespace Features
    {
        class FeatureCollectionImpl;
        /** Represents a collection of features  <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  FeatureCollection : public NXOpen::TaggedObjectCollection
        {
            /** Reorder operation type. */
            public: enum ReorderType
            {
                ReorderTypeInto/** into */ ,
                ReorderTypeBefore/** before */ ,
                ReorderTypeAfter/** after */ 
            };

            private: FeatureCollectionImpl * m_featurecollection_impl;
            private: NXOpen::BasePart* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit FeatureCollection(NXOpen::BasePart *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~FeatureCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Features::FeatureCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Features::Feature *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Features::FeatureCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_FEATURESEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_FEATURESEXPORT  void next();
                NXOpen::Features::FeatureCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a Mesh Surface feature builder  @return  MeshSurfaceBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MeshSurfaceBuilder * CreateMeshSurfaceBuilder
            (
                NXOpen::Features::Feature * meshSurf /** @link NXOpen::Features::Ruled NXOpen::Features::Ruled@endlink ,
                                                                               @link NXOpen::Features::ThroughCurves NXOpen::Features::ThroughCurves@endlink ,
                                                                               @link NXOpen::Features::ThroughCurveMesh NXOpen::Features::ThroughCurveMesh@endlink 
                                                                               to be edited */
            );
            /** Creates a Block feature builder  @return  BlockFeatureBuilder object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::BlockFeatureBuilder * CreateBlockFeatureBuilder
            (
                NXOpen::Features::Feature * block /** @link NXOpen::Features::Block NXOpen::Features::Block@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::CopyPasteBuilder NXOpen::Features::CopyPasteBuilder@endlink   @return  CopyPasteBuilder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CopyPasteBuilder * CreateCopyPasteBuilder
            (
                const std::vector<NXOpen::NXObject *> & features /** Features to be copy/paste  */
            );
            /** Creates a @link NXOpen::Features::ReferenceMapperBuilder NXOpen::Features::ReferenceMapperBuilder@endlink   @return  ReferenceMapperBuilder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ReferenceMapperBuilder * CreateReferenceMapperBuilder
            (
                NXOpen::Features::FeatureBuilder * booleanBuilderTag /** @link NXOpen::Features::FeatureBuilder NXOpen::Features::FeatureBuilder@endlink  */
            );
            /** Creates a Extrude builder  @return  ExtrudeBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtrudeBuilder * CreateExtrudeBuilder
            (
                NXOpen::Features::Feature * extrude /** @link NXOpen::Features::Extrude NXOpen::Features::Extrude@endlink  to be edited */
            );
            /** Creates a UserDefinedObjectFeature builder  @return  UserDefinedObjectFeatureBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::UserDefinedObjectFeatureBuilder * CreateUserDefinedObjectFeatureBuilder
            (
                NXOpen::Features::Feature * udoFeature /** @link NXOpen::Features::UserDefinedObjectFeature NXOpen::Features::UserDefinedObjectFeature@endlink  to be edited - may be NULL if creating a new feature. */
            );
            /** Creates a Revolve builder  @return  RevolveBuilder object 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RevolveBuilder * CreateRevolveBuilder
            (
                NXOpen::Features::Feature * revolve /** @link NXOpen::Features::RevolveBuilder NXOpen::Features::RevolveBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates an Emboss builder  @return  EmbossBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EmbossBuilder * CreateEmbossBuilder
            (
                NXOpen::Features::Feature * emboss /** @link NXOpen::Features::EmbossBuilder NXOpen::Features::EmbossBuilder@endlink  to be edited */
            );
            /** Creates a Offsetemboss builder  @return  OffsetEmbossBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetEmbossBuilder * CreateOffsetEmbossBuilder
            (
                NXOpen::Features::Feature * offsetEmboss /** @link NXOpen::Features::OffsetEmbossBuilder NXOpen::Features::OffsetEmbossBuilder@endlink  to be edited */
            );
            /** Creates a Divideface builder  @return  DividefaceBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::DividefaceBuilder * CreateDividefaceBuilder
            (
                NXOpen::Features::Feature * divideface /** @link NXOpen::Features::DividefaceBuilder NXOpen::Features::DividefaceBuilder@endlink 
                                                                       to be edited */
            );
            /** Creates a Overcrown feature builder  @return  OvercrownBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OvercrownBuilder * CreateOvercrownFeatureBuilder
            (
                NXOpen::Features::Feature * overcrown /** @link NXOpen::Features::OvercrownBuilder NXOpen::Features::OvercrownBuilder@endlink 
                                                                  to be edited, if NULL then create a new one. */
            );
            /** Creates a Curvelength builder  @return  CurveLengthBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CurveLengthBuilder * CreateCurvelengthBuilder
            (
                NXOpen::Features::Feature * curvelength /** @link NXOpen::Features::CurveLengthBuilder NXOpen::Features::CurveLengthBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Datum Axis feature builder  @return  DatumAxisBuilder object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: NXOpen::Features::DatumAxisBuilder * CreateDatumAxisBuilder
            (
                NXOpen::Features::Feature * datumAxis /** @link NXOpen::Features::DatumAxisFeature NXOpen::Features::DatumAxisFeature@endlink 
                                                                   to be edited */
            );
            /** Creates a Datum Plane feature builder  @return  DatumPlaneBuilder object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::DatumPlaneBuilder * CreateDatumPlaneBuilder
            (
                NXOpen::Features::Feature * dplane /** @link NXOpen::Features::DatumPlaneFeature NXOpen::Features::DatumPlaneFeature@endlink 
                                                               to be edited */
            );
            /** Creates a Resize Datum Plane feature builder  @return  ResizePlaneBuilder object 
             <br>  Created in NX6.0.3.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ResizePlaneBuilder * CreateResizePlaneBuilder
            (
                NXOpen::Features::Feature * resizePlane /** @link NXOpen::Features::DatumPlaneFeature NXOpen::Features::DatumPlaneFeature@endlink 
                                                               to be edited */
            );
            /** Creates a Hole feature builder  @return  HoleFeatureBuilder object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::HoleFeatureBuilder * CreateHoleFeatureBuilder
            (
                NXOpen::Features::Feature * hole /** @link NXOpen::Features::Hole NXOpen::Features::Hole@endlink  to be edited */
            );
            /** Creates a Relative Positioning Object builder  @return  RPOBuilder object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RPOBuilder * CreateRpoBuilder
            (
                NXOpen::Features::Feature * rpo /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be repositioned */
            );
            /** Creates a Chamfer feature builder  @return  ChamferBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ChamferBuilder * CreateChamferBuilder
            (
                NXOpen::Features::Feature * chamfer /** Chamfer
                                                             to be edited, if NULL then create a new one */
            );
            /** Creates a Edge Blend feature builder  @return  EdgeBlendBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EdgeBlendBuilder * CreateEdgeBlendBuilder
            (
                NXOpen::Features::Feature * edgeblend /** @link NXOpen::Features::EdgeBlendBuilder NXOpen::Features::EdgeBlendBuilder@endlink 
                                                                     to be edited, if NULL then create a new one */
            );
            /** Creates a unite feature.  @return  Array of boolean features 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateUniteFeature
            (
                NXOpen::Body * targetBody /** Target body */,
                bool retainTargetBody /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & toolBodies /** Tool bodies */,
                bool retainToolBodies /** Retain option for tool bodies */,
                bool allowNonAssociativeBoolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* nonAssociativeBoolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterizedSolids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates a subtract feature.  @return  Array of boolean features 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateSubtractFeature
            (
                NXOpen::Body * targetBody /** Target body */,
                bool retainTargetBody /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & toolBodies /** Tool bodies */,
                bool retainToolBodies /** Retain option for tool bodies */,
                bool allowNonAssociativeBoolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* nonAssociativeBoolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterizedSolids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates an intersect feature.  @return  Array of boolean features 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateIntersectFeature
            (
                NXOpen::Body * targetBody /** Target body */,
                bool retainTargetBody /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & toolBodies /** Tool bodies */,
                bool retainToolBodies /** Retain option for tool bodies */,
                bool allowNonAssociativeBoolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* nonAssociativeBoolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterizedSolids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates a Varsweep feature builder  @return VarsweepBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::VarsweepBuilder * CreateVarsweepBuilder
            (
                NXOpen::Features::Feature * varsweep /** Varsweep to be edited */
            );
            /** Creates a Face Blend feature builder  @return  FaceBlendBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FaceBlendBuilder * CreateFaceBlendBuilder
            (
                NXOpen::Features::Feature * faceBlend /** @link NXOpen::Features::FaceBlendBuilder NXOpen::Features::FaceBlendBuilder@endlink  to be edited */
            );
            /** Returns all the features in the part. Note that this is a low level routine that can return additional features that are not browseable in the user interface. The order in which features are returned is not significant and may change  @return  Features in the part 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetFeatures
            (
            );
            /** Finds the @link  NXOpen::Features   NXOpen::Features @endlink  with the given identifier as recorded in a journal.
                An object may not return the same value as its JournalIdentifier in different versions of
                the software. However newer versions of the software should find the same object when
                FindObject is passed older versions of its journal identifier. In general, this method
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  Feature with this identifier 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the body you want */
            );
            /** Finds the @link  NXOpen::Features   NXOpen::Features @endlink  with the given identifier as recorded in a journal.
                An object may not return the same value as its JournalIdentifier in different versions of
                the software. However newer versions of the software should find the same object when
                FindObject is passed older versions of its journal identifier. In general, this method
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  Feature with this identifier 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Features::Feature * FindObject
            (
                const char * journalIdentifier /** Identifier of the body you want */
            );
            /** Suppress the given features 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SuppressFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be suppressed */
            );
            /** Unsuppress the given features  @return  Features which were not unsuppressed due to errors 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> UnsuppressFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be unsuppressed */
            );
            /** Snapshot the given features  @return  list of errors encountered during snapshot features 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::ErrorList * CreateSnapshotsOfFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features for snapshot */
            );
            /** Delete Snapshot of given feature
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void DeleteSnapshot
            (
                NXOpen::Features::Feature * feature /** Feature to delete snapshot of*/
            );
            /** Get the feature associated with an object  @return  Feature associated with object. Set to Null if no feature is associated to the object. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * GetAssociatedFeature
            (
                NXOpen::NXObject * object /** Object to find associated feature. */
            );
            /** Creates a human feature builder.  @return  HumanBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Features::HumanBuilder * CreateHumanBuilder
            (
                NXOpen::Features::Feature * human /** @link NXOpen::Features::Human NXOpen::Features::Human@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a human posture prediction builder.  @return  @link NXOpen::HumanPosturePredictionBuilder NXOpen::HumanPosturePredictionBuilder@endlink  object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanPosturePredictionBuilder * CreateHumanPosturePredictionBuilder
            (
                NXOpen::HumanPosturePrediction * posturePrediction /** @link NXOpen::HumanPosturePrediction NXOpen::HumanPosturePrediction@endlink  to be edited,
                                                                                                         if NULL then create a new one */
            );
            /** Creates an Offset Surface builder  @return  OffsetSurfaceBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetSurfaceBuilder * CreateOffsetSurfaceBuilder
            (
                NXOpen::Features::Feature * offsetSurface /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink 
                                                                            to be edited */
            );
            /** Creates a ribbon builder  @return  Features.RibbonBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RibbonBuilder * CreateRibbonBuilder
            (
                NXOpen::Features::Feature * ribbon /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::PatchBuilder NXOpen::Features::PatchBuilder@endlink   @return  PatchBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PatchBuilder * CreatePatchBuilder
            (
                NXOpen::Features::Feature * patch /** Patch Features to be edited */
            );
            /** Creates a Boolean builder  @return  BooleanBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BooleanBuilder * CreateBooleanBuilder
            (
                NXOpen::Features::BooleanFeature * booleanFeature /** @link NXOpen::Features::BooleanFeature NXOpen::Features::BooleanFeature@endlink  to be edited */
            );
            /** Creates a Boolean builder. Leverage body collectors if possible  @return  BooleanBuilder object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BooleanBuilder * CreateBooleanBuilderUsingCollector
            (
                NXOpen::Features::BooleanFeature * booleanFeature /** @link NXOpen::Features::BooleanFeature NXOpen::Features::BooleanFeature@endlink  to be edited */
            );
            /** Creates a trim body builder object. Use this method only for editing pre-NX7.5.0 trim body features.. 
                    Use @link CreateTrimBody2Builder CreateTrimBody2Builder@endlink  and 
                    @link NXOpen::Features::TrimBody2 NXOpen::Features::TrimBody2@endlink  to create and edit trim body features.  @return  Features.TrimBodyBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimBodyBuilder * CreateTrimBodyBuilder
            (
                NXOpen::Features::Feature * trimbodyFeat /** @link NXOpen::Features::TrimBody NXOpen::Features::TrimBody@endlink  to be edited */
            );
            /** Creates an Shell builder  @return  ShellBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ShellBuilder * CreateShellBuilder
            (
                NXOpen::Features::Feature * shell /** @link NXOpen::Features::ShellBuilder NXOpen::Features::ShellBuilder@endlink  to be edited */
            );
            /** Creates a Datum CSYS feature builder  @return  DatumCsysBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::DatumCsysBuilder * CreateDatumCsysBuilder
            (
                NXOpen::Features::Feature * datumCsys /** @link NXOpen::Features::DatumCsysBuilder NXOpen::Features::DatumCsysBuilder@endlink  to be edited */
            );
            /** Creates a draft builder  @return  DraftBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DraftBuilder * CreateDraftBuilder
            (
                NXOpen::Features::Feature * draft /** @link NXOpen::Features::DraftBuilder NXOpen::Features::DraftBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a raster image  @return  RasterImage object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : studio_visualize ("STUDIO VISUALIZE") */
            public: NXOpen::Features::RasterImage * CreateRasterImage
            (
                const NXOpen::Point3d & origin /** The origin for the raster image */,
                const NXOpen::Matrix3x3 & matrix /** The rotation matrix for the raster image */,
                double length /** Length of the image, given in the units parameter */,
                double height /** Height of the image, give in the units parameter */,
                const NXString & imageFileName /** Name of the image file to use.
                                                                      For now, it must be a .tif file */,
                double translucency /** 0.0 for no translucency, 1.0 for fully transparent */,
                NXOpen::Features::RasterImage::MaxTextureSize maximumTextureSize /** maximum texture size */ 
            );
            /** Creates a raster image  @return  RasterImage object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : studio_visualize ("STUDIO VISUALIZE") */
            NXOpen::Features::RasterImage * CreateRasterImage
            (
                const NXOpen::Point3d & origin /** The origin for the raster image */,
                const NXOpen::Matrix3x3 & matrix /** The rotation matrix for the raster image */,
                double length /** Length of the image, given in the units parameter */,
                double height /** Height of the image, give in the units parameter */,
                const char * imageFileName /** Name of the image file to use.
                                                                      For now, it must be a .tif file */,
                double translucency /** 0.0 for no translucency, 1.0 for fully transparent */,
                NXOpen::Features::RasterImage::MaxTextureSize maximumTextureSize /** maximum texture size */ 
            );
            /** Create a Master Cut builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MasterCutBuilder * CreateMasterCutBuilder
            (
                NXOpen::Features::Feature * masterCut /** @link NXOpen::Features::MasterCutBuilder NXOpen::Features::MasterCutBuilder@endlink  to be edited,
                                                                                 if NULL then create a new one  */
            );
            /** Creates an Offset In Face builder  @return  AOCSBuilder object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::AOCSBuilder * CreateAocsBuilder
            (
                NXOpen::Features::Feature * aocs /** @link NXOpen::Features::AOCSBuilder NXOpen::Features::AOCSBuilder@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::OffsetFaceBuilder NXOpen::Features::OffsetFaceBuilder@endlink   @return  OffsetFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetFaceBuilder * CreateOffsetFaceBuilder
            (
                NXOpen::Features::Feature * offsetface /** @link NXOpen::Features::OffsetFace NXOpen::Features::OffsetFace@endlink 
                                                                  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::Features::TubeBuilder NXOpen::Features::TubeBuilder@endlink   @return  TubeBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TubeBuilder * CreateTubeBuilder
            (
                NXOpen::Features::Feature * tube /** @link NXOpen::Features::TubeBuilder NXOpen::Features::TubeBuilder@endlink  to be edited */
            );
            /** Creates @link NXOpen::Features::MirrorFeatureBuilder NXOpen::Features::MirrorFeatureBuilder@endlink   @return  MirrorFeatureBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorFeatureBuilder * CreateMirrorFeatureBuilder
            (
                NXOpen::Features::Feature * mirrorFea /** @link NXOpen::Features::MirrorFeatureBuilder NXOpen::Features::MirrorFeatureBuilder@endlink  to be edited */
            );
            /** Creates @link NXOpen::Features::MirrorBuilder NXOpen::Features::MirrorBuilder@endlink   @return  @link NXOpen::Features::MirrorBuilder NXOpen::Features::MirrorBuilder@endlink  object 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorBuilder * CreateMirrorBuilder
            (
                NXOpen::Features::Mirror * mirrorFeature /** @link NXOpen::Features::Mirror NXOpen::Features::Mirror@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ScaleBuilder NXOpen::Features::ScaleBuilder@endlink   @return  ScaleBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ScaleBuilder * CreateScaleBuilder
            (
                NXOpen::Features::Feature * scale /** @link NXOpen::Features::Scale NXOpen::Features::Scale@endlink  to be edited */
            );
            /** Creates a Sew feature builder  @return  SewBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::SewBuilder * CreateSewBuilder
            (
                NXOpen::Features::Feature * sew /** @link NXOpen::Features::SewBuilder NXOpen::Features::SewBuilder@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SectionCurveBuilder NXOpen::Features::SectionCurveBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionCurveBuilder * CreateSectionCurveBuilder
            (
                NXOpen::Features::Feature * sectionCurves /** @link NXOpen::Features::SectionCurve NXOpen::Features::SectionCurve@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::IntersectionCurveBuilder NXOpen::Features::IntersectionCurveBuilder@endlink   @return  IntersectionCurveBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::IntersectionCurveBuilder * CreateIntersectionCurveBuilder
            (
                NXOpen::Features::Feature * intersectionCurve /** @link NXOpen::Features::IntersectionCurveBuilder NXOpen::Features::IntersectionCurveBuilder@endlink  to be edited */
            );
            /** Creates a Thicken feature builder  @return  ThickenBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ThickenBuilder * CreateThickenBuilder
            (
                NXOpen::Features::Feature * thicken /** @link NXOpen::Features::Thicken NXOpen::Features::Thicken@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::TrimExtendBuilder NXOpen::Features::TrimExtendBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::TrimExtendBuilder * CreateTrimExtendBuilder
            (
                NXOpen::Features::Feature * trimExtend /** @link NXOpen::Features::TrimExtend NXOpen::Features::TrimExtend@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::GeomcopyBuilder NXOpen::Features::GeomcopyBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GeomcopyBuilder * CreateGeomcopyBuilder
            (
                NXOpen::Features::Feature * geomcopy /** @link NXOpen::Features::Geomcopy NXOpen::Features::Geomcopy@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ProjectCurveBuilder NXOpen::Features::ProjectCurveBuilder@endlink   @return  ProjectCurveBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ProjectCurveBuilder * CreateProjectCurveBuilder
            (
                NXOpen::Features::Feature * projectCurve /** @link NXOpen::Features::ProjectCurve NXOpen::Features::ProjectCurve@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ExtractFaceBuilder NXOpen::Features::ExtractFaceBuilder@endlink   @return  Extract face builder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ExtractFaceBuilder * CreateExtractFaceBuilder
            (
                NXOpen::Features::Feature * copyFace /** CopyFace Feature to be edited */
            );
            /** Creates a @link NXOpen::Features::JoinCurvesBuilder NXOpen::Features::JoinCurvesBuilder@endlink   @return  JoinCurvesBuilder object
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::JoinCurvesBuilder * CreateJoinCurvesBuilder
            (
                NXOpen::Features::Feature * joinCurves /** @link NXOpen::Features::JoinCurves NXOpen::Features::JoinCurves@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a Studio Spline builder  @return  StudioSplineBuilder object 
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link NXOpen::Features::FeatureCollection::CreateStudioSplineBuilderEx NXOpen::Features::FeatureCollection::CreateStudioSplineBuilderEx@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use NXOpen::Features::FeatureCollection::CreateStudioSplineBuilderEx instead.") NXOpen::Features::StudioSplineBuilder * CreateStudioSplineBuilder
            (
                NXOpen::Features::StudioSpline * splineFeature /** @link NXOpen::Features::StudioSpline NXOpen::Features::StudioSpline@endlink  to be edited */
            );
            /** Creates a Curve On Surface feature builder  @return  CurveOnSurfaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CurveOnSurfaceBuilder * CreateCurveOnSurfaceBuilder
            (
                NXOpen::Features::CurveOnSurface * cosFeature /** @link NXOpen::Features::CurveOnSurface NXOpen::Features::CurveOnSurface@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::UntrimBuilder NXOpen::Features::UntrimBuilder@endlink   @return  Features.UntrimBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::UntrimBuilder * CreateUntrimBuilder
            (
                NXOpen::Features::Feature * untrim /** @link NXOpen::Features::Untrim NXOpen::Features::Untrim@endlink  to be edited */
            );
            /** Creates a Wavedatum Builder  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::WaveDatumBuilder * CreateWaveDatumBuilder
            (
                NXOpen::Features::Feature * wavedatum /** Wavedatum Features to be edited */
            );
            /** Creates a Wavesketch Builder  @return  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WaveSketchBuilder * CreateWaveSketchBuilder
            (
                NXOpen::Features::Feature * wavesketch /** Wavesketch Features to be edited */
            );
            /** Creates a @link NXOpen::Features::WaveRoutingBuilder NXOpen::Features::WaveRoutingBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WaveRoutingBuilder * CreateWaveRoutingBuilder
            (
                NXOpen::Features::Feature * waverouting /** Waverouting Features to be edited */
            );
            /** Creates a @link NXOpen::Features::WavePointBuilder NXOpen::Features::WavePointBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::WavePointBuilder * CreateWavePointBuilder
            (
                NXOpen::Features::Feature * wavepoint /** Wavepoint Features to be edited */
            );
            /** Creates a @link NXOpen::Features::TrimSheetBuilder NXOpen::Features::TrimSheetBuilder@endlink   @return  Trim Sheet Builder object
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimSheetBuilder * CreateTrimsheetBuilder
            (
                NXOpen::Features::Feature * trimSheet /** @link NXOpen::Features::TrimSheet NXOpen::Features::TrimSheet@endlink  to be edited,
                                                                            if NULL then create a new one*/
            );
            /** Creates a @link NXOpen::Features::CircularBlendCurveBuilder NXOpen::Features::CircularBlendCurveBuilder@endlink   @return  CircularBlendCurveBuilder object
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CircularBlendCurveBuilder * CreateCircularBlendCurveBuilder
            (
                NXOpen::Features::CircularBlendCurve * circularBlendCurve /** @link NXOpen::Features::CircularBlendCurve NXOpen::Features::CircularBlendCurve@endlink  to be edited,
                                                                                                     , if NULL then create a new one  */
            );
            /** Creates a Rapid Surfacing feature builder  @return  RapidSurfaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: NXOpen::Features::RapidSurfaceBuilder * CreateRapidSurfaceBuilder
            (
                NXOpen::Features::RapidSurface * rapidSurface /** @link NXOpen::Features::RapidSurface NXOpen::Features::RapidSurface@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::UnsewBuilder NXOpen::Features::UnsewBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::UnsewBuilder * CreateUnsewBuilder
            (
                NXOpen::Features::Unsew * unsew /** @link NXOpen::Features::Unsew NXOpen::Features::Unsew@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::MirrorBodyBuilder NXOpen::Features::MirrorBodyBuilder@endlink   @return  MirrorBodyBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::MirrorBodyBuilder * CreateMirrorBodyBuilder
            (
                NXOpen::Features::Feature * mirrorBody /** @link NXOpen::Features::MirrorBodyBuilder NXOpen::Features::MirrorBodyBuilder@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::DraftBodyBuilder NXOpen::Features::DraftBodyBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DraftBodyBuilder * CreateDraftBodyBuilder
            (
                NXOpen::Features::Feature * draftBody /** @link NXOpen::Features::DraftBody NXOpen::Features::DraftBody@endlink  to be edited */
            );
            /** Returns a list of features that generated update alerts during recent update  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetPartFeaturesWithNewAlerts
            (
            );
            /** Returns a list of all features from a given part that have update alerts  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetAllPartFeaturesWithAlerts
            (
            );
            /** Creates a @link NXOpen::Features::GlobalShapingBuilder NXOpen::Features::GlobalShapingBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingBuilder * CreateGlobalShapingBuilder
            (
                NXOpen::Features::GlobalShaping * globalShaping /** @link NXOpen::Features::GlobalShaping NXOpen::Features::GlobalShaping@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::TrimCurveBuilder NXOpen::Features::TrimCurveBuilder@endlink    @return  Trim Curve Builder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::TrimCurveBuilder * CreateTrimCurveBuilder
            (
                NXOpen::Features::TrimCurve * trimCurve /** @link NXOpen::Features::TrimCurve NXOpen::Features::TrimCurve@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::TrimCurveBuilder NXOpen::Features::TrimCurveBuilder@endlink    @return  Trim Curve Builder object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::TrimCurveBuilder * CreateTrimCurveBuilder
            (
                NXOpen::Spline * trimCurve /** The trimmed curve to be edited */
            );
            /** Creates a @link NXOpen::Features::OffsetCurveBuilder NXOpen::Features::OffsetCurveBuilder@endlink   @return  Offset Curve Builder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::OffsetCurveBuilder * CreateOffsetCurveBuilder
            (
                NXOpen::Features::Feature * offsetCurve /** @link NXOpen::Features::OffsetCurve NXOpen::Features::OffsetCurve@endlink  to be edited */
            );
            /** Delete all informational alerts from all the features in a given part
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteAllPartInformationalFeatureAlerts
            (
            );
            /** Creates a @link NXOpen::Features::ThroughCurveMeshBuilder NXOpen::Features::ThroughCurveMeshBuilder@endlink   @return  ThroughCurveMeshBuilder object
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ThroughCurveMeshBuilder * CreateThroughCurveMeshBuilder
            (
                NXOpen::Features::Feature * throughCurveMesh /** @link NXOpen::Features::ThroughCurveMesh NXOpen::Features::ThroughCurveMesh@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::Features::BridgeCurveBuilder NXOpen::Features::BridgeCurveBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Features::FeatureCollection::CreateBridgeCurveBuilderEx NXOpen::Features::FeatureCollection::CreateBridgeCurveBuilderEx@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Features::FeatureCollection::CreateBridgeCurveBuilderEx instead.") NXOpen::Features::BridgeCurveBuilder * CreateBridgeCurveBuilder
            (
                NXOpen::Features::Feature * bridgeCurve /** @link NXOpen::Features::BridgeCurve NXOpen::Features::BridgeCurve@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SweptBuilder NXOpen::Features::SweptBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SweptBuilder * CreateSweptBuilder
            (
                NXOpen::Features::Swept * swept /** @link NXOpen::Features::Swept NXOpen::Features::Swept@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::CylinderBuilder NXOpen::Features::CylinderBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::CylinderBuilder * CreateCylinderBuilder
            (
                NXOpen::Features::Feature * cylinder /** @link NXOpen::Features::Cylinder NXOpen::Features::Cylinder@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::CompositeCurveBuilder NXOpen::Features::CompositeCurveBuilder@endlink   @return  Features.CompositeCurveBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::CompositeCurveBuilder * CreateCompositeCurveBuilder
            (
                NXOpen::Features::Feature * compositeCurve /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ThroughCurvesBuilder NXOpen::Features::ThroughCurvesBuilder@endlink   @return  ThroughCurvesBuilder object
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ThroughCurvesBuilder * CreateThroughCurvesBuilder
            (
                NXOpen::Features::Feature * throughCurves /** @link NXOpen::Features::ThroughCurves NXOpen::Features::ThroughCurves@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a Studio Surface Builder  @return  StudioSurfaceBuilder
                object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::StudioSurfaceBuilder * CreateStudioSurfaceBuilder
            (
                NXOpen::Features::Feature * studioSurface /** @link NXOpen::Features::StudioSurface NXOpen::Features::StudioSurface@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SectionInertiaAnalysisBuilder NXOpen::Features::SectionInertiaAnalysisBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionInertiaAnalysisBuilder * CreateSectionInertiaAnalysisBuilder
            (
                NXOpen::Features::SectionInertiaAnalysis * sectionInertiaAnalysis /** @link NXOpen::Features::SectionInertiaAnalysis NXOpen::Features::SectionInertiaAnalysis@endlink  to be edited */
            );
            /** Returns if a @link NXOpen::Features::MasterCutBuilder NXOpen::Features::MasterCutBuilder@endlink  is visible in specified @link NXOpen::CutView NXOpen::CutView@endlink  . @return  True if master cut is visible in view
                                                                 False otherwise 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool GetIsMasterCutVisibleInView
            (
                NXOpen::Features::Feature * masterCut /** @link NXOpen::Features::MasterCutBuilder NXOpen::Features::MasterCutBuilder@endlink  to be tested */,
                NXOpen::CutView * view /** Cut view */
            );
            /** Creates a delete face builder, don't use it until nx502  @return  Features.DeleteFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::DeleteFaceBuilder * CreateDeleteFaceBuilder
            (
                NXOpen::Features::Feature * deleteFace /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a resize blend builder, don't use it until nx502  @return  Features.ResizeBlendBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ResizeBlendBuilder * CreateResizeBlendBuilder
            (
                NXOpen::Features::Feature * resizeBlend /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::PatchOpeningsBuilder NXOpen::Features::PatchOpeningsBuilder@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::PatchOpeningsBuilder * CreatePatchOpeningsBuilder
            (
                NXOpen::Features::Feature * patchOpenings /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Create a move face builder, don't use it until nx502  @return  Features.MoveFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MoveFaceBuilder * CreateMoveFaceBuilder
            (
                NXOpen::Features::Feature * moveFace /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates an offset region builder, don't use it until nx502  @return  Features.OffsetRegionBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetRegionBuilder * CreateOffsetRegionBuilder
            (
                NXOpen::Features::Feature * offsetRegion /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a pattern face builder, don't use it until nx502  @return  Features.PatternFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::PatternFaceBuilder * CreatePatternFaceBuilder
            (
                NXOpen::Features::Feature * patternFace /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a resize face builder, don't use it until nx502  @return  Features.ResizeFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ResizeFaceBuilder * CreateResizeFaceBuilder
            (
                NXOpen::Features::Feature * resizeFace /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a replace face builder, don't use it until nx502  @return  Features.ReplaceFaceBuilder object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ReplaceFaceBuilder * CreateReplaceFaceBuilder
            (
                NXOpen::Features::Feature * replaceFace /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a Ruled Surface builder  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RuledBuilder * CreateRuledBuilder
            (
                NXOpen::Features::Feature * ruled /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::NSidedSurfaceBuilder NXOpen::Features::NSidedSurfaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::NSidedSurfaceBuilder * CreateNSidedSurfaceBuilder
            (
                NXOpen::Features::NSidedSurface * nsidedSurface /** @link NXOpen::Features::NSidedSurface NXOpen::Features::NSidedSurface@endlink  to be edited */
            );
            /** Create a section surface  @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::FeatureCollection::CreateSectionSurfaceBuilderEx NXOpen::Features::FeatureCollection::CreateSectionSurfaceBuilderEx@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::FeatureCollection::CreateSectionSurfaceBuilderEx instead.") NXOpen::Features::SectionSurfaceBuilder * CreateSectionSurfaceBuilder
            (
                NXOpen::Features::SectionSurface * sectionSurface /** @link NXOpen::Features::SectionSurface NXOpen::Features::SectionSurface@endlink  to be edited */
            );
            /** Creates a coplanar builder, don't use it until nx6  @return  Features.CoplanarBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::CoplanarBuilder * CreateCoplanarBuilder
            (
                NXOpen::Features::Feature * coplanar /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SnipSurfaceBuilder NXOpen::Features::SnipSurfaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::SnipSurfaceBuilder * CreateSnipSurfaceBuilder
            (
                NXOpen::Features::SnipSurface * snipSurface /** @link NXOpen::Features::SnipSurface NXOpen::Features::SnipSurface@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::LinearDimensionBuilder NXOpen::Features::LinearDimensionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::LinearDimensionBuilder * CreateLinearDimensionBuilder
            (
                NXOpen::Features::LinearDimension * linearDimension /** @link NXOpen::Features::LinearDimension NXOpen::Features::LinearDimension@endlink  to be edited */
            );
            /** Creates an Enlarge builder  @return  EnlargeBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: NXOpen::Features::EnlargeBuilder * CreateEnlargeBuilder
            (
                NXOpen::Features::Enlarge * enlargeFeature /** @link NXOpen::Features::Enlarge NXOpen::Features::Enlarge@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::LawExtensionBuilder NXOpen::Features::LawExtensionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::LawExtensionBuilder * CreateLawExtensionBuilder
            (
                NXOpen::Features::LawExtension * lawExtension /** @link NXOpen::Features::LawExtension NXOpen::Features::LawExtension@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::LawExtensionBuilderEx NXOpen::Features::LawExtensionBuilderEx@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::LawExtensionBuilderEx * CreateLawExtensionBuilderEx
            (
                NXOpen::Features::Feature * lawExtension /** @link NXOpen::Features::LawExtensionEx NXOpen::Features::LawExtensionEx@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::GuidedExtensionBuilderEx NXOpen::Features::GuidedExtensionBuilderEx@endlink   @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GuidedExtensionBuilderEx * CreateGuidedExtensionBuilderEx
            (
                NXOpen::Features::Feature * guidedExtension /** @link NXOpen::Features::GuidedExtensionEx NXOpen::Features::GuidedExtensionEx@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::FreeTransformerBuilder NXOpen::Features::FreeTransformerBuilder@endlink   @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FreeTransformerBuilder * CreateFreeTransformerBuilder
            (
                NXOpen::Features::Feature * freeTransformer /** @link NXOpen::Features::FreeTransformer NXOpen::Features::FreeTransformer@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::MeshTransformerBuilder NXOpen::Features::MeshTransformerBuilder@endlink   @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MeshTransformerBuilder * CreateMeshTransformerBuilder
            (
                NXOpen::Features::Feature * meshTransformer /** @link NXOpen::Features::MeshTransformer NXOpen::Features::MeshTransformer@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::CombinedProjectionBuilder NXOpen::Features::CombinedProjectionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CombinedProjectionBuilder * CreateCombinedProjectionBuilder
            (
                NXOpen::Features::CombinedProjection * combinedProjection /** @link NXOpen::Features::CombinedProjection NXOpen::Features::CombinedProjection@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::StyledSweepBuilder NXOpen::Features::StyledSweepBuilder@endlink   @return  Features.StyledSweepBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledSweepBuilder * CreateStyledSweepBuilder
            (
                NXOpen::Features::Feature * styledSweep /** @link NXOpen::Features::StyledSweep NXOpen::Features::StyledSweep@endlink  to be edited */
            );
            /** Creates a cut face builder  @return  Features.CutFaceBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::CutFaceBuilder * CreateCutFaceBuilder
            (
                NXOpen::Features::Feature * cutFace /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ConeBuilder NXOpen::Features::ConeBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ConeBuilder * CreateConeBuilder
            (
                NXOpen::Features::Cone * cone /** @link NXOpen::Features::Cone NXOpen::Features::Cone@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SphereBuilder NXOpen::Features::SphereBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SphereBuilder * CreateSphereBuilder
            (
                NXOpen::Features::Sphere * sphere /** @link NXOpen::Features::Sphere NXOpen::Features::Sphere@endlink  to be edited */
            );
            /** Creates a copy face builder  @return  Features.CopyFaceBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::CopyFaceBuilder * CreateCopyFaceBuilder
            (
                NXOpen::Features::Feature * copyFace /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a paste face builder  @return  Features.PasteFaceBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::PasteFaceBuilder * CreatePasteFaceBuilder
            (
                NXOpen::Features::Feature * pasteFace /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::PoleSmoothingBuilder NXOpen::Features::PoleSmoothingBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PoleSmoothingBuilder * CreatePoleSmoothingBuilder
            (
                NXOpen::Features::PoleSmoothing * poleSmoothing /** @link NXOpen::Features::PoleSmoothing NXOpen::Features::PoleSmoothing@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::AdmMoveFaceBuilder NXOpen::Features::AdmMoveFaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::AdmMoveFaceBuilder * CreateAdmMoveFaceBuilder
            (
                NXOpen::Features::AdmMoveFace * admMoveFace /** @link NXOpen::Features::AdmMoveFace NXOpen::Features::AdmMoveFace@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::WrapGeometryBuilder NXOpen::Features::WrapGeometryBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WrapGeometryBuilder * CreateWrapGeometryBuilder
            (
                NXOpen::Features::WrapGeometry * wrapGeometry /** @link NXOpen::Features::WrapGeometry NXOpen::Features::WrapGeometry@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::GroupFaceBuilder NXOpen::Features::GroupFaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::GroupFaceBuilder * CreateGroupFaceBuilder
            (
                NXOpen::Features::GroupFace * groupFace /** @link NXOpen::Features::GroupFace NXOpen::Features::GroupFace@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ColorFaceBuilder NXOpen::Features::ColorFaceBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ColorFaceBuilder * CreateColorFaceBuilder
            (
            );
            /** Creates a @link NXOpen::Features::VehicleDesign::SeatBeltAnchorageBuilder NXOpen::Features::VehicleDesign::SeatBeltAnchorageBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link Features::VehicleDesignCollection::CreateSeatBeltAnchorageBuilder Features::VehicleDesignCollection::CreateSeatBeltAnchorageBuilder@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use Features::VehicleDesignCollection::CreateSeatBeltAnchorageBuilder instead.") NXOpen::Features::FeatureBuilder * CreateSeatBeltAnchorageBuilder
            (
                NXOpen::Features::Feature * seatBeltAnchorage /** Feature to be edited */
            );
            /** Creates a @link NXOpen::Features::BoundedPlaneBuilder NXOpen::Features::BoundedPlaneBuilder@endlink   @return  Features.BoundedPlaneBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::BoundedPlaneBuilder * CreateBoundedPlaneBuilder
            (
                NXOpen::Features::BoundedPlane * boundedPlane /** @link NXOpen::Features::BoundedPlane NXOpen::Features::BoundedPlane@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::AssemblyCutBuilder NXOpen::Features::AssemblyCutBuilder@endlink   @return  Features.AssemblyCutBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AssemblyCutBuilder * CreateAssemblyCutBuilder
            (
                NXOpen::Features::AssemblyCut * assemblyCut /** @link NXOpen::Features::AssemblyCut NXOpen::Features::AssemblyCut@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::VehicleDesign::ReflectionDataBuilder NXOpen::Features::VehicleDesign::ReflectionDataBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::VehicleDesignCollection::CreateReflectionDataBuilder NXOpen::Features::VehicleDesignCollection::CreateReflectionDataBuilder@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::VehicleDesignCollection::CreateReflectionDataBuilder instead.") NXOpen::Features::FeatureBuilder * CreateReflectionDataBuilder
            (
                NXOpen::Features::Feature * reflectionData /** Feature to be edited */
            );
            /** Creates a @link NXOpen::Features::WrapBuilder NXOpen::Features::WrapBuilder@endlink   @return  WrapBuilder object
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WrapBuilder * CreateWrapBuilder
            (
                NXOpen::Features::WrapUnwrap * wrap /** @link NXOpen::Features::WrapUnwrap NXOpen::Features::WrapUnwrap@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::RemoveParametersBuilder NXOpen::Features::RemoveParametersBuilder@endlink   @return  Features.RemoveParametersBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::RemoveParametersBuilder * CreateRemoveParametersBuilder
            (
            );
            /** Creates a @link NXOpen::Features::MatchEdgeBuilder NXOpen::Features::MatchEdgeBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::MatchEdgeBuilder * CreateMatchEdgeBuilder
            (
                NXOpen::Features::MatchEdge * matchEdge /** @link NXOpen::Features::MatchEdge NXOpen::Features::MatchEdge@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::RadialDimensionBuilder NXOpen::Features::RadialDimensionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::RadialDimensionBuilder * CreateRadialDimensionBuilder
            (
                NXOpen::Features::RadialDimension * radialDimension /** @link NXOpen::Features::RadialDimension NXOpen::Features::RadialDimension@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::StyledBlendBuilder NXOpen::Features::StyledBlendBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledBlendBuilder * CreateStyledBlendBuilder
            (
                NXOpen::Features::StyledBlend * styledBlend /** @link NXOpen::Features::StyledBlend NXOpen::Features::StyledBlend@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::HolePackageBuilder NXOpen::Features::HolePackageBuilder@endlink   @return  
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::HolePackageBuilder * CreateHolePackageBuilder
            (
                NXOpen::Features::HolePackage * holePackage /** @link NXOpen::Features::HolePackage NXOpen::Features::HolePackage@endlink  to be edited */
            );
            /** Creates a Features.StudioXformBuilder  @return  
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Features::FeatureCollection::CreateStudioXformBuilderEx NXOpen::Features::FeatureCollection::CreateStudioXformBuilderEx@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Features::FeatureCollection::CreateStudioXformBuilderEx instead.") NXOpen::Features::StudioXformBuilder * CreateStudioXformBuilder
            (
                NXOpen::Features::StudioXform * studioXform /** @link NXOpen::Features::StudioXform NXOpen::Features::StudioXform@endlink  to be edited */
            );
            /** Creates a Features.StudioXformBuilderEx  @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StudioXformBuilderEx * CreateStudioXformBuilderEx
            (
                NXOpen::Features::StudioXform * studioXform1 /** @link NXOpen::Features::StudioXform NXOpen::Features::StudioXform@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SweepAlongGuideBuilder NXOpen::Features::SweepAlongGuideBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SweepAlongGuideBuilder * CreateSweepAlongGuideBuilder
            (
                NXOpen::Features::SweepAlongGuide * sweepAlongGuide /** @link NXOpen::Features::SweepAlongGuide NXOpen::Features::SweepAlongGuide@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ParallelBuilder NXOpen::Features::ParallelBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ParallelBuilder * CreateParallelBuilder
            (
                NXOpen::Features::Parallel * parallel /** @link NXOpen::Features::Parallel NXOpen::Features::Parallel@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::CoaxialBuilder NXOpen::Features::CoaxialBuilder@endlink   @return  Features.CoaxialBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::CoaxialBuilder * CreateCoaxialBuilder
            (
                NXOpen::Features::Coaxial * coaxial /** @link NXOpen::Features::Coaxial NXOpen::Features::Coaxial@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::PerpendicularBuilder NXOpen::Features::PerpendicularBuilder@endlink   @return  Features.PerpendicularBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::PerpendicularBuilder * CreatePerpendicularBuilder
            (
                NXOpen::Features::Perpendicular * perpendicular /** @link NXOpen::Features::Perpendicular NXOpen::Features::Perpendicular@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::TangentBuilder NXOpen::Features::TangentBuilder@endlink   @return  Features.TangentBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::TangentBuilder * CreateTangentBuilder
            (
                NXOpen::Features::Tangent * tangent /** @link NXOpen::Features::Tangent NXOpen::Features::Tangent@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::AdmResizeFaceBuilder NXOpen::Features::AdmResizeFaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::AdmResizeFaceBuilder * CreateAdmResizeFaceBuilder
            (
                NXOpen::Features::AdmResizeFace * admResizeFace /** @link NXOpen::Features::AdmResizeFace NXOpen::Features::AdmResizeFace@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::StyledCornerBuilder NXOpen::Features::StyledCornerBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledCornerBuilder * CreateStyledCornerBuilder
            (
                NXOpen::Features::StyledCorner * styledCorner /** @link NXOpen::Features::StyledCorner NXOpen::Features::StyledCorner@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::AdmOffsetRegionBuilder NXOpen::Features::AdmOffsetRegionBuilder@endlink   @return  Features.AdmOffsetRegionBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::AdmOffsetRegionBuilder * CreateAdmOffsetRegionBuilder
            (
                NXOpen::Features::AdmOffsetRegion * offsetRegion /** @link NXOpen::Features::AdmOffsetRegion NXOpen::Features::AdmOffsetRegion@endlink  to be edited */
            );
            /** Creates a mirror face builder  @return  Features.MirrorFaceBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::MirrorFaceBuilder * CreateMirrorFaceBuilder
            (
                NXOpen::Features::Feature * mirrorFace /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::PointSetBuilder NXOpen::Features::PointSetBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PointSetBuilder * CreatePointSetBuilder
            (
                NXOpen::Features::PointSet * pointSet /** @link NXOpen::Features::PointSet NXOpen::Features::PointSet@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::VehicleDesign::WindshieldDatumBuilder NXOpen::Features::VehicleDesign::WindshieldDatumBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::VehicleDesignCollection::CreateWindshieldDatumBuilder NXOpen::Features::VehicleDesignCollection::CreateWindshieldDatumBuilder@endlink   instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::VehicleDesignCollection::CreateWindshieldDatumBuilder  instead.") NXOpen::Features::FeatureBuilder * CreateWindshieldDatumBuilder
            (
                NXOpen::Features::Feature * windshieldDatum /** feature to be edited */
            );
            /** Creates a @link NXOpen::Features::VehicleDesign::VisionPlaneBuilder NXOpen::Features::VehicleDesign::VisionPlaneBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::VehicleDesignCollection::CreateVisionPlaneBuilder NXOpen::Features::VehicleDesignCollection::CreateVisionPlaneBuilder@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::VehicleDesignCollection::CreateVisionPlaneBuilder instead.") NXOpen::Features::FeatureBuilder * CreateVisionPlaneBuilder
            (
                NXOpen::Features::Feature * visionPlane /** feature to be edited */
            );
            /** Creates a @link NXOpen::Features::VehicleDesign::HoodVisibilityBuilder NXOpen::Features::VehicleDesign::HoodVisibilityBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::VehicleDesignCollection::CreateHoodVisibilityBuilder NXOpen::Features::VehicleDesignCollection::CreateHoodVisibilityBuilder@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::VehicleDesignCollection::CreateHoodVisibilityBuilder instead.") NXOpen::Features::FeatureBuilder * CreateHoodVisibilityBuilder
            (
                NXOpen::Features::Feature * hoodVisibility /** feature to be edited */
            );
            /** Creates a @link NXOpen::Features::VehicleDesign::PedestrianProtectionBuilder NXOpen::Features::VehicleDesign::PedestrianProtectionBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::VehicleDesignCollection::CreatePedestrianProtectionBuilder NXOpen::Features::VehicleDesignCollection::CreatePedestrianProtectionBuilder@endlink   instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::VehicleDesignCollection::CreatePedestrianProtectionBuilder  instead.") NXOpen::Features::FeatureBuilder * CreatePedestrianProtectionBuilder
            (
                NXOpen::Features::Feature * pedestrianProtection /** feature to be edited */
            );
            /** Stops model delay before reordering features
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SuspendModelDelayBeforeReorder
            (
            );
            /** Reorders the Feature with respect to the given feature 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void ReorderFeature
            (
                const std::vector<NXOpen::Features::Feature *> & features /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be reordered*/,
                NXOpen::Features::Feature * target /** Target feature */,
                NXOpen::Features::FeatureCollection::ReorderType beforeOrAfter /** Reorder Before/After*/
            );
            /** Restores model delay after reordering features
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void RestoreModelDelayAfterReorder
            (
            );
            /** Creates a @link NXOpen::Features::MirrorCurveBuilder NXOpen::Features::MirrorCurveBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorCurveBuilder * CreateMirrorCurveBuilder
            (
                NXOpen::Features::Feature * mirrorCurve /** @link NXOpen::Features::MirrorCurve NXOpen::Features::MirrorCurve@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::PromotionBuilder NXOpen::Features::PromotionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PromotionBuilder * CreatePromotionBuilder
            (
                NXOpen::Features::Promotion * promotion /** @link NXOpen::Features::Promotion NXOpen::Features::Promotion@endlink  to be edited */
            );
            /** Creates a RefitFaceBuilder  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RefitFaceBuilder * CreateRefitFaceBuilder
            (
                NXOpen::Features::RefitFace * refitFace /** @link NXOpen::Features::RefitFace NXOpen::Features::RefitFace@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::EditDimensionBuilder NXOpen::Features::EditDimensionBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::EditDimensionBuilder * CreateEditDimensionBuilder
            (
            );
            /** Creates a @link NXOpen::Features::AdaptiveShellBuilder NXOpen::Features::AdaptiveShellBuilder@endlink   @return  @link NXOpen::Features::AdaptiveShellBuilder NXOpen::Features::AdaptiveShellBuilder@endlink  object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::AdaptiveShellBuilder * CreateAdaptiveShellBuilder
            (
                NXOpen::Features::AdaptiveShell * shellFace /** @link NXOpen::Features::AdaptiveShell NXOpen::Features::AdaptiveShell@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ShellFaceBuilder NXOpen::Features::ShellFaceBuilder@endlink   @return  @link NXOpen::Features::ShellFaceBuilder NXOpen::Features::ShellFaceBuilder@endlink  object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ShellFaceBuilder * CreateShellFaceBuilder
            (
                NXOpen::Features::ShellFace * shellFace /** @link NXOpen::Features::ShellFace NXOpen::Features::ShellFace@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ChangeShellThicknessBuilder NXOpen::Features::ChangeShellThicknessBuilder@endlink   @return  @link NXOpen::Features::ChangeShellThicknessBuilder NXOpen::Features::ChangeShellThicknessBuilder@endlink  object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ChangeShellThicknessBuilder * CreateChangeShellThicknessBuilder
            (
                NXOpen::Features::ChangeShellThickness * shellFace /** @link NXOpen::Features::ChangeShellThickness NXOpen::Features::ChangeShellThickness@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::LinkedFacetBuilder NXOpen::Features::LinkedFacetBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::LinkedFacetBuilder * CreateLinkedFacetBuilder
            (
                NXOpen::Features::LinkedFacet * linkedFacet /** @link NXOpen::Features::LinkedFacet NXOpen::Features::LinkedFacet@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SilhouetteFlangeBuilder NXOpen::Features::SilhouetteFlangeBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::SilhouetteFlangeBuilder * CreateSilhouetteFlangeBuilder
            (
                NXOpen::Features::SilhouetteFlange * silhouetteFlange /** @link NXOpen::Features::SilhouetteFlange NXOpen::Features::SilhouetteFlange@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ReplaceFeatureBuilder NXOpen::Features::ReplaceFeatureBuilder@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ReplaceFeatureBuilder * CreateReplaceFeatureBuilder
            (
            );
            /** Creates a @link NXOpen::Features::PaintParametersBuilder NXOpen::Features::PaintParametersBuilder@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PaintParametersBuilder * CreatePaintParametersBuilder
            (
            );
            /** Creates a @link NXOpen::Features::SmoothSplineBuilder NXOpen::Features::SmoothSplineBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::SmoothSplineBuilder * CreateSmoothSplineBuilder
            (
                NXOpen::Features::SmoothSpline * smoothSpline /** @link NXOpen::Features::SmoothSpline NXOpen::Features::SmoothSpline@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SymmetricBuilder NXOpen::Features::SymmetricBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::SymmetricBuilder * CreateSymmetricBuilder
            (
                NXOpen::Features::Symmetric * symmetric /** @link NXOpen::Features::Symmetric NXOpen::Features::Symmetric@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::FeatureReplayBuilder NXOpen::Features::FeatureReplayBuilder@endlink   @return  Features.FeatureReplayBuilder object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FeatureReplayBuilder * CreateFeatureReplayBuilder
            (
            );
            /** Creates a @link NXOpen::Features::SplitBodyBuilder NXOpen::Features::SplitBodyBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SplitBodyBuilder * CreateSplitBodyBuilder
            (
                NXOpen::Features::SplitBody * splitBody /** @link NXOpen::Features::SplitBody NXOpen::Features::SplitBody@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SplitBodyBuilder NXOpen::Features::SplitBodyBuilder@endlink . Leverage body collectors if possible  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SplitBodyBuilder * CreateSplitBodyBuilderUsingCollector
            (
                NXOpen::Features::SplitBody * splitBody /** @link NXOpen::Features::SplitBody NXOpen::Features::SplitBody@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::TrimBody2Builder NXOpen::Features::TrimBody2Builder@endlink  for Trim Body
                  feature @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimBody2Builder * CreateTrimBody2Builder
            (
                NXOpen::Features::TrimBody2 * trimBody2 /** @link NXOpen::Features::TrimBody2 NXOpen::Features::TrimBody2@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::AngularDimBuilder NXOpen::Features::AngularDimBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::AngularDimBuilder * CreateAngularDimensionBuilder
            (
                NXOpen::Features::AngularDim * angularDimension /** @link NXOpen::Features::AngularDim NXOpen::Features::AngularDim@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SectionEditBuilder NXOpen::Features::SectionEditBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionEditBuilder * CreateSectionEditBuilder
            (
                NXOpen::Features::SectionEdit * sectionEdit /** @link NXOpen::Features::SectionEdit NXOpen::Features::SectionEdit@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::PullFaceBuilder NXOpen::Features::PullFaceBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::PullFaceBuilder * CreatePullFaceBuilder
            (
                NXOpen::Features::PullFace * pullFace /** @link NXOpen::Features::PullFace NXOpen::Features::PullFace@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::MidSurfaceByFacePairsBuilder NXOpen::Features::MidSurfaceByFacePairsBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MidSurfaceByFacePairsBuilder * CreateMidSurfaceByFacePairsBuilder
            (
                NXOpen::Features::Feature * midSurfaceByFacePairs /** @link NXOpen::Features::MidSurfaceByFacePairs NXOpen::Features::MidSurfaceByFacePairs@endlink  to be edited or a @link NXOpen::Features::MidSurfaceFacePair NXOpen::Features::MidSurfaceFacePair@endlink  */
            );
            /** Creates a @link NXOpen::Features::MidSurfaceUserDefinedBuilder NXOpen::Features::MidSurfaceUserDefinedBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MidSurfaceUserDefinedBuilder * CreateMidSurfaceUserDefinedBuilder
            (
                NXOpen::Features::MidSurfaceUserDefined * midsurfaceUserDefined /** @link NXOpen::Features::MidSurfaceUserDefined NXOpen::Features::MidSurfaceUserDefined@endlink  to be edited */
            );
            /** Creates @link NXOpen::Features::PatternFeatureBuilder NXOpen::Features::PatternFeatureBuilder@endlink   @return  PatternFeatureBuilder object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PatternFeatureBuilder * CreatePatternFeatureBuilder
            (
                NXOpen::Features::Feature * patternFeature /** @link NXOpen::Features::PatternFeatureBuilder NXOpen::Features::PatternFeatureBuilder@endlink  to be edited */
            );
            /** Creates @link NXOpen::Features::InstanceFeatureBuilder NXOpen::Features::InstanceFeatureBuilder@endlink   @return  @link NXOpen::Features::InstanceFeatureBuilder NXOpen::Features::InstanceFeatureBuilder@endlink  object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::InstanceFeatureBuilder * CreateInstanceFeatureBuilder
            (
                NXOpen::Features::InstanceFeature * instanceFeature /** @link NXOpen::Features::InstanceFeature NXOpen::Features::InstanceFeature@endlink  to be edited */
            );
            /** Creates @link NXOpen::Features::InstanceFeatureBuilder NXOpen::Features::InstanceFeatureBuilder@endlink  from multiple @link NXOpen::Features::InstanceFeature NXOpen::Features::InstanceFeature@endlink   @return  @link NXOpen::Features::InstanceFeatureBuilder NXOpen::Features::InstanceFeatureBuilder@endlink  object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::InstanceFeatureBuilder * CreateInstanceFeatureBuilder
            (
                const std::vector<NXOpen::Features::InstanceFeature *> & instanceFeatures /** array of @link NXOpen::Features::InstanceFeature NXOpen::Features::InstanceFeature@endlink  to be edited */,
                bool forClocking /** forclocking */ 
            );
            /** Creates a @link NXOpen::Features::VehicleDesign::VehicleCoordinateSystemBuilder NXOpen::Features::VehicleDesign::VehicleCoordinateSystemBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link Features::VehicleDesignCollection::CreateHoodVisibilityBuilder Features::VehicleDesignCollection::CreateHoodVisibilityBuilder@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") OR ug_body_design ("Body Design") OR nx_posture ("NX Jack Posture Prediction") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use Features::VehicleDesignCollection::CreateHoodVisibilityBuilder instead.") NXOpen::Features::FeatureBuilder * CreateVehicleCoordinateSystemBuilder
            (
                NXOpen::Features::Feature * vehicleCoordinateSystem /** feature to be edited */
            );
            /** Creates a @link NXOpen::Features::AestheticFaceBlendBuilder NXOpen::Features::AestheticFaceBlendBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::AestheticFaceBlendBuilder * CreateAestheticFaceBlendBuilder
            (
                NXOpen::Features::AestheticFaceBlend * aestheticFaceBlend /** @link NXOpen::Features::AestheticFaceBlend NXOpen::Features::AestheticFaceBlend@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::EdgeSymmetryBuilder NXOpen::Features::EdgeSymmetryBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::EdgeSymmetryBuilder * CreateEdgeSymmetryBuilder
            (
                NXOpen::Features::Feature * edgeSymmetry /** @link NXOpen::Features::EdgeSymmetry NXOpen::Features::EdgeSymmetry@endlink  to be edited. 
                                                                                  Accepts @link NXOpen::Features::MatchEdge NXOpen::Features::MatchEdge@endlink  type if
                                                                                  @link NXOpen::Features::MatchEdgeBuilder::Types NXOpen::Features::MatchEdgeBuilder::Types@endlink  is 
                                                                                  @link NXOpen::Features::MatchEdgeBuilder::TypesMatchEdgeToDatum NXOpen::Features::MatchEdgeBuilder::TypesMatchEdgeToDatum@endlink . 
                                                                                  In that case converts @link NXOpen::Features::MatchEdge NXOpen::Features::MatchEdge@endlink  to
                                                                                  @link NXOpen::Features::EdgeSymmetry NXOpen::Features::EdgeSymmetry@endlink  feature.*/
            );
            /** Creates a @link NXOpen::Features::ReplaceBlendBuilder NXOpen::Features::ReplaceBlendBuilder@endlink    @return  @link NXOpen::Features::ReplaceBlendBuilder  NXOpen::Features::ReplaceBlendBuilder @endlink  object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ReplaceBlendBuilder * CreateReplaceBlendBuilder
            (
                NXOpen::Features::ReplaceBlend * replaceBlend /** @link NXOpen::Features::ReplaceBlend NXOpen::Features::ReplaceBlend@endlink  to be edited */
            );
            /** Replace the given features with Independent Sketch 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SketchConversionReport * ReplaceWithIndependentSketch
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be replaced */
            );
            /** Creates a @link NXOpen::Features::MakeOffsetBuilder NXOpen::Features::MakeOffsetBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::MakeOffsetBuilder * CreateMakeOffsetBuilder
            (
                NXOpen::Features::MakeOffset * makeOffset /** @link NXOpen::Features::MakeOffset NXOpen::Features::MakeOffset@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::OptimizeFaceBuilder NXOpen::Features::OptimizeFaceBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::OptimizeFaceBuilder * CreateOptimizeFaceBuilder
            (
            );
            /** Creates a @link NXOpen::Features::ShowRelatedFacesBuilder NXOpen::Features::ShowRelatedFacesBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ShowRelatedFacesBuilder * CreateShowRelatedFacesBuilder
            (
            );
            /** Creates a @link NXOpen::Features::FixedBuilder NXOpen::Features::FixedBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::FixedBuilder * CreateFixedBuilder
            (
                NXOpen::Features::Fixed * makeFix /** @link NXOpen::Features::Fixed NXOpen::Features::Fixed@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::LabelChamferBuilder NXOpen::Features::LabelChamferBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::LabelChamferBuilder * CreateLabelChamferBuilder
            (
                NXOpen::Features::LabelChamfer * labelChamfer /** @link NXOpen::Features::LabelChamfer NXOpen::Features::LabelChamfer@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ResizeChamferBuilder NXOpen::Features::ResizeChamferBuilder@endlink   @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ResizeChamferBuilder * CreateResizeChamferBuilder
            (
                NXOpen::Features::ResizeChamfer * resizeChamfer /** @link NXOpen::Features::ResizeChamfer NXOpen::Features::ResizeChamfer@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::MapleBuilder NXOpen::Features::MapleBuilder@endlink   @return  
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link NXOpen::Features::FeatureCollection::CreateMathIntegrationBuilder NXOpen::Features::FeatureCollection::CreateMathIntegrationBuilder@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use NXOpen::Features::FeatureCollection::CreateMathIntegrationBuilder instead.") NXOpen::Features::MapleBuilder * CreateMapleBuilder
            (
                NXOpen::Features::Maple * maple /** @link NXOpen::Features::Maple NXOpen::Features::Maple@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::MathIntegrationBuilder NXOpen::Features::MathIntegrationBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MathIntegrationBuilder * CreateMathIntegrationBuilder
            (
                NXOpen::Features::MathIntegration * mathIntegration /** @link NXOpen::Features::MathIntegration NXOpen::Features::MathIntegration@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ConcaveFacesBuilder NXOpen::Features::ConcaveFacesBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ConcaveFacesBuilder * CreateConcaveFacesBuilder
            (
                NXOpen::Features::ConcaveFaces * concaveFaces /** @link NXOpen::Features::ConcaveFaces NXOpen::Features::ConcaveFaces@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::VirtualCurveBuilder NXOpen::Features::VirtualCurveBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::VirtualCurveBuilder * CreateVirtualCurveBuilder
            (
                NXOpen::Features::VirtualCurve * virtualCurve /** @link NXOpen::Features::VirtualCurve NXOpen::Features::VirtualCurve@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::VirtualBlendEdgeBuilder NXOpen::Features::VirtualBlendEdgeBuilder@endlink   @return  
             <br>  Created in NX7.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VirtualBlendEdgeBuilder * CreateVirtualBlendEdgeBuilder
            (
            );
            /** Creates a @link NXOpen::Features::IFormBuilder NXOpen::Features::IFormBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::IFormBuilder * CreateIformBuilder
            (
                NXOpen::Features::IForm * iform /** @link NXOpen::Features::IForm NXOpen::Features::IForm@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::LawCurveBuilder NXOpen::Features::LawCurveBuilder@endlink   @return  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::LawCurveBuilder * CreateLawCurveBuilder
            (
                NXOpen::Features::LawCurve * lawCurve /** @link NXOpen::Features::LawCurve NXOpen::Features::LawCurve@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::TextBuilder NXOpen::Features::TextBuilder@endlink   @return  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TextBuilder * CreateTextBuilder
            (
                NXOpen::Features::Text * text /** @link NXOpen::Features::Text NXOpen::Features::Text@endlink  to be edited */
            );
            /**Returns  the active feature group. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FeatureGroup * ActiveGroup
            (
            );
            /** Creates a @link NXOpen::Features::DeleteEdgeBuilder NXOpen::Features::DeleteEdgeBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DeleteEdgeBuilder * CreateDeleteEdgeBuilder
            (
                NXOpen::Features::DeleteEdge * deleteEdge /** @link NXOpen::Features::DeleteEdge NXOpen::Features::DeleteEdge@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::CopyPasteBuilder NXOpen::Features::CopyPasteBuilder@endlink   @return  CopyPasteBuilder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CopyPasteBuilder * CreateCopyPasteBuilder2
            (
                const std::vector<NXOpen::NXObject *> & features /** Features to be copy/paste  */
            );
            /** Creates a @link NXOpen::Features::ReorderBlendsBuilder NXOpen::Features::ReorderBlendsBuilder@endlink   @return  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ReorderBlendsBuilder * CreateReorderBlendsBuilder
            (
                NXOpen::Features::ReorderBlends * reorderBlends /** @link NXOpen::Features::ReorderBlends NXOpen::Features::ReorderBlends@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::IsoparametricCurvesBuilder NXOpen::Features::IsoparametricCurvesBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::IsoparametricCurvesBuilder * CreateIsoparametricCurvesBuilder
            (
                NXOpen::Features::IsoparametricCurves * isoparametricCurves /** @link NXOpen::Features::IsoparametricCurves NXOpen::Features::IsoparametricCurves@endlink  to be edited */
            );
            /** Converts to new feature groups 
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link NXOpen::Features::FeatureCollection::ConvertToSequentialFeatureGroups NXOpen::Features::FeatureCollection::ConvertToSequentialFeatureGroups@endlink  or @link NXOpen::Features::FeatureCollection::ConvertToFloatingFeatureGroups NXOpen::Features::FeatureCollection::ConvertToFloatingFeatureGroups@endlink  instead. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use NXOpen::Features::FeatureCollection::ConvertToSequentialFeatureGroups or NXOpen::Features::FeatureCollection::ConvertToFloatingFeatureGroups instead.") void ConvertToNewFeatureGroups
            (
            );
            /** Converts sequential feature groups to floating feature groups 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ConvertToFloatingFeatureGroups
            (
            );
            /** Converts floating feature groups to sequential feature groups 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ConvertToSequentialFeatureGroups
            (
            );
            /** Creates a @link NXOpen::Features::VariableOffsetBuilder NXOpen::Features::VariableOffsetBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::VariableOffsetBuilder * CreateVariableOffsetBuilder
            (
                NXOpen::Features::VariableOffset * variableOffset /** @link NXOpen::Features::VariableOffset NXOpen::Features::VariableOffset@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ExtensionBuilder NXOpen::Features::ExtensionBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::Features::ExtensionBuilder * CreateExtensionBuilder
            (
                NXOpen::Features::Extension * extension /** @link NXOpen::Features::Extension NXOpen::Features::Extension@endlink  to be edited */
            );
            /** Creates a Studio Spline builder  @return  StudioSplineBuilderEx object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::StudioSplineBuilderEx * CreateStudioSplineBuilderEx
            (
                NXOpen::NXObject * spline /** @link NXOpen::Features::StudioSpline NXOpen::Features::StudioSpline@endlink  or @link NXOpen::Spline NXOpen::Spline@endlink  to be edited */
            );
            /** Creates a Studio Spline builder for sketcher  @return  SketchSplineBuilder object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR geometric_tol ("GDT"), solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: NXOpen::Features::SketchSplineBuilder * CreateSketchSplineBuilder
            (
                NXOpen::Spline * spline /** @link NXOpen::Spline NXOpen::Spline@endlink  to be edited */
            );
            /** Creates a Studio Spline builder for drafting  @return  DraftingSplineBuilder object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DraftingSplineBuilder * CreateDraftingSplineBuilder
            (
                NXOpen::Spline * spline /** @link NXOpen::Spline NXOpen::Spline@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::BridgeSurfaceBuilder NXOpen::Features::BridgeSurfaceBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BridgeSurfaceBuilder * CreateBridgeSurfaceBuilder
            (
                NXOpen::Features::BridgeSurface * bridgeSurface /** @link NXOpen::Features::BridgeSurface NXOpen::Features::BridgeSurface@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::EditCrossSectionBuilder NXOpen::Features::EditCrossSectionBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::EditCrossSectionBuilder * CreateEditCrossSectionBuilder
            (
                NXOpen::Features::EditCrossSection * editCrossSection /** @link NXOpen::Features::EditCrossSection NXOpen::Features::EditCrossSection@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::LabelNotchBlendBuilder NXOpen::Features::LabelNotchBlendBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::LabelNotchBlendBuilder * CreateLabelNotchBlendBuilder
            (
                NXOpen::Features::LabelNotchBlend * labelNotchBlend /** @link NXOpen::Features::LabelNotchBlend NXOpen::Features::LabelNotchBlend@endlink  to be edited */
            );
            /** Sets the feature being edited with rollback 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditWithRollbackFeature
            (
                NXOpen::Features::Feature * feature /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited */
            );
            /** Sets whether mcf is allowed 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCanResetMcf
            (
                bool canResetMcf /** can reset mcf */ 
            );
            /** Creates a @link NXOpen::Features::PartModuleBuilder NXOpen::Features::PartModuleBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: NXOpen::Features::PartModuleBuilder * CreatePartModuleBuilder
            (
                NXOpen::Features::PartModule * partModule /** @link NXOpen::Features::PartModule NXOpen::Features::PartModule@endlink  to be edited */
            );
            /** Creates a @link NXOpen::GeometricUtilities::PartModuleRelationshipBuilder NXOpen::GeometricUtilities::PartModuleRelationshipBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXOpen::GeometricUtilities::PartModuleRelationshipBuilder * CreatePartModuleRelationshipBuilder
            (
                NXOpen::Features::PartModule * partModule /** @link NXOpen::Features::PartModule NXOpen::Features::PartModule@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::DeleteBodyBuilder NXOpen::Features::DeleteBodyBuilder@endlink   @return  DeleteBodyBuilder object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DeleteBodyBuilder * CreateDeleteBodyBuilder
            (
                NXOpen::Features::DeleteBody * deleteBody /** @link NXOpen::Features::DeleteBody NXOpen::Features::DeleteBody@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::IsolateFeatureBuilder NXOpen::Features::IsolateFeatureBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::IsolateFeatureBuilder * CreateIsolateFeatureBuilder
            (
                NXOpen::Features::IsolateFeature * isolateFeature /** isolate feature */ 
            );
            /** Creates a @link NXOpen::Features::HelixBuilder NXOpen::Features::HelixBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::HelixBuilder * CreateHelixBuilder
            (
                NXOpen::Features::Helix * helix /** @link NXOpen::Features::Helix NXOpen::Features::Helix@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ColorFeatureBuilder NXOpen::Features::ColorFeatureBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ColorFeatureBuilder * CreateColorFeatureBuilder
            (
            );
            /** Creates a @link NXOpen::Features::ColorFeatureGroupBuilder NXOpen::Features::ColorFeatureGroupBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ColorFeatureGroupBuilder * CreateColorFeatureGroupBuilder
            (
            );
            /** Creates a @link NXOpen::Features::BridgeCurveBuilderEx NXOpen::Features::BridgeCurveBuilderEx@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::BridgeCurveBuilderEx * CreateBridgeCurveBuilderEx
            (
                NXOpen::Features::BridgeCurve * bridgeCurve /** @link NXOpen::Features::BridgeCurve NXOpen::Features::BridgeCurve@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::FitCurveBuilder NXOpen::Features::FitCurveBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FitCurveBuilder * CreateFitCurveBuilder
            (
                NXOpen::Features::FitCurve * fitCurve /** @link NXOpen::Features::FitCurve NXOpen::Features::FitCurve@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SketchFitCurveBuilder NXOpen::Features::SketchFitCurveBuilder@endlink   @return  SketchFitCurveBuilder object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SketchFitCurveBuilder * CreateSketchFitCurveBuilder
            (
                NXOpen::Curve * fitCurve /** @link NXOpen::Curve NXOpen::Curve@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::EmbossBodyBuilder NXOpen::Features::EmbossBodyBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EmbossBodyBuilder * CreateEmbossBodyBuilder
            (
                NXOpen::Features::EmbossBody * embossBody /** @link NXOpen::Features::EmbossBody NXOpen::Features::EmbossBody@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::GeneralConicBuilder NXOpen::Features::GeneralConicBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::GeneralConicBuilder * CreateGeneralConicBuilder
            (
                NXOpen::Features::GeneralConic * generalConic /** @link NXOpen::Features::GeneralConic NXOpen::Features::GeneralConic@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::FitSurfaceBuilder NXOpen::Features::FitSurfaceBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::FitSurfaceBuilder * CreateFitSurfaceBuilder
            (
                NXOpen::Features::FitSurface * fitSurface /** @link NXOpen::Features::FitSurface NXOpen::Features::FitSurface@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::SphericalCornerBuilder NXOpen::Features::SphericalCornerBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SphericalCornerBuilder * CreateSphericalCornerBuilder
            (
                NXOpen::Features::SphericalCorner * sphericalCorner /** @link NXOpen::Features::SphericalCorner NXOpen::Features::SphericalCorner@endlink  to be edited */
            );
            /** Returns the feature that created this face  @return  The parent @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  of the input @link NXOpen::Face NXOpen::Face@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::Feature * GetParentFeatureOfFace
            (
                NXOpen::Face * face /** @link NXOpen::Face NXOpen::Face@endlink  whose parent feature you want */
            );
            /** Returns all features associated with this face  @return  The associated @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink s of the input @link NXOpen::Face NXOpen::Face@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> GetAssociatedFeaturesOfFace
            (
                NXOpen::Face * face /** @link NXOpen::Face NXOpen::Face@endlink  whose associated features you want */
            );
            /** Returns the features that created the faces of this edge. Typically the parent features of the 2 faces of the edge will be returned  @return  The parent @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink s of the input @link NXOpen::Edge NXOpen::Edge@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> GetParentFeaturesOfEdge
            (
                NXOpen::Edge * edge /** @link NXOpen::Edge NXOpen::Edge@endlink  whose parent features you want */
            );
            /** Returns all features that are associated with the faces of this edge  @return  The associated @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink s of the input @link NXOpen::Edge NXOpen::Edge@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> GetAssociatedFeaturesOfEdge
            (
                NXOpen::Edge * edge /** @link NXOpen::Edge NXOpen::Edge@endlink  whose associated features you want */
            );
            /** Returns the feature that created this body.  @return  The parent @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  of the input @link NXOpen::Body NXOpen::Body@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::Feature * GetParentFeatureOfBody
            (
                NXOpen::Body * body /** @link NXOpen::Body NXOpen::Body@endlink  whose parent features you want */
            );
            /** Returns all features that are associated with this body  @return  The associated @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink s of the input @link NXOpen::Body NXOpen::Body@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> GetAssociatedFeaturesOfBody
            (
                NXOpen::Body * body /** @link NXOpen::Body NXOpen::Body@endlink  whose associated features you want */
            );
            /** Creates a @link NXOpen::Features::SectionSurfaceBuilderEx NXOpen::Features::SectionSurfaceBuilderEx@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionSurfaceBuilderEx * CreateSectionSurfaceBuilderEx
            (
                NXOpen::Features::SectionSurface * sectionSurfaceEx /** @link NXOpen::Features::SectionSurface NXOpen::Features::SectionSurface@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::PatternFaceFeatureBuilder NXOpen::Features::PatternFaceFeatureBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::PatternFaceFeatureBuilder * CreatePatternFaceFeatureBuilder
            (
                NXOpen::Features::PatternFaceFeature * patternFaceFeature /** @link NXOpen::Features::PatternFaceFeature NXOpen::Features::PatternFaceFeature@endlink  to be edited */
            );
            /** Creates a @link NXOpen::GeometricUtilities::RenameLinkedPartModulePartBuilder NXOpen::GeometricUtilities::RenameLinkedPartModulePartBuilder@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::RenameLinkedPartModulePartBuilder * CreateRenameLinkedPartModulePartBuilder
            (
            );
            /** Creates a @link NXOpen::GeometricUtilities::ConvertFeatureGroupsToModulesBuilder NXOpen::GeometricUtilities::ConvertFeatureGroupsToModulesBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: NXOpen::GeometricUtilities::ConvertFeatureGroupsToModulesBuilder * CreateConvertFeatureGroupsToModulesBuilder
            (
            );

            /// \cond NX_NO_DOC 
            /** Creates a @link NXOpen::GeometricUtilities::ConvertFeatureGroupsToModulesBuilder NXOpen::GeometricUtilities::ConvertFeatureGroupsToModulesBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: NXOpen::GeometricUtilities::ConvertFeatureGroupsToDesignGroupsBuilder * CreateConvertFeatureGroupsToDesignGroupsBuilder
            (
            );

            /// \endcond 
            /** Creates a @link NXOpen::GeometricUtilities::NestModuleBuilder NXOpen::GeometricUtilities::NestModuleBuilder@endlink  
                 <br> 
                This API is now deprecated.
                Please use @link NXOpen::Features::FeatureCollection NXOpen::Features::FeatureCollection@endlink  instead.
                 <br> 
                 @return  Returns a @link NXOpen::GeometricUtilities::NestModuleBuilder NXOpen::GeometricUtilities::NestModuleBuilder@endlink  builder 
             <br>  @deprecated Deprecated in NX10.0.0.  Please use @link NXOpen::Features::FeatureCollection NXOpen::Features::FeatureCollection@endlink  instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  Please use NXOpen::Features::FeatureCollection instead.") NXOpen::GeometricUtilities::NestModuleBuilder * CreateNestModuleBuilder
            (
            );
            /** Creates a @link NXOpen::Features::PatternGeometryBuilder NXOpen::Features::PatternGeometryBuilder@endlink   @return  The builder for the feature class 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PatternGeometryBuilder * CreatePatternGeometryBuilder
            (
                NXOpen::Features::PatternGeometry * patternGeometry /** The feature class @link NXOpen::Features::PatternGeometry NXOpen::Features::PatternGeometry@endlink  */
            );
            /** Creates a @link NXOpen::GeometricUtilities::UnnestModuleBuilder NXOpen::GeometricUtilities::UnnestModuleBuilder@endlink  
                 <br> 
                This API is now deprecated.
                Please use @link NXOpen::Features::FeatureCollection NXOpen::Features::FeatureCollection@endlink  instead.
                 <br> 
                 @return  Returns a @link NXOpen::GeometricUtilities::UnnestModuleBuilder NXOpen::GeometricUtilities::UnnestModuleBuilder@endlink  builder 
             <br>  @deprecated Deprecated in NX10.0.0.  Please use @link NXOpen::Features::FeatureCollection NXOpen::Features::FeatureCollection@endlink  instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  Please use NXOpen::Features::FeatureCollection instead.") NXOpen::GeometricUtilities::UnnestModuleBuilder * CreateUnnestModuleBuilder
            (
            );
            /** Creates a @link NXOpen::Features::BlendPocketBuilder NXOpen::Features::BlendPocketBuilder@endlink   @return  BlendPocketBuilder object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::BlendPocketBuilder * CreateBlendPocketBuilder
            (
                NXOpen::Features::BlendPocket * blendPocket /** @link NXOpen::Features::BlendPocket NXOpen::Features::BlendPocket@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::AnalyzePocketBuilder NXOpen::Features::AnalyzePocketBuilder@endlink   @return  AnalyzePocketBuilder object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::AnalyzePocketBuilder * CreateAnalyzePocketBuilder
            (
                NXOpen::Features::AnalyzePocket * analyzePocket /** @link NXOpen::Features::AnalyzePocket NXOpen::Features::AnalyzePocket@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::OptimizeCurveBuilder NXOpen::Features::OptimizeCurveBuilder@endlink   @return  OptimizeCurveBuilder object
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OptimizeCurveBuilder * CreateOptimizeCurveBuilder
            (
            );
            /** Reorganizes the Feature with respect to the given feature across the part module 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: void ReorganizeFeature
            (
                const std::vector<NXOpen::Features::Feature *> & features /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be reorganized*/,
                NXOpen::Features::Feature * target /** Target feature */,
                NXOpen::Features::FeatureCollection::ReorderType beforeOrAfter /** Reorder Before/After*/
            );
            /** Delete all informational alerts from the features and if numFrecs is 0 then delete informational alerts from all features in the part 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteInformationalAlerts
            (
                const std::vector<NXOpen::NXObject *> & feature /** Array of feature on which information alerts are to be deleted */
            );
            /** Delete all warning alerts from the features and if numFrecs is 0 then delete warning alerts from all features in the part 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteWarningAlerts
            (
                const std::vector<NXOpen::NXObject *> & feature /** Array of feature on which warning alerts are to be deleted */
            );
            /** Creates a @link Features::FlowBlendBuilder Features::FlowBlendBuilder@endlink   @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : flow_blend_for_nx (" Flow Blend"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FlowBlendBuilder * CreateFlowBlendBuilder
            (
                NXOpen::Features::FlowBlend * flowBlend /** @link Features::FlowBlend Features::FlowBlend@endlink  to be edited */
            );
            /** Creates a @link Features::CustomFeatureBuilder Features::CustomFeatureBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CustomFeatureBuilder * CreateCustomFeatureBuilder
            (
                NXOpen::Features::Feature * customFeature /** @link Features::CustomFeature Features::CustomFeature@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::VarOffsetFaceBuilder NXOpen::Features::VarOffsetFaceBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::VarOffsetFaceBuilder * CreateVarOffsetFaceBuilder
            (
                NXOpen::Features::VarOffsetFace * varOffsetFace /** @link Features::VarOffsetFace Features::VarOffsetFace@endlink  to be edited */
            );
            /** Creates a @link NXOpen::GeometricUtilities::RenewFeatureBuilder NXOpen::GeometricUtilities::RenewFeatureBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::RenewFeatureBuilder * CreateRenewFeatureBuilder
            (
            );
            /** Creates a @link NXOpen::Features::EditWithRollbackManager NXOpen::Features::EditWithRollbackManager@endlink   @return  EditWithRollbackManager object
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EditWithRollbackManager * StartEditWithRollbackManager
            (
                NXOpen::Features::Feature * featureToEdit /** @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  to be edited*/,
                NXOpen::Session::UndoMarkId featureEditMark /** If any error occurs during edit, the system will undo to this mark*/
            );
            /** Creates a @link NXOpen::Features::TrimCurve2Builder NXOpen::Features::TrimCurve2Builder@endlink   @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimCurve2Builder * CreateTrimCurve2FeatureBuilder
            (
                NXOpen::Features::TrimCurve2 * trimCurve2Feature /** @link NXOpen::Features::TrimCurve2 NXOpen::Features::TrimCurve2@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::EmbedManagerBuilder NXOpen::Features::EmbedManagerBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EmbedManagerBuilder * CreateEmbedManagerBuilder
            (
            );
            /** Creates a @link NXOpen::Features::BodyByEquationBuilder NXOpen::Features::BodyByEquationBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BodyByEquationBuilder * CreateBodyByEquationBuilder
            (
                NXOpen::Features::BodyByEquation * facetBodyByEquation /** @link NXOpen::Features::BodyByEquation NXOpen::Features::BodyByEquation@endlink  to be edited */
            );
            /** Creates a new empty design group after a specified reference feature  @return  The new created design group 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: NXOpen::Features::Feature * InsertNewDesignGroup
            (
                NXOpen::Features::Feature * referenceFeature /** Reference feature to create new design group at relative location */,
                NXOpen::Features::FeatureCollection::ReorderType relativeLocation /** Insert new design group after/before referenceFeature */
            );
            /** Creates a @link NXOpen::Features::DeformDefinitionBuilder NXOpen::Features::DeformDefinitionBuilder@endlink   @return  The newly created deform definition builder. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DeformDefinitionBuilder * CreateDeformDefinitionBuilder
            (
            );

            /// \cond NX_NO_DOC 
            /** Creates a @link NXOpen::GeometricUtilities::MoveToGroupBuilder NXOpen::GeometricUtilities::MoveToGroupBuilder@endlink   @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: NXOpen::GeometricUtilities::MoveToGroupBuilder * CreateMoveToGroupBuilder
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a @link NXOpen::Features::DesignGroupBuilder NXOpen::Features::DesignGroupBuilder@endlink   @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: NXOpen::Features::DesignGroupBuilder * CreateDesignGroupBuilder
            (
                NXOpen::Features::DesignGroup * designGroup /** @link NXOpen::Features::DesignGroup NXOpen::Features::DesignGroup@endlink  to be edited */
            );

            /// \endcond 
            /** Creates a @link NXOpen::Features::MoveBodyBuilder NXOpen::Features::MoveBodyBuilder@endlink   @return  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MoveBodyBuilder * CreateMoveBodyBuilder
            (
                NXOpen::Features::MoveBody * moveBody /** @link NXOpen::Features::MoveBody NXOpen::Features::MoveBody@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::RadiateFaceBuilder NXOpen::Features::RadiateFaceBuilder@endlink   @return  Features.RadiateFaceBuilder object 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::RadiateFaceBuilder * CreateRadiateFaceBuilder
            (
                NXOpen::Features::RadiateFace * radiateFace /** @link NXOpen::Features::RadiateFace NXOpen::Features::RadiateFace@endlink  to be edited */
            );
            /** Creates a @link Features::ThreadBuilder Features::ThreadBuilder@endlink   @return  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ThreadBuilder * CreateThreadBuilder
            (
                NXOpen::Features::Thread * thread /** @link Features::Thread Features::Thread@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::ResizeHoleBuilder NXOpen::Features::ResizeHoleBuilder@endlink   @return  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ResizeHoleBuilder * CreateResizeHoleBuilder
            (
                NXOpen::Features::ResizeHole * editHole /** @link NXOpen::Features::ResizeHole NXOpen::Features::ResizeHole@endlink  to be edited */
            );
            /** Creates a @link Features::AlgorithmicFeatureBuilder Features::AlgorithmicFeatureBuilder@endlink   @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_algorithmic (" NX Algorithmic Modeling") */
            public: NXOpen::Features::AlgorithmicFeatureBuilder * CreateAlgorithmicFeatureBuilder
            (
                NXOpen::Features::Feature * feature /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::ResizePatternBuilder Features::ResizePatternBuilder@endlink   @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING"), solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::ResizePatternBuilder * CreateResizePatternBuilder
            (
                NXOpen::Features::ResizePattern * resizePattern /** @link Features::ResizePattern Features::ResizePattern@endlink  to be resized */
            );


            /** Returns the Straight Brake Sheetmetal Manager for this part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Features::SheetMetal::SheetmetalManager *SheetmetalManager();
            /** Returns the aerospace sheet metal manager for this part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Features::SheetMetal::AeroSheetmetalManager *AeroSheetmetalManager();
            /** Returns the DieCollection instance belonging to this part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Die::DieCollection *Dies();
            /** Returns the WeldManager for this part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Weld::WeldManager *WeldManager();
            /** Returns the AutomotiveCollection instance belonging to this part 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::Features::AutomotiveCollection *AutomotiveCollection();
            /** Returns the ShipCollection instance belonging to this part 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::Features::ShipCollection *ShipCollection();
            /** Returns the ToolingCollection instance belonging to this part 
             <br>  Created in NX8.5.0.  <br>  
            */
            public: NXOpen::Features::ToolingCollection *ToolingCollection();
            /** Returns the SynchronousEdgeCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::SynchronousEdgeCollection *SynchronousEdgeCollection();
            /** Returns the Sweep-like features collection belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::SweepFeatureCollection *SweepFeatureCollection();
            /** Returns the SynchronousCurveCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::SynchronousCurveCollection *SynchronousCurveCollection();
            /** Returns the VehicleDesignCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::VehicleDesignCollection *VehicleDesignCollection();
            /** Returns the DesignfeatureCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::DesignFeatureCollection *DesignFeatureCollection();
            /** Returns the FreeformCurveCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::FreeformCurveCollection *FreeformCurveCollection();
            /** Returns the FreeformSurfaceCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::FreeformSurfaceCollection *FreeformSurfaceCollection();
            /** Returns the TrimfeatureCollection instance belonging to this part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::Features::TrimFeatureCollection *TrimFeatureCollection();
            /** Returns the ToolingFeatureCollection instance belonging to this part 
             <br>  Created in NX10.0.0.  <br>  
            */
            public: NXOpen::Features::ToolingFeatureCollection *ToolingFeatureCollection();
            /** Returns the CustomAttributeCollection instance belonging to this part 
             <br>  Created in NX11.0.0.  <br>  
            */
            public: NXOpen::Features::CustomAttributeCollection *CustomAttributeCollection();
            /** Returns the AeroCollection instance belonging to this part 
             <br>  Created in NX10.0.0.  <br>  
            */
            public: NXOpen::Features::AeroCollection *AeroCollection();
            /** Returns the CurveFeatureCollection instance belonging to this part 
             <br>  Created in NX10.0.0.  <br>  
            */
            public: NXOpen::Features::CurveFeatureCollection *CurveFeatureCollection();
            /** Returns the GeodesicSketchCollection instance belonging to this part 
             <br>  Created in NX10.0.0.  <br>  
            */
            public: NXOpen::Features::GeodesicSketchCollection *GeodesicSketchCollection();
            /** Returns the CustomFeatureDataCollection instance belonging to this part 
             <br>  Created in NX11.0.0.  <br>  
            */
            public: NXOpen::Features::CustomFeatureDataCollection *CustomFeatureDataCollection();
            /** Returns the LatticeFeatureCollection instance belonging to this part 
             <br>  Created in NX11.0.2.  <br>  
            */
            public: NXOpen::Features::LatticeFeatureCollection *LatticeFeatureCollection();
            /** Returns the PrintCsysFeatureCollection instance belonging to this part 
             <br>  Created in NX12.0.1.  <br>  
            */
            public: NXOpen::Features::PrintCsysFeatureCollection *PrintCsysFeatureCollection();
            /** Returns the DetailfeatureCollection instance belonging to this part 
             <br>  Created in NX1899.0.0.  <br>  
            */
            public: NXOpen::Features::DetailFeatureCollection *DetailFeatureCollection();
            /** Returns the MorphMeshCollection instance belonging to this part 
             <br>  Created in NX1872.0.0.  <br>  
            */
            public: NXOpen::Features::MorphMeshCollection *MorphMeshCollection();
            /** Returns the StructureDesignCollection instance belonging to this part 
             <br>  Created in NX1899.0.0.  <br>  
            */
            public: NXOpen::Features::StructureDesignCollection *StructureDesignCollection();
            /** Returns the AVDACollection instance belonging to this part 
             <br>  Created in NX1953.0.0.  <br>  
            */
            public: NXOpen::Features::AVDACollection *AVDACollection();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
