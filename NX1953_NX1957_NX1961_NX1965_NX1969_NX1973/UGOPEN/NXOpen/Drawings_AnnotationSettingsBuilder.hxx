#ifndef NXOpen_DRAWINGS_ANNOTATIONSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_ANNOTATIONSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_AnnotationSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class AnnotationSettingsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drawings
    {
        class _AnnotationSettingsBuilderBuilder;
        class AnnotationSettingsBuilderImpl;
        /**
            Represents a @link Drawings::AnnotationSettingsBuilder Drawings::AnnotationSettingsBuilder@endlink .
            This class queries and sets settings specific to drawings data which will get converted to PMIs.
            
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  AnnotationSettingsBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** enum is used to list out different unit types */
            public: enum UnitsEnum
            {
                UnitsEnumUseTargetPartUnits/** use target part units */ ,
                UnitsEnumUseDrawingUnits/** use drawing units */ 
            };

            /** enum is used to list out annotation types */
            public: enum AnnotationTypeEnum
            {
                AnnotationTypeEnumDimension/** dimension */ ,
                AnnotationTypeEnumNote/** note */ ,
                AnnotationTypeEnumFeatureControlFrame/** feature control frame */ ,
                AnnotationTypeEnumDatumFeatureSymbol/** datum feature symbol */ ,
                AnnotationTypeEnumDatumTarget/** datum target */ ,
                AnnotationTypeEnumBalloon/** balloon */ ,
                AnnotationTypeEnumSurfaceFinishSymbol/** surface finish symbol */ ,
                AnnotationTypeEnumWeldSymbol/** weld symbol */ ,
                AnnotationTypeEnumCustomSymbol/** custom symbol */ ,
                AnnotationTypeEnumCenterLine/** center line */ ,
                AnnotationTypeEnumUserDefinedSymbol/** user defined symbol */ ,
                AnnotationTypeEnumMaxAnnotationYypes/** max annotation yypes */ 
            };

            private: AnnotationSettingsBuilderImpl * m_annotationsettingsbuilder_impl;
            private: friend class  _AnnotationSettingsBuilderBuilder;
            protected: AnnotationSettingsBuilder();
            public: ~AnnotationSettingsBuilder();
            /**Returns  the preserve hidden status 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool PreserveHiddenStatus
            (
            );
            /**Sets  the preserve hidden status 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPreserveHiddenStatus
            (
                bool preserveHiddenStatus /** preservehiddenstatus */ 
            );
            /**Returns  the preserve drafting layer  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool PreserveDraftingLayer
            (
            );
            /**Sets  the preserve drafting layer  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPreserveDraftingLayer
            (
                bool preserveDraftingLayer /** preservedraftinglayer */ 
            );
            /**Returns  the process objects hidden  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ProcessObjectsHidden
            (
            );
            /**Sets  the process objects hidden  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetProcessObjectsHidden
            (
                bool processObjectsHidden /** processobjectshidden */ 
            );
            /**Returns  the convert to original model view  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ConvertToOriginalModelView
            (
            );
            /**Sets  the convert to original model view  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetConvertToOriginalModelView
            (
                bool convertToOriginalModelView /** converttooriginalmodelview */ 
            );
            /**Returns  the units 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::AnnotationSettingsBuilder::UnitsEnum Units
            (
            );
            /**Sets  the units 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetUnits
            (
                NXOpen::Drawings::AnnotationSettingsBuilder::UnitsEnum units /** units */ 
            );
            /**Returns  the linear dimension tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double LinearDimensionTolerance
            (
            );
            /**Sets  the linear dimension tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLinearDimensionTolerance
            (
                double linearDimensionTolerance /** lineardimensiontolerance */ 
            );
            /** API used to save settings data 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SaveAnnotationType
            (
                NXOpen::Drawings::AnnotationSettingsBuilder::AnnotationTypeEnum annType /** anntype */ ,
                bool annValue /** annvalue */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
