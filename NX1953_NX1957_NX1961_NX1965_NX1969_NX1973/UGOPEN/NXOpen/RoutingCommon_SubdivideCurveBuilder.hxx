#ifndef NXOpen_ROUTINGCOMMON_SUBDIVIDECURVEBUILDER_HXX_INCLUDED
#define NXOpen_ROUTINGCOMMON_SUBDIVIDECURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     RoutingCommon_SubdivideCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/libnxopencpp_routingcommon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace RoutingCommon
    {
        class SubdivideCurveBuilder;
    }
    class Builder;
    class Curve;
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace RoutingCommon
    {
        class _SubdivideCurveBuilderBuilder;
        class SubdivideCurveBuilderImpl;
        /**
              * JA class for Subdivide Curve (Linear and Spline segments)
               <br> To create a new instance of this class, use @link NXOpen::RoutingCommon::BuilderFactory::CreateSubdivideCurveBuilder  NXOpen::RoutingCommon::BuilderFactory::CreateSubdivideCurveBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        NumberOfSegments </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGCOMMONEXPORT  SubdivideCurveBuilder : public NXOpen::Builder
        {
            /**
                    At Point: JA_ROUTINGCOMMON_SUBDIVIDE_CURVE_BUILDER_Types_AtPoint
                    Equal Segments: JA_ROUTINGCOMMON_SUBDIVIDE_CURVE_BUILDER_Types_EqualSegments
                    Arc Length Segments: JA_ROUTINGCOMMON_SUBDIVIDE_CURVE_BUILDER_Types_ArcLengthSegments
                    */
            public: enum Types
            {
                TypesAtPoint/** at point */ ,
                TypesEqualSegments/** equal segments */ ,
                TypesArcLengthSegments/** arc length segments */ 
            };

            private: SubdivideCurveBuilderImpl * m_subdividecurvebuilder_impl;
            private: friend class  _SubdivideCurveBuilderBuilder;
            protected: SubdivideCurveBuilder();
            public: ~SubdivideCurveBuilder();
            /**Returns  the subdivide type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::SubdivideCurveBuilder::Types Type
            (
            );
            /**Sets  the subdivide type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetType
            (
                NXOpen::RoutingCommon::SubdivideCurveBuilder::Types subdivideType /** subdividetype */ 
            );
            /**Returns  the segment select 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::RouteObjectCollector * SelectedSegment
            (
            );
            /**Returns  the subdivide at point 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * SubdivideAtPoint
            (
            );
            /**Returns  the start percentage 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * StartPercentage
            (
            );
            /**Returns  the end percentage 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * EndPercentage
            (
            );
            /**Returns  the arc length 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * ArcLength
            (
            );
            /**Returns  the number of segments equal segments 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int NumberOfSegments
            (
            );
            /**Sets  the number of segments equal segments 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetNumberOfSegments
            (
                int numberOfSegments /** numberofsegments */ 
            );
            /**Returns  the reverse direction 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Sets  the tangency toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCreateTangencySetting
            (
                bool createTangency /** Creates tangency at the point where the spline is subdivided by adding parallel extensions.*/
            );
            /**Returns  the tangency toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool CreateTangencySetting
            (
            );
            /** The result of subdivide path @return  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Curve *> GetSubdividedCurves
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
