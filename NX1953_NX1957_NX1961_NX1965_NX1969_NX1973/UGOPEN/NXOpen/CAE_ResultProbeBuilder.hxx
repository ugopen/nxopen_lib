#ifndef NXOpen_CAE_RESULTPROBEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_RESULTPROBEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResultProbeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_QueryCurveUsageOptions.hxx>
#include <NXOpen/CAE_Result.hxx>
#include <NXOpen/CAE_SelectGroupsBuilder.hxx>
#include <NXOpen/CAE_SimResultReference.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ResultProbeBuilder;
    }
    class Builder;
    namespace CAE
    {
        class QueryCurveUsageOptions;
    }
    namespace CAE
    {
        class SelectGroupsBuilder;
    }
    class TaggedObject;
    class Unit;
    namespace CAE
    {
        class _ResultProbeBuilderBuilder;
        class ResultProbeBuilderImpl;
        /** Result probe Builder <br> An instance of this class can not be obtained  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        QueryCurveUsageOptions.CurveUsage </term> <description> 
         
        UseVertices </description> </item> 

        <item><term> 
         
        QueryCurveUsageOptions.DistanceTolerance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        QueryCurveUsageOptions.ResultantCurveLocator </term> <description> 
         
        UseAsIs </description> </item> 

        <item><term> 
         
        QueryCurveUsageOptions.ResultantLocationTolerance </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ResultProbeBuilder : public NXOpen::Builder
        {
            /** Loadcase definition method*/
            public: enum LoadcaseSelection
            {
                LoadcaseSelectionFirst/** first */ ,
                LoadcaseSelectionLast/** last */ ,
                LoadcaseSelectionSpecifyIndex/** specify index */ ,
                LoadcaseSelectionAll/** all */ ,
                LoadcaseSelectionIgnore/** ignore */ ,
                LoadcaseSelectionNone/** none */ ,
                LoadcaseSelectionSpecifyRange/** specify range */ ,
                LoadcaseSelectionBetweenValues/** between values */ 
            };

            /** Loadcase combination types*/
            public: enum CombineAcrossLoadcases
            {
                CombineAcrossLoadcasesArithmeticMean/** arithmetic mean */ ,
                CombineAcrossLoadcasesAbsoluteMaximum/** absolute maximum */ ,
                CombineAcrossLoadcasesMaximum/** maximum */ ,
                CombineAcrossLoadcasesAbsoluteMinimum/** absolute minimum */ ,
                CombineAcrossLoadcasesMinimum/** minimum */ ,
                CombineAcrossLoadcasesSum/** sum */ ,
                CombineAcrossLoadcasesSignedAbsoluteMaximum/** signed absolute maximum */ ,
                CombineAcrossLoadcasesSignedAbsoluteMinimum/** signed absolute minimum */ ,
                CombineAcrossLoadcasesRss/** rss */ ,
                CombineAcrossLoadcasesRms/** rms */ ,
                CombineAcrossLoadcasesUseIterCombination/** use iter combination */ 
            };

            /** Super iteration definition method*/
            public: enum SuperIterType
            {
                SuperIterTypeNone/** none */ ,
                SuperIterTypeHarmonic/** harmonic */ ,
                SuperIterTypeRotationSpeed/** rotation speed */ ,
                SuperIterTypeDesignCycle/** design cycle */ ,
                SuperIterTypeAcoustic/** acoustic */ ,
                SuperIterTypeBoltSequence/** bolt sequence */ 
            };

            /** Iteration definition method*/
            public: enum IterationSelection
            {
                IterationSelectionFirst/** first */ ,
                IterationSelectionLast/** last */ ,
                IterationSelectionNeartoValue/** nearto value */ ,
                IterationSelectionSpecifyIndex/** specify index */ ,
                IterationSelectionAll/** all */ ,
                IterationSelectionSpecifyRange/** specify range */ ,
                IterationSelectionBetweenValues/** between values */ ,
                IterationSelectionNone/** none */ ,
                IterationSelectionAtValue/** at value */ ,
                IterationSelectionAtValues/** at values */ 
            };

            /** Iteration type filter*/
            public: enum IterationType
            {
                IterationTypeTime/** time */ ,
                IterationTypeFrequency/** frequency */ ,
                IterationTypeLoadFactor/** load factor */ ,
                IterationTypeEigenValue/** eigen value */ ,
                IterationTypeAll/** all */ 
            };

            /** Interpolation type filter*/
            public: enum Interpolation
            {
                InterpolationAmplitudePhase/** amplitude phase */ ,
                InterpolationRealImaginary/** real imaginary */ ,
                InterpolationRealImaginaryWithUnwrappedPhase/** real imaginary with unwrapped phase */ 
            };

            /** Iteration combination types*/
            public: enum CombineAcrossIterations
            {
                CombineAcrossIterationsArithmeticMean/** arithmetic mean */ ,
                CombineAcrossIterationsAbsoluteMaximum/** absolute maximum */ ,
                CombineAcrossIterationsMaximum/** maximum */ ,
                CombineAcrossIterationsAbsoluteMinimum/** absolute minimum */ ,
                CombineAcrossIterationsMinimum/** minimum */ ,
                CombineAcrossIterationsSum/** sum */ ,
                CombineAcrossIterationsSignedAbsoluteMaximum/** signed absolute maximum */ ,
                CombineAcrossIterationsSignedAbsoluteMinimum/** signed absolute minimum */ 
            };

            /** Type of objects where probe value will be calculated*/
            public: enum SelectionType
            {
                SelectionTypeEntireModel/** entire model */ ,
                SelectionTypeNodes/** nodes */ ,
                SelectionTypeElements/** elements */ ,
                SelectionTypePoints/** points */ ,
                SelectionTypeEdges/** edges */ ,
                SelectionTypeFaces/** faces */ ,
                SelectionTypeBodies/** bodies */ ,
                SelectionTypeQueryCurve/** query curve */ ,
                SelectionTypeNone/** none */ ,
                SelectionTypeGroup/** group */ ,
                SelectionTypeSelectionRecipe/** selection recipe */ 
            };

            /** Options to combine geometry value*/
            public: enum GeometryValue
            {
                GeometryValueArithmeticMean/** arithmetic mean */ ,
                GeometryValueMinimum/** minimum */ ,
                GeometryValueMaximum/** maximum */ ,
                GeometryValueSum/** sum */ ,
                GeometryValueWeightedAverage/** weighted average */ ,
                GeometryValueIntegral/** integral */ ,
                GeometryValueAbsoluteMaximum/** absolute maximum */ ,
                GeometryValueAbsoluteMinimum/** absolute minimum */ ,
                GeometryValueSignedAbsoluteMaximum/** signed absolute maximum */ ,
                GeometryValueSignedAbsoluteMinimum/** signed absolute minimum */ ,
                GeometryValueNone/** none */ ,
                GeometryValueRms/** rms */ ,
                GeometryValueRss/** rss */ ,
                GeometryValueWeightedRMS/** weighted rms */ ,
                GeometryValueWeightedRSS/** weighted rss */ 
            };

            /** Options to calculate @link CAE::ResultProbeBuilder::GeometryValueWeightedAverage CAE::ResultProbeBuilder::GeometryValueWeightedAverage@endlink  or 
                        @link CAE::ResultProbeBuilder::GeometryValueIntegral CAE::ResultProbeBuilder::GeometryValueIntegral@endlink  over elements on an edge*/
            public: enum EdgeIntegral
            {
                EdgeIntegralLength/** length */ ,
                EdgeIntegralArea/** area */ 
            };

            /** Options to calculate @link CAE::ResultProbeBuilder::GeometryValueWeightedAverage CAE::ResultProbeBuilder::GeometryValueWeightedAverage@endlink  or 
                        @link CAE::ResultProbeBuilder::GeometryValueIntegral CAE::ResultProbeBuilder::GeometryValueIntegral@endlink  over elements on an face*/
            public: enum FaceIntegral
            {
                FaceIntegralArea/** area */ ,
                FaceIntegralVolume/** volume */ 
            };

            /** Options to calculate @link CAE::ResultProbeBuilder::GeometryValueWeightedAverage CAE::ResultProbeBuilder::GeometryValueWeightedAverage@endlink  or 
                        @link CAE::ResultProbeBuilder::GeometryValueIntegral CAE::ResultProbeBuilder::GeometryValueIntegral@endlink  over elements*/
            public: enum GroupIntegral
            {
                GroupIntegralArea/** area */ ,
                GroupIntegralVolume/** volume */ 
            };

            /** Options to combine multiple geometry values*/
            public: enum CombineAcrossEntities
            {
                CombineAcrossEntitiesArithmeticMean/** arithmetic mean */ ,
                CombineAcrossEntitiesMinimum/** minimum */ ,
                CombineAcrossEntitiesMaximum/** maximum */ ,
                CombineAcrossEntitiesSum/** sum */ ,
                CombineAcrossEntitiesDifference/** difference */ ,
                CombineAcrossEntitiesWeightedAverage/** weighted average */ ,
                CombineAcrossEntitiesIntegral/** integral */ ,
                CombineAcrossEntitiesAbsoluteMaximum/** absolute maximum */ ,
                CombineAcrossEntitiesAbsoluteMinimum/** absolute minimum */ ,
                CombineAcrossEntitiesSignedAbsoluteMaximum/** signed absolute maximum */ ,
                CombineAcrossEntitiesSignedAbsoluteMinimum/** signed absolute minimum */ ,
                CombineAcrossEntitiesRms/** rms */ ,
                CombineAcrossEntitiesRss/** rss */ ,
                CombineAcrossEntitiesWeightedRMS/** weighted rms */ ,
                CombineAcrossEntitiesWeightedRSS/** weighted rss */ 
            };

            /** Options to combine multiple geometry values*/
            public: enum NodalCombination
            {
                NodalCombinationArithmeticMean/** arithmetic mean */ ,
                NodalCombinationMinimum/** minimum */ ,
                NodalCombinationMaximum/** maximum */ ,
                NodalCombinationSum/** sum */ 
            };

            /** Options to calculate Area or Volume Weighted Average over elements*/
            public: enum ElemIntegral
            {
                ElemIntegralArea/** area */ ,
                ElemIntegralVolume/** volume */ 
            };

            /** Options to handel errornious conditions*/
            public: enum ErrorHandling
            {
                ErrorHandlingFillzero/** fillzero */ ,
                ErrorHandlingSkip/** skip */ 
            };

            /** Options to calculate at values iterations*/
            public: enum IterationListSelOpt
            {
                IterationListSelOptLinearSweep/** linear sweep */ ,
                IterationListSelOptLogSweep/** log sweep */ 
            };

            /** Options to calculate interpolated iterations*/
            public: enum IterationListSweepOpt
            {
                IterationListSweepOptInterval/** interval */ ,
                IterationListSweepOptBase/** base */ ,
                IterationListSweepOptNumberOfSteps/** number of steps */ ,
                IterationListSweepOptStepValue/** step value */ 
            };

            /** Options to frequency packing*/
            public: enum FrequencyPackingOpt
            {
                FrequencyPackingOptOctave/** octave */ ,
                FrequencyPackingOptOneThirdOctave/** one third octave */ ,
                FrequencyPackingOptOneTwelfthOctave/** one twelfth octave */ ,
                FrequencyPackingOptSingleBand/** single band */ 
            };

            /** Options to band combination*/
            public: enum BandCombinationOpt
            {
                BandCombinationOptArithmeticMean/** arithmetic mean */ ,
                BandCombinationOptRms/** rms */ ,
                BandCombinationOptRss/** rss */ ,
                BandCombinationOptSum/** sum */ ,
                BandCombinationOptWeightedAverage/** weighted average */ ,
                BandCombinationOptIntegral/** integral */ ,
                BandCombinationOptWeightedRMS/** weighted rms */ ,
                BandCombinationOptWeightedRSS/** weighted rss */ 
            };

            private: ResultProbeBuilderImpl * m_resultprobebuilder_impl;
            private: friend class  _ResultProbeBuilderBuilder;
            protected: ResultProbeBuilder();
            public: ~ResultProbeBuilder();
            /**Returns  the probe name 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString ProbeName
            (
            );
            /**Sets  the probe name 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetProbeName
            (
                const NXString & probeName /** probename */ 
            );
            /**Sets  the probe name 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetProbeName
            (
                const char * probeName /** probename */ 
            );
            /** Returns the description 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXString> GetDescription
            (
            );
            /** Sets the description 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDescription
            (
                const std::vector<NXString> & description /** description */ 
            );
            /**Returns  the formula 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString Formula
            (
            );
            /**Sets  the formula 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFormula
            (
                const NXString & formula /** formula */ 
            );
            /**Sets  the formula 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetFormula
            (
                const char * formula /** formula */ 
            );
            /**Returns  the loadcase 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::LoadcaseSelection Loadcase
            (
            );
            /**Sets  the loadcase 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetLoadcase
            (
                NXOpen::CAE::ResultProbeBuilder::LoadcaseSelection loadcase /** loadcase */ 
            );
            /**Returns  the loadcase index 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int LoadcaseIndex
            (
            );
            /**Sets  the loadcase index 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetLoadcaseIndex
            (
                int loadcaseIndex /** loadcaseindex */ 
            );
            /**Returns  the iteration 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::IterationSelection Iteration
            (
            );
            /**Sets  the iteration 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIteration
            (
                NXOpen::CAE::ResultProbeBuilder::IterationSelection iteration /** iteration */ 
            );
            /**Returns  the iteration type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::IterationType IterationTypeOption
            (
            );
            /**Sets  the iteration type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIterationTypeOption
            (
                NXOpen::CAE::ResultProbeBuilder::IterationType iterationType /** iterationtype */ 
            );
            /**Returns  the iteration index 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int IterationIndex
            (
            );
            /**Sets  the iteration index 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIterationIndex
            (
                int iterationIndex /** iterationindex */ 
            );
            /**Returns  the start iter value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double StartIterValue
            (
            );
            /**Sets  the start iter value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetStartIterValue
            (
                double startIterValue /** startitervalue */ 
            );
            /**Returns  the end iter value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double EndIterValue
            (
            );
            /**Sets  the end iter value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEndIterValue
            (
                double endIterValue /** enditervalue */ 
            );
            /**Returns  the start iter index 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int StartIterIndex
            (
            );
            /**Sets  the start iter index 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetStartIterIndex
            (
                int startIterIndex /** startiterindex */ 
            );
            /**Returns  the end iter index 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int EndIterIndex
            (
            );
            /**Sets  the end iter index 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEndIterIndex
            (
                int endIterIndex /** enditerindex */ 
            );
            /**Returns  the iteration value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double IterNearValue
            (
            );
            /**Sets  the iteration value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIterNearValue
            (
                double iterValue /** itervalue */ 
            );
            /**Returns  the skip steps 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int SkipSteps
            (
            );
            /**Sets  the skip steps 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSkipSteps
            (
                int skipSteps /** skipsteps */ 
            );
            /**Returns  the combine geom 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool CombineAcrossIteration
            (
            );
            /**Sets  the combine geom 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCombineAcrossIteration
            (
                bool combineIteration /** combineiteration */ 
            );
            /**Returns  the combine option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::CombineAcrossIterations CombineIterOption
            (
            );
            /**Sets  the combine option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCombineIterOption
            (
                NXOpen::CAE::ResultProbeBuilder::CombineAcrossIterations combineOption /** combineoption */ 
            );
            /**Returns  the model selection type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::SelectionType ModelSelectionType
            (
            );
            /**Sets  the model selection type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetModelSelectionType
            (
                NXOpen::CAE::ResultProbeBuilder::SelectionType modelSelectionType /** modelselectiontype */ 
            );
            /** Sets the entity objects for extracting result data. Objects passed to this method 
                        are of the type defined by @link CAE::ResultProbeBuilder::ModelSelectionType CAE::ResultProbeBuilder::ModelSelectionType@endlink .
                        The types of objects allowed to be set are is defined by the
                        @link NXOpen::CAE::ResultProbeBuilder::SelectionType NXOpen::CAE::ResultProbeBuilder::SelectionType@endlink .
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEntityObjects
            (
                const std::vector<NXOpen::TaggedObject *> & entityObjs /** entityobjs */ 
            );
            /**Returns  the pick sequentially 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool PickSequentially
            (
            );
            /**Sets  the pick sequentially 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPickSequentially
            (
                bool pickSequentially /** picksequentially */ 
            );
            /**Returns  the geometry average value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::GeometryValue GeometryAverageValue
            (
            );
            /**Sets  the geometry average value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetGeometryAverageValue
            (
                NXOpen::CAE::ResultProbeBuilder::GeometryValue geometryAverageValue /** geometryaveragevalue */ 
            );
            /**Returns  the face integral option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::EdgeIntegral EdgeIntegralOption
            (
            );
            /**Sets  the face integral option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEdgeIntegralOption
            (
                NXOpen::CAE::ResultProbeBuilder::EdgeIntegral edgeIntegral /** edgeintegral */ 
            );
            /**Returns  the face integral option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::FaceIntegral FaceIntegralOption
            (
            );
            /**Sets  the face integral option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFaceIntegralOption
            (
                NXOpen::CAE::ResultProbeBuilder::FaceIntegral faceIntegral /** faceintegral */ 
            );
            /**Returns  the combine across 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool CombineAcross
            (
            );
            /**Sets  the combine across 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCombineAcross
            (
                bool combineAcross /** combineacross */ 
            );
            /**Returns  the nodal combinatione 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::NodalCombination NodalAveraging
            (
            );
            /**Sets  the nodal combinatione 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNodalAveraging
            (
                NXOpen::CAE::ResultProbeBuilder::NodalCombination nodalCombination /** nodalcombination */ 
            );
            /**Returns  the combined value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::CombineAcrossEntities CombinedValue
            (
            );
            /**Sets  the combined value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCombinedValue
            (
                NXOpen::CAE::ResultProbeBuilder::CombineAcrossEntities combinedValue /** combinedvalue */ 
            );
            /**Returns  the error handel value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::ErrorHandling ErrorHndl
            (
            );
            /**Sets  the error handel value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetErrorHndl
            (
                NXOpen::CAE::ResultProbeBuilder::ErrorHandling errorHndl /** errorhndl */ 
            );
            /**Returns  the output result type value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::Quantity ResultType
            (
            );
            /**Sets  the output result type value 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResultType
            (
                NXOpen::CAE::Result::Quantity resultType /** resulttype */ 
            );
            /**Returns  the unit 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Unit * Unit
            (
            );
            /**Sets  the unit 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUnit
            (
                NXOpen::Unit * unit /** unit */ 
            );
            /**Returns  the result reference type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimResultReference::Type ResultReferenceType
            (
            );
            /**Sets  the result reference type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResultReferenceType
            (
                NXOpen::CAE::SimResultReference::Type type /** type */ 
            );
            /**Returns  the query curve options 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::SuperIterType SuperIterationType
            (
            );
            /**Sets  the query curve options 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSuperIterationType
            (
                NXOpen::CAE::ResultProbeBuilder::SuperIterType superIterationType /** superiterationtype */ 
            );
            /**Returns  the harmonic index 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int HarmonicIndex
            (
            );
            /**Sets  the harmonic index 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetHarmonicIndex
            (
                int harmonicIndex /** harmonicindex */ 
            );
            /**Returns  the rotation speed value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double RotationSpeedValue
            (
            );
            /**Sets  the rotation speed value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetRotationSpeedValue
            (
                double rotationSpeedValue /** rotationspeedvalue */ 
            );
            /**Returns  the desingCycle index 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int DesignCycleIndex
            (
            );
            /**Sets  the desingCycle index 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDesignCycleIndex
            (
                int designCycleIndex /** designcycleindex */ 
            );
            /**Returns  the query curve usage options 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::QueryCurveUsageOptions * QueryCurveUsageOptions
            (
            );
            /**Returns  the acousticModes index 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int AcousticModeIndex
            (
            );
            /**Sets  the acousticModes index 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetAcousticModeIndex
            (
                int acousticModeIndex /** acousticmodeindex */ 
            );
            /**Returns  the acousticModes index 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int BoltSequenceIndex
            (
            );
            /**Sets  the acousticModes index 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetBoltSequenceIndex
            (
                int boltSequenceIndex /** boltsequenceindex */ 
            );
            /** Returns the default unit for the current setting of Result Probe.
                    it will return null in case Probe is unitless. @return   
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Unit * GetDefaultUnit
            (
            );
            /**Returns  the interpolation option for iteration list
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::IterationListSelOpt IterationListSelOption
            (
            );
            /**Sets  the interpolation option for iteration list
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIterationListSelOption
            (
                NXOpen::CAE::ResultProbeBuilder::IterationListSelOpt iterListSelOpt /** iterlistselopt */ 
            );
            /**Returns  the sweep option for iteration interpolation
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::IterationListSweepOpt IterationListSweepOption
            (
            );
            /**Sets  the sweep option for iteration interpolation
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIterationListSweepOption
            (
                NXOpen::CAE::ResultProbeBuilder::IterationListSweepOpt iterListSweepOpt /** iterlistsweepopt */ 
            );
            /**Returns  the start iteration value to log sweep
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double StartIterValForLogSweep
            (
            );
            /**Sets  the start iteration value to linear sweep
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetStartIterValForLinearSweep
            (
                double startIterVal /** startiterval */ 
            );
            /**Returns  the start iteration value to linear sweep
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double StartIterValForLinearSweep
            (
            );
            /**Sets  the start iteration value to log sweep
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetStartIterValForLogSweep
            (
                double startIterVal /** startiterval */ 
            );
            /**Returns  the end iteration value to iteration sweep 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double EndIterValForIterSweep
            (
            );
            /**Sets  the end iteration value to iteration sweep 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEndIterValForIterSweep
            (
                double endIterVal /** enditerval */ 
            );
            /**Returns  the logarithmic base for iteration sweep
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double LogBaseForIterSweep
            (
            );
            /**Sets  the logarithmic base for iteration sweep
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetLogBaseForIterSweep
            (
                double criterionVal /** criterionval */ 
            );
            /**Returns  the step value for iteration sweep
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double StepValForIterSweep
            (
            );
            /**Sets  the step value for iteration sweep
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetStepValForIterSweep
            (
                double criterionVal /** criterionval */ 
            );
            /**Returns  the number of steps in iteration sweep 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int NumOfStepsForIterSweep
            (
            );
            /**Sets  the number of steps in iteration sweep 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNumOfStepsForIterSweep
            (
                int numSteps /** numsteps */ 
            );
            /**Returns  the interpolation type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::Interpolation InterpolationType
            (
            );
            /**Sets  the interpolation type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetInterpolationType
            (
                NXOpen::CAE::ResultProbeBuilder::Interpolation type /** type */ 
            );
            /**Returns  the logical value to enable frequency packing 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool FrequencyPacking
            (
            );
            /**Sets  the logical value to enable frequency packing 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFrequencyPacking
            (
                bool freqPack /** freqpack */ 
            );
            /**Returns  the option for frequency packing 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::FrequencyPackingOpt FrequencyPackingType
            (
            );
            /**Sets  the option for frequency packing 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFrequencyPackingType
            (
                NXOpen::CAE::ResultProbeBuilder::FrequencyPackingOpt freqPackingType /** freqpackingtype */ 
            );
            /**Returns  the option for frequency packing 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::BandCombinationOpt BandCombinationType
            (
            );
            /**Sets  the option for frequency packing 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetBandCombinationType
            (
                NXOpen::CAE::ResultProbeBuilder::BandCombinationOpt combType /** combtype */ 
            );
            /**Returns  the combine loadcase 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool CombineAcrossLcase
            (
            );
            /**Sets  the combine loadcase 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCombineAcrossLcase
            (
                bool combineLcase /** combinelcase */ 
            );
            /**Returns  the combine loadcase option 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::CombineAcrossLoadcases CombineLcaseOption
            (
            );
            /**Sets  the combine loadcase option 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCombineLcaseOption
            (
                NXOpen::CAE::ResultProbeBuilder::CombineAcrossLoadcases combineOption /** combineoption */ 
            );
            /**Returns  the start lcase index 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int StartLcaseIndex
            (
            );
            /**Sets  the start lcase index 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetStartLcaseIndex
            (
                int startLcaseIndex /** startlcaseindex */ 
            );
            /**Returns  the end lcase index 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int EndLcaseIndex
            (
            );
            /**Sets  the end lcase index 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEndLcaseIndex
            (
                int endLcaseIndex /** endlcaseindex */ 
            );
            /**Returns  the start lcase value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double StartLcaseValue
            (
            );
            /**Sets  the start lcase value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetStartLcaseValue
            (
                double startLcaseValue /** startlcasevalue */ 
            );
            /**Returns  the end lcase value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double EndLcaseValue
            (
            );
            /**Sets  the end lcase value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEndLcaseValue
            (
                double endLcaseValue /** endlcasevalue */ 
            );
            /**Returns  the convert order to waterfall 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool ConvertOrderToWF
            (
            );
            /**Sets  the convert order to waterfall 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetConvertOrderToWF
            (
                bool convertOrderToWF /** convertordertowf */ 
            );
            /**Returns  the group integral option 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::GroupIntegral GroupIntegralOption
            (
            );
            /**Sets  the group integral option 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetGroupIntegralOption
            (
                NXOpen::CAE::ResultProbeBuilder::GroupIntegral faceIntegral /** faceintegral */ 
            );
            /**Returns  the select groups 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectGroupsBuilder * GroupsSelectBuilder
            (
            );
            /**Returns  the element integral option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder::ElemIntegral ElemIntegralOption
            (
            );
            /**Sets  the element integral option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetElemIntegralOption
            (
                NXOpen::CAE::ResultProbeBuilder::ElemIntegral faceIntegral /** faceintegral */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
