#ifndef NXOpen_SIM_MACHINETOOLCONFIGURATION_HXX_INCLUDED
#define NXOpen_SIM_MACHINETOOLCONFIGURATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_MachineToolConfiguration.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        class MachineToolConfiguration;
    }
    class Builder;
    namespace SIM
    {
        class _MachineToolConfigurationBuilder;
        class MachineToolConfigurationImpl;
        /** Represents a Machine Tool Configuration object.
             <br> To create a new instance of this class, use @link NXOpen::SIM::KinematicConfigurator::CreateMachineToolConfigurationBuilder  NXOpen::SIM::KinematicConfigurator::CreateMachineToolConfigurationBuilder @endlink  <br> 
         <br>  Created in NX9.0.3.  <br>  
        */
        class NXOPENCPP_SIMEXPORT  MachineToolConfiguration : public NXOpen::Builder
        {
            /** The machine technology types */
            public: enum TechnologyTypes
            {
                TechnologyTypesMill/** The mill technology type */,
                TechnologyTypesTurn/** The lathe technology type */,
                TechnologyTypesMillturn/** The millturn technology type */,
                TechnologyTypesNone/** No technology type */
            };

            /** The machine swiveling types */
            public: enum SwivelingTypes
            {
                SwivelingTypesCycle800/** The CYCLE800 swiveling type */,
                SwivelingTypesTransarot/** The TRANS/AROT swiveling type */
            };

            /** The controller line */
            public: enum ControllerLines
            {
                ControllerLinesSolutionline/** The solutionline controller line */,
                ControllerLinesPowerline/** The powerline controller line */
            };

            /** The plane selection types */
            public: enum PlaneTypes
            {
                PlaneTypesOperator/** The operator panel plane type */,
                PlaneTypesG17/** The G17 plane type */,
                PlaneTypesG18/** The G18 plane type */,
                PlaneTypesG19/** The G19 plane type */
            };

            /** The mdynamics types */
            public: enum MdynamicsTypes
            {
                MdynamicsTypesFiveaxmill/** The Five Axis Milling MDynamics type */
            };

            /** The units type */
            public: enum UnitTypes
            {
                UnitTypesMm/** The millimeter unit type */,
                UnitTypesIn/** The inch unit type */
            };

            private: MachineToolConfigurationImpl * m_machinetoolconfiguration_impl;
            private: friend class  _MachineToolConfigurationBuilder;
            protected: MachineToolConfiguration();
            public: ~MachineToolConfiguration();
            /**Returns  the machine name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString MachineName
            (
            );
            /**Sets  the machine name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void SetMachineName
            (
                const NXString & name /** The new machine name */
            );
            /**Sets  the machine name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            void SetMachineName
            (
                const char * name /** The new machine name */
            );
            /**Returns  the machine vendor 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString MachineVendor
            (
            );
            /**Sets  the machine vendor 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void SetMachineVendor
            (
                const NXString & vendor /** The new machine vendor */
            );
            /**Sets  the machine vendor 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            void SetMachineVendor
            (
                const char * vendor /** The new machine vendor */
            );
            /** Retrieves the machine technology  @return  The machine technology 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::MachineToolConfiguration::TechnologyTypes GetMachineTechnology
            (
                const NXString & channelName /** The channel to modify */
            );
            /** Retrieves the machine technology  @return  The machine technology 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            NXOpen::SIM::MachineToolConfiguration::TechnologyTypes GetMachineTechnology
            (
                const char * channelName /** The channel to modify */
            );
            /** Sets the machine technology 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void SetMachineTechnology
            (
                const NXString & channelName /** The channel to modify */,
                NXOpen::SIM::MachineToolConfiguration::TechnologyTypes technology /** The new machine technology */
            );
            /** Sets the machine technology 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            void SetMachineTechnology
            (
                const char * channelName /** The channel to modify */,
                NXOpen::SIM::MachineToolConfiguration::TechnologyTypes technology /** The new machine technology */
            );
            /** Retrieves machine TCPM support  @return  The TCPM support value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: bool GetChannelTcpmSupport
            (
                const NXString & channelName /** The channel to modify */
            );
            /** Retrieves machine TCPM support  @return  The TCPM support value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            bool GetChannelTcpmSupport
            (
                const char * channelName /** The channel to modify */
            );
            /** Sets the TCPM support value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetChannelTcpmSupport
            (
                const NXString & channelName /** The channel to modify */,
                bool value /** The new TCPM support value */
            );
            /** Sets the TCPM support value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetChannelTcpmSupport
            (
                const char * channelName /** The channel to modify */,
                bool value /** The new TCPM support value */
            );
            /** Retrieves channel's swiveling mode  @return  The swiveling mode value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::MachineToolConfiguration::SwivelingTypes GetChannelSwiveling
            (
                const NXString & channelName /** The channel to modify */
            );
            /** Retrieves channel's swiveling mode  @return  The swiveling mode value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            NXOpen::SIM::MachineToolConfiguration::SwivelingTypes GetChannelSwiveling
            (
                const char * channelName /** The channel to modify */
            );
            /** Sets the channel's swiveling mode 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetChannelSwiveling
            (
                const NXString & channelName /** The channel to modify */,
                NXOpen::SIM::MachineToolConfiguration::SwivelingTypes value /** The new swiveling mode value */
            );
            /** Sets the channel's swiveling mode 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetChannelSwiveling
            (
                const char * channelName /** The channel to modify */,
                NXOpen::SIM::MachineToolConfiguration::SwivelingTypes value /** The new swiveling mode value */
            );
            /** Retrieves a channel's subprogram support  @return  The tool as subprogram mode value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: bool GetChannelToolAsSubprogram
            (
                const NXString & channelName /** The channel to modify */
            );
            /** Retrieves a channel's subprogram support  @return  The tool as subprogram mode value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            bool GetChannelToolAsSubprogram
            (
                const char * channelName /** The channel to modify */
            );
            /** Sets a channel's subprogram support 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetChannelToolAsSubprogram
            (
                const NXString & channelName /** The channel to modify */,
                bool value /** The new tool as subprogram value */
            );
            /** Sets a channel's subprogram support 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetChannelToolAsSubprogram
            (
                const char * channelName /** The channel to modify */,
                bool value /** The new tool as subprogram value */
            );
            /** Retrieves a channel's tool command  @return  The tool command  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXString GetChannelToolCommand
            (
                const NXString & channelName /** The channel to modify */
            );
            /** Retrieves a channel's tool command  @return  The tool command  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            NXString GetChannelToolCommand
            (
                const char * channelName /** The channel to modify */
            );
            /** Sets a channel's tool command 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetChannelToolCommand
            (
                const NXString & channelName /** The channel to modify */,
                const NXString & newToolCommand /** The new tool command */
            );
            /** Sets a channel's tool command 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetChannelToolCommand
            (
                const char * channelName /** The channel to modify */,
                const char * newToolCommand /** The new tool command */
            );
            /** Retrieves a channel's tool preselect  @return  The tool preselect  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXString GetChannelToolPreselect
            (
                const NXString & channelName /** The channel to modify */
            );
            /** Retrieves a channel's tool preselect  @return  The tool preselect  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            NXString GetChannelToolPreselect
            (
                const char * channelName /** The channel to modify */
            );
            /** Sets a channel's tool preselect 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetChannelToolPreselect
            (
                const NXString & channelName /** The channel to modify */,
                const NXString & newToolPreselect /** The new tool preselect */
            );
            /** Sets a channel's tool preselect 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetChannelToolPreselect
            (
                const char * channelName /** The channel to modify */,
                const char * newToolPreselect /** The new tool preselect */
            );
            /**Returns  the controller type 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString ControllerType
            (
            );
            /**Sets  the controller type 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void SetControllerType
            (
                const NXString & controllerType /** The new controller type */
            );
            /**Sets  the controller type 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            void SetControllerType
            (
                const char * controllerType /** The new controller type */
            );
            /**Returns  the controller line 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::MachineToolConfiguration::ControllerLines ControllerLine
            (
            );
            /**Sets  the controller line 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void SetControllerLine
            (
                NXOpen::SIM::MachineToolConfiguration::ControllerLines line /** The new controller line */
            );
            /** Retrieves the controller lookahead, which indicates how many lines are evaluate from the controller ahead. @return  The controller lookahead 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: int GetLookahead
            (
                const NXString & channelName /** The channel to modify */
            );
            /** Retrieves the controller lookahead, which indicates how many lines are evaluate from the controller ahead. @return  The controller lookahead 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            int GetLookahead
            (
                const char * channelName /** The channel to modify */
            );
            /** Sets the controller lookahead, which indicates how many lines are evaluate from the controller ahead.
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void SetLookahead
            (
                const NXString & channelName /** The channel to modify */,
                int lookAhead /** The new controller lookahead */
            );
            /** Sets the controller lookahead, which indicates how many lines are evaluate from the controller ahead.
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            void SetLookahead
            (
                const char * channelName /** The channel to modify */,
                int lookAhead /** The new controller lookahead */
            );
            /**Returns  the cycle time 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double CycleTime
            (
            );
            /**Sets  the cycle time 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void SetCycleTime
            (
                double cycleTime /** The new cycle time */
            );
            /**Returns  the tool carrier name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString ToolCarrierName
            (
            );
            /**Sets  the tool carrier name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void SetToolCarrierName
            (
                const NXString & carrierName /** The new tool carrier name */
            );
            /**Sets  the tool carrier name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            void SetToolCarrierName
            (
                const char * carrierName /** The new tool carrier name */
            );
            /** Retrieves the plane mill from a channel  @return  The plane mill value 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::MachineToolConfiguration::PlaneTypes GetChannelPlaneMill
            (
                const NXString & channelName /** The channel in question */
            );
            /** Retrieves the plane mill from a channel  @return  The plane mill value 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            NXOpen::SIM::MachineToolConfiguration::PlaneTypes GetChannelPlaneMill
            (
                const char * channelName /** The channel in question */
            );
            /** Sets the plane mill for a channel 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: void SetChannelPlaneMill
            (
                const NXString & channelName /** The channel to modify */,
                NXOpen::SIM::MachineToolConfiguration::PlaneTypes newPlaneMill /** The new plane mill value */
            );
            /** Sets the plane mill for a channel 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            void SetChannelPlaneMill
            (
                const char * channelName /** The channel to modify */,
                NXOpen::SIM::MachineToolConfiguration::PlaneTypes newPlaneMill /** The new plane mill value */
            );
            /** Retrieves the plane turn from a channel  @return  The plane turn value 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::MachineToolConfiguration::PlaneTypes GetChannelPlaneTurn
            (
                const NXString & channelName /** The channel in question */
            );
            /** Retrieves the plane turn from a channel  @return  The plane turn value 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            NXOpen::SIM::MachineToolConfiguration::PlaneTypes GetChannelPlaneTurn
            (
                const char * channelName /** The channel in question */
            );
            /** Sets the plane turn for a channel 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: void SetChannelPlaneTurn
            (
                const NXString & channelName /** The channel to modify */,
                NXOpen::SIM::MachineToolConfiguration::PlaneTypes newPlaneTurn /** The new plane turn value */
            );
            /** Sets the plane turn for a channel 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            void SetChannelPlaneTurn
            (
                const char * channelName /** The channel to modify */,
                NXOpen::SIM::MachineToolConfiguration::PlaneTypes newPlaneTurn /** The new plane turn value */
            );
            /** Retrieves the swiveling mode for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: int GetToolCarrierSwivelMode
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to query */
            );
            /** Retrieves the swiveling mode for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            int GetToolCarrierSwivelMode
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to query */
            );
            /** Sets the swiveling mode for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetToolCarrierSwivelMode
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to modify */,
                int newSwivelingMode /** The new swiveling mode */
            );
            /** Sets the swiveling mode for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetToolCarrierSwivelMode
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to modify */,
                int newSwivelingMode /** The new swiveling mode */
            );
            /** Retrieves the direction selection for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: int GetToolCarrierDirectionSelection
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to query */
            );
            /** Retrieves the direction selection for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            int GetToolCarrierDirectionSelection
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to query */
            );
            /** Sets the direction selection for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetToolCarrierDirectionSelection
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to modify */,
                int newDirectionSelection /** The new swiveling mode */
            );
            /** Sets the direction selection for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetToolCarrierDirectionSelection
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to modify */,
                int newDirectionSelection /** The new swiveling mode */
            );
            /** Retrieves the retraction for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: int GetToolCarrierRetraction
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to query */
            );
            /** Retrieves the retraction for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            int GetToolCarrierRetraction
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to query */
            );
            /** Sets the retraction for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetToolCarrierRetraction
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to modify */,
                int newRetraction /** The new swiveling mode */
            );
            /** Sets the retraction for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetToolCarrierRetraction
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to modify */,
                int newRetraction /** The new swiveling mode */
            );
            /** Retrieves the X retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double GetToolCarrierXRetractionPosition
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to query */
            );
            /** Retrieves the X retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            double GetToolCarrierXRetractionPosition
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to query */
            );
            /** Sets the X retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetToolCarrierXRetractionPosition
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to modify */,
                double newXPosition /** The new X position */
            );
            /** Sets the X retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetToolCarrierXRetractionPosition
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to modify */,
                double newXPosition /** The new X position */
            );
            /** Retrieves the Y retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double GetToolCarrierYRetractionPosition
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to query */
            );
            /** Retrieves the Y retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            double GetToolCarrierYRetractionPosition
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to query */
            );
            /** Sets the Y retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetToolCarrierYRetractionPosition
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to modify */,
                double newYPosition /** The new Y position */
            );
            /** Sets the Y retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetToolCarrierYRetractionPosition
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to modify */,
                double newYPosition /** The new Y position */
            );
            /** Retrieves the Z retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double GetToolCarrierZRetractionPosition
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to query */
            );
            /** Retrieves the Z retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            double GetToolCarrierZRetractionPosition
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to query */
            );
            /** Sets the Z retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetToolCarrierZRetractionPosition
            (
                const NXString & channelName /** The channel to which the carrier belongs */,
                const NXString & carrierName /** The name of the carrier to modify */,
                double newZPosition /** The new Z position */
            );
            /** Sets the Z retraction position for a tool carrier. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetToolCarrierZRetractionPosition
            (
                const char * channelName /** The channel to which the carrier belongs */,
                const char * carrierName /** The name of the carrier to modify */,
                double newZPosition /** The new Z position */
            );
            /** Retrieve the MDynamics information  @return  The mdynamics value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::MachineToolConfiguration::MdynamicsTypes GetMdynamics
            (
            );
            /** Sets the Mdynamics value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetMdynamics
            (
                NXOpen::SIM::MachineToolConfiguration::MdynamicsTypes newMDynamicsValue /** The new mdynamics value */
            );
            /** Retrieves the 3D Tool Radius Compensation information  @return  The Tool Radius value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: bool GetToolRadiusCompensation
            (
            );
            /** Sets the 3D Tool Radius Compensation information 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetToolRadiusCompensation
            (
                bool newCompensationValue /** The new Tool Radius Compensation value */
            );
            /** Retrieves the millimeter resolution  @return  The millimeter resolution value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double GetResolutionMm
            (
            );
            /** Sets the millimeter resolution value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetResolutionMm
            (
                double newResolutionValue /** The new millimeter resolution value */
            );
            /** Retrieves the degree resolution  @return  The degree resolution value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double GetResolutionDeg
            (
            );
            /** Sets the degree resolution value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetResolutionDeg
            (
                double newResolutionValue /** The new degree resolution value */
            );
            /** Retrieves the controller language  @return  The controller language 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXString GetControllerLanguage
            (
            );
            /** Sets the controller language 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetControllerLanguage
            (
                const NXString & newLanguage /** The new controller language */
            );
            /** Sets the controller language 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetControllerLanguage
            (
                const char * newLanguage /** The new controller language */
            );
            /** Retrieves the controller version  @return  The controller version 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXString GetControllerVersion
            (
            );
            /** Sets the controller version 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetControllerVersion
            (
                const NXString & newVersion /** The new controller version */
            );
            /** Sets the controller version 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetControllerVersion
            (
                const char * newVersion /** The new controller version */
            );
            /** Retrieves the archive controller type  @return  The archive controller type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: int GetArchiveControllerType
            (
            );
            /** Sets the archive controller type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetArchiveControllerType
            (
                int newArchiveControllerType /** The new archive controller type */
            );
            /** Retrieves the archive controller version  @return  The archive controller version 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXString GetArchiveControllerVersion
            (
            );
            /** Sets the archive controller version 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetArchiveControllerVersion
            (
                const NXString & newArchiveControllerVersion /** The new archive controller version */
            );
            /** Sets the archive controller version 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetArchiveControllerVersion
            (
                const char * newArchiveControllerVersion /** The new archive controller version */
            );
            /** Retrieves the used unit  @return  The used unit 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: int GetUsedUnit
            (
            );
            /** Sets the used unit 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetUsedUnit
            (
                int newUsedUnit /** The new used unit */
            );
            /** Retrieves the circular precision  @return  The circular precision value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double GetCircularPrecision
            (
                const NXString & channelName /** The channel to modify */
            );
            /** Retrieves the circular precision  @return  The circular precision value 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            double GetCircularPrecision
            (
                const char * channelName /** The channel to modify */
            );
            /** Sets the circular precision 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetCircularPrecision
            (
                const NXString & channelName /** The channel to modify */,
                double newCircularPrecision /** The new circular precision value */
            );
            /** Sets the circular precision 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetCircularPrecision
            (
                const char * channelName /** The channel to modify */,
                double newCircularPrecision /** The new circular precision value */
            );
            /** Retrieves the circular precision factor  @return  The circular precision factor 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double GetCircularPrecisionFactor
            (
                const NXString & channelName /** The channel to modify */
            );
            /** Retrieves the circular precision factor  @return  The circular precision factor 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            double GetCircularPrecisionFactor
            (
                const char * channelName /** The channel to modify */
            );
            /** Sets the circular precision factor 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetCircularPrecisionFactor
            (
                const NXString & channelName /** The channel to modify */,
                double newCircularPrecisionFactor /** The new circular precision factor */
            );
            /** Sets the circular precision factor 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            void SetCircularPrecisionFactor
            (
                const char * channelName /** The channel to modify */,
                double newCircularPrecisionFactor /** The new circular precision factor */
            );
            /** Retrieves the diameter geo axis name, which change the output behavior of length values during turning. @return  The diameter geo axis name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetDiameterGeoAxisName
            (
                const NXString & channelName /** The channel to modify */
            );
            /** Retrieves the diameter geo axis name, which change the output behavior of length values during turning. @return  The diameter geo axis name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            NXString GetDiameterGeoAxisName
            (
                const char * channelName /** The channel to modify */
            );
            /** Sets the diameter geo axis name, which change the output behavior of length values during turning.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDiameterGeoAxisName
            (
                const NXString & channelName /** The channel to modify */,
                const NXString & newDiameterMode /** The new diameter geo axis name */
            );
            /** Sets the diameter geo axis name, which change the output behavior of length values during turning.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetDiameterGeoAxisName
            (
                const char * channelName /** The channel to modify */,
                const char * newDiameterMode /** The new diameter geo axis name */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
