#ifndef NXOpen_VALIDATE_LOGGER_HXX_INCLUDED
#define NXOpen_VALIDATE_LOGGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_Logger.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/Validation.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class Logger;
    }
    class NXObject;
    namespace Validate
    {
        class LoggerImpl;
        /**Logs validation results and details for @link Validate::CheckerDefinition Validate::CheckerDefinition@endlink .
            
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  Logger : public NXOpen::TransientObject
        {
            private: LoggerImpl * m_logger_impl;
            /// \cond NX_NO_DOC 
            public: explicit Logger(void *ptr);
            /// \endcond 
            /** Frees the object from memory. After this method is called,
                    it is illegal to use the object. In .NET, this method is automatically
                    called when the object is deleted by the garbage collector. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~Logger();
            /** Logs a validation result with descriptive message.
                    
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogResult
            (
                NXOpen::Validation::Result result /** The validation result.*/,
                const NXString & message /** The message describing the validation result.*/
            );
            /** Logs a validation result with descriptive message.
                    
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void LogResult
            (
                NXOpen::Validation::Result result /** The validation result.*/,
                const char * message /** The message describing the validation result.*/
            );
            /** Logs a validation result and a @link NXObject NXObject@endlink  as validation result detail.
                    
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogNXObject
            (
                NXOpen::Validation::Result result /**The validation result.*/,
                NXOpen::NXObject * anObject /** The object to be logged as validation result detail.*/
            );
            /** Logs a validation result and a @link NXObject NXObject@endlink  as validation result detail.
                    
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogNXObject
            (
                NXOpen::Validation::Result result /**The validation result.*/,
                NXOpen::NXObject * anObject /** The object to be logged as validation result detail.*/,
                const NXString & message /** The message describing the object as a validation result.*/
            );
            /** Logs a validation result and a @link NXObject NXObject@endlink  as validation result detail.
                    
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void LogNXObject
            (
                NXOpen::Validation::Result result /**The validation result.*/,
                NXOpen::NXObject * anObject /** The object to be logged as validation result detail.*/,
                const char * message /** The message describing the object as a validation result.*/
            );
            /** Logs a validation result and a @link NXObject NXObject@endlink  as validation result detail.
                    
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogNXObject
            (
                NXOpen::Validation::Result result /**The validation result.*/,
                NXOpen::NXObject * anObject /** The object to be logged as validation result detail.*/,
                const NXString & message /** The message describing the object as a validation result.*/,
                const NXString & objectName /** The display name of the object. If not specified, the system will assign one.*/,
                const std::vector<NXOpen::Point3d> & referencePoints /** The reference points for the object. Useful for geometric validation.*/,
                const std::vector<NXOpen::Vector3d> & referenceVectors /** The reference vectors for the object. Useful for geometric validation.*/
            );
            /** Logs a validation result and a @link NXObject NXObject@endlink  as validation result detail.
                    
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void LogNXObject
            (
                NXOpen::Validation::Result result /**The validation result.*/,
                NXOpen::NXObject * anObject /** The object to be logged as validation result detail.*/,
                const char * message /** The message describing the object as a validation result.*/,
                const char * objectName /** The display name of the object. If not specified, the system will assign one.*/,
                const std::vector<NXOpen::Point3d> & referencePoints /** The reference points for the object. Useful for geometric validation.*/,
                const std::vector<NXOpen::Vector3d> & referenceVectors /** The reference vectors for the object. Useful for geometric validation.*/
            );
            /** Logs a set of @link NXObject NXObject@endlink  in a child logger.
                     @code 
                    objSetLogger = logger.LogNXObjectSet("Failed Bodies", "The connection locations conflict with the constraints.");
                    ' the objSetLogger is a child of the logger.
                    objSetLogger.LogNXObject(Validation.Result.Failed, body1 );
                    objSetLogger.LogNXObject(Validation.Result.Failed, body2 );        
                     @endcode 
                     @return  The child logger that is created.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: NXOpen::Validate::Logger * LogNXObjectSet
            (
                const NXString & name /** The name of the set.*/,
                const NXString & message /** The message describing the set.*/
            );
            /** Logs a set of @link NXObject NXObject@endlink  in a child logger.
                     @code 
                    objSetLogger = logger.LogNXObjectSet("Failed Bodies", "The connection locations conflict with the constraints.");
                    ' the objSetLogger is a child of the logger.
                    objSetLogger.LogNXObject(Validation.Result.Failed, body1 );
                    objSetLogger.LogNXObject(Validation.Result.Failed, body2 );        
                     @endcode 
                     @return  The child logger that is created.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            NXOpen::Validate::Logger * LogNXObjectSet
            (
                const char * name /** The name of the set.*/,
                const char * message /** The message describing the set.*/
            );
            /** Logs a Boolean (logical) attribute. 
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogBooleanAttribute
            (
                const NXString & title /** The title of attribute. */,
                bool booleanValue /** The Boolean type attribute's value. */
            );
            /** Logs a Boolean (logical) attribute. 
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void LogBooleanAttribute
            (
                const char * title /** The title of attribute. */,
                bool booleanValue /** The Boolean type attribute's value. */
            );
            /** Logs an integer number attribute.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogIntegerAttribute
            (
                const NXString & title /** The title of attribute. */,
                int integerValue /** The integer number type attribute's value. */
            );
            /** Logs an integer number attribute.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void LogIntegerAttribute
            (
                const char * title /** The title of attribute. */,
                int integerValue /** The integer number type attribute's value. */
            );
            /** Logs a real number attribute.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogRealAttribute
            (
                const NXString & title /** The title of attribute. */,
                double realValue /** The real number type attribute's value. */
            );
            /** Logs a real number attribute.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void LogRealAttribute
            (
                const char * title /** The title of attribute. */,
                double realValue /** The real number type attribute's value. */
            );
            /** Logs a string attribute.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogStringAttribute
            (
                const NXString & title /** The title of attribute. */,
                const NXString & stringValue /** The string type attribute's value. */
            );
            /** Logs a string attribute.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void LogStringAttribute
            (
                const char * title /** The title of attribute. */,
                const char * stringValue /** The string type attribute's value. */
            );
            /** Logs an array attributes of Boolean (logical) type.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogBooleanAttributes
            (
                const NXString & title /** The title of attribute. */,
                const std::vector<bool> & attrs /** The Boolean type attribute's array value. */
            );
            /** Logs an array attributes of Boolean (logical) type.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void LogBooleanAttributes
            (
                const char * title /** The title of attribute. */,
                const std::vector<bool> & attrs /** The Boolean type attribute's array value. */
            );
            /** Logs an array attributes of integer type.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogIntegerAttributes
            (
                const NXString & title /** The title of attribute. */,
                const std::vector<int> & attrs /** The integer number type attribute's array value. */
            );
            /** Logs an array attributes of integer type.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void LogIntegerAttributes
            (
                const char * title /** The title of attribute. */,
                const std::vector<int> & attrs /** The integer number type attribute's array value. */
            );
            /** Logs an array attributes of real type.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogRealAttributes
            (
                const NXString & title /** The title of attribute. */,
                const std::vector<double> & attrs /** The real number type attribute's array value. */
            );
            /** Logs an array attributes of real type.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void LogRealAttributes
            (
                const char * title /** The title of attribute. */,
                const std::vector<double> & attrs /** The real number type attribute's array value. */
            );
            /** Logs an array attributes of string type.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void LogStringAttributes
            (
                const NXString & title /** The title of attribute. */,
                std::vector<NXString> & attrs /** The string type attribute's array value. */
            );
            /** Logs an array attributes of string type.
                    If attribute with the same title exists already, overwrites it. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void LogStringAttributes
            (
                const char * title /** The title of attribute. */,
                std::vector<NXString> & attrs /** The string type attribute's array value. */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
