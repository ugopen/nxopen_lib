#ifndef NXOpen_DRAFTINGAUTOTESTPRINT_HXX_INCLUDED
#define NXOpen_DRAFTINGAUTOTESTPRINT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DraftingAutotestPrint.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Validation3DSectionCollectionValidator.hxx>
#include <NXOpen/ValidationAnnotation2DCollectionValidator.hxx>
#include <NXOpen/ValidationAnnotation3DCollectionValidator.hxx>
#include <NXOpen/ValidationBaseArrowValidator.hxx>
#include <NXOpen/ValidationBaseUserSymbolValidator.hxx>
#include <NXOpen/ValidationCenterLineValidator.hxx>
#include <NXOpen/ValidationCoordinateNoteValidator.hxx>
#include <NXOpen/ValidationCurveValidator.hxx>
#include <NXOpen/ValidationDatumTargetValidator.hxx>
#include <NXOpen/ValidationDatumValidator.hxx>
#include <NXOpen/ValidationDimensionValidator.hxx>
#include <NXOpen/ValidationDraftingEdgeVDCurveCollectionValidator.hxx>
#include <NXOpen/ValidationDraftingImageValidator.hxx>
#include <NXOpen/ValidationDraftingInterferenceVDCurveCollectionValidator.hxx>
#include <NXOpen/ValidationDraftingSectionEdgeVDCurveCollectionValidator.hxx>
#include <NXOpen/ValidationDraftingSilhouetteVDCurveCollectionValidator.hxx>
#include <NXOpen/ValidationDraftingSimplifiedVDCurveCollectionValidator.hxx>
#include <NXOpen/ValidationDraftingThreadVDCurveCollectionValidator.hxx>
#include <NXOpen/ValidationDraftingTraceLineVDCurveCollectionValidator.hxx>
#include <NXOpen/ValidationDraftingUVHatchVDCurveCollectionValidator.hxx>
#include <NXOpen/ValidationDraftingVIVDCurveCollectionValidator.hxx>
#include <NXOpen/ValidationDrawingBookletValidator.hxx>
#include <NXOpen/ValidationDrawingRegionValidator.hxx>
#include <NXOpen/ValidationDrawingSheetValidator.hxx>
#include <NXOpen/ValidationDrawingTo3DValidator.hxx>
#include <NXOpen/ValidationEnterpriseIdentificationValidator.hxx>
#include <NXOpen/ValidationExtractedEdgeCollectionValidator.hxx>
#include <NXOpen/ValidationFcfValidator.hxx>
#include <NXOpen/ValidationFrameBarValidator.hxx>
#include <NXOpen/ValidationGeneralNoteValidator.hxx>
#include <NXOpen/ValidationHatchValidator.hxx>
#include <NXOpen/ValidationHoleTableValidator.hxx>
#include <NXOpen/ValidationIdSymbolValidator.hxx>
#include <NXOpen/ValidationInterferenceCurveCollectionValidator.hxx>
#include <NXOpen/ValidationIntersectionSymbolValidator.hxx>
#include <NXOpen/ValidationLabelOnParentValidator.hxx>
#include <NXOpen/ValidationLayout2dComponentStructureValidator.hxx>
#include <NXOpen/ValidationLayout2dComponentValidator.hxx>
#include <NXOpen/ValidationLayout2dDrawingSheetsValidator.hxx>
#include <NXOpen/ValidationLayout2dLinksValidator.hxx>
#include <NXOpen/ValidationLayout2dSketchStructureValidator.hxx>
#include <NXOpen/ValidationLocatorDesignatorValidator.hxx>
#include <NXOpen/ValidationMaterialSpecificationValidator.hxx>
#include <NXOpen/ValidationMemberViewValidator.hxx>
#include <NXOpen/ValidationModelingViewSearchValidator.hxx>
#include <NXOpen/ValidationModelingViewValidator.hxx>
#include <NXOpen/ValidationModelingViewsCollectionValidator.hxx>
#include <NXOpen/ValidationNoteValidator.hxx>
#include <NXOpen/ValidationOffsetCenterPointSymbolValidator.hxx>
#include <NXOpen/ValidationPMIBalloonValidator.hxx>
#include <NXOpen/ValidationPMILightweightSectionViewValidator.hxx>
#include <NXOpen/ValidationPMIPlanarCPSValidator.hxx>
#include <NXOpen/ValidationPMISectionViewValidator.hxx>
#include <NXOpen/ValidationPartIdentificationValidator.hxx>
#include <NXOpen/ValidationPartListSectionValidator.hxx>
#include <NXOpen/ValidationProcessSpecificationValidator.hxx>
#include <NXOpen/ValidationRegionValidator.hxx>
#include <NXOpen/ValidationSectionEdgesCollectionValidator.hxx>
#include <NXOpen/ValidationSectionLineCollectionValidator.hxx>
#include <NXOpen/ValidationSectionLineSegmentValidator.hxx>
#include <NXOpen/ValidationSectionLineValidator.hxx>
#include <NXOpen/ValidationSecurityMarkingValidator.hxx>
#include <NXOpen/ValidationSilhouetteCurveCollectionValidator.hxx>
#include <NXOpen/ValidationSimplifiedCurveCollectionValidator.hxx>
#include <NXOpen/ValidationSketchDimensionValidator.hxx>
#include <NXOpen/ValidationSpecificNoteValidator.hxx>
#include <NXOpen/ValidationSurfaceFinishValidator.hxx>
#include <NXOpen/ValidationTabnotCollectionValidator.hxx>
#include <NXOpen/ValidationTabnotSectionValidator.hxx>
#include <NXOpen/ValidationTargetPointSymbolValidator.hxx>
#include <NXOpen/ValidationThreadCurveCollectionValidator.hxx>
#include <NXOpen/ValidationThreadCurveValidator.hxx>
#include <NXOpen/ValidationThreadVDCurveValidator.hxx>
#include <NXOpen/ValidationTitleBlockValidator.hxx>
#include <NXOpen/ValidationTopologicalFeatureCollectionValidator.hxx>
#include <NXOpen/ValidationTraceLineCollectionValidator.hxx>
#include <NXOpen/ValidationUVHatchCurveCollectionValidator.hxx>
#include <NXOpen/ValidationVDCurveValidator.hxx>
#include <NXOpen/ValidationVICurveCollectionValidator.hxx>
#include <NXOpen/ValidationViewBreakValidator.hxx>
#include <NXOpen/ValidationViewCollectionValidator.hxx>
#include <NXOpen/ValidationViewLabelValidator.hxx>
#include <NXOpen/ValidationViewingDirectionArrowLabelValidator.hxx>
#include <NXOpen/ValidationViewingDirectionArrowValidator.hxx>
#include <NXOpen/ValidationWeldValidator.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class DraftingAutotestPrint;
    class DebugSession;
    namespace Annotations
    {
        class Annotation;
    }
    namespace Annotations
    {
        class BalloonNote;
    }
    namespace Annotations
    {
        class BaseArrow;
    }
    namespace Annotations
    {
        class BaseDatum;
    }
    namespace Annotations
    {
        class BaseDatumTarget;
    }
    namespace Annotations
    {
        class BaseFcf;
    }
    namespace Annotations
    {
        class BaseFrameBar;
    }
    namespace Annotations
    {
        class BaseNote;
    }
    namespace Annotations
    {
        class BaseSurfaceFinish;
    }
    namespace Annotations
    {
        class Centerline;
    }
    namespace Annotations
    {
        class CoordinateNote;
    }
    namespace Annotations
    {
        class CuttingPlaneSymbol;
    }
    namespace Annotations
    {
        class Dimension;
    }
    namespace Annotations
    {
        class EnterpriseIdentification;
    }
    namespace Annotations
    {
        class GeneralNote;
    }
    namespace Annotations
    {
        class Hatch;
    }
    namespace Annotations
    {
        class HoleTable;
    }
    namespace Annotations
    {
        class IdSymbol;
    }
    namespace Annotations
    {
        class IntersectionSymbol;
    }
    namespace Annotations
    {
        class Label;
    }
    namespace Annotations
    {
        class LocatorDesignator;
    }
    namespace Annotations
    {
        class MaterialSpecification;
    }
    namespace Annotations
    {
        class NoteBase;
    }
    namespace Annotations
    {
        class OffsetCenterPoint;
    }
    namespace Annotations
    {
        class PartIdentification;
    }
    namespace Annotations
    {
        class ProcessSpecification;
    }
    namespace Annotations
    {
        class Region;
    }
    namespace Annotations
    {
        class SpecificNote;
    }
    namespace Annotations
    {
        class TargetPoint;
    }
    namespace Annotations
    {
        class TitleBlock;
    }
    namespace Annotations
    {
        class Weld;
    }
    class DisplayableObject;
    namespace Drawings
    {
        class DraftingView;
    }
    namespace Drawings
    {
        class DrawingRegion;
    }
    namespace Drawings
    {
        class ViewBreak;
    }
    namespace Drawings
    {
        class ViewingDirectionArrow;
    }
    namespace Drawings
    {
        class ViewingDirectionArrowLabel;
    }
    namespace Layout2d
    {
        class Component;
    }
    class Part;
    class Sketch;
    class TaggedObject;
    class Validation3DSectionCollectionValidator;
    class ValidationAnnotation2DCollectionValidator;
    class ValidationAnnotation3DCollectionValidator;
    class ValidationBaseArrowValidator;
    class ValidationBaseUserSymbolValidator;
    class ValidationCenterLineValidator;
    class ValidationCoordinateNoteValidator;
    class ValidationCurveValidator;
    class ValidationDatumTargetValidator;
    class ValidationDatumValidator;
    class ValidationDimensionValidator;
    class ValidationDraftingEdgeVDCurveCollectionValidator;
    class ValidationDraftingImageValidator;
    class ValidationDraftingInterferenceVDCurveCollectionValidator;
    class ValidationDraftingSectionEdgeVDCurveCollectionValidator;
    class ValidationDraftingSilhouetteVDCurveCollectionValidator;
    class ValidationDraftingSimplifiedVDCurveCollectionValidator;
    class ValidationDraftingThreadVDCurveCollectionValidator;
    class ValidationDraftingTraceLineVDCurveCollectionValidator;
    class ValidationDraftingUVHatchVDCurveCollectionValidator;
    class ValidationDraftingVIVDCurveCollectionValidator;
    class ValidationDrawingBookletValidator;
    class ValidationDrawingRegionValidator;
    class ValidationDrawingSheetValidator;
    class ValidationDrawingTo3DValidator;
    class ValidationEnterpriseIdentificationValidator;
    class ValidationExtractedEdgeCollectionValidator;
    class ValidationFcfValidator;
    class ValidationFrameBarValidator;
    class ValidationGeneralNoteValidator;
    class ValidationHatchValidator;
    class ValidationHoleTableValidator;
    class ValidationIdSymbolValidator;
    class ValidationInterferenceCurveCollectionValidator;
    class ValidationIntersectionSymbolValidator;
    class ValidationLabelOnParentValidator;
    class ValidationLayout2dComponentStructureValidator;
    class ValidationLayout2dComponentValidator;
    class ValidationLayout2dDrawingSheetsValidator;
    class ValidationLayout2dLinksValidator;
    class ValidationLayout2dSketchStructureValidator;
    class ValidationLocatorDesignatorValidator;
    class ValidationMaterialSpecificationValidator;
    class ValidationMemberViewValidator;
    class ValidationModelingViewSearchValidator;
    class ValidationModelingViewValidator;
    class ValidationModelingViewsCollectionValidator;
    class ValidationNoteValidator;
    class ValidationOffsetCenterPointSymbolValidator;
    class ValidationPMIBalloonValidator;
    class ValidationPMILightweightSectionViewValidator;
    class ValidationPMIPlanarCPSValidator;
    class ValidationPMISectionViewValidator;
    class ValidationPartIdentificationValidator;
    class ValidationPartListSectionValidator;
    class ValidationProcessSpecificationValidator;
    class ValidationRegionValidator;
    class ValidationSectionEdgesCollectionValidator;
    class ValidationSectionLineCollectionValidator;
    class ValidationSectionLineSegmentValidator;
    class ValidationSectionLineValidator;
    class ValidationSecurityMarkingValidator;
    class ValidationSilhouetteCurveCollectionValidator;
    class ValidationSimplifiedCurveCollectionValidator;
    class ValidationSketchDimensionValidator;
    class ValidationSpecificNoteValidator;
    class ValidationSurfaceFinishValidator;
    class ValidationTabnotCollectionValidator;
    class ValidationTabnotSectionValidator;
    class ValidationTargetPointSymbolValidator;
    class ValidationThreadCurveCollectionValidator;
    class ValidationThreadCurveValidator;
    class ValidationThreadVDCurveValidator;
    class ValidationTitleBlockValidator;
    class ValidationTopologicalFeatureCollectionValidator;
    class ValidationTraceLineCollectionValidator;
    class ValidationUVHatchCurveCollectionValidator;
    class ValidationVDCurveValidator;
    class ValidationVICurveCollectionValidator;
    class ValidationViewBreakValidator;
    class ValidationViewCollectionValidator;
    class ValidationViewLabelValidator;
    class ValidationViewingDirectionArrowLabelValidator;
    class ValidationViewingDirectionArrowValidator;
    class ValidationWeldValidator;
    class View;
    /** validator type */

    /// \cond NX_NO_DOC 
    enum ValidatorType
    {
        ValidatorTypeNoneValidator/** none validator */ ,
        ValidatorTypeAnnotationValidator/** annotation validator */ ,
        ValidatorTypeBaseArrowValidator/** base arrow validator */ ,
        ValidatorTypeBaseUserSymbolValidator/** base user symbol validator */ ,
        ValidatorTypeCenterLineValidator/** center line validator */ ,
        ValidatorTypeCoordinateNoteValidator/** coordinate note validator */ ,
        ValidatorTypeCurveValidator/** curve validator */ ,
        ValidatorTypeDatumTargetValidator/** datum target validator */ ,
        ValidatorTypeDatumValidator/** datum validator */ ,
        ValidatorTypeDimensionValidator/** dimension validator */ ,
        ValidatorTypeDraftingImageValidator/** drafting image validator */ ,
        ValidatorTypeDrawingBookletValidator/** drawing booklet validator */ ,
        ValidatorTypeDrawingRegionValidator/** drawing region validator */ ,
        ValidatorTypeDrawingSheetValidator/** drawing sheet validator */ ,
        ValidatorTypeDrawingTo3DReportValidator/** drawing to3dreport validator */ ,
        ValidatorTypeEnterpriseIdentificationValidator/** enterprise identification validator */ ,
        ValidatorTypeFCFValidator/** fcfvalidator */ ,
        ValidatorTypeFrameBarValidator/** frame bar validator */ ,
        ValidatorTypeGeneralNoteValidator/** general note validator */ ,
        ValidatorTypeHatchValidator/** hatch validator */ ,
        ValidatorTypeHoleTableValidator/** hole table validator */ ,
        ValidatorTypeIdSymbolValidator/** id symbol validator */ ,
        ValidatorTypeIntersectionSymbolValidator/** intersection symbol validator */ ,
        ValidatorTypeLabelOnParentValidator/** label on parent validator */ ,
        ValidatorTypeLayout2dComponentStructureValidator/** layout2d component structure validator */ ,
        ValidatorTypeLayout2dComponentValidator/** layout2d component validator */ ,
        ValidatorTypeLayout2dDrawingSheetsValidator/** layout2d drawing sheets validator */ ,
        ValidatorTypeLayout2dLinksValidator/** layout2d links validator */ ,
        ValidatorTypeLayout2dSketchStructureValidator/** layout2d sketch structure validator */ ,
        ValidatorTypeLocatorDesignatorValidator/** locator designator validator */ ,
        ValidatorTypeMaterialSpecificationValidator/** material specification validator */ ,
        ValidatorTypeMemberViewValidator/** member view validator */ ,
        ValidatorTypeModelingViewSearchValidator/** modeling view search validator */ ,
        ValidatorTypeModelingViewsValidator/** modeling views validator */ ,
        ValidatorTypeModelingViewValidator/** modeling view validator */ ,
        ValidatorTypeNoteValidator/** note validator */ ,
        ValidatorTypeOffsetCenterPointSymbolValidator/** offset center point symbol validator */ ,
        ValidatorTypePartIdentificationValidator/** part identification validator */ ,
        ValidatorTypePartListSectionValidator/** part list section validator */ ,
        ValidatorTypePartListValidator/** part list validator */ ,
        ValidatorTypePMIBalloonValidator/** pmiballoon validator */ ,
        ValidatorTypePMIPlanarCPSValidator/** pmiplanar cpsvalidator */ ,
        ValidatorTypePMILightweightSectionViewValidator/** pmilightweight section view validator */ ,
        ValidatorTypePMISectionViewValidator/** pmisection view validator */ ,
        ValidatorTypeProcessSpecificationValidator/** process specification validator */ ,
        ValidatorTypeRegionValidator/** region validator */ ,
        ValidatorTypeSectionLineSegmentValidator/** section line segment validator */ ,
        ValidatorTypeSectionLineValidator/** section line validator */ ,
        ValidatorTypeSecurityMarkingValidator/** security marking validator */ ,
        ValidatorTypeSpecificNoteValidator/** specific note validator */ ,
        ValidatorTypeSurfaceFinishValidator/** surface finish validator */ ,
        ValidatorTypeTabnotSectionValidator/** tabnot section validator */ ,
        ValidatorTypeTabnotValidator/** tabnot validator */ ,
        ValidatorTypeTargetPointSymbolValidator/** target point symbol validator */ ,
        ValidatorTypeThreadCurveValidator/** thread curve validator */ ,
        ValidatorTypeTitleBlockValidator/** title block validator */ ,
        ValidatorTypeVDCurveValidator/** vdcurve validator */ ,
        ValidatorTypeViewBreakValidator/** view break validator */ ,
        ValidatorTypeViewingDirectionArrowValidator/** viewing direction arrow validator */ ,
        ValidatorTypeViewingDirectionArrowLabelValidator/** viewing direction arrow label validator */ ,
        ValidatorTypeViewLabelValidator/** view label validator */ ,
        ValidatorTypeViewValidator/** view validator */ ,
        ValidatorTypeWeldValidator/** weld validator */ 
    };


    /// \endcond 
    class DraftingAutotestPrintImpl;

    /// \cond NX_NO_DOC 
    /** Represents a class that is used for NX testing.  This class should not
    be made available to customers  <br> To obtain an instance of this class, refer to @link NXOpen::DebugSession  NXOpen::DebugSession @endlink  <br> 
     <br>  Created in NX7.5.0.  <br>  
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  DraftingAutotestPrint
    {
        private: DraftingAutotestPrintImpl * m_draftingautotestprint_impl;
        private: NXOpen::DebugSession* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit DraftingAutotestPrint(NXOpen::DebugSession *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~DraftingAutotestPrint();

        /// \cond NX_NO_DOC 
        /** Creates a 2D annotation collection validator.  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationAnnotation2DCollectionValidator * CreateAnnotation2dCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a 3D annotation collection validator.  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationAnnotation3DCollectionValidator * CreateAnnotation3dCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting view collection validator.  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationViewCollectionValidator * CreateViewCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting section edge collection validator.  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationSectionEdgesCollectionValidator * CreateSectionEdgesCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting section line collection validator.  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationSectionLineCollectionValidator * CreateSectionLineCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a thread curve collection validator.  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationThreadCurveCollectionValidator * CreateThreadCurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting virtual intersection curve collection validator.  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationVICurveCollectionValidator * CreateViCurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a topological feature collection validator.  @return  
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationTopologicalFeatureCollectionValidator * CreateTopologicalFeatureCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting note validator.  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationNoteValidator * CreateNoteValidator
        (
            NXOpen::Annotations::NoteBase * note /** note */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting feature control frame validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationFcfValidator * CreateFcfValidator
        (
            NXOpen::Annotations::BaseFcf * fcf /** fcf */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting datum validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDatumValidator * CreateDatumValidator
        (
            NXOpen::Annotations::BaseDatum * datum /** datum */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting datum target validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDatumTargetValidator * CreateDatumTargetValidator
        (
            NXOpen::Annotations::BaseDatumTarget * datumTarget /** datum target */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting id symbol validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationIdSymbolValidator * CreateIdSymbolValidator
        (
            NXOpen::Annotations::IdSymbol * idSymbol /** id symbol */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting tabular note section validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationTabnotSectionValidator * CreateTabnotSectionValidator
        (
            NXOpen::DisplayableObject * tabnotSection /** tabnot section */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting parts list validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationPartListSectionValidator * CreatePartListSectionValidator
        (
            NXOpen::DisplayableObject * plist /** plist */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting crosshatch validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationHatchValidator * CreateHatchValidator
        (
            NXOpen::Annotations::Hatch * hatch /** hatch */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting holeTable validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationHoleTableValidator * CreateHoleTableValidator
        (
            NXOpen::Annotations::HoleTable * holeTable /** holetable */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting centerline validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationCenterLineValidator * CreateCenterlineValidator
        (
            NXOpen::Annotations::Centerline * cline /** cline */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drawing view label validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationViewLabelValidator * CreateViewLabelValidator
        (
            NXOpen::Annotations::BaseNote * label /** label */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a label on parent validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationLabelOnParentValidator * CreateLabelOnParentValidator
        (
            NXOpen::Annotations::Label * label /** label */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a user symbol validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationBaseUserSymbolValidator * CreateBaseUserSymbolValidator
        (
            NXOpen::Annotations::Annotation * symbol /** symbol */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a surface finish symbol validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationSurfaceFinishValidator * CreateSurfaceFinishValidator
        (
            NXOpen::Annotations::BaseSurfaceFinish * symbol /** symbol */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a PMI balloon validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationPMIBalloonValidator * CreatePmiBalloonValidator
        (
            NXOpen::Annotations::BalloonNote * balloon /** balloon */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting curve validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationCurveValidator * CreateCurveValidator
        (
            NXOpen::DisplayableObject * curve /** curve */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a thread curve validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationThreadCurveValidator * CreateThreadCurveValidator
        (
            NXOpen::DisplayableObject * curve /** curve */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a section line validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationSectionLineValidator * CreateSectionLineValidator
        (
            NXOpen::DisplayableObject * curve /** curve */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a section line segment validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationSectionLineSegmentValidator * CreateSectionLineSegmentValidator
        (
            NXOpen::DisplayableObject * curve /** curve */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting member view validator  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationMemberViewValidator * CreateMemberViewValidator
        (
            NXOpen::Drawings::DraftingView * view /** view */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting modeling view validator  @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationModelingViewValidator * CreateModelingViewValidator
        (
            NXOpen::View * view /** view */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting modeling view search validator  @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationModelingViewSearchValidator * CreateModelingViewSearchValidator
        (
            NXOpen::View * view /** view */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a dimension validator.  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDimensionValidator * CreateDimensionValidator
        (
            NXOpen::Annotations::Dimension * dimension /** dimension */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a weld validator.  @return  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationWeldValidator * CreateWeldValidator
        (
            NXOpen::Annotations::Weld * weld /** weld */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a view Break validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationViewBreakValidator * CreateViewBreakValidator
        (
            NXOpen::Drawings::ViewBreak * viewbreak /** viewbreak */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Checks if the input object is valid for drafting custom print and returns its validator type 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidatorType IsDraftingObjectForCustomPrint
        (
            NXOpen::TaggedObject * selectedObject /** selectedobject */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Offset Center Point Symbol Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationOffsetCenterPointSymbolValidator * CreateOffsetCenterPointSymbolValidator
        (
            NXOpen::Annotations::OffsetCenterPoint * offsetcenterpoint /** offsetcenterpoint */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Intersection Symbol Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationIntersectionSymbolValidator * CreateIntersectionSymbolValidator
        (
            NXOpen::Annotations::IntersectionSymbol * intersectionpoint /** intersectionpoint */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Target Point Symbol Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationTargetPointSymbolValidator * CreateTargetPointSymbolValidator
        (
            NXOpen::Annotations::TargetPoint * targetpoint /** targetpoint */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Coordinate Note Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationCoordinateNoteValidator * CreateCoordinateNoteValidator
        (
            NXOpen::Annotations::CoordinateNote * coordinatenote /** coordinatenote */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Material Specification Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationMaterialSpecificationValidator * CreateMaterialSpecificationValidator
        (
            NXOpen::Annotations::MaterialSpecification * materialspecification /** materialspecification */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Locator Designator Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationLocatorDesignatorValidator * CreateLocatorDesignatorValidator
        (
            NXOpen::Annotations::LocatorDesignator * locatordesignator /** locatordesignator */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Region Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationRegionValidator * CreateRegionValidator
        (
            NXOpen::Annotations::Region * region /** region */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a General Note Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationGeneralNoteValidator * CreateGeneralNoteValidator
        (
            NXOpen::Annotations::GeneralNote * generalNote /** general note */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Specific Note Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationSpecificNoteValidator * CreateSpecificNoteValidator
        (
            NXOpen::Annotations::SpecificNote * specificNote /** specific note */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Enterprise Identification Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationEnterpriseIdentificationValidator * CreateEnterpriseIdentificationValidator
        (
            NXOpen::Annotations::EnterpriseIdentification * enterpriseId /** enterprise id */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Part Identification Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationPartIdentificationValidator * CreatePartIdentificationValidator
        (
            NXOpen::Annotations::PartIdentification * partId /** part id */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Process Specification Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationProcessSpecificationValidator * CreateProcessSpecificationValidator
        (
            NXOpen::Annotations::ProcessSpecification * processSpec /** process spec */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Security Marking Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationSecurityMarkingValidator * CreateSecurityMarkingValidator
        (
            NXOpen::DisplayableObject * securityMarking /** security marking */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a PMI Section View Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationPMISectionViewValidator * CreateSectionViewValidator
        (
            NXOpen::View * sectionView /** section view */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a PMI Lightweight Section View Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationPMILightweightSectionViewValidator * CreateLightweightSectionViewValidator
        (
            NXOpen::View * lightweightSection /** lightweight section */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a 3D section view collection validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Validation3DSectionCollectionValidator * Create3dsectionCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Title Block Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationTitleBlockValidator * CreateTitleBlockValidator
        (
            NXOpen::Annotations::TitleBlock * titleBlock /** title block */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a FrameBar Validator.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationFrameBarValidator * CreateFrameBarValidator
        (
            NXOpen::Annotations::BaseFrameBar * frameBar /** framebar */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drawing region validator  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDrawingRegionValidator * CreateDrawingRegionValidator
        (
            NXOpen::Drawings::DrawingRegion * region /** region */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting tabnot collection validator  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationTabnotCollectionValidator * CreateTabnotCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting extracted edge collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationExtractedEdgeCollectionValidator * CreateExtractedEdgeCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting interference curve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationInterferenceCurveCollectionValidator * CreateInterferenceCurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting silhouette curve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationSilhouetteCurveCollectionValidator * CreateSilhouetteCurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a simplified curve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationSimplifiedCurveCollectionValidator * CreateSimplifiedCurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting trace line collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationTraceLineCollectionValidator * CreateTraceLineCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting uvhatch curve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationUVHatchCurveCollectionValidator * CreateUvHatchCurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting edge vdcurve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDraftingEdgeVDCurveCollectionValidator * CreateDraftingEdgeVdcurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting silhouette vdcurve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDraftingSilhouetteVDCurveCollectionValidator * CreateDraftingSilhouetteVdcurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting section edge vdcurve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDraftingSectionEdgeVDCurveCollectionValidator * CreateDraftingSectionEdgeVdcurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting thread(thread silhouette and thread section edge)vdcurve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDraftingThreadVDCurveCollectionValidator * CreateDraftingThreadVdcurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting interference vdcurve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDraftingInterferenceVDCurveCollectionValidator * CreateDraftingInterferenceVdcurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting vi vdcurve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDraftingVIVDCurveCollectionValidator * CreateDraftingViVdcurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting simplified vdcurve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDraftingSimplifiedVDCurveCollectionValidator * CreateDraftingSimplifiedVdcurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting traceline vdcurve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDraftingTraceLineVDCurveCollectionValidator * CreateDraftingTraceLineVdcurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting uvhatch vdcurve collection validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDraftingUVHatchVDCurveCollectionValidator * CreateDraftingUvHatchVdcurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting vdcurve validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationVDCurveValidator * CreateVdcurveValidator
        (
            NXOpen::DisplayableObject * curve /** curve */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a layout2d component validator  @return  
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationLayout2dComponentValidator * CreateLayout2dComponentValidator
        (
            NXOpen::Layout2d::Component * component /** component */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a layout2d component structure validator  @return  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationLayout2dComponentStructureValidator * CreateLayout2dComponentStructureValidator
        (
            NXOpen::Layout2d::Component * component /** component */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a layout2d links validator  @return  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationLayout2dLinksValidator * CreateLayout2dLinksValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a DrawingSheet validator  @return  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDrawingSheetValidator * CreateDrawingSheetValidator
        (
            NXOpen::View * view /** view */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a DrawingSheets validator  @return  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationLayout2dDrawingSheetsValidator * CreateLayout2dDrawingSheetsValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Sketch structure validator  @return  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationLayout2dSketchStructureValidator * CreateLayout2dSketchStructureValidator
        (
            NXOpen::Sketch * sketch /** sketch */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting PMI Cutting Plane Symbol  validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationPMIPlanarCPSValidator * CreatePmiPlanarCpsValidator
        (
            NXOpen::Annotations::CuttingPlaneSymbol * plate /** plate */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting Base Arrow validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationBaseArrowValidator * CreateBaseArrowValidator
        (
            NXOpen::Annotations::BaseArrow * plate /** plate */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting Viewing Direction Arrow validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationViewingDirectionArrowValidator * CreateViewingDirectionArrowValidator
        (
            NXOpen::Drawings::ViewingDirectionArrow * plate /** plate */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting Viewing Direction Arrow Label validator  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationViewingDirectionArrowLabelValidator * CreateViewingDirectionArrowLabelValidator
        (
            NXOpen::Drawings::ViewingDirectionArrowLabel * plate /** plate */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Modeling View validator  @return  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationModelingViewsCollectionValidator * CreateModelingViewsCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a Drawing To 3D validator  @return  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDrawingTo3DValidator * CreateDrawingTo3dValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting drawing booklet validator  @return  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDrawingBookletValidator * CreateDrawingBookletValidator
        (
            NXOpen::Part * part /** part */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a thread vd curve validator  @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationThreadVDCurveValidator * CreateThreadVdcurveValidator
        (
            NXOpen::DisplayableObject * curve /** curve */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a drafting image validator  @return  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationDraftingImageValidator * CreateDraftingImageValidator
        (
            NXOpen::DisplayableObject * draftingImage /** draftingimage */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a dimension validator for sketch dimension.  @return  
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ValidationSketchDimensionValidator * CreateSketchDimensionValidator
        (
            NXOpen::Annotations::Dimension * dimension /** dimension */ 
        );

        /// \endcond 
    }; //lint !e1712 default constructor not defined for class  


    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
