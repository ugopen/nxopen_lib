#ifndef NXOpen_CAE_ROTORDYNAMICS_RECOMBINEANDMERGE_HXX_INCLUDED
#define NXOpen_CAE_ROTORDYNAMICS_RECOMBINEANDMERGE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_RotorDynamics_RecombineAndMerge.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace RotorDynamics
        {
            class RecombineAndMerge;
        }
    }
    class Session;
    namespace CAE
    {
        namespace RotorDynamics
        {
            class RecombineAndMergeImpl;
            /** Cyclic Symmetry Recombination for Rotor Dynamics  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
             <br>  Created in NX1953.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  RecombineAndMerge
            {
                private: RecombineAndMergeImpl * m_recombineandmerge_impl;
                private: NXOpen::Session* m_owner;
                /// \cond NX_NO_DOC 
                public: explicit RecombineAndMerge(NXOpen::Session *owner);


                /// \endcond 
                public: 
                /**Returns the tag of this object.  */
                tag_t Tag() const; 
                private: static RecombineAndMerge* theRecombineAndMerge;
                /** Returns the RecombineAndMerge object for the running session which serves as the 'gateway' class for the application API.  
                    References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                    Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
                */
                public: static RecombineAndMerge* GetRecombineAndMerge(NXOpen::Session *owner);
                public: ~RecombineAndMerge();
                /** Cyclic Symmetry: Recombine the Results 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Recombine
                (
                    const NXString & type /** type */ ,
                    const NXString & u18 /** u18 */ ,
                    double zoneValue /** zonevalue */ ,
                    bool executableFolderChoice /** executablefolderchoice */ ,
                    const NXString & executableFolder /** executablefolder */ ,
                    const NXString & configVar /** configvar */ 
                );
                /** Cyclic Symmetry: Recombine the Results 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                NXString Recombine
                (
                    const char * type /** type */ ,
                    const char * u18 /** u18 */ ,
                    double zoneValue /** zonevalue */ ,
                    bool executableFolderChoice /** executablefolderchoice */ ,
                    const char * executableFolder /** executablefolder */ ,
                    const char * configVar /** configvar */ 
                );
                /** Cyclic Symmetry: Merge the Results 2D-3D 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Merge
                (
                    bool isMergeOnly /** ismergeonly */ ,
                    const NXString & u18 /** u18 */ ,
                    double zoneValue /** zonevalue */ ,
                    bool executableFolderChoice /** executablefolderchoice */ ,
                    const NXString & executableFolder /** executablefolder */ ,
                    const NXString & configVar /** configvar */ 
                );
                /** Cyclic Symmetry: Merge the Results 2D-3D 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                NXString Merge
                (
                    bool isMergeOnly /** ismergeonly */ ,
                    const char * u18 /** u18 */ ,
                    double zoneValue /** zonevalue */ ,
                    bool executableFolderChoice /** executablefolderchoice */ ,
                    const char * executableFolder /** executablefolder */ ,
                    const char * configVar /** configvar */ 
                );
            }; //lint !e1712 default constructor not defined for class  

        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
