#ifndef NXOpen_FEATURES_THREADBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_THREADBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ThreadBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class ThreadBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class SelectDisplayableObject;
    namespace Features
    {
        class _ThreadBuilderBuilder;
        class ThreadBuilderImpl;
        /**
            Represents a @link Features::Thread Features::Thread@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateThreadBuilder  NXOpen::Features::FeatureCollection::CreateThreadBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        ExtendStart </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        HolePreference </term> <description> 
         
        TapDrillDiameter </description> </item> 

        <item><term> 
         
        MatchThreadSizeToCylinder </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        NumStarts </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        PitchMultiple.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShaftPreference </term> <description> 
         
        MajorDiameter </description> </item> 

        <item><term> 
         
        ThreadHandedness </term> <description> 
         
        RightHand </description> </item> 

        <item><term> 
         
        ThreadLength.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        ThreadLimit </term> <description> 
         
        Value </description> </item> 

        <item><term> 
         
        ThreadType </term> <description> 
         
        Symbolic </description> </item> 

        </list> 

         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  ThreadBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Represents thread types. */
            public: enum Type
            {
                TypeSymbolic/** Symbolic thread */,
                TypeDetailed/** Detailed thread */
            };

            /** Represents thread limit options. */
            public: enum LimitOption
            {
                LimitOptionValue/** Value limit option */,
                LimitOptionFull/** Full length option */,
                LimitOptionShortofFull/** Short of Full limit option */
            };

            /** Represents thread rotation options. */
            public: enum Handedness
            {
                HandednessRightHand/** Right rotation */,
                HandednessLeftHand/** Left rotation */
            };

            /** Represents hole size preference. */
            public: enum HoleSizePreference
            {
                HoleSizePreferenceTapDrillDiameter/** Hole size preference Tap Drill Diameter */,
                HoleSizePreferenceMajorDiameter/** Hole size preference Major Diameter */
            };

            /** Represents shaft size preference. */
            public: enum ShaftSizePreference
            {
                ShaftSizePreferenceMajorDiameter/** major diameter */ ,
                ShaftSizePreferenceShaftDiameter/** shaft diameter */ 
            };

            private: ThreadBuilderImpl * m_threadbuilder_impl;
            private: friend class  _ThreadBuilderBuilder;
            protected: ThreadBuilder();
            public: ~ThreadBuilder();
            /**Returns  the thread type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ThreadBuilder::Type ThreadType
            (
            );
            /**Sets  the thread type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadType
            (
                NXOpen::Features::ThreadBuilder::Type threadType /** threadtype */ 
            );
            /**Returns  the cylindrical face 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * CylindricalFace
            (
            );
            /**Returns  the start object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * StartObject
            (
            );
            /**Returns  the reverse thread direction 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseThreadDirection
            (
            );
            /**Sets  the reverse thread direction 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseThreadDirection
            (
                bool reverseThreadDirection /** reversethreaddirection */ 
            );
            /**Returns  the thread standard 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ThreadStandard
            (
            );
            /**Sets  the thread standard 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadStandard
            (
                const NXString & threadStandard /** threadstandard */ 
            );
            /**Sets  the thread standard 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetThreadStandard
            (
                const char * threadStandard /** threadstandard */ 
            );
            /**Returns  the cylinder diameter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double CylinderDiameter
            (
            );
            /**Returns  the smart thread 
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link NXOpen::Features::ThreadBuilder::MatchThreadSizeToCylinder NXOpen::Features::ThreadBuilder::MatchThreadSizeToCylinder@endlink  instead. <br>  

             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use NXOpen::Features::ThreadBuilder::MatchThreadSizeToCylinder instead.") bool SmartThread
            (
            );
            /**Sets  the smart thread 
             <br>  @deprecated Deprecated in NX1953.0.0.  Use @link NXOpen::Features::ThreadBuilder::SetMatchThreadSizeToCylinder NXOpen::Features::ThreadBuilder::SetMatchThreadSizeToCylinder@endlink  instead. <br>  

             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use NXOpen::Features::ThreadBuilder::SetMatchThreadSizeToCylinder instead.") void SetSmartThread
            (
                bool smartThread /** smartthread */ 
            );
            /**Returns  the thread size 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ThreadSize
            (
            );
            /**Sets  the thread size 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadSize
            (
                const NXString & threadSize /** threadsize */ 
            );
            /**Sets  the thread size 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetThreadSize
            (
                const char * threadSize /** threadsize */ 
            );
            /**Returns  the radial engage 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RadialEngage
            (
            );
            /**Sets  the radial engage 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRadialEngage
            (
                const NXString & radialEngage /** radialengage */ 
            );
            /**Sets  the radial engage 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetRadialEngage
            (
                const char * radialEngage /** radialengage */ 
            );
            /**Returns  the tap drill diameter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double TapDrillDiameter
            (
            );
            /**Returns  the shaft diameter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double ShaftDiameter
            (
            );
            /**Returns  the thread handedness 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ThreadBuilder::Handedness ThreadHandedness
            (
            );
            /**Sets  the thread handedness 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadHandedness
            (
                NXOpen::Features::ThreadBuilder::Handedness threadHandedness /** threadhandedness */ 
            );
            /**Returns  the num starts 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int NumStarts
            (
            );
            /**Sets  the num starts 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNumStarts
            (
                int numStarts /** numstarts */ 
            );
            /**Returns  the thread method 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ThreadMethod
            (
            );
            /**Sets  the thread method 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadMethod
            (
                const NXString & threadMethod /** threadmethod */ 
            );
            /**Sets  the thread method 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetThreadMethod
            (
                const char * threadMethod /** threadmethod */ 
            );
            /**Returns  the thread limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ThreadBuilder::LimitOption ThreadLimit
            (
            );
            /**Sets  the thread limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadLimit
            (
                NXOpen::Features::ThreadBuilder::LimitOption threadLimit /** threadlimit */ 
            );
            /**Returns  the thread length 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadLength
            (
            );
            /**Returns  the pitch multiple 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PitchMultiple
            (
            );
            /**Returns  the hole preference 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ThreadBuilder::HoleSizePreference HolePreference
            (
            );
            /**Sets  the hole preference 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHolePreference
            (
                NXOpen::Features::ThreadBuilder::HoleSizePreference holePreference /** holepreference */ 
            );
            /**Returns  the shaft preference 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ThreadBuilder::ShaftSizePreference ShaftPreference
            (
            );
            /**Sets  the shaft preference 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetShaftPreference
            (
                NXOpen::Features::ThreadBuilder::ShaftSizePreference shaftPreference /** shaftpreference */ 
            );
            /**Returns  the extend start 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ExtendStart
            (
            );
            /**Sets  the extend start 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtendStart
            (
                bool extendStart /** extendstart */ 
            );
            /**Returns  the match thread size to cylinder 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool MatchThreadSizeToCylinder
            (
            );
            /**Sets  the match thread size to cylinder 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchThreadSizeToCylinder
            (
                bool matchThreadSizeToCylinder /** matchthreadsizetocylinder */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
