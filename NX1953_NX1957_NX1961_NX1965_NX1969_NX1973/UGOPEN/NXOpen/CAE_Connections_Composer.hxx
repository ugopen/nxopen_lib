#ifndef NXOpen_CAE_CONNECTIONS_COMPOSER_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_COMPOSER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_Composer.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Connections_ComposerData.hxx>
#include <NXOpen/CAE_Connections_ConnectionDBData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class Composer;
        }
    }
    namespace CAE
    {
        class CaePart;
    }
    namespace CAE
    {
        namespace Connections
        {
            class ComposerData;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ConnectionDBData;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class LMIEConnection;
        }
    }
    namespace CAE
    {
        class SelectionRecipe;
    }
    class CoordinateSystem;
    class TaggedObject;
    class Unit;
    namespace CAE
    {
        namespace Connections
        {
            class _ComposerBuilder;
            class ComposerImpl;
            /** Composer. Use this interface to set/get/create properties and set/get parameters of the composer.  
             <br>  Created in NX12.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  Composer : public NXOpen::TaggedObject
            {
                private: ComposerImpl * m_composer_impl;
                private: friend class  _ComposerBuilder;
                protected: Composer();
                public: ~Composer();
                /** Create composer data. 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: NXOpen::CAE::Connections::ComposerData * CreateComposerData
                (
                );
                /**Returns  the composer data  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Connections::ComposerData * ComposerData
                (
                );
                /**Sets  the composer data  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void SetComposerData
                (
                    NXOpen::CAE::Connections::ComposerData * composerData /** composerdata */ 
                );
                /**Returns  the connection db data  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Connections::ConnectionDBData * ConnectionDBData
                (
                );
                /**Sets  the connection db data  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void SetConnectionDBData
                (
                    NXOpen::CAE::Connections::ConnectionDBData * connectionDBData /** connectiondbdata */ 
                );
                /** ReadAssemblyDefinition  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void ReadAssemblyDefinition
                (
                    const NXString & filePath /** filepath */ 
                );
                /** ReadAssemblyDefinition  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                void ReadAssemblyDefinition
                (
                    const char * filePath /** filepath */ 
                );
                /** WriteAssemblyDefinition  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void WriteAssemblyDefinition
                (
                    const NXString & filePath /** filepath */ 
                );
                /** WriteAssemblyDefinition  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                void WriteAssemblyDefinition
                (
                    const char * filePath /** filepath */ 
                );
                /** ReadConnectionsDB  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void ReadConnectionsDB
                (
                    const NXString & filePath /** filepath */ 
                );
                /** ReadConnectionsDB  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                void ReadConnectionsDB
                (
                    const char * filePath /** filepath */ 
                );
                /** GetMeshPartFromPID  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void GetMeshPartFromPID
                (
                    int pid /** pid */ ,
                    std::vector<NXOpen::TaggedObject *> & meshParts /** meshparts */ 
                );
                /** GetAxisFromAlias  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void GetAxisFromAlias
                (
                    const NXString & axisAlias /** axisalias */ ,
                    std::vector<NXOpen::CoordinateSystem *> & axes /** axes */ 
                );
                /** GetAxisFromAlias  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                void GetAxisFromAlias
                (
                    const char * axisAlias /** axisalias */ ,
                    std::vector<NXOpen::CoordinateSystem *> & axes /** axes */ 
                );
                /** GetGroupFromAlias  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void GetGroupFromAlias
                (
                    const NXString & axisAlias /** axisalias */ ,
                    std::vector<NXOpen::CAE::SelectionRecipe *> & groups /** groups */ 
                );
                /** GetGroupFromAlias  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                void GetGroupFromAlias
                (
                    const char * axisAlias /** axisalias */ ,
                    std::vector<NXOpen::CAE::SelectionRecipe *> & groups /** groups */ 
                );
                /** CheckAssemblyConnections  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: std::vector<NXString> CheckAssemblyConnections
                (
                );
                /** CheckAssemblyDocumentConnections  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: std::vector<NXString> CheckAssemblyDocumentConnections
                (
                    const NXString & documentName /** documentname */ 
                );
                /** CheckAssemblyDocumentConnections  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                std::vector<NXString> CheckAssemblyDocumentConnections
                (
                    const char * documentName /** documentname */ 
                );
                /** SearchPIDs  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void SearchPIDs
                (
                    const NXString & documentName /** documentname */ ,
                    bool* isAssemblyOpen /** isassemblyopen */ ,
                    std::vector<NXString> & listOfConnPIDsResults /** listofconnpidsresults */ ,
                    std::vector<NXString> & listOfMassPIDsResults /** listofmasspidsresults */ 
                );
                /** SearchPIDs  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                void SearchPIDs
                (
                    const char * documentName /** documentname */ ,
                    bool* isAssemblyOpen /** isassemblyopen */ ,
                    std::vector<NXString> & listOfConnPIDsResults /** listofconnpidsresults */ ,
                    std::vector<NXString> & listOfMassPIDsResults /** listofmasspidsresults */ 
                );
                /** Get MAT1 and MAT8 data from bdf file
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_gso_creation (" Simcenter GSO BIW Creation environment") */
                public: std::vector<NXString> GetMaterialsData
                (
                    const NXString & inputBdfFilePath /** inputbdffilepath */ 
                );
                /** Get MAT1 and MAT8 data from bdf file
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_gso_creation (" Simcenter GSO BIW Creation environment") */
                std::vector<NXString> GetMaterialsData
                (
                    const char * inputBdfFilePath /** inputbdffilepath */ 
                );
                /** SearchBoltComponentAndPIDs  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void SearchBoltComponentAndPIDs
                (
                    const NXString & documentName /** documentname */ ,
                    std::vector<NXString> & listOfConnPIDsResults /** listofconnpidsresults */ 
                );
                /** SearchBoltComponentAndPIDs  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                void SearchBoltComponentAndPIDs
                (
                    const char * documentName /** documentname */ ,
                    std::vector<NXString> & listOfConnPIDsResults /** listofconnpidsresults */ 
                );
                /** Get the intermediate connection representations of lumped mass connections loaded from external file. @return  The intermediate connection representations 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: std::vector<NXOpen::CAE::Connections::LMIEConnection *> GetLumpedMassData
                (
                );
                /** Set the intermediate connection representations of lumped mass connections loaded from external file.
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void SetLumpedMassData
                (
                    const std::vector<NXOpen::CAE::Connections::LMIEConnection *> & iConnections /** The intermediate connection representations */
                );
                /** Destroy the composer object 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") OR sc_gso_creation (" Simcenter GSO BIW Creation environment") OR nx_masterfem ("Finite Element Modeling") */
                public: void Destroy
                (
                );
                /** Import HardPoint From Xml 
                 <br>  @deprecated Deprecated in NX1899.0.0.  Use @link NXOpen::CAE::Connections::Composer::ImportAndUpdateHardPointFromXml NXOpen::CAE::Connections::Composer::ImportAndUpdateHardPointFromXml@endlink  instead. <br>  

                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: NX_DEPRECATED("Deprecated in NX1899.0.0.  Use NXOpen::CAE::Connections::Composer::ImportAndUpdateHardPointFromXml instead.") std::vector<NXOpen::CAE::SelectionRecipe *> ImportHardPointFromXml
                (
                    NXOpen::CAE::CaePart * tWorkPart /** tworkpart */ ,
                    const NXString & file /** file */ ,
                    bool isUpdate /** isupdate */ 
                );
                /** Import HardPoint From Xml 
                 <br>  @deprecated Deprecated in NX1899.0.0.  Use @link NXOpen::CAE::Connections::Composer::ImportAndUpdateHardPointFromXml NXOpen::CAE::Connections::Composer::ImportAndUpdateHardPointFromXml@endlink  instead. <br>  

                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                std::vector<NXOpen::CAE::SelectionRecipe *> ImportHardPointFromXml
                (
                    NXOpen::CAE::CaePart * tWorkPart /** tworkpart */ ,
                    const char * file /** file */ ,
                    bool isUpdate /** isupdate */ 
                );
                /** Export HardPoint To Xml 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void ExportHardPointToXml
                (
                    NXOpen::CAE::CaePart * tWorkPart /** tworkpart */ ,
                    NXOpen::Unit * tUnit /** tunit */ ,
                    const NXString & file /** file */ 
                );
                /** Export HardPoint To Xml 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void ExportHardPointToXml
                (
                    NXOpen::CAE::CaePart * tWorkPart /** tworkpart */ ,
                    NXOpen::Unit * tUnit /** tunit */ ,
                    const char * file /** file */ 
                );
                /** Migrate old XML format  
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void MigrateToHardPointFile
                (
                    const NXString & file /** file */ 
                );
                /** Migrate old XML format  
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void MigrateToHardPointFile
                (
                    const char * file /** file */ 
                );
                /** Import HardPoint From Excel and Modify its Node Label 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : sc_gso_creation (" Simcenter GSO BIW Creation environment") */
                public: std::vector<NXOpen::CAE::SelectionRecipe *> ImportAndModifyHardPointLabel
                (
                    NXOpen::CAE::CaePart * tWorkPart /** tworkpart */ ,
                    const NXString & file /** file */ 
                );
                /** Import HardPoint From Excel and Modify its Node Label 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : sc_gso_creation (" Simcenter GSO BIW Creation environment") */
                std::vector<NXOpen::CAE::SelectionRecipe *> ImportAndModifyHardPointLabel
                (
                    NXOpen::CAE::CaePart * tWorkPart /** tworkpart */ ,
                    const char * file /** file */ 
                );
                /** GetMeshPartInContextFromPID  
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : sc_nv_comp (" Simcenter NVH Composer") OR sc_gso_comp (" Simcenter NVH Composer") */
                public: void GetMeshPartInContextFromPID
                (
                    NXOpen::CAE::CaePart * tWorkPart /** tworkpart */ ,
                    int pid /** pid */ ,
                    std::vector<NXOpen::TaggedObject *> & meshParts /** meshparts */ 
                );
                /** Import HardPoint From Xml if does not exist and replace/update it otherwise
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void ImportAndUpdateHardPointFromXml
                (
                    NXOpen::CAE::CaePart * tWorkPart /** I - The work part tag */,
                    const NXString & file /** The XML file name */,
                    bool isUpdate /** Flag to specify the status of update */,
                    std::vector<NXOpen::CAE::SelectionRecipe *> & selrecipes /** Array of created recipe tags */,
                    std::vector<NXOpen::CAE::SelectionRecipe *> & updatedSelrecipes /** Array of replaced recipe tags */
                );
                /** Import HardPoint From Xml if does not exist and replace/update it otherwise
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void ImportAndUpdateHardPointFromXml
                (
                    NXOpen::CAE::CaePart * tWorkPart /** I - The work part tag */,
                    const char * file /** The XML file name */,
                    bool isUpdate /** Flag to specify the status of update */,
                    std::vector<NXOpen::CAE::SelectionRecipe *> & selrecipes /** Array of created recipe tags */,
                    std::vector<NXOpen::CAE::SelectionRecipe *> & updatedSelrecipes /** Array of replaced recipe tags */
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
