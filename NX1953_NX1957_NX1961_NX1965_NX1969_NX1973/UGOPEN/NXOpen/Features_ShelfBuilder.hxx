#ifndef NXOpen_FEATURES_SHELFBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHELFBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShelfBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class ShelfBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class ProjectionOptions;
    }
    class Plane;
    class Point;
    class ScCollector;
    class Section;
    namespace Features
    {
        class _ShelfBuilderBuilder;
        class ShelfBuilderImpl;
        /**
            Represents a @link NXOpen::Features::Shelf NXOpen::Features::Shelf@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::AeroCollection::CreateShelfBuilder  NXOpen::Features::AeroCollection::CreateShelfBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        DepthDimension.Value </term> <description> 
         
        5 (millimeters part), 0.25 (inches part) </description> </item> 

        <item><term> 
         
        DepthMethod </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        Length1.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        Length2.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        LengthDimension.Value </term> <description> 
         
        25 (millimeters part), 1.0 (inches part) </description> </item> 

        <item><term> 
         
        LengthMethod </term> <description> 
         
        Full </description> </item> 

        <item><term> 
         
        OffsetDimension.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        RampLength1.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        RampLength2.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        RefType1 </term> <description> 
         
        Face </description> </item> 

        <item><term> 
         
        RefType2 </term> <description> 
         
        Face </description> </item> 

        <item><term> 
         
        ShelfType (deprecated) </term> <description> 
         
        End </description> </item> 

        <item><term> 
         
        StepMethod1 </term> <description> 
         
        Normal </description> </item> 

        <item><term> 
         
        StepMethod2 </term> <description> 
         
        Normal </description> </item> 

        <item><term> 
         
        Type </term> <description> 
         
        End </description> </item> 

        <item><term> 
         
        WidthDimension.Value </term> <description> 
         
        5 (millimeters part), 0.25 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  ShelfBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Type of shelf. It has end and middle type*/
            public: enum Types
            {
                TypesEnd/** end */ ,
                TypesMiddle/** middle */ 
            };

            /** Depth Method for Length */
            public: enum LengthMethods
            {
                LengthMethodsFull/** full */ ,
                LengthMethodsShelfFromEnd/** shelf from end */ ,
                LengthMethodsStepFromEnd/** step from end */ ,
                LengthMethodsToSelected/** to selected */ 
            };

            /** Type of Reference Object */
            public: enum ReferenceType
            {
                ReferenceTypeFace/** face */ ,
                ReferenceTypeDatumPlane/** datum plane */ ,
                ReferenceTypeCurve/** curve */ ,
                ReferenceTypePoint/** point */ 
            };

            /** Step Method for Side Face*/
            public: enum StepMethod
            {
                StepMethodNormal/** normal */ ,
                StepMethodAlignwithReferenceFace/** alignwith reference face */ ,
                StepMethodRamp/** ramp */ 
            };

            /** Depth Method for Depth Face*/
            public: enum DepthMethods
            {
                DepthMethodsOffset/** offset */ ,
                DepthMethodsToNextWall/** to next wall */ 
            };

            private: ShelfBuilderImpl * m_shelfbuilder_impl;
            private: friend class  _ShelfBuilderBuilder;
            protected: ShelfBuilder();
            public: ~ShelfBuilder();
            /**Returns  the type 
             <br>  @deprecated Deprecated in NX12.0.1.  This functionality is no longer supported. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX12.0.1.  This functionality is no longer supported.") NXOpen::Features::ShelfBuilder::Types ShelfType
            (
            );
            /**Sets  the type 
             <br>  @deprecated Deprecated in NX12.0.1.  This functionality is no longer supported. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: NX_DEPRECATED("Deprecated in NX12.0.1.  This functionality is no longer supported.") void SetShelfType
            (
                NXOpen::Features::ShelfBuilder::Types type /** type */ 
            );
            /**Returns  the flat type 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ShelfBuilder::Types Type
            (
            );
            /**Sets  the flat type 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetType
            (
                NXOpen::Features::ShelfBuilder::Types type /** type */ 
            );
            /**Returns  the shelf edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ShelfEdge
            (
            );
            /**Returns  the length method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ShelfBuilder::LengthMethods LengthMethod
            (
            );
            /**Sets  the length method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetLengthMethod
            (
                NXOpen::Features::ShelfBuilder::LengthMethods lengthMethod /** lengthmethod */ 
            );
            /**Returns  the length dimension  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LengthDimension
            (
            );
            /**Returns  the selected face 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * Selectface
            (
            );
            /**Returns  the offset dimension  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetDimension
            (
            );
            /**Returns  the shelf end 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShelfEnd
            (
            );
            /**Sets  the shelf end 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetShelfEnd
            (
                bool shelfEnd /** shelfend */ 
            );
            /**Returns  the ref type1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ShelfBuilder::ReferenceType RefType1
            (
            );
            /**Sets  the ref type1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetRefType1
            (
                NXOpen::Features::ShelfBuilder::ReferenceType refType1 /** reftype1 */ 
            );
            /**Returns  the limit face1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * LimitFace1
            (
            );
            /**Returns  the limit plane1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * LimitPlane1
            (
            );
            /**Sets  the limit plane1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetLimitPlane1
            (
                NXOpen::Plane * limitPlane1 /** limitplane1 */ 
            );
            /**Returns  the limit curve1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * LimitCurve1
            (
            );
            /**Returns  the limit point1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * LimitPoint1
            (
            );
            /**Sets  the limit point1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetLimitPoint1
            (
                NXOpen::Point * limitPoint1 /** limitpoint1 */ 
            );
            /**Returns  the project direction 1
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ProjectionOptions * ProjectionDir1
            (
            );
            /**Returns  the project direction 2
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ProjectionOptions * ProjectionDir2
            (
            );
            /**Returns  the length1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Length1
            (
            );
            /**Returns  the step method1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ShelfBuilder::StepMethod StepMethod1
            (
            );
            /**Sets  the step method1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetStepMethod1
            (
                NXOpen::Features::ShelfBuilder::StepMethod stepMethod1 /** stepmethod1 */ 
            );
            /**Returns  the ramp length1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RampLength1
            (
            );
            /**Returns  the ref type2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ShelfBuilder::ReferenceType RefType2
            (
            );
            /**Sets  the ref type2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetRefType2
            (
                NXOpen::Features::ShelfBuilder::ReferenceType refType2 /** reftype2 */ 
            );
            /**Returns  the limit face2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * LimitFace2
            (
            );
            /**Returns  the limit plane2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * LimitPlane2
            (
            );
            /**Sets  the limit plane2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetLimitPlane2
            (
                NXOpen::Plane * limitPlane2 /** limitplane2 */ 
            );
            /**Returns  the limit curve2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * LimitCurve2
            (
            );
            /**Returns  the limit point2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * LimitPoint2
            (
            );
            /**Sets  the limit point2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetLimitPoint2
            (
                NXOpen::Point * limitPoint2 /** limitpoint2 */ 
            );
            /**Returns  the length2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Length2
            (
            );
            /**Returns  the step method2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ShelfBuilder::StepMethod StepMethod2
            (
            );
            /**Sets  the step method2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetStepMethod2
            (
                NXOpen::Features::ShelfBuilder::StepMethod stepMethod2 /** stepmethod2 */ 
            );
            /**Returns  the ramp length2 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RampLength2
            (
            );
            /**Returns  the width dimension  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * WidthDimension
            (
            );
            /**Returns  whether reverse width direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseWidthDirection
            (
            );
            /**Sets  whether reverse width direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetReverseWidthDirection
            (
                bool reverseWidthDirection /** reversewidthdirection */ 
            );
            /**Returns  the swap 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool Swap
            (
            );
            /**Sets  the swap 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetSwap
            (
                bool swap /** swap */ 
            );
            /**Returns  the depth method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ShelfBuilder::DepthMethods DepthMethod
            (
            );
            /**Sets  the depth method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetDepthMethod
            (
                NXOpen::Features::ShelfBuilder::DepthMethods depthMethod /** depthmethod */ 
            );
            /**Returns  the depth dimension  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DepthDimension
            (
            );
            /**Returns  whether reverse depth direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseDepthDirection
            (
            );
            /**Sets  whether reverse depth direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetReverseDepthDirection
            (
                bool reverseDepthDirection /** reversedepthdirection */ 
            );
            /**Returns  the loop direction of start end point 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Vector3d LoopDirection
            (
            );
            /**Sets  the loop direction of start end point 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetLoopDirection
            (
                const NXOpen::Vector3d & loopDirection /** loopdirection */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
