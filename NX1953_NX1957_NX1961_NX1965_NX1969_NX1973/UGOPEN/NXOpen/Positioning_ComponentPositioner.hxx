#ifndef NXOpen_POSITIONING_COMPONENTPOSITIONER_HXX_INCLUDED
#define NXOpen_POSITIONING_COMPONENTPOSITIONER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Positioning_ComponentPositioner.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Positioning_Positioner.hxx>
#include <NXOpen/libnxopencpp_positioning_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Positioning
    {
        class ComponentPositioner;
    }
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Positioning
    {
        class ComponentConstraint;
    }
    namespace Positioning
    {
        class ComponentConstraintGroup;
    }
    namespace Positioning
    {
        class Positioner;
    }
    namespace Positioning
    {
        class _ComponentPositionerBuilder;
        class ComponentPositionerImpl;
        /**
          An instance of this class can be used to create @link NXOpen::Positioning::Constraint NXOpen::Positioning::Constraint@endlink s and
          associated objects.
         <br> To obtain an instance of this class, use @link NXOpen::Assemblies::ComponentAssembly::Positioner  NXOpen::Assemblies::ComponentAssembly::Positioner @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_POSITIONINGEXPORT  ComponentPositioner : public NXOpen::Positioning::Positioner
        {
            private: ComponentPositionerImpl * m_componentpositioner_impl;
            private: friend class  _ComponentPositionerBuilder;
            protected: ComponentPositioner();
            public: ~ComponentPositioner();
            /**Returns 
                    the flag indicating whether constraints in the part of this positioner
                    are to be displayed on the graphics window or not.  (This is a separate
                    system from hiding and showing individual constraints.)  This flag controls the
                    visibility of both suppressed and unsuppressed constraints.
                
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool DisplayConstraints
            (
            );
            /**Sets 
                    the flag indicating whether constraints in the part of this positioner
                    are to be displayed on the graphics window or not.  (This is a separate
                    system from hiding and showing individual constraints.)  This flag controls the
                    visibility of both suppressed and unsuppressed constraints.
                
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDisplayConstraints
            (
                bool display /** display */ 
            );
            /**Returns 
                    the flag indicating whether suppressed constraints in the part of this positioner
                    are to be displayed on the graphics window or not.  (This is a separate
                    system from hiding and showing individual constraints.)
                
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool DisplaySuppressedConstraints
            (
            );
            /**Sets 
                    the flag indicating whether suppressed constraints in the part of this positioner
                    are to be displayed on the graphics window or not.  (This is a separate
                    system from hiding and showing individual constraints.)
                
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDisplaySuppressedConstraints
            (
                bool display /** display */ 
            );
            /**Returns  
                    the @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  in which the 
                    primary @link NXOpen::Positioning::Network NXOpen::Positioning::Network@endlink  will solve.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Arrangement * PrimaryArrangement
            (
            );
            /**Sets  
                    the @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  in which the 
                    primary @link NXOpen::Positioning::Network NXOpen::Positioning::Network@endlink  will solve.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetPrimaryArrangement
            (
                NXOpen::Assemblies::Arrangement * arrangement /** The primary @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink . */
            );
            /** 
                    Begins a mode of operation where (1) each new @link NXOpen::Positioning::Constraint NXOpen::Positioning::Constraint@endlink 
                    is created as transient and (2) a component transform is applied at the level where 
                    position is controlled for the component, typically in the component's immediate parent.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void BeginMoveComponent
            (
            );
            /** 
                    Ends the mode of operation started by 
                    @link NXOpen::Positioning::ComponentPositioner::BeginMoveComponent NXOpen::Positioning::ComponentPositioner::BeginMoveComponent@endlink 
                    All constraints created while in that mode will be deleted.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void EndMoveComponent
            (
            );
            /** 
                    Begins a mode of operation where (1) each new @link NXOpen::Positioning::Constraint NXOpen::Positioning::Constraint@endlink 
                    created by this @link NXOpen::Positioning::ComponentPositioner NXOpen::Positioning::ComponentPositioner@endlink  applies to
                    components in the part of the positioner (or to components with variable component positioning
                    defined in the part of the positioner) and (2) and component transforms derived from
                    a @link NXOpen::Positioning::Network NXOpen::Positioning::Network@endlink  will apply to components in the part of the positioner.
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void BeginAssemblyConstraints
            (
            );
            /** 
                    Ends the mode of operation started by 
                    @link NXOpen::Positioning::ComponentPositioner::BeginAssemblyConstraints NXOpen::Positioning::ComponentPositioner::BeginAssemblyConstraints@endlink 
                    All non-persistent constraints in this @link NXOpen::Positioning::ComponentPositioner NXOpen::Positioning::ComponentPositioner@endlink 
                    will be deleted.
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void EndAssemblyConstraints
            (
            );
            /**
                    Begins a mode of operation where (1) each new @link NXOpen::Positioning::Constraint NXOpen::Positioning::Constraint@endlink 
                    is created as transient and (2) a component transform is applied at the workset level.
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void BeginMoveComponentInWorkset
            (
            );
            /**
                    Ends the mode of operation started by
                    @link NXOpen::Positioning::ComponentPositioner::BeginMoveComponentInWorkset NXOpen::Positioning::ComponentPositioner::BeginMoveComponentInWorkset@endlink 
                    All constraints created while in that mode will be deleted.
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void EndMoveComponentInWorkset
            (
            );
            /**
                    Attempts to load all the parts that contain unloaded geometry that is referenced by the constraints
                    or by any related constraints. The constraints must be within the positioner otherwise an error will be
                    raised. Any constraints that are suppressed will be ignored.

                    If the number of constraints is zero then the function attempts to load the parts for every unsuppressed
                    constraint in the positioner.

                    Calling this function can cause objects to be logged for update and therefore the caller of this function
                    must call update.
                
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void LoadConstraintGeometry
            (
                const std::vector<NXOpen::Positioning::ComponentConstraint *> & constraints /** Constraints */
            );
            /**Returns  the flag that enables the positioner to reposition dumb geometry.  Dumb geometry
                    is any geometry that is not controlled by another object such as a 
                    @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  object.  This flag has no effect
                    on Routing geometry (segments and control points) as they are always considered
                    movable by the positioner.
                
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool MoveDumbGeometry
            (
            );
            /**Sets  the flag that enables the positioner to reposition dumb geometry.  Dumb geometry
                    is any geometry that is not controlled by another object such as a 
                    @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink  object.  This flag has no effect
                    on Routing geometry (segments and control points) as they are always considered
                    movable by the positioner.
                
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetMoveDumbGeometry
            (
                bool moveDumbGeometry /** Whether the positioner will reposition dumb geometry */
            );
            /**
                    Solves constraints in all arrangements that are currently postponing 
                    their solve. This could lead to updating the model if required.  This call
                    will have no effect if assembly constraint update has been delayed. 
                
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SolvePostponedConstraints
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
