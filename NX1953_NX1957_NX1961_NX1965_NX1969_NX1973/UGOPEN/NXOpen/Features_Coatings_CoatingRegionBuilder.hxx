#ifndef NXOpen_FEATURES_COATINGS_COATINGREGIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_COATINGS_COATINGREGIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_Coatings_CoatingRegionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_Coatings_RegionListItemBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libcoatingsopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace Coatings
        {
            class CoatingRegionBuilder;
        }
    }
    namespace Features
    {
        namespace Coatings
        {
            class RegionListItemBuilder;
        }
    }
    namespace Features
    {
        namespace Coatings
        {
            class RegionListItemBuilderList;
        }
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class ProjectionOptions;
    }
    class NXObject;
    class Point;
    class ScCollector;
    class SelectTaggedObjectList;
    namespace Features
    {
        namespace Coatings
        {
            class _CoatingRegionBuilderBuilder;
            class CoatingRegionBuilderImpl;
            /**
                     * Defines a builder for creating @link NXOpen::Features::Coatings::CoatingRegion NXOpen::Features::Coatings::CoatingRegion@endlink  objects,
                     * which are used by the Coatings application.
                      <br> To create a new instance of this class, use @link NXOpen::Features::CoatingsCollection::CreateCoatingsCoatingRegionBuilder  NXOpen::Features::CoatingsCollection::CreateCoatingsCoatingRegionBuilder @endlink  <br> 
             <br>  Created in NX1926.0.0.  <br>  
            */
            class COATINGSOPENCPPEXPORT  CoatingRegionBuilder : public NXOpen::Features::FeatureBuilder
            {
                private: CoatingRegionBuilderImpl * m_coatingregionbuilder_impl;
                private: friend class  _CoatingRegionBuilderBuilder;
                protected: CoatingRegionBuilder();
                public: ~CoatingRegionBuilder();
                /**Returns  the target face 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * TargetFace
                (
                );
                /**Returns  the boundary object 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectTaggedObjectList * BoundaryObject
                (
                );
                /**Returns  the projection direction 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricUtilities::ProjectionOptions * ProjectionDirection
                (
                );
                /**Returns  the logical to imprint both side or not 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool ImprintBothSide
                (
                );
                /**Sets  the logical to imprint both side or not 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void SetImprintBothSide
                (
                    bool imprintBothSide /** imprintbothside */ 
                );
                /** The region selection type dim object's create function
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: NXOpen::Features::Coatings::RegionListItemBuilder * CreateRegionListItem
                (
                );
                /**Returns  the region list 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::Coatings::RegionListItemBuilderList * RegionList
                (
                );
                /** Gets the selected region points 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::Point *> GetSelectedRegionPoints
                (
                );
                /** Sets the selected region points 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void SetSelectedRegionPoints
                (
                    const std::vector<NXOpen::Point *> & regionPoints /** regionpoints */ 
                );
                /** Insert to region point - boundary map 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void InsertPointBoundaryMap
                (
                    NXOpen::NXObject * regionPoint /** regionpoint */ ,
                    const std::vector<NXOpen::NXObject *> & regionBoundaries /** regionboundaries */ 
                );
                /** Erase the key value from region point - boundary map 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void ErasePointBoundaryMap
                (
                    NXOpen::NXObject * regionPoint /** regionpoint */ 
                );
                /** Insert to region point - laminar edges map 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void InsertPointLaminarMap
                (
                    NXOpen::NXObject * regionPoint /** regionpoint */ ,
                    const std::vector<NXOpen::NXObject *> & regionLaminarEdges /** regionlaminaredges */ 
                );
                /** Erase the key value from region point - laminar edges map 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void ErasePointLaminarMap
                (
                    NXOpen::NXObject * regionPoint /** regionpoint */ 
                );
                /**Returns  the distance tolerance 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double DistanceTolerance
                (
                );
                /**Sets  the distance tolerance 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void SetDistanceTolerance
                (
                    double distanceTolerance /** distancetolerance */ 
                );
                /**Returns  the logical to hide boundary objects or not 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsHideBoundaryObjects
                (
                );
                /**Sets  the logical to hide boundary objects or not 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void SetHideBoundaryObjects
                (
                    bool isHideBoundaryObjects /** ishideboundaryobjects */ 
                );
                /** Gets the selected region faces 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::NXObject *> GetSelectedRegionFaces
                (
                );
                /** Sets the selected region faces 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void SetSelectedRegionFaces
                (
                    const std::vector<NXOpen::NXObject *> & regionFaces /** regionfaces */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
