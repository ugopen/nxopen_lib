#ifndef NXOpen_SIM_SMKWIZARDBUILDER_HXX_INCLUDED
#define NXOpen_SIM_SMKWIZARDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_SmkWizardBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        class SmkWizardBuilder;
    }
    class Builder;
    class CartesianCoordinateSystem;
    class NXObject;
    namespace SIM
    {
        class SmkMachineKitEditorBuilder;
    }
    namespace SIM
    {
        class _SmkWizardBuilderBuilder;
        class SmkWizardBuilderImpl;
        /**  @brief  Represents the SimSmkWizardBuilder class object  

            <br> Use the @link NXOpen::SIM::KinematicConfigurator NXOpen::SIM::KinematicConfigurator@endlink  class to create a SmkWizardBuilder object.  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_SIMEXPORT  SmkWizardBuilder : public NXOpen::Builder
        {
            /** The pocket transform type */
            public: enum PocketTransformType
            {
                PocketTransformTypeTranslateDelta/** translate delta */ ,
                PocketTransformTypeTranslateToPoint/** translate to point */ ,
                PocketTransformTypeRotateTwoPoint/** rotate two point */ ,
                PocketTransformTypeRotatePointVector/** rotate point vector */ 
            };

            /** The junction classification */
            public: enum JunctionClassificationType
            {
                JunctionClassificationTypeNone/** no specal class */,
                JunctionClassificationTypeToolMount/** a mounting junction */,
                JunctionClassificationTypeMachineZero/** the machine zero junction */,
                JunctionClassificationTypeLatheWpZx/** Lathe Work Plane Z/X */,
                JunctionClassificationTypeLatheWpXy/** Lathe Work Plane X/Y */,
                JunctionClassificationTypeHeadMount/** head mount junction */
            };

            /** The axis direction type */
            public: enum AxisDirectionType
            {
                AxisDirectionTypePositiveX/** positive X-axis */,
                AxisDirectionTypeNegativeX/** negative X-axis */,
                AxisDirectionTypePositiveY/** positive Y-axis */,
                AxisDirectionTypeNegativeY/** negative Y-axis */,
                AxisDirectionTypePositiveZ/** positive Z-axis */,
                AxisDirectionTypeNegativeZ/** negative Z-axis */
            };

            /** The axis motions type */
            public: enum AxisMotionType
            {
                AxisMotionTypeLinear/** linear axis    */,
                AxisMotionTypeRotary/** rotary axis    */,
                AxisMotionTypeRotaryUnlimited/**rotary axis unlimited*/,
                AxisMotionTypeSpindle/** spindle    */
            };

            /** The archieve file type */
            public: enum ArchieveFileType
            {
                ArchieveFileTypeNone/** no archieve file */,
                ArchieveFileTypeSpecify/** user archieve file */
            };

            /** The device template type */
            public: enum DeviceTemplateType
            {
                DeviceTemplateTypeNone/** no special device   */,
                DeviceTemplateTypeSpecify/** user defined device */
            };

            /** The machine kit output type */
            public: enum OutputType
            {
                OutputTypeInstalledMachines/** current installed machines folder */,
                OutputTypeMtk/** mtk file */
            };

            private: SmkWizardBuilderImpl * m_smkwizardbuilder_impl;
            private: friend class  _SmkWizardBuilderBuilder;
            protected: SmkWizardBuilder();
            public: ~SmkWizardBuilder();
            /**Returns  the machine kit editor builder 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::SmkMachineKitEditorBuilder * MachineKitEditorBuilder
            (
            );
            /**Sets  the machine kit editor builder 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetMachineKitEditorBuilder
            (
                NXOpen::SIM::SmkMachineKitEditorBuilder * machineKitEditorBuilder /** The machine kit editor builder */
            );
            /**Returns  the machine template name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MachineTemplate
            (
            );
            /**Sets  the machine template name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetMachineTemplate
            (
                const NXString & machineTemplateName /** The machine template name */
            );
            /**Sets  the machine template name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetMachineTemplate
            (
                const char * machineTemplateName /** The machine template name */
            );
            /**Returns  the machine archive template enum 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::SmkWizardBuilder::ArchieveFileType ArchieveFile
            (
            );
            /**Sets  the machine archive template enum 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetArchieveFile
            (
                NXOpen::SIM::SmkWizardBuilder::ArchieveFileType archieveFileEnum /** The machine archive template enum */
            );
            /**Returns  the machine template file path 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MachineTemplateFilePath
            (
            );
            /**Sets  the machine template file path 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetMachineTemplateFilePath
            (
                const NXString & machineTemplateFilePath /** The machine template file path */
            );
            /**Sets  the machine template file path 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetMachineTemplateFilePath
            (
                const char * machineTemplateFilePath /** The machine template file path */
            );
            /**Returns  the smart machine template file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ArchieveTemplateFilePath
            (
            );
            /**Sets  the smart machine template file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetArchieveTemplateFilePath
            (
                const NXString & archieveTemplateFilePath /** The smart machine template file path */
            );
            /**Sets  the smart machine template file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetArchieveTemplateFilePath
            (
                const char * archieveTemplateFilePath /** The smart machine template file path */
            );
            /**Returns  the smart machine Machine file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ArchieveMachineFilePath
            (
            );
            /**Sets  the smart machine Machine file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetArchieveMachineFilePath
            (
                const NXString & archieveMachineFilePath /** The smart machine Machine file path */
            );
            /**Sets  the smart machine Machine file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetArchieveMachineFilePath
            (
                const char * archieveMachineFilePath /** The smart machine Machine file path */
            );
            /** Sets the machine archive data to Machine Kit Editor 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetArchieveData
            (
            );
            /** Gets the classification of the junction  @return  The junction classification 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::SmkWizardBuilder::JunctionClassificationType GetJunctionClassification
            (
                const NXString & junctionName /** The junction fullname */
            );
            /** Gets the classification of the junction  @return  The junction classification 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::SIM::SmkWizardBuilder::JunctionClassificationType GetJunctionClassification
            (
                const char * junctionName /** The junction fullname */
            );
            /** Sets the classification of the junction 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetJunctionClassification
            (
                const NXString & junctionName /** The junction fullname */,
                NXOpen::SIM::SmkWizardBuilder::JunctionClassificationType jctClass /** The junction classification */
            );
            /** Sets the classification of the junction 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetJunctionClassification
            (
                const char * junctionName /** The junction fullname */,
                NXOpen::SIM::SmkWizardBuilder::JunctionClassificationType jctClass /** The junction classification */
            );
            /** Gets the junction origin  @return  The junction origin 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d GetJunctionOrigin
            (
                const NXString & junctionName /** The junction fullname */
            );
            /** Gets the junction origin  @return  The junction origin 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Point3d GetJunctionOrigin
            (
                const char * junctionName /** The junction fullname */
            );
            /** Gets the junction matrix  @return  The junction matrix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 GetJunctionMatrix
            (
                const NXString & junctionName /** The junction fullname */
            );
            /** Gets the junction matrix  @return  The junction matrix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Matrix3x3 GetJunctionMatrix
            (
                const char * junctionName /** The junction fullname */
            );
            /** Sets the CSYS associated with the junction 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetJunctionCsys
            (
                const NXString & junctionName /** The junction fullname */,
                NXOpen::CartesianCoordinateSystem * csys /** The csys */
            );
            /** Sets the CSYS associated with the junction 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetJunctionCsys
            (
                const char * junctionName /** The junction fullname */,
                NXOpen::CartesianCoordinateSystem * csys /** The csys */
            );
            /** Adds a single geometry element 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void AddGeometry
            (
                const NXString & componentName /** The component name */,
                NXOpen::NXObject * geo /** The geometry element to add */
            );
            /** Adds a single geometry element 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void AddGeometry
            (
                const char * componentName /** The component name */,
                NXOpen::NXObject * geo /** The geometry element to add */
            );
            /** Deletes a single geometry element from the component 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteGeometry
            (
                const NXString & componentName /** The component name */,
                NXOpen::NXObject * geo /** The geometry to remove */
            );
            /** Deletes a single geometry element from the component 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void DeleteGeometry
            (
                const char * componentName /** The component name */,
                NXOpen::NXObject * geo /** The geometry to remove */
            );
            /** Sets geometry elements for the component 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetGeometries
            (
                const NXString & componentName /** The component name */,
                const std::vector<NXOpen::NXObject *> & geos /** The geometry elements */
            );
            /** Sets geometry elements for the component 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetGeometries
            (
                const char * componentName /** The component name */,
                const std::vector<NXOpen::NXObject *> & geos /** The geometry elements */
            );
            /** Returns the geometry elements assigned to this component 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void GetGeometries
            (
                const NXString & componentName /** The component name */,
                std::vector<NXOpen::NXObject *> & geos /** The geometry elements */
            );
            /** Returns the geometry elements assigned to this component 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void GetGeometries
            (
                const char * componentName /** The component name */,
                std::vector<NXOpen::NXObject *> & geos /** The geometry elements */
            );
            /** Deletes all geometry elements from the component 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteAllGeometries
            (
                const NXString & componentName /** The component name */
            );
            /** Deletes all geometry elements from the component 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void DeleteAllGeometries
            (
                const char * componentName /** The component name */
            );
            /** Gets the axis junction name  @return  The junction name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetAxisJunctionName
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis junction name  @return  The junction name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXString GetAxisJunctionName
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis junction name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisJunctionName
            (
                const NXString & axisName /** The axis name */,
                const NXString & junctionName /** The junction name */
            );
            /** Sets the axis junction name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisJunctionName
            (
                const char * axisName /** The axis name */,
                const char * junctionName /** The junction name */
            );
            /** Get the axis direction  @return  The axis direction 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::SmkWizardBuilder::AxisDirectionType GetAxisDirection
            (
                const NXString & axisName /** The axis name */
            );
            /** Get the axis direction  @return  The axis direction 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::SIM::SmkWizardBuilder::AxisDirectionType GetAxisDirection
            (
                const char * axisName /** The axis name */
            );
            /** Set the axis direction 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisDirection
            (
                const NXString & axisName /** The axis name */,
                NXOpen::SIM::SmkWizardBuilder::AxisDirectionType axisDir /** The axis direction */
            );
            /** Set the axis direction 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisDirection
            (
                const char * axisName /** The axis name */,
                NXOpen::SIM::SmkWizardBuilder::AxisDirectionType axisDir /** The axis direction */
            );
            /** Get the axis motion  @return  The axis motion  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::SmkWizardBuilder::AxisMotionType GetAxisMotion
            (
                const NXString & axisName /** The axis name */,
                bool* isNcAxis /** The flag if axis is nc axis */
            );
            /** Get the axis motion  @return  The axis motion  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::SIM::SmkWizardBuilder::AxisMotionType GetAxisMotion
            (
                const char * axisName /** The axis name */,
                bool* isNcAxis /** The flag if axis is nc axis */
            );
            /** Set the axis motion 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisMotion
            (
                const NXString & axisName /** The axis name */,
                bool isNcAxis /** The flag if axis is nc axis */,
                NXOpen::SIM::SmkWizardBuilder::AxisMotionType type /** The axis motion */
            );
            /** Set the axis motion 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisMotion
            (
                const char * axisName /** The axis name */,
                bool isNcAxis /** The flag if axis is nc axis */,
                NXOpen::SIM::SmkWizardBuilder::AxisMotionType type /** The axis motion */
            );
            /** Gets the axis number.
                    The axis number is used in cases where an axis is programmed through a number 
                    instead of through an address (e.g. on Siemens 840D: AX1=10 instead of X10). @return  The axis's number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int GetAxisNumber
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis number.
                    The axis number is used in cases where an axis is programmed through a number 
                    instead of through an address (e.g. on Siemens 840D: AX1=10 instead of X10). @return  The axis's number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            int GetAxisNumber
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis number.
                    The axis number is used in cases where an axis is programmed through a number 
                    instead of through an address (e.g. on Siemens 840D: AX1=10 instead of X10).
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisNumber
            (
                const NXString & axisName /** The axis name */,
                int number /** the axis's new number */
            );
            /** Sets the axis number.
                    The axis number is used in cases where an axis is programmed through a number 
                    instead of through an address (e.g. on Siemens 840D: AX1=10 instead of X10).
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisNumber
            (
                const char * axisName /** The axis name */,
                int number /** the axis's new number */
            );
            /** Gets the axis initial value  @return  The initial value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisInitialValue
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis initial value  @return  The initial value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisInitialValue
            (
                const char * axisName /** The axis name */
            );
            /** Gets the axis initial value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisInitialValue
            (
                const NXString & axisName /** The axis name */,
                double initialValue /** The initial value */
            );
            /** Gets the axis initial value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisInitialValue
            (
                const char * axisName /** The axis name */,
                double initialValue /** The initial value */
            );
            /** Gets the axis upper limit  @return  The upper limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisUpperLimit
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis upper limit  @return  The upper limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisUpperLimit
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis upper limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisUpperLimit
            (
                const NXString & axisName /** The axis name */,
                double upperValue /** The upper limit */
            );
            /** Sets the axis upper limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisUpperLimit
            (
                const char * axisName /** The axis name */,
                double upperValue /** The upper limit */
            );
            /** Gets the axis upper soft limit.
                        The soft limit on the real machine is checked by the controller to avoid that the machine
                        travels into the mechanical stop (Hard Limit) with full speed (prevent damage).  @return  The upper soft limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisUpperSoftLimit
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis upper soft limit.
                        The soft limit on the real machine is checked by the controller to avoid that the machine
                        travels into the mechanical stop (Hard Limit) with full speed (prevent damage).  @return  The upper soft limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisUpperSoftLimit
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis upper soft limit.
                        The soft limit on the real machine is checked by the controller to avoid that the machine
                        travels into the mechanical stop (Hard Limit) with full speed (prevent damage). 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisUpperSoftLimit
            (
                const NXString & axisName /** The axis name */,
                double upperSoftValue /** The upper soft limit */
            );
            /** Sets the axis upper soft limit.
                        The soft limit on the real machine is checked by the controller to avoid that the machine
                        travels into the mechanical stop (Hard Limit) with full speed (prevent damage). 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisUpperSoftLimit
            (
                const char * axisName /** The axis name */,
                double upperSoftValue /** The upper soft limit */
            );
            /** Gets the axis lower limit  @return  The lower limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisLowerLimit
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis lower limit  @return  The lower limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisLowerLimit
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis lower limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisLowerLimit
            (
                const NXString & axisName /** The axis name */,
                double lowerValue /** The lower limit */
            );
            /** Sets the axis lower limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisLowerLimit
            (
                const char * axisName /** The axis name */,
                double lowerValue /** The lower limit */
            );
            /** Gets the axis lower soft limit.
                        The soft limit on the real machine is checked by the controller to avoid that the machine
                        travels into the mechanical stop (Hard Limit) with full speed (prevent damage).  @return  The lower soft limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisLowerSoftLimit
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis lower soft limit.
                        The soft limit on the real machine is checked by the controller to avoid that the machine
                        travels into the mechanical stop (Hard Limit) with full speed (prevent damage).  @return  The lower soft limit 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisLowerSoftLimit
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis lower soft limit.
                        The soft limit on the real machine is checked by the controller to avoid that the machine
                        travels into the mechanical stop (Hard Limit) with full speed (prevent damage). 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisLowerSoftLimit
            (
                const NXString & axisName /** The axis name */,
                double lowerSoftValue /** The lower soft limit */
            );
            /** Sets the axis lower soft limit.
                        The soft limit on the real machine is checked by the controller to avoid that the machine
                        travels into the mechanical stop (Hard Limit) with full speed (prevent damage). 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisLowerSoftLimit
            (
                const char * axisName /** The axis name */,
                double lowerSoftValue /** The lower soft limit */
            );
            /** Gets the axis maximum velocity  @return  The maximum velocity value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisMaximumVelocity
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis maximum velocity  @return  The maximum velocity value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisMaximumVelocity
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis maximum velocity 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisMaximumVelocity
            (
                const NXString & axisName /** The axis name */,
                double value /** The maximum velocity value */
            );
            /** Sets the axis maximum velocity 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisMaximumVelocity
            (
                const char * axisName /** The axis name */,
                double value /** The maximum velocity value */
            );
            /** Gets the axis maximum acceleration. 
                        The maximum acceleration defines how fast the axis can accelerate. @return  The maximum acceleration value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisMaximumAcceleration
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis maximum acceleration. 
                        The maximum acceleration defines how fast the axis can accelerate. @return  The maximum acceleration value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisMaximumAcceleration
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis maximum acceleration. 
                        The maximum acceleration defines how fast the axis can accelerate.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisMaximumAcceleration
            (
                const NXString & axisName /** The axis name */,
                double value /** The maximum acceleration value */
            );
            /** Sets the axis maximum acceleration. 
                        The maximum acceleration defines how fast the axis can accelerate.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisMaximumAcceleration
            (
                const char * axisName /** The axis name */,
                double value /** The maximum acceleration value */
            );
            /** Gets the axis maximum deceleration.
                        The maximum deceleration defines how fast the axis can decelerate.  @return  The maximum deceleration value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisMaximumDeceleration
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis maximum deceleration.
                        The maximum deceleration defines how fast the axis can decelerate.  @return  The maximum deceleration value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisMaximumDeceleration
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis maximum deceleration.
                        The maximum deceleration defines how fast the axis can decelerate. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisMaximumDeceleration
            (
                const NXString & axisName /** The axis name */,
                double value /** The maximum deceleration value */
            );
            /** Sets the axis maximum deceleration.
                        The maximum deceleration defines how fast the axis can decelerate. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisMaximumDeceleration
            (
                const char * axisName /** The axis name */,
                double value /** The maximum deceleration value */
            );
            /** Gets the axis jerk limit.
                        The jerk limit value limits jumps in acceleration.  @return  The jerk limit value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisJerkLimit
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis jerk limit.
                        The jerk limit value limits jumps in acceleration.  @return  The jerk limit value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisJerkLimit
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis jerk limit.
                        The jerk limit value limits jumps in acceleration. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisJerkLimit
            (
                const NXString & axisName /** The axis name */,
                double value /** The jerk limit value */
            );
            /** Sets the axis jerk limit.
                        The jerk limit value limits jumps in acceleration. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisJerkLimit
            (
                const char * axisName /** The axis name */,
                double value /** The jerk limit value */
            );
            /** Gets the axis jump velocity.
                        The jump velocity define a lag time at the beginning of the motion.   @return  The jump velocity value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisJumpVelocity
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis jump velocity.
                        The jump velocity define a lag time at the beginning of the motion.   @return  The jump velocity value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisJumpVelocity
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis jump velocity.
                        The jump velocity define a lag time at the beginning of the motion.  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisJumpVelocity
            (
                const NXString & axisName /** The axis name */,
                double value /** The jump velocity value */
            );
            /** Sets the axis jump velocity.
                        The jump velocity define a lag time at the beginning of the motion.  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisJumpVelocity
            (
                const char * axisName /** The axis name */,
                double value /** The jump velocity value */
            );
            /** Gets the axis kv.
                        the Kv-Factor is a parameter of the drives. It influences the dragging error
                        (difference between ideal motion profile and actual motion profile).   @return  The kv value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisKv
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis kv.
                        the Kv-Factor is a parameter of the drives. It influences the dragging error
                        (difference between ideal motion profile and actual motion profile).   @return  The kv value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisKv
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis kv.
                        the Kv-Factor is a parameter of the drives. It influences the dragging error 
                        (difference between ideal motion profile and actual motion profile).  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisKv
            (
                const NXString & axisName /** The axis name */,
                double value /** The kv value */
            );
            /** Sets the axis kv.
                        the Kv-Factor is a parameter of the drives. It influences the dragging error 
                        (difference between ideal motion profile and actual motion profile).  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisKv
            (
                const char * axisName /** The axis name */,
                double value /** The kv value */
            );
            /** Gets the axis fine precision.
                        This defines the exact stop precision used to determine if a target point has been
                        reached, so that the next NC-block can be executed.   @return  The fine precission value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisFinePrecision
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis fine precision.
                        This defines the exact stop precision used to determine if a target point has been
                        reached, so that the next NC-block can be executed.   @return  The fine precission value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisFinePrecision
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis fine precision.
                        This defines the exact stop precision used to determine if a target point has been
                        reached, so that the next NC-block can be executed.  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisFinePrecision
            (
                const NXString & axisName /** The axis name */,
                double value /** The fine precission value */
            );
            /** Sets the axis fine precision.
                        This defines the exact stop precision used to determine if a target point has been
                        reached, so that the next NC-block can be executed.  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisFinePrecision
            (
                const char * axisName /** The axis name */,
                double value /** The fine precission value */
            );
            /** Gets the axis coarse precision.
                        This defines the exact stop precision used to determine if a target point has been
                        reached, so that the next NC-block can be executed.   @return  The coarse precission value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAxisCoarsePrecision
            (
                const NXString & axisName /** The axis name */
            );
            /** Gets the axis coarse precision.
                        This defines the exact stop precision used to determine if a target point has been
                        reached, so that the next NC-block can be executed.   @return  The coarse precission value 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            double GetAxisCoarsePrecision
            (
                const char * axisName /** The axis name */
            );
            /** Sets the axis coarse precision.
                        This defines the exact stop precision used to determine if a target point has been
                        reached, so that the next NC-block can be executed.  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetAxisCoarsePrecision
            (
                const NXString & axisName /** The axis name */,
                double value /** The coarse precission value */
            );
            /** Sets the axis coarse precision.
                        This defines the exact stop precision used to determine if a target point has been
                        reached, so that the next NC-block can be executed.  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetAxisCoarsePrecision
            (
                const char * axisName /** The axis name */,
                double value /** The coarse precission value */
            );
            /**Returns  the flag defines whether to create a CSE driver.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateCseDriver
            (
            );
            /**Sets  the flag defines whether to create a CSE driver.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetCreateCseDriver
            (
                bool flagCreateCseDriver /** The flag of cse driver creation */
            );
            /**Returns  the machine kit name.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MachineKitName
            (
            );
            /**Sets  the machine kit name.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetMachineKitName
            (
                const NXString & name /** The machine kit name */
            );
            /**Sets  the machine kit name.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetMachineKitName
            (
                const char * name /** The machine kit name */
            );
            /**Returns  the output directory.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OutputDirectory
            (
            );
            /**Sets  the output directory.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetOutputDirectory
            (
                const NXString & directory /** The output directory */
            );
            /**Sets  the output directory.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetOutputDirectory
            (
                const char * directory /** The output directory */
            );
            /**Returns  the cse driver template name.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CseDriverTemplateName
            (
            );
            /**Sets  the cse driver template name.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetCseDriverTemplateName
            (
                const NXString & name /** The cse driver template name */
            );
            /**Sets  the cse driver template name.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetCseDriverTemplateName
            (
                const char * name /** The cse driver template name */
            );
            /**Returns  the file directory of cse driver template.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CseDriverTemplateFile
            (
            );
            /**Sets  the file directory of cse driver template.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetCseDriverTemplateFile
            (
                const NXString & file /** The cse driver template file directory */
            );
            /**Sets  the file directory of cse driver template.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetCseDriverTemplateFile
            (
                const char * file /** The cse driver template file directory */
            );
            /**Returns  the flag defines whether to create a postprocessor.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreatePostprocessor
            (
            );
            /**Sets  the flag defines whether to create a postprocessor.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetCreatePostprocessor
            (
                bool flagCreatePostprocessor /** The flag of postprocessor creation */
            );
            /**Returns  the type of creating a machine kit.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::SmkWizardBuilder::OutputType CreateKitType
            (
            );
            /**Sets  the type of creating a machine kit.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetCreateKitType
            (
                NXOpen::SIM::SmkWizardBuilder::OutputType kitType /** The kit type */
            );
            /** Creates files of the machine kit.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void CreateMachineKit
            (
            );
            /**Returns  the device template 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::SmkWizardBuilder::DeviceTemplateType DeviceTemplate
            (
            );
            /**Sets  the device template 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetDeviceTemplate
            (
                NXOpen::SIM::SmkWizardBuilder::DeviceTemplateType deviceTemplateType /** The device template type */
            );
            /**Returns  the device template file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DeviceTemplateFilePath
            (
            );
            /**Sets  the device template file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetDeviceTemplateFilePath
            (
                const NXString & filePath /** The device template file path */
            );
            /**Sets  the device template file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetDeviceTemplateFilePath
            (
                const char * filePath /** The device template file path */
            );
            /** Adds one device template file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void AddDeviceTemplateFilePath
            (
                const NXString & filePath /** The device template file path to add */
            );
            /** Adds one device template file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void AddDeviceTemplateFilePath
            (
                const char * filePath /** The device template file path to add */
            );
            /** Deletes one device template file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void DeleteDeviceTemplateFilePath
            (
                int index /** index */ ,
                const NXString & filePath /** The device template file path to delete */
            );
            /** Deletes one device template file path 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void DeleteDeviceTemplateFilePath
            (
                int index /** index */ ,
                const char * filePath /** The device template file path to delete */
            );
            /** Create pocket transform data for pocket generator 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void CreatePocketTransformData
            (
                const NXString & pocketName /** The name of the pocket to be transformed */
            );
            /** Create pocket transform data for pocket generator 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void CreatePocketTransformData
            (
                const char * pocketName /** The name of the pocket to be transformed */
            );
            /** Set pocket transform type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformType
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                NXOpen::SIM::SmkWizardBuilder::PocketTransformType transformType /** transformtype */ 
            );
            /** Set pocket transform type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformType
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                NXOpen::SIM::SmkWizardBuilder::PocketTransformType transformType /** transformtype */ 
            );
            /** Set pocket transform DeltaXC 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformTranslateDeltaXC
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                double deltaXC /** Translate delta XC */
            );
            /** Set pocket transform DeltaXC 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformTranslateDeltaXC
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                double deltaXC /** Translate delta XC */
            );
            /** Set pocket transform DeltaYC 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformTranslateDeltaYC
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                double deltaYC /** Translate delta YC */
            );
            /** Set pocket transform DeltaYC 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformTranslateDeltaYC
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                double deltaYC /** Translate delta YC */
            );
            /** Set pocket transform DeltaZC 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformTranslateDeltaZC
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                double deltaZC /** Translate delta ZC */
            );
            /** Set pocket transform DeltaZC 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformTranslateDeltaZC
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                double deltaZC /** Translate delta ZC */
            );
            /** Set pocket transform translate reference point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformTranslateReferencePoint
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                double x /** Translate reference point X coordinate */,
                double y /** Translate reference point Y coordinate */,
                double z /** Translate reference point Z coordinate */
            );
            /** Set pocket transform translate reference point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformTranslateReferencePoint
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                double x /** Translate reference point X coordinate */,
                double y /** Translate reference point Y coordinate */,
                double z /** Translate reference point Z coordinate */
            );
            /** Set pocket transform translate to point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformTranslateToPoint
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                double x /** Translate to point X coordinate */,
                double y /** Translate to point Y coordinate */,
                double z /** Translate to point Z coordinate */
            );
            /** Set pocket transform translate to point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformTranslateToPoint
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                double x /** Translate to point X coordinate */,
                double y /** Translate to point Y coordinate */,
                double z /** Translate to point Z coordinate */
            );
            /** Set pocket transform rotate start point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformRotateLineStartPoint
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                double x /** Rotate line start point X coordinate */,
                double y /** Rotate line start point Y coordinate */,
                double z /** Rotate line start point Z coordinate */
            );
            /** Set pocket transform rotate start point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformRotateLineStartPoint
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                double x /** Rotate line start point X coordinate */,
                double y /** Rotate line start point Y coordinate */,
                double z /** Rotate line start point Z coordinate */
            );
            /** Set pocket transform rotate end point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformRotateLineEndPoint
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                double x /** Rotate line end point X coordinate */,
                double y /** Rotate line end point Y coordinate */,
                double z /** Rotate line end point Z coordinate */
            );
            /** Set pocket transform rotate end point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformRotateLineEndPoint
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                double x /** Rotate line end point X coordinate */,
                double y /** Rotate line end point Y coordinate */,
                double z /** Rotate line end point Z coordinate */
            );
            /** Set pocket transform rotate line point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformRotateLinePoint
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                double x /** Rotate line point X coordinate */,
                double y /** Rotate line point Y coordinate */,
                double z /** Rotate line point Z coordinate */
            );
            /** Set pocket transform rotate line point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformRotateLinePoint
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                double x /** Rotate line point X coordinate */,
                double y /** Rotate line point Y coordinate */,
                double z /** Rotate line point Z coordinate */
            );
            /** Set pocket transform rotate line vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformRotateLineVector
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                double i /** Rotate line vector i coordinate */,
                double j /** Rotate line vector j coordinate */,
                double k /** Rotate line vector k coordinate */
            );
            /** Set pocket transform rotate line vector 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformRotateLineVector
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                double i /** Rotate line vector i coordinate */,
                double j /** Rotate line vector j coordinate */,
                double k /** Rotate line vector k coordinate */
            );
            /** Set pocket transform division 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformDivision
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                int division /** division */ 
            );
            /** Set pocket transform division 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformDivision
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                int division /** division */ 
            );
            /** Set pocket transform number of copies 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformNumberOfCopies
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                int numOfCopies /** numofcopies */ 
            );
            /** Set pocket transform number of copies 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformNumberOfCopies
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                int numOfCopies /** numofcopies */ 
            );
            /** Set pocket transform angle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformRotateAngle
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                double angle /** angle */ 
            );
            /** Set pocket transform angle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformRotateAngle
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                double angle /** angle */ 
            );
            /** Set pocket transform holder id increment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformHolderIDIncrement
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                int increment /** increment */ 
            );
            /** Set pocket transform holder id increment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformHolderIDIncrement
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                int increment /** increment */ 
            );
            /** Set pocket transform cutcom register increment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformCutcomRegisterIncrement
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                int increment /** increment */ 
            );
            /** Set pocket transform cutcom register increment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformCutcomRegisterIncrement
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                int increment /** increment */ 
            );
            /** Set pocket transform adjust register id increment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPocketTransformAdjustRegisterIncrement
            (
                const NXString & pocketName /** The name of the pocket to be transformed */,
                int increment /** increment */ 
            );
            /** Set pocket transform adjust register id increment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetPocketTransformAdjustRegisterIncrement
            (
                const char * pocketName /** The name of the pocket to be transformed */,
                int increment /** increment */ 
            );
            /** Clear the smk wizard data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void ClearWizardData
            (
            );
            /** Parse template json files 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void ParseTemplates
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
