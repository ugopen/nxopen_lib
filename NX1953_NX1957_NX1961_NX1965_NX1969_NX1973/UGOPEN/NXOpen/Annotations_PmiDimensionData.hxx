#ifndef NXOpen_ANNOTATIONS_PMIDIMENSIONDATA_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_PMIDIMENSIONDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_PmiDimensionData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_PmiSemanticData.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class PmiDimensionData;
    }
    namespace Annotations
    {
        class PmiSemanticData;
    }
    namespace Annotations
    {
        class PmiDimensionDataImpl;
        /** Represents PMI dimension data. 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  PmiDimensionData : public NXOpen::Annotations::PmiSemanticData
        {
            /** Specifies PMI dimension types */
            public: enum DimensionType
            {
                DimensionTypeNone/** None */,
                DimensionTypeChamfer/** Chamfer dimension type */,
                DimensionTypeRadial/** Radial dimension type */,
                DimensionTypeLinear/** Linear dimension type */,
                DimensionTypeAngular/** Angular dimension type */,
                DimensionTypeCurveLength/** Curve length dimension type */
            };

            private: PmiDimensionDataImpl * m_pmidimensiondata_impl;
            /// \cond NX_NO_DOC 
            public: explicit PmiDimensionData(void *ptr);
            /// \endcond 
            /**Returns  the PMI dimension type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiDimensionData::DimensionType Type
            (
            );
            /**Returns  the fit designation flag. Represents if dimension data is from a fit designation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool IsFitDesignation
            (
            );
            /**Returns  the dimension manual text flag. Represents if dimension has manual text 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool Manual
            (
            );
            /**Returns  the PMI dimension value, in metres or radians 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: double DimensionValue
            (
            );
            /**Returns  the reference dimension flag. Represents if dimensions is a reference dimension 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool Reference
            (
            );
            /**Returns  the reference dimension prefix 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString ReferenceDimensionPrefix
            (
            );
            /**Returns  the reference dimension suffix 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString ReferenceDimensionSuffix
            (
            );
            /**Returns  the basic dimension flag. Represents if dimensions is a basic dimension 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool Basic
            (
            );
            /**Returns  the dimension not-to-scale flag. Represents if dimensions is not-to-scale 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool NotToScale
            (
            );
            /** Returns the above dimension appended text. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void GetAboveAppendedText
            (
                std::vector<NXString> & textLines /** List of above appended text lines */
            );
            /** Returns the below dimension appended text. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void GetBelowAppendedText
            (
                std::vector<NXString> & textLines /** List of below appended text lines */
            );
            /** Returns the before dimension appended text. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void GetBeforeAppendedText
            (
                std::vector<NXString> & textLines /** List of before appended text lines */
            );
            /** Returns the after dimension appended text. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void GetAfterAppendedText
            (
                std::vector<NXString> & textLines /** List of after appended text lines */
            );
            /**Returns  the dimension direction of measurement (for linear dimension) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Vector3d Direction
            (
            );
            /**Returns  the dimension feature of size flag. Represents if dimensions specifies the size of a feature.
                        (for linear dimension) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool FeatureOfSize
            (
            );
            /**Returns  the all-around flag (for radial or chamfer dimension) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool AllAround
            (
            );
            /**Returns  the all-over flag (for radial or chamfer dimension) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool AllOver
            (
            );
            /**Returns  the angle (in radians) of the arc for fractional angular dimensions (for angular dimension) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: double AngleNumerator
            (
            );
            /**Returns  the max value minus nominal value, in metres or radians 
                        (for dimension tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: double UpperDelta
            (
            );
            /**Returns  the nominal value minus min value, in metres or radians 
                        (for dimension tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: double LowerDelta
            (
            );
            /**Returns  the grade for hole or shaft (for dimension tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: int Grade
            (
            );
            /**Returns  the deviation for hole or shaft (for dimension tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString Deviation
            (
            );
            /**Returns  the maximum size of the hole minus the basic size in metres
                        (for fit designation tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: double HoleUpperDelta
            (
            );
            /**Returns  the minimum size of the hole minus the basic size in metres
                        (for fit designation tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: double HoleLowerDelta
            (
            );
            /**Returns  the grade integer of the hole (for fit designation tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: int HoleGrade
            (
            );
            /**Returns  the deviation letter(s) of the hole (for fit designation tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString HoleDeviation
            (
            );
            /**Returns  the maximum size of the shaft minus the basic size in metres
                        (for fit designation tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: double ShaftUpperDelta
            (
            );
            /**Returns  the minimum size of the shaft minus the basic size in metres
                        (for fit designation tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: double ShaftLowerDelta
            (
            );
            /**Returns  the grade integer of the shaft. For threaded shafts, 
                        the grade integer of the major diameter (for fit designation tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: int ShaftGrade
            (
            );
            /**Returns  the deviation letter(s) of the shaft. For threaded shafts, 
                        the deviation letter(s) of the major diameter (for fit designation tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString ShaftDeviation
            (
            );
            /**Returns  the grade integer of the pitch diameter for threaded shafts
                        (for PMI tol thread tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: int PitchDiaGrade
            (
            );
            /**Returns  the deviation letter(s) of the pitch diameter for threaded shafts 
                        (for PMI tol thread tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString PitchDiaDeviation
            (
            );
            /**Returns  the grade integer of threaded shafts
                        (for PMI tol thread tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: int FitGrade
            (
            );
            /**Returns  the thread class of the threaded shafts
                        (for PMI tol thread tolerance) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: int ThreadClass
            (
            );
            /**Returns  the maximum pitch diameter minus the basic size in metres for threaded shafts
                        (for PMI tol thread tolerance fit designation) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: double PitchDiaUpperDelta
            (
            );
            /**Returns  the minimum pitch diameter minus the basic size in metres
                        (for PMI tol thread tolerance fit designation) 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: double PitchDiaLowerDelta
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
