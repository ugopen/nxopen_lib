#ifndef NXOpen_ROUTINGCOMMON_ROUTINGMANAGER_HXX_INCLUDED
#define NXOpen_ROUTINGCOMMON_ROUTINGMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     RoutingCommon_RoutingManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_routingcommon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace RoutingCommon
    {
        class RoutingManager;
    }
    class Session;
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Part;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class Port;
    }
    namespace RoutingCommon
    {
        class BuilderFactory;
    }
    namespace RoutingCommon
    {
        class InsulationService;
    }
    namespace RoutingCommon
    {
        class RoutingManagerImpl;
        /** Represents an @link NXOpen::RoutingCommon::RoutingManager NXOpen::RoutingCommon::RoutingManager@endlink  object.   <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGCOMMONEXPORT  RoutingManager
        {
            private: RoutingManagerImpl * m_routingmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit RoutingManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static RoutingManager* theRoutingManager;
            /** Returns the RoutingManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static RoutingManager* GetRoutingManager(NXOpen::Session *owner);
            public: ~RoutingManager();
            /** Checks if the part is a route system assembly   @return  Returns true if the part is a NextGen BVR part. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool IsRouteSystemAssembly
            (
                NXOpen::Part * part /** the part that is to checked */
            );
            /** Checks if the part is a shape component part   @return  Returns true if the part is a NextGen BVR part. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool IsShapeComponentPart
            (
                NXOpen::BasePart * part /** the base part that is to checked */
            );
            /** Checks if the part is a reusable component part   @return  Returns true if the part is a NextGen BVR part. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool IsReusableComponentPart
            (
                NXOpen::BasePart * part /** the base part that is to checked */
            );
            /** Makes a component a reusable component for Routed System Designer provided the component is not already a Routed System Designer component. 
                    It is recommended to check @link NXOpen::RoutingCommon::RoutingManager::IsReusableComponentPart NXOpen::RoutingCommon::RoutingManager::IsReusableComponentPart@endlink  before calling this API  @return  Returns true if the component was made reusable. It can return false even in cases where the component was already reusable. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool MakeComponentReusable
            (
                NXOpen::Assemblies::Component * component /** The component to which the reuse behavior is to added if needed */
            );
            /** Performs Detach Operation on rcp  @return  Returns true if the detach operation is performed. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool PerformDetachOperationOnRcp
            (
                NXOpen::Routing::ControlPoint * rcp /** the selected Routing Control Point occurrence*/
            );
            /** Performs Detach Operation on port @return  Returns true if the detach operation is performed. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool PerformDetachOperationOnPort
            (
                NXOpen::Routing::Port * port /** the selected Port occurrence or prototype*/
            );


            /**  Returns a @link NXOpen::RoutingCommon::BuilderFactory NXOpen::RoutingCommon::BuilderFactory@endlink  object.  Use this object
                         to create specific routing builders.
                    
             <br>  Created in NX1847.0.0.  <br>  
            */
            public: NXOpen::RoutingCommon::BuilderFactory *BuilderFactory();
            /**  Returns a @link NXOpen::RoutingCommon::InsulationService NXOpen::RoutingCommon::InsulationService@endlink  object.  Use this object
                         for specific Routing  Insulation service
                    
             <br>  Created in NX1847.0.0.  <br>  
            */
            public: NXOpen::RoutingCommon::InsulationService *InsulationService();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
