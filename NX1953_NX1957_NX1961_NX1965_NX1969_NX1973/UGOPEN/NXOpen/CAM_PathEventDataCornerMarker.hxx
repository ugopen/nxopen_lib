#ifndef NXOpen_CAM_PATHEVENTDATACORNERMARKER_HXX_INCLUDED
#define NXOpen_CAM_PATHEVENTDATACORNERMARKER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_PathEventDataCornerMarker.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class PathEventDataCornerMarker;
    }
    namespace CAM
    {
        class PathEventDataCornerMarkerImpl;
        /** This class represents the corner marker data of a path event 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  PathEventDataCornerMarker : public NXOpen::TransientObject
        {
            /** Corner marker types*/
            public: enum Types
            {
                TypesNone/** A point is not marked as corner. */,
                TypesSoft/** When the toolpath deviation within the range of plus and minus half the Gap Distance
                                                                                    at a point is greater than the user provided Corner Angle, it is marked as a Soft Corner. */,
                TypesSharp/** When the toolpath deviation at a point is greater than the user provided Corner Angle
                                                                                    and less than (180 degree -  user provided Corner Angle), it is marked as Sharp Corner. */,
                TypesReverse/** When the toolpath deviation at a point is greater than (180 degree - user provided Corner Angle)
                                                                                    and less than 180 degree, it is marked as Reverse Corner. */
            };

            private: PathEventDataCornerMarkerImpl * m_patheventdatacornermarker_impl;
            /// \cond NX_NO_DOC 
            public: explicit PathEventDataCornerMarker(void *ptr);
            /// \endcond 
            /** Free resources associated with the instance. After this method
                    is called, it is illegal to use the object.  In .NET, this method
                    is automatically called when the object is deleted by the garbage
                    collector. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PathEventDataCornerMarker();
            /**Returns  the corner marker type
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathEventDataCornerMarker::Types Type
            (
            );
            /**Sets  the corner marker type
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::CAM::PathEventDataCornerMarker::Types cornerType /** cornertype */ 
            );
            /**Returns  the angle in radians at a vertex 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double VertexAngle
            (
            );
            /**Sets  the angle in radians at a vertex 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVertexAngle
            (
                double vertexAngle /** vertexangle */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
