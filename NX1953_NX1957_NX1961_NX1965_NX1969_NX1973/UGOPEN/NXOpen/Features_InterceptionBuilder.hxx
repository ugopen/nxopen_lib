#ifndef NXOpen_FEATURES_INTERCEPTIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_INTERCEPTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_InterceptionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class InterceptionBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeature;
    }
    namespace Features
    {
        class SelectFeatureList;
    }
    class NXColor;
    namespace Features
    {
        class _InterceptionBuilderBuilder;
        class InterceptionBuilderImpl;

        /// \cond NX_NO_DOC 
        /**
            Represents a @link Features::Interception Features::Interception@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::AVDACollection::CreateInterceptionBuilder  NXOpen::Features::AVDACollection::CreateInterceptionBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        BlindspotColor </term> <description> 
         
        216 </description> </item> 

        <item><term> 
         
        DistanceThreshold </term> <description> 
         
        5.00 (millimeters part), 0.2 (inches part) </description> </item> 

        <item><term> 
         
        DistanceTolerance </term> <description> 
         
        0.025 (millimeters part), 0.001 (inches part) </description> </item> 

        <item><term> 
         
        InterceptionStandard </term> <description> 
         
        Iso5006 </description> </item> 

        <item><term> 
         
        InterceptionType </term> <description> 
         
        Ground </description> </item> 

        <item><term> 
         
        RegionColorVisibleFromDirectVision </term> <description> 
         
        78 </description> </item> 

        <item><term> 
         
        RegionTranslucencyVisibleFromCamera </term> <description> 
         
        50 </description> </item> 

        <item><term> 
         
        RegionTranslucencyVisibleFromDirectVision </term> <description> 
         
        50 </description> </item> 

        <item><term> 
         
        RegionTranslucencyVisibleFromMirror </term> <description> 
         
        50 </description> </item> 

        </list> 

         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  InterceptionBuilder : public NXOpen::Features::FeatureBuilder
        {
            /**
                    Used to indicate the type of interception
                    */
            public: enum InterceptionTypes
            {
                InterceptionTypesGround/** ground */ ,
                InterceptionTypesWall/** wall */ 
            };

            /**
                    Used to indicate the Interception standard
                    */
            public: enum InterceptionStandards
            {
                InterceptionStandardsIso5006/** iso5006 */ ,
                InterceptionStandardsUserDefined/** user defined */ 
            };

            private: InterceptionBuilderImpl * m_interceptionbuilder_impl;
            private: friend class  _InterceptionBuilderBuilder;
            protected: InterceptionBuilder();
            public: ~InterceptionBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the interception type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::InterceptionBuilder::InterceptionTypes InterceptionType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the interception type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetInterceptionType
            (
                NXOpen::Features::InterceptionBuilder::InterceptionTypes interceptionType /** interceptiontype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the interception standard 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::InterceptionBuilder::InterceptionStandards InterceptionStandard
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the interception standard 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetInterceptionStandard
            (
                NXOpen::Features::InterceptionBuilder::InterceptionStandards interceptionStandard /** interceptionstandard */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the select direct vision 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SelectFeature * DirectVision
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the visible region direct vision color 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * RegionColorVisibleFromDirectVision
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the visible region direct vision color 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetRegionColorVisibleFromDirectVision
            (
                NXOpen::NXColor * color /** color */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the visible region direct vision translucency 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int RegionTranslucencyVisibleFromDirectVision
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the visible region direct vision translucency 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetRegionTranslucencyVisibleFromDirectVision
            (
                int translucency /** translucency */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the select mirror 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SelectFeatureList * Mirrors
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the visible region mirror color 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * RegionColorVisibleFromMirror
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the visible region mirror color 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetRegionColorVisibleFromMirror
            (
                NXOpen::NXColor * color /** color */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the visible region mirror translucency 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int RegionTranslucencyVisibleFromMirror
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the visible region mirror translucency 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetRegionTranslucencyVisibleFromMirror
            (
                int translucency /** translucency */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the select camera 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SelectFeatureList * Cameras
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the visible region camera color 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * RegionColorVisibleFromCamera
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the visible region camera color 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetRegionColorVisibleFromCamera
            (
                NXOpen::NXColor * color /** color */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the visible region camera translucency 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int RegionTranslucencyVisibleFromCamera
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the visible region camera translucency 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetRegionTranslucencyVisibleFromCamera
            (
                int translucency /** translucency */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the select grid target 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SelectFeature * GridTarget
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the select obstruction 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SelectFeatureList * Obstructions
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the blindspot color 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BlindspotColor
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the blindspot color 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetBlindspotColor
            (
                NXOpen::NXColor * blindspotColor /** blindspotcolor */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the distance tolerance 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the distance tolerance 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the distance threshold 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceThreshold
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the distance threshold 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetDistanceThreshold
            (
                double distanceThreshold /** distancethreshold */ 
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
