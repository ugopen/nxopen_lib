#ifndef NXOpen_CAE_EDGEFACEIMPRINTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_EDGEFACEIMPRINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_EdgeFaceImprintBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class EdgeFaceImprintBuilder;
    }
    class Builder;
    class Direction;
    class SelectDisplayableObjectList;
    namespace CAE
    {
        class _EdgeFaceImprintBuilderBuilder;
        class EdgeFaceImprintBuilderImpl;
        /** Builder for creating Face Face Imprint   <br> To create a new instance of this class, use @link NXOpen::CAE::AbstractionManager::CreateEdgeFaceImprintBuilder  NXOpen::CAE::AbstractionManager::CreateEdgeFaceImprintBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  EdgeFaceImprintBuilder : public NXOpen::Builder
        {
            /** the projection directon type */
            public: enum ProjectionDirectionType
            {
                ProjectionDirectionTypeAlongNormal/** along normal */ ,
                ProjectionDirectionTypeClosetToTarget/** closet to target */ ,
                ProjectionDirectionTypeAlongVector/** along vector */ 
            };

            private: EdgeFaceImprintBuilderImpl * m_edgefaceimprintbuilder_impl;
            private: friend class  _EdgeFaceImprintBuilderBuilder;
            protected: EdgeFaceImprintBuilder();
            public: ~EdgeFaceImprintBuilder();
            /**Returns  the edge/curve selection for projection imprint
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * EdgeCurveSelection
            (
            );
            /**Returns  the target face selection for projection imprint
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * TargetFace
            (
            );
            /**Returns  the projection direction method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::EdgeFaceImprintBuilder::ProjectionDirectionType ProjectionDirectionMethod
            (
            );
            /**Sets  the projection direction method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetProjectionDirectionMethod
            (
                NXOpen::CAE::EdgeFaceImprintBuilder::ProjectionDirectionType projDirectionType /** projdirectiontype */ 
            );
            /**Returns  the projection vector direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ProjectionVector
            (
            );
            /**Sets  the projection vector direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetProjectionVector
            (
                NXOpen::Direction * projectionVector /** projectionvector */ 
            );
            /**Returns  the stitch toggle state 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool StitchToggle
            (
            );
            /**Sets  the stitch toggle state 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetStitchToggle
            (
                bool stitchOption /** stitchoption */ 
            );
            /**Returns  the stitch toggle state 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ExtendEdgeToBoundaryToggle
            (
            );
            /**Sets  the stitch toggle state 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetExtendEdgeToBoundaryToggle
            (
                bool extendEdgetoBoundaryOpt /** extendedgetoboundaryopt */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
