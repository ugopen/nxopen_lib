#ifndef NXOpen_APPEARANCE_APPEARANCEUTILS_HXX_INCLUDED
#define NXOpen_APPEARANCE_APPEARANCEUTILS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Appearance_AppearanceUtils.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Appearance_Area.hxx>
#include <NXOpen/Appearance_DataManager.hxx>
#include <NXOpen/Appearance_Designator.hxx>
#include <NXOpen/Appearance_VisualMaterialUsage.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_appearance_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Appearance
    {
        class AppearanceUtils;
    }
    class Session;
    namespace Appearance
    {
        class Area;
    }
    namespace Appearance
    {
        class DataManager;
    }
    namespace Appearance
    {
        class Designator;
    }
    namespace Appearance
    {
        class VisualMaterialUsage;
    }
    class ErrorList;
    class TaggedObject;
    namespace Appearance
    {
        class AppearanceUtilsImpl;
        /** Contains various Appearance utility methods  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_APPEARANCEEXPORT  AppearanceUtils
        {
            private: AppearanceUtilsImpl * m_appearanceutils_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit AppearanceUtils(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~AppearanceUtils();
            /** This function will get the Appearance Manager instance if already created else returns by creating one. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_visualize ("STUDIO VISUALIZE") */
            public: NXOpen::Appearance::DataManager * GetAppearanceManager
            (
            );
            /** Constructs a new VisualMaterialUsageInstance object
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_visualize ("STUDIO VISUALIZE") */
            public: NXOpen::Appearance::VisualMaterialUsage * GetVisualMaterialUsage
            (
            );
            /** This function will get the parent appearance area of given designator object.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: NXOpen::Appearance::Area * GetParentAppearanceArea
            (
                NXOpen::Appearance::Designator * designator /** designator */ 
            );
            /** This function will set the 'name' for the Designator object.
                        Note: This function will also set the provided area as a current work appearance area.
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: void SetDesignatorName
            (
                const NXString & parentAppAreaName /** Parent appearance area name under which this designator name change is expected.*/,
                const NXString & currentDesignatorName /** Designator name for which the designator name change is expected.*/,
                const NXString & newDesignatorName /** New designator name */
            );
            /** This function will set the 'name' for the Designator object.
                        Note: This function will also set the provided area as a current work appearance area.
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            void SetDesignatorName
            (
                const char * parentAppAreaName /** Parent appearance area name under which this designator name change is expected.*/,
                const char * currentDesignatorName /** Designator name for which the designator name change is expected.*/,
                const char * newDesignatorName /** New designator name */
            );
            /** This function will set the 'description' for the Designator object.
                        Note: This function will also set the provided area as a current work appearance area.
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: void SetDesignatorDescription
            (
                const NXString & parentAppAreaName /** Parent appearance area name under which this designator description change is expected.*/,
                const NXString & designatorName /** Designator name for which the designator description change is expected.*/,
                const NXString & newDesignatorDescription /** New designator description */
            );
            /** This function will set the 'description' for the Designator object.
                        Note: This function will also set the provided area as a current work appearance area.
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            void SetDesignatorDescription
            (
                const char * parentAppAreaName /** Parent appearance area name under which this designator description change is expected.*/,
                const char * designatorName /** Designator name for which the designator description change is expected.*/,
                const char * newDesignatorDescription /** New designator description */
            );
            /** This function will set the given scheme as an active scheme in Appearance context.
                        Note: This function will also set the provided area as the current work appearance area.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_visualize ("STUDIO VISUALIZE") */
            public: NXOpen::ErrorList * ApplyAppearanceScheme
            (
                const NXString & areaName /** Appearance area name from which the given scheme is set active.*/,
                const NXString & schemeName /** Scheme name which is to be set active. */
            );
            /** This function will set the given scheme as an active scheme in Appearance context.
                        Note: This function will also set the provided area as the current work appearance area.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : studio_visualize ("STUDIO VISUALIZE") */
            NXOpen::ErrorList * ApplyAppearanceScheme
            (
                const char * areaName /** Appearance area name from which the given scheme is set active.*/,
                const char * schemeName /** Scheme name which is to be set active. */
            );
            /** This function will set the Visual Material on the given Designator for the active Scheme in the Appearance context.
                        Note: This function will also set the provided area as a current work appearance area.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: NXOpen::ErrorList * SetVisualMaterialForDesignator
            (
                const NXString & parentAppAreaName /** Name of the parent appearance area of the designator on which we are going to change the material. */,
                const NXString & designatorName /** Name of the designator for which new visual material is to be set */,
                const NXString & visualMaterialName /** Name of the material.*/,
                int materialSource /** Source of the material.*/
            );
            /** This function will set the Visual Material on the given Designator for the active Scheme in the Appearance context.
                        Note: This function will also set the provided area as a current work appearance area.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            NXOpen::ErrorList * SetVisualMaterialForDesignator
            (
                const char * parentAppAreaName /** Name of the parent appearance area of the designator on which we are going to change the material. */,
                const char * designatorName /** Name of the designator for which new visual material is to be set */,
                const char * visualMaterialName /** Name of the material.*/,
                int materialSource /** Source of the material.*/
            );
            /** This function will remove the given designator from the given area.
                        Note: This function will also set the provided area as a current work appearance area.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: NXOpen::ErrorList * RemoveAppearanceDesignator
            (
                const NXString & parentAppAreaName /** Name of the parent appearance area from which the designator is being removed. */,
                const NXString & designatorName /** Name of the designator which is to be removed. */
            );
            /** This function will remove the given designator from the given area.
                        Note: This function will also set the provided area as a current work appearance area.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            NXOpen::ErrorList * RemoveAppearanceDesignator
            (
                const char * parentAppAreaName /** Name of the parent appearance area from which the designator is being removed. */,
                const char * designatorName /** Name of the designator which is to be removed. */
            );
            /** This function will remove the applied visual material from the given designator.
                         Note: This function will also set the provided area as a current work appearance area.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: NXOpen::ErrorList * RemoveVisualMaterialOnDesignator
            (
                const NXString & parentAppAreaName /** Name of the parent appearance area of the designator from which visual material will be removed. */,
                const NXString & designatorName /** Name of the designator from which visual material will be removed. */
            );
            /** This function will remove the applied visual material from the given designator.
                         Note: This function will also set the provided area as a current work appearance area.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            NXOpen::ErrorList * RemoveVisualMaterialOnDesignator
            (
                const char * parentAppAreaName /** Name of the parent appearance area of the designator from which visual material will be removed. */,
                const char * designatorName /** Name of the designator from which visual material will be removed. */
            );
            /** This function will delete the given scheme from the given area.
                        Note: This function will also set the first scheme as default appearance scheme.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: NXOpen::ErrorList * DeleteAppearanceScheme
            (
                const NXString & parentAppAreaName /** Name of the Parent Appearance Area. */,
                const NXString & schemeName /** Name of the scheme to delete. */
            );
            /** This function will delete the given scheme from the given area.
                        Note: This function will also set the first scheme as default appearance scheme.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            NXOpen::ErrorList * DeleteAppearanceScheme
            (
                const char * parentAppAreaName /** Name of the Parent Appearance Area. */,
                const char * schemeName /** Name of the scheme to delete. */
            );
            /** This function will remove input geometry entities from designator and update display.
                        Note: This function will also set the provided area as a current work appearance area.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: NXOpen::ErrorList * RemoveGeometricEntities
            (
                const NXString & parentAppAreaName /** Name of the Parent Appearance Area. */,
                const NXString & designatorName /** Designator name for which the associated geometries are to be removed.*/,
                const std::vector<NXOpen::TaggedObject *> & geometricEntities /** List of geometric entities to be removed from designator */
            );
            /** This function will remove input geometry entities from designator and update display.
                        Note: This function will also set the provided area as a current work appearance area.
                     @return  Any errors that occurred. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            NXOpen::ErrorList * RemoveGeometricEntities
            (
                const char * parentAppAreaName /** Name of the Parent Appearance Area. */,
                const char * designatorName /** Designator name for which the associated geometries are to be removed.*/,
                const std::vector<NXOpen::TaggedObject *> & geometricEntities /** List of geometric entities to be removed from designator */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
