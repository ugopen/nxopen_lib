#ifndef NXOpen_ALP_VARIANTCONDITIONBUILDER_HXX_INCLUDED
#define NXOpen_ALP_VARIANTCONDITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ALP_VariantConditionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MfgModel_BOPOperation.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libalpopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace ALP
    {
        class VariantConditionBuilder;
    }
    class Builder;
    namespace MfgModel
    {
        class BOPOperation;
    }
    namespace ALP
    {
        class _VariantConditionBuilderBuilder;
        class VariantConditionBuilderImpl;
        /** For creating and editing Variant Conditions  <br> To create a new instance of this class, use @link NXOpen::ALP::ALPManager::CreateVariantConditionBuilder  NXOpen::ALP::ALPManager::CreateVariantConditionBuilder @endlink  <br> 
         <br>  Created in NX1938.0.0.  <br>  
        */
        class ALPOPENCPPEXPORT  VariantConditionBuilder : public NXOpen::Builder
        {
            /** This enum is used for defining different contions together */
            public: enum Condition
            {
                ConditionAnd/** and */ ,
                ConditionOr/** or */ 
            };

            private: VariantConditionBuilderImpl * m_variantconditionbuilder_impl;
            private: friend class  _VariantConditionBuilderBuilder;
            protected: VariantConditionBuilder();
            public: ~VariantConditionBuilder();
            /**Returns  the operation name 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: NXString OperationName
            (
            );
            /**Sets  the operation name 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void SetOperationName
            (
                const NXString & operationName /** operationname */ 
            );
            /**Sets  the operation name 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            void SetOperationName
            (
                const char * operationName /** operationname */ 
            );
            /**Returns  the logical action 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: NXOpen::ALP::VariantConditionBuilder::Condition LogicalAction
            (
            );
            /**Sets  the logical action 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void SetLogicalAction
            (
                NXOpen::ALP::VariantConditionBuilder::Condition logicalAction /** logicalaction */ 
            );
            /**Returns  the option name 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: NXOpen::ALP::VariantConditionBuilder::Condition OptionName
            (
            );
            /**Sets  the option name 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void SetOptionName
            (
                NXOpen::ALP::VariantConditionBuilder::Condition optionName /** optionname */ 
            );
            /**Returns  the operator type 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: NXOpen::ALP::VariantConditionBuilder::Condition OperatorType
            (
            );
            /**Sets  the operator type 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void SetOperatorType
            (
                NXOpen::ALP::VariantConditionBuilder::Condition operatorType /** operatortype */ 
            );
            /**Returns  the option value 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: NXOpen::ALP::VariantConditionBuilder::Condition OptionValue
            (
            );
            /**Sets  the option value 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void SetOptionValue
            (
                NXOpen::ALP::VariantConditionBuilder::Condition optionValue /** optionvalue */ 
            );
            /** Add a new line to the variant condition
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void AddLine
            (
            );
            /** Delete an existing line from the variant condition 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void DeleteLine
            (
            );
            /** Replace an existing line with a new condition 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void ReplaceLine
            (
            );
            /** Move an existing condition one line up in the set of variant condition 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void MoveUp
            (
            );
            /** Move an existing condition one line down in the set of variant condition 
             <br>  Created in NX1938.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void MoveDown
            (
            );
            /**Returns  a property to get or set the defined string of variant condition 
             <br>  Created in NX1942.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: NXString VariantCondition
            (
            );
            /**Sets  a property to get or set the defined string of variant condition 
             <br>  Created in NX1942.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void SetVariantCondition
            (
                const NXString & variantCondition /** variantcondition */ 
            );
            /**Sets  a property to get or set the defined string of variant condition 
             <br>  Created in NX1942.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            void SetVariantCondition
            (
                const char * variantCondition /** variantcondition */ 
            );

            /// \cond NX_NO_DOC 
            /**Returns  a property to get or set the selected operation on which variant condition is being defined 
             <br>  Created in NX1942.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: NXOpen::MfgModel::BOPOperation * SelectedOperation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  a property to get or set the selected operation on which variant condition is being defined 
             <br>  Created in NX1942.0.0.  <br>  
             <br> License requirements : alp_planner ("Assembly Line Planner") */
            public: void SetSelectedOperation
            (
                NXOpen::MfgModel::BOPOperation * selectedOperation /** selectedoperation */ 
            );

            /// \endcond 
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
