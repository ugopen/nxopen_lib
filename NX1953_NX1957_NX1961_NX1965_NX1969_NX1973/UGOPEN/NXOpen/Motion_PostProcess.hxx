#ifndef NXOpen_MOTION_POSTPROCESS_HXX_INCLUDED
#define NXOpen_MOTION_POSTPROCESS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_PostProcess.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class PostProcess;
    }
    namespace Motion
    {
        class MotionSession;
    }
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Assemblies
    {
        class Explosion;
    }
    namespace Motion
    {
        class IPostControl;
    }
    class NXObject;
    class Part;
    namespace Motion
    {
        class PostProcessImpl;
        /** Represents the motion post process  <br> To obtain an instance of this class, refer to @link NXOpen::Motion::MotionSession  NXOpen::Motion::MotionSession @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  PostProcess
        {
            /** The modes for envelope accuracy */
            public: enum EnvelopeAccuracyModes
            {
                EnvelopeAccuracyModesLow/** low */ ,
                EnvelopeAccuracyModesMedium/** medium */ ,
                EnvelopeAccuracyModesHigh/** high */ ,
                EnvelopeAccuracyModesCustom/** custom */ 
            };

            /** Envelope tolerance types */
            public: enum EnvelopeToleranceTypes
            {
                EnvelopeToleranceTypesPercentage/** percentage */ ,
                EnvelopeToleranceTypesAbsolute/** absolute */ 
            };

             /** Contains settings for envelope tolerance */
            public:
            struct EnvelopeTolerance
            {
                public: /** Accuracy mode. @link Motion::PostProcess::EnvelopeAccuracyModes  Motion::PostProcess::EnvelopeAccuracyModes @endlink .*/NXOpen::Motion::PostProcess::EnvelopeAccuracyModes AccuracyMode;
                public: /** Indicates if envelopeTolerance is specified as percentage value or absolute value. Used only if accurcayMode is @link Motion::PostProcess::EnvelopeAccuracyModesCustom  Motion::PostProcess::EnvelopeAccuracyModesCustom @endlink . */NXOpen::Motion::PostProcess::EnvelopeToleranceTypes ToleranceType;
                public: /** Tolerance value. Used only if accurcayMode is @link Motion::PostProcess::EnvelopeAccuracyModesCustom  Motion::PostProcess::EnvelopeAccuracyModesCustom @endlink . */double Tolerance;
                public: /** Indicates if decimation is enabled or not. Used only if accurcayMode is @link Motion::PostProcess::EnvelopeAccuracyModesCustom  Motion::PostProcess::EnvelopeAccuracyModesCustom @endlink .*/bool DecimationEnabled;
                public: /** Specifies targeted decimation rate which is decimated body/original body. Used only if accurcayMode is @link Motion::PostProcess::EnvelopeAccuracyModesCustom  Motion::PostProcess::EnvelopeAccuracyModesCustom @endlink . */double DecimationFactor;
                public: /** Specifies max decimation error: (bigger than 0): percentage, (less than 0): absolute value. Used only if accurcayMode is @link Motion::PostProcess::EnvelopeAccuracyModesCustom  Motion::PostProcess::EnvelopeAccuracyModesCustom @endlink . */double DecimationMaxError;
                public: EnvelopeTolerance() :
                    AccuracyMode((NXOpen::Motion::PostProcess::EnvelopeAccuracyModes)0),
                    ToleranceType((NXOpen::Motion::PostProcess::EnvelopeToleranceTypes)0),
                    Tolerance(),
                    DecimationEnabled(),
                    DecimationFactor(),
                    DecimationMaxError()
                {
                }
                /** Constructor for the EnvelopeTolerance struct. */ 
                public: EnvelopeTolerance(NXOpen::Motion::PostProcess::EnvelopeAccuracyModes accuracyModeInitial /** Accuracy mode. @link Motion::PostProcess::EnvelopeAccuracyModes  Motion::PostProcess::EnvelopeAccuracyModes @endlink .*/, 
                        NXOpen::Motion::PostProcess::EnvelopeToleranceTypes toleranceTypeInitial /** Indicates if envelopeTolerance is specified as percentage value or absolute value. Used only if accurcayMode is @link Motion::PostProcess::EnvelopeAccuracyModesCustom  Motion::PostProcess::EnvelopeAccuracyModesCustom @endlink . */, 
                        double toleranceInitial /** Tolerance value. Used only if accurcayMode is @link Motion::PostProcess::EnvelopeAccuracyModesCustom  Motion::PostProcess::EnvelopeAccuracyModesCustom @endlink . */, 
                        bool decimationEnabledInitial /** Indicates if decimation is enabled or not. Used only if accurcayMode is @link Motion::PostProcess::EnvelopeAccuracyModesCustom  Motion::PostProcess::EnvelopeAccuracyModesCustom @endlink .*/, 
                        double decimationFactorInitial /** Specifies targeted decimation rate which is decimated body/original body. Used only if accurcayMode is @link Motion::PostProcess::EnvelopeAccuracyModesCustom  Motion::PostProcess::EnvelopeAccuracyModesCustom @endlink . */, 
                        double decimationMaxErrorInitial /** Specifies max decimation error: (bigger than 0): percentage, (less than 0): absolute value. Used only if accurcayMode is @link Motion::PostProcess::EnvelopeAccuracyModesCustom  Motion::PostProcess::EnvelopeAccuracyModesCustom @endlink . */) :
                    AccuracyMode(accuracyModeInitial),
                    ToleranceType(toleranceTypeInitial),
                    Tolerance(toleranceInitial),
                    DecimationEnabled(decimationEnabledInitial),
                    DecimationFactor(decimationFactorInitial),
                    DecimationMaxError(decimationMaxErrorInitial)
                {
                }
            };

            public: /** Post process user function callback before dialog destroy, This callback function will be call when user click the user button.
                        The input integer value can be used as current animation step number 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            typedef NXOpen::Callback1<void, int> UserFunctionBeforeDialogDestroy;
            private: PostProcessImpl * m_postprocess_impl;
            private: NXOpen::Motion::MotionSession* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PostProcess(NXOpen::Motion::MotionSession *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PostProcess();
            /** Capture or update an arrangement from motion result of active solution.
                    If an arrangement with the given name is present, updates the arrangement. 
                    Otherwise new arrangement of the standard type is created.  @return  Assembly arrangement 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Assemblies::Arrangement * CaptureArrangement
            (
                const NXString & arrangementName /** Name for arrangement */,
                int animationStep /** Animation step */
            );
            /** Capture or update an arrangement from motion result of active solution.
                    If an arrangement with the given name is present, updates the arrangement. 
                    Otherwise new arrangement of the standard type is created.  @return  Assembly arrangement 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::Assemblies::Arrangement * CaptureArrangement
            (
                const char * arrangementName /** Name for arrangement */,
                int animationStep /** Animation step */
            );
            /** Capture or update an arrangement from motion result of active solution.
                    If an arrangement with the given name is present, updates the arrangement.
                    The arrangement type cannot be changed during update. If an arrangement with
                    the given name is not present, new arrangement is created. The new arrangement 
                    could be isolated or standard type. It depends on the arrangementType argument  @return  Assembly arrangement 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Assemblies::Arrangement * CaptureArrangement
            (
                const NXString & arrangementName /** Name for arrangement */,
                int arrangementType /** Arrangement type */,
                int animationStep /** Animation step */
            );
            /** Capture or update an arrangement from motion result of active solution.
                    If an arrangement with the given name is present, updates the arrangement.
                    The arrangement type cannot be changed during update. If an arrangement with
                    the given name is not present, new arrangement is created. The new arrangement 
                    could be isolated or standard type. It depends on the arrangementType argument  @return  Assembly arrangement 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::Assemblies::Arrangement * CaptureArrangement
            (
                const char * arrangementName /** Name for arrangement */,
                int arrangementType /** Arrangement type */,
                int animationStep /** Animation step */
            );
            /** Creates envelopes for the given objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void CreateEnvelope
            (
                NXOpen::Motion::IPostControl * tPostControl /** The IPostControl object */,
                NXOpen::NXObject * destinationPart /**  The part to save swept the objects into */,
                bool addToRefSets /** Indicates whether the output should be added to Model/Lightweight reference sets or not */,
                NXOpen::NXObject * referenceFrameObj /** The object acts as reference frame */,
                const std::vector<NXOpen::NXObject *> & sourceObjs /** The objects swept bodies are created from */,
                int stepFrom /** The step index where the envelope starts */,
                int stepTo /** The step index where the envelope stops */,
                const NXOpen::Motion::PostProcess::EnvelopeTolerance & toleranceSetting /** The tolerance settings */,
                std::vector<NXOpen::NXObject *> & sweptBodies /** The resulting swept bodies */,
                std::vector<NXOpen::NXObject *> & skipedObj /** The objects skipped because invisible or not moving */,
                std::vector<NXOpen::NXObject *> & failedObjs /** The objects failed because of an algorithm failure */,
                bool* aborted /** True if user hits the stop button, false otherwise */
            );
            /** Create sequence  @return  Sequence 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::NXObject * CreateSequence
            (
                const NXString & sequenceName /** The sequence name */
            );
            /** Create sequence  @return  Sequence 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::NXObject * CreateSequence
            (
                const char * sequenceName /** The sequence name */
            );

            /// \cond NX_NO_DOC 
            /** Print sequence data to autotest xml 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void PrintSequence
            (
                NXOpen::NXObject * sequenceTag /** Sequence */
            );

            /// \endcond 
            /** Trace current position 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void TraceCurrentPosition
            (
            );
            /** Trace entire mechanism 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void TraceEntireMechanism
            (
            );
            /** Trace intersection curve 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void TraceIntersectionCurve
            (
            );
            /** Explode mechanism  @return  @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Assemblies::Explosion * ExplodeMechanism
            (
                const NXString & explosionName /** Name for explosion */
            );
            /** Explode mechanism  @return  @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::Assemblies::Explosion * ExplodeMechanism
            (
                const char * explosionName /** Name for explosion */
            );
            /** Export to movie 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ExportToMovie
            (
                const NXString & movieName /** Name for movie to export */
            );
            /** Export to movie 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void ExportToMovie
            (
                const char * movieName /** Name for movie to export */
            );
            /** List measure 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ListMeasure
            (
            );
            /** List interference 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ListInterference
            (
            );
            /** Get interference option for animation/articulation/spreadsheet run  @return Interference on/off options 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool GetInterferenceOption
            (
            );
            /** Set interference option for animation/articulation/spreadsheet run 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetInterferenceOption
            (
                bool interferenceOn /**Interference on/off options */
            );
            /** Get measure option animation/articulation/spreadsheet run @return Measure on/off options 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool GetMeasureOption
            (
            );
            /** Set measure option animation/articulation/spreadsheet run
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMeasureOption
            (
                bool measureOn /**Measure on/off options */
            );
            /** Get trace option animation/articulation/spreadsheet run @return Trace on/off options 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool GetTraceOption
            (
            );
            /** Set articulation trace option animation/articulation/spreadsheet run
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTraceOption
            (
                bool traceOn /**Trace on/off options */
            );
            /** Get stop on event option animation/articulation/spreadsheet run @return Stop on event on/off options 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool GetStopOnEventOption
            (
            );
            /** Set articulation stop on event option animation/articulation/spreadsheet run
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStopOnEventOption
            (
                bool stopOnEventOn /**Stop on event on/off options */
            );
            /** Get the animation speed for motion animation  @return  The animation speed 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int GetSpeed
            (
            );
            /** Set the animation speed for motion animation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSpeed
            (
                int speed /** The animation speed */
            );
            /** Set the speed factor for motion real time animation  @return  The speed factor for real time animation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetRealTimeAnimationSpeedFactor
            (
            );
            /** Get the speed factor for motion real time animation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRealTimeAnimationSpeedFactor
            (
                double speedFactor /** The speed factor for real time animation */
            );
            /** Set the animation speed control type  @return  The animation speed control type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::AnimationSpeedControlType GetAnimationSpeedControlType
            (
            );
            /** Get the animation speed control type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAnimationSpeedControlType
            (
                NXOpen::Motion::AnimationSpeedControlType speedControlType /** The animation speed control type */
            );
            /** Get the rigid only animation  @return  The rigid only animation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool GetRigidOnlyAnimation
            (
            );
            /** Set the rigid only animation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRigidOnlyAnimation
            (
                bool rigidOnlyAnimation /** The rigid only animation */
            );
            /** Register user button for post process. If the functionBeforeUIDestroy is register, the motion post animation, articulation, spreadsheet run UI 
                        will display the user button as the buttonName and buttonTips setting. and in this button action, it will invoke the register function and 
                        the function by menu script registered 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void RegisterUserButton
            (
                const NXString & buttonName /** the name displayed on the button*/,
                const NXString & buttonTips /** the button tool tip */,
                const NXString & buttonMenuScriptName /** the menu script name of the button */,
                const NXOpen::Motion::PostProcess::UserFunctionBeforeDialogDestroy&  functionBeforeUIDestroy /** User function for this button before dialog destroy */
            );
            /** Register user button for post process. If the functionBeforeUIDestroy is register, the motion post animation, articulation, spreadsheet run UI 
                        will display the user button as the buttonName and buttonTips setting. and in this button action, it will invoke the register function and 
                        the function by menu script registered 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void RegisterUserButton
            (
                const char * buttonName /** the name displayed on the button*/,
                const char * buttonTips /** the button tool tip */,
                const char * buttonMenuScriptName /** the menu script name of the button */,
                const NXOpen::Motion::PostProcess::UserFunctionBeforeDialogDestroy&  functionBeforeUIDestroy /** User function for this button before dialog destroy */
            );
            /** Export a real-time movie 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ExportRealTimeMovie
            (
                const NXString & movieName /** Name for movie to export */
            );
            /** Export a real-time movie 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void ExportRealTimeMovie
            (
                const char * movieName /** Name for movie to export */
            );
            /** Export Animation to Teamcenter 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ExportAnimationToTeamcenter
            (
                NXOpen::Part * motionPart /** motionpart */ ,
                const NXString & snapShotName /** snapshotname */ 
            );
            /** Export Animation to Teamcenter 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void ExportAnimationToTeamcenter
            (
                NXOpen::Part * motionPart /** motionpart */ ,
                const char * snapShotName /** snapshotname */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
