#ifndef NXOpen_TOOLING_PROCESSSIMULATIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_PROCESSSIMULATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ProcessSimulationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ProcessSimulationBuilder;
    }
    class Builder;
    class Expression;
    namespace Tooling
    {
        class _ProcessSimulationBuilderBuilder;
        class ProcessSimulationBuilderImpl;
        /** Represents a @link NXOpen::Tooling::ProcessSimulationBuilder NXOpen::Tooling::ProcessSimulationBuilder@endlink  to animate the model, 
            analyze the collision and reference. NULL is returned  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateProcessSimulationBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateProcessSimulationBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AngleExpression.Value </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CheckPrecision </term> <description> 
         
        DefaultValue </description> </item> 

        <item><term> 
         
        ClearanceCollision </term> <description> 
         
        1.0 (millimeters part), 0.04 (inches part) </description> </item> 

        <item><term> 
         
        CollisionCheckOption </term> <description> 
         
        MeshTriangleIntersection </description> </item> 

        <item><term> 
         
        CurrentAngleIndex </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        EndAngle </term> <description> 
         
        359.9 </description> </item> 

        <item><term> 
         
        GotoRun </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        IntervalDimension.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        IsDone </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        IsSingleStep </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        IsStepForward </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        NeedCheckCollision </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        PreviousAngleIndex </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SecondsPerStroke </term> <description> 
         
        8 </description> </item> 

        <item><term> 
         
        StartAngle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        TimeExpression.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ProcessSimulationBuilder : public NXOpen::Builder
        {
            /** Specifies the collision check method */
            public: enum CollisionCheckOptions
            {
                CollisionCheckOptionsFacetBodyDistance/** Measure facet bodies distance to do collision check */,
                CollisionCheckOptionsMeshTriangleIntersection/** Mesh facet body, check the mesh triangle intersection or not */,
                CollisionCheckOptionsSolidBodyIntersection/** Get the solid body, use intersection boolean result to do collision check */
            };

            /** Specifies the collision check precision */
            public: enum CollisionCheckPrecision
            {
                CollisionCheckPrecisionOne/** Precision 0.1*/,
                CollisionCheckPrecisionTwo/** Precision 0.2 */,
                CollisionCheckPrecisionThree/** Precision 0.5 */,
                CollisionCheckPrecisionFour/** Precision 1.0 */,
                CollisionCheckPrecisionDefaultValue/** Precision 2.0 */,
                CollisionCheckPrecisionFiv/** Precision 5.0 */,
                CollisionCheckPrecisionTen/** Precision 10.0 */
            };

            private: ProcessSimulationBuilderImpl * m_processsimulationbuilder_impl;
            private: friend class  _ProcessSimulationBuilderBuilder;
            protected: ProcessSimulationBuilder();
            public: ~ProcessSimulationBuilder();
            /**Returns  the goto run angle stores the position in the cycle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double GotoRun
            (
            );
            /**Sets  the goto run angle stores the position in the cycle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetGotoRun
            (
                double gotoRun /** gotorun */ 
            );
            /**Returns  the start angle of the simulation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double StartAngle
            (
            );
            /**Sets  the start angle of the simulation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStartAngle
            (
                double startAngle /** startangle */ 
            );
            /**Returns  the end angle of the simulation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double EndAngle
            (
            );
            /**Sets  the end angle of the simulation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEndAngle
            (
                double endAngle /** endangle */ 
            );
            /**Returns  the seconds Per Stroke 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double SecondsPerStroke
            (
            );
            /**Sets  the seconds Per Stroke 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSecondsPerStroke
            (
                double secondsPerStroke /** secondsperstroke */ 
            );
            /**Returns  the angle of the cycle position 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * AngleExpression
            (
            );
            /**Returns  the time in the cycle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TimeExpression
            (
            );
            /**Returns  the interval value of refresh 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * IntervalDimension
            (
            );
            /**Returns  the option of check precision 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ProcessSimulationBuilder::CollisionCheckPrecision CheckPrecision
            (
            );
            /**Sets  the option of check precision 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCheckPrecision
            (
                NXOpen::Tooling::ProcessSimulationBuilder::CollisionCheckPrecision checkPrecision /** checkprecision */ 
            );
            /**Returns  the clearance value of collision or interference 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double ClearanceCollision
            (
            );
            /**Sets  the clearance value of collision or interference 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetClearanceCollision
            (
                double clearanceCollision /** clearancecollision */ 
            );
            /**Returns  the collision check method option 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ProcessSimulationBuilder::CollisionCheckOptions CollisionCheckOption
            (
            );
            /**Sets  the collision check method option 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCollisionCheckOption
            (
                NXOpen::Tooling::ProcessSimulationBuilder::CollisionCheckOptions collisionCheckMethod /** collisioncheckmethod */ 
            );
            /**Returns  the load collision data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LoadCollisions
            (
            );
            /**Sets  the load collision data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetLoadCollisions
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the load collision data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            void SetLoadCollisions
            (
                const char * filename /** filename */ 
            );
            /**Returns  the export file of kinematic model control data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ExportControlData
            (
            );
            /**Sets  the export file of kinematic model control data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetExportControlData
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the export file of kinematic model control data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            void SetExportControlData
            (
                const char * filename /** filename */ 
            );
            /**Returns  the is step forward or not
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsStepForward
            (
            );
            /**Sets  the is step forward or not
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetStepForward
            (
                bool isStepForward /** isstepforward */ 
            );
            /**Returns  the is single step or not 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSingleStep
            (
            );
            /**Sets  the is single step or not 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetSingleStep
            (
                bool isSingleStep /** issinglestep */ 
            );
            /** The initial run simulation method 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void InitRunSimulation
            (
            );
            /** The on check collision button 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void OnCheckCollision
            (
            );
            /** The play run simulation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SimulationPlay
            (
            );
            /** The clear collision run simulation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ClearRunSimulation
            (
            );
            /** The stop simulation method
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void StopSimulation
            (
            );
            /** The goto start position method
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void GotoStart
            (
            );
            /** The goto end position method
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void GotoEnd
            (
            );
            /**Returns  the current angle index 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int CurrentAngleIndex
            (
            );
            /**Sets  the current angle index 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCurrentAngleIndex
            (
                int currentAngleIndex /** currentangleindex */ 
            );
            /**Returns  the previous angle index 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int PreviousAngleIndex
            (
            );
            /**Sets  the previous angle index 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPreviousAngleIndex
            (
                int previousAngleIndex /** previousangleindex */ 
            );
            /**Returns  the simulation is done 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsDone
            (
            );
            /**Sets  the simulation is done 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDone
            (
                bool isDone /** isdone */ 
            );
            /**Returns  the is need to check collision or not 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool NeedCheckCollision
            (
            );
            /**Sets  the is need to check collision or not 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNeedCheckCollision
            (
                bool needCheckCollision /** needcheckcollision */ 
            );
            /** The display interval update method @return  The display interval
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: double DisplayIntervalUpdate
            (
            );
            /** The goto special position method @return  The go to specialed angle
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: double GotoToAngle
            (
            );
            /** The initail checking collision method
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void InitCollisionCheck
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
