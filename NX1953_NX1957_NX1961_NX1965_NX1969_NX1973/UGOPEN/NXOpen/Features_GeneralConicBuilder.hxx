#ifndef NXOpen_FEATURES_GENERALCONICBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_GENERALCONICBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_GeneralConicBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_CurveExtensionBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class GeneralConicBuilder;
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveExtensionBuilder;
    }
    class Plane;
    class Point;
    namespace Features
    {
        class _GeneralConicBuilderBuilder;
        class GeneralConicBuilderImpl;
        /**
            Represents a @link NXOpen::Features::GeneralConic NXOpen::Features::GeneralConic@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateGeneralConicBuilder  NXOpen::Features::FeatureCollection::CreateGeneralConicBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        DrawingPlaneOption </term> <description> 
         
        View </description> </item> 

        <item><term> 
         
        Extender.EndExtensionOption </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        Extender.EndValue.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        Extender.StartExtensionOption </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        Extender.StartValue.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        PlaneConstrainedToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RhoValue (deprecated) </term> <description> 
         
        0.5 </description> </item> 

        <item><term> 
         
        ValueA </term> <description> 
         
        1.0 </description> </item> 

        <item><term> 
         
        ValueB </term> <description> 
         
        0.0 </description> </item> 

        <item><term> 
         
        ValueC </term> <description> 
         
        1.0 </description> </item> 

        <item><term> 
         
        ValueD </term> <description> 
         
        0.0 </description> </item> 

        <item><term> 
         
        ValueE </term> <description> 
         
        0.0 </description> </item> 

        <item><term> 
         
        ValueF </term> <description> 
         
        -1.0 </description> </item> 

        </list> 

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  GeneralConicBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** General Conic Types. There are several creation methods available. All except the @link TypesCoefficients TypesCoefficients@endlink  type require setting points/slopes. */
            public: enum Types
            {
                TypesFivePoints/** Five points, no slopes, no anchor, no rho value */,
                TypesFourPointsOneSlope/** Four points, one slope, no anchor, no rho value */,
                TypesThreePointsTwoSlopes/** Three points, two slopes, no anchor, no rho value */,
                TypesThreePointsAnchor/** Three points, no slopes, anchor, no rho value */,
                TypesTwoPointsAnchorRho/** Two points, no slopes, anchor, rho value */,
                TypesTwoPointsTwoSlopesRho/** Two points, two slopes, no anchor, rho value */,
                TypesCoefficients/** Coefficient values and @link CoefficientCSYS CoefficientCSYS@endlink  */
            };

            /** Drawing Plane options. Used by all point types to specify point selection guide planes. */
            public: enum DrawingPlaneOptions
            {
                DrawingPlaneOptionsView/** Use view plane */,
                DrawingPlaneOptionsXcYc/** Use XC-YC plane */,
                DrawingPlaneOptionsYcZc/** Use YC-ZC plane */,
                DrawingPlaneOptionsZcXc/** Use ZC-XC plane */,
                DrawingPlaneOptionsGeneral/** Use @link GeneralDrawingPlane GeneralDrawingPlane @endlink and @link SetGeneralDrawingPlane SetGeneralDrawingPlane @endlink  plane */
            };

            private: GeneralConicBuilderImpl * m_generalconicbuilder_impl;
            private: friend class  _GeneralConicBuilderBuilder;
            protected: GeneralConicBuilder();
            public: ~GeneralConicBuilder();
            /**Returns  the start point. Used by all point types 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * StartPoint
            (
            );
            /**Sets  the start point. Used by all point types 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetStartPoint
            (
                NXOpen::Point * startPoint /** startpoint */ 
            );
            /**Returns  the first interior point. Used by @link TypesFivePoints TypesFivePoints@endlink  @link TypesFourPointsOneSlope TypesFourPointsOneSlope@endlink  @link Types
                        ThreePointsTwoSlopes Types
                        ThreePointsTwoSlopes@endlink  @link TypesThreePointsAnchor TypesThreePointsAnchor@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * InteriorPoint1
            (
            );
            /**Sets  the first interior point. Used by @link TypesFivePoints TypesFivePoints@endlink  @link TypesFourPointsOneSlope TypesFourPointsOneSlope@endlink  @link Types
                        ThreePointsTwoSlopes Types
                        ThreePointsTwoSlopes@endlink  @link TypesThreePointsAnchor TypesThreePointsAnchor@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetInteriorPoint1
            (
                NXOpen::Point * interiorPoint1 /** interiorpoint1 */ 
            );
            /**Returns  the second interior point. Used by @link TypesFivePoints TypesFivePoints@endlink  @link TypesFourPointsOneSlope TypesFourPointsOneSlope@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * InteriorPoint2
            (
            );
            /**Sets  the second interior point. Used by @link TypesFivePoints TypesFivePoints@endlink  @link TypesFourPointsOneSlope TypesFourPointsOneSlope@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetInteriorPoint2
            (
                NXOpen::Point * interiorPoint2 /** interiorpoint2 */ 
            );
            /**Returns  the third interior point. Used by @link TypesFivePoints TypesFivePoints@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * InteriorPoint3
            (
            );
            /**Sets  the third interior point. Used by @link TypesFivePoints TypesFivePoints@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetInteriorPoint3
            (
                NXOpen::Point * interiorPoint3 /** interiorpoint3 */ 
            );
            /**Returns  the end point. Used by all point types 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * EndPoint
            (
            );
            /**Sets  the end point. Used by all point types 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetEndPoint
            (
                NXOpen::Point * endPoint /** endpoint */ 
            );
            /**Returns  the slope at start point. Used by @link TypesFourPointsOneSlope TypesFourPointsOneSlope@endlink  @link TypesThreePointsTwoSlopes TypesThreePointsTwoSlopes@endlink  @link TypesTwoPointsTwoSlopesRho TypesTwoPointsTwoSlopesRho@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SlopeAtStartPoint
            (
            );
            /**Sets  the slope at start point. Used by @link TypesFourPointsOneSlope TypesFourPointsOneSlope@endlink  @link TypesThreePointsTwoSlopes TypesThreePointsTwoSlopes@endlink  @link TypesTwoPointsTwoSlopesRho TypesTwoPointsTwoSlopesRho@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSlopeAtStartPoint
            (
                NXOpen::Direction * slopeAtStartPoint /** slopeatstartpoint */ 
            );
            /**Returns  the slope at end point. Used by @link TypesThreePointsTwoSlopes TypesThreePointsTwoSlopes@endlink  @link TypesTwoPointsTwoSlopesRho TypesTwoPointsTwoSlopesRho@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SlopeAtEndPoint
            (
            );
            /**Sets  the slope at end point. Used by @link TypesThreePointsTwoSlopes TypesThreePointsTwoSlopes@endlink  @link TypesTwoPointsTwoSlopesRho TypesTwoPointsTwoSlopesRho@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSlopeAtEndPoint
            (
                NXOpen::Direction * slopeAtEndPoint /** slopeatendpoint */ 
            );
            /**Returns  the anchor point. Used by @link TypesThreePointsAnchor TypesThreePointsAnchor@endlink  @link TypesTwoPointsAnchorRho TypesTwoPointsAnchorRho@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * AnchorPoint
            (
            );
            /**Sets  the anchor point. Used by @link TypesThreePointsAnchor TypesThreePointsAnchor@endlink  @link TypesTwoPointsAnchorRho TypesTwoPointsAnchorRho@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetAnchorPoint
            (
                NXOpen::Point * anchorPoint /** anchorpoint */ 
            );
            /**Returns  the rho value. Used by @link TypesTwoPointsAnchorRho TypesTwoPointsAnchorRho@endlink  @link TypesTwoPointsTwoSlopesRho TypesTwoPointsTwoSlopesRho@endlink  
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::Features::GeneralConicBuilder::Rho NXOpen::Features::GeneralConicBuilder::Rho@endlink  <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::Features::GeneralConicBuilder::Rho") double RhoValue
            (
            );
            /**Sets  the rho value. Used by @link TypesTwoPointsAnchorRho TypesTwoPointsAnchorRho@endlink  @link TypesTwoPointsTwoSlopesRho TypesTwoPointsTwoSlopesRho@endlink  
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::Features::GeneralConicBuilder::Rho NXOpen::Features::GeneralConicBuilder::Rho@endlink  <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::Features::GeneralConicBuilder::Rho") void SetRhoValue
            (
                double rhoValue /** rhovalue */ 
            );
            /**Returns  the coefficient value for a. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ValueA
            (
            );
            /**Sets  the coefficient value for a. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetValueA
            (
                double valueA /** valuea */ 
            );
            /**Returns  the coefficient value for b. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ValueB
            (
            );
            /**Sets  the coefficient value for b. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetValueB
            (
                double valueB /** valueb */ 
            );
            /**Returns  the coefficient value for c. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ValueC
            (
            );
            /**Sets  the coefficient value for c. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetValueC
            (
                double valueC /** valuec */ 
            );
            /**Returns  the coefficient value for d. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ValueD
            (
            );
            /**Sets  the coefficient value for d. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetValueD
            (
                double valueD /** valued */ 
            );
            /**Returns  the coefficient value for e. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ValueE
            (
            );
            /**Sets  the coefficient value for e. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetValueE
            (
                double valueE /** valuee */ 
            );
            /**Returns  the coefficient value for f. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ValueF
            (
            );
            /**Sets  the coefficient value for f. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetValueF
            (
                double valueF /** valuef */ 
            );
            /**Returns  the coefficient type coordinate system. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * CoefficientCSYS
            (
            );
            /**Sets  the coefficient type coordinate system. Only used by @link TypesCoefficients TypesCoefficients@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetCoefficientCSYS
            (
                NXOpen::CoordinateSystem * coefficientCSYS /** coefficientcsys */ 
            );
            /**Returns  the plane constrained toggle. Used by point types. Enables @link ConstrainedPlaneCSYS ConstrainedPlaneCSYS @endlink and @link SetConstrainedPlaneCSYS SetConstrainedPlaneCSYS @endlink . 
                    Disables @link NXOpen::Features::PolylineBuilder::DrawingPlaneOptions NXOpen::Features::PolylineBuilder::DrawingPlaneOptions@endlink  and @link GeneralDrawingPlane GeneralDrawingPlane @endlink and @link SetGeneralDrawingPlane SetGeneralDrawingPlane @endlink . 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PlaneConstrainedToggle
            (
            );
            /**Sets  the plane constrained toggle. Used by point types. Enables @link ConstrainedPlaneCSYS ConstrainedPlaneCSYS @endlink and @link SetConstrainedPlaneCSYS SetConstrainedPlaneCSYS @endlink . 
                    Disables @link NXOpen::Features::PolylineBuilder::DrawingPlaneOptions NXOpen::Features::PolylineBuilder::DrawingPlaneOptions@endlink  and @link GeneralDrawingPlane GeneralDrawingPlane @endlink and @link SetGeneralDrawingPlane SetGeneralDrawingPlane @endlink . 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetPlaneConstrainedToggle
            (
                bool planeConstrainedToggle /** planeconstrainedtoggle */ 
            );
            /**Returns  the constrained plane. Used by point types. Enabled by @link PlaneConstrainedToggle PlaneConstrainedToggle @endlink and @link SetPlaneConstrainedToggle SetPlaneConstrainedToggle @endlink . 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * ConstrainedPlaneCSYS
            (
            );
            /**Sets  the constrained plane. Used by point types. Enabled by @link PlaneConstrainedToggle PlaneConstrainedToggle @endlink and @link SetPlaneConstrainedToggle SetPlaneConstrainedToggle @endlink . 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetConstrainedPlaneCSYS
            (
                NXOpen::CoordinateSystem * constrainedPlaneCSYS /** constrainedplanecsys */ 
            );
            /**Returns  the drawing plane. Used by point types. Disabled by @link PlaneConstrainedToggle PlaneConstrainedToggle @endlink and @link SetPlaneConstrainedToggle SetPlaneConstrainedToggle @endlink . 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GeneralConicBuilder::DrawingPlaneOptions DrawingPlaneOption
            (
            );
            /**Sets  the drawing plane. Used by point types. Disabled by @link PlaneConstrainedToggle PlaneConstrainedToggle @endlink and @link SetPlaneConstrainedToggle SetPlaneConstrainedToggle @endlink . 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetDrawingPlaneOption
            (
                NXOpen::Features::GeneralConicBuilder::DrawingPlaneOptions drawingPlaneOption /** drawingplaneoption */ 
            );
            /**Returns  the specify plane. Used by point types. Disabled by @link PlaneConstrainedToggle PlaneConstrainedToggle @endlink and @link SetPlaneConstrainedToggle SetPlaneConstrainedToggle @endlink . 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * GeneralDrawingPlane
            (
            );
            /**Sets  the specify plane. Used by point types. Disabled by @link PlaneConstrainedToggle PlaneConstrainedToggle @endlink and @link SetPlaneConstrainedToggle SetPlaneConstrainedToggle @endlink . 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetGeneralDrawingPlane
            (
                NXOpen::Plane * generalDrawingPlane /** generaldrawingplane */ 
            );
            /**Returns  the associative toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool AssociativeToggle
            (
            );
            /**Sets  the associative toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetAssociativeToggle
            (
                bool associativeToggle /** associativetoggle */ 
            );
            /**Returns  the conic creation type. See @link NXOpen::Features::SewBuilder::Types NXOpen::Features::SewBuilder::Types@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GeneralConicBuilder::Types Type
            (
            );
            /**Sets  the conic creation type. See @link NXOpen::Features::SewBuilder::Types NXOpen::Features::SewBuilder::Types@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetType
            (
                NXOpen::Features::GeneralConicBuilder::Types type /** type */ 
            );
            /**Returns  the extension option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::GeometricUtilities::CurveExtensionBuilder * Extender
            (
            );
            /** Evaluates the curve. Does not call update. Used to preview results. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void Evaluate
            (
            );
            /**Returns  the rho value. Used by @link TypesTwoPointsAnchorRho TypesTwoPointsAnchorRho@endlink  and @link TypesTwoPointsTwoSlopesRho TypesTwoPointsTwoSlopesRho@endlink  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Rho
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
