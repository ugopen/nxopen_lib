#ifndef NXOpen_CAM_INSPECTIONPOLARGRIDBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONPOLARGRIDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionPolarGridBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionMethodBuilder.hxx>
#include <NXOpen/CAM_InspectionMoveBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionPolarGridBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    namespace CAM
    {
        class InspectionMoveBuilder;
    }
    namespace CAM
    {
        class InspectionMoveSubop;
    }
    class NXObject;
    class Point;
    namespace CAM
    {
        class _InspectionPolarGridBuilderBuilder;
        class InspectionPolarGridBuilderImpl;
        /** Represents the builder for the CMM Inspection Polar Grid sub-operation.  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionMoveCollection::CreateInspectionPolarGridBuilder  NXOpen::CAM::InspectionMoveCollection::CreateInspectionPolarGridBuilder @endlink  <br> 
         <br>  Created in NX11.0.2.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionPolarGridBuilder : public NXOpen::CAM::InspectionMoveBuilder
        {
            private: InspectionPolarGridBuilderImpl * m_inspectionpolargridbuilder_impl;
            private: friend class  _InspectionPolarGridBuilderBuilder;
            protected: InspectionPolarGridBuilder();
            public: ~InspectionPolarGridBuilder();
            /**Returns  the center point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * CenterPoint
            (
            );
            /**Sets  the center point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetCenterPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the minimum radius point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * MinimumRadiusPoint
            (
            );
            /**Sets  the minimum radius point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetMinimumRadiusPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the maximum radius point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * MaximumRadiusPoint
            (
            );
            /**Sets  the maximum radius point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetMaximumRadiusPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the angle start point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * AngleStartPoint
            (
            );
            /**Sets  the angle start point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetAngleStartPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the angle end point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * AngleEndPoint
            (
            );
            /**Sets  the angle end point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetAngleEndPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the number of radial points 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * NumberOfRadialPoints
            (
            );
            /**Returns  the number of angular points 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * NumberOfAngularPoints
            (
            );
            /**Returns  the minimum radius 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MinimumRadius
            (
            );
            /**Returns  the maximum radius 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MaximumRadius
            (
            );
            /**Returns  the offset from minimum radius 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * OffsetMinimumRadius
            (
            );
            /**Returns  the offset from maximum radius 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * OffsetMaximumRadius
            (
            );
            /**Returns  the minimum radius mode 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PolarRadiusModeTypes MinimumRadiusMode
            (
            );
            /**Sets  the minimum radius mode 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMinimumRadiusMode
            (
                NXOpen::CAM::InspectionMethodBuilder::PolarRadiusModeTypes radiusMode /** radiusmode */ 
            );
            /**Returns  the maximum radius mode 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PolarRadiusModeTypes MaximumRadiusMode
            (
            );
            /**Sets  the maximum radius mode 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMaximumRadiusMode
            (
                NXOpen::CAM::InspectionMethodBuilder::PolarRadiusModeTypes radiusMode /** radiusmode */ 
            );
            /**Returns  the angle mode 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PolarAngleModeTypes AngleMode
            (
            );
            /**Sets  the angle mode 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleMode
            (
                NXOpen::CAM::InspectionMethodBuilder::PolarAngleModeTypes angleMode /** anglemode */ 
            );
            /**Returns  the offset in degrees from start vector 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * OffsetStartAngle
            (
            );
            /**Returns  the offset in degrees from end vector 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * OffsetEndAngle
            (
            );
            /**Returns  the approach distance 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ApproachDist
            (
            );
            /**Returns  the retract distance 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * RetractDist
            (
            );
            /**Returns  the flag to use feature collision avoidance 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool UseFeatureCollisionAvoidance
            (
            );
            /**Sets  the flag to use feature collision avoidance 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUseFeatureCollisionAvoidance
            (
                bool flag /** flag */ 
            );
            /**Returns  the flag to use part collision avoidance 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool UsePartCollisionAvoidance
            (
            );
            /**Sets  the flag to use part collision avoidance 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUsePartCollisionAvoidance
            (
                bool flag /** flag */ 
            );
            /**Returns  the flag to align with machine axes 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool AlignMachineAxes
            (
            );
            /**Sets  the flag to align with machine axes 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAlignMachineAxes
            (
                bool flag /** flag */ 
            );
            /**Returns  the point sequence mode 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PolarPointSequenceTypes PointSequence
            (
            );
            /**Sets  the point sequence mode 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequence
            (
                NXOpen::CAM::InspectionMethodBuilder::PolarPointSequenceTypes ptSeqMode /** ptseqmode */ 
            );
            /**Returns  the point sequence start location 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PolarSequenceStartTypes SequenceStart
            (
            );
            /**Sets  the point sequence start location 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSequenceStart
            (
                NXOpen::CAM::InspectionMethodBuilder::PolarSequenceStartTypes ptSeqStart /** ptseqstart */ 
            );
            /**Returns  the point sequence start direction 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PolarSequenceDirectionTypes SequenceDirection
            (
            );
            /**Sets  the point sequence start direction 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSequenceDirection
            (
                NXOpen::CAM::InspectionMethodBuilder::PolarSequenceDirectionTypes ptSeqDir /** ptseqdir */ 
            );
            /** Flag indicating whether layout changed. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLayoutChanged
            (
                bool flag /** flag */ 
            );
            /** Flag indicating whether point coverage changed. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointCoverageChanged
            (
                bool flag /** flag */ 
            );
            /** Flag indicating whether approach distance changed. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAppDistChanged
            (
                bool flag /** flag */ 
            );
            /** Flag indicating whether retract distance changed. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRetDistChanged
            (
                bool flag /** flag */ 
            );
            /** Flag indicating whether point sequence changed. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequenceChanged
            (
                bool flag /** flag */ 
            );
            /**Returns  the measured geometry 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * MeasuredGeometry
            (
            );
            /**Sets  the measured geometry 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMeasuredGeometry
            (
                NXOpen::NXObject * face /** face */ 
            );
            /** Copy point grid parameters 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void CopyAttributes
            (
                NXOpen::CAM::InspectionPolarGridBuilder * target /** target */ 
            );
            /** Update point grid parameters based on geometry 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateParamsFromGeometry
            (
            );
            /** Update point grid parameters based on another sub-operation 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateFromSubOperation
            (
                NXOpen::CAM::InspectionMoveSubop * source /** source */ 
            );
            /**Returns  the transition motion type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::TransitionMotionTypes TransitionMotion
            (
            );
            /**Sets  the transition motion type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTransitionMotion
            (
                NXOpen::CAM::InspectionMethodBuilder::TransitionMotionTypes motionType /** motiontype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
