#ifndef NXOpen_FEATURES_SHIPDESIGN_READDATASETBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHIPDESIGN_READDATASETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShipDesign_ReadDataSetBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace ShipDesign
        {
            class ReadDataSetBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class _ReadDataSetBuilderBuilder;
            class ReadDataSetBuilderImpl;
            /** This class will read a data set file from Team Center 
             <br>  Created in NX8.5.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  ReadDataSetBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
            {
                private: ReadDataSetBuilderImpl * m_readdatasetbuilder_impl;
                private: friend class  _ReadDataSetBuilderBuilder;
                protected: ReadDataSetBuilder();
                public: ~ReadDataSetBuilder();
                /** The list of available data set names under the current work part
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: void GetDataSetNames
                (
                    std::vector<NXString> & dataSetNames /** Available data set names derived
                                                                                                          from the input Team Center relations.  */
                );
                /**Returns  the index value of the available data set names 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: int DataSets
                (
                );
                /**Sets  the index value of the available data set names 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetDataSets
                (
                    int dataSets /** datasets */ 
                );
                /**Returns  the flag that represents if toggle is on the a file of the data set type can be retrieved from the Native file system 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool NativeToggle
                (
                );
                /**Sets  the flag that represents if toggle is on the a file of the data set type can be retrieved from the Native file system 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetNativeToggle
                (
                    bool nativeToggle /** nativetoggle */ 
                );
                /**Returns  the file name of the data set from the native file system
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXString NativeFileBrowser
                (
                );
                /**Sets  the file name of the data set from the native file system
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetNativeFileBrowser
                (
                    const NXString & filename /** filename */ 
                );
                /**Sets  the file name of the data set from the native file system
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                void SetNativeFileBrowser
                (
                    const char * filename /** filename */ 
                );
                /**Returns  the property that if the toggle is on then the native file will be added to current work part as a data set 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool CreateDataSetToggle
                (
                );
                /**Sets  the property that if the toggle is on then the native file will be added to current work part as a data set 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetCreateDataSetToggle
                (
                    bool createDataSetToggle /** createdatasettoggle */ 
                );
                /** Validate whether the inputs to the component are sufficient for 
                            commit to be called.  If the component is not in a state to commit
                            then an exception is thrown.  For example, if the component requires
                            you to set some property, this method will throw an exception if
                            you haven't set it.  This method throws a not yet implemented
                            NXException for some components.
                         @return  Was self validation successful 
                 <br>  Created in NX3.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual bool Validate
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
