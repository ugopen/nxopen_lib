#ifndef NXOpen_MOTION_BODYCONTACTRECURDYN_HXX_INCLUDED
#define NXOpen_MOTION_BODYCONTACTRECURDYN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_BodyContactRecurdyn.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class BodyContactRecurdyn;
    }
    class Expression;
    class NXObject;
    namespace Motion
    {
        class _BodyContactRecurdynBuilder;
        class BodyContactRecurdynImpl;
        /** Represents a @link NXOpen::Motion::BodyContactRecurdyn NXOpen::Motion::BodyContactRecurdyn@endlink  
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  BodyContactRecurdyn : public NXOpen::NXObject
        {
            /** the enum for forec model of 3D contact */
            public: enum ForceModel
            {
                ForceModelImpact/** impact */ ,
                ForceModelPoisson/** poisson */ 
            };

            /** the enum for friction option of 3D contact */
            public: enum CoulombFriction
            {
                CoulombFrictionOff/** off */ ,
                CoulombFrictionOn/** on */ 
            };

            /** the enum for contact type option of 3D contact */
            public: enum ContactType
            {
                ContactTypePatch/** patch */ ,
                ContactTypeSurface/** surface */ ,
                ContactTypeSolid/** solid */ 
            };

            /** the enum for surface type option of 3D contact */
            public: enum SurfaceType
            {
                SurfaceTypeFaceted/** faceted */ ,
                SurfaceTypeFitted/** fitted */ 
            };

            private: BodyContactRecurdynImpl * m_bodycontactrecurdyn_impl;
            private: friend class  _BodyContactRecurdynBuilder;
            protected: BodyContactRecurdyn();
            public: ~BodyContactRecurdyn();
            /**Returns  the force model type
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::BodyContactRecurdyn::ForceModel ForceModelType
            (
            );
            /**Sets  the force model type
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetForceModelType
            (
                NXOpen::Motion::BodyContactRecurdyn::ForceModel forceModel /** force model */ 
            );
            /**Returns  the coulomb friction option
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::BodyContactRecurdyn::CoulombFriction CoulombFrictionOption
            (
            );
            /**Sets  the coulomb friction option
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCoulombFrictionOption
            (
                NXOpen::Motion::BodyContactRecurdyn::CoulombFriction coulombFriction /** coulomb friction */ 
            );
            /**Returns  the contact type option
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::BodyContactRecurdyn::ContactType ContactTypeOption
            (
            );
            /**Sets  the contact type option
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetContactTypeOption
            (
                NXOpen::Motion::BodyContactRecurdyn::ContactType contactType /** contact type */ 
            );
            /**Returns  the surface type option
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::BodyContactRecurdyn::SurfaceType SurfaceTypeOption
            (
            );
            /**Sets  the surface type option
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSurfaceTypeOption
            (
                NXOpen::Motion::BodyContactRecurdyn::SurfaceType surfaceType /** surface type */ 
            );
            /**Returns  the rebound Damping Factor Flag
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReboundDampingFactorFlag
            (
            );
            /**Sets  the rebound Damping Factor Flag
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetReboundDampingFactorFlag
            (
                bool reboundDampingFactorFlag /** rebound damping factor flag */ 
            );
            /**Returns  the auto global maximum penetration flag
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int AutoGlobalMaxPenetrationFlag
            (
            );
            /**Sets  the auto global maximum penetration flag
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAutoGlobalMaxPenetrationFlag
            (
                int autoGlobalMaxPenetrationFlag /** auto global max penetration flag */ 
            );
            /**Returns  the auto local maximum penetration flag
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int AutoLocalMaxPenetrationFlag
            (
            );
            /**Sets  the auto local maximum penetration flag
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAutoLocalMaxPenetrationFlag
            (
                int autoLocalMaxPenetrationFlag /** auto local max penetration flag */ 
            );
            /**Returns  the max Facet Size Factor Flag
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool FirstGeometryMaxFacetSizeFactorFlag
            (
            );
            /**Sets  the max Facet Size Factor Flag
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFirstGeometryMaxFacetSizeFactorFlag
            (
                bool maxFacetSizeFactorFlag /** max facet size factor flag */ 
            );
            /**Returns  the max Facet Size Factor Flag
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool SecondGeometryMaxFacetSizeFactorFlag
            (
            );
            /**Sets  the max Facet Size Factor Flag
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondGeometryMaxFacetSizeFactorFlag
            (
                bool maxFacetSizeFactorFlag /** max facet size factor flag */ 
            );
            /**Returns  the stiffness expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StiffnessExpression
            (
            );
            /**Returns  the force exponent expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ForceExponentExpression
            (
            );
            /**Returns  the material damping expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaterialDampingExpression
            (
            );
            /**Returns  the penetration depth expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PenetrationDepthExpression
            (
            );
            /**Returns  the Buffer Radius Factor expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BufferRadiusFactorExpression
            (
            );
            /**Returns  the Maximun Step Size Factor expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumStepSizeFactorExpression
            (
            );
            /**Returns  the Plane Maximum Penetration of the first geometry expresion 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FirstGeometryMaximumPenetrationExpression
            (
            );
            /**Returns  the Plane Tolerance Factor of the first geometry expresion 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FirstGeometryPlaneToleranceFactorExpression
            (
            );
            /**Returns  the Plane Maximum Penetration of the second geometry expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SecondGeometryMaximumPenetrationExpression
            (
            );
            /**Returns  the Plane Tolerance Factor of the second geometry expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SecondGeometryPlaneToleranceFactorExpression
            (
            );
            /**Returns  the coulomb coefficient expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StaticCoefficientExpression
            (
            );
            /**Returns  the stiction velocity expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StictionVelocityExpression
            (
            );
            /**Returns  the dynamic coefficient expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DynamicCoefficientExpression
            (
            );
            /**Returns  the friction velocity expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FrictionVelocityExpression
            (
            );
            /**Returns  the rebound Damping Factor expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ReboundDampingFactorExpression
            (
            );
            /**Returns  the global Max. Penetration expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * GlobalMaxPenetrationExpression
            (
            );
            /**Returns  the local Max. Penetration expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LocalMaxPenetrationExpression
            (
            );
            /**Returns  the max Facet Size Factor expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FirstGeometryMaxFacetSizeFactorExpression
            (
            );
            /**Returns  the bounding Buffer Length expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FirstGeometryBoundingBufferLengthExpression
            (
            );
            /**Returns  the max Facet Size Factor expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SecondGeometryMaxFacetSizeFactorExpression
            (
            );
            /**Returns  the bounding Buffer Length expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SecondGeometryBoundingBufferLengthExpression
            (
            );
            /**Returns  the Plane Tolerance Factor of the first geometry for solid contact expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FirstGeometryPlaneToleranceFactorSolidContactExpression
            (
            );
            /**Returns  the Plane Tolerance Factor of the second geometry for solid contact expression 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SecondGeometryPlaneToleranceFactorSolidContactExpression
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
