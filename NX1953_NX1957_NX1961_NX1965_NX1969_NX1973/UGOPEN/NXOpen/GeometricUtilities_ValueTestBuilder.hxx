#ifndef NXOpen_GEOMETRICUTILITIES_VALUETESTBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_VALUETESTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_ValueTestBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class ValueTestBuilder;
    }
    class Builder;
    class NXColor;
    namespace GeometricUtilities
    {
        class _ValueTestBuilderBuilder;
        class ValueTestBuilderImpl;
        /**
            Represents a @link ValueTestBuilder ValueTestBuilder@endlink 
             <br> Temporary Fix  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Color </term> <description> 
         
        5 </description> </item> 

        </list> 

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENDEBUGSESSIONCPPEXPORT  ValueTestBuilder : public NXOpen::Builder
        {
            private: ValueTestBuilderImpl * m_valuetestbuilder_impl;
            private: friend class  _ValueTestBuilderBuilder;
            protected: ValueTestBuilder();
            public: ~ValueTestBuilder();
            /**Returns  the keyin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Keyin
            (
            );
            /**Sets  the keyin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetKeyin
            (
                double keyin /** keyin */ 
            );
            /**Returns  the icon keyin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double IconKeyin
            (
            );
            /**Sets  the icon keyin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIconKeyin
            (
                double iconKeyin /** iconkeyin */ 
            );
            /**Returns  the unassignable keyin 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double UnassignableKeyin
            (
            );
            /**Sets  the unassignable keyin 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableKeyin
            (
                double unassignableKeyin /** unassignablekeyin */ 
            );
            /**Returns  whether or not the unassignable keyin is assigned 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsUnassignableKeyinAssigned
            (
            );
            /**Sets  whether or not the unassignable keyin is assigned 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableKeyinAssigned
            (
                bool unassignableKeyinAssigned /** unassignablekeyinassigned */ 
            );
            /**Returns  the spin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Spin
            (
            );
            /**Sets  the spin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSpin
            (
                double spin /** spin */ 
            );
            /**Returns  the unassignable spin 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double UnassignableSpin
            (
            );
            /**Sets  the unassignable spin 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableSpin
            (
                double unassignableSpin /** unassignablespin */ 
            );
            /**Returns  whether or not the unassignable spin is assigned 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsUnassignableSpinAssigned
            (
            );
            /**Sets  whether or not the unassignable spin is assigned 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableSpinAssigned
            (
                bool unassignableSpinAssigned /** unassignablespinassigned */ 
            );
            /**Returns  the scale 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Scale
            (
            );
            /**Sets  the scale 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  the scale default 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double ScaleDefault
            (
            );
            /**Sets  the scale default 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScaleDefault
            (
                double scaleDefault /** scaledefault */ 
            );
            /**Returns  the scale keyin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double ScaleKeyin
            (
            );
            /**Sets  the scale keyin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScaleKeyin
            (
                double scaleDefault /** scaledefault */ 
            );
            /**Returns  the combo 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Combo
            (
            );
            /**Sets  the combo 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCombo
            (
                double combo /** combo */ 
            );
            /**Returns  the most recently used-enabled combo 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double ComboMru
            (
            );
            /**Sets  the most recently used-enabled combo 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetComboMru
            (
                double comboMru /** combo mru */ 
            );
            /**Returns  the unassignable combo 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double UnassignableCombo
            (
            );
            /**Sets  the unassignable combo 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableCombo
            (
                double unassignableCombo /** unassignablecombo */ 
            );
            /**Returns  whether or not the unassignable combo is assigned 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsUnassignableComboAssigned
            (
            );
            /**Sets  whether or not the unassignable combo is assigned 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableComboAssigned
            (
                bool unassignableComboAssigned /** unassignablecomboassigned */ 
            );
            /**Returns  the int keyin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int IntKeyin
            (
            );
            /**Sets  the int keyin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIntKeyin
            (
                int intKeyin /** intkeyin */ 
            );
            /**Returns  the unassignable int keyin 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int UnassignableIntKeyin
            (
            );
            /**Sets  the unassignable int keyin 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableIntKeyin
            (
                int unassignableIntKeyin /** unassignableintkeyin */ 
            );
            /**Returns  whether or not the unassignable int keyin is assigned 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsUnassignableIntKeyinAssigned
            (
            );
            /**Sets  whether or not the unassignable int keyin is assigned 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableIntKeyinAssigned
            (
                bool unassignableIntKeyinAssigned /** unassignableintkeyinassigned */ 
            );
            /**Returns  the int spin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int IntSpin
            (
            );
            /**Sets  the int spin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIntSpin
            (
                int intSpin /** intspin */ 
            );
            /**Returns  the unassignable int spin 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int UnassignableIntSpin
            (
            );
            /**Sets  the unassignable int spin 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableIntSpin
            (
                int unassignableIntSpin /** unassignableintspin */ 
            );
            /**Returns  whether or not the unassignable int spin is assigned 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsUnassignableIntSpinAssigned
            (
            );
            /**Sets  whether or not the unassignable int spin is assigned 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableIntSpinAssigned
            (
                bool unassignableIntSpinAssigned /** unassignableintspinassigned */ 
            );
            /**Returns  the int scale 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int IntScale
            (
            );
            /**Sets  the int scale 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIntScale
            (
                int intScale /** intscale */ 
            );
            /**Returns  the int scale keyin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int IntScaleKeyin
            (
            );
            /**Sets  the int scale keyin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIntScaleKeyin
            (
                int intScale /** intscale */ 
            );
            /**Returns  the int combo 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int IntCombo
            (
            );
            /**Sets  the int combo 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIntCombo
            (
                int intCombo /** intcombo */ 
            );
            /**Returns  the unassignable int combo 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int UnassignableIntCombo
            (
            );
            /**Sets  the unassignable int combo 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableIntCombo
            (
                int unassignableIntCombo /** unassignableintcombo */ 
            );
            /**Returns  whether or not the unassignable int combo is assigned 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsUnassignableIntComboAssigned
            (
            );
            /**Sets  whether or not the unassignable int combo is assigned 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnassignableIntComboAssigned
            (
                bool unassignableIntComboAssigned /** unassignableintcomboassigned */ 
            );
            /**Sets  the color 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /** Sets the array of colors 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMultipleColors
            (
                const std::vector<NXOpen::NXColor *> & colors /** colors */ 
            );
            /** Sets the RGB color 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRgbColor
            (
                const std::vector<double> & rgb /** Array of 3 rgb values, each between 0 and 1 */
            );
            /**Returns  the color 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::NXColor * Color
            (
            );
            /** Returns the colors  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::NXColor *> GetMultipleColors
            (
            );
            /** Returns the RGB color  @return  Array of 3 rgb values, each between 0 and 1 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<double> GetRgbColor
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
