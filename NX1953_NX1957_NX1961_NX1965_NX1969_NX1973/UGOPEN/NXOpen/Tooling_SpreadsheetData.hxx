#ifndef NXOpen_TOOLING_SPREADSHEETDATA_HXX_INCLUDED
#define NXOpen_TOOLING_SPREADSHEETDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_SpreadsheetData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/Tooling_SpreadsheetDataParameter.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class SpreadsheetData;
    }
    class NXObject;
    namespace Tooling
    {
        class SpreadsheetDataParameter;
    }
    namespace Tooling
    {
        class SpreadsheetDataImpl;
        /**
                Represents the spreadsheet data which could be standalone spreadsheet file 
                with special format or be the spreadsheet data from part family template part,
                the latter format will not have any other data except the name and value in
                class @link NXOpen::Tooling::SpreadsheetDataParameter NXOpen::Tooling::SpreadsheetDataParameter@endlink , that means
                it might not return any result in some methods such as "GetDefinedAttributesExpressions".
                
                About the standalone file format, it can refer to the sections below in NX Help: 
                CAD->Shipbuilding->Installing templates and customizing the Ship Structure applications->Customizing the ship steel feature library->Steel feature parameter spreadsheet format
                CAD->Shipbuilding->Installing templates and customizing the Ship Structure applications->Customizing the standard parts library->Standard parts spreadsheet symbols
                
                or the example files as below:
                $UGII_BASE_DIR/NXPARTS/Reuse Library/Reusable Object Library/Metric/Boss/Cross_Boss_01.xlsx
                $UGII_BASE_DIR/NXPARTS/Reuse Library/Reuse Examples/Standard Parts/DIN/Profile/Pipe-Tube/Cold-worked Welded Rect Steel Tube, DIN.xls

                To create an instance of this class, call the method @link NXOpen::Tooling::ToolingSession::CreateSpreadsheetData NXOpen::Tooling::ToolingSession::CreateSpreadsheetData@endlink .
             
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  SpreadsheetData : public NXOpen::TransientObject
        {
            /** Represents the different spreadsheet parameter status */
            public: enum ParameterStatus
            {
                ParameterStatusLock/** User can't change the value in UI */ = 1,
                ParameterStatusSystemKey/** This is system key parameter */,
                ParameterStatusUserKey/** Key parameter analyzed from spreadsheet search */ = 4,
                ParameterStatusHideStatus/** Not shown in UI */ = 8,
                ParameterStatusScaleItem/** This is a scale item */ = 16,
                ParameterStatusReadOnly/** This parameter is read only */ = 32,
                ParameterStatusModified/** The parameter value is changed */ = 64,
                ParameterStatusForceColor/** If the parameter uses user value, normally it shows in UI in a different color. If this status is set, the parameter value will be shown in the same color. */ = 128,
                ParameterStatusHiddenValue/** The parameter has value, but it should be hidden to user */ = 256,
                ParameterStatusOptionValue/** The parameter has multiple value, but not treated as key parameter */ = 512
            };

            /** Represents the different attribute or expression section in spreadsheet */
            public: enum KeywordType
            {
                KeywordTypeObjectAttribute/** Object attribute defined in spreadsheet */ = 1,
                KeywordTypePartAttribute/** Part attribute defined in spreadsheet */,
                KeywordTypeExpression/** Expression defined in spreadsheet */ = 4
            };

            private: SpreadsheetDataImpl * m_spreadsheetdata_impl;
            /// \cond NX_NO_DOC 
            public: explicit SpreadsheetData(void *ptr);
            /// \endcond 
            /** Dispose the spreadsheet object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~SpreadsheetData();
            /** Close the spreadsheet and exit excel App 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void Close
            (
            );
            /** Load the data from given spreadsheet file 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void ReadData
            (
                const NXString & spreadsheetFileName /** Spreadsheet file name, give CLI name in NX/Manager environment */
            );
            /** Load the data from given spreadsheet file 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void ReadData
            (
                const char * spreadsheetFileName /** Spreadsheet file name, give CLI name in NX/Manager environment */
            );
            /** Load the data from part family part 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void ReadData
            (
                NXOpen::NXObject * familyPart /** the part family part */
            );
            /** Get the parameters with current select/input value  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void GetParameterValue
            (
                std::vector<NXOpen::Tooling::SpreadsheetDataParameter *> & parameters /** Array of structures with the parameter data. */
            );
            /** Change the primary parameter of the spreadsheet 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SelectPrimaryParameter
            (
                const NXString & parameterName /** the parameter name */,
                const NXString & parameterValue /** the parameter value */
            );
            /** Change the primary parameter of the spreadsheet 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SelectPrimaryParameter
            (
                const char * parameterName /** the parameter name */,
                const char * parameterValue /** the parameter value */
            );
            /** Modify the spreadsheet parameter. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void EditParameter
            (
                const NXString & parameterName /** the parameter name */,
                const NXString & parameterValue /** the parameter value */
            );
            /** Modify the spreadsheet parameter. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void EditParameter
            (
                const char * parameterName /** the parameter name */,
                const char * parameterValue /** the parameter value */
            );
            /** Sets the Lock/Hide or other status of spreadsheet parameter. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void SetParameterStatus
            (
                const NXString & parameterName /** the parameter name */,
                int parameterStatus /** the parameter status as defined in @link SpreadsheetData::ParameterStatus SpreadsheetData::ParameterStatus@endlink . */,
                bool isAdd /** Specifies whether the parameter status should be added or removed. If true, then the status is added, else it is removed.*/
            );
            /** Sets the Lock/Hide or other status of spreadsheet parameter. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            void SetParameterStatus
            (
                const char * parameterName /** the parameter name */,
                int parameterStatus /** the parameter status as defined in @link SpreadsheetData::ParameterStatus SpreadsheetData::ParameterStatus@endlink . */,
                bool isAdd /** Specifies whether the parameter status should be added or removed. If true, then the status is added, else it is removed.*/
            );
            /** Search the spreadsheet by the given conditions. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SearchRecords
            (
                const NXString & searchConditions /** the search conditions */
            );
            /** Search the spreadsheet by the given conditions. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SearchRecords
            (
                const char * searchConditions /** the search conditions */
            );
            /** Add object to be updated according to the spreadsheet data 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void AddAssociatedObject
            (
                NXOpen::NXObject * associatedObject /** the object to be updated according to the spreadsheet data */
            );
            /** Update the associated objects according to the spreadsheet data 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void Update
            (
            );
            /** Update the associated objects according to the spreadsheet data with the options 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void UpdateModel
            (
                bool doUpdateImmediately /** Specifies whether to perform an update immediately. */,
                bool updatePartAttribute /** Specifies whether part attributes should be updated. */
            );
            /** Get the object, part attributes or expressions defined in spreadsheet 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void GetDefinedAttributesExpressions
            (
                NXOpen::Tooling::SpreadsheetData::KeywordType keywordType /** keywordtype */ ,
                std::vector<NXString> & objOrPartAttrNames /** Object name or part attribute to find part */,
                std::vector<NXString> & attrNames /** attrnames */ ,
                std::vector<NXString> & attrValues /** Array of structures with the object attributes data. */
            );
            /** Get the list of values by giving a parameter name in spreadsheet 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetParameterValueList
            (
                const NXString & parameterName /** parametername */ ,
                std::vector<NXString> & paraValues /** The list of values */
            );
            /** Get the list of values by giving a parameter name in spreadsheet 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            void GetParameterValueList
            (
                const char * parameterName /** parametername */ ,
                std::vector<NXString> & paraValues /** The list of values */
            );

            /// \cond NX_NO_DOC 
            /** Change the primary parameter of the spreadsheet and output the new parameter results  @return  The new parameter list (JSON format) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectPrimaryParameterWithResult
            (
                const NXString & parameterName /** the parameter name */,
                const NXString & parameterValue /** the parameter value */
            );
            /** Change the primary parameter of the spreadsheet and output the new parameter results  @return  The new parameter list (JSON format) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            NXString SelectPrimaryParameterWithResult
            (
                const char * parameterName /** the parameter name */,
                const char * parameterValue /** the parameter value */
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
