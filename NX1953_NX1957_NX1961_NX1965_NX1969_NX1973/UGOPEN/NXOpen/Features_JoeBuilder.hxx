#ifndef NXOpen_FEATURES_JOEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_JOEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_JoeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DateTest.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_JoeListItem.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/GeometricUtilities_EnumTest.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/GeometricUtilities_StringTestBuilder.hxx>
#include <NXOpen/GeometricUtilities_ValueTestBuilder.hxx>
#include <NXOpen/LineWidthTestBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class JoeBuilder;
    }
    class DateTest;
    class Expression;
    class ExpressionCollectorSetList;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class JoeListItem;
    }
    namespace Features
    {
        class JoeListItemList;
    }
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class EnumTest;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace GeometricUtilities
    {
        class StringTestBuilder;
    }
    namespace GeometricUtilities
    {
        class ValueTestBuilder;
    }
    class LineWidthTestBuilder;
    class Point;
    class Section;
    class SelectObject;
    class SelectObjectList;
    namespace Features
    {
        class _JoeBuilderBuilder;
        class JoeBuilderImpl;

        /// \cond NX_NO_DOC 
        /** Builds a Joe feature  <br> To create a new instance of this class, use @link NXOpen::DebugSession::CreateJoeBuilder  NXOpen::DebugSession::CreateJoeBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        LineWidthTest.LineWidthSettings.Width </term> <description> 
         
        Normal </description> </item> 

        <item><term> 
         
        LineWidthTest.LineWidthSettings.WidthOption </term> <description> 
         
        Assigned </description> </item> 

        <item><term> 
         
        Toggle </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        ValueTest.Color </term> <description> 
         
        5 </description> </item> 

        </list> 

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENDEBUGSESSIONCPPEXPORT  JoeBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Enumeration of discreet types 
             <br>  Created in NX5.0.0.  <br>  
            */

            /// \cond NX_NO_DOC 
            public: enum DiscreetTypes
            {
                DiscreetTypesOption1/** option1 */ ,
                DiscreetTypesOption2/** option2 */ 
            };


            /// \endcond 
            private: JoeBuilderImpl * m_joebuilder_impl;
            private: friend class  _JoeBuilderBuilder;
            protected: JoeBuilder();
            public: ~JoeBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the toggle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Toggle
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the toggle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToggle
            (
                bool convex /** convex */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Do an action 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ActionButton
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Tests doing a severe exception 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void DoSevereException
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the discreet type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::JoeBuilder::DiscreetTypes DiscreetType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the discreet type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDiscreetType
            (
                NXOpen::Features::JoeBuilder::DiscreetTypes discreetType /** discreettype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the integer 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Integer
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the integer 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetInteger
            (
                int integer /** integer */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the radius dimension 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RadiusDimension
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetName
            (
                const char * name /** name */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** The lines of text  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetLines
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLines
            (
                const std::vector<NXString> & lines /** lines */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Non-iti lines of text  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetNonItiLines
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNonItiLines
            (
                std::vector<NXString> & lines /** lines */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the section 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the selected object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectObjectList * Selection
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the expression 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Expression
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the length 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Dimension
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the double linear dimension 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DoubleLinearDimension
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the two-sided linear dimension 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TwoSidedLinear
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the angular dimension 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * AngularDimension
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the two-sided angular dimension 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TwoSidedAngular
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the location 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the location 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPoint
            (
                NXOpen::Point * location /** location */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the boolean operation 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * OnPathDim
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectObject * Path
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the list 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::JoeListItemList * List
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the enum test 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EnumTest * EnumTest
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the string test 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::StringTestBuilder * StringTest
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the value test 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ValueTestBuilder * ValueTest
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the seldimlist 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ExpressionCollectorSetList * Seldimlist
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a new list item  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::JoeListItem * NewListItem
            (
                double value /** initial value in part units */,
                const NXString & name /** name */,
                int position /** position */
            );
            /** Creates a new list item  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Features::JoeListItem * NewListItem
            (
                double value /** initial value in part units */,
                const char * name /** name */,
                int position /** position */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the flag that if true, section, selection, and other selections are disabled 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisableSelections
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the flag that if true, section, selection, and other selections are disabled 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDisableSelections
            (
                bool disableSelections /** disableselections */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the date and time 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DateTest * DateTest
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the line width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineWidthTestBuilder * LineWidthTest
            (
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
