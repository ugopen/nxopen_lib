#ifndef NXOpen_CAE_STRESSLINEARIZATIONBUILDER_HXX_INCLUDED
#define NXOpen_CAE_STRESSLINEARIZATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_StressLinearizationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_QueryCurveUsageOptions.hxx>
#include <NXOpen/CAE_StressLinearization.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class StressLinearizationBuilder;
    }
    class Builder;
    namespace CAE
    {
        class QueryCurveUsageOptions;
    }
    namespace CAE
    {
        class SimSolutionStep;
    }
    class Expression;
    namespace CAE
    {
        class _StressLinearizationBuilderBuilder;
        class StressLinearizationBuilderImpl;
        /**
              Represents a @link NXOpen::CAE::StressLinearizationBuilder NXOpen::CAE::StressLinearizationBuilder@endlink 
               <br> Get Instance through @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink   <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Scl.CurveUsage </term> <description> 
         
        UseVertices </description> </item> 

        <item><term> 
         
        Scl.DistanceTolerance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        Scl.ResultantCurveLocator </term> <description> 
         
        UseAsIs </description> </item> 

        <item><term> 
         
        Scl.ResultantLocationTolerance </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  StressLinearizationBuilder : public NXOpen::Builder
        {
            private: StressLinearizationBuilderImpl * m_stresslinearizationbuilder_impl;
            private: friend class  _StressLinearizationBuilderBuilder;
            protected: StressLinearizationBuilder();
            public: ~StressLinearizationBuilder();
            /**Returns  the name of the Stress Linearization 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString Name
            (
            );
            /**Sets  the name of the Stress Linearization 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the Stress Linearization 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetName
            (
                const char * name /** name */ 
            );
            /** Gets the description multi string 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXString> GetDescription
            (
            );
            /** Sets the description multi string 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDescription
            (
                const std::vector<NXString> & desc /** desc */ 
            );
            /**Returns  the query curve usage options 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::QueryCurveUsageOptions * Scl
            (
            );
            /**Returns  the name of the loadcase 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString LoadCaseName
            (
            );
            /**Sets  the name of the loadcase 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetLoadCaseName
            (
                const NXString & lcName /** lcname */ 
            );
            /**Sets  the name of the loadcase 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetLoadCaseName
            (
                const char * lcName /** lcname */ 
            );
            /**Returns  the iteration selection 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::StressLinearization::ResultSelection IterationSelection
            (
            );
            /**Sets  the iteration selection 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIterationSelection
            (
                NXOpen::CAE::StressLinearization::ResultSelection resultSelection /** resultselection */ 
            );
            /**Returns  the iteration index 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int Iteration
            (
            );
            /**Sets  the iteration index 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIteration
            (
                int iteration /** iteration */ 
            );
            /**Returns  the result type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::StressLinearization::ResultType ResultType
            (
            );
            /**Sets  the result type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResultType
            (
                NXOpen::CAE::StressLinearization::ResultType resultType /** resulttype */ 
            );
            /**Returns  the subcase object 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * Subcase
            (
            );
            /**Sets  the subcase object 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSubcase
            (
                NXOpen::CAE::SimSolutionStep * subcase /** subcase */ 
            );
            /**Returns  the structure type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::StressLinearization::StructureTypes StructureType
            (
            );
            /**Sets  the structure type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetStructureType
            (
                NXOpen::CAE::StressLinearization::StructureTypes structureType /** structuretype */ 
            );
            /**Returns  the radius of curvature 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Expression * Rho
            (
            );
            /**Sets  the radius of curvature 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetRho
            (
                NXOpen::Expression * rho /** rho */ 
            );
            /**Returns  the radius of curvature is infinite? 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool RhoInfinite
            (
            );
            /**Sets  the radius of curvature is infinite? 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetRhoInfinite
            (
                bool isInfinite /** isinfinite */ 
            );
            /** Get the bending tensor components 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<bool> GetBendingTensorComponents
            (
            );
            /** Set the bending tensor components 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetBendingTensorComponents
            (
                const std::vector<bool> & bendingComps /** bendingcomps */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
