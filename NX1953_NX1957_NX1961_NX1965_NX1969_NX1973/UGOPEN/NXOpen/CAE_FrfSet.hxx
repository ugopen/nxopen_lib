#ifndef NXOpen_CAE_FRFSET_HXX_INCLUDED
#define NXOpen_CAE_FRFSET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_FrfSet.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AlternateFemRepresentationSource.hxx>
#include <NXOpen/CAE_IPostScenarioDataSource.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class FrfSet;
    }
    namespace CAE
    {
        class AlternateFemRepresentationSource;
    }
    namespace CAE
    {
        class IPostScenarioDataSource;
    }
    namespace CAE
    {
        class _FrfSetBuilder;
        class FrfSetImpl;
        /**  @brief  This is the class representing a FRF set.  

           <br> Not support KF.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  FrfSet : public NXOpen::CAE::AlternateFemRepresentationSource, public virtual NXOpen::CAE::IPostScenarioDataSource
        {
            /** Node component types */
            public: enum NodeComponent
            {
                NodeComponentS/** s component */,
                NodeComponentX/** x component */,
                NodeComponentY/** y component */,
                NodeComponentZ/** z component */,
                NodeComponentRx/** rx component */,
                NodeComponentRy/** ry component */,
                NodeComponentRz/** rz component */
            };

            /** Measure types */
            public: enum Measure
            {
                MeasureForce/** Force */,
                MeasureMoment/** Moment */,
                MeasureDisplacement/** Displacement */,
                MeasureRotation/** Rotation */,
                MeasureVelocity/** Velocity */,
                MeasureAngularvelocity/** Angular Velocity */,
                MeasureAcceleration/** Acceleration */,
                MeasureAngularacceleration/** Angular Acceleration */,
                MeasurePressure/** Pressure */
            };

            private: FrfSetImpl * m_frfset_impl;
            private: friend class  _FrfSetBuilder;
            protected: FrfSet();
            public: ~FrfSet();
            /** Get the number of frfs.  @return  The number of frfs. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int GetNumberOfFrfs
            (
            );
            /** Get the status of a frf.  @return  the status of the frf 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool GetFrfStatus
            (
                int inputNode /** the input node */,
                NXOpen::CAE::FrfSet::NodeComponent inputComponent /** the input node component */,
                int outputNode /** the output node */,
                NXOpen::CAE::FrfSet::NodeComponent outputComponent /** the output node component */,
                NXOpen::CAE::FrfSet::Measure excitation /** the excitation */,
                NXOpen::CAE::FrfSet::Measure response /** the response */
            );
            /** Modify the status of a frf. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetFrfStatus
            (
                int inputNode /** the input node */,
                NXOpen::CAE::FrfSet::NodeComponent inputComponent /** the input node component */,
                int outputNode /** the output node */,
                NXOpen::CAE::FrfSet::NodeComponent outputComponent /** the output node component */,
                NXOpen::CAE::FrfSet::Measure excitation /** the excitation */,
                NXOpen::CAE::FrfSet::Measure response /** the response */,
                bool status /** the status of the frf */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
