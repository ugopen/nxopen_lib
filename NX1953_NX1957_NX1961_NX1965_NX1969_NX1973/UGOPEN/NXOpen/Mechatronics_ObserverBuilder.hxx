#ifndef NXOpen_MECHATRONICS_OBSERVERBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_OBSERVERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_ObserverBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class ObserverBuilder;
    }
    class Builder;
    class NXObject;
    class NXObjectList;
    namespace Mechatronics
    {
        class _ObserverBuilderBuilder;
        class ObserverBuilderImpl;
        /**
            Represents a @link NXOpen::Mechatronics::ObserverBuilder NXOpen::Mechatronics::ObserverBuilder@endlink .
             <br> To create a new instance of this class, use @link NXOpen::Mechatronics::ObserverCollection::CreateObserverBuilder  NXOpen::Mechatronics::ObserverCollection::CreateObserverBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  ObserverBuilder : public NXOpen::Builder
        {
             /** Defines the parameter data. */
            public:
            struct ParameterData
            {
                public: /** Parameter Name       */NXString ParameterName;
                public: /** Physics Object       */NXOpen::NXObject * PhysicsObject;
                public: /** Physics Property Tag */int PhysicsPropTag;
                public: ParameterData() :
                    ParameterName(),
                    PhysicsObject(),
                    PhysicsPropTag()
                {
                }
                /** Constructor for the ParameterData struct. */ 
                public: ParameterData(const NXString &parameterNameInitial /** Parameter Name       */, 
                        NXOpen::NXObject * physicsObjectInitial /** Physics Object       */, 
                        int physicsPropTagInitial /** Physics Property Tag */) :
                    ParameterName(parameterNameInitial),
                    PhysicsObject(physicsObjectInitial),
                    PhysicsPropTag(physicsPropTagInitial)
                {
                }
            };

            private: ObserverBuilderImpl * m_observerbuilder_impl;
            private: friend class  _ObserverBuilderBuilder;
            protected: ObserverBuilder();
            public: ~ObserverBuilder();
            /**Returns  the objects. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::NXObjectList * Objects
            (
            );
            /** Sets all object data. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetObjects
            (
                const std::vector<NXOpen::NXObject *> & objectTags /** Array of objects*/
            );
            /** Gets all parameter data.  @return  Array of parameter data 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXOpen::Mechatronics::ObserverBuilder::ParameterData> GetParameterData
            (
            );
            /** Sets all parameter data. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetParameterData
            (
                const std::vector<NXOpen::Mechatronics::ObserverBuilder::ParameterData> & parameterData /** Array of parameter data */
            );
            /**Returns  the observer need to clear runtime inspector first or not. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool ClearInspector
            (
            );
            /**Sets  the observer need to clear runtime inspector first or not. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetClearInspector
            (
                bool allowClear /** allowclear */ 
            );
            /**Returns  the name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
