#ifndef NXOpen_FILENEW_HXX_INCLUDED
#define NXOpen_FILENEW_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     FileNew.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/FileNewTemplate.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Part.hxx>
#include <NXOpen/PartTypes.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class FileNew;
    class Builder;
    namespace CloudDM
    {
        class NewPartBuilder;
    }
    class FileNewTemplate;
    namespace PDM
    {
        class PartOperationBuilder;
    }
    /** 
        The application type of the new file being created through a template
        
     <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::FileNew::GetApplicationNames NXOpen::FileNew::GetApplicationNames@endlink  that returns all application names. <br>  
    */
    enum NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::FileNew::GetApplicationNames that returns all application names.") FileNewApplication
    {
        FileNewApplicationDrafting/** Specifies a drafting file new template */,
        FileNewApplicationModeling/** Specifies a modeling file new template */,
        FileNewApplicationStudio/** Specifies a shape studio file new template */,
        FileNewApplicationAssemblies/** Specifies an assemblies file new template */,
        FileNewApplicationGateway/** Specifies a file new template that leaves the new part in Gateway */,
        FileNewApplicationRoutingElectrical/** Specifies an electrical routing file new template */,
        FileNewApplicationRoutingMechanical/** Specifies a mechanical routing file new template */,
        FileNewApplicationRoutingLogical/** Specifies a logical routing file new template */,
        FileNewApplicationNxsheetmetal/** Specifies a NX sheet metal file new template */,
        FileNewApplicationSheetTemplate/** Specifies a drawing sheet template for Insert Sheet dialog */,
        FileNewApplicationCaeFem/** Specifies a cae fem file new template */,
        FileNewApplicationCaeSim/** Specifies a cae sim file new template */,
        FileNewApplicationAeroSheetmetal/** Specifies an Aerospace sheet metal template */,
        FileNewApplicationFlexPcdSheetmetal/** Specifies a Flex Printed Circuit Design sheet metal template */,
        FileNewApplicationCaeAssyFem/** Specifies a cae assembly fem file new template */,
        FileNewApplicationCam/** Specifies a Manufacturing file new template */,
        FileNewApplicationInspection/** Specifies a CMM Inspection file new template */,
        FileNewApplicationMechatronics/** Specifies a Mechatronics Concept Designer file new template*/,
        FileNewApplicationShipContainer/** Specifies an NX Ship Container file new template */,
        FileNewApplicationShipDetail/** Specifies an NX Ship Detail file new template */,
        FileNewApplicationShipReference/** Specifies an NX Ship Reference file new template */,
        FileNewApplicationShipSystem/** Specifies an NX Ship System file new template */,
        FileNewApplicationWelding/** Specifies an NX Structure Welding Design Control Element template */,
        FileNewApplicationWeldingJoint/** Specifies an NX Structure Welding Design Feature template */,
        FileNewApplicationNxle/** Specifies an NXLE template */,
        FileNewApplicationShipGaAssembly/** Specifies an NX Ship GA Assembly file new template */,
        FileNewApplicationShipGaSystem/** Specifies an NX Ship GA System file new template */,
        FileNewApplicationLast/** Specifies the last application type. New application types should be inserted before this one */
    };

    /**         
            Enumeration used for templates to determine the type of the template.         
        */
    enum FileNewTemplateType
    {
        FileNewTemplateTypeWorkset/** Specifies a file new workset template */,
        FileNewTemplateTypeItem/** Specifies a file new item template */,
        FileNewTemplateTypeDesignElement/** Specifies a file new design element template */,
        FileNewTemplateTypeDesignControlElement/** Specifies a file new design control element template */,
        FileNewTemplateTypeDesignFeature/** Specifies a file new design feature template (actually has no file) */,
        FileNewTemplateTypeGeneric/** Specifies a file new generic non-core template */,
        FileNewTemplateTypeSheet/** Specifies a file new sheet template */,
        FileNewTemplateTypeDiagrammingSheetpart/** Specifies a diagramming sheet part template*/,
        FileNewTemplateTypeLast/** Specifies a last template type. New template types should be inserted before this one */
    };

    class _FileNewBuilder;
    class FileNewImpl;
    /**
        Represents a @link NXOpen::FileNew NXOpen::FileNew@endlink 
         <br> To create an instance of this class, use @link NXOpen::PartCollection::FileNew NXOpen::PartCollection::FileNew@endlink .  <br> 
     <br>  Created in NX5.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  FileNew : public NXOpen::Builder
    {
        private: FileNewImpl * m_filenew_impl;
        private: friend class  _FileNewBuilder;
        protected: FileNew();
        public: ~FileNew();
        /**Returns  the name of the new file being created 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString NewFileName
        (
        );
        /**Sets  the name of the new file being created 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNewFileName
        (
            const NXString & fileName /** filename */ 
        );
        /**Sets  the name of the new file being created 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetNewFileName
        (
            const char * fileName /** filename */ 
        );
        /**Returns  the name of the template part from which to create the new file 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString TemplateFileName
        (
        );
        /**Sets  the name of the template part from which to create the new file 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTemplateFileName
        (
            const NXString & templateFileName /** templatefilename */ 
        );
        /**Sets  the name of the template part from which to create the new file 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetTemplateFileName
        (
            const char * templateFileName /** templatefilename */ 
        );
        /**Returns  the name of the master model part to be referenced. May be NULL if 
                    creating a master part
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString MasterFileName
        (
        );
        /**Sets  the name of the master model part to be referenced. May be NULL if 
                    creating a master part
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMasterFileName
        (
            const NXString & masterFileName /** masterfilename */ 
        );
        /**Sets  the name of the master model part to be referenced. May be NULL if 
                    creating a master part
                
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetMasterFileName
        (
            const char * masterFileName /** masterfilename */ 
        );
        /**Returns  the units for the new file being created 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Part::Units Units
        (
        );
        /**Sets  the units for the new file being created 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUnits
        (
            NXOpen::Part::Units units /** units */ 
        );
        /**Returns  the application type for the new file being created 
         <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::FileNew::ApplicationName NXOpen::FileNew::ApplicationName@endlink  that takes a string name instead. <br>  

         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::FileNew::ApplicationName that takes a string name instead.") NXOpen::FileNewApplication Application
        (
        );
        /**Sets  the application type for the new file being created 
         <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::FileNew::SetApplicationName NXOpen::FileNew::SetApplicationName@endlink  that takes a string name instead. <br>  

         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::FileNew::SetApplicationName that takes a string name instead.") void SetApplication
        (
            NXOpen::FileNewApplication application /** application */ 
        );
        /**Returns  the application type for the new file being created 
                     Use @link NXOpen::FileNew::GetApplicationNames NXOpen::FileNew::GetApplicationNames@endlink  to get valid application names.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString ApplicationName
        (
        );
        /**Sets  the application type for the new file being created 
                     Use @link NXOpen::FileNew::GetApplicationNames NXOpen::FileNew::GetApplicationNames@endlink  to get valid application names.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetApplicationName
        (
            const NXString & application /** application */ 
        );
        /**Sets  the application type for the new file being created 
                     Use @link NXOpen::FileNew::GetApplicationNames NXOpen::FileNew::GetApplicationNames@endlink  to get valid application names.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetApplicationName
        (
            const char * application /** application */ 
        );
        /**Returns  the property that controls if the new file should be created using a blank template.  
                If set to False, then a valid file name for an existing template part file must be supplied to 
                @link NXOpen::FileNew::SetTemplateFileName NXOpen::FileNew::SetTemplateFileName@endlink .  If set to True, this means that no template
                is used during creation.
                
                Note: This property should be set to True only while creating traditional items with template type set as 
                @link FileNewTemplateTypeItem FileNewTemplateTypeItem@endlink 
                 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool UseBlankTemplate
        (
        );
        /**Sets  the property that controls if the new file should be created using a blank template.  
                If set to False, then a valid file name for an existing template part file must be supplied to 
                @link NXOpen::FileNew::SetTemplateFileName NXOpen::FileNew::SetTemplateFileName@endlink .  If set to True, this means that no template
                is used during creation.
                
                Note: This property should be set to True only while creating traditional items with template type set as 
                @link FileNewTemplateTypeItem FileNewTemplateTypeItem@endlink 
                 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUseBlankTemplate
        (
            bool useBlankTemplate /** use blank template */ 
        );
        /**Returns  the property that controls if the new file should be made the displayed part 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool MakeDisplayedPart
        (
        );
        /**Sets  the property that controls if the new file should be made the displayed part 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMakeDisplayedPart
        (
            bool makeDisplayedPart /** make displayed part */ 
        );
        /** Returns the available templates for this builder  @return  array of available template names 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetAvailableTemplates
        (
        );
        /** Teamcenter projects data 
         <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::Session::AssignRemoveProjects NXOpen::Session::AssignRemoveProjects@endlink  to assign/remove projects. <br>  

         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::Session::AssignRemoveProjects to assign/remove projects.") void SetProjectsData
        (
            std::vector<NXString> & projectName /** name of the project */,
            const std::vector<int> & assignmentState /** assignment state */
        );
        /** Returns logical value to indicate whether master to be added as child component  @return  whether master to be added as child component 
         <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::PDM::PartOperationCreateBuilder::GetAddMaster NXOpen::PDM::PartOperationCreateBuilder::GetAddMaster@endlink  to get addMaster flag. <br>  

         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::PDM::PartOperationCreateBuilder::GetAddMaster to get addMaster flag.") bool GetAddMasterFlag
        (
        );
        /** Sets addMaster flag 
         <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::PDM::PartOperationCreateBuilder::SetAddMaster NXOpen::PDM::PartOperationCreateBuilder::SetAddMaster@endlink  to set addMaster flag. <br>  

         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::PDM::PartOperationCreateBuilder::SetAddMaster to set addMaster flag.") void SetAddMasterFlag
        (
            bool addMaster /** whether master to be added as child component */
        );
        /**Returns  the template type for the new file being created 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::FileNewTemplateType TemplateType
        (
        );
        /**Sets  the template type for the new file being created 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTemplateType
        (
            NXOpen::FileNewTemplateType templateType /** templatetype */ 
        );
        /**Returns  the item type for the new file. It can be a comma separated string in case the underlying template supports multiple item types 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString ItemType
        (
        );
        /**Sets  the item type for the new file. It can be a comma separated string in case the underlying template supports multiple item types 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetItemType
        (
            const NXString & itemType /** itemtype */ 
        );
        /**Sets  the item type for the new file. It can be a comma separated string in case the underlying template supports multiple item types 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetItemType
        (
            const char * itemType /** itemtype */ 
        );
        /**Returns  the design element type for the new design element. It can be a comma separated string in case the underlying template supports multiple design element types 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString DesignElementType
        (
        );
        /**Sets  the design element type for the new design element. It can be a comma separated string in case the underlying template supports multiple design element types 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetDesignElementType
        (
            const NXString & deType /** detype */ 
        );
        /**Sets  the design element type for the new design element. It can be a comma separated string in case the underlying template supports multiple design element types 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetDesignElementType
        (
            const char * deType /** detype */ 
        );
        /**Returns  the state for the new design element. It can be a comma separated string in case the underlying template supports multiple design element states 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString DesignElementState
        (
        );
        /**Sets  the state for the new design element. It can be a comma separated string in case the underlying template supports multiple design element states 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetDesignElementState
        (
            const NXString & deState /** destate */ 
        );
        /**Sets  the state for the new design element. It can be a comma separated string in case the underlying template supports multiple design element states 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetDesignElementState
        (
            const char * deState /** destate */ 
        );
        /**Returns  the specialization for the new file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString Specialization
        (
        );
        /**Sets  the specialization for the new file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetSpecialization
        (
            const NXString & specialization /** specialization */ 
        );
        /**Sets  the specialization for the new file 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetSpecialization
        (
            const char * specialization /** specialization */ 
        );
        /**Returns  the presentation name of the underlying template which is used for the new file being created 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString TemplatePresentationName
        (
        );
        /**Sets  the presentation name of the underlying template which is used for the new file being created 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetTemplatePresentationName
        (
            const NXString & presentationName /** presentationname */ 
        );
        /**Sets  the presentation name of the underlying template which is used for the new file being created 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetTemplatePresentationName
        (
            const char * presentationName /** presentationname */ 
        );
        /**Returns  the relation type of the underlying template which is used for the new file being created. 
                 If set to 'Specification', this means non-master template is used for part creation and it will 
                 require @link NXOpen::FileNew::SetUsesMasterModel NXOpen::FileNew::SetUsesMasterModel@endlink  to be set to 'Yes'
                 
         <br>  Created in NX8.5.3.  <br>  
         <br> License requirements : None */
        public: NXString RelationType
        (
        );
        /**Sets  the relation type of the underlying template which is used for the new file being created. 
                 If set to 'Specification', this means non-master template is used for part creation and it will 
                 require @link NXOpen::FileNew::SetUsesMasterModel NXOpen::FileNew::SetUsesMasterModel@endlink  to be set to 'Yes'
                 
         <br>  Created in NX8.5.3.  <br>  
         <br> License requirements : None */
        public: void SetRelationType
        (
            const NXString & relationType /** relationtype */ 
        );
        /**Sets  the relation type of the underlying template which is used for the new file being created. 
                 If set to 'Specification', this means non-master template is used for part creation and it will 
                 require @link NXOpen::FileNew::SetUsesMasterModel NXOpen::FileNew::SetUsesMasterModel@endlink  to be set to 'Yes'
                 
         <br>  Created in NX8.5.3.  <br>  
         <br> License requirements : None */
        void SetRelationType
        (
            const char * relationType /** relationtype */ 
        );
        /**Returns  the uses master model flag of the underlying template which is used for the new file being created. 
                 If set to 'No', this means that master template is used for part creation. If set to 'Yes', this means 
                 non-master template is used and it will require master model part to be specified for part creation         
                 
         <br>  Created in NX8.5.3.  <br>  
         <br> License requirements : None */
        public: NXString UsesMasterModel
        (
        );
        /**Sets  the uses master model flag of the underlying template which is used for the new file being created. 
                 If set to 'No', this means that master template is used for part creation. If set to 'Yes', this means 
                 non-master template is used and it will require master model part to be specified for part creation         
                 
         <br>  Created in NX8.5.3.  <br>  
         <br> License requirements : None */
        public: void SetUsesMasterModel
        (
            const NXString & usesMasterModel /** usesmastermodel */ 
        );
        /**Sets  the uses master model flag of the underlying template which is used for the new file being created. 
                 If set to 'No', this means that master template is used for part creation. If set to 'Yes', this means 
                 non-master template is used and it will require master model part to be specified for part creation         
                 
         <br>  Created in NX8.5.3.  <br>  
         <br> License requirements : None */
        void SetUsesMasterModel
        (
            const char * usesMasterModel /** usesmastermodel */ 
        );
        /** Returns all registered application names. These name should be used while setting the application name in @link SetApplicationName SetApplicationName@endlink . @return  All registered application names 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetApplicationNames
        (
        );
        /** Sets @link NXOpen::PDM::PartOperationBuilder NXOpen::PDM::PartOperationBuilder@endlink  
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPartOperationCreateBuilder
        (
            NXOpen::PDM::PartOperationBuilder * partOperationBuilder /** partoperationbuilder */ 
        );
        /** Sets the flag specifying if the current template customization allows Alternate representation creation using the template 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCanCreateAltrep
        (
            bool createAltrep /** createaltrep */ 
        );
        /** Gets the flag specifying if the current template customization allows Alternate representation creation using the template 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: bool GetCanCreateAltrep
        (
        );
        /**Returns  the display part option.
                    See @link NXOpen::DisplayPartOption NXOpen::DisplayPartOption@endlink .
                 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DisplayPartOption DisplayPartOption
        (
        );
        /**Sets  the display part option.
                    See @link NXOpen::DisplayPartOption NXOpen::DisplayPartOption@endlink .
                 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDisplayPartOption
        (
            NXOpen::DisplayPartOption displayPartOption /** display part option */ 
        );
        /** Gets the @link NXOpen::FileNewTemplate NXOpen::FileNewTemplate@endlink  objects associated with the input file new object. @return  Need to free it.
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::FileNewTemplate *> GetTemplates
        (
        );

        /// \cond NX_NO_DOC 
        /** Sets @link NXOpen::CloudDM::NewPartBuilder NXOpen::CloudDM::NewPartBuilder@endlink  Execution 
                    of this API is controlled by Feature Toggle 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCloudDMNewPartBuilder
        (
            NXOpen::CloudDM::NewPartBuilder * cloudDMNewPartBuilder /** clouddmnewpartbuilder */ 
        );

        /// \endcond 
        /** Sets the flag to specify if post part creation action is allowed or not. True by default.
                    Some templates will result in specific actions being performed after the part has been created.
                    For example the Assemblies template may automatically enter the Add Component command after the new part has been created.
                
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        public: void AllowTemplatePostPartCreationAction
        (
            bool allowTemplatePostPartCreationAction /** allowtemplatepostpartcreationaction */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
