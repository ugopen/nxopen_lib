#ifndef NXOpen_AME_PLCSTATECHARTACTIONBUILDER_HXX_INCLUDED
#define NXOpen_AME_PLCSTATECHARTACTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PlcStateChartActionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEExtendedObject.hxx>
#include <NXOpen/AME_AMEBaseBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PlcStateChartActionBuilder;
    }
    namespace AME
    {
        class AMEBaseBuilder;
    }
    namespace AME
    {
        class AMEExtendedObject;
    }
    namespace AME
    {
        class _PlcStateChartActionBuilderBuilder;
        class PlcStateChartActionBuilderImpl;
        /** Represents builder for AME::UI::PlcStateChartAction  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreatePlcStateChartActionBuilder  NXOpen::AME::AMEManager::CreatePlcStateChartActionBuilder @endlink  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PlcStateChartActionBuilder : public NXOpen::AME::AMEBaseBuilder
        {
            /** the move action enum type */
            public: enum MoveAction
            {
                MoveActionUp/** up */ ,
                MoveActionDown/** down */ 
            };

            /** action type for action dialog. Do not edit this enum! */
            public: enum ActionType
            {
                ActionTypeEntry/** entry */ ,
                ActionTypeDoactivity/** doactivity */ ,
                ActionTypeExit/** exit */ 
            };

            /** qualifier type for action table editor. Do not edit this enum! */
            public: enum QualifierType
            {
                QualifierTypeN/** n */ ,
                QualifierTypeS/** s */ ,
                QualifierTypeR/** r */ 
            };

            /** operator type for state action operators. Do not edit this enum! */
            public: enum OperatorType
            {
                OperatorTypeAssign/** assign */ ,
                OperatorTypeAdd/** add */ ,
                OperatorTypeSub/** sub */ ,
                OperatorTypeMultiply/** multiply */ ,
                OperatorTypeDivide/** divide */ ,
                OperatorTypeEqual/** equal */ ,
                OperatorTypeBetween/** between */ ,
                OperatorTypeLessthan/** lessthan */ ,
                OperatorTypeGreaterthan/** greaterthan */ ,
                OperatorTypeLessthanequal/** lessthanequal */ ,
                OperatorTypeGreaterthanequal/** greaterthanequal */ ,
                OperatorTypeAnd/** and */ ,
                OperatorTypeOr/** or */ 
            };

            private: PlcStateChartActionBuilderImpl * m_plcstatechartactionbuilder_impl;
            private: friend class  _PlcStateChartActionBuilderBuilder;
            protected: PlcStateChartActionBuilder();
            public: ~PlcStateChartActionBuilder();
            /** Add a qualifier to state with default type as N 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddQualifier
            (
            );
            /** Set the qualifier type on actio item
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeQualifierType
            (
                NXOpen::AME::AMEExtendedObject * qualifier /** qualifier */ ,
                NXOpen::AME::PlcStateChartActionBuilder::QualifierType qualifierType /** qualifiertype */ 
            );
            /** Add a new operand to the qualifier N
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void InsertOperand
            (
                NXOpen::AME::AMEExtendedObject * qualifier /** qualifier */ 
            );
            /** Reset the operand value 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ResetActionValue
            (
                NXOpen::AME::AMEExtendedObject * actionOperand /** actionoperand */ 
            );
            /** Remove action item 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveActionItem
            (
                NXOpen::AME::AMEExtendedObject * conditionItem /** conditionitem */ 
            );
            /** Add the action rule to Action Value
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddOperandValue
            (
                NXOpen::AME::AMEExtendedObject * operandItem /** operanditem */ 
            );
            /** Move the action Item 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MoveActionItem
            (
                NXOpen::AME::AMEExtendedObject * actionItem /** actionitem */ ,
                NXOpen::AME::PlcStateChartActionBuilder::MoveAction moveDirection /** movedirection */ 
            );
            /** Set the constant text value to the condition rule
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetOperandValueWithConstantText
            (
                NXOpen::AME::AMEExtendedObject * operandItem /** operanditem */ ,
                const NXString & textValue /** textvalue */ 
            );
            /** Set the constant text value to the condition rule
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetOperandValueWithConstantText
            (
                NXOpen::AME::AMEExtendedObject * operandItem /** operanditem */ ,
                const char * textValue /** textvalue */ 
            );
            /** Add a new operator
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void InsertOperator
            (
                NXOpen::AME::AMEExtendedObject * operand /** operand */ 
            );
            /** Set the operator type on operator item
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeOperatorType
            (
                NXOpen::AME::AMEExtendedObject * operatorItem /** operatoritem */ ,
                NXOpen::AME::PlcStateChartActionBuilder::OperatorType operatorType /** operatortype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
