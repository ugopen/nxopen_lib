#ifndef NXOpen_CAM_GEOMETRYSET_HXX_INCLUDED
#define NXOpen_CAM_GEOMETRYSET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_GeometrySet.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CustomLoops.hxx>
#include <NXOpen/CAM_Typedefs.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class GeometrySet;
    }
    namespace CAM
    {
        class CustomLoops;
    }
    class Face;
    class ScCollector;
    class SelectTaggedObjectList;
    class TaggedObject;
    namespace CAM
    {
        class _GeometrySetBuilder;
        class GeometrySetImpl;
        /** Represents a geometry set for a CAM object. Multiple sets define the actual geometry of a specific type.  <br> To create a new instance of this class, use @link NXOpen::CAM::Geometry::CreateGeometrySet  NXOpen::CAM::Geometry::CreateGeometrySet @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  GeometrySet : public NXOpen::TaggedObject
        {
            /** Available types for Ignore Loops 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::PatchOpeningsBuilder NXOpen::Features::PatchOpeningsBuilder@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
            */
            public: enum NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::PatchOpeningsBuilder instead.") LoopsIgnoreTypes
            {
                LoopsIgnoreTypesNone/** none */,
                LoopsIgnoreTypesAll/** all */,
                LoopsIgnoreTypesSpecify/** specify */
            };

            /** Available types for Material Side 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: enum MaterialSideTypes
            {
                MaterialSideTypesNone/** none */,
                MaterialSideTypesSame/** the tool is cutting on the same side as the natural side of the entity */,
                MaterialSideTypesOpposite/** the tool cuts the opposite side */
            };

            private: GeometrySetImpl * m_geometryset_impl;
            private: friend class  _GeometrySetBuilder;
            protected: GeometrySet();
            public: ~GeometrySet();
            /**Returns  the selection containing the geometric entities 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * Selection
            (
            );
            /**Returns  the sc collector 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ScCollector
            (
            );
            /**Returns  the flag whether this set has custom part offset activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CustomPartOffset
            (
            );
            /**Sets  the flag whether this set has custom part offset activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomPartOffset
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the part offset value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PartOffset
            (
            );
            /**Sets  the part offset value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPartOffset
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the flag whether this set has custom tolerances activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CustomTolerance
            (
            );
            /**Sets  the flag whether this set has custom tolerances activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomTolerance
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the inner tolerance value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Intol
            (
            );
            /**Sets  the inner tolerance value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIntol
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the outer tolerance value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Outtol
            (
            );
            /**Sets  the outer tolerance value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOuttol
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the flag whether this set has custom stock activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CustomStock
            (
            );
            /**Sets  the flag whether this set has custom stock activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomStock
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the initial stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double InitialStock
            (
            );
            /**Sets  the initial stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInitialStock
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the final stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double FinalStock
            (
            );
            /**Sets  the final stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFinalStock
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the check stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double CheckStock
            (
            );
            /**Sets  the check stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCheckStock
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the drive stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DriveStock
            (
            );
            /**Sets  the drive stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDriveStock
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the safe clearance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double SafeClearance
            (
            );
            /**Sets  the safe clearance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSafeClearance
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the flag whether this set has custom feed rate activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CustomFeed
            (
            );
            /**Sets  the flag whether this set has custom feed rate activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomFeed
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the feed rate value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double FeedValue
            (
            );
            /**Sets  the feed rate value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFeedValue
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the feed rate unit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::FeedRateUnit FeedUnit
            (
            );
            /**Sets  the feed rate unit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFeedUnit
            (
                NXOpen::CAM::FeedRateUnit newValue /** newvalue */ 
            );
            /**Returns  the ignore loops status 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::PatchOpeningsBuilder NXOpen::Features::PatchOpeningsBuilder@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::PatchOpeningsBuilder instead.") NXOpen::CAM::GeometrySet::LoopsIgnoreTypes IgnoreLoopsStatus
            (
            );
            /**Sets  the ignore loops status 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::PatchOpeningsBuilder NXOpen::Features::PatchOpeningsBuilder@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::PatchOpeningsBuilder instead.") void SetIgnoreLoopsStatus
            (
                NXOpen::CAM::GeometrySet::LoopsIgnoreTypes newValue /** newvalue */ 
            );
            /**Returns  the ignore holes builder 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::PatchOpeningsBuilder NXOpen::Features::PatchOpeningsBuilder@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::PatchOpeningsBuilder instead.") NXOpen::CAM::CustomLoops * HoleList
            (
            );
            /**Returns  the draft angle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DraftAngle
            (
            );
            /**Sets  the draft angle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDraftAngle
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the material side 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::GeometrySet::MaterialSideTypes MaterialSide
            (
            );
            /**Sets  the material side 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaterialSide
            (
                NXOpen::CAM::GeometrySet::MaterialSideTypes newValue /** newvalue */ 
            );
            /** Break selection intent, and replace all the rules with single rules.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void RemoveSelectionIntent
            (
            );
            /**Returns  the seed face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Face * SeedFace
            (
            );
            /**Sets  the seed face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSeedFace
            (
                NXOpen::Face * face /** face */ 
            );
            /**Returns  the traverse interior edges flag 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool TraverseInteriorEdges
            (
            );
            /**Sets  the traverse interior edges flag 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTraverseInteriorEdges
            (
                bool traverseInteriorEdges /** traverseinterioredges */ 
            );
            /**Returns  the use tangent edge angle flag 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseTangentEdgeAngles
            (
            );
            /**Sets  the use tangent edge angle flag 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUseTangentEdgeAngles
            (
                bool useAngle /** useangle */ 
            );
            /**Returns  the angle tolerance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleToleranceEdges
            (
            );
            /**Sets  the angle tolerance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAngleToleranceEdges
            (
                double angleTol /** angletol */ 
            );
            /** Apply Edge Selections 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void ApplyEdgeSelection
            (
            );
            /**Returns  the boundary edges selection collector for a region set 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BoundaryEdges
            (
            );
            /** Set name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetName
            (
                const NXString & name /** name */ ,
                bool useDefaultName /** usedefaultname */ 
            );
            /** Set name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetName
            (
                const char * name /** name */ ,
                bool useDefaultName /** usedefaultname */ 
            );
            /** Get geometry items 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: std::vector<NXOpen::TaggedObject *> GetItems
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
