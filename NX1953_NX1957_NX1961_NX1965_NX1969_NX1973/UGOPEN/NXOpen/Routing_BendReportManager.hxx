#ifndef NXOpen_ROUTING_BENDREPORTMANAGER_HXX_INCLUDED
#define NXOpen_ROUTING_BENDREPORTMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_BendReportManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class BendReportManager;
    }
    namespace Routing
    {
        class RouteManager;
    }
    class Curve;
    namespace Routing
    {
        class BendCorner;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class Stock;
    }
    class TaggedObject;
    namespace Routing
    {
        class BendReportManagerImpl;
        /** The Routing Bend Report Manager allows you to get a variety of bend reports.  <br> To obtain an instance of this class, refer to @link NXOpen::Routing::RouteManager  NXOpen::Routing::RouteManager @endlink  <br> */
        class NXOPENCPP_ROUTINGEXPORT  BendReportManager
        {
             /** Used by all the reports to hold the information of the segments under port,
                        solid body, segment, stock, stock component, or feature representing the piece of stock.
                        Generated by calling @link Routing::BendReportManager::GetSegmentInformation Routing::BendReportManager::GetSegmentInformation@endlink .
                    */
            public:
            struct SegmentInformation
            {
                public: /** @link Routing::Stock Routing::Stock@endlink  */NXOpen::Routing::Stock * Stock;
                public: /** The segment itself. */NXOpen::Curve * Segment;
                public: /** True if the @link Routing::ISegment Routing::ISegment@endlink  is straight. */bool IsStraight;
                public: /** Length of @link Routing::ISegment Routing::ISegment@endlink  */double Length;
                public: /** Start @link Routing::ControlPoint Routing::ControlPoint@endlink .
                                                                                                       Do not use for S-Bends and bends greater than or
                                                                                                       equal to 180 degrees. */NXOpen::Routing::ControlPoint * StartControlPoint;
                public: /** End @link Routing::ControlPoint Routing::ControlPoint@endlink .
                                                                                                       Do not use for S-Bends and bends greater than or
                                                                                                       equal to 180 degrees. */NXOpen::Routing::ControlPoint * EndControlPoint;
                public: /** @link Routing::BendCorner Routing::BendCorner@endlink  */NXOpen::Routing::BendCorner * BendCorner;
                public: /** Radius of the bend */double BendRadius;
                public: /** Position of the bend rcp */NXOpen::Point3d BendPosition;
                public: /** Normal of curve at start points */NXOpen::Vector3d StartNormal;
                public: /** Normal of curve at end points */NXOpen::Vector3d EndNormal;
                public: /** Location of start @link Routing::ControlPoint Routing::ControlPoint@endlink 
                                                                                                       in ABS coordinates, use this instead of the start
                                                                                                       @link Routing::ControlPoint Routing::ControlPoint@endlink  for S-Bends
                                                                                                       and bends greater than or equal to 180 degrees. */NXOpen::Point3d StartControlPointPosition;
                public: /** Location of end @link Routing::ControlPoint Routing::ControlPoint@endlink 
                                                                                                       in ABS coordinates, use this instead of the end
                                                                                                       @link Routing::ControlPoint Routing::ControlPoint@endlink  for S-Bends
                                                                                                       and bends greater than or equal to 180 degrees. */NXOpen::Point3d EndControlPointPosition;
                public: SegmentInformation() :
                    Stock(),
                    Segment(),
                    IsStraight(),
                    Length(),
                    StartControlPoint(),
                    EndControlPoint(),
                    BendCorner(),
                    BendRadius(),
                    BendPosition(),
                    StartNormal(),
                    EndNormal(),
                    StartControlPointPosition(),
                    EndControlPointPosition()
                {
                }
                /** Constructor for the SegmentInformation struct. */ 
                public: SegmentInformation(NXOpen::Routing::Stock * stockInitial /** @link Routing::Stock Routing::Stock@endlink  */, 
                        NXOpen::Curve * segmentInitial /** The segment itself. */, 
                        bool isStraightInitial /** True if the @link Routing::ISegment Routing::ISegment@endlink  is straight. */, 
                        double lengthInitial /** Length of @link Routing::ISegment Routing::ISegment@endlink  */, 
                        NXOpen::Routing::ControlPoint * startControlPointInitial /** Start @link Routing::ControlPoint Routing::ControlPoint@endlink .
                                                                                                               Do not use for S-Bends and bends greater than or
                                                                                                               equal to 180 degrees. */, 
                        NXOpen::Routing::ControlPoint * endControlPointInitial /** End @link Routing::ControlPoint Routing::ControlPoint@endlink .
                                                                                                               Do not use for S-Bends and bends greater than or
                                                                                                               equal to 180 degrees. */, 
                        NXOpen::Routing::BendCorner * bendCornerInitial /** @link Routing::BendCorner Routing::BendCorner@endlink  */, 
                        double bendRadiusInitial /** Radius of the bend */, 
                        const NXOpen::Point3d &bendPositionInitial /** Position of the bend rcp */, 
                        const NXOpen::Vector3d &startNormalInitial /** Normal of curve at start points */, 
                        const NXOpen::Vector3d &endNormalInitial /** Normal of curve at end points */, 
                        const NXOpen::Point3d &startControlPointPositionInitial /** Location of start @link Routing::ControlPoint Routing::ControlPoint@endlink 
                                                                                                               in ABS coordinates, use this instead of the start
                                                                                                               @link Routing::ControlPoint Routing::ControlPoint@endlink  for S-Bends
                                                                                                               and bends greater than or equal to 180 degrees. */, 
                        const NXOpen::Point3d &endControlPointPositionInitial /** Location of end @link Routing::ControlPoint Routing::ControlPoint@endlink 
                                                                                                               in ABS coordinates, use this instead of the end
                                                                                                               @link Routing::ControlPoint Routing::ControlPoint@endlink  for S-Bends
                                                                                                               and bends greater than or equal to 180 degrees. */) :
                    Stock(stockInitial),
                    Segment(segmentInitial),
                    IsStraight(isStraightInitial),
                    Length(lengthInitial),
                    StartControlPoint(startControlPointInitial),
                    EndControlPoint(endControlPointInitial),
                    BendCorner(bendCornerInitial),
                    BendRadius(bendRadiusInitial),
                    BendPosition(bendPositionInitial),
                    StartNormal(startNormalInitial),
                    EndNormal(endNormalInitial),
                    StartControlPointPosition(startControlPointPositionInitial),
                    EndControlPointPosition(endControlPointPositionInitial)
                {
                }
            };

             /** Used in the XYZ bend reports. The first bend value is at one end point of the stock body
                        and the last bend value is at the other end point of the stock body.  The other bend
                        values are the location in work coordinates of the bend @link Routing::ControlPoint Routing::ControlPoint@endlink s
                        associated with each bend or the location of where the bend @link Routing::ControlPoint Routing::ControlPoint@endlink s
                        would be if they existed.
                    */
            public:
            struct XyzReport
            {
                public: /** X position of bend @link Routing::ControlPoint Routing::ControlPoint@endlink  in work coordinates. */double Xc;
                public: /** Y position of bend @link Routing::ControlPoint Routing::ControlPoint@endlink  in work coordinates. */double Yc;
                public: /** Z position of bend @link Routing::ControlPoint Routing::ControlPoint@endlink  in work coordinates. */double Zc;
                public: /** Radius of the bend. */double Radius;
                public: XyzReport() :
                    Xc(),
                    Yc(),
                    Zc(),
                    Radius()
                {
                }
                /** Constructor for the XyzReport struct. */ 
                public: XyzReport(double xcInitial /** X position of bend @link Routing::ControlPoint Routing::ControlPoint@endlink  in work coordinates. */, 
                        double ycInitial /** Y position of bend @link Routing::ControlPoint Routing::ControlPoint@endlink  in work coordinates. */, 
                        double zcInitial /** Z position of bend @link Routing::ControlPoint Routing::ControlPoint@endlink  in work coordinates. */, 
                        double radiusInitial /** Radius of the bend. */) :
                    Xc(xcInitial),
                    Yc(ycInitial),
                    Zc(zcInitial),
                    Radius(radiusInitial)
                {
                }
            };

             /** Used in the YBC bend reports. The last bend value isn't actually a bend.
                        The only valid value is the Y value, which is the length after the last bend.
                        All values are relative, meaning they are calculated from the previous bend.
                        So if bend1 has B value of 90 degrees and bend2 has a B value of 90 degrees,
                        then the pipe has rotated 180 degrees about the Y axis.
                    */
            public:
            struct YbcReport
            {
                public: /** The length along the stock before the bend. */double Y;
                public: /** The rotation angle in degrees about the Y axis of the stock. */double B;
                public: /** The rotation angle in degrees about the Z axis of the stock. */double C;
                public: /** Radius of the bend. */double Radius;
                public: YbcReport() :
                    Y(),
                    B(),
                    C(),
                    Radius()
                {
                }
                /** Constructor for the YbcReport struct. */ 
                public: YbcReport(double yInitial /** The length along the stock before the bend. */, 
                        double bInitial /** The rotation angle in degrees about the Y axis of the stock. */, 
                        double cInitial /** The rotation angle in degrees about the Z axis of the stock. */, 
                        double radiusInitial /** Radius of the bend. */) :
                    Y(yInitial),
                    B(bInitial),
                    C(cInitial),
                    Radius(radiusInitial)
                {
                }
            };

             /** Used in the MIL-D-9898 C specification reports.
                        All values are absolute and cumulative.
                        See MIL-D-9898C for more information.
                    */
            public:
            struct Mil98Report
            {
                public: /** The distance before the bend, from the start of the cable
                                           to the beginning point of the bend.*/double C;
                public: /** The radius of the bend. */double F;
                public: /** The turn angle, this is the angle about the Y axis, relative
                                           to initial position (cumulation of the B value in YBC). */double E;
                public: /** The bend angle. (The C value in YBC). */double G;
                public: /** The Y value from the YBC format. */double Y;
                public: Mil98Report() :
                    C(),
                    F(),
                    E(),
                    G(),
                    Y()
                {
                }
                /** Constructor for the Mil98Report struct. */ 
                public: Mil98Report(double cInitial /** The distance before the bend, from the start of the cable
                                                   to the beginning point of the bend.*/, 
                        double fInitial /** The radius of the bend. */, 
                        double eInitial /** The turn angle, this is the angle about the Y axis, relative
                                                   to initial position (cumulation of the B value in YBC). */, 
                        double gInitial /** The bend angle. (The C value in YBC). */, 
                        double yInitial /** The Y value from the YBC format. */) :
                    C(cInitial),
                    F(fInitial),
                    E(eInitial),
                    G(gInitial),
                    Y(yInitial)
                {
                }
            };

            private: BendReportManagerImpl * m_bendreportmanager_impl;
            private: NXOpen::Routing::RouteManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit BendReportManager(NXOpen::Routing::RouteManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~BendReportManager();
            /** Builds up the segment information from the given ports, solid bodies, segments, stock, stock components, or features.
                        Call this first to get the segment information to end to the report methods.
                     @return  Information on each segment. Send to one of the generate report methods to get a report. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::BendReportManager::SegmentInformation> GetSegmentInformation
            (
                NXOpen::TaggedObject * stock /** The port, solid body, segment, stock, stock component, or feature representing the piece of stock from which to generate the bend report.  */
            );
            /** Reverses the order of the segment information.
                        Since some of the information in the YBC and MIL98 reports are relative angles,
                        reversing the order of the segments can have a significant impact on the report.
                     @return  The reversed segment order. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::BendReportManager::SegmentInformation> ReverseDirection
            (
                const std::vector<NXOpen::Routing::BendReportManager::SegmentInformation> & segmentInformation /** The original segment order. */
            );
            /** Returns the number of bends in the segment information.  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int GetNumberOfBends
            (
                const std::vector<NXOpen::Routing::BendReportManager::SegmentInformation> & segmentInformation /** segmentinformation */ 
            );
            /** Generates the bend report in XYZ format.  @return  The XYZ report information. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::BendReportManager::XyzReport> GenerateXyzReport
            (
                const std::vector<NXOpen::Routing::BendReportManager::SegmentInformation> & segmentInformation /** The information about the segments to include in the report. Generated by calling @link Routing::BendReportManager::GetSegmentInformation Routing::BendReportManager::GetSegmentInformation@endlink . */,
                double* totalLength /** Total length of the entire path of segments. */
            );
            /** Generates the bend report in YBC format.  @return  The XYZ report information. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::BendReportManager::YbcReport> GenerateYbcReport
            (
                const std::vector<NXOpen::Routing::BendReportManager::SegmentInformation> & segmentInformation /** The information about the segments to include in the report. Generated by calling @link Routing::BendReportManager::GetSegmentInformation Routing::BendReportManager::GetSegmentInformation@endlink . */,
                double* totalLength /** Total length of the entire path of segments. */
            );
            /** Generates the bend report in MIL-D-9898C specification format.  @return  The XYZ report information. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::BendReportManager::Mil98Report> GenerateMil98Report
            (
                const std::vector<NXOpen::Routing::BendReportManager::SegmentInformation> & segmentInformation /** The information about the segments to include in the report. Generated by calling @link Routing::BendReportManager::GetSegmentInformation Routing::BendReportManager::GetSegmentInformation@endlink . */,
                double* totalLength /** Total length of the entire path of segments. */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
