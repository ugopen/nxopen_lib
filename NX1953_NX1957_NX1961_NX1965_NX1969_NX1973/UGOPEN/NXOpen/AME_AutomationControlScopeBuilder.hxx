#ifndef NXOpen_AME_AUTOMATIONCONTROLSCOPEBUILDER_HXX_INCLUDED
#define NXOpen_AME_AUTOMATIONCONTROLSCOPEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_AutomationControlScopeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class AutomationControlScopeBuilder;
    }
    namespace AME
    {
        class AMEBaseNode;
    }
    class Builder;
    class SelectNXObject;
    class SelectNXObjectList;
    namespace AME
    {
        class _AutomationControlScopeBuilderBuilder;
        class AutomationControlScopeBuilderImpl;
        /** Assign/Unassing the automation elevant objects of a Plc <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateAutomationControlScopeBuilder  NXOpen::AME::AMEManager::CreateAutomationControlScopeBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  AutomationControlScopeBuilder : public NXOpen::Builder
        {
            /** Aspect Type for search in descendants */
            public: enum Aspect
            {
                AspectFunction/** function */ ,
                AspectLocation/** location */ ,
                AspectProduct/** product */ ,
                AspectAutomation/** automation */ ,
                AspectNone/** none */ 
            };

            private: AutomationControlScopeBuilderImpl * m_automationcontrolscopebuilder_impl;
            private: friend class  _AutomationControlScopeBuilderBuilder;
            protected: AutomationControlScopeBuilder();
            public: ~AutomationControlScopeBuilder();
            /**Returns  the selection of objects to be assigned/unassign 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::SelectNXObjectList * SourceObjects
            (
            );
            /**Returns  the selection where the object will be assigned. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::SelectNXObject * TargetObject
            (
            );
            /**Returns  the descendant scope for searching automation elevant objects basen on SourceObjects
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AutomationControlScopeBuilder::Aspect SourceDescendantOptions
            (
            );
            /**Sets  the descendant scope for searching automation elevant objects basen on SourceObjects
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSourceDescendantOptions
            (
                NXOpen::AME::AutomationControlScopeBuilder::Aspect descendantType /** descendanttype */ 
            );
            /** Assgin the given automation elevant objects into target Plc object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void Assign
            (
                const std::vector<NXOpen::AME::AMEBaseNode *> & assignObjects /** assignobjects */ 
            );
            /** Unassgin the given automation elevant objects from the current related Plc
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void Unassign
            (
                const std::vector<NXOpen::AME::AMEBaseNode *> & unassignObjects /** unassignobjects */ 
            );
            /** Collect all automation related objects based on selected source objects, and Cleanup the assign list 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CollectAutomationRelatedObjects
            (
                std::vector<NXOpen::AME::AMEBaseNode *> & automationRelatedObjects /** automationrelatedobjects */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
