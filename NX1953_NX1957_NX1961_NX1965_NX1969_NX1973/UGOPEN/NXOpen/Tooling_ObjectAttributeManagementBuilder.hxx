#ifndef NXOpen_TOOLING_OBJECTATTRIBUTEMANAGEMENTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_OBJECTATTRIBUTEMANAGEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ObjectAttributeManagementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ObjectAttributeManagementBuilder;
    }
    class Builder;
    class ScCollector;
    class SelectNXObjectList;
    namespace Tooling
    {
        class _ObjectAttributeManagementBuilderBuilder;
        class ObjectAttributeManagementBuilderImpl;
        /** Tooling  builder to assign and edit attributes of objects  <br> To create a new instance of this class, use @link NXOpen::Tooling::ObjectAttributeManagementCollection::CreateObjectAttributeManagementBuilder  NXOpen::Tooling::ObjectAttributeManagementCollection::CreateObjectAttributeManagementBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AttributeOfRootPart </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OccurenceOrPrototypeEnum </term> <description> 
         
        AssignAttributesToPrototype </description> </item> 

        <item><term> 
         
        OccurenceOrPrototypeEnumAccordingToAttribute </term> <description> 
         
        AssignAttributesToPrototype </description> </item> 

        <item><term> 
         
        SelectionFilter </term> <description> 
         
        Component </description> </item> 

        <item><term> 
         
        SelectionFilterAccordingToAttribute </term> <description> 
         
        Component </description> </item> 

        <item><term> 
         
        ShowTypeEnum </term> <description> 
         
        ShowAllComponents </description> </item> 

        <item><term> 
         
        ToggleListDependents </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        Type </term> <description> 
         
        ShowObjectAccordingToAttribute </description> </item> 

        </list> 

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ObjectAttributeManagementBuilder : public NXOpen::Builder
        {
            /** show attributes of selected objects or show objects according to attribute */
            public: enum ShowType
            {
                ShowTypeShowAttributeOfSelectedObject/** show attribute of selected object */ ,
                ShowTypeShowObjectAccordingToAttribute/** show object according to attribute */ 
            };

            /** the selection filter type */
            public: enum FilterType
            {
                FilterTypePart/** part */ ,
                FilterTypeComponent/** component */ ,
                FilterTypeSolidBody/** solid body */ ,
                FilterTypeFace/** face */ 
            };

            /** the assign attributes to occurence or prototype */
            public: enum OccurenceOrPrototype
            {
                OccurenceOrPrototypeAssignAttributesToOccurence/** assign attributes to occurence */ ,
                OccurenceOrPrototypeAssignAttributesToPrototype/** assign attributes to prototype */ 
            };

            /** the assign attributes to occurence or prototype according to attribute */
            public: enum OccurenceOrPrototypeAccordingToAttribute
            {
                OccurenceOrPrototypeAccordingToAttributeAssignAttributesToOccurence/** assign attributes to occurence */ ,
                OccurenceOrPrototypeAccordingToAttributeAssignAttributesToPrototype/** assign attributes to prototype */ 
            };

            /** the selection filter type according to attribute */
            public: enum FilterAccordingToAttributeType
            {
                FilterAccordingToAttributeTypePart/** part */ ,
                FilterAccordingToAttributeTypeComponent/** component */ ,
                FilterAccordingToAttributeTypeSolidBody/** solid body */ ,
                FilterAccordingToAttributeTypeFace/** face */ 
            };

            /** the show type according to attribute */
            public: enum ShowComponentsType
            {
                ShowComponentsTypeShowAllComponents/** show all components */ ,
                ShowComponentsTypeOnlyShowComponentsWithAttribute/** only show components with attribute */ ,
                ShowComponentsTypeHideComponentsWithAttribute/** hide components with attribute */ 
            };

            private: ObjectAttributeManagementBuilderImpl * m_objectattributemanagementbuilder_impl;
            private: friend class  _ObjectAttributeManagementBuilderBuilder;
            protected: ObjectAttributeManagementBuilder();
            public: ~ObjectAttributeManagementBuilder();
            /**Returns  the type show objects or attributes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ObjectAttributeManagementBuilder::ShowType Type
            (
            );
            /**Sets  the type show objects or attributes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::ObjectAttributeManagementBuilder::ShowType type /** type */ 
            );
            /**Returns  the selection filter 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ObjectAttributeManagementBuilder::FilterType SelectionFilter
            (
            );
            /**Sets  the selection filter 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectionFilter
            (
                NXOpen::Tooling::ObjectAttributeManagementBuilder::FilterType selectionFilter /** selectionfilter */ 
            );
            /**Returns  the selection filter according to attribute 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ObjectAttributeManagementBuilder::FilterAccordingToAttributeType SelectionFilterAccordingToAttribute
            (
            );
            /**Sets  the selection filter according to attribute 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectionFilterAccordingToAttribute
            (
                NXOpen::Tooling::ObjectAttributeManagementBuilder::FilterAccordingToAttributeType selectionFilterAccordingToAttribute /** selectionfilteraccordingtoattribute */ 
            );
            /**Returns  the occurence or prototype enum according to attribute 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ObjectAttributeManagementBuilder::OccurenceOrPrototypeAccordingToAttribute OccurenceOrPrototypeEnumAccordingToAttribute
            (
            );
            /**Sets  the occurence or prototype enum according to attribute 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOccurenceOrPrototypeEnumAccordingToAttribute
            (
                NXOpen::Tooling::ObjectAttributeManagementBuilder::OccurenceOrPrototypeAccordingToAttribute occurenceOrPrototypeEnumAccordingToAttribute /** occurenceorprototypeenumaccordingtoattribute */ 
            );
            /**Returns  the option whether to show attributes of root part 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AttributeOfRootPart
            (
            );
            /**Sets  the option whether to show attributes of root part 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAttributeOfRootPart
            (
                bool attributeOfRootPart /** attributeofrootpart */ 
            );
            /**Returns  the selected objects 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectComponent
            (
            );
            /**Returns  the select body 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectBody
            (
            );
            /**Returns  the select face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectFace
            (
            );
            /**Returns  the occurence or prototype enum 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ObjectAttributeManagementBuilder::OccurenceOrPrototype OccurenceOrPrototypeEnum
            (
            );
            /**Sets  the occurence or prototype enum 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOccurenceOrPrototypeEnum
            (
                NXOpen::Tooling::ObjectAttributeManagementBuilder::OccurenceOrPrototype occurenceOrPrototypeEnum /** occurenceorprototypeenum */ 
            );
            /**Returns  the attribute titles 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AttributeTitles
            (
            );
            /**Sets  the attribute titles 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAttributeTitles
            (
                const NXString & attributeTitles /** attributetitles */ 
            );
            /**Sets  the attribute titles 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetAttributeTitles
            (
                const char * attributeTitles /** attributetitles */ 
            );
            /**Returns  the attribute values 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AttributeValues
            (
            );
            /**Sets  the attribute values 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAttributeValues
            (
                const NXString & attributeValues /** attributevalues */ 
            );
            /**Sets  the attribute values 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetAttributeValues
            (
                const char * attributeValues /** attributevalues */ 
            );
            /**Returns  the option whether to list dependent components 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleListDependents
            (
            );
            /**Sets  the option whether to list dependent components 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetToggleListDependents
            (
                bool toggleListDependents /** togglelistdependents */ 
            );
            /**Returns  the show type enumeration 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ObjectAttributeManagementBuilder::ShowComponentsType ShowTypeEnum
            (
            );
            /**Sets  the show type enumeration 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetShowTypeEnum
            (
                NXOpen::Tooling::ObjectAttributeManagementBuilder::ShowComponentsType showComponentsTypeEnum /** showcomponentstypeenum */ 
            );
            /**Returns  the objects according to attributes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectComponentAccordingToAttribute
            (
            );
            /**Returns  the select body according to attribute 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectBodyAccordingToAttribute
            (
            );
            /**Returns  the faces according to attribute 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectFaceAccordingToAttribute
            (
            );
            /** The action to add selected attributes from attributes spreadsheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AddFromDataFileAttributeList
            (
            );
            /** The action to new an attribute 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void NewAttribute
            (
            );
            /** The action to copy selected attributes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CopyAttribute
            (
            );
            /** The action to paste copied attributes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void PasteAttribute
            (
            );
            /** The action to delete selected attributes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DeleteAttribute
            (
            );
            /** The action to undo last delete 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UndoButton
            (
            );
            /**Returns  the selected attribute spreadsheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectAttributeSpreadsheet
            (
            );
            /**Sets  the selected attribute spreadsheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectAttributeSpreadsheet
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the selected attribute spreadsheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetSelectAttributeSpreadsheet
            (
                const char * fileName /** filename */ 
            );
            /** Tha action to edit attribute spreadsheet 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void EditConfigurationFile
            (
            );
            /**Returns  the wizard type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int WizardType
            (
            );
            /**Sets  the wizard type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWizardType
            (
                int wizardType /** wizardtype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
