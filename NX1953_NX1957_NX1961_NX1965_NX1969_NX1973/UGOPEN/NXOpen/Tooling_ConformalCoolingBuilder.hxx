#ifndef NXOpen_TOOLING_CONFORMALCOOLINGBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_CONFORMALCOOLINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ConformalCoolingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ConformalCoolingBuilder;
    }
    class Builder;
    class NXColor;
    class ScCollector;
    class SelectFace;
    namespace Tooling
    {
        class _ConformalCoolingBuilderBuilder;
        class ConformalCoolingBuilderImpl;
        /** Builder for Conformal Cooling Design in NX  <br> To create a new instance of this class, use @link NXOpen::Tooling::ConformalCoolingManager::CreateBuilder  NXOpen::Tooling::ConformalCoolingManager::CreateBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AllFaces </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        DisplayEntity </term> <description> 
         
        Facet </description> </item> 

        <item><term> 
         
        DisplayMode </term> <description> 
         
        Wireframe </description> </item> 

        <item><term> 
         
        DisplayResolution </term> <description> 
         
        Standard </description> </item> 

        <item><term> 
         
        DisplayTranslucency </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OffsetDistance </term> <description> 
         
        1.0 </description> </item> 

        <item><term> 
         
        SaveConvergentBody </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ConformalCoolingBuilder : public NXOpen::Builder
        {
            /** The options for the display resolution of facets */
            public: enum DisplayResolutionOption
            {
                DisplayResolutionOptionStandard/** Standard display resolution */,
                DisplayResolutionOptionFine/** Fine display resolution */,
                DisplayResolutionOptionExtraFine/** Extra fine display resolution */,
                DisplayResolutionOptionSuperFine/** Super fine display resolution */,
                DisplayResolutionOptionUltraFine/** Ultra fine display resolution */
            };

            /** the entity type to be displayed */
            public: enum DisplayEntityType
            {
                DisplayEntityTypeFacet/** Facet */,
                DisplayEntityTypeBoundaryCube/** Boundary Cube */,
                DisplayEntityTypeOffsetLayerCube/** Offset Layer Cube */,
                DisplayEntityTypeInnerCube/** Inner Cube */
            };

            /** the display mode type for displaying facets */
            public: enum DisplayModeType
            {
                DisplayModeTypeWireframe/** Wireframe display mode */,
                DisplayModeTypeColorfill/** Color fill display mode */,
                DisplayModeTypeBoth/** Both Wireframe and color fill display mode */
            };

            private: ConformalCoolingBuilderImpl * m_conformalcoolingbuilder_impl;
            private: friend class  _ConformalCoolingBuilderBuilder;
            protected: ConformalCoolingBuilder();
            public: ~ConformalCoolingBuilder();
            /**Returns  the body for conformal cooling design 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::ScCollector * ConformalCoolingBody
            (
            );
            /**Returns  the offset distance from the boundary faces of solid 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double OffsetDistance
            (
            );
            /**Sets  the offset distance from the boundary faces of solid 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetOffsetDistance
            (
                double offsetDistance /** offsetdistance */ 
            );
            /** Action for creating an offset convergent body from a solid body 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void CreateOffsetConvergentBody
            (
            );

            /// \cond NX_NO_DOC 
            /**Returns  the dynamic point on face to get to a point at the offset distance 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::SelectFace * DynamicPointOnFace
            (
            );

            /// \endcond 
            /**Returns  the display resolution in creating facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::ConformalCoolingBuilder::DisplayResolutionOption DisplayResolution
            (
            );
            /**Sets  the display resolution in creating facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetDisplayResolution
            (
                NXOpen::Tooling::ConformalCoolingBuilder::DisplayResolutionOption displayResolution /** displayresolution */ 
            );

            /// \cond NX_NO_DOC 
            /** Create a convergent body from the boundary facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void CreateConvergentBody
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  whether or not to save convergent body 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: bool SaveConvergentBody
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  whether or not to save convergent body 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetSaveConvergentBody
            (
                bool saveConvergentBody /** saveconvergentbody */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the entity type to be displayed 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::ConformalCoolingBuilder::DisplayEntityType DisplayEntity
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the entity type to be displayed 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetDisplayEntity
            (
                NXOpen::Tooling::ConformalCoolingBuilder::DisplayEntityType displayEntity /** displayentity */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the flag that indicates if operations are to be performed on all faces 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: bool AllFaces
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the flag that indicates if operations are to be performed on all faces 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetAllFaces
            (
                bool allFaces /** allfaces */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the faces to display 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::ScCollector * FacesToDisplay
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the display mode for displaying facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::ConformalCoolingBuilder::DisplayModeType DisplayMode
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the display mode for displaying facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetDisplayMode
            (
                NXOpen::Tooling::ConformalCoolingBuilder::DisplayModeType displayMode /** displaymode */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the color for displaying facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::NXColor * DisplayColor
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the color for displaying facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetDisplayColor
            (
                NXOpen::NXColor * displayColor /** displaycolor */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the display translucency for the facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: int DisplayTranslucency
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the display translucency for the facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetDisplayTranslucency
            (
                int displayTranslucency /** displaytranslucency */ 
            );

            /// \endcond 
            /** Get the flag that indicates the Apply status of the command, needed only in the interactive environment 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: bool GetInApplyStatus
            (
            );
            /** Set the flag that indicates the Apply status of the command, needed only in the interactive environment 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetInApplyStatus
            (
                bool inApplyStatus /** inapplystatus */ 
            );
            /** Initialize the Conformal Cooling Design facets data for the new input body 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void InitConformalCoolingFacetsData
            (
                bool changingBody /** changingbody */ 
            );
            /** Update the display of facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void UpdateFacetsDisplay
            (
            );

            /// \cond NX_NO_DOC 
            /** Get the flag that indicates if it is running in the unit test environment 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: bool GetInUnitTest
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Set the flag that indicates if it is running in the unit test environment 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetInUnitTest
            (
                bool inUnitTest /** inunittest */ 
            );

            /// \endcond 
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
