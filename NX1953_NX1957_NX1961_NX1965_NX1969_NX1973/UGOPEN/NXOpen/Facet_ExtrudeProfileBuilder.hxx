#ifndef NXOpen_FACET_EXTRUDEPROFILEBUILDER_HXX_INCLUDED
#define NXOpen_FACET_EXTRUDEPROFILEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Facet_ExtrudeProfileBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_facet_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Facet
    {
        class ExtrudeProfileBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class Section;
    namespace Facet
    {
        class _ExtrudeProfileBuilderBuilder;
        class ExtrudeProfileBuilderImpl;
        /**
            Represents a @link NXOpen::Facet::ExtrudeProfileBuilder NXOpen::Facet::ExtrudeProfileBuilder@endlink 
            It extrudes 3D closed profile between planes. The two planes are defined 
            by direction and distance. It returns the extruded NX Facet Body.
             <br> To create a new instance of this class, use @link NXOpen::Facet::FacetedBodyCollection::CreateExtrudeProfileBuilder  NXOpen::Facet::FacetedBodyCollection::CreateExtrudeProfileBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        FirstDistance.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        Offset.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        SecondDistance.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        Tolerance.Value </term> <description> 
         
        0.01 (millimeters part), 0.001 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_FACETEXPORT  ExtrudeProfileBuilder : public NXOpen::Builder
        {
            private: ExtrudeProfileBuilderImpl * m_extrudeprofilebuilder_impl;
            private: friend class  _ExtrudeProfileBuilderBuilder;
            protected: ExtrudeProfileBuilder();
            public: ~ExtrudeProfileBuilder();
            /**Returns  the 3D profile to be extruded 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * Profile
            (
            );
            /**Returns  the extrude direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Direction
            (
            );
            /**Sets  the extrude direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") OR die_engineering ("DIE ENGINEERING") */
            public: void SetDirection
            (
                NXOpen::Direction * direction /** direction */ 
            );
            /**Returns  the first distance to extrude 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FirstDistance
            (
            );
            /**Returns  the second distance to extrude 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SecondDistance
            (
            );
            /**Returns  the offset used to offset the extruded body 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Offset
            (
            );
            /**Returns  the tolerance used to create the polyline 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Tolerance
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
