#ifndef NXOpen_CAE_DURSPECIALISTHARMONICDATASOURCEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DURSPECIALISTHARMONICDATASOURCEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurSpecialistHarmonicDataSourceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DurSpecialistVibrationDataSourceBuilder.hxx>
#include <NXOpen/CAE_DurSpecialistVibrationInputDefinition.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DurSpecialistHarmonicDataSourceBuilder;
    }
    class Builder;
    namespace CAE
    {
        class DurSpecialistMpfSubcaseLink;
    }
    namespace CAE
    {
        class DurSpecialistVibrationInputDefinition;
    }
    namespace CAE
    {
        class ModeSet;
    }
    class Expression;
    namespace CAE
    {
        class _DurSpecialistHarmonicDataSourceBuilderBuilder;
        class DurSpecialistHarmonicDataSourceBuilderImpl;
        /** Represents a @link NXOpen::CAE::DurSpecialistHarmonicDataSource NXOpen::CAE::DurSpecialistHarmonicDataSource@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::CAE::DurSpecialistHarmonicDataSourceCollection::CreateHarmonicDataSourceBuilder  NXOpen::CAE::DurSpecialistHarmonicDataSourceCollection::CreateHarmonicDataSourceBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        FrequencyOpt </term> <description> 
         
        Single </description> </item> 

        </list> 

         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DurSpecialistHarmonicDataSourceBuilder : public NXOpen::Builder
        {
            /** the Modal Participation Factors source */
            public: enum Source
            {
                SourceFile/** use selected file */,
                SourceModeSet/** use mode set */
            };

            /** the frequency definition types */
            public: enum FrequencyOption
            {
                FrequencyOptionSingle/** Single */,
                FrequencyOptionMultiple/** Multiple */
            };

            /** the Load Type the forcing frequencies */
            public: enum LoadType
            {
                LoadTypeSineSweep/** Sine Sweep */,
                LoadTypeSineDwell/** Sine Dwell */
            };

            /** the Type the sine sweep */
            public: enum SineSweepType
            {
                SineSweepTypeLinear/** Linear */,
                SineSweepTypeLogarithmic/** Logarithmic */
            };

            private: DurSpecialistHarmonicDataSourceBuilderImpl * m_durspecialistharmonicdatasourcebuilder_impl;
            private: friend class  _DurSpecialistHarmonicDataSourceBuilderBuilder;
            protected: DurSpecialistHarmonicDataSourceBuilder();
            public: ~DurSpecialistHarmonicDataSourceBuilder();
            /**Returns  the name. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the description. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Description
            (
            );
            /**Sets  the description. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets  the description. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /**Returns  the file type. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModeSet * ModeSet
            (
            );
            /**Sets  the file type. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetModeSet
            (
                NXOpen::CAE::ModeSet * theModeSet /** themodeset */ 
            );
            /**Returns  the mode of the mode set. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistVibrationDataSourceBuilder::ModeType ModeType
            (
            );
            /**Sets  the mode of the mode set. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetModeType
            (
                NXOpen::CAE::DurSpecialistVibrationDataSourceBuilder::ModeType mode /** mode */ 
            );
            /**Returns  the modal participation factors source. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistHarmonicDataSourceBuilder::Source MpfSource
            (
            );
            /**Sets  the modal participation factors source. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetMpfSource
            (
                NXOpen::CAE::DurSpecialistHarmonicDataSourceBuilder::Source source /** source */ 
            );
            /**Returns  the file path to mpf file. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FilePath
            (
            );
            /**Sets  the file path to mpf file. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetFilePath
            (
                const NXString & filePath /** filepath */ 
            );
            /**Sets  the file path to mpf file. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            void SetFilePath
            (
                const char * filePath /** filepath */ 
            );
            /**Returns  the step for the forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Step
            (
            );
            /**Sets  the step for the forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetStep
            (
                NXOpen::Expression * stepTag /** steptag */ 
            );
            /** Add a harmonic input definition. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void AddVibrationInputDefinition
            (
                NXOpen::CAE::DurSpecialistVibrationInputDefinition * vid /** The harmonic input definition. */
            );
            /** Get the number of Mpf subcases.  @return  Number of Mpf subcases. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: int GetNumberMPFSubcases
            (
            );
            /** Get the global index of the nth subcase.  @return  Get the global index of the nth subcase. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: int GetNthMPFSubcaseIndex
            (
                int nth /** Zero-based subcase index */
            );
            /** Get the nth subcase.  @return  The nth subcase. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: NXOpen::CAE::DurSpecialistMpfSubcaseLink * GetNthMPFSubcase
            (
                int nth /** Zero-based subcase index */
            );
            /** Get the name of the nth subcase.  @return  The name of the nth subcase 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: NXString GetNthMPFSubcaseName
            (
                int nth /** Zero-based subcase index */
            );
            /**Returns  the frequency option. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistHarmonicDataSourceBuilder::FrequencyOption FrequencyOpt
            (
            );
            /**Sets  the frequency option. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetFrequencyOpt
            (
                NXOpen::CAE::DurSpecialistHarmonicDataSourceBuilder::FrequencyOption option /** option */ 
            );
            /**Returns  the load type for the forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistHarmonicDataSourceBuilder::LoadType FFLoadType
            (
            );
            /**Sets  the load type for the forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetFFLoadType
            (
                NXOpen::CAE::DurSpecialistHarmonicDataSourceBuilder::LoadType loadType /** loadtype */ 
            );
            /**Returns  the type for the sine sweep load. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistHarmonicDataSourceBuilder::SineSweepType FFSineSweepType
            (
            );
            /**Sets  the type for the sine sweep load. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetFFSineSweepType
            (
                NXOpen::CAE::DurSpecialistHarmonicDataSourceBuilder::SineSweepType type /** type */ 
            );
            /**Returns  the start frequency for the sine sweep load for forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StartFrequency
            (
            );
            /**Sets  the start frequency for the sine sweep load for forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetStartFrequency
            (
                NXOpen::Expression * startFrequencyTag /** startfrequencytag */ 
            );
            /**Returns  the end frequency for the sine sweep load for forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EndFrequency
            (
            );
            /**Sets  the end frequency for the sine sweep load for forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetEndFrequency
            (
                NXOpen::Expression * endFrequencyTag /** endfrequencytag */ 
            );
            /**Returns  the frequency for the sine dwell load for forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Frequency
            (
            );
            /**Sets  the frequency for the sine dwell load for forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetFrequency
            (
                NXOpen::Expression * frequencyTag /** frequencytag */ 
            );
            /**Returns  the duration for the forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Duration
            (
            );
            /**Sets  the duration for the forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetDuration
            (
                NXOpen::Expression * durationTag /** durationtag */ 
            );
            /**Returns  the start frequency for the sine sweep load for multiple forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StartFrequencyMultiple
            (
            );
            /**Sets  the start frequency for the sine sweep load for multiple forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetStartFrequencyMultiple
            (
                NXOpen::Expression * startFrequencyTag /** startfrequencytag */ 
            );
            /**Returns  the end frequency for the sine sweep load for multiple forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EndFrequencyMultiple
            (
            );
            /**Sets  the end frequency for the sine sweep load for multiple forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetEndFrequencyMultiple
            (
                NXOpen::Expression * endFrequencyTag /** endfrequencytag */ 
            );
            /**Returns  the frequency for the sine dwell load for multiple forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FrequencyMultiple
            (
            );
            /**Sets  the frequency for the sine dwell load for multiple forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetFrequencyMultiple
            (
                NXOpen::Expression * frequencyTag /** frequencytag */ 
            );
            /**Returns  the duration for multiple forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DurationMultiple
            (
            );
            /**Sets  the duration for multiple forcing frequencies. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetDurationMultiple
            (
                NXOpen::Expression * durationTag /** durationtag */ 
            );
            /** Updates vibration input definition based on the modal participation factors defined in file 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void UpdateMpfVibrationInputDefinitionByFile
            (
                const NXString & mpfFilePath /** the full file path for modal participation factors */
            );
            /** Updates vibration input definition based on the modal participation factors defined in file 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            void UpdateMpfVibrationInputDefinitionByFile
            (
                const char * mpfFilePath /** the full file path for modal participation factors */
            );
            /** Updates vibration input definition based on the modal participation factors defined in mode set 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void UpdateMpfVibrationInputDefinitionByModeSet
            (
                NXOpen::CAE::ModeSet * modeSet /** the mode set source for modal participation factors */
            );
            /** Adjusts the fixed boundary condition types specified in vibration input definition to free as reading modal participation factors is specified  @return  Indicates boundary conditions changed at a few degree of freedom. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: int AdjustMpfVibrationInputDefinitionBCTypes
            (
            );
            /** Creates new expressions for multiple frequencies 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void CreateNewMultipleExpressions
            (
            );
            /** Updates nth frequency. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void UpdateNthFrequency
            (
                int nth /** Zero-based frequency index */
            );
            /** Updates frequency from selection in the table. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void UpdateFrequencyFromSelection
            (
                int nth /** Zero-based frequency index */
            );
            /** Adds frequency to the table 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void AddFrequency
            (
            );
            /** Removes selected frequencies from the table. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void RemoveFrequencies
            (
                const std::vector<int> & indexes /** indexes */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
