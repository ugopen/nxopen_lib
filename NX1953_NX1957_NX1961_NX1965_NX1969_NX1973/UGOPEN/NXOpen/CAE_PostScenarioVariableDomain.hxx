#ifndef NXOpen_CAE_POSTSCENARIOVARIABLEDOMAIN_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIOVARIABLEDOMAIN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioVariableDomain.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostScenarioVariableDomain;
    }
    class Unit;
    namespace CAE
    {
    }
    namespace CAE
    {
        class PostScenarioVariableDomainImpl;
        /**  @brief  Models the measure and unit used by @link CAE::PostScenarioResultGroupVariable CAE::PostScenarioResultGroupVariable@endlink   

         

                
                 <br> 
                A Variable Domain is made up of N components. The base components can be used as-is as a single component in a
                Variable Domain to identify base quantities such as Pressure, Frequency, Length etc. 
                 <br> 
                 <br> 
                For advanced use of Scenario-based Data Visualization, you may have to use complex Variable Domain expressions
                to build, for example, rational quantities, such as transfer functions, power spectrum densities etc, or even to
                better identify the various types of velocities (such as structural velocity, fluid velocity, sound speed, etc).
                 <br> 
                 <br> 
                For the former, adding multiple base domain components to a Variable Domain puts those components in a multiplication
                relation. For example, Pressure Squared is built using (NXOpen for Python):  @code 
                    vd = part.PostScenarioMgr.NewVariableDomain()
                    vd.AddComponent("pressure", [])
                    vd.AddComponent("pressure", [])
                 @endcode 
                 <br> 
                 <br> 
                To build a power spectrum density of pressure, we need to introduce a division operation, which is used using the
                special base domain called "rational_support":  @code 
                    vd = part.PostScenarioMgr.NewVariableDomain()
                    vd.AddComponent("pressure", [])
                    vd.AddComponent("pressure", [])
                    vd.AddComponent("rational_support", ["over"])
                    vd.AddComponent("frequency", [])
                 @endcode 
                 <br> 
                 <br> 
                The base domains can be retrieved using @link CAE::PostScenarioVariableDomain::GetAllBaseDomains CAE::PostScenarioVariableDomain::GetAllBaseDomains@endlink . Subdomains
                can be retrieved using @link CAE::PostScenarioVariableDomain::GetAllSubdomains CAE::PostScenarioVariableDomain::GetAllSubdomains@endlink  and passing in a base domain.
                Not all base domains have subdomains.
                 <br> 
                 <br> 
                Subdomains can identify distinctions in quantity or location:  @code 
                    # can be used to identify data modeled on a structural vibro-acoustic mesh
                    vdStructure = part.PostScenarioMgr.NewVariableDomain()
                    vdStructure.AddComponent("node", ["node_structural"])
                    # can be used to identify data modeled on a fluid acoustic mesh
                    vdFluid = part.PostScenarioMgr.NewVariableDomain()
                    vdFluid.AddComponent("node", ["node_fluid"])
                 @endcode 
                 <br> 
                
              <br> To create a new instance of this class, use @link NXOpen::CAE::PostScenarioManager::NewVariableDomain  NXOpen::CAE::PostScenarioManager::NewVariableDomain @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostScenarioVariableDomain : public NXOpen::TransientObject
        {
            private: PostScenarioVariableDomainImpl * m_postscenariovariabledomain_impl;
            /// \cond NX_NO_DOC 
            public: explicit PostScenarioVariableDomain(void *ptr);
            /// \endcond 
            /** Dispose of this instance. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PostScenarioVariableDomain();
            /** Retrieve a list of supported base domains. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXString> GetAllBaseDomains
            (
            );
            /** Retrieve a list of supported subdomains given a base domain. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXString> GetAllSubdomains
            (
                const NXString & baseDomain /** basedomain */ 
            );
            /** Retrieve a list of supported subdomains given a base domain. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            std::vector<NXString> GetAllSubdomains
            (
                const char * baseDomain /** basedomain */ 
            );
            /**  @brief Add a domain component to this domain. 

             

                        
                         <br> 
                        A full Variable Domain is composed of a number of components that find themselves
                        in a product relation. Most of the time you only have one base domain representing
                        the quantity you are referring to. In that case, consider using API overloads
                        that accept a plain string.
                         <br> 
                         <br> 
                        This class is meant to support advanced and specific Rational Quantities, or specific
                        subdomains of a Quantity.
                         <br> 
                         <br> 
                        A rational quantity, such as "Pressure/Force" (a transfer function), is built as such:  @code 
                        vd = part.PostScenarioMgr.NewVariableDomain()
                        vd.AddComponent("pressure", [])
                        vd.AddComponent("rational_support", ["over"])
                        vd.AddComponent("force", [])
                         @endcode 
                         <br> 
                         <br> 
                        A different example, like a Force auto-power, is built as:  @code 
                        vd = part.PostScenarioMgr.NewVariableDomain()
                        vd.AddComponent("force", [])
                        vd.AddComponent("rational_support", ["cross"])
                        vd.AddComponent("force", [])
                         @endcode 
                         <br> 
                        
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddComponent
            (
                const NXString & baseDomain /** basedomain */ ,
                std::vector<NXString> & subdomains /** subdomains */ 
            );
            /**  @brief Add a domain component to this domain. 

             

                        
                         <br> 
                        A full Variable Domain is composed of a number of components that find themselves
                        in a product relation. Most of the time you only have one base domain representing
                        the quantity you are referring to. In that case, consider using API overloads
                        that accept a plain string.
                         <br> 
                         <br> 
                        This class is meant to support advanced and specific Rational Quantities, or specific
                        subdomains of a Quantity.
                         <br> 
                         <br> 
                        A rational quantity, such as "Pressure/Force" (a transfer function), is built as such:  @code 
                        vd = part.PostScenarioMgr.NewVariableDomain()
                        vd.AddComponent("pressure", [])
                        vd.AddComponent("rational_support", ["over"])
                        vd.AddComponent("force", [])
                         @endcode 
                         <br> 
                         <br> 
                        A different example, like a Force auto-power, is built as:  @code 
                        vd = part.PostScenarioMgr.NewVariableDomain()
                        vd.AddComponent("force", [])
                        vd.AddComponent("rational_support", ["cross"])
                        vd.AddComponent("force", [])
                         @endcode 
                         <br> 
                        
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void AddComponent
            (
                const char * baseDomain /** basedomain */ ,
                std::vector<NXString> & subdomains /** subdomains */ 
            );
            /** Retrieve the base Measure name corresponding to this Variable Domain, which can be used with the @link Unit Unit@endlink  API. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString GetMeasure
            (
            );
            /** Retrieve the unit used in Scenario Post Processing for this Variable Domain. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Unit * GetUnit
            (
            );
            /** Retrieve the number of components. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int GetNumberOfComponents
            (
            );
            /** Retrieve the nth component. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void GetNthComponent
            (
                int n /** n */ ,
                NXString* baseDomain /** basedomain */ ,
                std::vector<NXString> & subdomains /** subdomains */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
