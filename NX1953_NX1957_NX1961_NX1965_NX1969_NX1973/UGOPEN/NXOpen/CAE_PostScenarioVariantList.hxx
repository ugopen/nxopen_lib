#ifndef NXOpen_CAE_POSTSCENARIOVARIANTLIST_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIOVARIANTLIST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioVariantList.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostScenarioComplexDataOnNodesOfElements.hxx>
#include <NXOpen/CAE_PostScenarioCoordinateSystem.hxx>
#include <NXOpen/CAE_PostScenarioDoubleDataOnNodesOfElements.hxx>
#include <NXOpen/CAE_PostScenarioTypes.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostScenarioVariantList;
    }
    namespace CAE
    {
        class PostScenarioComplexDataOnNodesOfElements;
    }
    namespace CAE
    {
        class PostScenarioCoordinateSystem;
    }
    namespace CAE
    {
        class PostScenarioDoubleDataOnNodesOfElements;
    }
    namespace CAE
    {
    }
    namespace CAE
    {
        class PostScenarioVariantListImpl;
        /**  @brief Represents an array of variable type 

         

                
                 <br> 
                The variable type can be queried using @link CAE::PostScenarioVariantList::GetDataType CAE::PostScenarioVariantList::GetDataType@endlink , and afterwards
                you can use the various GetValueAsX methods to retrieve a native array of the correct type.
                 <br> 
                 <br> 
                The type is set implicitly when you call the SetValueAsX methods and passing in a native array of the appropriate type.
                 <br> 
                 <br> 
                Types: @link CAE::PostScenarioVariantType CAE::PostScenarioVariantType@endlink .
                 <br> 
                
              <br> To create a new instance of this class, use @link NXOpen::CAE::PostScenarioManager::NewVariantList  NXOpen::CAE::PostScenarioManager::NewVariantList @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostScenarioVariantList : public NXOpen::TransientObject
        {
            private: PostScenarioVariantListImpl * m_postscenariovariantlist_impl;
            /// \cond NX_NO_DOC 
            public: explicit PostScenarioVariantList(void *ptr);
            /// \endcond 
            /** Read the typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<bool> GetValueAsBoolean
            (
            );
            /** Read the typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetValueAsInteger
            (
            );
            /** Read the typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetValueAsDouble
            (
            );
            /** Read the typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAE::Complex> GetValueAsComplex
            (
            );
            /** Read the typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetValueAsString
            (
            );
            /** Read the typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetValueAsUnicodeString
            (
            );
            /** Read the typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Vector3d> GetValueAsVector3d
            (
            );
            /** Read the typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAE::PostScenarioModeDescription> GetValueAsModeDescription
            (
            );
            /** Read the typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::PostScenarioCoordinateSystem *> GetValueAsCoordinateSystem
            (
            );
            /** Read the typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::PostScenarioDoubleDataOnNodesOfElements *> GetValueAsDoubleDataOnNodesOfElements
            (
            );
            /** Read the typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::PostScenarioComplexDataOnNodesOfElements *> GetValueAsComplexDataOnNodesOfElements
            (
            );
            /** Read the type. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioVariantType GetDataType
            (
            );
            /** Dispose of this instance. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PostScenarioVariantList();
            /** Set a typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsBoolean
            (
                const std::vector<bool> & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsInteger
            (
                const std::vector<int> & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsDouble
            (
                const std::vector<double> & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsComplex
            (
                const std::vector<NXOpen::CAE::Complex> & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsString
            (
                std::vector<NXString> & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsUnicodeString
            (
                const std::vector<NXString> & value /** value */ 
            );
            /** Set a typed value. This method is parameterless because the void types does not have values. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsUnary
            (
                int nValues /** nvalues */ 
            );
            /** Set a typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsVector3d
            (
                const std::vector<NXOpen::Vector3d> & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsModeDescription
            (
                const std::vector<NXOpen::CAE::PostScenarioModeDescription> & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsCoordinateSystem
            (
                const std::vector<NXOpen::CAE::PostScenarioCoordinateSystem *> & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsDoubleDataOnNodesOfElements
            (
                const std::vector<NXOpen::CAE::PostScenarioDoubleDataOnNodesOfElements *> & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsComplexDataOnNodesOfElements
            (
                const std::vector<NXOpen::CAE::PostScenarioComplexDataOnNodesOfElements *> & value /** value */ 
            );
            /** Create a new Post Scenario Coordinate System ((@link NXOpen::CAE::PostScenarioCoordinateSystem NXOpen::CAE::PostScenarioCoordinateSystem@endlink )). 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::PostScenarioCoordinateSystem * NewPostScenarioCoordinateSystem
            (
                NXOpen::CAE::PostScenarioCoordinateSystemType type /** type */ ,
                const NXOpen::Vector3d & origin /** origin */ ,
                const NXOpen::Matrix3x3 & matrix /** matrix */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
