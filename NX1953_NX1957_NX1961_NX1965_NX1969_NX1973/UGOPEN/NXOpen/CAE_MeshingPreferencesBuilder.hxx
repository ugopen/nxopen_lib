#ifndef NXOpen_CAE_MESHINGPREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MESHINGPREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_MeshingPreferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class MeshingPreferencesBuilder;
    }
    class Builder;
    class NXColor;
    namespace CAE
    {
        class _MeshingPreferencesBuilderBuilder;
        class MeshingPreferencesBuilderImpl;
        /** Builder for Meshing Preferences  <br> To create a new instance of this class, use @link NXOpen::CAE::FemPart::CreateMeshingPreferencesBuilder  NXOpen::CAE::FemPart::CreateMeshingPreferencesBuilder @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  MeshingPreferencesBuilder : public NXOpen::Builder
        {
            /** the analysis context types */
            public: enum AppTypeName
            {
                AppTypeNameGeneral/** General Analysis */,
                AppTypeNameCrashAnalysis/** Crash Analysis  */
            };

            private: MeshingPreferencesBuilderImpl * m_meshingpreferencesbuilder_impl;
            private: friend class  _MeshingPreferencesBuilderBuilder;
            protected: MeshingPreferencesBuilder();
            public: ~MeshingPreferencesBuilder();
            /**Returns  the application type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::MeshingPreferencesBuilder::AppTypeName AppType
            (
            );
            /**Sets  the application type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetAppType
            (
                NXOpen::CAE::MeshingPreferencesBuilder::AppTypeName appType /** apptype */ 
            );
            /**Returns  the snap tolerance or the tiny edge tolerance 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double TinyEdgeTol
            (
            );
            /**Sets  the snap tolerance or the tiny edge tolerance 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTinyEdgeTol
            (
                double tinyEdgeTol /** tinyedgetol */ 
            );
            /**Returns  the tiny edge color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * TinyEdgeColor
            (
            );
            /**Sets  the tiny edge color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTinyEdgeColor
            (
                NXOpen::NXColor * tinyEdgeColor /** tinyedgecolor */ 
            );
            /**Returns  the project nodes to cad toggle option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ProjectNodesToCADOptn
            (
            );
            /**Sets  the project nodes to cad toggle option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetProjectNodesToCADOptn
            (
                bool projectNodesToCADOptn /** projectnodestocadoptn */ 
            );
            /**Returns  the projection tolerance 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double ProjectNodesToCADTol
            (
            );
            /**Sets  the projection tolerance 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetProjectNodesToCADTol
            (
                double projectNodesToCADTol /** projectnodestocadtol */ 
            );
            /**Returns  the maximum number of element based on curvature toggle option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaxNumElemOptn
            (
            );
            /**Sets  the maximum number of element based on curvature toggle option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMaxNumElemOptn
            (
                bool maxNumElemOptn /** maxnumelemoptn */ 
            );
            /**Returns  the maximum number of elements per 90 degrees 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int MaxNumElem
            (
            );
            /**Sets  the maximum number of elements per 90 degrees 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMaxNumElem
            (
                int maxNumElem /** maxnumelem */ 
            );
            /**Returns  the minimum number of elements on an arc toggle option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinNumElemOptn
            (
            );
            /**Sets  the minimum number of elements on an arc toggle option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMinNumElemOptn
            (
                bool minNumElemOptn /** minnumelemoptn */ 
            );
            /**Returns  the minimum number of elements per 90 degrees 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int MinNumElem
            (
            );
            /**Sets  the minimum number of elements per 90 degrees 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMinNumElem
            (
                int minNumElem /** minnumelem */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
