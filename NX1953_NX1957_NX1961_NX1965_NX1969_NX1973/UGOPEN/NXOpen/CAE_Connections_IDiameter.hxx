#ifndef NXOpen_CAE_CONNECTIONS_IDIAMETER_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_IDIAMETER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_IDiameter.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Connections_Types.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class IDiameter;
        }
    }
    class Expression;
    class INXObject;
    namespace CAE
    {
        namespace Connections
        {
            /**  @brief  This class represents an Interface to the Diameter parameters.  

              
             <br>  Created in NX12.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  IDiameter : public virtual NXOpen::INXObject
            {
                public: virtual ~IDiameter() {}
                /**Returns  the connection diameter type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::DiameterType DiameterType
                (
                ) = 0;
                /**Sets  the connection diameter type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetDiameterType
                (
                    NXOpen::CAE::Connections::DiameterType diameterType /** diametertype */ 
                ) = 0;
                /**Returns  the connection diameter 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * Diameter
                (
                ) = 0;
                /**Returns  the coefficient for formula defined diameter 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * Coefficient
                (
                ) = 0;
                /**Returns  the table file used to compute the diameter 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXString TableFile
                (
                ) = 0;
                /**Sets  the table file used to compute the diameter 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetTableFile
                (
                    const NXString & tableFile /** Full path to the diameter table file. */
                ) = 0;
                /**Sets  the table file used to compute the diameter 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                virtual void SetTableFile
                (
                    const char * tableFile /** Full path to the diameter table file. */
                ) = 0;
                /** Gets supported diameter types of connection.  @return  Supported CSys Types 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::CAE::Connections::DiameterType> GetSupportedDiameterTypes
                (
                ) = 0;
                /** Sets manual adjustent state. 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual void SetManualAdjustment
                (
                    bool state /** state */ 
                ) = 0;
                /** Gets manual adjustent state. 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool GetManualAdjustment
                (
                ) = 0;
                /** Gets manual adjustent factor. 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * GetManualAdjustmentFactor
                (
                ) = 0;
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
