#ifndef NXOpen_PCBEXCHANGE_INCREMENTALEXPORTBUILDER_HXX_INCLUDED
#define NXOpen_PCBEXCHANGE_INCREMENTALEXPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PcbExchange_IncrementalExportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PcbExchange_IncrementalChange.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_pcbexchange_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PcbExchange
    {
        class IncrementalExportBuilder;
    }
    class Builder;
    namespace PcbExchange
    {
        class IncrementalChange;
    }
    class SelectNXObjectList;
    namespace PcbExchange
    {
        class _IncrementalExportBuilderBuilder;
        class IncrementalExportBuilderImpl;
        /** Represents a builder to export incremental changes.  <br> To create a new instance of this class, use @link NXOpen::PcbExchange::Manager::CreateIncrementalExportBuilder  NXOpen::PcbExchange::Manager::CreateIncrementalExportBuilder @endlink  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_PCBEXCHANGEEXPORT  IncrementalExportBuilder : public NXOpen::Builder
        {
            /** Represents the incremental file format options. */
            public: enum FormatEnum
            {
                FormatEnumIdx2/** idx2 */ ,
                FormatEnumIdx3/** idx3 */ 
            };

            /** Represents the target data location options. */
            public: enum TargetLocationEnum
            {
                TargetLocationEnumOs/** os */ ,
                TargetLocationEnumTeamcenterCS/** teamcenter cs */ 
            };

            private: IncrementalExportBuilderImpl * m_incrementalexportbuilder_impl;
            private: friend class  _IncrementalExportBuilderBuilder;
            protected: IncrementalExportBuilder();
            public: ~IncrementalExportBuilder();
            /**Returns  the file format. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::IncrementalExportBuilder::FormatEnum FileFormat
            (
            );
            /**Sets  the file format. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetFileFormat
            (
                NXOpen::PcbExchange::IncrementalExportBuilder::FormatEnum fileFormat /** fileformat */ 
            );
            /**Returns  the target location. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::IncrementalExportBuilder::TargetLocationEnum TargetLocation
            (
            );
            /**Sets  the target location. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetTargetLocation
            (
                NXOpen::PcbExchange::IncrementalExportBuilder::TargetLocationEnum targetLocation /** targetlocation */ 
            );
            /**Returns  the output file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Output
            (
            );
            /**Sets  the output file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetOutput
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the output file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetOutput
            (
                const char * filename /** filename */ 
            );
            /**Returns  the file note. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FileNote
            (
            );
            /**Sets  the file note. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetFileNote
            (
                const NXString & fileNote /** filenote */ 
            );
            /**Sets  the file note. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetFileNote
            (
                const char * fileNote /** filenote */ 
            );
            /**Returns  the flag indicating whether to clone the assembly. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool CloneAssembly
            (
            );
            /**Sets  the flag indicating whether to clone the assembly. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetCloneAssembly
            (
                bool cloneAssembly /** cloneassembly */ 
            );
            /**Returns  the flag indicating whether to clone only selected objects. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseCloneSelection
            (
            );
            /**Sets  the flag indicating whether to clone only selected objects. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetUseCloneSelection
            (
                bool canUseCloneSelection /** canusecloneselection */ 
            );
            /**Returns  the selected objects. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectedObjects
            (
            );
            /** Returns the incremental changes. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: std::vector<NXOpen::PcbExchange::IncrementalChange *> GetIncrementalChanges
            (
            );
            /** Sets the incremental changes. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetIncrementalChanges
            (
                const std::vector<NXOpen::PcbExchange::IncrementalChange *> & changes /** changes */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
