#ifndef NXOpen_CAE_LAMINATERELABELPLIESBUILDER_HXX_INCLUDED
#define NXOpen_CAE_LAMINATERELABELPLIESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_LaminateRelabelPliesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class LaminateRelabelPliesBuilder;
    }
    class Builder;
    namespace CAE
    {
        class LaminateGlobalLayup;
    }
    namespace CAE
    {
        class _LaminateRelabelPliesBuilderBuilder;
        class LaminateRelabelPliesBuilderImpl;
        /** Represents a @link CAE::LaminateDynamicEvent CAE::LaminateDynamicEvent@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::CAE::LaminateGlobalLayupMgr::CreateRelabelPliesBuilder  NXOpen::CAE::LaminateGlobalLayupMgr::CreateRelabelPliesBuilder @endlink  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  LaminateRelabelPliesBuilder : public NXOpen::Builder
        {
            /** the relabeling option enum. */
            public: enum RelabelOptionEnum
            {
                RelabelOptionEnumLabelAndIncrement/** Relabel sequentially using a starting ID and an increment value */,
                RelabelOptionEnumOffset/** Relabel by applying an offset to existing IDs */
            };

            private: LaminateRelabelPliesBuilderImpl * m_laminaterelabelpliesbuilder_impl;
            private: friend class  _LaminateRelabelPliesBuilderBuilder;
            protected: LaminateRelabelPliesBuilder();
            public: ~LaminateRelabelPliesBuilder();
            /** Adds a layup to the list of layups that will have their plies relabeled. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void AddGlobalLayup
            (
                NXOpen::CAE::LaminateGlobalLayup * layup /** layup */ 
            );
            /**Returns  the relabeling option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateRelabelPliesBuilder::RelabelOptionEnum RelabelOption
            (
            );
            /**Sets  the relabeling option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetRelabelOption
            (
                NXOpen::CAE::LaminateRelabelPliesBuilder::RelabelOptionEnum relabelOption /** relabeloption */ 
            );
            /**Returns  the start label for the label and increment option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int MinLabel
            (
            );
            /**Sets  the start label for the label and increment option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetMinLabel
            (
                int minLabel /** minlabel */ 
            );
            /**Returns  the increment value for the label and increment option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int Increment
            (
            );
            /**Sets  the increment value for the label and increment option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetIncrement
            (
                int increment /** increment */ 
            );
            /**Returns  the offset value for the label offset option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int Offset
            (
            );
            /**Sets  the offset value for the label offset option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetOffset
            (
                int offset /** offset */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
