#ifndef NXOpen_CAE_ONEDIMENSIONALELEMENTSPLITBUILDER_HXX_INCLUDED
#define NXOpen_CAE_ONEDIMENSIONALELEMENTSPLITBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_OneDimensionalElementSplitBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class OneDimensionalElementSplitBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class Expression;
    namespace CAE
    {
        class _OneDimensionalElementSplitBuilderBuilder;
        class OneDimensionalElementSplitBuilderImpl;
        /**
            Represents a @link NXOpen::CAE::OneDimensionalElementSplitBuilder NXOpen::CAE::OneDimensionalElementSplitBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::CAE::NodeElementManager::CreateOneDimensionalElementSplitBuilder  NXOpen::CAE::NodeElementManager::CreateOneDimensionalElementSplitBuilder @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  OneDimensionalElementSplitBuilder : public NXOpen::Builder
        {
            /** represents the split method types */
            public: enum SplitMethodType
            {
                SplitMethodTypeNumberElement/**by number of elements */,
                SplitMethodTypeLengthElement/**by length of elements*/
            };

            private: OneDimensionalElementSplitBuilderImpl * m_onedimensionalelementsplitbuilder_impl;
            private: friend class  _OneDimensionalElementSplitBuilderBuilder;
            protected: OneDimensionalElementSplitBuilder();
            public: ~OneDimensionalElementSplitBuilder();
            /**Returns  the selected elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * Elements
            (
            );
            /**Returns  the split method type
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::OneDimensionalElementSplitBuilder::SplitMethodType SplitMethod
            (
            );
            /**Sets  the split method type
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSplitMethod
            (
                NXOpen::CAE::OneDimensionalElementSplitBuilder::SplitMethodType option /** option */ 
            );
            /**Returns  the number of sub elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfSubElements
            (
            );
            /**Sets  the number of sub elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNumberOfSubElements
            (
                int numberOfSubElements /** numberofsubelements */ 
            );
            /**Returns  the length of sub elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LengthOfSubElements
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
