#ifndef NXOpen_FEATURES_SHEETMETAL_NESTINGCONFIGURATIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_NESTINGCONFIGURATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_NestingConfigurationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class NestingConfigurationBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class _NestingConfigurationBuilderBuilder;
            class NestingConfigurationBuilderImpl;

            /// \cond NX_NO_DOC 
            /** Represents a Sheetmetal Nesting Configuration class. 
             <br>  Created in NX1953.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  NestingConfigurationBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
            {
                /** This enum defines the Anchor Locations
                        */

                /// \cond NX_NO_DOC 
                public: enum AnchorLocations
                {
                    AnchorLocationsBottomLeft/** bottom left */ ,
                    AnchorLocationsBottomRight/** bottom right */ ,
                    AnchorLocationsTopLeft/** top left */ ,
                    AnchorLocationsTopRight/** top right */ 
                };


                /// \endcond 
                private: NestingConfigurationBuilderImpl * m_nestingconfigurationbuilder_impl;
                private: friend class  _NestingConfigurationBuilderBuilder;
                protected: NestingConfigurationBuilder();
                public: ~NestingConfigurationBuilder();

                /// \cond NX_NO_DOC 
                /**Returns  the nest time. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: int NestTime
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the nest time. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetNestTime
                (
                    int nestTime /** nesttime */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the anchor location. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::SheetMetal::NestingConfigurationBuilder::AnchorLocations AnchorLocation
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the anchor location. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetAnchorLocation
                (
                    NXOpen::Features::SheetMetal::NestingConfigurationBuilder::AnchorLocations anchorLocation /** anchorlocation */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the boundary width. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: double BoundaryWidth
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the boundary width. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetBoundaryWidth
                (
                    double boundaryWidth /** boundarywidth */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the part spacing. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: double PartSpacing
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the part spacing. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetPartSpacing
                (
                    double partSpacing /** partspacing */ 
                );

                /// \endcond 
                /** Validate whether the inputs to the component are sufficient for 
                            commit to be called.  If the component is not in a state to commit
                            then an exception is thrown.  For example, if the component requires
                            you to set some property, this method will throw an exception if
                            you haven't set it.  This method throws a not yet implemented
                            NXException for some components.
                         @return  Was self validation successful 
                 <br>  Created in NX3.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual bool Validate
                (
                );
            };

            /// \endcond 
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
