#ifndef NXOpen_DRAWINGS_SECTIONLINESTYLEBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_SECTIONLINESTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_SectionLineStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Drawings_SectionLineStyleBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class SectionLineStyleBuilder;
    }
    class Builder;
    class NXColor;
    class SelectTaggedObject;
    namespace Drawings
    {
        class _SectionLineStyleBuilderBuilder;
        class SectionLineStyleBuilderImpl;
        /** Represents a Drawings.SectionLineStyleBuiler.
                The SectionLineStyleBuilder is used to specify section line style.
             <br> To create a new instance of this class, use @link Drawings::SectionLineCollection::CreateSectionLineStyleBuilder  Drawings::SectionLineCollection::CreateSectionLineStyleBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  SectionLineStyleBuilder : public Builder
        {
            /**  This enum represents arrowhead style type.
                    */
            public: enum ArrowheadStyleType
            {
                ArrowheadStyleTypeOpen/** open */ ,
                ArrowheadStyleTypeClosed/** closed */ ,
                ArrowheadStyleTypeFilled/** filled */ 
            };

            /**  This enum represents section line standard style type.
                    */
            public: enum StandardStyle
            {
                StandardStyleAnsiStandard/** ansi standard */ ,
                StandardStyleIsoStandard/** iso standard */ ,
                StandardStyleIso128Standard/** iso128standard */ ,
                StandardStyleJisStandard/** jis standard */ ,
                StandardStyleGbStandard/** gb standard */ ,
                StandardStyleEskdStandard/** eskd standard */ 
            };

            /**  This enum represents section line font style type.
                    */
            public: enum FontStyle
            {
                FontStyleNone/** none */ ,
                FontStyleSolid/** solid */ ,
                FontStyleDashed/** dashed */ ,
                FontStylePhantom/** phantom */ ,
                FontStyleCenterline/** centerline */ ,
                FontStyleDotted/** dotted */ ,
                FontStyleLongDashed/** long dashed */ ,
                FontStyleDottedDashed/** dotted dashed */ 
            };

            /**  This enum represents section line width style type.
                    */
            public: enum WidthStyle
            {
                WidthStyleThin/** Thin */,
                WidthStyleNormal/** Normal */,
                WidthStyleThick/** Thick  */,
                WidthStyleThicknessOne = 5/** Width One */,
                WidthStyleThicknessTwo/** Width Two */,
                WidthStyleThicknessThree/** Width Three */,
                WidthStyleThicknessFour/** Width Four */,
                WidthStyleThicknessFive/** Width Five */,
                WidthStyleThicknessSix/** Width Six */,
                WidthStyleThicknessSeven/** Width Seven */,
                WidthStyleThicknessEight/** Width Eight */,
                WidthStyleThicknessNine/** Width Nine */
            };

            /**  This enum represents section line label location for ISO128 section lines.
                    */
            public: enum LabelLocationStyle
            {
                LabelLocationStyleOnArrow/** on arrow */ ,
                LabelLocationStyleOnEnd/** on end */ 
            };

            /**  This enum represents whether or not to create a view for the section line.
                    */
            public: enum CreateSectionLineType
            {
                CreateSectionLineTypeWithView/** with view */ ,
                CreateSectionLineTypeWithoutView/** without view */ 
            };

            private: SectionLineStyleBuilderImpl * m_sectionlinestylebuilder_impl;
            private: friend class  _SectionLineStyleBuilderBuilder;
            protected: SectionLineStyleBuilder();
            public: ~SectionLineStyleBuilder();
            /**Returns  the display label 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayLabel
            (
            );
            /**Sets  the display label 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplayLabel
            (
                bool displayLabel /** displaylabel */ 
            );
            /**Returns  the letter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Letter
            (
            );
            /**Sets  the letter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLetter
            (
                const NXString & letter /** letter */ 
            );
            /**Sets  the letter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetLetter
            (
                const char * letter /** letter */ 
            );
            /**Returns  the label location 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SectionLineStyleBuilder::LabelLocationStyle LabelLocation
            (
            );
            /**Sets  the label location 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLabelLocation
            (
                NXOpen::Drawings::SectionLineStyleBuilder::LabelLocationStyle labelLocation /** label location */ 
            );
            /**Returns  the display jisrotation letter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayJisrotationLetter
            (
            );
            /**Sets  the display jisrotation letter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplayJisrotationLetter
            (
                bool displayJISRotationLetter /** displayjisrotationletter */ 
            );
            /**Returns  the selected note for jisrotation letter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObject * SelectLetter
            (
            );
            /**Returns  the arrowhead style 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SectionLineStyleBuilder::ArrowheadStyleType ArrowheadStyle
            (
            );
            /**Sets  the arrowhead style 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowheadStyle
            (
                NXOpen::Drawings::SectionLineStyleBuilder::ArrowheadStyleType arrowheadStyle /** arrowheadstyle */ 
            );
            /**Returns  the arrowhead length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowheadLength
            (
            );
            /**Sets  the arrowhead length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowheadLength
            (
                double arrowheadLength /** arrowheadlength */ 
            );
            /**Returns  the arrow length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowLength
            (
            );
            /**Sets  the arrow length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowLength
            (
                double arrowLength /** arrowlength */ 
            );
            /**Returns  the arrowhead angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowheadAngle
            (
            );
            /**Sets  the arrowhead angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowheadAngle
            (
                double arrowheadAngle /** arrowheadangle */ 
            );
            /**Returns  the border to arrow distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double BorderToArrowDistance
            (
            );
            /**Sets  the border to arrow distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetBorderToArrowDistance
            (
                double borderToArrowDistance /** bordertoarrowdistance */ 
            );
            /**Returns  the stub length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double StubLength
            (
            );
            /**Sets  the stub length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetStubLength
            (
                double stubLength /** stublength */ 
            );
            /**Returns  the line length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double LineLength
            (
            );
            /**Sets  the line length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLineLength
            (
                double lineLength /** linelength */ 
            );
            /**Returns  the use offset 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseOffset
            (
            );
            /**Sets  the use offset 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetUseOffset
            (
                bool useOffset /** useoffset */ 
            );
            /**Returns  the offset 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double Offset
            (
            );
            /**Sets  the offset 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOffset
            (
                double offset /** offset */ 
            );
            /**Returns  the standard 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SectionLineStyleBuilder::StandardStyle Standard
            (
            );
            /**Sets  the standard 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetStandard
            (
                NXOpen::Drawings::SectionLineStyleBuilder::StandardStyle standard /** standard */ 
            );
            /** Returns the color  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * GetColor
            (
            );
            /** Sets the color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SectionLineStyleBuilder::FontStyle Font
            (
            );
            /**Sets  the font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFont
            (
                NXOpen::Drawings::SectionLineStyleBuilder::FontStyle font /** font */ 
            );
            /**Returns  the width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SectionLineStyleBuilder::WidthStyle Width
            (
            );
            /**Sets  the width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetWidth
            (
                NXOpen::Drawings::SectionLineStyleBuilder::WidthStyle width /** width */ 
            );
            /**Returns  a value that indicates whether or not to create a view for the section line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SectionLineStyleBuilder::CreateSectionLineType CreateSectionLine
            (
            );
            /**Sets  a value that indicates whether or not to create a view for the section line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCreateSectionLine
            (
                NXOpen::Drawings::SectionLineStyleBuilder::CreateSectionLineType createSectionLine /** createsectionline */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
