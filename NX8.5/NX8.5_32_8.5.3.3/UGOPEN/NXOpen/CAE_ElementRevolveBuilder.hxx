#ifndef NXOpen_CAE_ELEMENTREVOLVEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_ELEMENTREVOLVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ElementRevolveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ElementRevolveBuilder.hxx>
#include <NXOpen/CAE_ElementTypeBuilder.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ElementRevolveBuilder;
    }
    class Axis;
    class Builder;
    namespace CAE
    {
        class ElementTypeBuilder;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class Expression;
    namespace CAE
    {
        class _ElementRevolveBuilderBuilder;
        class ElementRevolveBuilderImpl;
        /**
            Represents a @link CAE::ElementRevolveBuilder CAE::ElementRevolveBuilder@endlink 
             <br> To create a new instance of this class, use @link CAE::NodeElementManager::CreateElementRevolveBuilder  CAE::NodeElementManager::CreateElementRevolveBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ElementRevolveBuilder : public Builder
        {
            /** Dimension of element to be created */
            public: enum ElemDimType
            {
                ElemDimTypeBeam/** beam*/,
                ElemDimTypeShell/** shell*/
            };

            /**  Option to create new mesh or add to existing mesh */
            public: enum NewMeshType
            {
                NewMeshTypeCreate/** create new mesh*/,
                NewMeshTypeExisting/** add to existing mesh*/
            };

            /** the angle type - total or per copy*/
            public: enum AngleType
            {
                AngleTypePerCopy/** angle per copy*/,
                AngleTypeTotal/** total angle*/
            };

            private: ElementRevolveBuilderImpl * m_elementrevolvebuilder_impl;
            private: friend class  _ElementRevolveBuilderBuilder;
            protected: ElementRevolveBuilder();
            public: ~ElementRevolveBuilder();
            /**Returns  the elem dimension option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementRevolveBuilder::ElemDimType ElementDimensionOption
            (
            );
            /**Sets  the elem dimension option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementDimensionOption
            (
                NXOpen::CAE::ElementRevolveBuilder::ElemDimType elementDimensionOption /** elementdimensionoption */ 
            );
            /**Returns  the element type builder.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ElementTypeBuilder * ElementType
            (
            );
            /**Returns  the element neutral name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NeutralName
            (
            );
            /**Sets  the element neutral name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNeutralName
            (
                const NXString & neutralName /** neutralname */ 
            );
            /**Sets  the element neutral name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetNeutralName
            (
                const char * neutralName /** neutralname */ 
            );
            /**Returns  the mesh collector name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CollectorName
            (
            );
            /**Sets  the mesh collector name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCollectorName
            (
                const NXString & collectorName /** collectorname */ 
            );
            /**Sets  the mesh collector name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetCollectorName
            (
                const char * collectorName /** collectorname */ 
            );
            /**Returns  the new mesh option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementRevolveBuilder::NewMeshType NewMeshOption
            (
            );
            /**Sets  the new mesh option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNewMeshOption
            (
                NXOpen::CAE::ElementRevolveBuilder::NewMeshType newMeshOption /** newmeshoption */ 
            );
            /**Returns  the mesh name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MeshName
            (
            );
            /**Sets  the mesh name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMeshName
            (
                const NXString & meshName /** meshname */ 
            );
            /**Sets  the mesh name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetMeshName
            (
                const char * meshName /** meshname */ 
            );
            /**Returns  the selected elements to be revolved 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * Elements
            (
            );
            /**Returns  the number of copies 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfCopy
            (
            );
            /**Sets  the number of copies 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNumberOfCopy
            (
                int numberOfCopy /** numberofcopy */ 
            );
            /**Returns  the axis of revolution 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * Axis
            (
            );
            /**Sets  the axis of revolution 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetAxis
            (
                NXOpen::Axis * axis /** axis */ 
            );
            /**Returns  the angle option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementRevolveBuilder::AngleType AngleOption
            (
            );
            /**Sets  the angle option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetAngleOption
            (
                NXOpen::CAE::ElementRevolveBuilder::AngleType angleOption /** angleoption */ 
            );
            /**Returns  the angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns  the label 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Label
            (
            );
            /**Sets  the label 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabel
            (
                int label /** label */ 
            );
            /**Returns  the increment 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Increment
            (
            );
            /**Sets  the increment 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetIncrement
            (
                int increment /** increment */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
