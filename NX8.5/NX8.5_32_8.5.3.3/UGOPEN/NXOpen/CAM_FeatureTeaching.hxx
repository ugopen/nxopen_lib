#ifndef NXOpen_CAM_FEATURETEACHING_HXX_INCLUDED
#define NXOpen_CAM_FEATURETEACHING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_FeatureTeaching.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_FeatureTeaching.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class FeatureTeaching;
    }
    class Builder;
    namespace CAM
    {
        class CAMFeature;
    }
    class DisplayableObject;
    namespace CAM
    {
        class _FeatureTeachingBuilder;
        class FeatureTeachingImpl;
        /** Represents a FeatureTeaching Builder  <br> To create a new instance of this class, use @link CAM::CAMSetup::CreateFeatureTeaching  CAM::CAMSetup::CreateFeatureTeaching @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  FeatureTeaching : public Builder
        {
            /** Rule Option types */
            public: enum RuleMatchOptionType
            {
                RuleMatchOptionTypePmiConds = 1/** pmi conds */ ,
                RuleMatchOptionTypeGeomAttrs/** geom attrs */ ,
                RuleMatchOptionTypeGeomNames = 4/** geom names */ ,
                RuleMatchOptionTypeFaceColors = 8/** face colors */ 
            };

            private: FeatureTeachingImpl * m_featureteaching_impl;
            private: friend class  _FeatureTeachingBuilder;
            protected: FeatureTeaching();
            public: ~FeatureTeaching();
            /**Sets  the rule options 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetRuleMatchOptions
            (
                NXOpen::CAM::FeatureTeaching::RuleMatchOptionType options /** options */ 
            );
            /**Returns  the rule options 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: NXOpen::CAM::FeatureTeaching::RuleMatchOptionType RuleMatchOptions
            (
            );
            /** Gets the selected rule path  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: NXString GetRulePath
            (
            );
            /** Sets the selected rule path 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetRulePath
            (
                const NXString & path /** path */ 
            );
            /** Sets the selected rule path 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void SetRulePath
            (
                const char * path /** path */ 
            );
            /** Gets the selected faces  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: std::vector<NXOpen::DisplayableObject *> GetFaces
            (
            );
            /** Sets the selected faces 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetFaces
            (
                const std::vector<NXOpen::DisplayableObject *> & aFaces /** a faces */ 
            );
            /** Adds a new feature type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void AddNewFeatureType
            (
                const NXString & name /** name */ ,
                const NXString & superName /** super name */ 
            );
            /** Adds a new feature type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void AddNewFeatureType
            (
                const char * name /** name */ ,
                const char * superName /** super name */ 
            );
            /** Removes a feature type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void RemoveFeatureType
            (
                const NXString & name /** name */ 
            );
            /** Removes a feature type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void RemoveFeatureType
            (
                const char * name /** name */ 
            );
            /** Renames a feature type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void RenameFeatureType
            (
                const NXString & name /** name */ ,
                const NXString & newName /** new name */ 
            );
            /** Renames a feature type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void RenameFeatureType
            (
                const char * name /** name */ ,
                const char * newName /** new name */ 
            );
            /** Adds a new rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void AddNewRule
            (
                const NXString & name /** name */ ,
                const NXString & libraryPath /** library path */ ,
                const NXString & featureTypeName /** feature type name */ 
            );
            /** Adds a new rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void AddNewRule
            (
                const char * name /** name */ ,
                const char * libraryPath /** library path */ ,
                const char * featureTypeName /** feature type name */ 
            );
            /** Removes a rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void RemoveRule
            (
                const NXString & path /** path */ 
            );
            /** Removes a rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void RemoveRule
            (
                const char * path /** path */ 
            );
            /** Renames a rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void RenameRule
            (
                const NXString & path /** path */ ,
                const NXString & newName /** new name */ 
            );
            /** Renames a rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void RenameRule
            (
                const char * path /** path */ ,
                const char * newName /** new name */ 
            );
            /** Teaches the new feature 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void Teach
            (
            );
            /** Tests the new feature  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: std::vector<NXOpen::CAM::CAMFeature *> Test
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
