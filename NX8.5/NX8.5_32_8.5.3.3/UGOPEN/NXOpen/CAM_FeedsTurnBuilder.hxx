#ifndef NXOpen_CAM_FEEDSTURNBUILDER_HXX_INCLUDED
#define NXOpen_CAM_FEEDSTURNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_FeedsTurnBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class FeedsTurnBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableFeedBuilder;
    }
    namespace CAM
    {
        class InheritableFeedModeBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    namespace CAM
    {
        class InheritableTextBuilder;
    }
    namespace CAM
    {
        class _FeedsTurnBuilderBuilder;
        class FeedsTurnBuilderImpl;
        /** Represents a turning feeds Builder 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  FeedsTurnBuilder : public TaggedObject
        {
            private: FeedsTurnBuilderImpl * m_feedsturnbuilder_impl;
            private: friend class  _FeedsTurnBuilderBuilder;
            protected: FeedsTurnBuilder();
            public: ~FeedsTurnBuilder();
            /**Returns  the engage spindle speed builder (inheritable Double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * EngageSpindleSpeedBuilder
            (
            );
            /**Returns  the engage spindle speed toggle builder (inheritable Int) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * EngageSpindleSpeedToggleBuilder
            (
            );
            /**Returns  the surface_speed builder (inheritable Double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * SurfaceSpeedBuilder
            (
            );
            /**Returns  the feed_per_tooth builder (inheritable Double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * FeedPerToothBuilder
            (
            );
            /**Returns  the spindle_rpm builder (inheritable Double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * SpindleRpmBuilder
            (
            );
            /**Returns  the spindle_mode builder (inheritable Int) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * SpindleModeBuilder
            (
            );
            /**Returns  the tool_direction builder (inheritable Int) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * ToolDirectionBuilder
            (
            );
            /**Returns  the spindle direction builder (inheritable Int) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * SpindleDirectionBuilder
            (
            );
            /**Returns  the spindle_range builder (inheritable Text) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableTextBuilder * SpindleRangeBuilder
            (
            );
            /**Returns  the spindle_text builder (inheritable Text) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableTextBuilder * SpindleTextBuilder
            (
            );
            /**Returns  the spindle_maximum_rpm builder (inheritable Double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * SpindleMaximumRpmBuilder
            (
            );
            /**Returns  the spindle_preset_rpm builder (inheritable Double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * SpindlePresetRpmBuilder
            (
            );
            /**Returns  the feed_max_approach_length builder (inheritable Double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * FeedMaxApproachLengthBuilder
            (
            );
            /**Returns  the feed_min_accelerate_decelerate_length builder (inheritable Double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * FeedMinAccelerateDecelerateLengthBuilder
            (
            );
            /**Returns  the feed_max_approach_length_flag builder (inheritable Int) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * FeedMaxApproachLengthFlagBuilder
            (
            );
            /**Returns  the feed_min_accelerate_decelerate_length_flag builder (inheritable Int) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * FeedMinAccelerateDecelerateLengthFlagBuilder
            (
            );
            /**Returns  the spindle_direction_automatic builder (inheritable Int) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * SpindleDirectionAutomaticBuilder
            (
            );
            /**Returns  the spindle_rpm_toggle builder (inheritable Int) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * SpindleRpmToggleBuilder
            (
            );
            /**Returns  the spindle_preset_rpm_toggle builder (inheritable Int) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * SpindlePresetRpmToggleBuilder
            (
            );
            /**Returns  the feed_rapid builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedRapidBuilder
            (
            );
            /**Returns  the feed_approach builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedApproachBuilder
            (
            );
            /**Returns  the feed_engage builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedEngageBuilder
            (
            );
            /**Returns  the feed_first_cut builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedFirstCutBuilder
            (
            );
            /**Returns  the feed_stepover builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedStepoverBuilder
            (
            );
            /**Returns  the feed_cut builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedCutBuilder
            (
            );
            /**Returns  the feed_traversal builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedTraversalBuilder
            (
            );
            /**Returns  the feed_retract builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedRetractBuilder
            (
            );
            /**Returns  the feed_departure builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedDepartureBuilder
            (
            );
            /**Returns  the feed_return builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedReturnBuilder
            (
            );
            /**Returns  the feed_side_cut builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedSideCutBuilder
            (
            );
            /**Returns  the feedrate_clear builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateClearBuilder
            (
            );
            /**Returns  the feedrate_accelerate builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateAccelerateBuilder
            (
            );
            /**Returns  the feedrate_accelerate_length builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateAccelerateLengthBuilder
            (
            );
            /**Returns  the feedrate_decelerate builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateDecelerateBuilder
            (
            );
            /**Returns  the feedrate_decelerate_length builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateDecelerateLengthBuilder
            (
            );
            /**Returns  the feedrate_ramp_in builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateRampInBuilder
            (
            );
            /**Returns  the feedrate_ramp_out builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateRampOutBuilder
            (
            );
            /**Returns  the feedrate_ramp_level builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateRampLevelBuilder
            (
            );
            /**Returns  the feedrate_profile_cut builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateProfileCutBuilder
            (
            );
            /**Returns  the feedrate_linear builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateLinearBuilder
            (
            );
            /**Returns  the feedrate_face builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateFaceBuilder
            (
            );
            /**Returns  the feedrate_diameter builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateDiameterBuilder
            (
            );
            /**Returns  the feedrate_circ_cw builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateCircCwBuilder
            (
            );
            /**Returns  the feedrate_circ_ccw builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateCircCcwBuilder
            (
            );
            /**Returns  the feedrate_cleanup_cut builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateCleanupCutBuilder
            (
            );
            /**Returns  the feedrate_cleanup_linear builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateCleanupLinearBuilder
            (
            );
            /**Returns  the feedrate_cleanup_face builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateCleanupFaceBuilder
            (
            );
            /**Returns  the feedrate_cleanup_diameter builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateCleanupDiameterBuilder
            (
            );
            /**Returns  the feedrate_cleanup_circ_cw builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateCleanupCircCwBuilder
            (
            );
            /**Returns  the feedrate_cleanup_circ_ccw builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateCleanupCircCcwBuilder
            (
            );
            /**Returns  the feedrate_finish_ramp_in builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateFinishRampInBuilder
            (
            );
            /**Returns  the feedrate_finish_ramp_out builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateFinishRampOutBuilder
            (
            );
            /**Returns  the feedrate_finish_ramp_level builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateFinishRampLevelBuilder
            (
            );
            /**Returns  the feedrate_finish_accelerate builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateFinishAccelerateBuilder
            (
            );
            /**Returns  the feedrate_finish_accelerate_length builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateFinishAccelerateLengthBuilder
            (
            );
            /**Returns  the feedrate_finish_decelerate builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateFinishDecelerateBuilder
            (
            );
            /**Returns  the feedrate_finish_decelerate_length builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateFinishDecelerateLengthBuilder
            (
            );
            /**Returns  the feedrate_rough_last_cut builder (inheritable Feed) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * FeedrateRoughLastCutBuilder
            (
            );
            /**Returns  the feedrate_rough_last_cut_for_entire_pass_tog builder (inheritable Int) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * FeedrateRoughLastCutForEntirePassTogBuilder
            (
            );
            /**Returns  the feed rapid output builder (inheritable Enum) 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedModeBuilder * FeedRapidOutput
            (
            );
            /**Returns  the round feed builder (inheritable Feed) 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * RoundFeed
            (
            );
            /**Returns  the chamfer feed builder (inheritable Feed) 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableFeedBuilder * ChamferFeed
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
