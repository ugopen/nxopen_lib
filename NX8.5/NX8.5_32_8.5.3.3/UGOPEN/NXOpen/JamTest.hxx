#ifndef NXOpen_JAMTEST_HXX_INCLUDED
#define NXOpen_JAMTEST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     JamTest.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/JamTestNamespace_OMPPTagged.hxx>
#include <NXOpen/JamTestNamespace_Subspace_OMPPTagged2.hxx>
#include <NXOpen/JamTestNamespace_Subspace_Tagged2.hxx>
#include <NXOpen/JamTestNamespace_Subspace_TransientObj.hxx>
#include <NXOpen/JamTestPointer.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopenjamtestcpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class JamTest;
    class IOMName;
    class JamNXColor;
    namespace JamTestNamespace
    {
        class OMPPTagged;
    }
    namespace JamTestNamespace
    {
        namespace Subspace
        {
            class OMPPTagged2;
        }
    }
    namespace JamTestNamespace
    {
        namespace Subspace
        {
            class Tagged2;
        }
    }
    namespace JamTestNamespace
    {
        namespace Subspace
        {
            class TransientObj;
        }
    }
    namespace JamTestNamespace
    {
        class Tagged;
    }
    class JamTestPointer;
    class TaggedObject;
    class JamTestImpl;
    /** Test class with methods involving various different parameter types to test the parameter marshalling code 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENJAMTESTCPPEXPORT  JamTest : public TransientObject
    {
        /** simple test enum */
        public: enum Enum1
        {
            Enum1Val1/** val1 */ ,
            Enum1Val2/** val2 */ 
        };

        /** simple test enum with special first value */
        public: enum Enum2
        {
            Enum2Val1 = 1/** val1 */ ,
            Enum2Val2/** val2 */ 
        };

        /** simple test enum with gap in member values */
        public: enum Enum3
        {
            Enum3Val1/** val1 */ ,
            Enum3Val2 = 2/** val2 */ 
        };

         /** simple test struct - containing a string */
        public:
        struct  Struct1
        {
            public: /** i */ int I;
            public: /** d */ double D;
            public: /** s */ NXString S;
            public: /** t */ NXString T;
            public: Struct1() :
                I(),
                D(),
                S(),
                T()
            {
            }
            /** Constructor for the Struct1 struct. */ 
            public: Struct1(int iInitial /** i */ , 
                    double dInitial /** d */ , 
                    const NXString &sInitial /** s */ , 
                    const NXString &tInitial /** t */ ) :
                I(iInitial),
                D(dInitial),
                S(sInitial),
                T(tInitial)
            {
            }
        };

         /** test struct */
        public:
        struct  Struct2
        {
            public: /** x */ double X;
            public: /** y */ double Y;
            public: Struct2() :
                X(),
                Y()
            {
            }
            /** Constructor for the Struct2 struct. */ 
            public: Struct2(double xInitial /** x */ , 
                    double yInitial /** y */ ) :
                X(xInitial),
                Y(yInitial)
            {
            }
        };

         /** test struct - contains nested struct and logical and enum fields */
        public:
        struct  Struct3
        {
            public: /** flag */ bool Flag;
            public: /** i */ int I;
            public: /** s1 */ NXOpen::JamTest::Struct1 S1;
            public: /** s */ NXOpen::JamTest::Struct2 S;
            public: /** e */ NXOpen::JamTest::Enum3 E;
            public: Struct3() :
                Flag(),
                I(),
                S1(),
                S(),
                E((NXOpen::JamTest::Enum3)0)
            {
            }
            /** Constructor for the Struct3 struct. */ 
            public: Struct3(bool flagInitial /** flag */ , 
                    int iInitial /** i */ , 
                    const NXOpen::JamTest::Struct1 &s1Initial /** s1 */ , 
                    const NXOpen::JamTest::Struct2 &sInitial /** s */ , 
                    NXOpen::JamTest::Enum3 eInitial /** e */ ) :
                Flag(flagInitial),
                I(iInitial),
                S1(s1Initial),
                S(sInitial),
                E(eInitial)
            {
            }
        };

         /** test struct - contains multiply nested structs with logical, int, and double fields */
        public:
        struct  Struct4
        {
            public: /** status string */ NXString StatusString;
            public: /** third struct */ NXOpen::JamTest::Struct3 ThirdStruct;
            public: /** first struct */ NXOpen::JamTest::Struct1 FirstStruct;
            public: Struct4() :
                StatusString(),
                ThirdStruct(),
                FirstStruct()
            {
            }
            /** Constructor for the Struct4 struct. */ 
            public: Struct4(const NXString &statusStringInitial /** status string */ , 
                    const NXOpen::JamTest::Struct3 &thirdStructInitial /** third struct */ , 
                    const NXOpen::JamTest::Struct1 &firstStructInitial /** first struct */ ) :
                StatusString(statusStringInitial),
                ThirdStruct(thirdStructInitial),
                FirstStruct(firstStructInitial)
            {
            }
        };

        public: /** Test callback for simple callback function 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<int, int> TestCallback;
        public: /** Callback function definition for a void function taking no arguments. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback0<void> TestCallback1;
        public: /** Callback function definition for a function taking a string and an OM TaggedObject. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback2<double, NXString, NXOpen::TaggedObject *> TestCallback2;
        public: /** Callback function definition for a function taking a boolean, double and enum
                arguments. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback3<bool, bool, double, NXOpen::JamTest::Enum1> TestCallback3;
        public: /** Callback function definition for a function returning an enum. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback0<NXOpen::JamTest::Enum1> TestCallback4;
        public: /** Callback function definition for a function taking a string argument and
                returning a different string. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<NXString, NXString> TestCallback5;
         /** Struct used to test what happens when there are types from 
            a deeply nested namespace */
        public:
        struct  StructWithTypesFromNestedNamespace
        {
            public: /** type */ NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType Type;
            public: /** data */ NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 Data;
            public: /** obj */ NXOpen::JamTestNamespace::Subspace::Tagged2 * Obj;
            public: StructWithTypesFromNestedNamespace() :
                Type((NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType)0),
                Data(),
                Obj()
            {
            }
            /** Constructor for the StructWithTypesFromNestedNamespace struct. */ 
            public: StructWithTypesFromNestedNamespace(NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType typeInitial /** type */ , 
                    const NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 &dataInitial /** data */ , 
                    NXOpen::JamTestNamespace::Subspace::Tagged2 * objInitial /** obj */ ) :
                Type(typeInitial),
                Data(dataInitial),
                Obj(objInitial)
            {
            }
        };

         /** Struct used to test what happens when there are types from 
            a deeply nested namespace */
        public:
        struct  StructWithTypesFromNestedNamespaceOmpp
        {
            public: /** type */ NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType Type;
            public: /** data */ NXOpen::JamTestNamespace::Subspace::OMPPTagged2::Struct1 Data;
            public: /** obj */ NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * Obj;
            public: StructWithTypesFromNestedNamespaceOmpp() :
                Type((NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType)0),
                Data(),
                Obj()
            {
            }
            /** Constructor for the StructWithTypesFromNestedNamespaceOmpp struct. */ 
            public: StructWithTypesFromNestedNamespaceOmpp(NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType typeInitial /** type */ , 
                    const NXOpen::JamTestNamespace::Subspace::OMPPTagged2::Struct1 &dataInitial /** data */ , 
                    NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * objInitial /** obj */ ) :
                Type(typeInitial),
                Data(dataInitial),
                Obj(objInitial)
            {
            }
        };

        public: /** Test callback for callback function using transient object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<int, NXOpen::JamTestNamespace::Subspace::TransientObj *> TestCallbackTransient;
        public: enum { Constant = 42 };
        private: JamTestImpl * m_jamtest_impl;
        /// \cond NX_NO_DOC 
        public: explicit JamTest(void *ptr);
        /// \endcond 
        public: JamTest();
        /** 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~JamTest();
        /** Writes a string to the log file 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void WriteToLog
        (
            const NXString & s /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Writes a string to the log file 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void WriteToLog
        (
            const char * s /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void NoArgs
        (
        );
        /** Test input of simple data types 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InSimple
        (
            int i1 /** i1 */ ,
            double d1 /** d1 */ ,
            const NXString & s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool l1 /** l1 */ 
        );
        /** Test input of simple data types 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void InSimple
        (
            int i1 /** i1 */ ,
            double d1 /** d1 */ ,
            const char * s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool l1 /** l1 */ 
        );
        /** Test simple output parameter types 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutSimple
        (
            int* i1 /** i1 */ ,
            double* d1 /** d1 */ ,
            bool* l1 /** l1 */ 
        );
        /** Test integer return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: int RetInt
        (
            int i1 /** i1 */ 
        );
        /** Test double return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: double RetDouble
        (
            double d1 /** d1 */ 
        );
        /** Test boolean return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool RetLogical
        (
            bool l1 /** l1 */ 
        );
        /** Test enum return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTest::Enum2 RetEnum
        (
            NXOpen::JamTest::Enum1 e1 /** e1 */ 
        );
        /** Test enum out value  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTest::Enum2 OutEnum
        (
            NXOpen::JamTest::Enum1 e1 /** e1 */ ,
            bool* b1 /** b1 */ 
        );
        /** Test enum out value 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void OutEnum2
        (
            NXOpen::JamTest::Enum1 e1 /** e1 */ ,
            bool* b1 /** b1 */ ,
            NXOpen::JamTest::Enum2* e2 /** e2 */ 
        );
        /** Test statically allocated string return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString RetString
        (
            const NXString & s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Test statically allocated string return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXString RetString
        (
            const char * s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Test dynamically allocated string return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString RetStringFree
        (
            const NXString & s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Test dynamically allocated string return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXString RetStringFree
        (
            const char * s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Test text return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString RetText
        (
            const NXString & s1 /** s1 */ 
        );
        /** Test text return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXString RetText
        (
            const char * s1 /** s1 */ 
        );
        /** Test input arrays with independent lengths 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InArrays
        (
            const std::vector<int> & i1 /** i1 */ ,
            const std::vector<double> & d1 /** d1 */ ,
            const std::vector<bool> & l1 /** l1 */ 
        );
        /** Test input arrays with linked lengths 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InArrays2
        (
            const std::vector<int> & i1 /** i1 */ ,
            const std::vector<double> & d1 /** d1 */ ,
            const std::vector<bool> & l1 /** l1 */ 
        );
        /** Test input string array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStringArray
        (
            std::vector<NXString> & s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Test input string array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStringArrays
        (
            std::vector<NXString> & s1 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<NXString> & s2 /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Test output string array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutStringArray
        (
            std::vector<NXString> & s1 /** s1 */ 
        );
        /** Test input enum array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InEnumArray
        (
            const std::vector<NXOpen::JamTest::Enum1> & e /** e */ 
        );
        /** Test output enum array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutEnumArray
        (
            int c /** c */ ,
            std::vector<NXOpen::JamTest::Enum3> & e /** e */ 
        );
        /** Test output enum array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutEnumArray2
        (
            std::vector<NXOpen::JamTest::Enum3> & e /** e */ 
        );
        /** Test output enum array 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void OutArrayBadLength
        (
            std::vector<int> & e /** e */ 
        );
        /** Test output enum array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutEnumArray3
        (
            std::vector<NXOpen::JamTest::Enum3> & e /** e */ ,
            bool* b1 /** b1 */ 
        );
        /** Test output enum array  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTest::Enum3> OutEnumArray4
        (
            bool* b1 /** b1 */ 
        );
        /** Test input text array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InTextArray
        (
            std::vector<NXString> & s1 /** s1 */ 
        );
        /** Test a simple output array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutArray
        (
            std::vector<int> & i1 /** i1 */ 
        );
        /** Test array return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<int> RetArray
        (
        );
        /** Test array output where length is an input parameter 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutArray2
        (
            int c1 /** c1 */ ,
            std::vector<int> & i1 /** i1 */ 
        );
        /** Test linked array output values 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutArrays
        (
            std::vector<int> & i1 /** i1 */ ,
            std::vector<double> & d1 /** d1 */ ,
            std::vector<bool> & l1 /** l1 */ 
        );
        /**Returns  the prime color 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamNXColor * PrimeColor
        (
        );
        /**Sets  the prime color 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPrimeColor
        (
            NXOpen::JamNXColor * s1 /** s1 */ 
        );
        /** Test input of color 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InColor
        (
            double d1 /** d1 */ ,
            NXOpen::JamNXColor * s1 /** s1 */ 
        );
        /** Test output of color 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void OutColor
        (
            double* d1 /** d1 */ ,
            NXOpen::JamNXColor ** l1 /** l1 */ 
        );
        /** Test color return value  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamNXColor * RetColor
        (
            int i1 /** i1 */ 
        );
        /** Test input array of colors 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InColorArray
        (
            const std::vector<double> & d1 /** d1 */ ,
            const std::vector<NXOpen::JamNXColor *> & l1 /** l1 */ 
        );
        /** Test output color array 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void OutColorArray
        (
            std::vector<NXOpen::JamNXColor *> & s1 /** s1 */ 
        );
        /** Test color array return value  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamNXColor *> RetColorArray
        (
        );
        /** Test simple struct input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStruct2
        (
            const NXOpen::JamTest::Struct2 & s /** s */ 
        );
        /** Test simple struct output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutStruct2
        (
            NXOpen::JamTest::Struct2* s /** s */ 
        );
        /** Test simple struct input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStruct1
        (
            const NXOpen::JamTest::Struct1 & s /** s */ 
        );
        /** Test simple struct input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStruct3
        (
            const NXOpen::JamTest::Struct3 & s /** s */ 
        );
        /** Test simple struct output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutStruct3
        (
            NXOpen::JamTest::Struct3* s /** s */ 
        );
        /** Test struct 4  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXString TestStruct4
        (
            const NXString & statusIn /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXOpen::JamTest::Struct1 & struct1 /** struct1 */ ,
            const NXOpen::JamTest::Struct3 & struct3 /** struct3 */ ,
            NXOpen::JamTest::Struct4* struct4 /** struct4 */ ,
            bool* boolStatus /** bool status */ 
        );
        /** Test struct 4  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXString TestStruct4
        (
            const char * statusIn /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXOpen::JamTest::Struct1 & struct1 /** struct1 */ ,
            const NXOpen::JamTest::Struct3 & struct3 /** struct3 */ ,
            NXOpen::JamTest::Struct4* struct4 /** struct4 */ ,
            bool* boolStatus /** bool status */ 
        );
        /** Test array of struct input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStruct1Array
        (
            const std::vector<NXOpen::JamTest::Struct1> & s /** s */ 
        );
        /** Test array of struct input value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTest::Struct1> OutStruct1Array
        (
            const std::vector<NXOpen::JamTest::Struct1> & s /** s */ 
        );
        /** Test simple struct output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutStruct1
        (
            NXOpen::JamTest::Struct1* s /** s */ 
        );
        /** Test array of struct output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutStruct2Array
        (
            std::vector<NXOpen::JamTest::Struct2> & s /** s */ 
        );
        /** Test pointer wrapper output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutPointerObject
        (
            NXOpen::JamTestPointer ** object /** object */ 
        );
        /** Creates a tagged object  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::OMPPTagged * CreateOmppTaggedObject
        (
        );
        /** Test pointer wrapper output value where actual class varies
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutPointerSubclassObject
        (
            bool returnSubclass /** if true returns a JamTestPointerSubclass object else a JamTestPointer object */,
            NXOpen::JamTestPointer ** object /** object */ 
        );
        /** Test pointer wrapper input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InPointerObject
        (
            NXOpen::JamTestPointer * object /** object */ 
        );
        /** Test array of pointer wrapper output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutPointerObjectArray
        (
            std::vector<NXOpen::JamTestPointer *> & objects /** objects */ 
        );
        /** Test array of pointer wrapper input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InPointerObjectArray
        (
            const std::vector<NXOpen::JamTestPointer *> & object /** object */ 
        );
        /** Test handling of raised error 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void RaiseError
        (
            int errorCode /** error code */ 
        );
        /** Test handling of returned error code 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void ReturnError
        (
            int errorCode /** error code */ 
        );
        /** Test segmentation violation  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: int SegViolation
        (
        );
        /** Creates a tagged object  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Tagged * CreateTaggedObject
        (
        );
        /** Deletes a tagged object 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteTaggedObject
        (
            NXOpen::JamTestNamespace::Tagged * object /** object */ 
        );
        /** Deletes a tagged object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteOmppTaggedObject
        (
            NXOpen::JamTestNamespace::OMPPTagged * object /** object */ 
        );
        /** Prints a tagged object 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintObject
        (
            NXOpen::TaggedObject * object /** object */ 
        );
        /** Tests using a simple callback function. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InCallback
        (
            const NXOpen::JamTest::TestCallback&  cb /** cb */ 
        );
        /** Tests using a simple callback function with a member function. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InMemberCallback
        (
            const NXOpen::JamTest::TestCallback&  cb /** cb */ 
        );
        /** Tests using multiple callback functions in a single function. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InCallback2
        (
            const NXOpen::JamTest::TestCallback1&  cb1 /** cb1 */ ,
            const NXOpen::JamTest::TestCallback2&  cb2 /** cb2 */ 
        );
        /** Tests using multiple callback functions in a single function. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InCallback3
        (
            const NXOpen::JamTest::TestCallback3&  cb3 /** cb3 */ ,
            const NXOpen::JamTest::TestCallback4&  cb4 /** cb4 */ ,
            const NXOpen::JamTest::TestCallback5&  cb5 /** cb5 */ 
        );
        /** Tests a callback function and generates an error for negative testing. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InCallbackError
        (
            const NXOpen::JamTest::TestCallback1&  cb /** cb */ 
        );
        /** Tests a tagged object type from a deeply nested namespace.
                Creates a tagged object  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::Tagged2 * CreateTagged2Object
        (
            int id /** id */ ,
            NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType type /** type */ 
        );
        /** Tests a tagged object type from a deeply nested namespace.
                Creates a tagged object  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * CreateOmppTagged2Object
        (
            int id /** id */ ,
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType type /** type */ 
        );
        /** Tests a tagged object type and enum type from a deeply nested namespace.
                Tests returning OM tagged objects as the result in the JA C function.
                Creates a tagged object  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::Tagged2 * CreateTagged2Object2
        (
            int id /** id */ ,
            NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType type /** type */ 
        );
        /** Tests a tagged object type and enum type from a deeply nested namespace.
                Tests returning OM tagged objects as the result in the JA C function.
                Creates a tagged object  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * CreateOmppTagged2Object2
        (
            int id /** id */ ,
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType type /** type */ 
        );
        /** Tests a tagged object type and enum type from a deeply nested namespace.
                Tests passing an OM tagged object as an out parameter in the JA C function.
                Creates a tagged object 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateTagged2Object2
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType type /** type */ ,
            int id /** id */ ,
            int* theid /** theid */ ,
            NXOpen::JamTestNamespace::Subspace::Tagged2 ** result /** result */ 
        );
        /** Tests a tagged object type and enum type from a deeply nested namespace.
                Tests passing an OM tagged object as an out parameter in the JA C function.
                Creates a tagged object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateOmppTagged2Object2
        (
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType type /** type */ ,
            int id /** id */ ,
            int* theid /** theid */ ,
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2 ** result /** result */ 
        );
        /** Tests a tagged object type and struct type from a deeply nested namespace 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetStruct
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2 * obj /** obj */ ,
            const NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 & data /** data */ 
        );
        /** Tests a tagged object type and struct type from a deeply nested namespace 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetStruct
        (
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * obj /** obj */ ,
            const NXOpen::JamTestNamespace::Subspace::OMPPTagged2::Struct1 & data /** data */ 
        );
        /** Tests a tagged object type and struct type from a deeply nested namespace.
                Tests passing an OM tagged object as an input parameter in the JA C function  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 GetStruct
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2 * obj /** obj */ 
        );
        /** Tests a tagged object type and struct type from a deeply nested namespace.
                Tests passing an OM tagged object as an input parameter in the JA C function  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::OMPPTagged2::Struct1 GetStruct
        (
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * obj /** obj */ 
        );
        /** Tests a tagged object type and struct type from a deeply nested namespace.
                Tests passing an OM tagged object as an input parameter in the JA C function  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTest::StructWithTypesFromNestedNamespace GetData
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2 * obj /** obj */ 
        );
        /** Tests a tagged object type and struct type from a deeply nested namespace.
                Tests passing an OM tagged object as an input parameter in the JA C function  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTest::StructWithTypesFromNestedNamespaceOmpp GetOmppData
        (
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * obj /** obj */ 
        );
        /** Tests passing an OM tagged object as an input parameter array in the JA C function  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<int> GetIdsOfTagged2Objects
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2 *> & objs /** objs */ 
        );
        /** Tests passing an OM tagged object as an input parameter array in the JA C function  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<int> GetIdsOfOmppTagged2Objects
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::OMPPTagged2 *> & objs /** objs */ 
        );
        /** Tests passing an OM tagged object as an output parameter array in the JA C function 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateTagged2Objects
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType> & type /** type */ ,
            const std::vector<int> & ids /** ids */ ,
            int* numCreated /** num created */ ,
            std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2 *> & result /** result */ 
        );
        /** Tests passing an OM tagged object as an output parameter array in the JA C function 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateOmppTagged2Objects
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType> & type /** type */ ,
            const std::vector<int> & ids /** ids */ ,
            int* numCreated /** num created */ ,
            std::vector<NXOpen::JamTestNamespace::Subspace::OMPPTagged2 *> & result /** result */ 
        );
        /** Tests passing an OM tagged object as a return parameter array in the JA C function  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2 *> CreateTagged2Objects
        (
            const std::vector<int> & ids /** ids */ ,
            const std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType> & type /** type */ 
        );
        /** Tests passing an OM tagged object as a return parameter array in the JA C function  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTestNamespace::Subspace::OMPPTagged2 *> CreateOmppTagged2Objects
        (
            const std::vector<int> & ids /** ids */ ,
            const std::vector<NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType> & type /** type */ 
        );
        /** Tests a transient object type from a deeply nested namespace.
                Creates a transient object  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::TransientObj * CreateSubspaceTransientObj
        (
            NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType type /** type */ 
        );
        /** Tests a transient object type from a deeply nested namespace.
                Creates a transient object.
                Returns the object as a API_OUT parameter 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateSubspaceTransientObj
        (
            int dum /** dum */ ,
            NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType type /** type */ ,
            int* dumout /** dumout */ ,
            NXOpen::JamTestNamespace::Subspace::TransientObj ** result /** result */ 
        );
        /** Tests a transient object type from a deeply nested namespace.
                Creates an array of transient objects  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj *> CreateSubspaceTransientObjs
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType> & type /** type */ 
        );
        /** Tests a transient object type from a deeply nested namespace.
                Creates an array of transient objects.
                Returns the array as an API_OUT parameter. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateSubspaceTransientObjs
        (
            int dum /** dum */ ,
            const std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType> & type /** type */ ,
            int* dumout /** equals dum */,
            std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj *> & result /** result */ 
        );
        /**Returns  the number of objects of type JamTestNamespace.Subspace.TransientObj
            in existence.  Used to test the destruction of the transient objects 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: int NumberOfSubspaceTransientObjs
        (
        );
        /** Tests a transient object type and struct type from a deeply nested namespace 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetStruct
        (
            NXOpen::JamTestNamespace::Subspace::TransientObj * obj /** obj */ ,
            const NXOpen::JamTestNamespace::Subspace::TransientObj::Struct1 & data /** data */ 
        );
        /** Tests a transient object type and struct type from a deeply nested namespace  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::TransientObj::Struct1 GetStruct
        (
            NXOpen::JamTestNamespace::Subspace::TransientObj * obj /** obj */ 
        );
        /** Tests returning an array of structs from a deeply nested namespace  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj::Struct1> GetStructsOfSubspaceTransientObjs
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj *> & objs /** objs */ 
        );
        /** Tests using a transient object callback function. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InCallbackTransient
        (
            const NXOpen::JamTest::TestCallbackTransient&  cb /** cb */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
