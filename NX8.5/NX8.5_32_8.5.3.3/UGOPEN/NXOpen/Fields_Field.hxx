#ifndef NXOpen_FIELDS_FIELD_HXX_INCLUDED
#define NXOpen_FIELDS_FIELD_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_Field.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/Fields_Field.hxx>
#include <NXOpen/Fields_FieldEvaluator.hxx>
#include <NXOpen/Fields_FieldVariable.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class Field;
    }
    class BasePart;
    class DisplayableObject;
    namespace Fields
    {
        class FieldEvaluator;
    }
    namespace Fields
    {
        class FieldTable;
    }
    namespace Fields
    {
        class FieldVariable;
    }
    namespace Fields
    {
        class SpatialMap;
    }
    namespace Fields
    {
        class _FieldBuilder;
        class FieldImpl;
        /**  @brief Represents an Field abstract class. 

          
                 <br> Fields represent a way of defining a function for one or more dependent 
                domains/variables (see @link Fields::FieldVariable Fields::FieldVariable@endlink ) based on relationships 
                to one or more independent domains/variables (time, temperature, etc.). <br> 
                 <br> Fields are a generic, reusable concept that crosses many 
                areas of functionality.  Defined properly, they provide an extendable concept that can 
                service both simple and complicated needs, for example,  modeling elements, properties, 
                materials, boundary conditions in CAE/FEM applications. <br>  
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  Field : public DisplayableObject
        {
            private: FieldImpl * m_field_impl;
            private: friend class  _FieldBuilder;
            protected: Field();
            public: ~Field();
            /** Returns a field evaluator which can be used to evaluate this field.
                     @return  Field Evaluator 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldEvaluator * GetFieldEvaluator
            (
            );
            /** Copy the field to the target part.
                    
             <br>  @deprecated Deprecated in NX6.0.1.  Use @link Fields::Field::CreateCopyInPart Fields::Field::CreateCopyInPart@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX6.0.1.  Use Fields::Field::CreateCopyInPart instead.") void CopyToPart
            (
                NXOpen::BasePart * targetPart /** target part */
            );
            /** Copy the field to the target part.
                     @return  newly created field 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::Field * CreateCopyInPart
            (
                NXOpen::BasePart * targetPart /** target part */
            );
            /** Create a new table field from this field (regardless of type).  Note
                    * that the table will be created have the N number of rows, where
                    * N is the product of the number of points for each independent variable, 
                    * resulting in a grid (or lattice).  The resulting field will be in the
                    * same part.
                    
             <br>  @deprecated Deprecated in NX6.0.1.  Use @link Fields::Field::CreateTableInPart Fields::Field::CreateTableInPart@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX6.0.1.  Use Fields::Field::CreateTableInPart instead.") void CopyAsTableToPart
            (
                NXOpen::BasePart * targetPart /** target part */
            );
            /** Create a new table field from this field (regardless of type).  Note
                    * that the table will be created have the N number of rows, where
                    * N is the product of the number of points for each independent variable, 
                    * resulting in a grid (or lattice).  The resulting field will be in the
                    * same part.
                     @return  newly created table 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldTable * CreateTableInPart
            (
                NXOpen::BasePart * targetPart /** target part */
            );
            /** Update the name of the field.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void Rename
            (
                const NXString & newName /** new field name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Update the name of the field.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void Rename
            (
                const char * newName /** new field name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the spatial map for the formula field.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpatialMap
            (
                NXOpen::Fields::SpatialMap * overrideMap /** spatial map to set */
            );
            /** Returns the spatial map for the formula field if one exists.
                     @return  spatial map  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::SpatialMap * GetSpatialMap
            (
            );
            /** Delete this field; destroys the field and removes all references to it.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void Delete
            (
            );
            /** Creates displayed graphs of the Field's specified independent variable
                        versus all the Field's dependent variables
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void XYGraph
            (
                NXOpen::Fields::FieldVariable * indepVar /** the specified independent variable for which to create the graph */,
                double abscissaMinimum /** the minimum bounds along the abscissa  */,
                double abscissaMaximum /** the maximum bounds along the abscissa  */,
                int abscissaPointCount /** the number of points to graph along the abscissa.
                                                                                         the number of times to evaluate the graphed independent variable */,
                const std::vector<NXOpen::Fields::FieldVariable *> & constantIndepVarArray /**
                                                                                         independent variables to hold constant 
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                const std::vector<double> & constantIndepVarValueArray /** independent variables constant values
                                                                                         If the field has only 1 independent variable, this parameter is NULL */
            );
            /** Plots or overlays graphs of the Field's specified independent variable
                        versus all the Field's dependent variables
                     
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void XYGraph
            (
                NXOpen::Fields::FieldVariable * indepVar /** the specified independent variable for which to create the graph */,
                double abscissaMinimum /** the minimum bounds along the abscissa  */,
                double abscissaMaximum /** the maximum bounds along the abscissa  */,
                int abscissaPointCount /** the number of points to graph along the abscissa.
                                                                                         the number of times to evaluate the graphed independent variable */,
                const std::vector<NXOpen::Fields::FieldVariable *> & constantIndepVarArray /**
                                                                                         independent variables to hold constant 
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                const std::vector<double> & constantIndepVarValueArray /** independent variables constant values
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                int viewIndex /** 0 thru 8, viewport number to place the graph in */,
                bool overlay /** create a new plot or add to existing */
            );
            /** Update the description of the field.
                    
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: void SetDescription
            (
                std::vector<NXString> & lines /** new description */
            );
            /** Returns the description of the field.
                     @return  description 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetDescription
            (
            );
            /**Returns  a value that indicates whether this field is a user created/managed field.
                        Many fields are created automatically by the system for internal uses. The life of these
                        fields is managed by the objects that own them and so these fields are 
                        not consider user fields. 
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool IsUserField
            (
            );
            /**Returns  a value that indicates whether this field is locked against edits. 
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool IsLocked
            (
            );
            /** Returns the dependent variables for this @link Fields::Field Fields::Field@endlink   
                     @return  dependent variables for this @link Fields::FieldVariable Fields::FieldVariable@endlink   
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Fields::FieldVariable *> GetDependentVariables
            (
            );
            /** Returns the independent variables for this @link Fields::Field Fields::Field@endlink   
                     @return  independent variables for this @link Fields::FieldVariable Fields::FieldVariable@endlink   
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Fields::FieldVariable *> GetIndependentVariables
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
