#ifndef NXOpen_ANNOTATIONS_DIMENSIONSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DIMENSIONSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DimensionStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_DimensionStyleBuilder.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class DimensionStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _DimensionStyleBuilderBuilder;
        class DimensionStyleBuilderImpl;
        /**
            Represents a @link Annotations::DimensionStyleBuilder Annotations::DimensionStyleBuilder@endlink .
            This class queries and sets dimension preferences when creating or editing a dimension.
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  DimensionStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: DimensionStyleBuilderImpl * m_dimensionstylebuilder_impl;
            private: friend class  _DimensionStyleBuilderBuilder;
            protected: DimensionStyleBuilder();
            public: ~DimensionStyleBuilder();
            /**Returns  the text arrow placement.
                        This specifies manual or automatic placement and
                        display of arrows in or out 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TextPlacement TextArrowPlacement
            (
            );
            /**Sets  the text arrow placement.
                        This specifies manual or automatic placement and
                        display of arrows in or out 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTextArrowPlacement
            (
                NXOpen::Annotations::TextPlacement textArrowPlacement /** textarrowplacement */ 
            );
            /**Returns  the line between arrows.
                        A value of True means a line is to be displayed between the arrows 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool LineBetweenArrows
            (
            );
            /**Sets  the line between arrows.
                        A value of True means a line is to be displayed between the arrows 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLineBetweenArrows
            (
                bool lineBetweenArrows /** linebetweenarrows */ 
            );
            /**Returns  the dimension text orientation 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TextOrientation Orientation
            (
            );
            /**Sets  the dimension text orientation 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetOrientation
            (
                NXOpen::Annotations::TextOrientation orientation /** orientation */ 
            );
            /**Returns  the dimension text angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double TextAngle
            (
            );
            /**Sets  the dimension text angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTextAngle
            (
                double textAngle /** textangle */ 
            );
            /**Returns  the trim dimension line flag.
                        A value of True means the dimension line will be trimmed when
                        the text crosses both extension lines 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TrimDimensionLineStyle TrimDimLine
            (
            );
            /**Sets  the trim dimension line flag.
                        A value of True means the dimension line will be trimmed when
                        the text crosses both extension lines 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTrimDimLine
            (
                NXOpen::Annotations::TrimDimensionLineStyle trimDimLine /** trimdimline */ 
            );
            /**Returns  the dimension tolerance type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ToleranceType ToleranceType
            (
            );
            /**Sets  the dimension tolerance type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceType
            (
                NXOpen::Annotations::ToleranceType dimToleranceType /** dimtolerancetype */ 
            );
            /**Returns  the extension line display option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ExtensionLineDisplay ExtensionLineDisplay
            (
            );
            /**Sets  the extension line display option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetExtensionLineDisplay
            (
                NXOpen::Annotations::ExtensionLineDisplay extensionLineDisplay /** extensionlinedisplay */ 
            );
            /**Returns  the dimension arrow display option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ArrowDisplay DimArrowDisplay
            (
            );
            /**Sets  the dimension arrow display option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimArrowDisplay
            (
                NXOpen::Annotations::ArrowDisplay dimArrowDisplay /** dimarrowdisplay */ 
            );
            /**Returns  the dimension value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int DimensionValuePrecision
            (
            );
            /**Sets  the dimension value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionValuePrecision
            (
                int dimensionValuePrecision /** dimensionvalueprecision */ 
            );
            /**Returns  the tolerance value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int ToleranceValuePrecision
            (
            );
            /**Sets  the tolerance value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceValuePrecision
            (
                int toleranceValuePrecision /** tolerancevalueprecision */ 
            );
            /**Returns  the dual dimension value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int DualDimensionValuePrecision
            (
            );
            /**Sets  the dual dimension value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualDimensionValuePrecision
            (
                int dualDimensionValuePrecision /** dualdimensionvalueprecision */ 
            );
            /**Returns  the dual tolerance value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int DualToleranceValuePrecision
            (
            );
            /**Sets  the dual tolerance value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualToleranceValuePrecision
            (
                int dualToleranceValuePrecision /** dualtolerancevalueprecision */ 
            );
            /**Returns  the angular dimension value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int AngularDimensionValuePrecision
            (
            );
            /**Sets  the angular dimension value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAngularDimensionValuePrecision
            (
                int angularDimensionValuePrecision /** angulardimensionvalueprecision */ 
            );
            /**Returns  the angular tolerance value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int AngularToleranceValuePrecision
            (
            );
            /**Sets  the angular tolerance value precision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAngularToleranceValuePrecision
            (
                int angularToleranceValuePrecision /** angulartolerancevalueprecision */ 
            );
            /**Returns  the upper english tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double UpperToleranceEnglish
            (
            );
            /**Sets  the upper english tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetUpperToleranceEnglish
            (
                double upperToleranceEnglish /** uppertoleranceenglish */ 
            );
            /**Returns  the lower english tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double LowerToleranceEnglish
            (
            );
            /**Sets  the lower english tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLowerToleranceEnglish
            (
                double lowerToleranceEnglish /** lowertoleranceenglish */ 
            );
            /**Returns  the upper metric tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double UpperToleranceMetric
            (
            );
            /**Sets  the upper metric tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetUpperToleranceMetric
            (
                double upperToleranceMetric /** uppertolerancemetric */ 
            );
            /**Returns  the lower metric tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double LowerToleranceMetric
            (
            );
            /**Sets  the lower metric tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLowerToleranceMetric
            (
                double lowerToleranceMetric /** lowertolerancemetric */ 
            );
            /**Returns  the upper angular tolerance in degrees 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double UpperToleranceDegrees
            (
            );
            /**Sets  the upper angular tolerance in degrees 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetUpperToleranceDegrees
            (
                double upperToleranceDegrees /** uppertolerancedegrees */ 
            );
            /**Returns  the lower angular tolerance in degrees 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double LowerToleranceDegrees
            (
            );
            /**Sets  the lower angular tolerance in degrees 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLowerToleranceDegrees
            (
                double lowerToleranceDegrees /** lowertolerancedegrees */ 
            );
            /**Returns  the primary dimension fractional denominator 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FractionDenominatorFormat PrimaryDimensionFractionDenominator
            (
            );
            /**Sets  the primary dimension fractional denominator 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetPrimaryDimensionFractionDenominator
            (
                NXOpen::Annotations::FractionDenominatorFormat primaryDimensionFractionDenominator /** primarydimensionfractiondenominator */ 
            );
            /**Returns  the dual dimension fractional denominator 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FractionDenominatorFormat DualDimensionFractionDenominator
            (
            );
            /**Sets  the dual dimension fractional denominator 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualDimensionFractionDenominator
            (
                NXOpen::Annotations::FractionDenominatorFormat dualDimensionFractionDenominator /** dualdimensionfractiondenominator */ 
            );
            /**Returns  the offset between dimension lines of baseline dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double BaselineOffset
            (
            );
            /**Sets  the offset between dimension lines of baseline dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetBaselineOffset
            (
                double baselineOffset /** baselineoffset */ 
            );
            /**Returns  the offset between dimension lines of chain dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ChainOffset
            (
            );
            /**Sets  the offset between dimension lines of chain dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChainOffset
            (
                double chainOffset /** chainoffset */ 
            );
            /**Returns  the display type for narrow dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::NarrowDisplayOption NarrowDisplayType
            (
            );
            /**Sets  the display type for narrow dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNarrowDisplayType
            (
                NXOpen::Annotations::NarrowDisplayOption displayType /** displaytype */ 
            );
            /**Returns  the narrow dimension text orientation 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::NarrowTextOrientation NarrowTextOrientation
            (
            );
            /**Sets  the narrow dimension text orientation 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNarrowTextOrientation
            (
                NXOpen::Annotations::NarrowTextOrientation narrowTextOrientation /** narrowtextorientation */ 
            );
            /**Returns  the narrow dimension leader angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double NarrowLeaderAngle
            (
            );
            /**Sets  the narrow dimension leader angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNarrowLeaderAngle
            (
                double narrowLeaderAngle /** narrowleaderangle */ 
            );
            /**Returns  the narrow dimension text offset 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double NarrowTextOffset
            (
            );
            /**Sets  the narrow dimension text offset 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNarrowTextOffset
            (
                double narrowTextOffset /** narrowtextoffset */ 
            );
            /**Returns  the narrow dimension arrowhead type which is used when there is no space for normal arrowheads 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ArrowheadType NarrowArrowType
            (
            );
            /**Sets  the narrow dimension arrowhead type which is used when there is no space for normal arrowheads 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNarrowArrowType
            (
                NXOpen::Annotations::ArrowheadType narrowArrowType /** narrowarrowtype */ 
            );
            /**Returns  the chamfer dimension form 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ChamferForm ChamferForm
            (
            );
            /**Sets  the chamfer dimension form 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferForm
            (
                NXOpen::Annotations::ChamferForm chamferForm /** chamferform */ 
            );
            /**Returns  the chamfer dimension stub type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ChamferStubType ChamferStubType
            (
            );
            /**Sets  the chamfer dimension stub type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferStubType
            (
                NXOpen::Annotations::ChamferStubType chamferStubType /** chamferstubtype */ 
            );
            /**Returns  the chamfer dimension leader type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ChamferLeaderPlacement ChamferLeaderType
            (
            );
            /**Sets  the chamfer dimension leader type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferLeaderType
            (
                NXOpen::Annotations::ChamferLeaderPlacement chamferLeaderType /** chamferleadertype */ 
            );
            /**Returns  the chamfer dimension symbol type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ChamferSymbolPlacement ChamferSymbolType
            (
            );
            /**Sets  the chamfer dimension symbol type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferSymbolType
            (
                NXOpen::Annotations::ChamferSymbolPlacement chamferSymbolType /** chamfersymboltype */ 
            );
            /**Returns  the chamfer dimension symbol name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ChamferSymbolName
            (
            );
            /**Sets  the chamfer dimension symbol name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferSymbolName
            (
                const NXString & chamferSymbolName /** chamfersymbolname */ 
            );
            /**Sets  the chamfer dimension symbol name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void SetChamferSymbolName
            (
                const char * chamferSymbolName /** chamfersymbolname */ 
            );
            /**Returns  the chamfer dimension space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ChamferSpaceFactor
            (
            );
            /**Sets  the chamfer dimension space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferSpaceFactor
            (
                double chamferSpaceFactor /** chamferspacefactor */ 
            );
            /**Returns  the reference dimension flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReferenceDimension
            (
            );
            /**Sets  the reference dimension flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetReferenceDimension
            (
                bool referenceDimension /** referencedimension */ 
            );
            /**Returns  the inspection dimension flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool InspectionDimension
            (
            );
            /**Sets  the inspection dimension flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetInspectionDimension
            (
                bool inspectionDimension /** inspectiondimension */ 
            );
            /**Returns  the dimension zero tolerance display style 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ZeroToleranceDisplayStyle DimZeroToleranceDisplayStyle
            (
            );
            /**Sets  the dimension zero tolerance display style 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimZeroToleranceDisplayStyle
            (
                NXOpen::Annotations::ZeroToleranceDisplayStyle dimZeroToleranceDisplayStyle /** dimzerotolerancedisplaystyle */ 
            );
            /**Returns  the dimension limit fit deviation 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString LimitFitDeviation
            (
            );
            /**Sets  the dimension limit fit deviation 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLimitFitDeviation
            (
                const NXString & fitDeviation /** fitdeviation */ 
            );
            /**Sets  the dimension limit fit deviation 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void SetLimitFitDeviation
            (
                const char * fitDeviation /** fitdeviation */ 
            );
            /**Returns  the dimension limit fit grade 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int LimitFitGrade
            (
            );
            /**Sets  the dimension limit fit grade 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLimitFitGrade
            (
                int fitGrade /** fitgrade */ 
            );
            /**Returns  the dimension limit fit display style 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FitDisplayStyle LimitFitDisplayStyle
            (
            );
            /**Sets  the dimension limit fit display style 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLimitFitDisplayStyle
            (
                NXOpen::Annotations::FitDisplayStyle fitDisplayStyle /** fitdisplaystyle */ 
            );
            /**Returns  the dimension limit fit ansi hole type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FitAnsiHoleType LimitFitAnsiHoleType
            (
            );
            /**Sets  the dimension limit fit ansi hole type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLimitFitAnsiHoleType
            (
                NXOpen::Annotations::FitAnsiHoleType fitHoleType /** fitholetype */ 
            );
            /**Returns  the true length text position 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TrueLengthTextPosition TrueLengthTextPosition
            (
            );
            /**Sets  the true length text position 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetTrueLengthTextPosition
            (
                NXOpen::Annotations::TrueLengthTextPosition trueLengthTextPosition /** truelengthtextposition */ 
            );
            /**Returns  the true length dimension text 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TrueLengthText
            (
            );
            /**Sets  the true length dimension text 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetTrueLengthText
            (
                const NXString & trueLengthText /** truelengthtext */ 
            );
            /**Sets  the true length dimension text 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            void SetTrueLengthText
            (
                const char * trueLengthText /** truelengthtext */ 
            );
            /**Returns  the reverse arrow direction flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseArrowDirection
            (
            );
            /**Sets  the reverse arrow direction flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_drafting ("Ship Drafting") */
            public: void SetReverseArrowDirection
            (
                bool reverseArrowDirection /** reversearrowdirection */ 
            );
            /**Returns  the flag indicating whether prefix suffix reference toggle is turned on or not 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PrefixSuffixReference
            (
            );
            /**Sets  the flag indicating whether prefix suffix reference toggle is turned on or not 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPrefixSuffixReference
            (
                bool prefixSuffixReference /** prefixsuffixreference */ 
            );
            /**Returns  the prefix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ReferenceDimensionPrefix
            (
            );
            /**Sets  the prefix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetReferenceDimensionPrefix
            (
                const NXString & prefix /** prefix */ 
            );
            /**Sets  the prefix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetReferenceDimensionPrefix
            (
                const char * prefix /** prefix */ 
            );
            /**Returns  the suffix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ReferenceDimensionSuffix
            (
            );
            /**Sets  the suffix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetReferenceDimensionSuffix
            (
                const NXString & suffix /** suffix */ 
            );
            /**Sets  the suffix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetReferenceDimensionSuffix
            (
                const char * suffix /** suffix */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
