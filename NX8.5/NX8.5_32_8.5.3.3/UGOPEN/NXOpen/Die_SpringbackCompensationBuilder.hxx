#ifndef NXOpen_DIE_SPRINGBACKCOMPENSATIONBUILDER_HXX_INCLUDED
#define NXOpen_DIE_SPRINGBACKCOMPENSATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_SpringbackCompensationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_SpringbackCompensationBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class SpringbackCompensationBuilder;
    }
    class Direction;
    namespace Facet
    {
        class SelectFacetedBody;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeature;
    }
    class Section;
    class SelectBody;
    namespace Die
    {
        class _SpringbackCompensationBuilderBuilder;
        class SpringbackCompensationBuilderImpl;
        /**
            Used to create or edit a @link Die::SpringbackCompensation Die::SpringbackCompensation@endlink  feature.
             <br> To create a new instance of this class, use @link Die::DieCollection::CreateSpringbackCompensationBuilder  Die::DieCollection::CreateSpringbackCompensationBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ConvexityEnabled </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        CreateFacets </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        DefinedBy </td> <td> 
         
        OneStepFeature </td> </tr> 

        <tr><td> 
         
        DeformationFactor </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Degree </td> <td> 
         
        Two </td> </tr> 

        <tr><td> 
         
        Divisions </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        ResultType </td> <td> 
         
        Compensated </td> </tr> 

        <tr><td> 
         
        ShapeValue </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        SmoothingFactor </td> <td> 
         
        1e-009 </td> </tr> 

        <tr><td> 
         
        StepSize </td> <td> 
         
        1.0 </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  SpringbackCompensationBuilder : public Features::FeatureBuilder
        {
            /** The type of input data that defines the compensation. */
            public: enum DefinedByType
            {
                DefinedByTypeOneStepFeature/** A One-Step feature. */,
                DefinedByTypeFacetedBodies/** Facted bodies. */,
                DefinedByTypePoints/** Points . */
            };

            /** The type of sheet body you would like created as output. */
            public: enum ResultSheetType
            {
                ResultSheetTypeCompensated/** Compensated sheet body. */,
                ResultSheetTypeSprung/** Sprung sheet body. */
            };

            /** The polynomial degree type. Acceptable degrees are 2, 3, 5, and 7. */
            public: enum DegreeType
            {
                DegreeTypeTwo/** Degree is 2 */,
                DegreeTypeThree/** Degree is 3 */,
                DegreeTypeFive/** Degree is 5 */,
                DegreeTypeSeven/** Degree is 7 */
            };

            private: SpringbackCompensationBuilderImpl * m_springbackcompensationbuilder_impl;
            private: friend class  _SpringbackCompensationBuilderBuilder;
            protected: SpringbackCompensationBuilder();
            public: ~SpringbackCompensationBuilder();
            /**Returns  the type of data that will be used to define the feature.
                         <br> @link Die::SpringbackCompensationBuilder::DefinedByTypeOneStepFeature Die::SpringbackCompensationBuilder::DefinedByTypeOneStepFeature@endlink  
                        <ul>
                        <li>@link Die::SpringbackCompensationBuilder::OneStep Die::SpringbackCompensationBuilder::OneStep@endlink </li>
                        </ul>
                         <br> 
                         <br> @link Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies@endlink  
                        <ul>
                        <li>@link Die::SpringbackCompensationBuilder::ProductSheet Die::SpringbackCompensationBuilder::ProductSheet@endlink </li>
                        <li>@link Die::SpringbackCompensationBuilder::ProductFacets Die::SpringbackCompensationBuilder::ProductFacets@endlink </li>
                        <li>@link Die::SpringbackCompensationBuilder::SprungFacets Die::SpringbackCompensationBuilder::SprungFacets@endlink </li>
                        </ul>
                         <br> 
                         <br> @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink  
                        <ul>
                        <li>@link Die::SpringbackCompensationBuilder::ProductSheet Die::SpringbackCompensationBuilder::ProductSheet@endlink </li>
                        <li>@link Die::SpringbackCompensationBuilder::SetProductPoints Die::SpringbackCompensationBuilder::SetProductPoints@endlink </li>
                        <li>@link Die::SpringbackCompensationBuilder::SetSprungPoints Die::SpringbackCompensationBuilder::SetSprungPoints@endlink </li>
                        </ul>
                         <br> 
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::SpringbackCompensationBuilder::DefinedByType DefinedBy
            (
            );
            /**Sets  the type of data that will be used to define the feature.
                         <br> @link Die::SpringbackCompensationBuilder::DefinedByTypeOneStepFeature Die::SpringbackCompensationBuilder::DefinedByTypeOneStepFeature@endlink  
                        <ul>
                        <li>@link Die::SpringbackCompensationBuilder::OneStep Die::SpringbackCompensationBuilder::OneStep@endlink </li>
                        </ul>
                         <br> 
                         <br> @link Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies@endlink  
                        <ul>
                        <li>@link Die::SpringbackCompensationBuilder::ProductSheet Die::SpringbackCompensationBuilder::ProductSheet@endlink </li>
                        <li>@link Die::SpringbackCompensationBuilder::ProductFacets Die::SpringbackCompensationBuilder::ProductFacets@endlink </li>
                        <li>@link Die::SpringbackCompensationBuilder::SprungFacets Die::SpringbackCompensationBuilder::SprungFacets@endlink </li>
                        </ul>
                         <br> 
                         <br> @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink  
                        <ul>
                        <li>@link Die::SpringbackCompensationBuilder::ProductSheet Die::SpringbackCompensationBuilder::ProductSheet@endlink </li>
                        <li>@link Die::SpringbackCompensationBuilder::SetProductPoints Die::SpringbackCompensationBuilder::SetProductPoints@endlink </li>
                        <li>@link Die::SpringbackCompensationBuilder::SetSprungPoints Die::SpringbackCompensationBuilder::SetSprungPoints@endlink </li>
                        </ul>
                         <br> 
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetDefinedBy
            (
                NXOpen::Die::SpringbackCompensationBuilder::DefinedByType definedBy /** definedby */ 
            );
            /**Returns  the one-step feature. Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypeOneStepFeature Die::SpringbackCompensationBuilder::DefinedByTypeOneStepFeature@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SelectFeature * OneStep
            (
            );
            /**Returns  the sheet body representing the product shape. Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies@endlink  or
                        @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink .   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * ProductSheet
            (
            );
            /**Returns  the product facets. Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies@endlink . Optional. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::SelectFacetedBody * ProductFacets
            (
            );
            /**Returns  the product points file name. This is saved for reference only. 
                        The product points are actually defined by calling @link Die::SpringbackCompensationBuilder::SetProductPoints Die::SpringbackCompensationBuilder::SetProductPoints@endlink . 
                        Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink . Optional.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ProductPointsFile
            (
            );
            /**Sets  the product points file name. This is saved for reference only. 
                        The product points are actually defined by calling @link Die::SpringbackCompensationBuilder::SetProductPoints Die::SpringbackCompensationBuilder::SetProductPoints@endlink . 
                        Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink . Optional.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetProductPointsFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the product points file name. This is saved for reference only. 
                        The product points are actually defined by calling @link Die::SpringbackCompensationBuilder::SetProductPoints Die::SpringbackCompensationBuilder::SetProductPoints@endlink . 
                        Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink . Optional.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            void SetProductPointsFile
            (
                const char * filename /** filename */ 
            );
            /** Get the sample points on the product surface. Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink . Optional. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetProductPoints
            (
                std::vector<NXOpen::Point3d> & productPoints /** Points representing the shape of the product. */
            );
            /** Set the sample points on the product surface. Must have the same number as sprung points. Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink . Optional. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetProductPoints
            (
                const std::vector<NXOpen::Point3d> & productPoints /** Points representing the shape of the product. */
            );
            /**Returns  the sprung facets. Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::SelectFacetedBody * SprungFacets
            (
            );
            /**Returns  the sprung points file name. This is saved for reference only. 
                        The product points are actually defined by calling @link Die::SpringbackCompensationBuilder::SetSprungPoints Die::SpringbackCompensationBuilder::SetSprungPoints@endlink . 
                        Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink . Optional.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString SprungPointsFile
            (
            );
            /**Sets  the sprung points file name. This is saved for reference only. 
                        The product points are actually defined by calling @link Die::SpringbackCompensationBuilder::SetSprungPoints Die::SpringbackCompensationBuilder::SetSprungPoints@endlink . 
                        Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink . Optional.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSprungPointsFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the sprung points file name. This is saved for reference only. 
                        The product points are actually defined by calling @link Die::SpringbackCompensationBuilder::SetSprungPoints Die::SpringbackCompensationBuilder::SetSprungPoints@endlink . 
                        Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink . Optional.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            void SetSprungPointsFile
            (
                const char * filename /** filename */ 
            );
            /** Get the sample points on the sprung surface. Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetSprungPoints
            (
                std::vector<NXOpen::Point3d> & sprungPoints /** Points representing the shape of the sprung sheet. */
            );
            /** Set the sample points on the sprung surface. Must have the same number as product points. Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypePoints Die::SpringbackCompensationBuilder::DefinedByTypePoints@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSprungPoints
            (
                const std::vector<NXOpen::Point3d> & sprungPoints /** Points representing the shape of the sprung sheet. */
            );
            /**Returns  the vector indicating the draw direction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DrawVector
            (
            );
            /**Sets  the vector indicating the draw direction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetDrawVector
            (
                NXOpen::Direction * drawVector /** drawvector */ 
            );
            /**Returns  the inner boundary curve of the transition area. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * InnerCurve
            (
            );
            /**Returns  the outer boundary curve of transition area. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * OuterCurve
            (
            );
            /**Returns  the parameter that determines the shape of the transition area. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double ShapeValue
            (
            );
            /**Sets  the parameter that determines the shape of the transition area. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetShapeValue
            (
                double shapeValue /** shapevalue */ 
            );
            /**Returns  the type of output to generate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::SpringbackCompensationBuilder::ResultSheetType ResultType
            (
            );
            /**Sets  the type of output to generate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetResultType
            (
                NXOpen::Die::SpringbackCompensationBuilder::ResultSheetType resultType /** resulttype */ 
            );
            /**Returns  the value determines if a faceted output body is also created. True indicates to output a faceted body, false indicates that a faceted body is not output.
                        Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies@endlink 
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CreateFacets
            (
            );
            /**Sets  the value determines if a faceted output body is also created. True indicates to output a faceted body, false indicates that a faceted body is not output.
                        Only when type is @link Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies Die::SpringbackCompensationBuilder::DefinedByTypeFacetedBodies@endlink 
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetCreateFacets
            (
                bool createFacets /** createfacets */ 
            );
            /**Returns  the deformation factor determines how much of the calculated deformation is applied to the result body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double DeformationFactor
            (
            );
            /**Sets  the deformation factor determines how much of the calculated deformation is applied to the result body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetDeformationFactor
            (
                double deformationFactor /** deformationfactor */ 
            );
            /**Returns  the smoothing factor regulates a trade-off between interpolation error and smoothing when creating the result body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double SmoothingFactor
            (
            );
            /**Sets  the smoothing factor regulates a trade-off between interpolation error and smoothing when creating the result body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSmoothingFactor
            (
                double smoothingFactor /** smoothingfactor */ 
            );
            /**Returns  the number of equi-distant points to divide the cube of the sheet body (N x N x N).  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int Divisions
            (
            );
            /**Sets  the number of equi-distant points to divide the cube of the sheet body (N x N x N).  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetDivisions
            (
                int divisions /** divisions */ 
            );
            /**Returns  the polynomial degree (one unit less than the order). 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::SpringbackCompensationBuilder::DegreeType Degree
            (
            );
            /**Sets  the polynomial degree (one unit less than the order). 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetDegree
            (
                NXOpen::Die::SpringbackCompensationBuilder::DegreeType degree /** degree */ 
            );
            /**Returns  the indication if the feature should calculate the maximum deviation of the result. True indicates the deviation should be calculated, false indicates the deviation will not be calculated. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CalculateMaxDeviation
            (
            );
            /**Sets  the indication if the feature should calculate the maximum deviation of the result. True indicates the deviation should be calculated, false indicates the deviation will not be calculated. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetCalculateMaxDeviation
            (
                bool calculateMaxDeviation /** calculatemaxdeviation */ 
            );
            /**Returns  the toggle that determines whether to constrain convexity 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ConvexityEnabled
            (
            );
            /**Sets  the toggle that determines whether to constrain convexity 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetConvexityEnabled
            (
                bool isConvexityEnabled /** isconvexityenabled */ 
            );
            /**Returns  the convexity direction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ConvexityDirection
            (
            );
            /**Sets  the convexity direction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetConvexityDirection
            (
                NXOpen::Direction * convexityDirection /** convexitydirection */ 
            );
            /**Returns  the step size. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double StepSize
            (
            );
            /**Sets  the step size. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetStepSize
            (
                double stepSize /** stepsize */ 
            );
            /**Returns  the distance tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the indication if the feature is a generic Global Deformation. True indicates the feature is a Global Deformation, false indicates the feature is not a Global Deformation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsGlobalDeformation
            (
            );
            /**Sets  the indication if the feature is a generic Global Deformation. True indicates the feature is a Global Deformation, false indicates the feature is not a Global Deformation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: void SetGlobalDeformation
            (
                bool isGlobalDeformation /** isglobaldeformation */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
