#ifndef NXOpen_GEOMETRICUTILITIES_PATTERNDEFINITION_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_PATTERNDEFINITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_PatternDefinition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_AlongPathPattern.hxx>
#include <NXOpen/GeometricUtilities_CircularPattern.hxx>
#include <NXOpen/GeometricUtilities_GeneralPattern.hxx>
#include <NXOpen/GeometricUtilities_MirrorPattern.hxx>
#include <NXOpen/GeometricUtilities_PatternClocking.hxx>
#include <NXOpen/GeometricUtilities_PatternClockingBuilder.hxx>
#include <NXOpen/GeometricUtilities_PatternDefinition.hxx>
#include <NXOpen/GeometricUtilities_PatternFill.hxx>
#include <NXOpen/GeometricUtilities_PatternIncrementsBuilder.hxx>
#include <NXOpen/GeometricUtilities_PatternInstanceEditBuilder.hxx>
#include <NXOpen/GeometricUtilities_PatternOrientation.hxx>
#include <NXOpen/GeometricUtilities_PolygonPattern.hxx>
#include <NXOpen/GeometricUtilities_RectangularPattern.hxx>
#include <NXOpen/GeometricUtilities_ReferencePattern.hxx>
#include <NXOpen/GeometricUtilities_SpiralPattern.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class PatternDefinition;
    }
    namespace GeometricUtilities
    {
        class AlongPathPattern;
    }
    namespace GeometricUtilities
    {
        class CircularPattern;
    }
    namespace GeometricUtilities
    {
        class GeneralPattern;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class MirrorPattern;
    }
    namespace GeometricUtilities
    {
        class PatternClocking;
    }
    namespace GeometricUtilities
    {
        class PatternClockingBuilder;
    }
    namespace GeometricUtilities
    {
        class PatternFill;
    }
    namespace GeometricUtilities
    {
        class PatternIncrementsBuilder;
    }
    namespace GeometricUtilities
    {
        class PatternInstanceEditBuilder;
    }
    namespace GeometricUtilities
    {
        class PatternOrientation;
    }
    namespace GeometricUtilities
    {
        class PolygonPattern;
    }
    namespace GeometricUtilities
    {
        class RectangularPattern;
    }
    namespace GeometricUtilities
    {
        class ReferencePattern;
    }
    namespace GeometricUtilities
    {
        class SpiralPattern;
    }
    namespace GeometricUtilities
    {
        class _PatternDefinitionBuilder;
        class PatternDefinitionImpl;
        /** pattern spacing for several pattern based commands.  See PatternEnum definition
                below for a listing of the various pattern definitions available. 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  PatternDefinition : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** pattern types available.  For details on the interface of each type,
                        visit the corresponding definition class for each type. */
            public: enum PatternEnum
            {
                PatternEnumLinear/** pattern along single linear direction. */,
                PatternEnumCircular/** pattern in angular and radial directions. */,
                PatternEnumPolygon/** polygon pattern. */,
                PatternEnumSpiral/** spiral pattern. */,
                PatternEnumAlongPath/** pattern along a section path. */,
                PatternEnumGeneral/** general pattern. */,
                PatternEnumReference/** reference pattern. */,
                PatternEnumMirror/** mirror pattern. */
            };

            private: PatternDefinitionImpl * m_patterndefinition_impl;
            private: friend class  _PatternDefinitionBuilder;
            protected: PatternDefinition();
            public: ~PatternDefinition();
            /**Returns  the pattern type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternDefinition::PatternEnum PatternType
            (
            );
            /**Sets  the pattern type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPatternType
            (
                NXOpen::GeometricUtilities::PatternDefinition::PatternEnum patternType /** patterntype */ 
            );
            /**Returns  the linear definition.  See LinearPattern for details. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::RectangularPattern * RectangularDefinition
            (
            );
            /**Returns  the circular definition.  See CircularPattern for details. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CircularPattern * CircularDefinition
            (
            );
            /**Returns  the along path definition.  See AlongPathPattern for details. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AlongPathPattern * AlongPathDefinition
            (
            );
            /**Returns  the reference definition.  See ReferencePattern for details. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ReferencePattern * ReferenceDefinition
            (
            );
            /**Returns  the mirror definition.  See MirrorPattern for details. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::MirrorPattern * MirrorDefinition
            (
            );
            /**Returns  the general definition.  See GeneralPattern for details. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::GeneralPattern * GeneralDefinition
            (
            );
            /**Returns  the spiral definition.  See SpiralPattern for details. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SpiralPattern * SpiralDefinition
            (
            );
            /**Returns  the polygon definition.  See PolygonPattern for details. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PolygonPattern * PolygonDefinition
            (
            );
            /**Returns  the pattern fill definition.  See PatternFill for details. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternFill * PatternFill
            (
            );
            /**Returns  the pattern orientation definition.  See PatternOrientation for details. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternOrientation * PatternOrientation
            (
            );
            /**Returns  the frameOnlyToggle, a logical flag to indicate if the we need only instances on the boundary. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool FrameOnlyToggle
            (
            );
            /**Sets  the frameOnlyToggle, a logical flag to indicate if the we need only instances on the boundary. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFrameOnlyToggle
            (
                bool frameOnlyToggle /** frameonlytoggle */ 
            );
            /**Returns  the seedOnlyToggle, a logical flag to indicate if the we need only instances for the seed along the second direction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool SeedOnlyToggle
            (
            );
            /**Sets  the seedOnlyToggle, a logical flag to indicate if the we need only instances for the seed along the second direction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSeedOnlyToggle
            (
                bool seedOnlyToggle /** seedonlytoggle */ 
            );
            /**Returns  the pattern increments definition.  See @link GeometricUtilities::PatternIncrementsBuilder GeometricUtilities::PatternIncrementsBuilder@endlink  for details. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternIncrementsBuilder * PatternIncrementsBuilder
            (
            );
            /** This is the default creator for @link GeometricUtilities::PatternInstanceEditBuilder GeometricUtilities::PatternInstanceEditBuilder@endlink .  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternInstanceEditBuilder * CreatePatternInstanceEditBuilder
            (
            );
            /** Gets the suppress state for the instance at the specified indicies.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool GetSuppressState
            (
                int index1 /** First index of instance */,
                int index2 /** Second index of instance */
            );
            /** Sets the suppress state for the instance at the specified indicies. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSuppressState
            (
                int index1 /** First index of instance */,
                int index2 /** Second index of instance */,
                bool suppressState /** Input suppress state */
            );
            /** Gets the delete state for the instance at the specified indicies.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetDeleteState
            (
                int index1 /** First index of instance */,
                int index2 /** Second index of instance */
            );
            /** Sets the delete state for the instance at the specified indicies. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeleteState
            (
                int index1 /** First index of instance */,
                int index2 /** Second index of instance */,
                bool deleteState /** Input suppress state */
            );
            /** Creates a pattern clocking object  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternClockingBuilder * CreateClockingBuilder
            (
                int ix /** x index of instance to initialize to */,
                int iy /** y index of instance to initialize to */
            );
            /** Returns the clocking data for a @link GeometricUtilities::PatternDefinition GeometricUtilities::PatternDefinition@endlink  instance  @return  
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link GeometricUtilities::PatternDefinition::CreateClockingBuilder GeometricUtilities::PatternDefinition::CreateClockingBuilder@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use GeometricUtilities::PatternDefinition::CreateClockingBuilder instead.") NXOpen::GeometricUtilities::PatternClocking * GetClocking
            (
                int index1 /** First index into pattern instance array */,
                int index2 /** Second index into pattern instance array  */
            );
            /** Removes clocking from pattern definition instance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void RemoveClocking
            (
                int index1 /** First index into pattern instance array */,
                int index2 /** Second index into pattern instance array */
            );
            /** Removes variance from pattern definition instance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveVariance
            (
                int index1 /** First index into pattern instance array */,
                int index2 /** Second index into pattern instance array */
            );
            /** Sets the spreadsheet data 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpreadsheetData
            (
                const std::vector<double> & spreadsheetTableArray /** spreadsheettablearray */ ,
                const std::vector<double> & locationTableArray /** locationtablearray */ ,
                const std::vector<bool> & defaultTableArray /** defaulttablearray */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
