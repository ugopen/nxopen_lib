#ifndef NXOpen_GEOMETRICUTILITIES_MODLMOTION_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_MODLMOTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_ModlMotion.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_ModlAlongCurveAngle.hxx>
#include <NXOpen/GeometricUtilities_ModlDistanceAngle.hxx>
#include <NXOpen/GeometricUtilities_ModlMotion.hxx>
#include <NXOpen/GeometricUtilities_OrientXpressBuilder.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class ModlMotion;
    }
    class Axis;
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class ModlAlongCurveAngle;
    }
    namespace GeometricUtilities
    {
        class ModlDistanceAngle;
    }
    namespace GeometricUtilities
    {
        class OrientXpressBuilder;
    }
    class Plane;
    class Point;
    class View;
    namespace GeometricUtilities
    {
        class _ModlMotionBuilder;
        class ModlMotionImpl;
        /**
            Represents a @link GeometricUtilities::ModlMotion GeometricUtilities::ModlMotion@endlink 
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  ModlMotion : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** 
                    Represents the options of Motion. 
                    */
            public: enum Options
            {
                OptionsAlongCurveAngle/** Move by AlongCurve-Angle */,
                OptionsDistanceAngle/** Move by Distance-Angle */,
                OptionsDistance/** Move by Distance */,
                OptionsAngle/** Move by Angle */,
                OptionsDistanceBetweenPoints/** Move by Distance between Points */,
                OptionsRadialDistance/** Move by Radial Distance */,
                OptionsPointToPoint/** Move by Point to Point */,
                OptionsRotateByThreePoints/** Move by Rotate by Three Points */,
                OptionsAlignAxisVector/** Move by Align Axis to Vector */,
                OptionsCsysToCsys/** Move by CSYS to CSYS */,
                OptionsDynamic/** Move by Dynamic */,
                OptionsDeltaXyz/** Move by delta XYZ */,
                OptionsNone/** No move */
            };

            /** 
                    Represents the options of Delta XYZ. 
                    */
            public: enum Delta
            {
                DeltaReferenceAcsWorkPart/** Reference CSYS is absolute coordinate system in the work part */,
                DeltaReferenceAcsDisplayPart/** Reference CSYS is absolute coordinate system in the display part */,
                DeltaReferenceWcsWorkPart/** Reference CSYS is work coordinate system in the work part */,
                DeltaReferenceWcsDisplayPart/** Reference CSYS is work coordinate system in the display part */
            };

            private: ModlMotionImpl * m_modlmotion_impl;
            private: friend class  _ModlMotionBuilder;
            protected: ModlMotion();
            public: ~ModlMotion();
            /**Returns  the options.
                    Control the Motion methods. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlMotion::Options Option
            (
            );
            /**Sets  the options.
                    Control the Motion methods. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOption
            (
                NXOpen::GeometricUtilities::ModlMotion::Options type /** type */ 
            );
            /**Returns the direction of @link  GeometricUtilities::ModlMotion::OptionsDistance   GeometricUtilities::ModlMotion::OptionsDistance @endlink  
                    motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DistanceVector
            (
            );
            /**Returns  the orientXpress.
                    OrientXpress used as overlay in Motion. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OrientXpressBuilder * OrientXpress
            (
            );
            /**Sets the direction of @link  GeometricUtilities::ModlMotion::OptionsDistance   GeometricUtilities::ModlMotion::OptionsDistance @endlink  
                    motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceVector
            (
                NXOpen::Direction * distanceVector /** distancevector */ 
            );
            /**Returns the distance value of @link  GeometricUtilities::ModlMotion::OptionsDistance   GeometricUtilities::ModlMotion::OptionsDistance @endlink  
                    motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DistanceValue
            (
            );
            /**Returns the origin point of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                    motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * DistanceBetweenPointsOriginPoint
            (
            );
            /**Sets the origin point of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                    motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceBetweenPointsOriginPoint
            (
                NXOpen::Point * originPoint /** originpoint */ 
            );
            /**Returns  the measure point of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * DistanceBetweenPointsMeasurePoint
            (
            );
            /**Sets  the measure point of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceBetweenPointsMeasurePoint
            (
                NXOpen::Point * measurePoint /** measurepoint */ 
            );
            /**Returns  the direction of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DistanceBetweenPointsVector
            (
            );
            /**Sets  the direction of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceBetweenPointsVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the distance of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DistanceBetweenPointsDistance
            (
            );
            /**Returns  the distance between origin point and face of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DistanceBetweenPointsOriginDistance
            (
            );
            /**Returns  the axis of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * RadialAxis
            (
            );
            /**Sets  the axis of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRadialAxis
            (
                NXOpen::Axis * radialAxis /** radialaxis */ 
            );
            /**Returns  the measure point of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * RadialMeasurePoint
            (
            );
            /**Sets  the measure point of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRadialMeasurePoint
            (
                NXOpen::Point * radialMeasuPoint /** radialmeasupoint */ 
            );
            /**Returns  the distance value of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RadialDistance
            (
            );
            /**Returns  the distance between axis point and face of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RadialOriginDistance
            (
            );
            /**Returns  the "from point" of @link  GeometricUtilities::ModlMotion::OptionsPointToPoint   GeometricUtilities::ModlMotion::OptionsPointToPoint @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * FromPoint
            (
            );
            /**Sets  the "from point" of @link  GeometricUtilities::ModlMotion::OptionsPointToPoint   GeometricUtilities::ModlMotion::OptionsPointToPoint @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFromPoint
            (
                NXOpen::Point * fromPoint /** frompoint */ 
            );
            /**Returns  the point where object is moved for motion option 
                    @link  GeometricUtilities::ModlMotion::OptionsPointToPoint   GeometricUtilities::ModlMotion::OptionsPointToPoint @endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ToPoint
            (
            );
            /**Sets  the point where object is moved for motion option 
                    @link  GeometricUtilities::ModlMotion::OptionsPointToPoint   GeometricUtilities::ModlMotion::OptionsPointToPoint @endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToPoint
            (
                NXOpen::Point * toPoint /** topoint */ 
            );
            /**Returns  the angular axis of @link  GeometricUtilities::ModlMotion::OptionsAngle   GeometricUtilities::ModlMotion::OptionsAngle @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * AngularAxis
            (
            );
            /**Sets  the angular axis of @link  GeometricUtilities::ModlMotion::OptionsAngle   GeometricUtilities::ModlMotion::OptionsAngle @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngularAxis
            (
                NXOpen::Axis * angularAxis /** angularaxis */ 
            );
            /**Returns  the angle of @link  GeometricUtilities::ModlMotion::OptionsAngle   GeometricUtilities::ModlMotion::OptionsAngle @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns  the direction of @link  GeometricUtilities::ModlMotion::OptionsRotateByThreePoints   GeometricUtilities::ModlMotion::OptionsRotateByThreePoints @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * RotateVector
            (
            );
            /**Sets  the direction of @link  GeometricUtilities::ModlMotion::OptionsRotateByThreePoints   GeometricUtilities::ModlMotion::OptionsRotateByThreePoints @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRotateVector
            (
                NXOpen::Axis * rotateVector /** rotatevector */ 
            );
            /**Returns  the start point of @link  GeometricUtilities::ModlMotion::OptionsRotateByThreePoints   GeometricUtilities::ModlMotion::OptionsRotateByThreePoints @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * StartPoint
            (
            );
            /**Sets  the start point of @link  GeometricUtilities::ModlMotion::OptionsRotateByThreePoints   GeometricUtilities::ModlMotion::OptionsRotateByThreePoints @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartPoint
            (
                NXOpen::Point * startPoint /** startpoint */ 
            );
            /**Returns  the end point of @link GeometricUtilities::ModlMotion::OptionsRotateByThreePoints GeometricUtilities::ModlMotion::OptionsRotateByThreePoints@endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * EndPoint
            (
            );
            /**Sets  the end point of @link GeometricUtilities::ModlMotion::OptionsRotateByThreePoints GeometricUtilities::ModlMotion::OptionsRotateByThreePoints@endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndPoint
            (
                NXOpen::Point * endPoint /** endpoint */ 
            );
            /**Returns  the axis of @link GeometricUtilities::ModlMotion::OptionsAlignAxisVector GeometricUtilities::ModlMotion::OptionsAlignAxisVector@endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * AlignVector
            (
            );
            /**Sets  the axis of @link GeometricUtilities::ModlMotion::OptionsAlignAxisVector GeometricUtilities::ModlMotion::OptionsAlignAxisVector@endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAlignVector
            (
                NXOpen::Axis * alignVector /** alignvector */ 
            );
            /**Returns  the vector of @link GeometricUtilities::ModlMotion::OptionsAlignAxisVector GeometricUtilities::ModlMotion::OptionsAlignAxisVector@endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ToVector
            (
            );
            /**Sets  the vector of @link GeometricUtilities::ModlMotion::OptionsAlignAxisVector GeometricUtilities::ModlMotion::OptionsAlignAxisVector@endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToVector
            (
                NXOpen::Direction * toVector /** tovector */ 
            );
            /**Returns  the move handle toggle of @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option.If true,moves only manipulator handle. If false, moves both manipulator handle and object.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool MoveHandle
            (
            );
            /**Sets  the move handle toggle of @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option.If true,moves only manipulator handle. If false, moves both manipulator handle and object.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMoveHandle
            (
                bool moveHandle /** movehandle */ 
            );
            /**Returns  the origin point of manipulator for @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d ManipulatorOrigin
            (
            );
            /**Sets  the origin point of manipulator for @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetManipulatorOrigin
            (
                const NXOpen::Point3d & manipulatorOrigin /** manipulatororigin */ 
            );
            /**Returns  the matrix of manipulator for @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 ManipulatorMatrix
            (
            );
            /**Sets  the matrix of manipulator for @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetManipulatorMatrix
            (
                const NXOpen::Matrix3x3 & manipulatorMatrix /** manipulatormatrix */ 
            );
            /**Returns  the distance-angle of @link  GeometricUtilities::ModlMotion::OptionsDistanceAngle   GeometricUtilities::ModlMotion::OptionsDistanceAngle @endlink 
                     motion option. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlDistanceAngle * DistanceAngle
            (
            );
            /**Returns  the alongCurveAngle of @link  GeometricUtilities::ModlMotion::OptionsAlongCurveAngle   GeometricUtilities::ModlMotion::OptionsAlongCurveAngle @endlink 
                     motion option. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlAlongCurveAngle * AlongCurveAngle
            (
            );
            /**Returns  the "from csys" of @link  GeometricUtilities::ModlMotion::OptionsCsysToCsys   GeometricUtilities::ModlMotion::OptionsCsysToCsys @endlink 
                     motion option . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * FromCsys
            (
            );
            /**Sets  the "from csys" of @link  GeometricUtilities::ModlMotion::OptionsCsysToCsys   GeometricUtilities::ModlMotion::OptionsCsysToCsys @endlink 
                     motion option . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFromCsys
            (
                NXOpen::CoordinateSystem * fromcsys /** fromcsys */ 
            );
            /**Returns  the "to csys" where object is moved for motion option 
                    @link  GeometricUtilities::ModlMotion::OptionsCsysToCsys   GeometricUtilities::ModlMotion::OptionsCsysToCsys @endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * ToCsys
            (
            );
            /**Sets  the "to csys" where object is moved for motion option 
                    @link  GeometricUtilities::ModlMotion::OptionsCsysToCsys   GeometricUtilities::ModlMotion::OptionsCsysToCsys @endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToCsys
            (
                NXOpen::CoordinateSystem * tocsys /** tocsys */ 
            );
            /**Returns  the delta enum 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlMotion::Delta DeltaEnum
            (
            );
            /**Sets  the delta enum 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: void SetDeltaEnum
            (
                NXOpen::GeometricUtilities::ModlMotion::Delta deltaEnum /** deltaenum */ 
            );
            /**Returns  the delta x 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link GeometricUtilities::ModlMotion::DeltaXc GeometricUtilities::ModlMotion::DeltaXc@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using GeometricUtilities::ModlMotion::DeltaXc to query or edit it.") double DeltaX
            (
            );
            /**Sets  the delta x 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link GeometricUtilities::ModlMotion::DeltaXc GeometricUtilities::ModlMotion::DeltaXc@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using GeometricUtilities::ModlMotion::DeltaXc to query or edit it.") void SetDeltaX
            (
                double deltaX /** deltax */ 
            );
            /**Returns  the delta y 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link GeometricUtilities::ModlMotion::DeltaYc GeometricUtilities::ModlMotion::DeltaYc@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using GeometricUtilities::ModlMotion::DeltaYc to query or edit it.") double DeltaY
            (
            );
            /**Sets  the delta y 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link GeometricUtilities::ModlMotion::DeltaYc GeometricUtilities::ModlMotion::DeltaYc@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using GeometricUtilities::ModlMotion::DeltaYc to query or edit it.") void SetDeltaY
            (
                double deltaY /** deltay */ 
            );
            /**Returns  the delta z 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link GeometricUtilities::ModlMotion::DeltaZc GeometricUtilities::ModlMotion::DeltaZc@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using GeometricUtilities::ModlMotion::DeltaZc to query or edit it.") double DeltaZ
            (
            );
            /**Sets  the delta z 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link GeometricUtilities::ModlMotion::DeltaZc GeometricUtilities::ModlMotion::DeltaZc@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using GeometricUtilities::ModlMotion::DeltaZc to query or edit it.") void SetDeltaZ
            (
                double deltaZ /** deltaz */ 
            );
            /**Returns  the delta xc 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DeltaXc
            (
            );
            /**Returns  the delta yc 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DeltaYc
            (
            );
            /**Returns  the delta zc 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DeltaZc
            (
            );
            /** Set motion to two dimensions along the given plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMotionToTwoDimensions
            (
                NXOpen::Plane * plane /** Plane to which motion needs to be restricted*/
            );
            /** Set the view for view dependent drafting objects 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDependentView
            (
                NXOpen::View * view /** view where to paste*/
            );
            /** Reset motion to three dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void ResetMotionToThreeDimensions
            (
            );
            /** Set the update option for defining the update behavior for the object.
                        As an example, in modeling application, the update option should be 
                        "WithinModeling" and in drafting application it should be "AfterModeling".
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUpdateOption
            (
                NXOpen::SmartObject::UpdateOption option /** Update option*/
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
