#ifndef NXOpen_UISTYLER_SELECTIONBOX_HXX_INCLUDED
#define NXOpen_UISTYLER_SELECTIONBOX_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_SelectionBox.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UIStyler
    {
        class SelectionBox;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        class SelectionBoxImpl;
        /** Represents a SelectionBox for UI Styler 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  SelectionBox : public UIStyler::StylerItem
        {
            public: /**Called when a dialog user selects a list entry with a single mouse click, presses the spacebar on a selected list entry, or presses Return when the cursor is in the text field.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Activate;
            public: /**Called when a dialog user double-clicks on an option in the selection box or presses Return when an item is already selected. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> DoubleClick;
            private: SelectionBoxImpl * m_selectionbox_impl;
            /// \cond NX_NO_DOC 
            public: explicit SelectionBox(void *ptr);
            /// \endcond 
            /**Registers activate callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddActivateHandler
            (
                const NXOpen::UIStyler::SelectionBox::Activate&  activateevent /** Activate event */,
                bool isDialogLaunchingEvent /** TRUE if launch new dialog, FALSE if not */
            );
            /**Registers double click callback. This method should be called before calling @link UIStyler::Dialog::Show  UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddDoubleClickHandler
            (
                const NXOpen::UIStyler::SelectionBox::DoubleClick&  doubleclickevent /** Double click event */,
                bool isDialogLaunchingEvent /** TRUE if launch new dialog, FALSE if not */
            );
            /** Specifies an array of character strings for item names that are used as selectable choices for this dialog item.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetListItems
            (
                std::vector<NXString> & values /** List of items   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets an array of character strings for item names that are used as selectable choices for this dialog item. @return  List of items 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetListItems
            (
            );
            /** Specifies the descriptive text string to display below the scrolled list and above the text field. It describes the dialog item's usage.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLabel
            (
                const NXString & strLabel /** Label string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Specifies the descriptive text string to display below the scrolled list and above the text field. It describes the dialog item's usage.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetLabel
            (
                const char * strLabel /** Label string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets  the sensitivity of the selection box
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /** type */ 
            );
            /**Returns  the sensitivity of the selection box
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Sensitivity
            (
            );
            /**Sets  the visibility of the selection box
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /** type */ 
            );
            /**Returns  the visibility of the selection box
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Visibility
            (
            );
            /** Indicates that this dialog item is receiving keyboard focus. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFocus
            (
            );
            /** Requests a list entry to be deselected.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DeselectSubItem
            (
                int subItemIndex /** subitemindex */ 
            );
            /** Requests that one or more entries be inserted into the list. You can insert entries at the bottom of the list or at any position within the list.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void InsertSubItem
            (
                int subitemIndex /** Position index where the insertion should be made. If subitem_index equals UF_STYLER_NO_SUB_INDEX, then the new list entries are added to the bottom of the list. */,
                std::vector<NXString> & multiEntries /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Appends one or more entries to be inserted into the list 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void Append
            (
                std::vector<NXString> & multiEntries /**An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list.  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Deletes sub item 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteSubItem
            (
                int subItemIndex /** subitemindex */ 
            );
            /** Requests that a list entry be scrolled up to the first line in the list. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void ShowSubItem
            (
                int subItemIndex /** subitemindex */ 
            );
            /** Sets the value 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetValue
            (
                int value /** value */ 
            );
            /** Gets selected index value  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int GetSelectedIndexValue
            (
            );
            /** Gets selected string  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetSelectedString
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
