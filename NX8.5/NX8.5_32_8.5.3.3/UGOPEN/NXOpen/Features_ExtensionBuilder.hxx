#ifndef NXOpen_FEATURES_EXTENSIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_EXTENSIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ExtensionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ExtensionBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class ExtensionBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class SelectNXObject;
    namespace Features
    {
        class _ExtensionBuilderBuilder;
        class ExtensionBuilderImpl;
        /**
            Represents a @link Features::Extension Features::Extension@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateExtensionBuilder  Features::FeatureCollection::CreateExtensionBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DistanceType </td> <td> 
         
        ByLength </td> </tr> 

        <tr><td> 
         
        ExtendType </td> <td> 
         
        Tangential </td> </tr> 

        <tr><td> 
         
        Length.Value </td> <td> 
         
        10 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        Percent.Value </td> <td> 
         
        10 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        PercentU.Value </td> <td> 
         
        10 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        PercentV.Value </td> <td> 
         
        10 (millimeters part), 1 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  ExtensionBuilder : public Features::FeatureBuilder
        {
            /** The part of the face to extend. */
            public: enum Types
            {
                TypesEdge/** edge */ ,
                TypesCorner/** corner */ 
            };

            /** The extension method. */
            public: enum Extension
            {
                ExtensionTangential/** Tangential extension */,
                ExtensionCircular/** Circular extension */
            };

            /** The distance type. */
            public: enum Distance
            {
                DistanceByLength/** Extend by length */,
                DistanceByPercentage/** Extend by percentage */
            };

            private: ExtensionBuilderImpl * m_extensionbuilder_impl;
            private: friend class  _ExtensionBuilderBuilder;
            protected: ExtensionBuilder();
            public: ~ExtensionBuilder();
            /**Returns  the selection 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * Selection
            (
            );
            /**Returns  the extend type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ExtensionBuilder::Extension ExtendType
            (
            );
            /**Sets  the extend type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetExtendType
            (
                NXOpen::Features::ExtensionBuilder::Extension extendType /** extendtype */ 
            );
            /**Returns  the distance type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ExtensionBuilder::Distance DistanceType
            (
            );
            /**Sets  the distance type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetDistanceType
            (
                NXOpen::Features::ExtensionBuilder::Distance distanceType /** distancetype */ 
            );
            /**Returns  the length 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Length
            (
            );
            /**Returns  the percent 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Percent
            (
            );
            /**Returns  the percent u 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PercentU
            (
            );
            /**Returns  the percent v 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PercentV
            (
            );
            /**Returns  the tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ExtensionBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetType
            (
                NXOpen::Features::ExtensionBuilder::Types type /** type */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
