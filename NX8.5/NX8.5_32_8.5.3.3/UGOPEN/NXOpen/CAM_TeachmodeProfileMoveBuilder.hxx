#ifndef NXOpen_CAM_TEACHMODEPROFILEMOVEBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TEACHMODEPROFILEMOVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TeachmodeProfileMoveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_MoveBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class TeachmodeProfileMoveBuilder;
    }
    namespace CAM
    {
        class FeedsTurnBuilder;
    }
    namespace CAM
    {
        class Inheritable2dLength;
    }
    namespace CAM
    {
        class MoveBuilder;
    }
    namespace CAM
    {
        class TurnCornerControl;
    }
    namespace CAM
    {
        class TurnCutterClearance;
    }
    namespace CAM
    {
        class TurnDirection;
    }
    namespace CAM
    {
        class TurnStock;
    }
    class Point;
    namespace CAM
    {
        class _TeachmodeProfileMoveBuilderBuilder;
        class TeachmodeProfileMoveBuilderImpl;
        /** Represents a TeachmodeProfileMoveBuilder  <br> To create a new instance of this class, use @link CAM::OperationCollection::CreateTeachmodeTurningBuilder  CAM::OperationCollection::CreateTeachmodeTurningBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  TeachmodeProfileMoveBuilder : public CAM::MoveBuilder
        {
            /** the drive geometry types */
            public: enum DriveGeometryTypes
            {
                DriveGeometryTypesPreviousCheck/** Use Previous Drive Geometry */,
                DriveGeometryTypesPreviousDrive/** Use Previous Stop Check Geometry*/,
                DriveGeometryTypesNewDrive/** Use New Drive Geometry */
            };

            /** the start and stop positioning methods */
            public: enum StartStopPositionMethods
            {
                StartStopPositionMethodsDrive/** Use drive geometry start or stop point */,
                StartStopPositionMethodsPoint/** Use selected point */,
                StartStopPositionMethodsCheck/** Use selected check geometry */,
                StartStopPositionMethodsContourPosition/** Use end point of last contouring */
            };

            private: TeachmodeProfileMoveBuilderImpl * m_teachmodeprofilemovebuilder_impl;
            private: friend class  _TeachmodeProfileMoveBuilderBuilder;
            protected: TeachmodeProfileMoveBuilder();
            public: ~TeachmodeProfileMoveBuilder();
            /**Returns  the drive geometry type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TeachmodeProfileMoveBuilder::DriveGeometryTypes DriveGeometryType
            (
            );
            /**Sets  the drive geometry type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDriveGeometryType
            (
                NXOpen::CAM::TeachmodeProfileMoveBuilder::DriveGeometryTypes newValue /** the drive geometry type */
            );
            /**Returns  the direction builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TurnDirection * Direction
            (
            );
            /**Returns  the cutter clearance angles builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TurnCutterClearance * CutterClearance
            (
            );
            /**Returns  the finish stock builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TurnStock * FinishStock
            (
            );
            /**Returns  the Tolerances 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Inheritable2dLength * Tolerances
            (
            );
            /**Returns  the corner control builder for normal corners 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TurnCornerControl * CornerControlNormal
            (
            );
            /**Returns  the corner control builder for shallow corners 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TurnCornerControl * CornerControlShallow
            (
            );
            /**Returns  the feeds builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::FeedsTurnBuilder * Feeds
            (
            );
            /**Returns  the radial safe clearance value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double RadialSafeClearance
            (
            );
            /**Sets  the radial safe clearance value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialSafeClearance
            (
                double newValue /** the radial safe clearance value */
            );
            /**Returns  the axial safe clearance value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double AxialSafeClearance
            (
            );
            /**Sets  the axial safe clearance value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialSafeClearance
            (
                double newValue /** the axial safe clearance value */
            );
            /**Returns  the start and stop before boundary offset status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool StartStopBeforeBoundaryOffset
            (
            );
            /**Sets  the start and stop before boundary offset status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartStopBeforeBoundaryOffset
            (
                bool newValue /** the status value */
            );
            /**Returns  the start position method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TeachmodeProfileMoveBuilder::StartStopPositionMethods StartPositionMethod
            (
            );
            /**Sets  the start position method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartPositionMethod
            (
                NXOpen::CAM::TeachmodeProfileMoveBuilder::StartStopPositionMethods newValue /** the start position method */
            );
            /**Returns  the start point 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * StartPoint
            (
            );
            /**Sets  the start point 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartPoint
            (
                NXOpen::Point * newValue /** the start point */
            );
            /**Returns  the constant stock for start check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double StartCheckConstantStock
            (
            );
            /**Sets  the constant stock for start check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartCheckConstantStock
            (
                double newValue /** the constant stock value */
            );
            /**Returns  the face stock for start check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double StartCheckFaceStock
            (
            );
            /**Sets  the face stock for start check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartCheckFaceStock
            (
                double newValue /** the face stock value */
            );
            /**Returns  the radial stock for start check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double StartCheckRadialStock
            (
            );
            /**Sets  the radial stock for start check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartCheckRadialStock
            (
                double newValue /** the radial stock value */
            );
            /**Returns  the apply engage settings status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ApplyEngageSettings
            (
            );
            /**Sets  the apply engage settings status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetApplyEngageSettings
            (
                bool newValue /** the status value */
            );
            /**Returns  the stop position method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TeachmodeProfileMoveBuilder::StartStopPositionMethods StopPositionMethod
            (
            );
            /**Sets  the stop position method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopPositionMethod
            (
                NXOpen::CAM::TeachmodeProfileMoveBuilder::StartStopPositionMethods newValue /** the stop position method */
            );
            /**Returns  the stop point 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * StopPoint
            (
            );
            /**Sets  the stop point 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopPoint
            (
                NXOpen::Point * newValue /** the stop point */
            );
            /**Returns  the constant stock for stop check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double StopCheckConstantStock
            (
            );
            /**Sets  the constant stock for stop check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopCheckConstantStock
            (
                double newValue /** the constant stock value */
            );
            /**Returns  the face stop for start check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double StopCheckFaceStock
            (
            );
            /**Sets  the face stop for start check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopCheckFaceStock
            (
                double newValue /** the face stock value */
            );
            /**Returns  the radial stock for stop check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double StopCheckRadialStock
            (
            );
            /**Sets  the radial stock for stop check geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopCheckRadialStock
            (
                double newValue /** the radial stock value */
            );
            /**Returns  the apply retract settings status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ApplyRetractSettings
            (
            );
            /**Sets  the apply retract settings status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetApplyRetractSettings
            (
                bool newValue /** the status value */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
