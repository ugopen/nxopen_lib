#ifndef NXOpen_FEATURES_SHIPDESIGN_ROLLINGLINEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHIPDESIGN_ROLLINGLINEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShipDesign_RollingLineBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ShipDesign_RollingLineBuilder.hxx>
#include <NXOpen/GeometricAnalysis_DupinBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace ShipDesign
        {
            class RollingLineBuilder;
        }
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricAnalysis
    {
        class DupinBuilder;
    }
    class Plane;
    class Point;
    class ScCollector;
    namespace Features
    {
        namespace ShipDesign
        {
            class _RollingLineBuilderBuilder;
            class RollingLineBuilderImpl;
            /**
                Represents a @link Features::ShipDesign::RollingLine Features::ShipDesign::RollingLine@endlink  builder. It is used to create and edit a rolling line feature.
                 <br> To create a new instance of this class, use @link Features::ShipCollection::CreateRollingLineBuilder  Features::ShipCollection::CreateRollingLineBuilder @endlink  <br> 
            Default values.
            <table border="1"> 
             
            <tr><th> 
            Property</th>  <th> 
            Value</th> </tr>
            <tr><td> 
             
            Angle.Value </td> <td> 
             
            15.0 </td> </tr> 

            <tr><td> 
             
            AngleDivisions.Value </td> <td> 
             
            3 </td> </tr> 

            <tr><td> 
             
            ConstructionMethodOption </td> <td> 
             
            MarchingAngle </td> </tr> 

            <tr><td> 
             
            DupinIndicatrix.Angle </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            DupinIndicatrix.FlatnessTolerance </td> <td> 
             
            3500 (millimeters part), 137.8 (inches part) </td> </tr> 

            <tr><td> 
             
            DupinIndicatrix.Scale </td> <td> 
             
            1.0 </td> </tr> 

            <tr><td> 
             
            EvaluationPointOption </td> <td> 
             
            SheetMidpoint </td> </tr> 

            <tr><td> 
             
            HideConstructionProcess </td> <td> 
             
            1 </td> </tr> 

            <tr><td> 
             
            Offset.Value </td> <td> 
             
            500.0 (millimeters part), 20.0 (inches part) </td> </tr> 

            <tr><td> 
             
            PlanarRadiusLimit.Value </td> <td> 
             
            3500.0 (millimeters part), 137.8 (inches part) </td> </tr> 

            </table>  

             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  RollingLineBuilder : public Features::FeatureBuilder
            {
                /**
                        The option for the type of manufacturing operation to be performed on the sheet
                        to form it.
                        */
                public: enum Types
                {
                    TypesManual/** Creates a single line on the surface where the maximum force is to be applied. */,
                    TypesPressure/** Create multiple lines on the surface where the tangential for each line is constant on intersecting plane sections. */,
                    TypesGeodesic/** Create a single geodesic line on the surface. */,
                    TypesSteppedPressure/** Create a saw tooth set of curves on the surface where the tangential for each line is constant on intersecting plane sections. */
                };

                /**
                        The option for how the starting point for the evaluation of the sheet is to be created if
                        it is not given.
                        */
                public: enum StartEvaluationTypes
                {
                    StartEvaluationTypesSheetMidpoint/** Use the midpoint of the sheet as the seed point for evaluation. */,
                    StartEvaluationTypesPointOnFace/** Use a point on the selected face to start the evaluation. */,
                    StartEvaluationTypesNewPoint/** Use the newly created, or specified, point as the seed point to start the evaluation. */
                };

                /**
                        The option to specify the method for creation of the pressure line.
                        */
                public: enum ConstructionMethodTypes
                {
                    ConstructionMethodTypesMarchingAngle/** Use an initial value method and march along the varying normals at each subsequent location. */,
                    ConstructionMethodTypesMarchingCurvature/** Use an initial value method and march along the varying normals at each subsequent location adjusting the final direction by the sheet curvature. */,
                    ConstructionMethodTypesParallelPlane/** Use a parallel plane approach to develop the pressure line. */,
                    ConstructionMethodTypesMinimumCurvature/** Use an initial value method and march along the minimum curvature at each subsequent location. */,
                    ConstructionMethodTypesMaximumCurvature/** Use an initial value method and march along the maximum curvature at each subsequent location. */,
                    ConstructionMethodTypesHighlight/** Use an initial value method and march along the highlight (zero degree isocline) at each subsequent location. */,
                    ConstructionMethodTypesAsymptote/** Use an initial value method and march along and create the asymptotic lines. Valid for a surface location that generates a hyperbole or parabola. */
                };

                private: RollingLineBuilderImpl * m_rollinglinebuilder_impl;
                private: friend class  _RollingLineBuilderBuilder;
                protected: RollingLineBuilder();
                public: ~RollingLineBuilder();
                /**Returns  the collection of faces that represent the surface to be analyzed. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * Surface
                (
                );
                /**Returns  the initial flow direction. Not used for @link Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure@endlink .
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Direction * SpecifyDirection
                (
                );
                /**Sets  the initial flow direction. Not used for @link Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure@endlink .
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetSpecifyDirection
                (
                    NXOpen::Direction * specifyDirection /** specifydirection */ 
                );
                /**Returns  the plane orientation to be used for @link Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure@endlink .
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * PlaneOrientation
                (
                );
                /**Sets  the plane orientation to be used for @link Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure@endlink .
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetPlaneOrientation
                (
                    NXOpen::Plane * planeOrientation /** planeorientation */ 
                );
                /**Returns  the option on how to seed the starting point for the evaluation. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::RollingLineBuilder::StartEvaluationTypes EvaluationPointOption
                (
                );
                /**Sets  the option on how to seed the starting point for the evaluation. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetEvaluationPointOption
                (
                    NXOpen::Features::ShipDesign::RollingLineBuilder::StartEvaluationTypes evaluationPointOption /** evaluationpointoption */ 
                );
                /**Returns  the selected point for evaluation when @link Features::ShipDesign::RollingLineBuilder::StartEvaluationTypes Features::ShipDesign::RollingLineBuilder::StartEvaluationTypes@endlink  is
                            @link Features::ShipDesign::RollingLineBuilder::StartEvaluationTypesNewPoint Features::ShipDesign::RollingLineBuilder::StartEvaluationTypesNewPoint@endlink .
                            Not used for @link Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure@endlink . 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * EvaluationPoint
                (
                );
                /**Sets  the selected point for evaluation when @link Features::ShipDesign::RollingLineBuilder::StartEvaluationTypes Features::ShipDesign::RollingLineBuilder::StartEvaluationTypes@endlink  is
                            @link Features::ShipDesign::RollingLineBuilder::StartEvaluationTypesNewPoint Features::ShipDesign::RollingLineBuilder::StartEvaluationTypesNewPoint@endlink .
                            Not used for @link Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure Features::ShipDesign::RollingLineBuilder::Types::SteppedPressure@endlink . 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetEvaluationPoint
                (
                    NXOpen::Point * evaluationPoint /** evaluationpoint */ 
                );
                /**Returns  the value specifying which construction method to use for creating the rolling line. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::RollingLineBuilder::ConstructionMethodTypes ConstructionMethodOption
                (
                );
                /**Sets  the value specifying which construction method to use for creating the rolling line. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetConstructionMethodOption
                (
                    NXOpen::Features::ShipDesign::RollingLineBuilder::ConstructionMethodTypes constructionMethodOption /** constructionmethodoption */ 
                );
                /**Returns  the offset to be applied when marching along the surface to the next point. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Offset
                (
                );
                /**Returns  the angle for either the max amount of rotation at a point for manual type.
                        
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Angle
                (
                );
                /**Returns  the number of divisions for dividing the angle when using a manual type. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * AngleDivisions
                (
                );
                /**Returns  the value specifying if the construction process should be hidden. True indicates that the process should be hidden. Only valid for a manual type rolling line. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: bool HideConstructionProcess
                (
                );
                /**Sets  the value specifying if the construction process should be hidden. True indicates that the process should be hidden. Only valid for a manual type rolling line. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetHideConstructionProcess
                (
                    bool hideConstructionProcess /** hideconstructionprocess */ 
                );
                /**Returns  the maximum radius on the surface to be considered non-planar. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * PlanarRadiusLimit
                (
                );
                /**Returns  the modeling distance tolerance. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double DistanceTolerance
                (
                );
                /**Sets  the modeling distance tolerance. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetDistanceTolerance
                (
                    double distanceTolerance /** distancetolerance */ 
                );
                /**Returns  the modeling angle tolerance. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double AngleTolerance
                (
                );
                /**Sets  the modeling angle tolerance. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetAngleTolerance
                (
                    double angleTolerance /** angletolerance */ 
                );
                /**Returns  the value identifying what type of manufacturing process is to be applied to the surface for bending. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::RollingLineBuilder::Types Type
                (
                );
                /**Sets  the value identifying what type of manufacturing process is to be applied to the surface for bending. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetType
                (
                    NXOpen::Features::ShipDesign::RollingLineBuilder::Types type /** type */ 
                );
                /**Returns  the point specified by the surface selection. This point is set during the UI interaction. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: NXOpen::Point3d PointOnFace
                (
                );
                /**Sets  the point specified by the surface selection. This point is set during the UI interaction. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") OR nx_ship_mfg_prep ("Ship Manufacturing") */
                public: void SetPointOnFace
                (
                    const NXOpen::Point3d & pointOnFace /** pointonface */ 
                );
                /**Returns  the dupin indicatrix for surface analysis. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::DupinBuilder * DupinIndicatrix
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
