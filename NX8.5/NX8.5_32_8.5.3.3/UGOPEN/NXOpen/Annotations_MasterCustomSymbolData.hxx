#ifndef NXOpen_ANNOTATIONS_MASTERCUSTOMSYMBOLDATA_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_MASTERCUSTOMSYMBOLDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_MasterCustomSymbolData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class MasterCustomSymbolData;
    }
    class DisplayableObject;
    class Point;
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class MasterCustomSymbolDataImpl;
        /** Represents master custom symbol data 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  MasterCustomSymbolData : public TransientObject
        {
            private: MasterCustomSymbolDataImpl * m_mastercustomsymboldata_impl;
            /// \cond NX_NO_DOC 
            public: explicit MasterCustomSymbolData(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~MasterCustomSymbolData();
            /**Returns  the master part name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartName
            (
            );
            /**Sets  the master part name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPartName
            (
                const NXString & name /** New master part name */
            );
            /**Sets  the master part name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetPartName
            (
                const char * name /** New master part name */
            );
            /**Returns  the symbol name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SymbolName
            (
            );
            /**Sets  the symbol name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSymbolName
            (
                const NXString & name /** New symbol name */
            );
            /**Sets  the symbol name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetSymbolName
            (
                const char * name /** New symbol name */
            );
            /**Returns  the anchor point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Anchor
            (
            );
            /**Sets  the anchor point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAnchor
            (
                NXOpen::Point * anchor /** New anchor point */
            );
            /** Specify the geometry for this master custom symbol data. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGeometry
            (
                const std::vector<NXOpen::DisplayableObject *> & geom /** symbol geometry */
            );
            /** Get the path for part name  @return   Path 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXString GetPath
            (
            );
            /** Set the valid path for part name 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetPath
            (
                const NXString & path /** New path */
            );
            /** Set the valid path for part name 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            void SetPath
            (
                const char * path /** New path */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
