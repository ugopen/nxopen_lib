#ifndef NXOpen_ANNOTATIONS_TABLESECTIONSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_TABLESECTIONSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_TableSectionStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_TableSectionStyleBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class TableSectionStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _TableSectionStyleBuilderBuilder;
        class TableSectionStyleBuilderImpl;
        /**
            Represents a @link Annotations::TableSectionStyleBuilder Annotations::TableSectionStyleBuilder@endlink .
            This class queries and sets preferences for various symbol type annotations when creating or editing.
            
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  TableSectionStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** the section header location choices */
            public: enum LocationOfHeader
            {
                LocationOfHeaderAbove/** Above */,
                LocationOfHeaderBelow/** Below */,
                LocationOfHeaderNone/** None */
            };

            /** the section continuation property */
            public: enum ContinuationPropertyType
            {
                ContinuationPropertyTypeLeft/** Left */,
                ContinuationPropertyTypeRight/** Right */,
                ContinuationPropertyTypeUp/** Up */,
                ContinuationPropertyTypeDown/** Down */,
                ContinuationPropertyTypeNextSheet/** Next Sheet */
            };

            /** the alignment position*/
            public: enum AlignmentPositionType
            {
                AlignmentPositionTypeTopLeft/** Top Left */,
                AlignmentPositionTypeTopRight/** Top Right */,
                AlignmentPositionTypeBottomLeft/** Bottom Left */,
                AlignmentPositionTypeBottomRight/** Bottom right*/
            };

            /** the display continuation note choices */
            public: enum DisplayContinuationNoteType
            {
                DisplayContinuationNoteTypeNone/** None */,
                DisplayContinuationNoteTypeAbove/** Above */,
                DisplayContinuationNoteTypeBelow/** Below */
            };

            private: TableSectionStyleBuilderImpl * m_tablesectionstylebuilder_impl;
            private: friend class  _TableSectionStyleBuilderBuilder;
            protected: TableSectionStyleBuilder();
            public: ~TableSectionStyleBuilder();
            /**Returns  the location of header 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TableSectionStyleBuilder::LocationOfHeader HeaderLocation
            (
            );
            /**Sets  the location of header 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetHeaderLocation
            (
                NXOpen::Annotations::TableSectionStyleBuilder::LocationOfHeader headerLocation /** headerlocation */ 
            );
            /**Returns  the maximum height of the section 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double MaximumHeight
            (
            );
            /**Sets  the maximum height of the section 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetMaximumHeight
            (
                double maximumHeight /** maximumheight */ 
            );
            /**Returns  the alignment Position of the section 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TableSectionStyleBuilder::AlignmentPositionType AlignmentPosition
            (
            );
            /**Sets  the alignment Position of the section 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAlignmentPosition
            (
                NXOpen::Annotations::TableSectionStyleBuilder::AlignmentPositionType alignmentPosition /** alignmentposition */ 
            );
            /**Returns  the double border
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool DoubleBorder
            (
            );
            /**Sets  the double border
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDoubleBorder
            (
                bool doubleBorder /** doubleborder */ 
            );
            /**Returns  the border offset
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double BorderOffset
            (
            );
            /**Sets  the border offset
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetBorderOffset
            (
                double borderOffset /** borderoffset */ 
            );
            /**Returns  the continuation property
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TableSectionStyleBuilder::ContinuationPropertyType ContinuationProperty
            (
            );
            /**Sets  the continuation property
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetContinuationProperty
            (
                NXOpen::Annotations::TableSectionStyleBuilder::ContinuationPropertyType continuationProperty /** continuationproperty */ 
            );
            /**Returns  the continuation spacing
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double ContinuationSpacing
            (
            );
            /**Sets  the continuation spacing
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetContinuationSpacing
            (
                double spacing /** spacing */ 
            );
            /**Returns  the display continuation note
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TableSectionStyleBuilder::DisplayContinuationNoteType DisplayContinuationNote
            (
            );
            /**Sets  the display continuation note
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDisplayContinuationNote
            (
                NXOpen::Annotations::TableSectionStyleBuilder::DisplayContinuationNoteType displayContinuationNote /** displaycontinuationnote */ 
            );
            /**Returns  the continuation note
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ContinuationNote
            (
            );
            /**Sets  the continuation note
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetContinuationNote
            (
                const NXString & continuationNote /** continuationnote */ 
            );
            /**Sets  the continuation note
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void SetContinuationNote
            (
                const char * continuationNote /** continuationnote */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
