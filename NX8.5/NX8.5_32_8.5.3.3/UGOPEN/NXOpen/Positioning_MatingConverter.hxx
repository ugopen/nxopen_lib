#ifndef NXOpen_POSITIONING_MATINGCONVERTER_HXX_INCLUDED
#define NXOpen_POSITIONING_MATINGCONVERTER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Positioning_MatingConverter.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PartLoadStatus.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_positioning_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Positioning
    {
        class MatingConverter;
    }
    class PartLoadStatus;
    namespace Positioning
    {
        class Constraint;
    }
    namespace Positioning
    {
        class _MatingConverterBuilder;
        class MatingConverterImpl;
        /**
              An instance of this class can be used to convert Mating Conditions
              to Assembly Constraints in its owning assembly or in child parts
              of its owning assembly. The owning assembly is the
              @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink  from which this
              object was obtained using
              @link Assemblies::ComponentAssembly::CreateMatingConverter Assemblies::ComponentAssembly::CreateMatingConverter@endlink .
             <br> Not directly created by user.  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_POSITIONINGEXPORT  MatingConverter : public TaggedObject
        {
            /** Defines in which parts mating conditions will be converted.
                     */
            public: enum PartContext
            {
                PartContextInOwningPart/** Convert mating conditions in the owning part */,
                PartContextInLoadedChildren/** Convert mating conditions in the owning part
                                                                                     and all loaded children. Partially-loaded
                                                                                     children will be fully-loaded. */,
                PartContextInAllChildren/** Convert mating conditions in the owning part
                                                                                     and all children. Partially-loaded and unloaded
                                                                                     children will be fully-loaded. */
            };

            private: MatingConverterImpl * m_matingconverter_impl;
            private: friend class  _MatingConverterBuilder;
            protected: MatingConverter();
            public: ~MatingConverter();
            /**Sets 
                        the current conversion context in which mating conditions will be converted.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetContext
            (
                NXOpen::Positioning::MatingConverter::PartContext context /** The new context */
            );
            /**Returns 
                        the current conversion context in which mating conditions will be converted.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::MatingConverter::PartContext Context
            (
            );
            /**Sets 
                        whether to load unloaded referenced geometry before performing a conversion.
                        When all referenced geometry is loaded the conversion operation is more
                        effective. If it isn't loaded, then the conversion operation will often
                        need to be completed next time the assembly and geometry are loaded
                        together.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetLoadReferencedGeometry
            (
                bool loadGeometry /** Whether to load referenced-geometry */
            );
            /**Returns 
                        whether to load unloaded referenced geometry before performing a conversion.
                        When all referenced geometry is loaded the conversion operation is more
                        effective. If it isn't loaded, then the conversion operation will often
                        need to be completed next time the assembly and geometry are loaded
                        together.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool LoadReferencedGeometry
            (
            );
            /**
                        Converts Mating Conditions to Assembly Constraints according to the
                        properties defined on this @link Positioning::MatingConverter Positioning::MatingConverter@endlink 
                        object.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ConvertMatingConditions
            (
            );
            /**Returns 
                        the load status resulting from a conversion operation. This indicates
                        any problems which arose when loading parts during conversion.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::PartLoadStatus * LoadStatus
            (
            );
            /**
                        Returns all constraints converted by this conversion operation.
                        Use @link Positioning::Constraint::GenerateConversionReport Positioning::Constraint::GenerateConversionReport@endlink 
                        to obtain the conversion status of these constraints.
                     @return  The converted constraints 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Positioning::Constraint *> GetConvertedConstraints
            (
            );
            /**
                        Returns all parts converted by this conversion operation.
                     @return  The converted constraints 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Positioning::Constraint *> GetConvertedParts
            (
            );
            /**Returns 
                        the number of parts parts converted by this conversion operation.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int NumberOfConvertedParts
            (
            );
            /**
                        Returns textual descriptions of the results of the last conversion operation
                     @return  The generated results 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXString> GetLatestResults
            (
                bool showAllResults /** Whether to show results for all converted constraints even if no issues arose during their conversion */
            );
            /**
                        Returns textual descriptions of the results of all prior conversion
                        operations for all the parts described by the current context set using
                        @link Positioning::MatingConverter::SetContext Positioning::MatingConverter::SetContext@endlink .
                     @return  The generated results 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXString> GetResults
            (
                bool showAllResults /** Whether to show results for all converted constraints even if no issues arose during their conversion */
            );
            /**
                        Removes details from the mating conversion results of the individual constraints that were converted.
                        This will be applied to the mating conversion results in the parts described by the current context
                        (determined by @link Positioning::MatingConverter::SetContext Positioning::MatingConverter::SetContext@endlink ). Note that the
                        summary information for each part in the conversion results is not modified by this function.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DeleteResults
            (
            );
            /**
                        Deletes this @link Positioning::MatingConverter Positioning::MatingConverter@endlink  immediately.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Destroy
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
