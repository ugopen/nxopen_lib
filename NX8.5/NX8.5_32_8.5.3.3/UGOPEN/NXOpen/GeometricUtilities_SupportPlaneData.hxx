#ifndef NXOpen_GEOMETRICUTILITIES_SUPPORTPLANEDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_SUPPORTPLANEDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_SupportPlaneData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_SupportPlaneData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class SupportPlaneData;
    }
    class DisplayableObject;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Plane;
    class View;
    namespace GeometricUtilities
    {
        class _SupportPlaneDataBuilder;
        class SupportPlaneDataImpl;
        /** Represents a @link GeometricUtilities::SupportPlaneData GeometricUtilities::SupportPlaneData@endlink  
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  SupportPlaneData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Represents support plane lock status for associative basic curves*/
            public: enum LockPlaneStatus
            {
                LockPlaneStatusNo/** No Lock */,
                LockPlaneStatusAfterFirstConstraint/** Lock after first constraint */,
                LockPlaneStatusAfterSecondConstraint/** Lock after second constraint */,
                LockPlaneStatusAfterThirdConstraint/** Lock after third constraint */,
                LockPlaneStatusAfterFirstAndSecondConstraint/** Lock after first and second constraint */,
                LockPlaneStatusAfterFirstAndThirdConstraint/** Lock after first and third constraint */,
                LockPlaneStatusAfterSecondAndThirdConstraint/** Lock after second and third constraint */,
                LockPlaneStatusAfterAllConstraint/** Lock after all constraint */,
                LockPlaneStatusLockExistingPlane/** Lock support plane using existing face or datum */,
                LockPlaneStatusCenterPointDirection/** Lock support plane using center point and direction, this option should be used for Center Radius Arc only */
            };

            private: SupportPlaneDataImpl * m_supportplanedata_impl;
            private: friend class  _SupportPlaneDataBuilder;
            protected: SupportPlaneData();
            public: ~SupportPlaneData();
            /**Returns  the support plane lock status 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SupportPlaneData::LockPlaneStatus SupportPlaneLockStatus
            (
            );
            /**Sets  the support plane lock status 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSupportPlaneLockStatus
            (
                NXOpen::GeometricUtilities::SupportPlaneData::LockPlaneStatus lockPlaneStatus /** lock plane status */ 
            );
            /**Returns  the work view required when lock plane status is @link GeometricUtilities::SupportPlaneData::LockPlaneStatusAfterFirstConstraint GeometricUtilities::SupportPlaneData::LockPlaneStatusAfterFirstConstraint@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::View * WorkView
            (
            );
            /**Sets  the work view required when lock plane status is @link GeometricUtilities::SupportPlaneData::LockPlaneStatusAfterFirstConstraint GeometricUtilities::SupportPlaneData::LockPlaneStatusAfterFirstConstraint@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetWorkView
            (
                NXOpen::View * workView /** work view */ 
            );
            /**Returns  the support plane
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * SupportPlane
            (
            );
            /**Sets  the support plane
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSupportPlane
            (
                NXOpen::Plane * supportPlane /** supportplane */ 
            );
            /**Returns  the existing face or plane
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject * ExistingPlane
            (
            );
            /**Sets  the existing face or plane
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetExistingPlane
            (
                NXOpen::DisplayableObject * existingPlane /** existingplane */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
