#ifndef NXOpen_FEATURES_SHEETMETAL_AEROJOGGLEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_AEROJOGGLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_AeroJoggleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class AeroJoggleBuilder;
        }
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Plane;
    class ScCollector;
    namespace Features
    {
        namespace SheetMetal
        {
            class _AeroJoggleBuilderBuilder;
            class AeroJoggleBuilderImpl;
            /** Represents a Aerospace Sheet Metal Joggle Builder. 
                     <br> To create a new instance of this class, use @link Features::SheetMetal::AeroSheetmetalManager::CreateJoggleBuilder  Features::SheetMetal::AeroSheetmetalManager::CreateJoggleBuilder @endlink  <br> 
             <br>  Created in NX4.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  AeroJoggleBuilder : public Features::FeatureBuilder
            {
                /** This enum defines the side of a twin joggle
                            only side1 is used for a single joggle 
                            */
                public: enum SideType
                {
                    SideTypeSide1/** Side 1 (only side of single)*/,
                    SideTypeSide2/** Side 2 */
                };

                private: AeroJoggleBuilderImpl * m_aerojogglebuilder_impl;
                private: friend class  _AeroJoggleBuilderBuilder;
                protected: AeroJoggleBuilder();
                public: ~AeroJoggleBuilder();
                /**Sets  the is_twin flag. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetTwin
                (
                    bool isTwin /** is twin */ 
                );
                /**Returns  the is_twin flag. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: bool IsTwin
                (
                );
                /**Sets  the flange 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetBendFaces
                (
                    NXOpen::ScCollector * bendFaces /** bend faces */
                );
                /**Returns  the flange 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: NXOpen::ScCollector * BendFaces
                (
                );
                /** Set the start plane 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetStartPlane
                (
                    NXOpen::Plane * startPlane /** datum plane feature */
                );
                /** The start plane 
                             @return  datum plane feature 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: NXOpen::Plane * GetStartPlane
                (
                );
                /** Set the end plane 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetEndPlane
                (
                    NXOpen::Plane * endPlane /** datum plane feature */
                );
                /** The end plane 
                             @return  datum plane feature 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: NXOpen::Plane * GetEndPlane
                (
                );
                /**Sets  the joggle direction flag. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetFlipJoggleSide
                (
                    bool flipJoggleSide /** flip joggle side */ 
                );
                /**Returns  the joggle direction flag. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: bool FlipJoggleSide
                (
                );
                /** Set the depth expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetDepth
                (
                    const NXString & depthStr /** value of depth expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Set the depth expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                void SetDepth
                (
                    const char * depthStr /** value of depth expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /**Returns  the depth expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: NXOpen::Expression * Depth
                (
                );
                /**Sets  the joggle in flag. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetJoggleIn
                (
                    bool joggleIn /** joggle in */ 
                );
                /**Returns  the joggle in flag. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: bool JoggleIn
                (
                );
                /**Sets  the symmetric flag. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetSymmetric
                (
                    bool isSymmetric /** is symmetric */ 
                );
                /**Returns  the symmetric flag. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: bool IsSymmetric
                (
                );
                /** Set the clearance expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetClearance
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */,
                    const NXString & clearanceStr /** value of clearance expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Set the clearance expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                void SetClearance
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */,
                    const char * clearanceStr /** value of clearance expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** The clearance expression. 
                             @return  clearance expression 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: NXOpen::Expression * GetClearance
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */
                );
                /** Set the runout expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetRunout
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */,
                    const NXString & runoutStr /** value of runout expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Set the runout expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                void SetRunout
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */,
                    const char * runoutStr /** value of runout expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** The runout expression. 
                             @return  runout expression 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: NXOpen::Expression * GetRunout
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */
                );
                /** Set the stationary radius expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetStationaryRadius
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */,
                    const NXString & radiusStr /** value of stationary radius expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Set the stationary radius expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                void SetStationaryRadius
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */,
                    const char * radiusStr /** value of stationary radius expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** The stationary radius expression. 
                             @return  stationary radius expression 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: NXOpen::Expression * GetStationaryRadius
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */
                );
                /** Set the offset radius expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetOffsetRadius
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */,
                    const NXString & radiusStr /** value of offset radius expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Set the offset radius expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                void SetOffsetRadius
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */,
                    const char * radiusStr /** value of offset radius expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** The offset radius expression. 
                             @return  offset radius expression 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: NXOpen::Expression * GetOffsetRadius
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */
                );
                /** Set the Global flag for runout
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetStandardRunout
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */,
                    bool standardRunout /** If true use standard runout */
                );
                /** The global flag for runout
                             @return  If true use standard runout 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: bool GetStandardRunout
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */
                );
                /** Set the Global flag for stationary radius
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetGlobalStationaryRadius
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */,
                    bool globalRadius /** If true use global radius */
                );
                /** The Global flag for stationary radius 
                             @return  If true use global radius 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: bool GetGlobalStationaryRadius
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */
                );
                /** Set the Global flag for offset radius
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetGlobalOffsetRadius
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */,
                    bool globalRadius /** If true use global radius */
                );
                /** The Global flag for offset radius
                             @return  If true use global radius 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: bool GetGlobalOffsetRadius
                (
                    NXOpen::Features::SheetMetal::AeroJoggleBuilder::SideType sideType /** side1/side2 */
                );
                /**Sets  the joggle compensation.
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: void SetJoggleCompensation
                (
                    bool joggleComp /** If true use joggle compensation */
                );
                /**Returns  the joggle compensation.
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") */
                public: bool JoggleCompensation
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
