#ifndef NXOpen_DATUMCONSTRAINT_HXX_INCLUDED
#define NXOpen_DATUMCONSTRAINT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DatumConstraint.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class DatumConstraint;
    class DisplayableObject;
    class Expression;
    class DatumConstraintImpl;
    /** Represents a constraint that specifies the location of a @link Features::DatumFeature Features::DatumFeature@endlink .  <br> To create a new instance of this class, use @link Features::DatumBuilder::CreateConstraint  Features::DatumBuilder::CreateConstraint @endlink  <br> 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  DatumConstraint : public TransientObject
    {
        /** Specifies the distance on the curve as absolute distance or relative distance as percentage */
        public: enum CurveOption
        {
            CurveOptionDistance/** Absolute distance */,
            CurveOptionPercent/** Relative distance as percentage */
        };

        /** Specifies the alternate solution for datum axis using point on curve method */
        public: enum Solution
        {
            SolutionUndefined/** undefined */ ,
            SolutionTangent/** tangent */ ,
            SolutionNormal/** normal */ ,
            SolutionBinormal/** binormal */ ,
            SolutionOppositeTangent/** opposite tangent */ ,
            SolutionOppositeNormal/** opposite normal */ ,
            SolutionOppositeBinormal/** Datum axis at opposite to binormal to curve  */,
            SolutionProject/** This direction is calculated by projecting a point selected along a curve
                                                                            to a line, a datum axis, an edge of a solid, a planar face or a datum plane 
                                                                        */
        };

        /** Specifies different constraint types for selected geometries */
        public: enum Type
        {
            TypeUndefined/** undefined */ ,
            TypeCoincident/** coincident */ ,
            TypeParallel/** parallel */ ,
            TypePerpendicular/** perpendicular */ ,
            TypeCenter/** center */ ,
            TypeTangent/** tangent */ ,
            TypeDistance/** distance */ ,
            TypeAngle/** angle */ ,
            TypeFrenet/** frenet */ 
        };

        private: DatumConstraintImpl * m_datumconstraint_impl;
        /// \cond NX_NO_DOC 
        public: explicit DatumConstraint(void *ptr);
        /// \endcond 
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::DatumConstraint::Type ConstraintType
        (
        );
        /**Sets  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetConstraintType
        (
            NXOpen::DatumConstraint::Type constraintType /** constraint type */ 
        );
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::DisplayableObject * Geometry
        (
        );
        /**Sets  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetGeometry
        (
            NXOpen::DisplayableObject * geometry /** geometry */ 
        );
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::DatumConstraint::CurveOption ArcLengthType
        (
        );
        /**Sets  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetArcLengthType
        (
            NXOpen::DatumConstraint::CurveOption option /** option */ 
        );
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Expression * ArcLength
        (
        );
        /** 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetArcLength
        (
            const NXString & length /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void SetArcLength
        (
            const char * length /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::DatumConstraint::Solution AlternateSolution
        (
        );
        /** 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetAlternateSolution
        (
            NXOpen::DatumConstraint::Solution solution /** solution */ 
        );
        /** 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~DatumConstraint();
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
