#ifndef NXOpen_BASICEFFECTIVITYBUILDER_HXX_INCLUDED
#define NXOpen_BASICEFFECTIVITYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BasicEffectivityBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasicEffectivityBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class BasicEffectivityBuilder;
    class CollaborativeDesign;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class _BasicEffectivityBuilderBuilder;
    class BasicEffectivityBuilderImpl;
    /**   Represent an interface class for basic effectivity block to assign or edit discrete effectivity unit values.
          Also provides method to apply all units or no units effectivity.

     <br>  Created in NX8.5.0.  <br>  
    */
    class NXOPENCPPEXPORT  BasicEffectivityBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
    {
        private: BasicEffectivityBuilderImpl * m_basiceffectivitybuilder_impl;
        private: friend class  _BasicEffectivityBuilderBuilder;
        protected: BasicEffectivityBuilder();
        public: ~BasicEffectivityBuilder();
        /**Returns  the unit effectivity value 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: int UnitEffectivityValue
        (
        );
        /**Sets  the unit effectivity value 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetUnitEffectivityValue
        (
            int unitEffectivity /** uniteffectivity */ 
        );
        /**Returns  the string representation of effectivity 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString EffectivityFormula
        (
        );
        /** Update this builder with new @link CollaborativeDesign CollaborativeDesign@endlink  and effectivity formula 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void UpdateBuilderDetails
        (
            NXOpen::CollaborativeDesign * cd /** cd */ ,
            const std::vector<NXString> & effectivityFormulae /** effectivityformulae */ 
        );
        /** Validate whether the inputs to the component are sufficient for 
                    commit to be called.  If the component is not in a state to commit
                    then an exception is thrown.  For example, if the component requires
                    you to set some property, this method will throw an exception if
                    you haven't set it.  This method throws a not-yet-implemented
                    NXException for some components.
                 @return  Was self validation successful 
         <br>  Created in NX3.0.1.  <br>  
         <br> License requirements : None */
        public: virtual bool Validate
        (
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
