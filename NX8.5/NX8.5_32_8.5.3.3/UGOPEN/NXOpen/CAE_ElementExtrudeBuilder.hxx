#ifndef NXOpen_CAE_ELEMENTEXTRUDEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_ELEMENTEXTRUDEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ElementExtrudeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ElementExtrudeBuilder.hxx>
#include <NXOpen/CAE_ElementTypeBuilder.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ElementExtrudeBuilder;
    }
    class Builder;
    namespace CAE
    {
        class ElementTypeBuilder;
    }
    namespace CAE
    {
        class SelectCAEEdge;
    }
    namespace CAE
    {
        class SelectCAEFaceList;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class Direction;
    class Expression;
    class Point;
    namespace CAE
    {
        class _ElementExtrudeBuilderBuilder;
        class ElementExtrudeBuilderImpl;
        /**
            Represents a @link CAE::ElementExtrudeBuilder CAE::ElementExtrudeBuilder@endlink 
             <br> To create a new instance of this class, use @link CAE::NodeElementManager::CreateElementExtrudeBuilder  CAE::NodeElementManager::CreateElementExtrudeBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ElementExtrudeBuilder : public Builder
        {
            /** Dimension of element to be created */
            public: enum ElemDimType
            {
                ElemDimTypeBeam/** beam*/,
                ElemDimTypeShell/** shell*/
            };

            /**  Option to create new mesh or add to existing mesh */
            public: enum NewMeshType
            {
                NewMeshTypeCreate/** create new mesh*/,
                NewMeshTypeExisting/** add to existing mesh*/
            };

            /** Extrusion method */
            public: enum MethodType
            {
                MethodTypeVector/** along vector */,
                MethodTypePath/** along path*/,
                MethodTypeProjSurface/** project to surface*/,
                MethodTypeElemNormal/** along element normal*/
            };

            /** Distance option */
            public: enum DistanceType
            {
                DistanceTypePerCopy/** per copy distance*/,
                DistanceTypeTotal/** total distance*/
            };

            private: ElementExtrudeBuilderImpl * m_elementextrudebuilder_impl;
            private: friend class  _ElementExtrudeBuilderBuilder;
            protected: ElementExtrudeBuilder();
            public: ~ElementExtrudeBuilder();
            /**Returns  the element dimension option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementExtrudeBuilder::ElemDimType ElementDimensionOption
            (
            );
            /**Sets  the element dimension option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementDimensionOption
            (
                NXOpen::CAE::ElementExtrudeBuilder::ElemDimType elementDimensionOption /** elementdimensionoption */ 
            );
            /**Returns  the element type builder.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ElementTypeBuilder * ElementType
            (
            );
            /**Returns  the element neutral name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NeutralName
            (
            );
            /**Sets  the element neutral name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNeutralName
            (
                const NXString & neutralName /** neutralname */ 
            );
            /**Sets  the element neutral name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetNeutralName
            (
                const char * neutralName /** neutralname */ 
            );
            /**Returns  the mesh collector name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CollectorName
            (
            );
            /**Sets  the mesh collector name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCollectorName
            (
                const NXString & collectorName /** collectorname */ 
            );
            /**Sets  the mesh collector name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetCollectorName
            (
                const char * collectorName /** collectorname */ 
            );
            /**Returns  the new mesh option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementExtrudeBuilder::NewMeshType NewMeshOption
            (
            );
            /**Sets  the new mesh option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNewMeshOption
            (
                NXOpen::CAE::ElementExtrudeBuilder::NewMeshType newMeshOption /** newmeshoption */ 
            );
            /**Returns  the mesh name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MeshName
            (
            );
            /**Sets  the mesh name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMeshName
            (
                const NXString & meshName /** meshname */ 
            );
            /**Sets  the mesh name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetMeshName
            (
                const char * meshName /** meshname */ 
            );
            /**Returns  the selected elements 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * Elements
            (
            );
            /**Returns  the number of copy 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfCopy
            (
            );
            /**Sets  the number of copy 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNumberOfCopy
            (
                int numberOfCopy /** numberofcopy */ 
            );
            /**Returns  the method option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementExtrudeBuilder::MethodType MethodOption
            (
            );
            /**Sets  the method option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMethodOption
            (
                NXOpen::CAE::ElementExtrudeBuilder::MethodType methodOption /** methodoption */ 
            );
            /**Returns  the vector when extrude along vector 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector when extrude along vector 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the face when extrude by project to surface 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectCAEFaceList * Face
            (
            );
            /**Returns  the percent offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double PercentOffset
            (
            );
            /**Sets  the percent offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPercentOffset
            (
                double percentOffset /** percentoffset */ 
            );
            /**Returns  the edge when extrude along path 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectCAEEdge * Edge
            (
            );
            /** Flip the direction of extrude - not journalled 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void Flip
            (
            );
            /**Returns  the flip state from the builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int FlipState
            (
            );
            /**Sets  the flip state from the builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetFlipState
            (
                int flipstate /** flipstate */ 
            );
            /**Returns  the distance option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementExtrudeBuilder::DistanceType DistanceOption
            (
            );
            /**Sets  the distance option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetDistanceOption
            (
                NXOpen::CAE::ElementExtrudeBuilder::DistanceType distanceOption /** distanceoption */ 
            );
            /**Returns  the distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Distance
            (
            );
            /**Returns  the twist origin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * TwistOrigin
            (
            );
            /**Sets  the twist origin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetTwistOrigin
            (
                NXOpen::Point * twistOrigin /** twistorigin */ 
            );
            /**Returns  the twist angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TwistAngle
            (
            );
            /**Returns  the label 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Label
            (
            );
            /**Sets  the label 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabel
            (
                int label /** label */ 
            );
            /**Returns  the increment 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Increment
            (
            );
            /**Sets  the increment 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetIncrement
            (
                int increment /** increment */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
