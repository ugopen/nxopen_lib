#ifndef NXOpen_ANNOTATIONS_DIMENSIONPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DIMENSIONPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DimensionPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_ChamferDimensionPreferences.hxx>
#include <NXOpen/Annotations_DiameterRadiusPreferences.hxx>
#include <NXOpen/Annotations_NarrowDimensionPreferences.hxx>
#include <NXOpen/Annotations_OrdinateDimensionPreferences.hxx>
#include <NXOpen/Annotations_UnitsFormatPreferences.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class DimensionPreferences;
    }
    namespace Annotations
    {
        class ChamferDimensionPreferences;
    }
    namespace Annotations
    {
        class DiameterRadiusPreferences;
    }
    namespace Annotations
    {
        class NarrowDimensionPreferences;
    }
    namespace Annotations
    {
        class OrdinateDimensionPreferences;
    }
    namespace Annotations
    {
        class UnitsFormatPreferences;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class DimensionPreferencesImpl;
        /** Represents dimension preferences 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  DimensionPreferences : public TransientObject
        {
            private: DimensionPreferencesImpl * m_dimensionpreferences_impl;
            /// \cond NX_NO_DOC 
            public: explicit DimensionPreferences(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~DimensionPreferences();
            /**Returns  the primary dimension and tolerance fraction denominator 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FractionDenominatorFormat PrimaryDimensionFractionDenominator
            (
            );
            /**Sets  the primary dimension and tolerance fraction denominator 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrimaryDimensionFractionDenominator
            (
                NXOpen::Annotations::FractionDenominatorFormat fractionDenominator /** New primary dimension and tolerance fraction denominator */
            );
            /**Returns  the dual dimension and tolerance fraction denominator 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FractionDenominatorFormat DualDimensionFractionDenominator
            (
            );
            /**Sets  the dual dimension and tolerance fraction denominator 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDualDimensionFractionDenominator
            (
                NXOpen::Annotations::FractionDenominatorFormat fractionDenominator /** New dual dimension and tolerance fraction denominator */
            );
            /**Returns  the dimension text placement 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TextPlacement TextPlacement
            (
            );
            /**Sets  the dimension text placement 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTextPlacement
            (
                NXOpen::Annotations::TextPlacement placement /** New dimension text placement */
            );
            /**Returns  the extension line display  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ExtensionLineDisplay ExtensionLineDisplay
            (
            );
            /**Sets  the extension line display  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExtensionLineDisplay
            (
                NXOpen::Annotations::ExtensionLineDisplay display /** New extension line display */
            );
            /**Returns  the arrow display 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ArrowDisplay ArrowDisplay
            (
            );
            /**Sets  the arrow display 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetArrowDisplay
            (
                NXOpen::Annotations::ArrowDisplay display /** New arrow display */
            );
            /**Returns  the flag indicating whether to display line between arrows 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayLineBetweenArrows
            (
            );
            /**Sets  the flag indicating whether to display line between arrows 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayLineBetweenArrows
            (
                bool displayLineBetweenArrows /** Flag indicating whether to display line between arrows */
            );
            /**Returns  the text orientation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TextOrientation TextOrientation
            (
            );
            /**Sets  the text orientation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTextOrientation
            (
                NXOpen::Annotations::TextOrientation orientation /** New dimension text orientation */
            );
            /**Returns  the angle if text orientation is 
                        @link Annotations::TextOrientationByAngle Annotations::TextOrientationByAngle@endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double TextOrienationAngle
            (
            );
            /**Sets  the angle if text orientation is 
                        @link Annotations::TextOrientationByAngle Annotations::TextOrientationByAngle@endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTextOrienationAngle
            (
                double textOrientationAngle /** New dimension text orienation angle */
            );
            /**Returns  the offset between dimension lines of baseline dimensions 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double BaselineOffset
            (
            );
            /**Sets  the offset between dimension lines of baseline dimensions 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBaselineOffset
            (
                double baselineOffset /** New baseline offset */
            );
            /**Returns  the offset between dimension lines of chain dimensions 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double ChainOffset
            (
            );
            /**Sets  the offset between dimension lines of chain dimensions 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetChainOffset
            (
                double chainOffset /** New chain offset */
            );
            /**Returns  the flag indicating whether the dimension is a reference dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsReferenceDimension
            (
            );
            /**Sets  the flag indicating whether the dimension is a reference dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReferenceDimension
            (
                bool referenceDimension /** Flag indicating whether dimension is reference dimension */
            );
            /**Returns  the flag indicating whether the dimension is an inspection dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsInspectionDimension
            (
            );
            /**Sets  the flag indicating whether the dimension is an inspection dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInspectionDimension
            (
                bool inspectionDimension /** Flag indicating whether dimension is inspection dimension */
            );
            /**Returns  the trim dimension line style 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TrimDimensionLineStyle TrimDimensionLineStyle
            (
            );
            /**Sets  the trim dimension line style 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrimDimensionLineStyle
            (
                NXOpen::Annotations::TrimDimensionLineStyle trimDimLine /** Whether Dimension line will be trimmed when text crosses both extension lines */
            );
            /** Returns the units and format preferences  @return  Units and Format preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::UnitsFormatPreferences * GetUnitsFormatPreferences
            (
            );
            /** Sets the units and format preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUnitsFormatPreferences
            (
                NXOpen::Annotations::UnitsFormatPreferences * preferences /** New Units and Format preferences */
            );
            /** Returns the narrow dimension preferences  @return  Narrow dimension preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::NarrowDimensionPreferences * GetNarrowDimensionPreferences
            (
            );
            /** Sets the narrow dimension preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNarrowDimensionPreferences
            (
                NXOpen::Annotations::NarrowDimensionPreferences * preferences /** New narrow dimension preferences */
            );
            /** Returns the diameter and radius preferences  @return  Diameter and Radius preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DiameterRadiusPreferences * GetDiameterRadiusPreferences
            (
            );
            /** Sets the diameter and radius preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDiameterRadiusPreferences
            (
                NXOpen::Annotations::DiameterRadiusPreferences * preferences /** New diameter and radius preferences */
            );
            /** Returns the chamfer dimension preferences  @return  Chamfer dimension preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ChamferDimensionPreferences * GetChamferDimensionPreferences
            (
            );
            /** Sets the chamfer dimension preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetChamferDimensionPreferences
            (
                NXOpen::Annotations::ChamferDimensionPreferences * preferences /** New chamfer dimension preferences */
            );
            /** Returns the ordinate dimension preferences  @return  Ordinate dimension preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OrdinateDimensionPreferences * GetOrdinateDimensionPreferences
            (
            );
            /** Sets the ordinate dimension preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOrdinateDimensionPreferences
            (
                NXOpen::Annotations::OrdinateDimensionPreferences * preferences /** New ordinate dimension preferences */
            );
            /**Returns  the zero tolerance display style 
             <br>  @deprecated Deprecated in NX7.5.0.  Use @link Annotations::LinearTolerance Annotations::LinearTolerance@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0.  Use Annotations::LinearTolerance instead.") NXOpen::Annotations::ZeroToleranceDisplayStyle ZeroToleranceDisplayStyle
            (
            );
            /**Sets  the zero tolerance display style 
             <br>  @deprecated Deprecated in NX7.5.0.  Use @link Annotations::LinearTolerance Annotations::LinearTolerance@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0.  Use Annotations::LinearTolerance instead.") void SetZeroToleranceDisplayStyle
            (
                NXOpen::Annotations::ZeroToleranceDisplayStyle zeroDisplayStyle /** zero display style */ 
            );
            /**Returns  the tolerance limit fit deviation 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString LimitFitDeviation
            (
            );
            /**Sets  the tolerance limit fit deviation 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLimitFitDeviation
            (
                const NXString & fitDeviation /** New limit fit deviation */
            );
            /**Sets  the tolerance limit fit deviation 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void SetLimitFitDeviation
            (
                const char * fitDeviation /** New limit fit deviation */
            );
            /**Returns  the tolerance limit fit grade 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int LimitFitGrade
            (
            );
            /**Sets  the tolerance limit fit grade 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLimitFitGrade
            (
                int fitGrade /** New Limit fit grade */
            );
            /**Returns  the tolerance limit fit display style 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FitDisplayStyle LimitFitDisplayStyle
            (
            );
            /**Sets  the tolerance limit fit display style 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLimitFitDisplayStyle
            (
                NXOpen::Annotations::FitDisplayStyle fitDisplayStyle /** New limit tolerance display style */
            );
            /**Returns  the tolerance limit fit ansi hole type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FitAnsiHoleType LimitFitAnsiHoleType
            (
            );
            /**Sets  the tolerance limit fit ansi hole type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLimitFitAnsiHoleType
            (
                NXOpen::Annotations::FitAnsiHoleType fitHoleType /** New limit tolerance ansi hole type */
            );
            /**Returns  the True Length Text Position 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TrueLengthTextPosition TrueLengthTextPosition
            (
            );
            /**Sets  the True Length Text Position 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrueLengthTextPosition
            (
                NXOpen::Annotations::TrueLengthTextPosition trueLengthTextPosition /** New True length Text position */
            );
            /**Returns  the flag indicating true-length text for the dimension 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TrueLengthText
            (
            );
            /**Sets  the flag indicating true-length text for the dimension 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrueLengthText
            (
                const NXString & trueLengthText /** String indicating true length text for dimension */
            );
            /**Sets  the flag indicating true-length text for the dimension 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetTrueLengthText
            (
                const char * trueLengthText /** String indicating true length text for dimension */
            );
            /**Returns  the flag indicating whether the Reverse Arrow Direction is set on dimension or not
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseArrowDirection
            (
            );
            /**Sets  the flag indicating whether the Reverse Arrow Direction is set on dimension or not
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReverseArrowDirection
            (
                bool reverseArrowDirection /** New flag for reverse arrow direction */
            );
            /**Returns  the flag indicating whether prefix suffix reference toggle is turned on or not 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PrefixSuffixReference
            (
            );
            /**Sets  the flag indicating whether prefix suffix reference toggle is turned on or not 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPrefixSuffixReference
            (
                bool prefixSuffixReference /** flag for prefix suffix reference */
            );
            /**Returns  the prefix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ReferenceDimensionPrefix
            (
            );
            /**Sets  the prefix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetReferenceDimensionPrefix
            (
                const NXString & prefix /** New prefix characters for reference dimension */
            );
            /**Sets  the prefix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetReferenceDimensionPrefix
            (
                const char * prefix /** New prefix characters for reference dimension */
            );
            /**Returns  the suffix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ReferenceDimensionSuffix
            (
            );
            /**Sets  the suffix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetReferenceDimensionSuffix
            (
                const NXString & suffix /** New suffix characters for reference dimension */
            );
            /**Sets  the suffix characters for reference dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetReferenceDimensionSuffix
            (
                const char * suffix /** New suffix characters for reference dimension */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
