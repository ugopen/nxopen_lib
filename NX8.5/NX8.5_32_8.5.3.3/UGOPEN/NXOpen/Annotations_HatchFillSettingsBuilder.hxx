#ifndef NXOpen_ANNOTATIONS_HATCHFILLSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_HATCHFILLSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_HatchFillSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_HatchFillSettingsBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class HatchFillSettingsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace Annotations
    {
        class _HatchFillSettingsBuilderBuilder;
        class HatchFillSettingsBuilderImpl;
        /** This class is used to construct the Crosshatch and area Fill setting block . 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  HatchFillSettingsBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** the valid types of hatch objects */
            public: enum AnnotationTypes
            {
                AnnotationTypesCrosshatch/** Crosshatch */,
                AnnotationTypesAreaFill/** Area Fill  */
            };

            private: HatchFillSettingsBuilderImpl * m_hatchfillsettingsbuilder_impl;
            private: friend class  _HatchFillSettingsBuilderBuilder;
            protected: HatchFillSettingsBuilder();
            public: ~HatchFillSettingsBuilder();
            /**Returns  the type of hatch object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::HatchFillSettingsBuilder::AnnotationTypes AnnotationType
            (
            );
            /**Sets  the type of hatch object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAnnotationType
            (
                NXOpen::Annotations::HatchFillSettingsBuilder::AnnotationTypes type /** type */ 
            );
            /**Returns  the crosshatch file 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString CrosshatchFile
            (
            );
            /**Sets  the crosshatch file 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCrosshatchFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the crosshatch file 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetCrosshatchFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the pattern 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString Pattern
            (
            );
            /**Sets  the pattern 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPattern
            (
                const NXString & identifier /** identifier */ 
            );
            /**Sets  the pattern 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetPattern
            (
                const char * identifier /** identifier */ 
            );
            /**Returns  the distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double Distance
            (
            );
            /**Sets  the distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the area fill material 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AreaFillMaterial Material
            (
            );
            /**Sets  the area fill material 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMaterial
            (
                NXOpen::Annotations::AreaFillMaterial areaFillMaterial /** areafillmaterial */ 
            );
            /**Returns  the scale 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double Scale
            (
            );
            /**Sets  the scale 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  the angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double Angle
            (
            );
            /**Sets  the angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the areafill angle 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: double AreafillAngle
            (
            );
            /**Sets  the areafill angle 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAreafillAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * Color
            (
            );
            /**Sets  the color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the width 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth Width
            (
            );
            /**Sets  the width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetWidth
            (
                NXOpen::Annotations::LineWidth width /** width */ 
            );
            /**Returns  the tolerance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /** Finds the crosshatch file from pattern. May be blank if not found  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString FindCrosshatchFile
            (
                const NXString & identifier /** identifier */ 
            );
            /** Finds the crosshatch file from pattern. May be blank if not found  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            NXString FindCrosshatchFile
            (
                const char * identifier /** identifier */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
