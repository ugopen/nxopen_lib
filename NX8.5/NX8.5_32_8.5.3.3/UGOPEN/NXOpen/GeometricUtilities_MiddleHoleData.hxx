#ifndef NXOpen_GEOMETRICUTILITIES_MIDDLEHOLEDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_MIDDLEHOLEDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_MiddleHoleData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/GeometricUtilities_MiddleHoleData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class MiddleHoleData;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _MiddleHoleDataBuilder;
        class MiddleHoleDataImpl;
        /** Represents a @link GeometricUtilities::MiddleHoleData GeometricUtilities::MiddleHoleData@endlink  
         <br>  Created in NX5.0.2.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  MiddleHoleData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: MiddleHoleDataImpl * m_middleholedata_impl;
            private: friend class  _MiddleHoleDataBuilder;
            protected: MiddleHoleData();
            public: ~MiddleHoleData();
            /**Returns  the match dim of start hole 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: bool MatchDimOfStartHole
            (
            );
            /**Sets  the match dim of start hole 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchDimOfStartHole
            (
                bool matchDimOfStartHole /** matchdimofstarthole */ 
            );
            /**Returns  the fit option
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXString FitOption
            (
            );
            /**Sets  the fit option
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFitOption
            (
                const NXString & fitOption /** fitoption */ 
            );
            /**Sets  the fit option
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetFitOption
            (
                const char * fitOption /** fitoption */ 
            );
            /**Returns  the hole diameter 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HoleDiameter
            (
            );
            /**Returns  the start chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: bool StartChamferEnabled
            (
            );
            /**Sets  the start chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartChamferEnabled
            (
                bool startChamferEnabled /** startchamferenabled */ 
            );
            /**Returns  the start chamfer offset 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StartChamferOffset
            (
            );
            /**Returns  the start chamfer angle 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StartChamferAngle
            (
            );
            /**Returns  the end chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: bool EndChamferEnabled
            (
            );
            /**Sets  the end chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndChamferEnabled
            (
                bool endChamferEnabled /** endchamferenabled */ 
            );
            /**Returns  the end chamfer offset 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EndChamferOffset
            (
            );
            /**Returns  the end chamfer angle 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EndChamferAngle
            (
            );
            /**Returns  the boolean operation 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
