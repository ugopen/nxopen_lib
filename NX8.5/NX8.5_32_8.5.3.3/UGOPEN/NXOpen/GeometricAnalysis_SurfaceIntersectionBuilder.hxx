#ifndef NXOpen_GEOMETRICANALYSIS_SURFACEINTERSECTIONBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SURFACEINTERSECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SurfaceIntersectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricAnalysis_SurfaceIntersectionBuilder.hxx>
#include <NXOpen/GeometricUtilities_CombOptionsBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class SurfaceIntersectionBuilder;
    }
    class Builder;
    class Direction;
    namespace GeometricUtilities
    {
        class CombOptionsBuilder;
    }
    class ScCollector;
    namespace GeometricAnalysis
    {
        class _SurfaceIntersectionBuilderBuilder;
        class SurfaceIntersectionBuilderImpl;
        /** Represents a @link GeometricAnalysis::SurfaceIntersection GeometricAnalysis::SurfaceIntersection@endlink  builder  <br> To create a new instance of this class, use @link GeometricAnalysis::AnalysisObjectCollection::CreateSurfaceIntersectionBuilder  GeometricAnalysis::AnalysisObjectCollection::CreateSurfaceIntersectionBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CalculationMethod </td> <td> 
         
        Curvature </td> </tr> 

        <tr><td> 
         
        DynamicProjection </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        NeedleDirection </td> <td> 
         
        Outside </td> </tr> 

        <tr><td> 
         
        ProjectionNormalFace </td> <td> 
         
        FaceSet1 </td> </tr> 

        <tr><td> 
         
        ProjectionOption </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        ProjectionXYZ </td> <td> 
         
        X </td> </tr> 

        <tr><td> 
         
        ScalingMethod </td> <td> 
         
        Linear </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICANALYSISEXPORT  SurfaceIntersectionBuilder : public Builder
        {
            /** Projection  types */
            public: enum ProjectionTypes
            {
                ProjectionTypesNone/** no projection  */,
                ProjectionTypesNormal/** face normal */,
                ProjectionTypesVector/** specify vector */,
                ProjectionTypesView/** view plane     */,
                ProjectionTypesXyz/** specify x,y,z plane */
            };

            /** Enumeration for X, Y or Z projection plane */
            public: enum XyzTypes
            {
                XyzTypesX/** x-axis plane */,
                XyzTypesY/** y-axis plane */,
                XyzTypesZ/** z-axis plane */
            };

            /** Enumeration for face normal */
            public: enum NormalTypes
            {
                NormalTypesFaceSet1/** linear needle */,
                NormalTypesFaceSet2/** logarithmic needle */
            };

            /** Enumeration for label computation method */
            public: enum LabelValues
            {
                LabelValuesCurvature/** label showing curvature value */,
                LabelValuesRadiusOfCurvature/** label showing radius of curvature value */
            };

            /** Enumeration for needle direction type */
            public: enum DirectionTypes
            {
                DirectionTypesInside/** needle pointing inside  */,
                DirectionTypesOutside/** needle pointing outside */
            };

            /** Enumeration for needle calculation method */
            public: enum CalculationTypes
            {
                CalculationTypesCurvature/** needle of curvature value */,
                CalculationTypesRadiusofCurvature/** needle of radius of curvature value */
            };

            /** Enumeration for needle display type */
            public: enum ScalingTypes
            {
                ScalingTypesLinear/** linear needle */,
                ScalingTypesLogarithmic/** logarithmic needle */
            };

            private: SurfaceIntersectionBuilderImpl * m_surfaceintersectionbuilder_impl;
            private: friend class  _SurfaceIntersectionBuilderBuilder;
            protected: SurfaceIntersectionBuilder();
            public: ~SurfaceIntersectionBuilder();
            /**Returns  the first selected face set 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FirstFaceSet
            (
            );
            /**Returns  the second selected face set 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SecondFaceSet
            (
            );
            /**Returns  the projection option
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::ProjectionTypes ProjectionOption
            (
            );
            /**Sets  the projection option
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetProjectionOption
            (
                NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::ProjectionTypes projectionOption /** projectionoption */ 
            );
            /**Returns  the xyz projection 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::XyzTypes ProjectionXYZ
            (
            );
            /**Sets  the xyz projection 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetProjectionXYZ
            (
                NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::XyzTypes projectionXYZ /** projectionxyz */ 
            );
            /**Returns  the face normal projection 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::NormalTypes ProjectionNormalFace
            (
            );
            /**Sets  the face normal projection 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetProjectionNormalFace
            (
                NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::NormalTypes normalFace /** normalface */ 
            );
            /**Returns  the dynamic projection 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool DynamicProjection
            (
            );
            /**Sets  the dynamic projection 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetDynamicProjection
            (
                bool dynamicProjection /** dynamicprojection */ 
            );
            /** Update work view with a given view matrix 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void UpdateWorkView
            (
            );
            /**Returns  the needle direction 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::DirectionTypes NeedleDirection
            (
            );
            /**Sets  the needle direction 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetNeedleDirection
            (
                NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::DirectionTypes needleDirection /** needledirection */ 
            );
            /**Returns  the vector 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the calculation method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::CalculationTypes CalculationMethod
            (
            );
            /**Sets  the calculation method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetCalculationMethod
            (
                NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::CalculationTypes calculationMethod /** calculationmethod */ 
            );
            /**Returns  the scaling method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::ScalingTypes ScalingMethod
            (
            );
            /**Sets  the scaling method 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetScalingMethod
            (
                NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder::ScalingTypes scalingMethod /** scalingmethod */ 
            );
            /**Returns  the comb display block options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CombOptionsBuilder * CombOptions
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
