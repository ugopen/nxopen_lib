#ifndef NXOpen_WELD_DATUMCOMMONBUILDER_HXX_INCLUDED
#define NXOpen_WELD_DATUMCOMMONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_DatumCommonBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Weld_CharacteristicsBuilder.hxx>
#include <NXOpen/Weld_DatumCommonBuilder.hxx>
#include <NXOpen/libnxopencpp_weld_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Weld
    {
        class DatumCommonBuilder;
    }
    namespace Assemblies
    {
        class SelectComponentList;
    }
    class Axis;
    class Builder;
    class Direction;
    namespace Weld
    {
        class CharacteristicsBuilder;
    }
    namespace Weld
    {
        class _DatumCommonBuilderBuilder;
        class DatumCommonBuilderImpl;
        /** Used to create or edit a @link Weld::DatumSurface Weld::DatumSurface@endlink   or @link Weld::DatumPin Weld::DatumPin@endlink  feature. <br> This is an abstract class and cannot be directly instantiated  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_WELDEXPORT  DatumCommonBuilder : public Builder
        {
            /** Settings for the method used to define the control direction. */
            public: enum ControlMethodTypes
            {
                ControlMethodTypesPrincipalAxis/** A principal axis. Absolute X,Y, or Z */,
                ControlMethodTypesUseSectionPlane/** Not a principal axis, use Section Plane */
            };

            /** Settings for defining the solid type to create for the datum object. */
            public: enum SolidTypes
            {
                SolidTypesSphere/** Datum solid will be a sphere   */,
                SolidTypesCylinder/** Datum solid will be a cylinder */,
                SolidTypesCone/** Datum solid will be a cone     */
            };

            /** Settings to define the creation direction. */
            public: enum CreationDirectionMethods
            {
                CreationDirectionMethodsDefault/** Use the default construction method */,
                CreationDirectionMethodsOpposite/** Reverse the construction orientation */
            };

            private: DatumCommonBuilderImpl * m_datumcommonbuilder_impl;
            private: friend class  _DatumCommonBuilderBuilder;
            protected: DatumCommonBuilder();
            public: ~DatumCommonBuilder();
            /**Returns  the custom name used to create the datum  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString CustomTypeName
            (
            );
            /**Sets  the custom name used to create the datum  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCustomTypeName
            (
                const NXString & customTypeName /** Custom datum type from customer defaults to use  */
            );
            /**Sets  the custom name used to create the datum  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            void SetCustomTypeName
            (
                const char * customTypeName /** Custom datum type from customer defaults to use  */
            );
            /**Returns  the indicator if this should be marked as a derived from another datum 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool Derived
            (
            );
            /**Sets  the indicator if this should be marked as a derived from another datum 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetDerived
            (
                bool derived /** derived */ 
            );
            /**Returns  the direction axis 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * DirectionAxis
            (
            );
            /**Sets  the direction axis 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetDirectionAxis
            (
                NXOpen::Axis * directionAxis /** directionaxis */ 
            );
            /**Returns  the project along direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ProjectAlongDirection
            (
            );
            /**Sets  the project along direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetProjectAlongDirection
            (
                bool projectAlongDirection /** projectalongdirection */ 
            );
            /**Returns  the section plane normal 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SectionPlaneNormal
            (
            );
            /**Sets  the section plane normal 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSectionPlaneNormal
            (
                NXOpen::Direction * sectionPlaneNormal /** sectionplanenormal */ 
            );
            /**Returns  the additional references 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponentList * AdditionalReferences
            (
            );
            /**Returns  the control method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::DatumCommonBuilder::ControlMethodTypes ControlMethod
            (
            );
            /**Sets  the control method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetControlMethod
            (
                NXOpen::Weld::DatumCommonBuilder::ControlMethodTypes controlMethod /** controlmethod */ 
            );
            /**Returns  the solid body 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::DatumCommonBuilder::SolidTypes SolidType
            (
            );
            /**Sets  the solid body 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSolidType
            (
                NXOpen::Weld::DatumCommonBuilder::SolidTypes solidType /** solidtype */ 
            );
            /**Returns  the principal axis x 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PrincipalAxisX
            (
            );
            /**Sets  the principal axis x 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetPrincipalAxisX
            (
                bool principalAxisX /** principalaxisx */ 
            );
            /**Returns  the principal axis y 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PrincipalAxisY
            (
            );
            /**Sets  the principal axis y 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetPrincipalAxisY
            (
                bool principalAxisY /** principalaxisy */ 
            );
            /**Returns  the principal axis z 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PrincipalAxisZ
            (
            );
            /**Sets  the principal axis z 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetPrincipalAxisZ
            (
                bool principalAxisZ /** principalaxisz */ 
            );
            /**Returns  the characteristics 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::CharacteristicsBuilder * Characteristics
            (
            );
            /**Returns  the modeling tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ModelingTolerance
            (
            );
            /**Sets  the modeling tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetModelingTolerance
            (
                double modelingTolerance /** modelingtolerance */ 
            );
            /**Returns  the plane height along the direction axis. Controls the boundary of a datum plane. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double PlaneHeight
            (
            );
            /**Sets  the plane height along the direction axis. Controls the boundary of a datum plane. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetPlaneHeight
            (
                double planeHeight /** planeheight */ 
            );
            /**Returns  the plane width perpendicular to the direction axis. Controls the boundary of a datum plane. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double PlaneWidth
            (
            );
            /**Sets  the plane width perpendicular to the direction axis. Controls the boundary of a datum plane. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetPlaneWidth
            (
                double planeWidth /** planewidth */ 
            );
            /**Returns  the length of the datum axis vector created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double DirectionLength
            (
            );
            /**Sets  the length of the datum axis vector created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetDirectionLength
            (
                double directionLength /** directionlength */ 
            );
            /**Returns  the creation direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::DatumCommonBuilder::CreationDirectionMethods CreationDirection
            (
            );
            /**Sets  the creation direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCreationDirection
            (
                NXOpen::Weld::DatumCommonBuilder::CreationDirectionMethods creationDirection /** creationdirection */ 
            );
            /**Returns  the radius of the solid sphere, cylinder or cone created.   
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double CustomRadius
            (
            );
            /**Sets  the radius of the solid sphere, cylinder or cone created.   
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCustomRadius
            (
                double customRadius /** customradius */ 
            );
            /**Returns  the length above the datum reference point. This is used if a cylinder or cone are created. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double CustomAboveLength
            (
            );
            /**Sets  the length above the datum reference point. This is used if a cylinder or cone are created. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCustomAboveLength
            (
                double directionLength /** directionlength */ 
            );
            /**Returns  the total length of the cylinder or cone along the direction axis. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double CustomTotalLength
            (
            );
            /**Sets  the total length of the cylinder or cone along the direction axis. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCustomTotalLength
            (
                double customTotalLength /** customtotallength */ 
            );
            /**Returns  the option to control if a reference datum plane should be output with the this feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CreatePlane
            (
            );
            /**Sets  the option to control if a reference datum plane should be output with the this feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCreatePlane
            (
                bool createPlane /** createplane */ 
            );
            /**Returns  the option to control if a reference datum axis should be output with this feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CreateDirectionVector
            (
            );
            /**Sets  the option to control if a reference datum axis should be output with this feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCreateDirectionVector
            (
                bool createDirectionVector /** createdirectionvector */ 
            );
            /**Returns  the option to control if a reference point should be output with this feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CreatePoint
            (
            );
            /**Sets  the option to control if a reference point should be output with this feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCreatePoint
            (
                bool createPoint /** createpoint */ 
            );
            /** Initialize the builder with the inputs from an existing datum. The builder type and derived datum type must be the same 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void UpdateWithDerivedDatum
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
