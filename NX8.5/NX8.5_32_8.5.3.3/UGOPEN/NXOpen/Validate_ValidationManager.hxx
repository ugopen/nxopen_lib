#ifndef NXOpen_VALIDATE_VALIDATIONMANAGER_HXX_INCLUDED
#define NXOpen_VALIDATE_VALIDATIONMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_ValidationManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class ValidationManager;
    }
    class Session;
    namespace Validate
    {
        class Parser;
    }
    namespace Validate
    {
        class Validator;
    }
    namespace Validate
    {
        class ValidationManagerImpl;
        /**  @brief Represents an object that manages validator and parser associated instance objects. 

         
              <br> It handles the creation of new validators and parsers.
             The ValidationManager also provides @link Validate::ValidationManager::FindValidator Validate::ValidationManager::FindValidator@endlink  to 
             get validators in current session. <br> 
             <br> To obtain an instance of this class, refer to @link Session  Session @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  ValidationManager
        {
            private: ValidationManagerImpl * m_validationmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ValidationManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ValidationManager();
            /** 
                    Creates a validator.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: NXOpen::Validate::Validator * CreateValidator
            (
                const NXString & name /** name of the validator */
            );
            /** 
                    Creates a validator.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            NXOpen::Validate::Validator * CreateValidator
            (
                const char * name /** name of the validator */
            );
            /** 
                    Creates a parser.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parser * CreateParser
            (
                const NXString & name /** name of the parser */
            );
            /** 
                    Creates a parser.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parser * CreateParser
            (
                const char * name /** name of the parser */
            );
            /** 
                    Finds validators in current session. It will return all validators with the same name.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void FindValidator
            (
                const NXString & name /** name */ ,
                std::vector<NXOpen::Validate::Validator *> & validators /** validators */ 
            );
            /** 
                    Finds validators in current session. It will return all validators with the same name.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void FindValidator
            (
                const char * name /** name */ ,
                std::vector<NXOpen::Validate::Validator *> & validators /** validators */ 
            );
            /** 
                    Deletes a validator.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void DeleteValidator
            (
                NXOpen::Validate::Validator * validator /** validator */ 
            );
            /** 
                    Deletes a parser.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void DeleteParser
            (
                NXOpen::Validate::Parser * parser /** parser */ 
            );
            /** 
                    Finds parsers in current session. It will return all parsers with the same name.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void FindParser
            (
                const NXString & name /** name */ ,
                std::vector<NXOpen::Validate::Parser *> & parsers /** parsers */ 
            );
            /** 
                    Finds parsers in current session. It will return all parsers with the same name.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void FindParser
            (
                const char * name /** name */ ,
                std::vector<NXOpen::Validate::Parser *> & parsers /** parsers */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
