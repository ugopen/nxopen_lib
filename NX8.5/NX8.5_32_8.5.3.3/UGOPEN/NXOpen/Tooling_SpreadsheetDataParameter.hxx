#ifndef NXOpen_TOOLING_SPREADSHEETDATAPARAMETER_HXX_INCLUDED
#define NXOpen_TOOLING_SPREADSHEETDATAPARAMETER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_SpreadsheetDataParameter.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Tooling_SpreadsheetDataParameter.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class SpreadsheetDataParameter;
    }
    namespace Tooling
    {
        class SpreadsheetDataParameterImpl;
        /**
                Represents parameter in the spreadsheet.
             
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  SpreadsheetDataParameter : public TransientObject
        {
            private: SpreadsheetDataParameterImpl * m_spreadsheetdataparameter_impl;
            /// \cond NX_NO_DOC 
            public: explicit SpreadsheetDataParameter(void *ptr);
            /// \endcond 
            /** Dispose the spreadsheet object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~SpreadsheetDataParameter();
            /**Returns  the name of the parameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ParameterName
            (
            );
            /**Sets  the name of the parameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetParameterName
            (
                const NXString & parameterName /** name of the parameter */
            );
            /**Sets  the name of the parameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetParameterName
            (
                const char * parameterName /** name of the parameter */
            );
            /**Returns  the descriptive name of the parameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DescriptiveName
            (
            );
            /**Sets  the descriptive name of the parameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDescriptiveName
            (
                const NXString & descriptiveName /** descriptive name of the parameter */
            );
            /**Sets  the descriptive name of the parameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetDescriptiveName
            (
                const char * descriptiveName /** descriptive name of the parameter */
            );
            /**Returns  the value of the parameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ParameterValue
            (
            );
            /**Sets  the value of the parameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetParameterValue
            (
                const NXString & parameterValue /** value of the parameter */
            );
            /**Sets  the value of the parameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetParameterValue
            (
                const char * parameterValue /** value of the parameter */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
