#ifndef NXOpen_DRAWINGS_THREADSVIEWSTYLE_HXX_INCLUDED
#define NXOpen_DRAWINGS_THREADSVIEWSTYLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ThreadsViewStyle.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_IThreadsViewPreferences.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ThreadsViewStyle;
    }
    namespace Drawings
    {
        class ViewStyle;
    }
    namespace Preferences
    {
        class IThreadsViewPreferences;
    }
    namespace Drawings
    {
        class ThreadsViewStyleImpl;
        /** Represents set of Threads View Style Preferences applicable to drafting views. 
                Allows to create ANSI and ISO thread representations for both internal 
                and external threads in drawing member views.
              <br> To obtain an instance of this class use @link Drawings::ViewStyle::Threads Drawings::ViewStyle::Threads@endlink   <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ThreadsViewStyle: public virtual Preferences::IThreadsViewPreferences
        {
            private: ThreadsViewStyleImpl * m_threadsviewstyle_impl;
            private: NXOpen::Drawings::ViewStyle* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ThreadsViewStyle(NXOpen::Drawings::ViewStyle *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ThreadsViewStyle();
            /**Returns  the threads standard option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int ThreadsStandardOptionData
            (
            );
            /**Sets  the threads standard option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetThreadsStandardOptionData
            (
                int threadsStandardOptionData /** threads standard option data */ 
            );
            /**Returns  the minimum pitch field. Allows to control the minimum distance (in drawing coordinates) 
                        to which two points which represent crests of a thread are drawn. It is also used to control 
                        the minimum distance between a thread and it's defining geometry such as edges, silhouettes or 
                        section edges of the cylindrical face or chamfered face. This can be used to help prevent lines 
                        from running together, when threads with a small pitch are plotted at a small scale.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MinimumPitchField
            (
            );
            /**Sets  the minimum pitch field. Allows to control the minimum distance (in drawing coordinates) 
                        to which two points which represent crests of a thread are drawn. It is also used to control 
                        the minimum distance between a thread and it's defining geometry such as edges, silhouettes or 
                        section edges of the cylindrical face or chamfered face. This can be used to help prevent lines 
                        from running together, when threads with a small pitch are plotted at a small scale.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMinimumPitchField
            (
                double minimumPitchField /** minimum pitch field */ 
            );
            /**Returns  the status of render true hidden line 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool RenderTrueHiddenLine
            (
            );
            /**Sets  the status of render true hidden line 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetRenderTrueHiddenLine
            (
                bool renderTrueHiddenLine /** render true hidden line */ 
            );
            /**Returns  the visible thread override color. The value should be between 1 and 216.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int OverrideVisibleThreadColor
            (
            );
            /**Sets  the visible thread override color. The value should be between 1 and 216.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOverrideVisibleThreadColor
            (
                int overrideVisibleThreadColor /** overridevisiblethreadcolor */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
