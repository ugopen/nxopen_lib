#ifndef NXOpen_TOOLING_BLANKNESTINGBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_BLANKNESTINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_BlankNestingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Tooling_BlankNestingBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class BlankNestingBuilder;
    }
    class Builder;
    class ScCollector;
    namespace Tooling
    {
        class _BlankNestingBuilderBuilder;
        class BlankNestingBuilderImpl;
        /** Blank Nesting Builder of PDW, EDW and Die Engineering. No object is returned by this builder.  <br> To create a new instance of this class, use @link Tooling::BlankNestingCollection::CreateBlankNestingBuilder  Tooling::BlankNestingCollection::CreateBlankNestingBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngleResult </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        AngleStep </td> <td> 
         
        25 </td> </tr> 

        <tr><td> 
         
        BlankArea </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        BoundarySegment </td> <td> 
         
        200 </td> </tr> 

        <tr><td> 
         
        HeightStep </td> <td> 
         
        25 </td> </tr> 

        <tr><td> 
         
        LayoutType </td> <td> 
         
        Rectangle </td> </tr> 

        <tr><td> 
         
        MinimumDistance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PitchResult </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StripWidthResult </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Utilization </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        WebDistance </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  BlankNestingBuilder : public Builder
        {
            /** Specifies the layout type of blank nesting. */
            public: enum LayoutTypeSpecification
            {
                LayoutTypeSpecificationRectangle/** Auto-position blank along x-axis with rectangle bounding box. */,
                LayoutTypeSpecificationParallelogram/** Auto-position blank along x-axis with parallelogram bounding box. */,
                LayoutTypeSpecificationTrapezoid/** Rotate blank 180 degrees and auto-position it along x-axis with trapezoid bounding box. */,
                LayoutTypeSpecificationOneUp/** Auto-position blank along x-axis without bounding box. */,
                LayoutTypeSpecificationTwoUp/** Two up without bounding box. Move one blank along y-axis, then auto-position them along x-axis. */,
                LayoutTypeSpecificationTwoPair/** Two pair without bounding box. Rotate one blank 180 degrees and move along y-axis, then auto-position them along x-axis. */
            };

            private: BlankNestingBuilderImpl * m_blanknestingbuilder_impl;
            private: friend class  _BlankNestingBuilderBuilder;
            protected: BlankNestingBuilder();
            public: ~BlankNestingBuilder();
            /**Returns  the selected entities making up the blank to be nested. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectObject
            (
            );
            /**Returns  the type of layout to use in the blank nesting processing. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BlankNestingBuilder::LayoutTypeSpecification LayoutType
            (
            );
            /**Sets  the type of layout to use in the blank nesting processing. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLayoutType
            (
                NXOpen::Tooling::BlankNestingBuilder::LayoutTypeSpecification layoutType /** layouttype */ 
            );
            /** The method to calculate maximum material utilization for the selected entities. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void LayoutCalculation
            (
            );
            /**Returns  the number of boundary segment. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int BoundarySegment
            (
            );
            /**Sets  the number of boundary segment. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBoundarySegment
            (
                int boundarySegment /** boundarysegment */ 
            );
            /**Returns  the distance between the blank and the strip. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double WebDistance
            (
            );
            /**Sets  the distance between the blank and the strip. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetWebDistance
            (
                double webDistance /** webdistance */ 
            );
            /**Returns  the minimum distance between the adjacent blanks. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double MinimumDistance
            (
            );
            /**Sets  the minimum distance between the adjacent blanks. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumDistance
            (
                double minimumDistance /** minimumdistance */ 
            );
            /**Returns  the angle increment to use when rotating the blank during the processing to find the best layout. The angle is specified in degrees. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double AngleStep
            (
            );
            /**Sets  the angle increment to use when rotating the blank during the processing to find the best layout. The angle is specified in degrees. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAngleStep
            (
                double angleStep /** anglestep */ 
            );
            /**Returns  the distance increment to use when translating the blank in the vertical direction during the processing to find the best layout. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double HeightStep
            (
            );
            /**Sets  the distance increment to use when translating the blank in the vertical direction during the processing to find the best layout. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHeightStep
            (
                double heightStep /** heightstep */ 
            );
            /**Returns  the strip width. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double StripWidthResult
            (
            );
            /**Sets  the strip width. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetStripWidthResult
            (
                double stripWidthResult /** stripwidthresult */ 
            );
            /**Returns  the distance between blanks that was found in the processing. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double PitchResult
            (
            );
            /**Sets  the distance between blanks that was found in the processing. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPitchResult
            (
                double pitchResult /** pitchresult */ 
            );
            /**Returns  the angle between processed blank and original blank. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double AngleResult
            (
            );
            /**Sets  the angle between processed blank and original blank. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAngleResult
            (
                double angleResult /** angleresult */ 
            );
            /**Returns  the up datum face area that was found in the processing. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double BlankArea
            (
            );
            /**Sets  the up datum face area that was found in the processing. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBlankArea
            (
                double blankArea /** blankarea */ 
            );
            /**Returns  the maximum material utilization of the blank. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double Utilization
            (
            );
            /**Sets  the maximum material utilization of the blank. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUtilization
            (
                double utilization /** utilization */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
