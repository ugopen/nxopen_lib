#ifndef NXOpen_DXFDWGIMPORTER_HXX_INCLUDED
#define NXOpen_DXFDWGIMPORTER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DxfdwgImporter.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DexBuilder.hxx>
#include <NXOpen/DxfdwgImporter.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class DxfdwgImporter;
    class DexBuilder;
    class _DxfdwgImporterBuilder;
    class DxfdwgImporterImpl;
    /**
        Represents a @link DxfdwgImporter DxfdwgImporter@endlink  to be used when importing the DXF/DWG Data
        This class is created using @link DexManager DexManager@endlink .
        NULL object will be returned from Commit()  <br> To create a new instance of this class, use @link DexManager::CreateDxfdwgImporter  DexManager::CreateDxfdwgImporter @endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    ImportPolylineTo </td> <td> 
     
    Splines </td> </tr> 

    <tr><td> 
     
    ImportTo </td> <td> 
     
    New </td> </tr> 

    <tr><td> 
     
    ImportToTeamcenter </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    ProcessHoldFlag </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    ProcessingOrder </td> <td> 
     
    Alphabetical </td> </tr> 

    <tr><td> 
     
    Units </td> <td> 
     
    SameAsTemplate </td> </tr> 

    </table>  

     <br>  Created in NX6.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  DxfdwgImporter : public DexBuilder
    {
        /** Import To option */
        public: enum ImportToEnum
        {
            ImportToEnumWork/** import dxf/dwg file to work part */,
            ImportToEnumNew/** import dxf/dwg file to new part */
        };

        /** Import To option */
        public: enum UnitsEnum
        {
            UnitsEnumSameAsTemplate/** units same as template */,
            UnitsEnumMetric/** units millimeters */,
            UnitsEnumEnglish/** units inches */
        };

        /** Import Polylines as option */
        public: enum ImportPolylinesAs
        {
            ImportPolylinesAsSplines/** import polylines as splines */,
            ImportPolylinesAsArcLines/** import polylines as arc/lines */
        };

        /** Send Model data to option */
        public: enum SendModelDataAs
        {
            SendModelDataAsModeling/** send model data to modeling */,
            SendModelDataAsDrawingView/** send model data to drawing view */,
            SendModelDataAsDrawingSheet/** send model data to drawing sheet */
        };

        /** Send Layouts data to option */
        public: enum SendLayoutsAs
        {
            SendLayoutsAsImportedView/** send Layout data to imported view */,
            SendLayoutsAsDrawingView/** send Layout data to drawing view */
        };

        /** Convert latouts option */
        public: enum ConvLayoutsAs
        {
            ConvLayoutsAsAll/** Convert all layouts */,
            ConvLayoutsAsSelectedInPreview/** Convert selected layouts */
        };

        /** Import curves as option */
        public: enum ImportCurvesAs
        {
            ImportCurvesAsSketchCurves/** Convert curves as sketch curves */,
            ImportCurvesAsCurves/** Convert curves as curves */
        };

        /** Import Dimensions as option option */
        public: enum ImportDimensionsAs
        {
            ImportDimensionsAsReal/** Convert dimensions as real dimensions */,
            ImportDimensionsAsAssortedDim/** Convert dimensions as assorted dimensions */
        };

        /** Import Blocks as option option */
        public: enum ImportBlocksAs
        {
            ImportBlocksAsGroup/** Convert blocks as group dimensions */,
            ImportBlocksAsCustomSymbol/** Convert blocks as custom symbol dimensions */
        };

        /** Processing Oder of non numeric layers*/
        public: enum ProcessingOrderAs
        {
            ProcessingOrderAsAlphabetical/** Alphabetical */,
            ProcessingOrderAsObjectCount/** ObjectCount */
        };

        /** NX Aspect ratio calculation options */
        public: enum AspectRatioOptions
        {
            AspectRatioOptionsAutomaticCalculation/** automatic calculation */ ,
            AspectRatioOptionsUseSameAsACADWidthFactor/** use same as acadwidth factor */ ,
            AspectRatioOptionsUseValueSpecifiedInMappingFile/** use value specified in mapping file */ ,
            AspectRatioOptionsScaleACADWidthFactorWithSpecifiedValue/** scale acadwidth factor with specified value */ 
        };

        private: DxfdwgImporterImpl * m_dxfdwgimporter_impl;
        private: friend class  _DxfdwgImporterBuilder;
        protected: DxfdwgImporter();
        public: ~DxfdwgImporter();
        /** Saves the save settings - this will save the settings to a file specified 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SaveSettings
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Saves the save settings - this will save the settings to a file specified 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SaveSettings
        (
            const char * filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  the InputFile command - name of a file which is being imported
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString InputFile
        (
        );
        /**Sets  the InputFile command - name of a file which is being imported
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetInputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the InputFile command - name of a file which is being imported
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetInputFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the ImportTo command - this option will determine the destination for imported autocad file. it can
                    either be new (english/metric) or work part. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::ImportToEnum ImportTo
        (
        );
        /**Sets  the ImportTo command - this option will determine the destination for imported autocad file. it can
                    either be new (english/metric) or work part. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetImportTo
        (
            NXOpen::DxfdwgImporter::ImportToEnum importTo /** importto */ 
        );
        /**Returns  the Units command - this option will determine the destination part units. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::UnitsEnum Units
        (
        );
        /**Sets  the Units command - this option will determine the destination part units. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUnits
        (
            NXOpen::DxfdwgImporter::UnitsEnum units /** units */ 
        );
        /**Returns  the TemplateFile command - This will be used as template for dxf/dwg import 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString TemplateFile
        (
        );
        /**Sets  the TemplateFile command - This will be used as template for dxf/dwg import 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTemplateFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the TemplateFile command - This will be used as template for dxf/dwg import 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetTemplateFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the OutputFile command - if autocad file is imported to the new part then this name will be used to
                    write the output. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString OutputFile
        (
        );
        /**Sets  the OutputFile command - if autocad file is imported to the new part then this name will be used to
                    write the output. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetOutputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the OutputFile command - if autocad file is imported to the new part then this name will be used to
                    write the output. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetOutputFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the ImportToTeamcenter command - if set to true then assembly will be imported into Teamcenter 
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : None */
        public: bool ImportToTeamcenter
        (
        );
        /**Sets  the ImportToTeamcenter command - if set to true then assembly will be imported into Teamcenter 
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : None */
        public: void SetImportToTeamcenter
        (
            bool importToTeamcenter /** importtoteamcenter */ 
        );
        /**Returns  the Import model data command - if set to true then Model data will be imported 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool ConvModelData
        (
        );
        /**Sets  the Import model data command - if set to true then Model data will be imported 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetConvModelData
        (
            bool convModelData /** convmodeldata */ 
        );
        /**Returns  the SendModelDataTo command - this will determine the destination for model data 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::SendModelDataAs SendModelDataTo
        (
        );
        /**Sets  the SendModelDataTo command - this will determine the destination for model data 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSendModelDataTo
        (
            NXOpen::DxfdwgImporter::SendModelDataAs sendModelDataTo /** sendmodeldatato */ 
        );
        /**Returns  the Import Layout data command - if set to true then Layout data will be imported 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool ConvLayoutData
        (
        );
        /**Sets  the Import Layout data command - if set to true then Layout data will be imported 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetConvLayoutData
        (
            bool convLayoutData /** convlayoutdata */ 
        );
        /**Returns  the ConvLayouts command - this will determine if all or selected layouts are translated
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::ConvLayoutsAs ConvLayouts
        (
        );
        /**Sets  the ConvLayouts command - this will determine if all or selected layouts are translated
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetConvLayouts
        (
            NXOpen::DxfdwgImporter::ConvLayoutsAs convLayoutsAs /** convlayoutsas */ 
        );
        /**Returns  the AcadLayoutsToImport command - generates a list of ACAD layouts 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString AcadLayoutsToImport
        (
        );
        /**Sets  the AcadLayoutsToImport command - generates a list of ACAD layouts 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAcadLayoutsToImport
        (
            const NXString & layoutNames /** layoutnames */ 
        );
        /**Sets  the AcadLayoutsToImport command - generates a list of ACAD layouts 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetAcadLayoutsToImport
        (
            const char * layoutNames /** layoutnames */ 
        );
        /**Returns  the SendLayoutsTo command - this will determine the destination for the layout data 
                    
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::SendLayoutsAs SendLayoutsTo
        (
        );
        /**Sets  the SendLayoutsTo command - this will determine the destination for the layout data 
                    
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSendLayoutsTo
        (
            NXOpen::DxfdwgImporter::SendLayoutsAs sendLayoutsTo /** sendlayoutsto */ 
        );
        /**Returns  the ImportCurvesType command - When model data is imported on drawing sheet, this can be set in order to sketch a curve or many curves 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::ImportCurvesAs ImportCurvesType
        (
        );
        /**Sets  the ImportCurvesType command - When model data is imported on drawing sheet, this can be set in order to sketch a curve or many curves 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetImportCurvesType
        (
            NXOpen::DxfdwgImporter::ImportCurvesAs importCurvesType /** importcurvestype */ 
        );
        /**Returns  the ImportDimensionType command - import ACAD dimensions as real dimensions or as assorted data 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::ImportDimensionsAs ImportDimensionType
        (
        );
        /**Sets  the ImportDimensionType command - import ACAD dimensions as real dimensions or as assorted data 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetImportDimensionType
        (
            NXOpen::DxfdwgImporter::ImportDimensionsAs importDimensionType /** importdimensiontype */ 
        );
        /**Returns  the ImportBlockType command - import ACAD Blocks as a group  or as a custom symbol 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::ImportBlocksAs ImportBlockType
        (
        );
        /**Sets  the ImportBlockType command - import ACAD Blocks as a group  or as a custom symbol 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetImportBlockType
        (
            NXOpen::DxfdwgImporter::ImportBlocksAs importBlockType /** importblocktype */ 
        );
        /**Returns  the ImportPolylineTo command - this will determine if polylines will be imported as splines or as 
                    lines/arcs. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::ImportPolylinesAs ImportPolylineTo
        (
        );
        /**Sets  the ImportPolylineTo command - this will determine if polylines will be imported as splines or as 
                    lines/arcs. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetImportPolylineTo
        (
            NXOpen::DxfdwgImporter::ImportPolylinesAs importPolylineTo /** importpolylineto */ 
        );
        /**Returns  the AvoidUsedNXLayers command - if set to true, the destination part layers will not be used 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool AvoidUsedNXLayers
        (
        );
        /**Sets  the AvoidUsedNXLayers command - if set to true, the destination part layers will not be used 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAvoidUsedNXLayers
        (
            bool avoidUsedNXLayers /** avoidusednxlayers */ 
        );
        /**Returns  the ReadLayerNumFromPrefix command - if set to true, layer numbers will be read from prefix 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool ReadLayerNumFromPrefix
        (
        );
        /**Sets  the ReadLayerNumFromPrefix command - if set to true, layer numbers will be read from prefix 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetReadLayerNumFromPrefix
        (
            bool readLayerNumFromPrefix /** readlayernumfromprefix */ 
        );
        /**Returns  the TranslateUnselectedLayer command - if set to true, unselected layers will be translated 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool TranslateUnselectedLayer
        (
        );
        /**Sets  the TranslateUnselectedLayer command - if set to true, unselected layers will be translated 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTranslateUnselectedLayer
        (
            bool translateUnselectedLayer /** translateunselectedlayer */ 
        );
        /**Returns  the DestForUnselectedLayer command - number of destination layer 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: int DestForUnselectedLayer
        (
        );
        /**Sets  the DestForUnselectedLayer command - number of destination layer 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDestForUnselectedLayer
        (
            int destForUnselectedLayer /** destforunselectedlayer */ 
        );
        /**Returns  the ProcessingOrder command - this option will decide processing order of AutoCAD layers 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::ProcessingOrderAs ProcessingOrder
        (
        );
        /**Sets  the ProcessingOrder command - this option will decide processing order of AutoCAD layers 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetProcessingOrder
        (
            NXOpen::DxfdwgImporter::ProcessingOrderAs processingOrder /** processingorder */ 
        );
        /**Returns  the SkipEmptyLayer command - if set to true, unreferenced AutoCAD layers will not be transalated 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool SkipEmptyLayer
        (
        );
        /**Sets  the SkipEmptyLayer command - if set to true, unreferenced AutoCAD layers will not be transalated 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSkipEmptyLayer
        (
            bool skipEmptyLayer /** skipemptylayer */ 
        );
        /**Returns  the UnSelectedLayers command  - sets the list of unselected layers
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString UnSelectedLayers
        (
        );
        /**Sets  the UnSelectedLayers command  - sets the list of unselected layers
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUnSelectedLayers
        (
            const NXString & unselectedLayers /** unselectedlayers */ 
        );
        /**Sets  the UnSelectedLayers command  - sets the list of unselected layers
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetUnSelectedLayers
        (
            const char * unselectedLayers /** unselectedlayers */ 
        );
        /**Returns  the SettingsFile command - definition file for default options
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString SettingsFile
        (
        );
        /**Sets  the SettingsFile command - definition file for default options
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSettingsFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the SettingsFile command - definition file for default options
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetSettingsFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the TextFontMappingFile command - definition file for text font mapping
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString TextFontMappingFile
        (
        );
        /**Sets  the TextFontMappingFile command - definition file for text font mapping
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTextFontMappingFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the TextFontMappingFile command - definition file for text font mapping
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetTextFontMappingFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the autocad aspect ratio calculation method - this will decide the NX Aspect ratio method to be used. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::AspectRatioOptions AspectRatioOption
        (
        );
        /**Sets  the autocad aspect ratio calculation method - this will decide the NX Aspect ratio method to be used. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetAspectRatioOption
        (
            NXOpen::DxfdwgImporter::AspectRatioOptions widthFactorMode /** widthfactormode */ 
        );
        /**Returns  the LineFontMappingFile command - definition file for line font mapping
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString LineFontMappingFile
        (
        );
        /**Sets  the LineFontMappingFile command - definition file for line font mapping
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLineFontMappingFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the LineFontMappingFile command - definition file for line font mapping
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetLineFontMappingFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the CrossHatchMappingFile command - definition file for cross hatch mapping
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString CrossHatchMappingFile
        (
        );
        /**Sets  the CrossHatchMappingFile command - definition file for cross hatch mapping
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCrossHatchMappingFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the CrossHatchMappingFile command - definition file for cross hatch mapping
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetCrossHatchMappingFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the FileOpenFlag command - should be set to false if doing file import
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool FileOpenFlag
        (
        );
        /**Sets  the FileOpenFlag command - should be set to false if doing file import
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFileOpenFlag
        (
            bool doingFileOpen /** doingfileopen */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
