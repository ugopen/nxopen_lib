#ifndef NXOpen_REMOTEUTILITIES_HXX_INCLUDED
#define NXOpen_REMOTEUTILITIES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     RemoteUtilities.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class RemoteUtilities;
    class _RemoteUtilitiesBuilder;
    class RemoteUtilitiesImpl;
    /** This class is primarily designed for use in a remote session, and allows client
        applications to access resources on a remote server.

         <br>  

        Note that due to security considerations, this class is independent of the main
        @link Session Session@endlink . The server must explicitly export a RemoteUtilities
        object in order to allow clients to access the methods in this class. Application
        writers should be aware that this class will allow clients to delete and modify files
        on the server.  

         <br> 
     <br> To obtain an instance of this class use @link RemoteUtilities::GetRemoteUtilities RemoteUtilities::GetRemoteUtilities@endlink   <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  RemoteUtilities : public TaggedObject
    {
        private: RemoteUtilitiesImpl * m_remoteutilities_impl;
        private: static RemoteUtilities *theRemoteUtilities;
        public: static RemoteUtilities *GetRemoteUtilities();
        private: friend class  _RemoteUtilitiesBuilder;
        protected: RemoteUtilities();
        public: ~RemoteUtilities();
        /** Renames a file. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void RenameFile
        (
            const NXString & oldFilename /** Old filename.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & newFilename /** New filename.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Renames a file. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void RenameFile
        (
            const char * oldFilename /** Old filename.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * newFilename /** New filename.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Copies a file. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void CopyFile
        (
            const NXString & originalFilename /** Original filename.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & newFilename /** Newly copied filename.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Copies a file. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void CopyFile
        (
            const char * originalFilename /** Original filename.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * newFilename /** Newly copied filename.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Tests to see that a file exists  @return  True if the file exists 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool FileExists
        (
            const NXString & testFilename /** Filename to query   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Tests to see that a file exists  @return  True if the file exists 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        bool FileExists
        (
            const char * testFilename /** Filename to query   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes a file. Note that if the file does not exist, this method returns without any errors. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteFile
        (
            const NXString & filename /** File to be deleted.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes a file. Note that if the file does not exist, this method returns without any errors. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void DeleteFile
        (
            const char * filename /** File to be deleted.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns true if a file exists, and is writable by the NX session.  @return  True if the file exists, and is writable 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsFileWritable
        (
            const NXString & filename /** File to be checked.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns true if a file exists, and is writable by the NX session.  @return  True if the file exists, and is writable 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        bool IsFileWritable
        (
            const char * filename /** File to be checked.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets a file's permissions to be writable by the NX session. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFileWritable
        (
            const NXString & filename /** File to be checked.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool writable /** True to make the file writable, false to make it readonly */
        );
        /** Sets a file's permissions to be writable by the NX session. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SetFileWritable
        (
            const char * filename /** File to be checked.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool writable /** True to make the file writable, false to make it readonly */
        );
        /** Creates a directory. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateDirectory
        (
            const NXString & dirname /** Name of new directory   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a directory. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void CreateDirectory
        (
            const char * dirname /** Name of new directory   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes a directory. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void RemoveDirectory
        (
            const NXString & dirname /** Name of directory  to be deleted   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes a directory. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void RemoveDirectory
        (
            const char * dirname /** Name of directory  to be deleted   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Gets the value of an environment variable. @return  The value of the variable. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use Session.GetEnvironmentVariable instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use Session.GetEnvironmentVariable instead.") NXString GetEnvironmentVariable
        (
            const NXString & variableName /** The environment variable   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Gets the value of an environment variable. @return  The value of the variable. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use Session.GetEnvironmentVariable instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXString GetEnvironmentVariable
        (
            const char * variableName /** The environment variable   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
