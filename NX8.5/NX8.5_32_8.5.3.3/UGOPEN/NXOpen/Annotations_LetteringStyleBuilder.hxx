#ifndef NXOpen_ANNOTATIONS_LETTERINGSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LETTERINGSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LetteringStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_LetteringStyleBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class LetteringStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace Annotations
    {
        class _LetteringStyleBuilderBuilder;
        class LetteringStyleBuilderImpl;
        /**
            Represents a @link Annotations::LetteringStyleBuilder Annotations::LetteringStyleBuilder@endlink .
            This class queries and sets lettering preferences when creating or editing annotations.
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  LetteringStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: LetteringStyleBuilderImpl * m_letteringstylebuilder_impl;
            private: friend class  _LetteringStyleBuilderBuilder;
            protected: LetteringStyleBuilder();
            public: ~LetteringStyleBuilder();
            /**Returns  the alignment position 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AlignmentPosition AlignPosition
            (
            );
            /**Sets  the alignment position 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAlignPosition
            (
                NXOpen::Annotations::AlignmentPosition alignPosition /** alignposition */ 
            );
            /**Returns  the horizontal text justification 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TextJustification HorizontalTextJustification
            (
            );
            /**Sets  the horizontal text justification 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetHorizontalTextJustification
            (
                NXOpen::Annotations::TextJustification horizontalTextJustification /** horizontaltextjustification */ 
            );
            /**Returns  the GD and T frame height factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double GdtFrameHeightFactor
            (
            );
            /**Sets  the GD and T frame height factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGdtFrameHeightFactor
            (
                double gdtFrameHeightFactor /** gdtframeheightfactor */ 
            );
            /**Returns  the angle for general text 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double Angle
            (
            );
            /**Sets  the angle for general text 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the dimension line space factor.
                        This controls the spacing between the bottom most piece of text on the dimension
                        and the dimension line. This only applies when the text orientation is text over 
                        dimension line. The space is equal to the dimension text character size
                        multiplied by the space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DimLineSpaceFactor
            (
            );
            /**Sets  the dimension line space factor.
                        This controls the spacing between the bottom most piece of text on the dimension
                        and the dimension line. This only applies when the text orientation is text over 
                        dimension line. The space is equal to the dimension text character size
                        multiplied by the space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimLineSpaceFactor
            (
                double dimLineSpaceFactor /** dimlinespacefactor */ 
            );
            /**Returns  the appended text space factor.
                        This controls the spacing between the before appended text and the
                        next piece of dimension text to its right; and the spacing between
                        the after appended text and the next piece of text to its left.
                        The space is equal to the appended text character size multiplied by
                        the space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double AppendedTextSpaceFactor
            (
            );
            /**Sets  the appended text space factor.
                        This controls the spacing between the before appended text and the
                        next piece of dimension text to its right; and the spacing between
                        the after appended text and the next piece of text to its left.
                        The space is equal to the appended text character size multiplied by
                        the space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAppendedTextSpaceFactor
            (
                double appendedTextSpaceFactor /** appendedtextspacefactor */ 
            );
            /**Returns  the tolerance text space factor.
                        This contols the spacing between the dimension main text and the after tolerance text.
                        The space is equal to the tolerance text character size multiplied by the space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceTextSpaceFactor
            (
            );
            /**Sets  the tolerance text space factor.
                        This contols the spacing between the dimension main text and the after tolerance text.
                        The space is equal to the tolerance text character size multiplied by the space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceTextSpaceFactor
            (
                double toleranceTextSpaceFactor /** tolerancetextspacefactor */ 
            );
            /**Returns  the dimension text character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DimensionTextSize
            (
            );
            /**Sets  the dimension text character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionTextSize
            (
                double dimensionTextSize /** dimensiontextsize */ 
            );
            /**Returns  the dimension text space factor.
                        This defines the spacing between characters in text as a multiple of the
                        standard character spacing for the current font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DimensionTextCharSpaceFactor
            (
            );
            /**Sets  the dimension text space factor.
                        This defines the spacing between characters in text as a multiple of the
                        standard character spacing for the current font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionTextCharSpaceFactor
            (
                double dimensionTextCharSpaceFactor /** dimensiontextcharspacefactor */ 
            );
            /**Returns  the dimension text aspect ratio.
                        This specifies a ratio of length to height which represents the size of character text 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DimensionTextAspectRatio
            (
            );
            /**Sets  the dimension text aspect ratio.
                        This specifies a ratio of length to height which represents the size of character text 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionTextAspectRatio
            (
                double dimensionTextAspectRatio /** dimensiontextaspectratio */ 
            );
            /**Returns  the dimension text line space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DimensionTextLineSpaceFactor
            (
            );
            /**Sets  the dimension text line space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionTextLineSpaceFactor
            (
                double dimensionTextLineSpaceFactor /** dimensiontextlinespacefactor */ 
            );
            /**Returns  the dimension text color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * DimensionTextColor
            (
            );
            /**Sets  the dimension text color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionTextColor
            (
                NXOpen::NXColor * dimensionTextColor /** dimensiontextcolor */ 
            );
            /**Returns  the dimension text font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int DimensionTextFont
            (
            );
            /**Sets  the dimension text font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionTextFont
            (
                int dimensionTextFont /** dimensiontextfont */ 
            );
            /**Returns  the dimension text italic status 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool DimensionTextItalicized
            (
            );
            /**Sets  the dimension text italic status 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionTextItalicized
            (
                bool dimensionTextItalic /** dimensiontextitalic */ 
            );
            /**Returns  the dimension text line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth DimensionTextLineWidth
            (
            );
            /**Sets  the dimension text line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionTextLineWidth
            (
                NXOpen::Annotations::LineWidth dimensionTextLineWidth /** dimensiontextlinewidth */ 
            );
            /**Returns  the appended text character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double AppendedTextSize
            (
            );
            /**Sets  the appended text character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAppendedTextSize
            (
                double appendedTextSize /** appendedtextsize */ 
            );
            /**Returns  the appended text character space factor. 
                        This defines the spacing between characters in text as a multiple of the
                        standard character spacing for the current font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double AppendedTextCharSpaceFactor
            (
            );
            /**Sets  the appended text character space factor. 
                        This defines the spacing between characters in text as a multiple of the
                        standard character spacing for the current font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAppendedTextCharSpaceFactor
            (
                double appendedTextCharSpaceFactor /** appendedtextcharspacefactor */ 
            );
            /**Returns  the appended text aspect ratio.
                        This specifies a ratio of length to height which represents the size of character text 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double AppendedTextAspectRatio
            (
            );
            /**Sets  the appended text aspect ratio.
                        This specifies a ratio of length to height which represents the size of character text 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAppendedTextAspectRatio
            (
                double appendedTextAspectRatio /** appendedtextaspectratio */ 
            );
            /**Returns  the appended text line space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double AppendedTextLineSpaceFactor
            (
            );
            /**Sets  the appended text line space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAppendedTextLineSpaceFactor
            (
                double appendedTextLineSpaceFactor /** appendedtextlinespacefactor */ 
            );
            /**Returns  the appended text color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * AppendedTextColor
            (
            );
            /**Sets  the appended text color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAppendedTextColor
            (
                NXOpen::NXColor * appendedTextColor /** appendedtextcolor */ 
            );
            /**Returns  the appended text font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int AppendedTextFont
            (
            );
            /**Sets  the appended text font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAppendedTextFont
            (
                int appendedTextFont /** appendedtextfont */ 
            );
            /**Returns  the appended text italic status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool AppendedTextItalicized
            (
            );
            /**Sets  the appended text italic status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAppendedTextItalicized
            (
                bool appendedTextItalicized /** appendedtextitalicized */ 
            );
            /**Returns  the appended text line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth AppendedTextLineWidth
            (
            );
            /**Sets  the appended text line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAppendedTextLineWidth
            (
                NXOpen::Annotations::LineWidth appendedTextLineWidth /** appendedtextlinewidth */ 
            );
            /**Returns  the tolerance text character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceTextSize
            (
            );
            /**Sets  the tolerance text character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceTextSize
            (
                double toleranceTextSize /** tolerancetextsize */ 
            );
            /**Returns  the tolerance text character space factor. 
                        This defines the spacing between characters in text as a multiple of the
                        standard character spacing for the current font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceTextCharSpaceFactor
            (
            );
            /**Sets  the tolerance text character space factor. 
                        This defines the spacing between characters in text as a multiple of the
                        standard character spacing for the current font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceTextCharSpaceFactor
            (
                double toleranceTextCharSpaceFactor /** tolerancetextcharspacefactor */ 
            );
            /**Returns  the tolerance text aspect ratio. 
                        This specifies a ratio of length to height which represents the size of character text 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceTextAspectRatio
            (
            );
            /**Sets  the tolerance text aspect ratio. 
                        This specifies a ratio of length to height which represents the size of character text 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceTextAspectRatio
            (
                double toleranceTextAspectRatio /** tolerancetextaspectratio */ 
            );
            /**Returns  the tolerance text line space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceTextLineSpaceFactor
            (
            );
            /**Sets  the tolerance text line space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceTextLineSpaceFactor
            (
                double toleranceTextLineSpaceFactor /** tolerancetextlinespacefactor */ 
            );
            /**Returns  the tolerance text color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ToleranceTextColor
            (
            );
            /**Sets  the tolerance text color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceTextColor
            (
                NXOpen::NXColor * toleranceTextColor /** tolerancetextcolor */ 
            );
            /**Returns  the tolerance text font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int ToleranceTextFont
            (
            );
            /**Sets  the tolerance text font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceTextFont
            (
                int toleranceTextFont /** tolerancetextfont */ 
            );
            /**Returns  the tolerance text italic status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToleranceTextItalicized
            (
            );
            /**Sets  the tolerance text italic status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceTextItalicized
            (
                bool toleranceTextItalicized /** tolerancetextitalicized */ 
            );
            /**Returns  the tolerance text line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth ToleranceTextLineWidth
            (
            );
            /**Sets  the tolerance text line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceTextLineWidth
            (
                NXOpen::Annotations::LineWidth toleranceTextLineWidth /** tolerancetextlinewidth */ 
            );
            /**Returns  the general text character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double GeneralTextSize
            (
            );
            /**Sets  the general text character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGeneralTextSize
            (
                double generalTextSize /** generaltextsize */ 
            );
            /**Returns  the general text character space factor.
                        This defines the spacing between characters in text as a multiple of the
                        standard character spacing for the current font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double GeneralTextCharSpaceFactor
            (
            );
            /**Sets  the general text character space factor.
                        This defines the spacing between characters in text as a multiple of the
                        standard character spacing for the current font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGeneralTextCharSpaceFactor
            (
                double generalTextCharSpaceFactor /** generaltextcharspacefactor */ 
            );
            /**Returns  the general text aspect ratio.
                        This specifies a ratio of length to height which represents the size of character text 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double GeneralTextAspectRatio
            (
            );
            /**Sets  the general text aspect ratio.
                        This specifies a ratio of length to height which represents the size of character text 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGeneralTextAspectRatio
            (
                double generalTextAspectRatio /** generaltextaspectratio */ 
            );
            /**Returns  the general text line space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double GeneralTextLineSpaceFactor
            (
            );
            /**Sets  the general text line space factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGeneralTextLineSpaceFactor
            (
                double generalTextLineSpaceFactor /** generaltextlinespacefactor */ 
            );
            /**Returns  the general text color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * GeneralTextColor
            (
            );
            /**Sets  the general text color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGeneralTextColor
            (
                NXOpen::NXColor * generalTextColor /** generaltextcolor */ 
            );
            /**Returns  the general text font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int GeneralTextFont
            (
            );
            /**Sets  the general text font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGeneralTextFont
            (
                int generalTextFont /** generaltextfont */ 
            );
            /**Returns  the general text italic status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool GeneralTextItalicized
            (
            );
            /**Sets  the general text italic status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGeneralTextItalicized
            (
                bool generalTextItalicized /** generaltextitalicized */ 
            );
            /**Returns  the general text line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth GeneralTextLineWidth
            (
            );
            /**Sets  the general text line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGeneralTextLineWidth
            (
                NXOpen::Annotations::LineWidth generalTextLineWidth /** generaltextlinewidth */ 
            );
            /**Returns  the stack vertical alignment 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::StackVerticalAlignment StackVerticalAlignment
            (
            );
            /**Sets  the stack vertical alignment 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStackVerticalAlignment
            (
                NXOpen::Annotations::StackVerticalAlignment stackVerticalAlignment /** stackverticalalignment */ 
            );
            /**Returns  the stack horizontal alignment 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::StackHorizontalAlignment StackHorizontalAlignment
            (
            );
            /**Sets  the stack horizontal alignment 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStackHorizontalAlignment
            (
                NXOpen::Annotations::StackHorizontalAlignment stackHorizontalAlignment /** stackhorizontalalignment */ 
            );
            /**Returns  the stack above space factor.
                        This specifies the space buffer above the annotation within a stack
                        as a factor of a multiple of the character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double StackAboveSpaceFactor
            (
            );
            /**Sets  the stack above space factor.
                        This specifies the space buffer above the annotation within a stack
                        as a factor of a multiple of the character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStackAboveSpaceFactor
            (
                double stackAboveSpaceFactor /** stackabovespacefactor */ 
            );
            /**Returns  the stack below space factor.
                        This specifies the space buffer below the annotation within a stack
                        as a factor of a multiple of the character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double StackBelowSpaceFactor
            (
            );
            /**Sets  the stack below space factor.
                        This specifies the space buffer below the annotation within a stack
                        as a factor of a multiple of the character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStackBelowSpaceFactor
            (
                double stackBelowSpaceFactor /** stackbelowspacefactor */ 
            );
            /**Returns  the stack left space factor.
                        This specifies the space buffer to the left of the annotation within a stack
                        as a factor of a multiple of the character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double StackLeftSpaceFactor
            (
            );
            /**Sets  the stack left space factor.
                        This specifies the space buffer to the left of the annotation within a stack
                        as a factor of a multiple of the character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStackLeftSpaceFactor
            (
                double stackLeftSpaceFactor /** stackleftspacefactor */ 
            );
            /**Returns  the stack right space factor.
                        This specifies the space buffer to the rght of the annotation within a stack
                        as a factor of a multiple of the character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double StackRightSpaceFactor
            (
            );
            /**Sets  the stack right space factor.
                        This specifies the space buffer to the rght of the annotation within a stack
                        as a factor of a multiple of the character size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStackRightSpaceFactor
            (
                double stackRightSpaceFactor /** stackrightspacefactor */ 
            );
            /**Returns  the stack inherit associated objects setting.
                        A value of True means that a PMI annotation when added to a stack will
                        automatically inherit the associated objects of the stack 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool StackInheritAssociatedObjects
            (
            );
            /**Sets  the stack inherit associated objects setting.
                        A value of True means that a PMI annotation when added to a stack will
                        automatically inherit the associated objects of the stack 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStackInheritAssociatedObjects
            (
                bool stackInheritAssociatedObjects /** stackinheritassociatedobjects */ 
            );
            /**Returns  the stack autospace setting.
                        A value of True means that system defined spacing values will be used
                        when a symbol is inserted into a stack 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool StackAutospace
            (
            );
            /**Sets  the stack autospace setting.
                        A value of True means that system defined spacing values will be used
                        when a symbol is inserted into a stack 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStackAutospace
            (
                bool stackAutospace /** stackautospace */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
