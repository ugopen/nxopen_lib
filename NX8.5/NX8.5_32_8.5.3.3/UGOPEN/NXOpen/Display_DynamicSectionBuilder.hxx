#ifndef NXOpen_DISPLAY_DYNAMICSECTIONBUILDER_HXX_INCLUDED
#define NXOpen_DISPLAY_DYNAMICSECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_DynamicSectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Display_DynamicSectionBuilder.hxx>
#include <NXOpen/Display_DynamicSectionTypes.hxx>
#include <NXOpen/Display_PlaneGridBuilder.hxx>
#include <NXOpen/PartLoadStatus.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_display_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Display
    {
        class DynamicSectionBuilder;
    }
    class Builder;
    class DatumPlane;
    namespace Display
    {
        class PlaneGridBuilder;
    }
    class ModelingView;
    class NXColor;
    class PartLoadStatus;
    namespace Display
    {
        class _DynamicSectionBuilderBuilder;
        class DynamicSectionBuilderImpl;
        /** Represents a Dynamic Section Builder used for creating sections. 
              
                 <br> 
                The dynamic sectioning is performed on a displayable part that is
                displayed in the modeling work view.It is possible to specify the view 
                after creating the builder. However, the specified view must be
                modeling work view. This operation is meant to be performed in an 
                interactive mode with visual feedback.
                 <br>      
                      
                 <br> <b>Builder Creation:</b> <br> 
                
                 <br> 
                The dynamic section builder can be used to create new dynamic
                section objects OR to edit an existing section object. 
                
                See @link Display::DynamicSectionCollection::CreateSectionBuilder Display::DynamicSectionCollection::CreateSectionBuilder@endlink  
                
                When a view is specified during the builder creation, the dynamic
                section object will be activated in the view. When the dynamic
                section object is activated in the view, view clipping and
                capping is enabled. However, it is not necessary to specify the
                view.
                 <br>  

                 <br>    
                There are three different types of sections that are currently
                being supported.
                 <br> 
                
                 <br> 
                <ul>
                    <li>One Plane Section</li>
                    <li>Two Parallel Planes Section</li>
                    <li>Box Section</li>
                </ul>
                 <br> 
                
                 <br> 
                User can switch between these types at any time.
                 <br> 
                
                 <br> 
                <b>Assembly and Modeling Operations</b>
                 <br> 
                
                 <br> 
                <ul>
                    <li>Create section curves by intersecting all clipping planes  
                        with all bodies in the scene</li>
                    <li>Create a datum plane from the active section plane.</li>
                    <li>Load components that are near or intersecting with the active
                        section plane.</li>
                </ul>
                 <br> 
                
                 <br> 
                All the APIs accept geometric data such as plane origin, plane normal
                in the absolute coordinate system.
                 <br> 
                
                 <br> 
                <b>Saving changes</b>
                 <br> 
              
                 <br> 
                @link Builder::Commit Builder::Commit@endlink  method will activate the section
                object in the modeling view. It returns the dynamic section object tag.
                 <br> 
                
                 <br> 
                <b>Section Plane Families:</b>
                 <br> 
                
                 <br> 
                An important issue with dynamic sectioning is the ability to easily 
                define a group of related cross-section planes. A group of related 
                cross-section planes will be known as a <tt>Plane Family</tt>. An 
                important idea in understanding a plane family is the concept of a 
                defining or a <tt>Base Plane</tt>. The base plane of the plane family 
                is the starting point (i.e. plane) for the plane family. All planes 
                in the family are related by an offset to the base plane. There are 
                two types of plane families: 
                 <br> 
                
                 <br> 
                <ul>
                    <li>Linear</li> 
                    <li>Axi-Symmetric</li>
                </ul>
                 <br> 
                
                 <br> 
                <tt>Linear Plane Family</tt>
                 <br> 
                
                 <br> 
                A linear plane family is defined by an infinite group of parallel 
                planes. All of the planes in a linear family are parallel to its 
                base plane (i.e. along the base plane normal at some linear offset 
                value). This is illustrated below with a base plane and three
                parallel planes to it that are members of the plane family.
                 <br> 
              
                 <br> 
                Base Plane
                 <br> 
                 @code 
                |   |   |   | 
                |   |   |   | 
                |   |   |   | ==\> Nomal to all planes.
                |   |   |   | 
                |   |   |   | 
                 @endcode 
              
                 <br> 
                <tt>Axi-Symmetric Plane Family</tt>
                 <br> 
              
                 <br> 
                An axi-symmetric plane family is defined by rotating the base plane about 
                one of the three primary axes. There are an infinite number of planes in 
                an axi-symmetric plane family similar to a linear plane family. This is 
                illustrated below with a base plane and three planes rotated about the 
                z-axis.
                 <br> 
                
                 @code 
                  

                        \   |   /
                         \  |  / 
                          \ | /   
                           \|/____  Base Plane
                 @endcode 
              
                 <br> <b>Switching between plane families</b>
                 <br> 

                 <br> 
                Methods defining a new linear family
                 <br> 
                  
                 <br>   
                <ul>
                    <li>@link Display::DynamicSectionBuilder::AlternatePlane Display::DynamicSectionBuilder::AlternatePlane@endlink </li>
                    <li>@link Display::DynamicSectionBuilder::PlaneX Display::DynamicSectionBuilder::PlaneX@endlink </li>
                    <li>@link Display::DynamicSectionBuilder::PlaneY Display::DynamicSectionBuilder::PlaneY@endlink </li>
                    <li>@link Display::DynamicSectionBuilder::PlaneZ Display::DynamicSectionBuilder::PlaneZ@endlink </li>
                    <li>@link Display::DynamicSectionBuilder::SetNormal Display::DynamicSectionBuilder::SetNormal@endlink </li>
                    <li>@link Display::DynamicSectionBuilder::SetOffset Display::DynamicSectionBuilder::SetOffset@endlink </li>
                    <li>@link Display::DynamicSectionBuilder::SetOffsetByPoint Display::DynamicSectionBuilder::SetOffsetByPoint@endlink </li>
                    <li>@link Display::DynamicSectionBuilder::SetOrigin Display::DynamicSectionBuilder::SetOrigin@endlink </li>
                    <li>@link Display::DynamicSectionBuilder::SetPlane Display::DynamicSectionBuilder::SetPlane@endlink </li>
                </ul>
                 <br> 
                                
                 <br> 
                Following methods define a new axi-symmetric family
                 <br> 
                  
                 <br> 
                <ul>
                    <li>@link Display::DynamicSectionBuilder::SetRotationAngle Display::DynamicSectionBuilder::SetRotationAngle@endlink </li>
                    <li>@link Display::DynamicSectionBuilder::SetRotationMatrix Display::DynamicSectionBuilder::SetRotationMatrix@endlink </li>       
                </ul>
                 <br> 

                 <br> 
                <b>Transition between plane families</b>
                 <br> 

                 <br> When a method defining a new linear family is invoked, then if 
                 <br> 
                 <br> 
                <ul>
                    <li>the current plane is in a linear family, it will stay in the family.</li>
                    <li>the current plane is in a axi-symmetric family, it becomes the base 
                        plane of the linear family.</li>
                </ul>
                 <br> 
                
                 <br> The same thing happens when a method defining a new axi-symmetric plane           
                is invoked. 
                 <br> 
                
                 <br> 
                <b>Examples:</b>
                 <br> 
                
                 <br> <tt>1. Linear Family</tt>
                 <br> 
                
                 <br> 
                Goal: User wants to create a series of sections along X axis.
                 <br> 
                
                 <br> 
                API sequence:
                 <br> 
                
                 @code 
                planeX  - Create a plane with base plane at X = 0 
                              See Display.DynamicSectionBuilder.PlaneX
                SetOffset( 50 ) - Plane at X = 50 
                SetOffset( 100 ) - Plane at X = 100 
                SetOffset( 0 ) - Plane at X = 0 
                 @endcode 
                
                 <br> <tt>2. Axi-symmetric Family</tt>
                 <br> 
                
                 <br> 
                Goal: User wants to create a series of sections by planes rotated 
                      around X axis of the section plane.
                 <br> 
                
                 <br> 
                API sequence:
                 <br> 
                 @code 
                SetRotation( X, 45 ) - The current plane becomes base plane. Then 
                                       the plane rotated around X axis by 45 
                                       degrees. 
                SetRotation( X, 90 ) - Plane rotated around X axis by 90 degrees. 
                SetRotation( X, 90 ) - Plane rotated around X axis by 0 degrees. 
                                       Back to original position.
                 @endcode         
                
             
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CapColorOption </td> <td> 
         
        Any </td> </tr> 

        <tr><td> 
         
        ClipType </td> <td> 
         
        Section </td> </tr> 

        <tr><td> 
         
        CurveColorOption </td> <td> 
         
        Any </td> </tr> 

        <tr><td> 
         
        LockPlanes </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        ShowCap </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        ShowClip </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        ShowCurves (deprecated) </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ShowGrid </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ShowInterference </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ShowViewer </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        OnePlane </td> </tr> 

        </table>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_DISPLAYEXPORT  DynamicSectionBuilder : public Builder
        {
            private: DynamicSectionBuilderImpl * m_dynamicsectionbuilder_impl;
            private: friend class  _DynamicSectionBuilderBuilder;
            protected: DynamicSectionBuilder();
            public: ~DynamicSectionBuilder();
            /** Gets the active plane in the section. <br>  
                     *  See @link Display::DynamicSectionBuilder::SetActivePlane Display::DynamicSectionBuilder::SetActivePlane@endlink  
                     *  for details.  <br> 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void GetActivePlane
            (
                NXOpen::Display::DynamicSectionTypes::Axis* planeAxis /** planeaxis */ ,
                NXOpen::Display::DynamicSectionTypes::ActivePlane* activePlane /** activeplane */ 
            );
            /** Sets the active plane in the section 
                       
                         <br> 
                        Single Plane:
                         <br> 
                         <br> 
                            There is no secondary plane. Only primary plane exists.
                         <br> 
                        
                         <br> 
                        Two Parallel Plane Section:
                         <br> 
                         <br> 
                            @link Display::DynamicSectionTypes::AxisZ Display::DynamicSectionTypes::AxisZ@endlink  is the 
                            active axis and primary/secondary plane can be activated.
                         <br> 
                         <br> 
                        Box Section:
                         <br> 
                         <br> 
                            The active plane pair can be selected by specifying the planeAxis
                            Given an axis, the primary/secondary planes can be activated.
                         <br> 
                         <br> 
                            E.g. To activate primary plane along the local X axis use
                                 @link Display::DynamicSectionTypes::AxisX Display::DynamicSectionTypes::AxisX@endlink  and 
                                 @link Display::DynamicSectionTypes::ActivePlanePrimary Display::DynamicSectionTypes::ActivePlanePrimary@endlink .
                         <br> 
                        
                        
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetActivePlane
            (
                NXOpen::Display::DynamicSectionTypes::Axis planeAxis /** planeaxis */ ,
                NXOpen::Display::DynamicSectionTypes::ActivePlane activePlane /** activeplane */ 
            );
            /** Cycle through planes that are 90 degrees aligned to the current section plane.
                        For example, for a XY plane with normal along positive Z axis, invoking 
                        this method will cycle through the planes in the following order.
                         @code 
                        - YZ plane with normal along X axis
                        - XZ plane with normal along Y axis
                        - XY plane with normal along Z axis
                         @endcode 
                      
                        The section offset and rotation matrix are updated.                
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AlternatePlane
            (
            );
            /** Creates a datum plane from the active section plane.  @return  Datum plane 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DatumPlane * CreateDatumPlane
            (
            );
            /**  Edits the section object in the modeling view.
                         <br> 
                        The view being edited must be the modeling view. This is provided
                        to handle scenarios when the working view is changed when sectioning
                        is in progress. It is the responsibility of user to save pending
                        changes using @link Builder::Commit Builder::Commit@endlink  method. Otherwise,
                        any existing changes will be lost.
                         <br> 
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void EditView
            (
                NXOpen::ModelingView * view /** Modeling view */
            );
            /**Returns  the cap color. Used when cap color type is 
                        @link Display::DynamicSectionTypes::CapColorOptionAny Display::DynamicSectionTypes::CapColorOptionAny@endlink  
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * CapColor
            (
            );
            /**Sets  the cap color. Used when cap color type is 
                        @link Display::DynamicSectionTypes::CapColorOptionAny Display::DynamicSectionTypes::CapColorOptionAny@endlink  
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCapColor
            (
                NXOpen::NXColor * capColor /** capcolor */ 
            );
            /**Returns  the cap color option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::DynamicSectionTypes::CapColorOption CapColorOption
            (
            );
            /**Sets  the cap color option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCapColorOption
            (
                NXOpen::Display::DynamicSectionTypes::CapColorOption capColorOption /** capcoloroption */ 
            );
            /**Returns  the cap on off flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowCap
            (
            );
            /**Sets  the cap on off flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowCap
            (
                bool showCap /** showcap */ 
            );
            /**Returns  the clip on off flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowClip
            (
            );
            /**Sets  the clip on off flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowClip
            (
                bool showClip /** showclip */ 
            );
            /**Returns  the clip type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::DynamicSectionTypes::Clip ClipType
            (
            );
            /**Sets  the clip type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetClipType
            (
                NXOpen::Display::DynamicSectionTypes::Clip clipType /** cliptype */ 
            );
            /**Returns  the coordinate system used for creating section plane along
                        X, Y or Z principal planes.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::DynamicSectionTypes::CoordinateSystem CsysType
            (
            );
            /**Sets  the coordinate system used for creating section plane along
                        X, Y or Z principal planes.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCsysType
            (
                NXOpen::Display::DynamicSectionTypes::CoordinateSystem csys /** csys */ 
            );
            /**Returns  the curve color. Used when the curve color option is set to
                        @link Display::DynamicSectionTypes::CurveColorOptionAny Display::DynamicSectionTypes::CurveColorOptionAny@endlink .
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * CurveColor
            (
            );
            /**Sets  the curve color. Used when the curve color option is set to
                        @link Display::DynamicSectionTypes::CurveColorOptionAny Display::DynamicSectionTypes::CurveColorOptionAny@endlink .
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurveColor
            (
                NXOpen::NXColor * curveColor /** curvecolor */ 
            );
            /**Returns  the curve color option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::DynamicSectionTypes::CurveColorOption CurveColorOption
            (
            );
            /**Sets  the curve color option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurveColorOption
            (
                NXOpen::Display::DynamicSectionTypes::CurveColorOption curveColorOption /** curvecoloroption */ 
            );
            /**Returns  the defer curve update property. This property can be used to reduce number of
                        curve updates when performing a series of attribute changes on the dynamic
                        section. After the changes are done, undefer the curve update. Undeferring
                        will update the curves, if and only if, curve update is required based on
                        the applied changes.
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool DeferCurveUpdate
            (
            );
            /**Sets  the defer curve update property. This property can be used to reduce number of
                        curve updates when performing a series of attribute changes on the dynamic
                        section. After the changes are done, undefer the curve update. Undeferring
                        will update the curves, if and only if, curve update is required based on
                        the applied changes.
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDeferCurveUpdate
            (
                bool deferCurveUpdate /** defercurveupdate */ 
            );
            /**Returns  the curve on off flag.
                    
                         <br>            
                        When the dynamic section object is visible in the view, the
                        curves from the section object are shown in that view.            
                         <br> 
                      
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link ModelingView::IsDynamicSectionVisible ModelingView::IsDynamicSectionVisible@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0.  Use ModelingView::IsDynamicSectionVisible instead.") bool ShowCurves
            (
            );
            /**Sets  the curve on off flag.
                    
                         <br>            
                        When the dynamic section object is visible in the view, the
                        curves from the section object are shown in that view.            
                         <br> 
                      
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link ModelingView::SetDynamicSectionVisible ModelingView::SetDynamicSectionVisible@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0.  Use ModelingView::SetDynamicSectionVisible instead.") void SetShowCurves
            (
                bool showCurves /** showcurves */ 
            );
            /** Creates a grid settings builder from the active section plane.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::PlaneGridBuilder * GetGridSettings
            (
            );
            /**Returns  the interference color. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * InterferenceColor
            (
            );
            /**Sets  the interference color. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInterferenceColor
            (
                NXOpen::NXColor * interferenceColor /** interferencecolor */ 
            );
            /** Gets the section name. Caller is expected to free the memory.
                       @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetName
            (
            );
            /** Sets the section name. 
                         <br> 
                        The specified name will be validated. A section is expected to have a
                        unique name in a part. The name may be modified to make it unique within
                        the part.
                         <br> 
                      @return  If specified name was modified to 
                                                         ensure uniqueness 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool SetName
            (
                const NXString & sectionName /** Section name */
            );
            /** Sets the section name. 
                         <br> 
                        The specified name will be validated. A section is expected to have a
                        unique name in a part. The name may be modified to make it unique within
                        the part.
                         <br> 
                      @return  If specified name was modified to 
                                                         ensure uniqueness 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            bool SetName
            (
                const char * sectionName /** Section name */
            );
            /**Returns  the number of requested section planes in the current section series. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberInSeries
            (
            );
            /**Sets  the number of requested section planes in the current section series. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNumberInSeries
            (
                int numberSectionsRequested /** Number of section requested (\>= 1). */
            );
            /**Returns  the section plane spacing in the current section series. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double SeriesSpacing
            (
            );
            /**Sets  the section plane spacing in the current section series. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSeriesSpacing
            (
                double sectionSpacing /** Distance between sections (\>= 0.02). */
            );
            /**Returns  the interference on off flag. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowInterference
            (
            );
            /**Sets  the interference on off flag. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowInterference
            (
                bool showInterference /** showinterference */ 
            );
            /**Returns  the lock planes flag. The planes can be locked in case of Two Parallel
                        Planes and Box Section. When locked the planes will move together.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool LockPlanes
            (
            );
            /**Sets  the lock planes flag. The planes can be locked in case of Two Parallel
                        Planes and Box Section. When locked the planes will move together.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLockPlanes
            (
                bool lockPlanes /** lockplanes */ 
            );
            /** Gets the normal of the section plane  @return  Section plane normal 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Vector3d GetNormal
            (
            );
            /** Sets the normal of the section plane 
                         <br> 
                        Section offset and rotation matrix are updated.
                         <br> 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormal
            (
                const NXOpen::Vector3d & normal /** Section plane normal */
            );
            /** Gets the the plane offset.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double GetOffset
            (
            );
            /** Sets the the plane offset. When there are more than one
                        clipping planes in the section, the active clipping plane will be 
                        not be allowed to cross-over the non-active clipping plane.
                         <br> 
                        If @link Display::DynamicSectionBuilder::LockPlanes Display::DynamicSectionBuilder::LockPlanes @endlink and @link Display::DynamicSectionBuilder::SetLockPlanes Display::DynamicSectionBuilder::SetLockPlanes @endlink 
                        is off, section thickness is updated.
                         <br> 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOffset
            (
                double offset /** Offset */
            );
            /** Gets minimum and maximum offset limits.
                         <br> 
                        Offset limits are dependent on the active section plane. They
                        are determined based on the model bounding box and location
                        of the active section plane. 
                         <br> 
                         <br> 
                        @link Display::DynamicSectionBuilder::SetOffset Display::DynamicSectionBuilder::SetOffset@endlink 
                        can specify offset outside the offset limits. In that case the
                        offset limits are extended to include the specified offset.  
                         <br>           
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void GetOffsetLimits
            (
                double* minimumOffset /** Minimum offset */,
                double* maximumOffset /** Minimum offset */
            );
            /** Gets the section origin.  @return  Section origin 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d GetOrigin
            (
            );
            /** Sets the section origin. 
                         <br> 
                        The section is moved to new location. It obeys the lock flag
                        @link Display::DynamicSectionBuilder::LockPlanes Display::DynamicSectionBuilder::LockPlanes @endlink and @link Display::DynamicSectionBuilder::SetLockPlanes Display::DynamicSectionBuilder::SetLockPlanes @endlink .
                        if it is a multiple plane section.
                         <br> 
                        Section offset is updated.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOrigin
            (
                const NXOpen::Point3d & origin /** Section origin */
            );
            /** Offsets section origin within current section plane.
                         <br> 
                        The section is moved to new location along in the section plane.
                        The offsets are w.r.t. current origin along the X and Y
                        axis of the section plane respectively.   <br>        
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void OffsetOriginInPlane
            (
                double xOffset /** Delta X from the current position */,
                double yOffset /** Delta Y from the current position */
            );
            /** Gets the thickness between active plane pair. This is valid
                        when the section contains more than one clipping plane. When the
                        section planes are locked, setting thickness will not alter the 
                        current thickness.
                      @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double GetPlaneThickness
            (
            );
            /** Sets the thickness between active plane pair. This property is only available
                        when the section contains more than one clipping plane. When the
                        section planes are locked, setting thickness will not alter the 
                        current thickness.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPlaneThickness
            (
                double planeThickness /** Active plane thickness */
            );
            /**Returns  the reverse series flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseSeries
            (
            );
            /**Sets  the reverse series flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReverseSeries
            (
                bool reverseSeries /** reverseseries */ 
            );
            /** Gets rotation angle for specified axis.  @return  Rotation angle in degrees 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double GetRotationAngle
            (
                NXOpen::Display::DynamicSectionTypes::Axis rotationAxis /** rotationaxis */ 
            );
            /** Rotates the section about specified axis by the specified angle.
                        If a rotation already exists about the specified axis, then 
                        the section is rotated such that the total rotation angle is 
                        set to the specified angle. Rotation about only one axis is 
                        active at a time.
                         @code 
                        1. Create plane with normal along Z.

                        2. Display.DynamicSectionBuilder.SetRotationAngle( X, 30 )
                           Rotates plane around X axis by 30 degrees

                        3. Display.DynamicSectionBuilder.SetRotationAngle( X, 45 )
                           Incremental rotation of 45 - 30 = 15 degrees.
                         @endcode 
                         <br>  
                        Section offset and rotation matrix are updated.
                         <br> 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRotationAngle
            (
                NXOpen::Display::DynamicSectionTypes::Axis rotationAxis /** rotationaxis */ ,
                double angle /** Rotation angle in degrees */
            );
            /** Gets the section rotation matrix  @return  Rotation matrix 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 GetRotationMatrix
            (
            );
            /** Sets the section rotation matrix
                         <br> 
                        Specify @link Display::DynamicSectionTypes::AxisNone Display::DynamicSectionTypes::AxisNone@endlink  
                        if the axis about which rotation was performed is not known.
                         <br> 
                         <br> 
                        Section offset and rotation matrix are updated.
                         <br> 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRotationMatrix
            (
                NXOpen::Display::DynamicSectionTypes::Axis rotationAxis /** rotationaxis */ ,
                const NXOpen::Matrix3x3 & rotationMatrix /** Rotation matrix */
            );
            /**Returns  the section type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::DynamicSectionTypes::Type Type
            (
            );
            /**Sets  the section type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Display::DynamicSectionTypes::Type type /** type */ 
            );
            /**Returns  the modeling view in which section object edits are being done.
                         <br> 
                        @link Display::DynamicSectionBuilder::SetView Display::DynamicSectionBuilder::SetView@endlink  method is
                        present for legacy reasons. 
                        
                        Use @link Display::DynamicSectionBuilder::EditView Display::DynamicSectionBuilder::EditView@endlink  instead.
                         <br>             
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ModelingView * View
            (
            );
            /**Sets  the modeling view in which section object edits are being done.
                         <br> 
                        @link Display::DynamicSectionBuilder::SetView Display::DynamicSectionBuilder::SetView@endlink  method is
                        present for legacy reasons. 
                        
                        Use @link Display::DynamicSectionBuilder::EditView Display::DynamicSectionBuilder::EditView@endlink  instead.
                         <br>             
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetView
            (
                NXOpen::ModelingView * view /** Modeling view */
            );
            /**Returns  the show grid display flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowGrid
            (
            );
            /**Sets  the show grid display flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowGrid
            (
                bool showGrid /** showgrid */ 
            );
            /**Returns  the 2D viewer display flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowViewer
            (
            );
            /**Sets  the 2D viewer display flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowViewer
            (
                bool showViewer /** showviewer */ 
            );
            /** Loads all components that intersect the current section plane. Errors
                        are reported by the part load status. Caller is expected to destroy
                        the memory used by load status object.
                      @return  New component loaded flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: bool LoadAllIntersecting
            (
                NXOpen::PartLoadStatus ** loadStatus /**
                                Errors occurred during loading of parts. */
            );
            /** Loads components that intersect the current section plane and are  
                        near the section plane origin. The distance used for which components 
                        are "near" the section plane origin is determined internally. Errors 
                        are reported by the part load status. Caller is expected to destroy 
                        the memory used by load status object.
                      @return  New component loaded flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: bool LoadNearIntersecting
            (
                NXOpen::PartLoadStatus ** loadStatus /**
                                Errors occurred during loading of parts. */
            );
            /** Creates a plane along X direction.
                         <br> 
                        The plane is created with the base plane at the origin with normal 
                        along X axis of the coordinate system 
                        @link Display::DynamicSectionBuilder::CsysType Display::DynamicSectionBuilder::CsysType @endlink and @link Display::DynamicSectionBuilder::SetCsysType Display::DynamicSectionBuilder::SetCsysType @endlink .                
                         <br> 
                         <br> 
                        The location of the plane depends on the bounding box of all
                        parts displayed in the view. The plane is positioned at the center
                        of the bounding box.
                         <br> 
                         <br> 
                        Section offset and rotation matrix are updated.
                         <br> 
                         <br> 
                        Section thickness is recomputed based on the bounding box.
                         <br> 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void PlaneX
            (
            );
            /** Creates a plane along Y direction.
                         <br> 
                        The plane is created with the base plane at the origin with normal 
                        along Y axis of the coordinate system 
                        @link Display::DynamicSectionBuilder::CsysType Display::DynamicSectionBuilder::CsysType @endlink and @link Display::DynamicSectionBuilder::SetCsysType Display::DynamicSectionBuilder::SetCsysType @endlink .
                         <br> 
                         <br> 
                        The location of the plane depends on the bounding box of all
                        parts displayed in the view. The plane is positioned at the center
                        of the bounding box.
                         <br> 
                         <br> 
                        Section offset and rotation matrix are updated.
                         <br> 
                         <br>   
                        Section thickness is recomputed based on the bounding box. 
                         <br>     
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void PlaneY
            (
            );
            /** Creates a plane along Z direction. 
                         <br> 
                        The plane is created with the base plane at the origin with normal  
                        along Z axis of the coordinate system 
                        @link Display::DynamicSectionBuilder::CsysType Display::DynamicSectionBuilder::CsysType @endlink and @link Display::DynamicSectionBuilder::SetCsysType Display::DynamicSectionBuilder::SetCsysType @endlink .
                         <br> 
                         <br> 
                        The location of the plane depends on the bounding box of all
                        parts displayed in the view. The plane is positioned at the center
                        of the bounding box.
                         <br> 
                         <br> 
                        Section offset and rotation matrix are updated.
                         <br> 
                         <br>    
                        Section thickness is recomputed based on the bounding box.     
                         <br>          
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void PlaneZ
            (
            );
            /** Restores the section to the saved section in the view database. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void RestoreView
            (
            );
            /** Reverses the plane direction. This will flip the side of the model
                        being clipped.
                         <br> 
                        Section rotation matrix is updated.      
                         <br> 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void ReverseDirection
            (
            );
            /** Creates curves by intersecting all clipping planes of the section with 
                        all visible bodies in the scene and adds them to the group created with the 
                        specified name. The group is displayed in the part navigator. If the 
                        customer default "Load Solids/Sheets when Saving Section Curves" is 
                        enabled, then this will load exact solid/sheet bodies for the visible 
                        lightweight bodies intersecting the clipping planes. This may increase 
                        the time and memory used by the operation, but will ensure exact 
                        section curves.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveCurves
            (
                const NXString & groupName /** Name of the group containing curves   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates curves by intersecting all clipping planes of the section with 
                        all visible bodies in the scene and adds them to the group created with the 
                        specified name. The group is displayed in the part navigator. If the 
                        customer default "Load Solids/Sheets when Saving Section Curves" is 
                        enabled, then this will load exact solid/sheet bodies for the visible 
                        lightweight bodies intersecting the clipping planes. This may increase 
                        the time and memory used by the operation, but will ensure exact 
                        section curves.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SaveCurves
            (
                const char * groupName /** Name of the group containing curves   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set current section plane to its default definition. This will 
                        only modify section plane geometry.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultPlane
            (
            );
            /** Set current section to the default values. This will modify
                        all section geometry as well as section attributes.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaults
            (
            );
            /** This method offsets the active clipping plane such that the plane 
                        passes through the specified point. When there are more than one
                        clipping planes in the section, the active clipping plane will be 
                        not be allowed to cross-over the non-active clipping plane.
                         <br> 
                        See @link Display::DynamicSectionBuilder::SetOffset Display::DynamicSectionBuilder::SetOffset@endlink 
                         <br> 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOffsetByPoint
            (
                const NXOpen::Point3d & point /** Point in absolute coordinate system. */
            );
            /** Sets a section plane to be the specified plane 
                        The plane is created at the specified origin with the
                        specified rotation matrix. The axis origin can be same as
                        the plane origin. To defind a linear plane family from the
                        absolute origin, define axis origin as {0, 0, 0}. The section
                        offset will reflect the distance of the plane from the
                        axis origin.
                         <br> 
                        Section offset and rotation matrix are updated.
                         <br> 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPlane
            (
                const NXOpen::Point3d & axisOrigin /** Axis origin */,
                const NXOpen::Point3d & origin /** Plane origin. */,
                const NXOpen::Matrix3x3 & rotationMatrix /** Rotation matrix */
            );
            /** Shows the section curves in the view associated with the builder.
                        If no view is associated with the builder, then the curves are 
                        Shown in the current work view.
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void ShowSectionCurves
            (
                bool showCurves /** showcurves */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
