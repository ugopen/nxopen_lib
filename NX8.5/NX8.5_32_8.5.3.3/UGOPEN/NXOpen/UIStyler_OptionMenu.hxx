#ifndef NXOpen_UISTYLER_OPTIONMENU_HXX_INCLUDED
#define NXOpen_UISTYLER_OPTIONMENU_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_OptionMenu.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UIStyler
    {
        class OptionMenu;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        class OptionMenuImpl;
        /** Represents a OptionMenu for UI Styler. 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  OptionMenu : public UIStyler::StylerItem
        {
            public: /** Called when a dialog user selects an option from the menu.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Activate;
            private: OptionMenuImpl * m_optionmenu_impl;
            /// \cond NX_NO_DOC 
            public: explicit OptionMenu(void *ptr);
            /// \endcond 
            /**Registers activate callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddActivateHandler
            (
                const NXOpen::UIStyler::OptionMenu::Activate&  activateevent /** Callback for activate event */,
                bool isDialogLaunchingEvent /** TRUE if dialog is going to launch, FALSE if not */
            );
            /** Set an array of bitmap filenames 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBitmap
            (
                std::vector<NXString> & bitmaps /** An array of one or more bitmap filenames. 
                        If all bitmaps for the option menu reside in the same file, specify an array of just one entry, 
                        which contains the bitmap filename for this attribute. All existing choices for the option menu 
                        remains intact when this attribute is set. Only the bitmaps are changed. Note that the number of 
                        bitmaps must match the number of existing choices.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns an array of bitmaps  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBitmap
            (
            );
            /** Sets label 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLabel
            (
                const NXString & strLabel /** Text to be set for the descriptive label.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets label 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetLabel
            (
                const char * strLabel /** Text to be set for the descriptive label.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set an array of items 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetItems
            (
                std::vector<NXString> & strListArray /** An array of new choices to be used for the 
                        dialog item. Note that this removes all existing choices (both text and bitmaps)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns an array if items  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetItems
            (
            );
            /**Sets  the item value 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetItemValue
            (
                int subitemIndex /** Zero-based index indicating the choice to be selected. 
                        It must be in the range of existing choices. */
            );
            /**Returns  the item value 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int ItemValue
            (
            );
            /** Sets the sensitivity 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSensitivity
            (
                int subitemIndex /** If the entire dialog item should change to the new Sensitivity state, 
                        set this field to UF_STYLER_NO_SUB_INDEX. If only one subitem should change to the new sensitivity state,
                        set this field to its zero-based index. */,
                bool type /** TRUE if sensitive, FALSE if insensitive */
            );
            /** Gets the sensitivity  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetSensitivity
            (
            );
            /**Sets  the visibility 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /** TRUE if visible, FALSE if invisible */
            );
            /**Returns  the visibility 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Visibility
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
