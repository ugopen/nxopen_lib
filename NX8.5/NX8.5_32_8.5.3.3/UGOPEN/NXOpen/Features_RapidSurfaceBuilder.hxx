#ifndef NXOpen_FEATURES_RAPIDSURFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_RAPIDSURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_RapidSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_GeometricConstraintDataSetManager.hxx>
#include <NXOpen/Features_RapidSurfaceBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class RapidSurfaceBuilder;
    }
    class Direction;
    namespace Facet
    {
        class SelectFacetedBody;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class GeometricConstraintDataSetManager;
    }
    class Point;
    class SelectCurve;
    class SelectCurveList;
    class Spline;
    namespace Features
    {
        class _RapidSurfaceBuilderBuilder;
        class RapidSurfaceBuilderImpl;
        /**
            Represents a @link Features::RapidSurface Features::RapidSurface@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateRapidSurfaceBuilder  Features::FeatureCollection::CreateRapidSurfaceBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AttachmentType </td> <td> 
         
        FacetBody </td> </tr> 

        <tr><td> 
         
        Degree </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        LoopType </td> <td> 
         
        FourSided </td> </tr> 

        <tr><td> 
         
        NodeTolerance </td> <td> 
         
        1.0 </td> </tr> 

        <tr><td> 
         
        Segments </td> <td> 
         
        10 </td> </tr> 

        <tr><td> 
         
        Smoothness </td> <td> 
         
        100 </td> </tr> 

        <tr><td> 
         
        UPatches </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        VPatches </td> <td> 
         
        2 </td> </tr> 

        </table>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  RapidSurfaceBuilder : public Features::FeatureBuilder
        {
            /** the operation types */
            public: enum OperationTypes
            {
                OperationTypesDrawOnFacetBody/** draw on facet body */,
                OperationTypesDrawOnBoundary/** draw on boundary */,
                OperationTypesImportCurves/** import curves */,
                OperationTypesSubdivideLoop/** subdivide loop */
            };

            /** the attachment types */
            public: enum AttachmentTypes
            {
                AttachmentTypesFacetBody/** attach to facet body */,
                AttachmentTypesNone/** attach to nothing */
            };

            /** the subdivision loop types */
            public: enum LoopTypes
            {
                LoopTypesFourSided/** subdivide four sided loops */,
                LoopTypesThreeSided/** subdivide three sided loops */
            };

            private: RapidSurfaceBuilderImpl * m_rapidsurfacebuilder_impl;
            private: friend class  _RapidSurfaceBuilderBuilder;
            protected: RapidSurfaceBuilder();
            public: ~RapidSurfaceBuilder();
            /**Returns  the facet body 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Facet::SelectFacetedBody * FacetBody
            (
            );
            /**Returns  the operation type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::RapidSurfaceBuilder::OperationTypes OperationType
            (
            );
            /**Sets  the operation type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetOperationType
            (
                NXOpen::Features::RapidSurfaceBuilder::OperationTypes option /** option */ 
            );
            /**Returns  the attachment type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::RapidSurfaceBuilder::AttachmentTypes AttachmentType
            (
            );
            /**Sets  the attachment type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetAttachmentType
            (
                NXOpen::Features::RapidSurfaceBuilder::AttachmentTypes option /** option */ 
            );
            /**Returns  the subdivision loop type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::RapidSurfaceBuilder::LoopTypes LoopType
            (
            );
            /**Sets  the subdivision loop type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetLoopType
            (
                NXOpen::Features::RapidSurfaceBuilder::LoopTypes option /** option */ 
            );
            /**Returns  the constraint set manager 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::GeometricConstraintDataSetManager * ConstraintSetManager
            (
            );
            /**Returns  the boundary point set manager 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::GeometricConstraintDataSetManager * BoundaryPointSetManager
            (
            );
            /**Returns  the loop curve(U) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectCurve * ULoopCurve
            (
            );
            /**Returns  the loop curve(V) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectCurve * VLoopCurve
            (
            );
            /**Returns  the patches(U) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: int UPatches
            (
            );
            /**Sets  the patches(U) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetUPatches
            (
                int patchesU /** patches u */ 
            );
            /**Returns  the patches(V)  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: int VPatches
            (
            );
            /**Sets  the patches(V)  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetVPatches
            (
                int patchesV /** patches v */ 
            );
            /**Returns  the smoothness 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: int Smoothness
            (
            );
            /**Sets  the smoothness 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetSmoothness
            (
                int smoothness /** smoothness */ 
            );
            /**Returns  the import curves 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectCurveList * ImportCurves
            (
            );
            /**Returns  the projection direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Direction * ProjectDirection
            (
            );
            /**Sets  the projection direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProjectDirection
            (
                NXOpen::Direction * projectDirection /** projectdirection */ 
            );
            /**Returns  the delete curves 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectCurveList * DeleteCurves
            (
            );
            /**Returns  the drag curve 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectCurve * DragCurve
            (
            );
            /**Returns  the curve used for drag curve point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::GeometricConstraintDataSetManager * DragCurvePointManager
            (
            );
            /**Returns  the degree 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: int Degree
            (
            );
            /**Sets  the degree 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetDegree
            (
                int degree /** degree */ 
            );
            /**Returns  the segments 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: int Segments
            (
            );
            /**Sets  the segments 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetSegments
            (
                int segments /** segments */ 
            );
            /**Returns  the node tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double NodeTolerance
            (
            );
            /**Sets  the node tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetNodeTolerance
            (
                double nodeTolerance /** nodetolerance */ 
            );
            /** Accepts new facet body 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void AcceptNewFacetBody
            (
            );
            /** Imports curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ImportCurve
            (
            );
            /** Accepts subdivision 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void AcceptSubdivision
            (
            );
            /** Sets number of defining points 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetNumberOfDefiningPoints
            (
                int number /** Number of Defined Points */
            );
            /** Sets a defining point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetDefiningPoint
            (
                int index /** Index of Defined Point */,
                const NXOpen::Point3d & coordination /** x,y,z coordination of Defined Point */,
                int facetID /** Facet ID of Defined Point */
            );
            /** Set number of define points (pre-NX6) 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link Features::RapidSurfaceBuilder::SetNumberOfDefiningPoints Features::RapidSurfaceBuilder::SetNumberOfDefiningPoints@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0.  Use Features::RapidSurfaceBuilder::SetNumberOfDefiningPoints instead.") void SetNumberOfDefinePoints
            (
                int number /** Number of Defined Points */
            );
            /** Set a define point (pre-NX6) 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link Features::RapidSurfaceBuilder::SetDefiningPoint Features::RapidSurfaceBuilder::SetDefiningPoint@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0.  Use Features::RapidSurfaceBuilder::SetDefiningPoint instead.") void SetADefinePoint
            (
                int index /** Index of Defined Point */,
                double xx /** XC of Defined Point */,
                double yy /** YC of Defined Point */,
                double zz /** ZC of Defined Point */,
                int facetID /** Facet ID of Defined Point */
            );
            /** Resets animation polyline 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ResetAnimationPolyline
            (
            );
            /** Creates animation polyline 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void CreateAnimationPolyline
            (
            );
            /** Creates boundary curve 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void CreateBoundaryCurve
            (
            );
            /** Draws curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void DrawCurve
            (
            );
            /** Draws boundary curve 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void DrawBoundaryCurve
            (
            );
            /** Deletes curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void DeleteCurve
            (
            );
            /** Deletes node 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void DeleteNode
            (
                NXOpen::Point * point /** Point */
            );
            /** Drags curve point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void DragCurvePoint
            (
            );
            /** Moves node 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void MoveNode
            (
                NXOpen::Point * point /** Point */,
                const NXOpen::Point3d & newPosition /** the new position the point move to */
            );
            /** Reprojects edges after move node 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ReprojectEdgesAfterMoveNode
            (
            );
            /** Creates points to record every mesh node @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: std::vector<NXOpen::Point *> CreateNodePoints
            (
            );
            /** Asks edge count in the current curve network  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: int AskEdgeCount
            (
            );
            /** Asks an edge in the current curve network  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Spline * AskEdge
            (
                int edgeIndex /** Edge Index */
            );
            /** Gets node count in the current curve network  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: int GetNodeCount
            (
            );
            /** Gets a node in the current curve network  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Point * GetNode
            (
                int nodeIndex /** Node Index */
            );
            /**Returns  the connect curves 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectCurveList * ConnectCurves
            (
            );
            /** Accepts connect curve 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ConnectCurve
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
