#ifndef NXOpen_WELD_CHARACTERISTICSBUILDER_HXX_INCLUDED
#define NXOpen_WELD_CHARACTERISTICSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_CharacteristicsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Weld_CharacteristicsBuilder.hxx>
#include <NXOpen/Weld_CharacteristicsSelectionBuilder.hxx>
#include <NXOpen/Weld_CharacteristicsValueBuilder.hxx>
#include <NXOpen/libnxopencpp_weld_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Weld
    {
        class CharacteristicsBuilder;
    }
    class Builder;
    class NXObject;
    class NXObjectList;
    class SelectNXObject;
    namespace Weld
    {
        class CharacteristicsSelectionBuilder;
    }
    namespace Weld
    {
        class CharacteristicsValueBuilder;
    }
    namespace Weld
    {
        class _CharacteristicsBuilderBuilder;
        class CharacteristicsBuilderImpl;
        /** This builder allows you to define the attribute values to be set on the
            output of the weld feature.  <br> To create a new instance of this class, use @link Weld::WeldManager::CreateCharacteristicsBuilder  Weld::WeldManager::CreateCharacteristicsBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_WELDEXPORT  CharacteristicsBuilder : public Builder
        {
            private: CharacteristicsBuilderImpl * m_characteristicsbuilder_impl;
            private: friend class  _CharacteristicsBuilderBuilder;
            protected: CharacteristicsBuilder();
            public: ~CharacteristicsBuilder();
            /**Returns  the selection object containing data that is used to define the attribute values. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * InheritObject
            (
            );
            /**Returns  the list of potential attributes and objects selected for this weld feature. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObjectList * SelectionList
            (
            );
            /** Create a new selection set and add it to the list.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::CharacteristicsSelectionBuilder * CreateSelectionSet
            (
                int weldType /** The type of welding feature being processed, see uf_weld_types.h. */,
                NXOpen::NXObject * data /** An object to retrieve the current attribute settings. */
            );
            /** Apply the selected attributes to the objects. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void ApplyAttributes
            (
                const std::vector<NXOpen::NXObject *> & objects /** The objects to apply the attributes to. */
            );
            /** Remove any attributes that are inherited from other objects (for example, edges).  These will be attributes that are
                        not required and are not in a category. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void RemoveInheritedAttributes
            (
            );
            /** Remove all attributes from the objects. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveAllAttributes
            (
                const std::vector<NXOpen::NXObject *> & objects /** The objects to remove the attributes from. */
            );
            /** Apply the selected attributes to the objects that were selected. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void ApplyAttributesToSelected
            (
            );
            /** Inherit the attributes that are on the object to the selection. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void InheritAttributesFromObject
            (
                NXOpen::NXObject * object /** The object from which to inherit the attributes. */
            );
            /** Copy the attributes that are on the object to the selection. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void CopyAttributesFromObject
            (
                NXOpen::NXObject * object /** The object from which to copy the attributes. */
            );
            /** Copy the non active attributes that are on the object to the selection. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void CopyNonActiveAttributesFromObject
            (
                NXOpen::NXObject * object /** The object from which to copy the attributes. */
            );
            /** Copy the attributes that are on the object to the selection and returns a flag indicating whether the object actually has attributes.  @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool DoesObjectHaveAttributes
            (
                NXOpen::NXObject * object /** The object from which to copy the attributes. */
            );
            /** Returns true if the characteristics builder has any active values.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool HasActiveValues
            (
            );
            /** Returns true if the characteristics builder contains all attributes with default values.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool AreAttributesDefault
            (
                int weldType /** The type of welding feature being processed, see uf_weld_types.h. */
            );
            /**Returns  the selected characteristic value. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::CharacteristicsValueBuilder * Selected
            (
            );
            /**Sets  the selected characteristic value. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSelected
            (
                NXOpen::Weld::CharacteristicsValueBuilder * valueBuilder /** valuebuilder */ 
            );
            /** Change the type of feature defining the attributes. 
                        Note after calling this method, the WeldJA::CharacteristicsValueBuilder objects 
                        previously retrieved will be invalid. You need to reaccess them if you want to
                        make any changes to them. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void ChangeFeatureType
            (
                int weldType /** The type of welding feature being processed, see uf_weld_types.h. */
            );
            /** Sets all attributes to be changed. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAllAttributesChanged
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
