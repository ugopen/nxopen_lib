#ifndef NXOpen_CAE_LAMINATEGLOBALLAYUP_HXX_INCLUDED
#define NXOpen_CAE_LAMINATEGLOBALLAYUP_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_LaminateGlobalLayup.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_LaminateFiberOrientationOptions.hxx>
#include <NXOpen/CAE_LaminateFiberOrientationOptionsBuilder.hxx>
#include <NXOpen/CAE_LaminateLockAngleBuilder.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class LaminateGlobalLayup;
    }
    namespace CAE
    {
        class LaminateFiberOrientationOptions;
    }
    namespace CAE
    {
        class LaminateFiberOrientationOptionsBuilder;
    }
    namespace CAE
    {
        class LaminateGlobalLayupPlyGroupCollection;
    }
    namespace CAE
    {
        class LaminateLockAngleBuilder;
    }
    class NXObject;
    namespace CAE
    {
        class _LaminateGlobalLayupBuilder;
        class LaminateGlobalLayupImpl;
        /** Represent a global layup in the ply based modeling. 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  LaminateGlobalLayup : public NXObject
        {
            /** Used to specify the stacking recipe of the global layup */
            public: enum StackingRecipeType
            {
                StackingRecipeTypeNormal/** Normal */,
                StackingRecipeTypeSymmetric/** Symmetric */,
                StackingRecipeTypeSymmetricWithCore/** Symmetric with core */,
                StackingRecipeTypeRepeated/** Repeated */,
                StackingRecipeTypeRepeatedWithCore/** Repeated with core */
            };

            private: LaminateGlobalLayupImpl * m_laminategloballayup_impl;
            private: friend class  _LaminateGlobalLayupBuilder;
            protected: LaminateGlobalLayup();
            public: ~LaminateGlobalLayup();
            /** Creates a @link CAE::LaminateFiberOrientationOptionsBuilder CAE::LaminateFiberOrientationOptionsBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: NXOpen::CAE::LaminateFiberOrientationOptionsBuilder * CreateFiberOrientationOptionsBuilder
            (
            );
            /**Returns  the fiber orientation options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: NXOpen::CAE::LaminateFiberOrientationOptions * FiberOrientationOptions
            (
            );
            /** Creates a @link CAE::LaminateLockAngleBuilder CAE::LaminateLockAngleBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: NXOpen::CAE::LaminateLockAngleBuilder * CreateLockAngleBuilder
            (
            );
            /**Returns  the global layup name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: NXString Name
            (
            );
            /**Sets  the global layup name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetName
            (
                const NXString & name /** layup name */
            );
            /**Sets  the global layup name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            void SetName
            (
                const char * name /** layup name */
            );
            /**Returns  the global layup label 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: int Label
            (
            );
            /**Sets  the global layup label 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetLabel
            (
                int label /** layup label */
            );
            /**Returns  the global layup stacking recipe 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: NXOpen::CAE::LaminateGlobalLayup::StackingRecipeType StackingRecipe
            (
            );
            /**Sets  the global layup stacking recipe 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetStackingRecipe
            (
                NXOpen::CAE::LaminateGlobalLayup::StackingRecipeType stacinkRecipe /** stacking recipe */
            );
            /**Returns  the global layup active status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: bool ActiveStatus
            (
            );
            /**Sets  the global layup active status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetActiveStatus
            (
                bool active /** layup active status */
            );
            /** Removes all the ply groups and plies from the global layup 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void ClearLayup
            (
            );
            /** Refresh the global layup linked ply group state 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void RefreshLinkedGroups
            (
            );
            /** Display global layup information 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void Information
            (
                bool detailed /** detailed */ 
            );
            /** Compute draping for all the plies under this global layup. 
                        Plies that are already computed wont be recomputed. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void UpdateDraping
            (
            );
            /** Exports draping results to a csv file. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void ExportDrapingResults
            (
                const NXString & csvFilename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool showShearAngle /** showshearangle */ ,
                bool showYarnAngle /** showyarnangle */ ,
                bool showPrimaryDirection /** showprimarydirection */ ,
                bool showSecondaryDirection /** showsecondarydirection */ ,
                bool showNormalDirection /** shownormaldirection */ 
            );
            /** Exports draping results to a csv file. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            void ExportDrapingResults
            (
                const char * csvFilename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool showShearAngle /** showshearangle */ ,
                bool showYarnAngle /** showyarnangle */ ,
                bool showPrimaryDirection /** showprimarydirection */ ,
                bool showSecondaryDirection /** showsecondarydirection */ ,
                bool showNormalDirection /** shownormaldirection */ 
            );
            /** Exports draping domain to a group 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void ExportDrapingDomainAsGroups
            (
                bool individualPlyGroups /** If true, create one group per ply. If false, put everything in the same group */
            );
            /** Export simple layup definition to a csv file. 
                        Corresponds to the CSV layup export button in the Ply Layup section of the Layup Modeler dialog. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void ExportLayup
            (
                const NXString & csvFilename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Export simple layup definition to a csv file. 
                        Corresponds to the CSV layup export button in the Ply Layup section of the Layup Modeler dialog. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            void ExportLayup
            (
                const char * csvFilename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Defines the range of id to be used for symmetric and repeated plies. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void DefineSymPlyidRange
            (
                int minId /** Minimum symmetric ply id, inclusive */,
                int maxId /** Maximum symmetric ply id, exclusive */
            );
            /** Exports ply definitions to FiberSim using the hdf5 file format. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void ExportPliesToFibersim
            (
                const NXString & filename /** File to which the plies will be exported using the FiberSim hdf5 format.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports ply definitions to FiberSim using the hdf5 file format. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            void ExportPliesToFibersim
            (
                const char * filename /** File to which the plies will be exported using the FiberSim hdf5 format.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );


            /** The list of ply groups associated to global layup 
             <br>  Created in NX6.0.2.  <br>  
            */
            public: NXOpen::CAE::LaminateGlobalLayupPlyGroupCollection *PlyGroups();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
