#ifndef NXOpen_GEOMETRICUTILITIES_CURVEFITDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CURVEFITDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_CurveFitData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveFitData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class CurveFitData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _CurveFitDataBuilder;
        class CurveFitDataImpl;
        /** Represents the curve fitting methods options.
            
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  CurveFitData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Represents the curve fitting method in the case of advanced fitting
                    */
            public: enum Method
            {
                MethodDegreeAndSegments/** Degree and Segments */,
                MethodDegreeAndTolerance/** Degree and Tolerance */,
                MethodKeepParameterization/** Keep Parameterization */,
                MethodAutoFit/** Auto Fit */
            };

            /** Represents the curve join method
                    */
            public: enum Join
            {
                JoinNo/** No */,
                JoinCubic/** Cubic */,
                JoinGeneral/** General */,
                JoinQuintic/** Quintic */
            };

            private: CurveFitDataImpl * m_curvefitdata_impl;
            private: friend class  _CurveFitDataBuilder;
            protected: CurveFitData();
            public: ~CurveFitData();
            /**Returns  the advanced fitting option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsAdvancedFit
            (
            );
            /**Sets  the advanced fitting option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAdvancedFit
            (
                bool isAdvancedFit /** isadvancedfit */ 
            );
            /**Returns  the fitting method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveFitData::Method FitMethod
            (
            );
            /**Sets  the fitting method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFitMethod
            (
                NXOpen::GeometricUtilities::CurveFitData::Method fitMethod /** fitmethod */ 
            );
            /**Returns  the fitting degree 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int Degree
            (
            );
            /**Sets  the fitting degree 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDegree
            (
                int degree /** degree */ 
            );
            /**Returns  the fitting segments 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int Segments
            (
            );
            /**Sets  the fitting segments 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSegments
            (
                int segments /** segments */ 
            );
            /**Returns  the minimum degree 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int MinimumDegree
            (
            );
            /**Sets  the minimum degree 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumDegree
            (
                int minimumDegree /** minimumdegree */ 
            );
            /**Returns  the maximum degree 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int MaximumDegree
            (
            );
            /**Sets  the maximum degree 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumDegree
            (
                int maximumDegree /** maximumdegree */ 
            );
            /**Returns  the maximum segments 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int MaximumSegments
            (
            );
            /**Sets  the maximum segments 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumSegments
            (
                int maximumSegments /** maximumsegments */ 
            );
            /**Returns  the align shape option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsAlignShape
            (
            );
            /**Sets  the align shape option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAlignShape
            (
                bool isAlignShape /** isalignshape */ 
            );
            /**Returns  the curve join method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveFitData::Join CurveJoinMethod
            (
            );
            /**Sets  the curve join method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurveJoinMethod
            (
                NXOpen::GeometricUtilities::CurveFitData::Join curveJoinMethod /** curvejoinmethod */ 
            );
            /**Returns  the tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the angle tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
