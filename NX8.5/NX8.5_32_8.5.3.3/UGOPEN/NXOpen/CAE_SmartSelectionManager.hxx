#ifndef NXOpen_CAE_SMARTSELECTIONMANAGER_HXX_INCLUDED
#define NXOpen_CAE_SMARTSELECTIONMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SmartSelectionManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AdjacentFaceMethod.hxx>
#include <NXOpen/CAE_CircularEdgeMethod.hxx>
#include <NXOpen/CAE_CylinderFaceMethod.hxx>
#include <NXOpen/CAE_FeatureEdgeNodeMethod.hxx>
#include <NXOpen/CAE_FeatureElemEdgeMethod.hxx>
#include <NXOpen/CAE_FeatureElemFaceMethod.hxx>
#include <NXOpen/CAE_FeatureElemMethod.hxx>
#include <NXOpen/CAE_FeatureNodeMethod.hxx>
#include <NXOpen/CAE_FeatureShellElemMethod.hxx>
#include <NXOpen/CAE_FilletFaceMethod.hxx>
#include <NXOpen/CAE_FilletFaceMethodRadiusType.hxx>
#include <NXOpen/CAE_GroupElemMethod.hxx>
#include <NXOpen/CAE_GroupElemMethodElemOption.hxx>
#include <NXOpen/CAE_GroupFaceMethod.hxx>
#include <NXOpen/CAE_GroupMethod.hxx>
#include <NXOpen/CAE_GroupNodeMethod.hxx>
#include <NXOpen/CAE_RelatedElemEdgeMethod.hxx>
#include <NXOpen/CAE_RelatedElemFaceMethod.hxx>
#include <NXOpen/CAE_RelatedElemMethod.hxx>
#include <NXOpen/CAE_RelatedFaceMethod.hxx>
#include <NXOpen/CAE_RelatedNodeMethod.hxx>
#include <NXOpen/CAE_SliverFaceMethod.hxx>
#include <NXOpen/CAE_TangentContinuousEdgeMethod.hxx>
#include <NXOpen/CAE_TangentFaceMethod.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SmartSelectionManager;
    }
    namespace CAE
    {
        class CaePart;
    }
    class Arc;
    namespace CAE
    {
        class AdjacentFaceMethod;
    }
    namespace CAE
    {
        class CAEBody;
    }
    namespace CAE
    {
        class CAEEdge;
    }
    namespace CAE
    {
        class CAEFace;
    }
    namespace CAE
    {
        class CaeGroup;
    }
    namespace CAE
    {
        class CircularEdgeMethod;
    }
    namespace CAE
    {
        class CylinderFaceMethod;
    }
    namespace CAE
    {
        class FEElement;
    }
    namespace CAE
    {
        class FENode;
    }
    namespace CAE
    {
        class FeatureEdgeNodeMethod;
    }
    namespace CAE
    {
        class FeatureElemEdgeMethod;
    }
    namespace CAE
    {
        class FeatureElemFaceMethod;
    }
    namespace CAE
    {
        class FeatureElemMethod;
    }
    namespace CAE
    {
        class FeatureNodeMethod;
    }
    namespace CAE
    {
        class FeatureShellElemMethod;
    }
    namespace CAE
    {
        class FilletFaceMethod;
    }
    namespace CAE
    {
        class GroupElemMethod;
    }
    namespace CAE
    {
        class GroupFaceMethod;
    }
    namespace CAE
    {
        class GroupMethod;
    }
    namespace CAE
    {
        class GroupNodeMethod;
    }
    namespace CAE
    {
        class Mesh;
    }
    namespace CAE
    {
        class MeshPoint;
    }
    namespace CAE
    {
        class RelatedElemEdgeMethod;
    }
    namespace CAE
    {
        class RelatedElemFaceMethod;
    }
    namespace CAE
    {
        class RelatedElemMethod;
    }
    namespace CAE
    {
        class RelatedFaceMethod;
    }
    namespace CAE
    {
        class RelatedNodeMethod;
    }
    namespace CAE
    {
        class SliverFaceMethod;
    }
    namespace CAE
    {
        class TangentContinuousEdgeMethod;
    }
    namespace CAE
    {
        class TangentFaceMethod;
    }
    class Conic;
    class Line;
    class Point;
    class Spline;
    namespace CAE
    {
        class SmartSelectionManagerImpl;
        /**  @brief  Provides methods for creating smart selection methods
            in a cae part  

           <br> To obtain an instance of this class, refer to @link CAE::CaePart  CAE::CaePart @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SmartSelectionManager
        {
            private: SmartSelectionManagerImpl * m_smartselectionmanager_impl;
            private: NXOpen::CAE::CaePart* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SmartSelectionManager(NXOpen::CAE::CaePart *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SmartSelectionManager();
            /** Creates a adjacent face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::AdjacentFaceMethod * CreateAdjacentFaceMethod
            (
                NXOpen::CAE::CAEFace * seed /** seed face*/
            );
            /** Creates a adjacent face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::AdjacentFaceMethod * CreateAdjacentFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/
            );
            /** Creates a adjacent face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::AdjacentFaceMethod * CreateAdjacentFaceMethod
            (
                NXOpen::CAE::CAEEdge * seed /** seed edge*/
            );
            /** Creates a adjacent face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::AdjacentFaceMethod * CreateAdjacentFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/
            );
            /** Creates a circular edge method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CircularEdgeMethod * CreateCircularEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                double dMinRadius /** minimum radius*/,
                double dMaxRadius /** maximum radius*/,
                bool onlyHoleEdges /** if true, only edges which make up holes will be returned */
            );
            /** Creates a circular edge method  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CircularEdgeMethod * CreateCircularEdgeMethod
            (
                NXOpen::CAE::CAEFace * seed /** seed face*/,
                double dMinRadius /** minimum radius*/,
                double dMaxRadius /** maximum radius*/,
                bool onlyHoleEdges /** if true, only edges which make up holes will be returned */
            );
            /** Creates a circular edge method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CircularEdgeMethod * CreateCircularEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                double dMinRadius /** minimum radius*/,
                double dMaxRadius /** maximum radius*/,
                bool onlyHoleEdges /** if true, only edges which make up holes will be returned */
            );
            /** Creates a circular edge method  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CircularEdgeMethod * CreateCircularEdgeMethod
            (
                NXOpen::CAE::CAEBody * seed /** seed body*/,
                double dMinRadius /** minimum radius*/,
                double dMaxRadius /** maximum radius*/,
                bool onlyHoleEdges /** if true, only edges which make up holes will be returned */
            );
            /** Creates a circular edge method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CircularEdgeMethod * CreateCircularEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                double dMinRadius /** minimum radius*/,
                double dMaxRadius /** maximum radius*/,
                bool onlyHoleEdges /** if true, only edges which make up holes will be returned */
            );
            /** Creates a cylinder face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CylinderFaceMethod * CreateCylinderFaceMethod
            (
                NXOpen::CAE::CAEBody * seed /** seed body*/,
                double dMinCylinderRadius /** minimum cylinder radius*/,
                double dMaxCylinderRadius /** maximum cylinder radius*/,
                double dMinCylinderAngle /** minimum cylinder angle*/,
                double dMaxCylinderAngle /** maximum cylinder angle*/
            );
            /** Creates a cylinder face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CylinderFaceMethod * CreateCylinderFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                double dMinCylinderRadius /** minimum cylinder radius*/,
                double dMaxCylinderRadius /** maximum cylinder radius*/,
                double dMinCylinderAngle /** minimum cylinder angle*/,
                double dMaxCylinderAngle /** maximum cylinder angle*/
            );
            /** Creates a cylinder face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CylinderFaceMethod * CreateCylinderFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                double dMinCylinderRadius /** minimum cylinder radius*/,
                double dMaxCylinderRadius /** maximum cylinder radius*/,
                double dMinCylinderAngle /** minimum cylinder angle*/,
                double dMaxCylinderAngle /** maximum cylinder angle*/
            );
            /** Creates a feature edge node method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureEdgeNodeMethod * CreateFeatureEdgeNodeMethod
            (
                NXOpen::CAE::FEElement * seedElemTag /** seed element edge tag*/,
                int seedElemEdgeId /** seed element edge id*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature edge node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureEdgeNodeMethod * CreateFeatureEdgeNodeMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed element edge tags*/,
                const std::vector<int> & seedElemEdgeIds /** seed element edge ids*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature elem edge method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemEdgeMethod * CreateFeatureElemEdgeMethod
            (
                NXOpen::CAE::FEElement * seedElemTag /** seed element edge tag*/,
                int seedElemEdgeId /** seed element edge id*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature elem edge method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemEdgeMethod * CreateFeatureElemEdgeMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed element edge tags*/,
                const std::vector<int> & seedElemEdgeIds /** seed element edge ids*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature elem face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemFaceMethod * CreateFeatureElemFaceMethod
            (
                NXOpen::CAE::FEElement * seedElemTag /** seed element face tag*/,
                int seedElemFaceId /** seed element face id*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature elem face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemFaceMethod * CreateFeatureElemFaceMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed element face tags*/,
                const std::vector<int> & seedElemFaceIds /** seed element face ids*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature elem method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemMethod * CreateFeatureElemMethod
            (
                NXOpen::CAE::FEElement * seedElemTag /** seed element face tag*/,
                int seedElemFaceId /** seed element face id*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature elem method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemMethod * CreateFeatureElemMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed element face tags*/,
                const std::vector<int> & seedElemFaceIds /** seed element face ids*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature shell elem method  @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureShellElemMethod * CreateFeatureShellElemMethod
            (
                NXOpen::CAE::FEElement * seedElemTag /** seed element face tag*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature shell elem method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureShellElemMethod * CreateFeatureShellElemMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed shell element tags*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature node method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureNodeMethod * CreateFeatureNodeMethod
            (
                NXOpen::CAE::FEElement * seedElemTag /** seed element face tag*/,
                int seedElemFaceId /** seed element face id*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureNodeMethod * CreateFeatureNodeMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed element face tags*/,
                const std::vector<int> & seedElemFaceIds /** seed element face ids*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a fillet face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilletFaceMethod * CreateFilletFaceMethod
            (
                NXOpen::CAE::CAEBody * seed /** seed body*/,
                NXOpen::CAE::RadiusType radiusType /** fillet face radius type*/,
                double dMinFilletRadius /** minimum fillet radius*/,
                double dMaxFilletRadius /** maximum fillet radius*/,
                double dMinFilletAngle /** minimum fillet angle*/,
                double dMaxFilletAngle /** maximum fillet angle*/
            );
            /** Creates a fillet face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilletFaceMethod * CreateFilletFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                NXOpen::CAE::RadiusType radiusType /** fillet face radius type*/,
                double dMinFilletRadius /** minimum fillet radius*/,
                double dMaxFilletRadius /** maximum fillet radius*/,
                double dMinFilletAngle /** minimum fillet angle*/,
                double dMaxFilletAngle /** maximum fillet angle*/
            );
            /** Creates a fillet face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilletFaceMethod * CreateFilletFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                NXOpen::CAE::RadiusType radiusType /** fillet face radius type*/,
                double dMinFilletRadius /** minimum fillet radius*/,
                double dMaxFilletRadius /** maximum fillet radius*/,
                double dMinFilletAngle /** minimum fillet angle*/,
                double dMaxFilletAngle /** maximum fillet angle*/
            );
            /** Creates a group method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupMethod * CreateGroupMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/
            );
            /** Creates a group element method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupElemMethod * CreateGroupElemMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/,
                NXOpen::CAE::GroupElemMethodElemOption::ElemOption elemOption /** specifies what types of elements to extract from the group */
            );
            /** Creates a group face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupFaceMethod * CreateGroupFaceMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/
            );
            /** Creates a group node method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupNodeMethod * CreateGroupNodeMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/
            );
            /** Creates a related elem edge method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemEdgeMethod * CreateRelatedElemEdgeMethod
            (
                NXOpen::CAE::Mesh * seed /** seed mesh*/
            );
            /** Creates a related elem edge method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemEdgeMethod * CreateRelatedElemEdgeMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/
            );
            /** Creates a related elem edge method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemEdgeMethod * CreateRelatedElemEdgeMethod
            (
                NXOpen::CAE::CAEEdge * seed /** seed edge*/
            );
            /** Creates a related elem edge method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemEdgeMethod * CreateRelatedElemEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/
            );
            /** Creates a related elem face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                NXOpen::CAE::Mesh * seed /** seed mesh*/
            );
            /** Creates a related elem face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/
            );
            /** Creates a related elem face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                NXOpen::CAE::CAEFace * seed /** seed face*/
            );
            /** Creates a related elem face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::CAE::Mesh * seed /** seed mesh*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::CAE::CAEBody * seed /** seed body*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::CAE::CAEFace * seed /** seed face*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::CAE::CAEEdge * seed /** seed edge*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::CAE::FENode * seed /** seed node*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::CAE::FENode *> & seeds /** seed nodes*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::Line *> & seedTags /** seed lines*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::Arc *> & seedTags /** seed arcs*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::Conic *> & seedTags /** seed conics*/
            );
            /** Creates a related elem method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::Spline *> & seedTags /** seed splines*/
            );
            /** Creates a related face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                NXOpen::CAE::Mesh * seed /** seed mesh*/
            );
            /** Creates a related face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/
            );
            /** Creates a related face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                NXOpen::CAE::FENode * seed /** seed node*/
            );
            /** Creates a related face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                const std::vector<NXOpen::CAE::FENode *> & seeds /** seed nodes*/
            );
            /** Creates a related face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                NXOpen::CAE::FEElement * seedElemTag /** seed Element*/,
                int seedElemFaceId /** seed element face id*/
            );
            /** Creates a related face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed element face tags*/,
                const std::vector<int> & seedElemFaceIds /** seed element face ids*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::Mesh * seed /** seed mesh*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::CAEBody * seed /** seed body*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::CAEFace * seed /** seed face*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::CAEEdge * seed /** seed edge*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::FEElement * seed /** seed element*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed elements*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::MeshPoint *> & seedTags /** seed mesh points*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::Point *> & seedTags /** seed points*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::Line *> & seedTags /** seed lines*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::Arc *> & seedTags /** seed arcs*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::Conic *> & seedTags /** seed conics*/
            );
            /** Creates a related node method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::Spline *> & seedTags /** seed splines*/
            );
            /** Creates a sliver face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SliverFaceMethod * CreateSliverFaceMethod
            (
                NXOpen::CAE::CAEBody * seed /** seed body*/,
                double dSliverTolerance /** sliver tolerance*/
            );
            /** Creates a sliver face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SliverFaceMethod * CreateSliverFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                double dSliverTolerance /** sliver tolerance*/
            );
            /** Creates a sliver face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SliverFaceMethod * CreateSliverFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                double dSliverTolerance /** sliver tolerance*/
            );
            /** Creates a tangent face method  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::TangentFaceMethod * CreateTangentFaceMethod
            (
                NXOpen::CAE::CAEFace * seed /** seed face*/,
                double dTangentTolerance /** tangent tolerance*/
            );
            /** Creates a tangent face method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::TangentFaceMethod * CreateTangentFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                double dTangentTolerance /** tangent tolerance*/
            );
            /** Creates a tangent continuous edge method  @return  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::TangentContinuousEdgeMethod * CreateTangentContinuousEdgeMethod
            (
                NXOpen::CAE::CAEEdge * seed /** seed edge*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a tangent continuous edge method  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::TangentContinuousEdgeMethod * CreateTangentContinuousEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                double dFeatureAngle /** feature angle*/
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
