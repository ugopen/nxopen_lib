#ifndef NXOpen_CAM_INSPECTIONCOLLISIONAVOIDANCEBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONCOLLISIONAVOIDANCEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionCollisionAvoidanceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_InspectionCollisionAvoidanceBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionCollisionAvoidanceBuilder;
    }
    class Builder;
    class NXObject;
    namespace CAM
    {
        class _InspectionCollisionAvoidanceBuilderBuilder;
        class InspectionCollisionAvoidanceBuilderImpl;
        /** Collision Avoidance Dialog builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionCollisionAvoidanceBuilder  CAM::InspectionOperationCollection::CreateInspectionCollisionAvoidanceBuilder @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionCollisionAvoidanceBuilder : public Builder
        {
            private: InspectionCollisionAvoidanceBuilderImpl * m_inspectioncollisionavoidancebuilder_impl;
            private: friend class  _InspectionCollisionAvoidanceBuilderBuilder;
            protected: InspectionCollisionAvoidanceBuilder();
            public: ~InspectionCollisionAvoidanceBuilder();
            /** Updates selected paths. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void DoCollisionAvoidance
            (
            );
            /**Returns  a flag to indicate whether to generate a report 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ListOutput
            (
            );
            /**Sets  a flag to indicate whether to generate a report 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetListOutput
            (
                bool list /** list */ 
            );
            /**Returns  a flag to indicate whether to change probe tip to avoid collisions 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeProbeTip
            (
            );
            /**Sets  a flag to indicate whether to change probe tip to avoid collisions 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeProbeTip
            (
                bool change /** change */ 
            );
            /**Returns  a flag to indicate whether to change probe angles to avoid collisions 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeProbeAngles
            (
            );
            /**Sets  a flag to indicate whether to change probe angles to avoid collisions 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeProbeAngles
            (
                bool change /** change */ 
            );
            /**Returns  a flag to indicate whether to change approach and retract distances to avoid collisions 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool ChangeApproachRetract
            (
            );
            /**Sets  a flag to indicate whether to change approach and retract distances to avoid collisions 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeApproachRetract
            (
                bool change /** change */ 
            );
            /**Returns  a flag to indicate whether to do probe rotations at safe plane 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ProbeRotationsAtSafePlane
            (
            );
            /**Sets  a flag to indicate whether to do probe rotations at safe plane 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetProbeRotationsAtSafePlane
            (
                bool useSafePlane /** usesafeplane */ 
            );
            /**Returns  a flag to indicate whether to do table rotations at safe plane 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool TableRotationsAtSafePlane
            (
            );
            /**Sets  a flag to indicate whether to do table rotations at safe plane 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTableRotationsAtSafePlane
            (
                bool useSafePlane /** usesafeplane */ 
            );
            /**Returns  a flag to indicate whether to do tool changes at safe plane 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToolChangesAtSafePlane
            (
            );
            /**Sets  a flag to indicate whether to do tool changes at safe plane 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetToolChangesAtSafePlane
            (
                bool useSafePlane /** usesafeplane */ 
            );
            /**Returns  a flag to indicate whether to generate transition points between paths 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool TransitionsBetweenPaths
            (
            );
            /**Sets  a flag to indicate whether to generate transition points between paths 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTransitionsBetweenPaths
            (
                bool createPoints /** createpoints */ 
            );
            /**Returns  a flag to indicate whether to generate transition points within paths 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool TransitionsWithinPaths
            (
            );
            /**Sets  a flag to indicate whether to generate transition points within paths 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTransitionsWithinPaths
            (
                bool createPoints /** createpoints */ 
            );
            /**Returns  a flag to indicate whether to create new sensors 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool NewSensors
            (
            );
            /**Sets  a flag to indicate whether to create new sensors 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNewSensors
            (
                bool newSensors /** newsensors */ 
            );
            /**Returns  a flag to indicate whether to start from safe plane before first path 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool StartFromSafePlane
            (
            );
            /**Sets  a flag to indicate whether to start from safe plane before first path 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartFromSafePlane
            (
                bool createPoints /** createpoints */ 
            );
            /**Returns  a flag to indicate whether to finish at safe plane after last path 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool FinishAtSafePlane
            (
            );
            /**Sets  a flag to indicate whether to finish at safe plane after last path 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFinishAtSafePlane
            (
                bool createPoints /** createpoints */ 
            );
            /**Returns  the transition clearance distance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double ClearanceDistance
            (
            );
            /**Sets  the transition clearance distance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetClearanceDistance
            (
                double clearanceDistance /** clearancedistance */ 
            );
            /**Returns  the max length increment 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxLengthIncrement
            (
            );
            /**Sets  the max length increment 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMaxLengthIncrement
            (
                double maxLengthIncrement /** maxlengthincrement */ 
            );
            /**Returns  the max angular increment 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxAngularIncrement
            (
            );
            /**Sets  the max angular increment 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMaxAngularIncrement
            (
                double maxAngularIncrement /** maxangularincrement */ 
            );
            /**Returns  the tolerance used for faceting the components 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double FacetTolerance
            (
            );
            /**Sets  the tolerance used for faceting the components 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFacetTolerance
            (
                double facetTolerance /** facettolerance */ 
            );
            /**Returns  the safe plane 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * SafePlane
            (
            );
            /**Sets  the safe plane 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSafePlane
            (
                NXOpen::NXObject * plane /** plane */ 
            );
            /** Returns the selected operations.  @return  Selected operation names 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetSelectedOps
            (
            );
            /** Sets the selected operations. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSelectedOps
            (
                std::vector<NXString> & selectedOps /** Selected operation names   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
