#ifndef NXOpen_CAM_MILLCUTPARAMETERS_HXX_INCLUDED
#define NXOpen_CAM_MILLCUTPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_MillCutParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CutParameters.hxx>
#include <NXOpen/CAM_CutParametersEnum.hxx>
#include <NXOpen/CAM_MillCutParameters.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class MillCutParameters;
    }
    namespace CAM
    {
        class AcrossVoids;
    }
    namespace CAM
    {
        class CleanupOutput;
    }
    namespace CAM
    {
        class CleanupSettings;
    }
    namespace CAM
    {
        class CornerControlBuilder;
    }
    namespace CAM
    {
        class CutAngle;
    }
    namespace CAM
    {
        class CutDirection;
    }
    namespace CAM
    {
        class CutParameters;
    }
    namespace CAM
    {
        class ExtendAtEdges;
    }
    namespace CAM
    {
        class FinishPassesBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class LevelToLevel;
    }
    namespace CAM
    {
        class LowerLimit;
    }
    namespace CAM
    {
        class MaxCutTraverse;
    }
    namespace CAM
    {
        class MinCutVolume;
    }
    namespace CAM
    {
        class MultiDepthCut;
    }
    namespace CAM
    {
        class OutputUncutRegions;
    }
    namespace CAM
    {
        class SmallAreaAvoidance;
    }
    namespace CAM
    {
        class SteepContainment;
    }
    namespace CAM
    {
        class StepoverBuilder;
    }
    namespace CAM
    {
        class ToolAxisChange;
    }
    namespace CAM
    {
        class ToolAxisTilt;
    }
    namespace CAM
    {
        class TrochoidalSettings;
    }
    namespace CAM
    {
        class UpDownCutting;
    }
    namespace CAM
    {
        class ZAxisSmoothing;
    }
    namespace CAM
    {
        class _MillCutParametersBuilder;
        class MillCutParametersImpl;
        /**
            Represents a @link CAM::MillCutParameters CAM::MillCutParameters@endlink 
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  MillCutParameters : public CAM::CutParameters
        {
            private: MillCutParametersImpl * m_millcutparameters_impl;
            private: friend class  _MillCutParametersBuilder;
            protected: MillCutParameters();
            public: ~MillCutParameters();
            /**Returns  the cut direction  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutDirection * CutDirection
            (
            );
            /**Returns  the cut angle  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutAngle * CutAngle
            (
            );
            /**Returns  the cut order 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParametersCutOrderTypes CutOrder
            (
            );
            /**Sets  the cut order 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutOrder
            (
                NXOpen::CAM::CutParametersCutOrderTypes propValue /** propvalue */ 
            );
            /**Returns  the blank distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * BlankDistance
            (
            );
            /**Returns  the finish passes 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::FinishPassesBuilder * FinishPasses
            (
            );
            /**Returns  the Text Depth 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * TextDepth
            (
            );
            /**Returns  the floor same as part stock 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool FloorSameAsPartStock
            (
            );
            /**Sets  the floor same as part stock 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFloorSameAsPartStock
            (
                bool stockPartStatus /** the stock part use status */
            );
            /**Returns  the floor stock 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * FloorStock
            (
            );
            /**Returns  the wall stock 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * WallStock
            (
            );
            /**Returns  the blank stock 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * BlankStock
            (
            );
            /**Returns  the check stock 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * CheckStock
            (
            );
            /**Returns  the trim stock 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * TrimStock
            (
            );
            /**Returns  the shroud stock 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ShroudStock
            (
            );
            /**Returns  the blade stock 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * BladeStock
            (
            );
            /**Returns  the blend stock 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * BlendStock
            (
            );
            /**Returns  the hub stock 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * HubStock
            (
            );
            /**Returns  the region resequencing 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParametersRegionSequencingTypes RegionSequencing
            (
            );
            /**Sets  the region resequencing 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRegionSequencing
            (
                NXOpen::CAM::CutParametersRegionSequencingTypes propValue /** propvalue */ 
            );
            /**Returns  the region connection 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool RegionConnection
            (
            );
            /**Sets  the region connection 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRegionConnection
            (
                bool propValue /** the Region Connection */
            );
            /**Returns  the follow check geometry status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool FollowCheck
            (
            );
            /**Sets  the follow check geometry status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFollowCheck
            (
                bool propValue /** the Follow Check Geometry Status */
            );
            /**Returns  the open passes 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParametersTraverseOpenPassesTypes TraverseOpenPasses
            (
            );
            /**Sets  the open passes 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTraverseOpenPasses
            (
                NXOpen::CAM::CutParametersTraverseOpenPassesTypes propValue /** propvalue */ 
            );
            /**Returns  the trim control method type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParametersTrimControlTypes TrimControl
            (
            );
            /**Sets  the trim control method type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimControl
            (
                NXOpen::CAM::CutParametersTrimControlTypes propValue /** propvalue */ 
            );
            /**Returns  the minimum material thickness 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MinMaterialThickness
            (
            );
            /**Returns  the small area avoidance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::SmallAreaAvoidance * SmallAreaAvoidance
            (
            );
            /**Returns  the boundary approximation toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool BoundaryApproximation
            (
            );
            /**Sets  the boundary approximation toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBoundaryApproximation
            (
                bool propValue /** the Boundary Profile Pass Flag */
            );
            /**Returns  the prevent undercutting toggle 
                     <br> This property is deprecated. Use @link CAM::MillCutParameters::AllowUndercutting CAM::MillCutParameters::AllowUndercutting @endlink and @link CAM::MillCutParameters::SetAllowUndercutting CAM::MillCutParameters::SetAllowUndercutting @endlink  instead.
                     <br>  
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::MillCutParameters::AllowUndercutting CAM::MillCutParameters::AllowUndercutting @endlink and @link CAM::MillCutParameters::SetAllowUndercutting CAM::MillCutParameters::SetAllowUndercutting @endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::MillCutParameters::AllowUndercutting CAM::MillCutParameters::AllowUndercutting @endlink and @link CAM::MillCutParameters::SetAllowUndercutting CAM::MillCutParameters::SetAllowUndercutting @endlink  instead.") bool PreventUndercutting
            (
            );
            /**Sets  the prevent undercutting toggle 
                     <br> This property is deprecated. Use @link CAM::MillCutParameters::AllowUndercutting CAM::MillCutParameters::AllowUndercutting @endlink and @link CAM::MillCutParameters::SetAllowUndercutting CAM::MillCutParameters::SetAllowUndercutting @endlink  instead.
                     <br>  
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::MillCutParameters::AllowUndercutting CAM::MillCutParameters::AllowUndercutting @endlink and @link CAM::MillCutParameters::SetAllowUndercutting CAM::MillCutParameters::SetAllowUndercutting @endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::MillCutParameters::AllowUndercutting CAM::MillCutParameters::AllowUndercutting @endlink and @link CAM::MillCutParameters::SetAllowUndercutting CAM::MillCutParameters::SetAllowUndercutting @endlink  instead.") void SetPreventUndercutting
            (
                bool propValue /** the Undercut Handle Flag */
            );
            /**Returns  the allow undercutting toggle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool AllowUndercutting
            (
            );
            /**Sets  the allow undercutting toggle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAllowUndercutting
            (
                bool propValue /** the Undercut Handle Flag */
            );
            /**Returns  the Simplify Shapes Method  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParametersSimplifyShapesTypes SimplifyShapes
            (
            );
            /**Sets  the Simplify Shapes Method  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSimplifyShapes
            (
                NXOpen::CAM::CutParametersSimplifyShapesTypes propValue /** propvalue */ 
            );
            /**Returns  the stepover 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::StepoverBuilder * Stepover
            (
            );
            /**Returns  the use previous IPW toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePrevious2dIpw
            (
            );
            /**Sets  the use previous IPW toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUsePrevious2dIpw
            (
                bool propValue /** the Use Previous IPW Flag */
            );
            /**Returns  the Cut Walls Only toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool CutWallsOnly
            (
            );
            /**Sets  the Cut Walls Only toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutWallsOnly
            (
                bool propValue /** the Cut Walls Only */
            );
            /**Returns  the roll tool over edges toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool RollToolOverEdges
            (
            );
            /**Sets  the roll tool over edges toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRollToolOverEdges
            (
                bool propValue /** the Remove Edge Traces value */
            );
            /**Returns  the degree of tool path smoothing  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int ToolpathSmoothing
            (
            );
            /**Sets  the degree of tool path smoothing  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolpathSmoothing
            (
                int smoothing /** the Smoothing value */
            );
            /**Returns  the degree of tool axis smoothing  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int ToolAxisSmoothing
            (
            );
            /**Sets  the degree of tool axis smoothing  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolAxisSmoothing
            (
                int smoothing /** the Smoothing value */
            );
            /**Returns  the minimize number of engages toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimizeNumberOfEngages
            (
            );
            /**Sets  the minimize number of engages toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMinimizeNumberOfEngages
            (
                bool propValue /** the Minimize Number of Engages Flag */
            );
            /**Returns  the part stock offset 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * PartStockOffset
            (
            );
            /**Returns  the action when gouging 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParametersActionWhenGougingTypes ActionWhenGouging
            (
            );
            /**Sets  the action when gouging 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetActionWhenGouging
            (
                NXOpen::CAM::CutParametersActionWhenGougingTypes propValue /** the When Gouging Check value */
            );
            /**Returns  the maximum cut step 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MaxCutStep
            (
            );
            /**Returns  the tool axis tilt 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolAxisTilt * ToolAxisTilt
            (
            );
            /**Returns  the across voids 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::AcrossVoids * AcrossVoids
            (
            );
            /**Returns  the output uncut regions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::OutputUncutRegions * OutputUncutRegions
            (
            );
            /**Returns  the lower limit 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::LowerLimit * LowerLimit
            (
            );
            /**Returns  the max cut traverse 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::MaxCutTraverse * MaxCutTraverse
            (
            );
            /**Returns  the minimum cut volume 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::MinCutVolume * MinCutVolume
            (
            );
            /**Returns  the steep containment 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::SteepContainment * SteepContainment
            (
            );
            /**Returns  the up down cutting 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::UpDownCutting * UpDownCutting
            (
            );
            /**Returns  the tool axis change 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolAxisChange * ToolAxisChange
            (
            );
            /**Returns  the from leading edge 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * FromLeadingEdge
            (
            );
            /**Returns  the from trailing edge 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * FromTrailingEdge
            (
            );
            /**Returns  the max blade roll angle 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double TlaxisBladeRollAngle
            (
            );
            /**Sets  the max blade roll angle 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTlaxisBladeRollAngle
            (
                double angle /** the max blade roll angle value */
            );
            /**Returns  the plunge direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParametersPlungeDirectionTypes PlungeDirection
            (
            );
            /**Sets  the plunge direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPlungeDirection
            (
                NXOpen::CAM::CutParametersPlungeDirectionTypes propValue /** The  plunge direction */
            );
            /**Returns  the pattern direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::CutParametersPatternDirectionTypes PatternDirection
            (
            );
            /**Sets  the pattern direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPatternDirection
            (
                NXOpen::CAM::CutParametersPatternDirectionTypes propValue /** propvalue */ 
            );
            /**Returns  the cut between levels 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool CutBetweenLevels
            (
            );
            /**Sets  the cut between levels 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutBetweenLevels
            (
                bool cutBetween /** the cut between method  */
            );
            /**Returns  the corner control 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CornerControlBuilder * CornerControl
            (
            );
            /**Returns  the valley overlap distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ValleyOverlapDistance
            (
            );
            /**Returns  the blank overhang (inheritable tool dependent).
                        Its relative UI name is changed to "Tool Overhang" from NX8.0. 
                        But it is named to "First Pass Overhang" in floor milling and floor and wall milling   
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * BlankOverhang
            (
            );
            /**Returns  the cut area extension distance builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * CutAreaExtensionDistance
            (
            );
            /**Returns  the tolerant machining status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool TolerantMachining
            (
            );
            /**Sets  the tolerant machining status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTolerantMachining
            (
                bool tolerantMachine /** the tolerant machining status */
            );
            /**Returns  the Standard Drive Self-Intersect Status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool SelfIntersection
            (
            );
            /**Sets  the Standard Drive Self-Intersect Status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSelfIntersection
            (
                bool selfIntersect /** The Standard Drive Self-Intersect Status value */
            );
            /**Returns  the Extend At Edges 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ExtendAtEdges * ExtendAtEdges
            (
            );
            /**Returns  the cut below tool contact setting 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool CutBelowToolContact
            (
            );
            /**Sets  the cut below tool contact setting 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutBelowToolContact
            (
                bool cutBelowToolContact /** cutbelowtoolcontact */ 
            );
            /**Returns  the Trochoidal Settings 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TrochoidalSettings * TrochoidalSettings
            (
            );
            /**Returns  the extend to part flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ExtendToPart
            (
            );
            /**Sets  the extend to part flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetExtendToPart
            (
                bool flag /** the extend to part flag */
            );
            /**Returns  the extend floor to 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParametersExtendFloorTypes ExtendFloorTo
            (
            );
            /**Sets  the extend floor to 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetExtendFloorTo
            (
                NXOpen::CAM::CutParametersExtendFloorTypes option /** the extend floor to option */
            );
            /**Returns  the merge distance builder (tool dependent double) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MergeDistance
            (
            );
            /**Returns  the Level to Level 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::LevelToLevel * LevelToLevel
            (
            );
            /**Returns  the Cleanup Settings 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CleanupSettings * CleanupSettings
            (
            );
            /**Returns  the Cleanup Output 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CleanupOutput * CleanupOutput
            (
            );
            /**Returns  the Multi Depth Cut 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::MultiDepthCut * MultiDepthCut
            (
            );
            /**Returns  the Stepover Limit 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StepoverLimit
            (
            );
            /**Returns  the boundary stock 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double BoundaryStock
            (
            );
            /**Sets  the boundary stock 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBoundaryStock
            (
                double propValue /** the trim stock value */
            );
            /**Returns  the boundary intol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double BoundaryInTol
            (
            );
            /**Sets  the boundary intol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBoundaryInTol
            (
                double propValue /** the boundary intol value */
            );
            /**Returns  the boundary out tol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double BoundaryOutTol
            (
            );
            /**Sets  the boundary out tol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBoundaryOutTol
            (
                double propValue /** the boundary out tol value */
            );
            /**Returns  the Z Axis Smoothing. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ZAxisSmoothing * ZAxisSmoothing
            (
            );
            /**Returns  the Corner Finding Options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParametersCornerFindingTypes CornerFindingOptions
            (
            );
            /**Sets  the Corner Finding Options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCornerFindingOptions
            (
                NXOpen::CAM::CutParametersCornerFindingTypes cornerFinding /** the Finding Corner type */
            );
            /**Returns  the global optimzation status
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool GlobalOptimization
            (
            );
            /**Sets  the global optimzation status
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGlobalOptimization
            (
                bool globalOptStatus /** global optimization status */
            );
            /**Returns  the status for doing Blank Sensitive finish on the last cut level 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: bool ApplyToLastPass
            (
            );
            /**Sets  the status for doing Blank Sensitive finish on the last cut level 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetApplyToLastPass
            (
                bool applyLastPassStatus /** apply to last pass status */
            );
            /**Returns  the flag to check bodies of surface region 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeBodiesOfSurfaceRegion
            (
            );
            /**Sets  the flag to check bodies of surface region 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIncludeBodiesOfSurfaceRegion
            (
                bool includeBodies /** flag of including bodies of surface region */
            );
            /**Returns  the Tool Run On 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * ToolRunOn
            (
            );
            /**Returns  the Tool Run Off Type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParametersToolRunOffTypes ToolRunOffType
            (
            );
            /**Sets  the Tool Run Off Type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolRunOffType
            (
                NXOpen::CAM::CutParametersToolRunOffTypes toolRunOff /** the Tool Run Off type */
            );
            /**Returns  the Tool Run Off 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * ToolRunOff
            (
            );
            /**Returns  the Single Pass Offset 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * SinglePassOffset
            (
            );
            /**Returns  the rotary max angle limit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double RotaryMaxAngleLimit
            (
            );
            /**Sets  the rotary max angle limit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRotaryMaxAngleLimit
            (
                double angle /** the rotary max angle limit */
            );
            /**Returns  the min angle from part axis
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double RotaryMinAngleLimit
            (
            );
            /**Sets  the min angle from part axis
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRotaryMinAngleLimit
            (
                double angle /** the rotary min angle limit */
            );
            /**Returns  the Adjacent Blades Stock Option Type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParametersAdjacentBladesTypes AdjacentBlades
            (
            );
            /**Sets  the Adjacent Blades Stock Option Type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAdjacentBlades
            (
                NXOpen::CAM::CutParametersAdjacentBladesTypes adjacentBlades /** the adjacent blades stock option type */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
