#ifndef NXOpen_CAM_INSPECTIONCONSTRUCTEDFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONCONSTRUCTEDFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionConstructedFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/CAM_InspectionConstructedFeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionConstructedFeatureBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class Direction;
    class NXObject;
    class SelectNXObject;
    class SelectNXObjectList;
    namespace CAM
    {
        class _InspectionConstructedFeatureBuilderBuilder;
        class InspectionConstructedFeatureBuilderImpl;
        /** Represents a CMM Inspection Constructed Feature Builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionConstructedFeatureBuilder  CAM::InspectionOperationCollection::CreateInspectionConstructedFeatureBuilder @endlink  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionConstructedFeatureBuilder : public CAM::OperationBuilder
        {
            /** Type of feature to be constructed */
            public: enum ConstFeatType
            {
                ConstFeatTypePoint/** Constructed Point Feature */,
                ConstFeatTypeLine/** Constructed Line Feature */,
                ConstFeatTypePlane/** Constructed Plane Feature */,
                ConstFeatTypeArc/** Constructed Arc Feature */,
                ConstFeatTypeCircle/** Constructed Circle Feature */,
                ConstFeatTypeCylinder/** Constructed Cylinder Feature */,
                ConstFeatTypeCone/** Constructed Cone Feature */,
                ConstFeatTypeSphere/** Constructed Sphere Feature */,
                ConstFeatTypeCurve/** Constructed Curve Feature */,
                ConstFeatTypeTorus/** Constructed Torus Feature */,
                ConstFeatTypeSurface/** Constructed Surface Feature */,
                ConstFeatTypeSlotTab/** Constructed Slot/Tab Feature */
            };

            /** Construction Method */
            public: enum MethodEnumType
            {
                MethodEnumTypeBestFit/** Best Fit a feature to point reducible subfeatures */,
                MethodEnumTypeTransform/** Transform a copy of a feature from one PCS to another PCS */,
                MethodEnumTypeIntersection/** Intersects features to form a point plane or circle feature */,
                MethodEnumTypeMinimum/** Finds the maximum feature measurement point in a specified direction */,
                MethodEnumTypeMaximum/** Finds the minimum feature measurement point in a specified direction */,
                MethodEnumTypeProjection/** Projects a measurement point onto a measured or nominal feature */,
                MethodEnumTypeMoveByFeature/** Moves a copy of a point reducible feature in a direction associated with another feature */,
                MethodEnumTypeMoveByVector/** Moves a copy of a point reducible feature in a user specifiec direction */,
                MethodEnumTypePerpendicularTo/** Creates a feature perpendicular to a feature and through another feature */,
                MethodEnumTypeParallelTo/** Creates a feature parallel to a feature and through another feature */,
                MethodEnumTypeOffset/** Creates a plane or line offset by a nominal amount to each subfeature */,
                MethodEnumTypeMiddle/** Creates a point, plane or line at the middle of two sub features */,
                MethodEnumTypeConeDiameter/** Creates a circle at diameter of a cone */,
                MethodEnumTypeConeDistance/** Creates a circle at distance along a cone */,
                MethodEnumTypeExtract/** Creates a feature by extract neasurements from other features */
            };

            /** State of features in available feature list */
            public: enum AvailableStateType
            {
                AvailableStateTypeNominal/** Feature is in its nominal (design) state */,
                AvailableStateTypeActual/** Feature is an actual measured feature */
            };

            /** State of features in current feature list */
            public: enum CurrentStateType
            {
                CurrentStateTypeNominal/** Feature is in its nominal (design) state */,
                CurrentStateTypeActual/** Feature is an actual measured feature */
            };

            /** Specifies if the destination PCS is the current PCS or a user specified nominal or actual PCS */
            public: enum DestPcsEnumType
            {
                DestPcsEnumTypeCurrentPCS/** Use current PCS as the destination */,
                DestPcsEnumTypeNominalPCS/** Use a user specified nominal PCS as the destination */,
                DestPcsEnumTypeActualPCS/** Use a user specified actual PCS as the destination */
            };

            /** Specifies whether a minimum or maximum point are found using a user specified direction vector or a radial direction vector */
            public: enum DirectionType
            {
                DirectionTypeSpecifiedVector/** Use a user specified direction vector */,
                DirectionTypeRadial/** Use a radial direction vector */,
                DirectionTypeFeature/** Use a feature (nominal/actual) for the vector */
            };

            /** State of subfeatures */
            public: enum SubFeat1StateType
            {
                SubFeat1StateTypeNominal/** Feature is in its nominal (design) state */,
                SubFeat1StateTypeActual/** Feature is an actual measured feature */
            };

            /** State of subfeatures */
            public: enum SubFeat2StateType
            {
                SubFeat2StateTypeNominal/** Feature is in its nominal (design) state */,
                SubFeat2StateTypeActual/** Feature is an actual measured feature */
            };

            /** Design feature creation types */
            public: enum DesignCreationType
            {
                DesignCreationTypeSelectExisting/** Design feature is selected from existing features */,
                DesignCreationTypeCreateNew/** Design feature is created as a new feature */
            };

            /** Specifies whether an extract edge distance is absolute part units or a percentage */
            public: enum ExtractEdgeDistanceType
            {
                ExtractEdgeDistanceTypeAbsolute/** Use an absolute distance from edge */,
                ExtractEdgeDistanceTypePercentage/** Use a percentage distance from edge */
            };

            private: InspectionConstructedFeatureBuilderImpl * m_inspectionconstructedfeaturebuilder_impl;
            private: friend class  _InspectionConstructedFeatureBuilderBuilder;
            protected: InspectionConstructedFeatureBuilder();
            public: ~InspectionConstructedFeatureBuilder();
            /**Returns  the feature type to be constructed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionConstructedFeatureBuilder::ConstFeatType FeatureTypeEnum
            (
            );
            /**Sets  the feature type to be constructed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatureTypeEnum
            (
                NXOpen::CAM::InspectionConstructedFeatureBuilder::ConstFeatType featureTypeEnum /** featuretypeenum */ 
            );
            /**Returns  the construction method to be used 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionConstructedFeatureBuilder::MethodEnumType MethodEnum
            (
            );
            /**Sets  the construction method to be used 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMethodEnum
            (
                NXOpen::CAM::InspectionConstructedFeatureBuilder::MethodEnumType methodEnum /** methodenum */ 
            );
            /**Returns  the toggle to filter available features 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool AvailFilterToggle
            (
            );
            /**Sets  the toggle to filter available features 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAvailFilterToggle
            (
                bool availFilterToggle /** availfiltertoggle */ 
            );
            /**Returns  the available feature screen selection button 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * AvailableSelection
            (
            );
            /**Returns  the available feature state (nominal or actual) 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionConstructedFeatureBuilder::AvailableStateType AvailStateEnum
            (
            );
            /**Sets  the available feature state (nominal or actual) 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAvailStateEnum
            (
                NXOpen::CAM::InspectionConstructedFeatureBuilder::AvailableStateType availStateEnum /** availstateenum */ 
            );
            /**Returns  the current feature state (nominal or actual) 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionConstructedFeatureBuilder::CurrentStateType CurrentStateEnum
            (
            );
            /**Sets  the current feature state (nominal or actual) 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCurrentStateEnum
            (
                NXOpen::CAM::InspectionConstructedFeatureBuilder::CurrentStateType currentStateEnum /** currentstateenum */ 
            );
            /**Returns  the destination part coordinate system type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionConstructedFeatureBuilder::DestPcsEnumType DestinationPcsEnum
            (
            );
            /**Sets  the destination part coordinate system type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDestinationPcsEnum
            (
                NXOpen::CAM::InspectionConstructedFeatureBuilder::DestPcsEnumType destinationPcsEnum /** destinationpcsenum */ 
            );
            /**Returns  the part coordinate system name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PcsName
            (
            );
            /**Sets  the part coordinate system name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPcsName
            (
                const NXString & pcsName /** pcsname */ 
            );
            /**Sets  the part coordinate system name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetPcsName
            (
                const char * pcsName /** pcsname */ 
            );
            /**Returns  the type of direction specified (direction vector or radial) 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionConstructedFeatureBuilder::DirectionType DirectionSpecifiedEnum
            (
            );
            /**Sets  the type of direction specified (direction vector or radial) 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDirectionSpecifiedEnum
            (
                NXOpen::CAM::InspectionConstructedFeatureBuilder::DirectionType directionSpecifiedEnum /** directionspecifiedenum */ 
            );
            /**Returns  the direction vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DirectionVector
            (
            );
            /**Sets  the direction vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDirectionVector
            (
                NXOpen::Direction * directionVector /** directionvector */ 
            );
            /**Returns  the move distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double MoveDistance
            (
            );
            /**Sets  the move distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMoveDistance
            (
                double moveDistance /** movedistance */ 
            );
            /**Returns  the filter toggle for the first list of subfeatures 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool SubFeat1Filter
            (
            );
            /**Sets  the filter toggle for the first list of subfeatures 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSubFeat1Filter
            (
                bool subFeat1Filter /** subfeat1filter */ 
            );
            /**Returns  the first subfeature selection button 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SubFeat1Select
            (
            );
            /**Returns  the state of features in the first subfeature list 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionConstructedFeatureBuilder::SubFeat1StateType SubFeat1StateEnum
            (
            );
            /**Sets  the state of features in the first subfeature list 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSubFeat1StateEnum
            (
                NXOpen::CAM::InspectionConstructedFeatureBuilder::SubFeat1StateType subFeat1StateEnum /** subfeat1stateenum */ 
            );
            /**Returns  the name of the first subfeature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SubFeat1Name
            (
            );
            /**Sets  the name of the first subfeature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSubFeat1Name
            (
                const NXString & subFeat1Name /** subfeat1name */ 
            );
            /**Sets  the name of the first subfeature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetSubFeat1Name
            (
                const char * subFeat1Name /** subfeat1name */ 
            );
            /**Returns  the filter toggle for the second list of subfeatures 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool SubFeat2Filter
            (
            );
            /**Sets  the filter toggle for the second list of subfeatures 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSubFeat2Filter
            (
                bool subFeat2Filter /** subfeat2filter */ 
            );
            /**Returns  the second subfeature selection button 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SubFeat2Select
            (
            );
            /**Returns  the state of features in the second subfeature list 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionConstructedFeatureBuilder::SubFeat2StateType SubFeat2StateEnum
            (
            );
            /**Sets  the state of features in the second subfeature list 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSubFeat2StateEnum
            (
                NXOpen::CAM::InspectionConstructedFeatureBuilder::SubFeat2StateType subFeat2StateEnum /** subfeat2stateenum */ 
            );
            /**Returns  the name of the first subfeature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SubFeat2Name
            (
            );
            /**Sets  the name of the first subfeature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSubFeat2Name
            (
                const NXString & subFeat2Name /** subfeat2name */ 
            );
            /**Sets  the name of the first subfeature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetSubFeat2Name
            (
                const char * subFeat2Name /** subfeat2name */ 
            );
            /** The button used to cycle through possible solutions 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void CycleSolution
            (
            );
            /** The button used to create the nominal constructed feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void CreateNominal
            (
            );
            /**Returns  the select nominal feature button 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectNominalFeature
            (
            );
            /**Returns  the nominal feature name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NominalName
            (
            );
            /**Sets  the nominal feature name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNominalName
            (
                const NXString & nominalName /** nominalname */ 
            );
            /**Sets  the nominal feature name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetNominalName
            (
                const char * nominalName /** nominalname */ 
            );
            /**Returns  the constructed feature name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ConstName
            (
            );
            /**Sets  the constructed feature name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetConstName
            (
                const NXString & constName /** constname */ 
            );
            /**Sets  the constructed feature name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetConstName
            (
                const char * constName /** constname */ 
            );
            /** Get the current subfeatures  @return  Current subfeatures 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetSubFeatures
            (
            );
            /** Set the current subfeatures 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSubFeatures
            (
                std::vector<NXString> & subFeatures /** Current subfeatures   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** The constructed inspection feature direction vector based on selected vector 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateDirectionVector
            (
                const NXOpen::Vector3d & vector /** The vector data to use for update */
            );
            /** Get the current subfeature states.  @return  Current subfeature states 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAM::InspectionConstructedFeatureBuilder::CurrentStateType> GetSubFeatureStates
            (
            );
            /** Set the current subfeature states. 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSubFeatureStates
            (
                const std::vector<NXOpen::CAM::InspectionConstructedFeatureBuilder::CurrentStateType> & subFeatureStates /** Current subfeature states */
            );
            /**Returns  the design feature creation type 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionConstructedFeatureBuilder::DesignCreationType DesignCreation
            (
            );
            /**Sets  the design feature creation type 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDesignCreation
            (
                NXOpen::CAM::InspectionConstructedFeatureBuilder::DesignCreationType creationType /** creationtype */ 
            );
            /**Returns  the offset design feature geometry 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * DesignOffsetGeometry
            (
            );
            /**Sets  the offset design feature geometry 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDesignOffsetGeometry
            (
                NXOpen::NXObject * designOffset /** designoffset */ 
            );
            /**Returns  the extract start edge distance 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: double ExtractStartDistance
            (
            );
            /**Sets  the extract start edge distance 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExtractStartDistance
            (
                double startDistance /** startdistance */ 
            );
            /**Returns  the extract end edge distance 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: double ExtractEndDistance
            (
            );
            /**Sets  the extract end edge distance 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExtractEndDistance
            (
                double endDistance /** enddistance */ 
            );
            /**Returns  the extract edge distance type type 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionConstructedFeatureBuilder::ExtractEdgeDistanceType ExtractEdgeDistance
            (
            );
            /**Sets  the extract edge distance type type 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExtractEdgeDistance
            (
                NXOpen::CAM::InspectionConstructedFeatureBuilder::ExtractEdgeDistanceType distanceType /** distancetype */ 
            );
            /**Returns  the extract step size 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: double StepSize
            (
            );
            /**Sets  the extract step size 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStepSize
            (
                double stepSize /** stepsize */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
