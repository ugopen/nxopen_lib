#ifndef NXOpen_CAM_INSPECTIONCURVEFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONCURVEFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionCurveFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/CAM_InspectionCurveFeatureBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionCurveFeatureBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class Direction;
    class SelectNXObjectList;
    class SelectPointList;
    namespace CAM
    {
        class _InspectionCurveFeatureBuilderBuilder;
        class InspectionCurveFeatureBuilderImpl;
        /** Represents a CMM Inspection Curve Feature builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionCurveFeatureBuilder  CAM::InspectionOperationCollection::CreateInspectionCurveFeatureBuilder @endlink  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionCurveFeatureBuilder : public CAM::OperationBuilder
        {
            /** The method used to define point data */
            public: enum PointDataDefinitionType
            {
                PointDataDefinitionTypeNone/** No point data is defined */,
                PointDataDefinitionTypePointSet/** A set of points are defined using parameters */,
                PointDataDefinitionTypeIndividualPoints/** Individual points are defined */
            };

            /** the method used to define the start and end points */
            public: enum StartEndModeType
            {
                StartEndModeTypePercentage/** Percent */,
                StartEndModeTypeDistance/** Distance */
            };

            private: InspectionCurveFeatureBuilderImpl * m_inspectioncurvefeaturebuilder_impl;
            private: friend class  _InspectionCurveFeatureBuilderBuilder;
            protected: InspectionCurveFeatureBuilder();
            public: ~InspectionCurveFeatureBuilder();
            /**Returns  the selected curves 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectedCurves
            (
            );
            /**Returns  the underlying surfaces selector.  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectedSurfaces
            (
            );
            /**Returns  the approach direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ApproachDirection
            (
            );
            /**Sets  the approach direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetApproachDirection
            (
                NXOpen::Direction * approachDirection /** approachdirection */ 
            );
            /**Returns  the point data definition 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionCurveFeatureBuilder::PointDataDefinitionType PointDataDefinition
            (
            );
            /**Sets  the point data definition 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointDataDefinition
            (
                NXOpen::CAM::InspectionCurveFeatureBuilder::PointDataDefinitionType pointDataDefinition /** pointdatadefinition */ 
            );
            /**Returns  the minimum number of points 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: int MinimumNumberOfPoints
            (
            );
            /**Sets  the minimum number of points 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMinimumNumberOfPoints
            (
                int minimumNumberOfPoints /** minimumnumberofpoints */ 
            );
            /**Returns  the minimum spacing 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double MinimumSpacing
            (
            );
            /**Sets  the minimum spacing 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMinimumSpacing
            (
                double minimumSpacing /** minimumspacing */ 
            );
            /**Returns  the maximum spacing 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double MaximumSpacing
            (
            );
            /**Sets  the maximum spacing 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMaximumSpacing
            (
                double maximumSpacing /** maximumspacing */ 
            );
            /**Returns  the curvature factor 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double CurvatureFactor
            (
            );
            /**Sets  the curvature factor 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCurvatureFactor
            (
                double curvatureFactor /** curvaturefactor */ 
            );
            /**Returns  the start end mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionCurveFeatureBuilder::StartEndModeType StartEndMode
            (
            );
            /**Sets  the start end mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartEndMode
            (
                NXOpen::CAM::InspectionCurveFeatureBuilder::StartEndModeType startEndMode /** startendmode */ 
            );
            /**Returns  the start percentage 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double StartPercentage
            (
            );
            /**Sets  the start percentage 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartPercentage
            (
                double startPercentage /** startpercentage */ 
            );
            /**Returns  the end percentage 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double EndPercentage
            (
            );
            /**Sets  the end percentage 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEndPercentage
            (
                double endPercentage /** endpercentage */ 
            );
            /**Returns  the start distance 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double StartDistance
            (
            );
            /**Sets  the start distance 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartDistance
            (
                double startDistance /** startdistance */ 
            );
            /**Returns  the end distance 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double EndDistance
            (
            );
            /**Sets  the end distance 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEndDistance
            (
                double endDistance /** enddistance */ 
            );
            /**Returns  the user specified point selector 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectPointList * PointSelector
            (
            );
            /**Returns  the name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
