#ifndef NXOpen_DRAWINGS_VIEWSTYLEBASEBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSTYLEBASEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewStyleBaseBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_ArrangementsBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleBaseBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ViewStyleBaseBuilder;
    }
    namespace Assemblies
    {
        class ArrangementsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Part;
    namespace Drawings
    {
        class _ViewStyleBaseBuilderBuilder;
        class ViewStyleBaseBuilderImpl;
        /** Represents the BASE tab on the View Style Dialog (Drawings.ViewStyleBaseBuilder)
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ViewStyleBaseBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: ViewStyleBaseBuilderImpl * m_viewstylebasebuilder_impl;
            private: friend class  _ViewStyleBaseBuilderBuilder;
            protected: ViewStyleBaseBuilder();
            public: ~ViewStyleBaseBuilder();
            /**Returns  the part on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * Part
            (
            );
            /**Sets  the part on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPart
            (
                NXOpen::Part * part /** Sets a new part on the base sub-builder */
            );
            /**Returns  the part name on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartName
            (
            );
            /**Sets  the part name on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPartName
            (
                const NXString & partName /** Sets a new part name on the base sub-builder */
            );
            /**Sets  the part name on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetPartName
            (
                const char * partName /** Sets a new part name on the base sub-builder */
            );
            /**Returns  the arrangement on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ArrangementsBuilder * Arrangement
            (
            );
            /**Returns  the arrangement name on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ArrangementName
            (
            );
            /**Sets  the arrangement name on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrangementName
            (
                const NXString & arrangementName /** Sets a new arrangement name on the base sub-builder */
            );
            /**Sets  the arrangement name on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetArrangementName
            (
                const char * arrangementName /** Sets a new arrangement name on the base sub-builder */
            );
            /**Returns  the faceted representation toggle on the BASE tab of the View Style Dialog 
             <br>  @deprecated Deprecated in NX8.5.1.  Use @link Drawings::ViewStyleGeneralBuilder::ViewRepresentation Drawings::ViewStyleGeneralBuilder::ViewRepresentation@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.1.  Use Drawings::ViewStyleGeneralBuilder::ViewRepresentation instead.") bool FacetedRepresentation
            (
            );
            /**Sets  the faceted representation toggle on the BASE tab of the View Style Dialog 
             <br>  @deprecated Deprecated in NX8.5.1.  Use @link Drawings::ViewStyleGeneralBuilder::SetViewRepresentation Drawings::ViewStyleGeneralBuilder::SetViewRepresentation@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.1.  Use Drawings::ViewStyleGeneralBuilder::SetViewRepresentation instead.") void SetFacetedRepresentation
            (
                bool facetedRepresentationToggle /** Sets a new faceted representation toggle value on the base sub-builder */
            );
            /**Returns  the inherit clipping boundary toggle on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool InheritClippingBoundary
            (
            );
            /**Sets  the inherit clipping boundary toggle on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetInheritClippingBoundary
            (
                bool inheritClippingBoundaryToggle /** Sets a new inherit clipping boundary toggle value on the base sub-builder */
            );
            /**Returns  the transfer annotation toggle on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool TransferAnnotation
            (
            );
            /**Sets  the transfer annotation toggle on the BASE tab of the View Style Dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTransferAnnotation
            (
                bool transferAnnotationToggle /** Sets a new transfer annotation toggle value on the base sub-builder */
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
