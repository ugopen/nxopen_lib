#ifndef NXOpen_GEOMETRICANALYSIS_DUPINBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_DUPINBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_DupinBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_DupinBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class DupinBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    namespace GeometricAnalysis
    {
        class _DupinBuilderBuilder;
        class DupinBuilderImpl;
        /** The Dupin Indicatrix is a tool to geometrically display the surface curvature at a specified point on a surface. 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICANALYSISEXPORT  DupinBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: DupinBuilderImpl * m_dupinbuilder_impl;
            private: friend class  _DupinBuilderBuilder;
            protected: DupinBuilder();
            public: ~DupinBuilder();
            /**Returns  the point location defining where the analysis should be done. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * AnalysisPoint
            (
            );
            /**Sets  the point location defining where the analysis should be done. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAnalysisPoint
            (
                NXOpen::Point * analysisPoint /** analysispoint */ 
            );
            /** Reset the analysis point to accept dynamic input. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void ResetAnalysisPoint
            (
            );
            /**Returns  the scale factor to apply to the display of the dupin indicatrix. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Scale
            (
            );
            /**Sets  the scale factor to apply to the display of the dupin indicatrix. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  the deviation in degrees from the minimum curvature. This value is used to rotate the normal curvature about the specified point. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Angle
            (
            );
            /**Sets  the deviation in degrees from the minimum curvature. This value is used to rotate the normal curvature about the specified point. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the tolerance that defines at the specified point if an area is flat. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double FlatnessTolerance
            (
            );
            /**Sets  the tolerance that defines at the specified point if an area is flat. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFlatnessTolerance
            (
                double flatnessTolerance /** flatnesstolerance */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
