#ifndef NXOpen_PREFERENCES_PARTVISUALIZATIONCOLORSETTING_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTVISUALIZATIONCOLORSETTING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartVisualizationColorSetting.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class PartVisualizationColorSetting;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    class NXColor;
    namespace Preferences
    {
        class PartVisualizationColorSettingImpl;
        /** Represents the set of visualization preferences under color setting tab applicable to part  <br> To obtain an instance of this class, refer to @link Preferences::PartPreferences  Preferences::PartPreferences @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  PartVisualizationColorSetting
        {
            /** Describes whether the random color display is applicable for faces or bodies */
            public: enum RandomColorDisplayFor
            {
                RandomColorDisplayForFaces/** For Faces */,
                RandomColorDisplayForBodies/** For Bodies */
            };

            private: PartVisualizationColorSettingImpl * m_partvisualizationcolorsetting_impl;
            private: NXOpen::Preferences::PartPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PartVisualizationColorSetting(NXOpen::Preferences::PartPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PartVisualizationColorSetting();
            /**Returns  the preselection color. Represents color of selectable objects for the current operation. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int PreselectionColor
            (
            );
            /**Sets  the preselection color. Represents color of selectable objects for the current operation. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPreselectionColor
            (
                int preselectionColor /** preselection color */ 
            );
            /**Returns  the selection color. Represents color of selected objects, the grid, view names and borders, 
            and temporary points and conehead vectors. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int SelectionColor
            (
            );
            /**Sets  the selection color. Represents color of selected objects, the grid, view names and borders, 
            and temporary points and conehead vectors. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectionColor
            (
                int selectionColor /** selection color */ 
            );
            /**Returns  the color of hidden geometry. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int HiddenGeometryColor
            (
            );
            /**Sets  the color of hidden geometry. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHiddenGeometryColor
            (
                int hiddenGeometryColor /** hidden geometry color */ 
            );
            /**Returns  the color that an HD3D objects associated objects are highlighted with when the HD3D object is selected.
                The color must be in the range of 1 to 216 inclusive. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int AttentionColor
            (
            );
            /**Sets  the color that an HD3D objects associated objects are highlighted with when the HD3D object is selected.
                The color must be in the range of 1 to 216 inclusive. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAttentionColor
            (
                int attentionColor /** attention color */ 
            );
            /**Returns  the preselection color of handles. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * HandlePreselectionColor
            (
            );
            /**Sets  the preselection color of handles. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHandlePreselectionColor
            (
                NXOpen::NXColor * handlePreselectionColor /** handle preselection color */ 
            );
            /**Returns  the selection color of handles. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * HandleSelectionColor
            (
            );
            /**Sets  the selection color of handles. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHandleSelectionColor
            (
                NXOpen::NXColor * handleSelectionColor /** handle selection color */ 
            );
            /**Returns  the color of handles. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * HandleColor
            (
            );
            /**Sets  the color of handles. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHandleColor
            (
                NXOpen::NXColor * handleColor /** handle color */ 
            );
            /**Returns  the color of active handles. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * HandleActiveColor
            (
            );
            /**Sets  the color of active handles. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHandleActiveColor
            (
                NXOpen::NXColor * handleActiveColor /** handle active color */ 
            );
            /**Returns  the color of the OrientXpress handle. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * HandleOrientxpressColor
            (
            );
            /**Sets  the color of the OrientXpress handle. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHandleOrientxpressColor
            (
                NXOpen::NXColor * handleOrientxpressColor /** handle orientxpress color */ 
            );
            /** Allows user to shuffle the Random color 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void ShuffleRandomColor
            (
            );
            /**Returns  the random color display flag. If true it provides a temporary display of unique colors 
            per solid object. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool RandomColorDisplayOption
            (
            );
            /**Sets  the random color display flag. If true it provides a temporary display of unique colors 
            per solid object. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRandomColorDisplayOption
            (
                bool randomColorDisplayOption /** random color display option */ 
            );
            /**Returns  the random color display selection.
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartVisualizationColorSetting::RandomColorDisplayFor RandomColorDisplay
            (
            );
            /**Sets  the random color display selection.
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRandomColorDisplay
            (
                NXOpen::Preferences::PartVisualizationColorSetting::RandomColorDisplayFor randomColorDisplay /** random color display */ 
            );
            /**Returns  the show widths flag. If true, the object width attribute determines the displayed width 
            of lines or curves used to represent an object. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowWidths
            (
            );
            /**Sets  the show widths flag. If true, the object width attribute determines the displayed width 
            of lines or curves used to represent an object. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowWidths
            (
                bool showWidths /** show widths */ 
            );
            /**Returns  the monochrome display flag. If true it turns on the monochrome display options. 
            Monochrome display also applies to Expanded drawing views. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool MonochromeDisplay
            (
            );
            /**Sets  the monochrome display flag. If true it turns on the monochrome display options. 
            Monochrome display also applies to Expanded drawing views. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMonochromeDisplay
            (
                bool monochromeDisplay /** monochrome display */ 
            );
            /**Returns  the monochrome color for preselected objects  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int MonochromePreselectionColor
            (
            );
            /**Sets  the monochrome color for preselected objects  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMonochromePreselectionColor
            (
                int monochromePreselectionColor /** monochrome preselection color */ 
            );
            /**Returns  the monochrome selection_color. Displays all selected/highlighted objects, 
            temporary display objects (such as coneheads, temporary text), and drawing borders 
            in this color. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int MonochromeSelectionColor
            (
            );
            /**Sets  the monochrome selection_color. Displays all selected/highlighted objects, 
            temporary display objects (such as coneheads, temporary text), and drawing borders 
            in this color. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMonochromeSelectionColor
            (
                int monochromeSelectionColor /** monochrome selection color */ 
            );
            /**Returns  the monochrome foreground color. Monochrome color for all displayable 
            objects, view borders, and view names. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int MonochromeForegroundColor
            (
            );
            /**Sets  the monochrome foreground color. Monochrome color for all displayable 
            objects, view borders, and view names. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMonochromeForegroundColor
            (
                int monochromeForegroundColor /** monochrome foreground color */ 
            );
            /**Returns  the monochrome background color 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int MonochromeBackgroundColor
            (
            );
            /**Sets  the monochrome background color 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMonochromeBackgroundColor
            (
                int monochromeBackgroundColor /** monochrome background color */ 
            );
            /**Returns  the de-emphasis color that is blended with object colors to de-emphasize objects 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link Preferences::PartVisualizationEmphasis::GetWireframeBlendOptions Preferences::PartVisualizationEmphasis::GetWireframeBlendOptions@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use Preferences::PartVisualizationEmphasis::GetWireframeBlendOptions instead.") int DeEmphasisBlendColor
            (
            );
            /**Sets  the de-emphasis color that is blended with object colors to de-emphasize objects 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link Preferences::PartVisualizationEmphasis::SetWireframeBlendOptions Preferences::PartVisualizationEmphasis::SetWireframeBlendOptions@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use Preferences::PartVisualizationEmphasis::SetWireframeBlendOptions instead.") void SetDeEmphasisBlendColor
            (
                int blendColor /** blend color */ 
            );
            /**Returns  the percentage of the de-emphasis color that is blended with object colors to de-emphasize objects 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link Preferences::PartVisualizationEmphasis::GetWireframeBlendOptions Preferences::PartVisualizationEmphasis::GetWireframeBlendOptions@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use Preferences::PartVisualizationEmphasis::GetWireframeBlendOptions instead.") int DeEmphasisBlendPercentage
            (
            );
            /**Sets  the percentage of the de-emphasis color that is blended with object colors to de-emphasize objects 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link Preferences::PartVisualizationEmphasis::SetWireframeBlendOptions Preferences::PartVisualizationEmphasis::SetWireframeBlendOptions@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use Preferences::PartVisualizationEmphasis::SetWireframeBlendOptions instead.") void SetDeEmphasisBlendPercentage
            (
                int blendPercentage /** blend percentage */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
