#ifndef NXOpen_DRAWINGS_VIEWPROJECTIONPLANEBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWPROJECTIONPLANEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewProjectionPlaneBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ViewProjectionPlaneBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ViewProjectionPlaneBuilder;
    }
    class Axis;
    namespace Drawings
    {
        class SelectDraftingView;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drawings
    {
        class _ViewProjectionPlaneBuilderBuilder;
        class ViewProjectionPlaneBuilderImpl;
        /** Represents the View Projection Plane (Drawings.ViewProjectionPlaneBuilder)
         <br>  Created in NX6.0.2.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ViewProjectionPlaneBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** the plane options to select */
            public: enum PlaneOptions
            {
                PlaneOptionsInferred/** Inferred plane from vector, point and plane view */,
                PlaneOptionsDepthValue/** Get plane using source view and depth value */
            };

            private: ViewProjectionPlaneBuilderImpl * m_viewprojectionplanebuilder_impl;
            private: friend class  _ViewProjectionPlaneBuilderBuilder;
            protected: ViewProjectionPlaneBuilder();
            public: ~ViewProjectionPlaneBuilder();
            /**Returns  the plane option, decide how to get the plane 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewProjectionPlaneBuilder::PlaneOptions PlaneOption
            (
            );
            /**Sets  the plane option, decide how to get the plane 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetPlaneOption
            (
                NXOpen::Drawings::ViewProjectionPlaneBuilder::PlaneOptions option /** option */ 
            );
            /**Returns  the axis, define the vector and the point from which to infer the plane 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * Axis
            (
            );
            /**Sets  the axis, define the vector and the point from which to infer the plane 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetAxis
            (
                NXOpen::Axis * axis /** axis */ 
            );
            /**Returns  the select view. This defines the plane view. 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SelectDraftingView * View
            (
            );
            /**Returns  the depth value 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DepthValue
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
