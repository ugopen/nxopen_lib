#ifndef NXOpen_CAE_OPTIMIZATION_DAOSTOPCONDITION_HXX_INCLUDED
#define NXOpen_CAE_OPTIMIZATION_DAOSTOPCONDITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Optimization_DAOStopCondition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Optimization_DAOStopCondition.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Optimization
        {
            class DAOStopCondition;
        }
    }
    class NXObject;
    namespace CAE
    {
        namespace Optimization
        {
            class _DAOStopConditionBuilder;
            class DAOStopConditionImpl;
            /** Represents a @link CAE::Optimization::DAOStopCondition CAE::Optimization::DAOStopCondition@endlink . 
             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  DAOStopCondition : public NXObject
            {
                private: DAOStopConditionImpl * m_daostopcondition_impl;
                private: friend class  _DAOStopConditionBuilder;
                protected: DAOStopCondition();
                public: ~DAOStopCondition();
                /**Returns  the maximum iteration number 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: int MaxIterations
                (
                );
                /**Sets  the maximum iteration number 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetMaxIterations
                (
                    int stepNumber /** Step number */
                );
                /**Returns  the maximum constraint violation 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double MaxConstraintViolation
                (
                );
                /**Sets  the maximum constraint violation 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetMaxConstraintViolation
                (
                    double constraintViolation /** Maximum constraint violation */
                );
                /**Returns  the relative convergence 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double RelativeConvergence
                (
                );
                /**Sets  the relative convergence 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetRelativeConvergence
                (
                    double relativeConvergence /** Relative convergence */
                );
                /**Returns  the absolute convergence 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double AbsoluteConvergence
                (
                );
                /**Sets  the absolute convergence 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetAbsoluteConvergence
                (
                    double absoluteConvergence /** Absolute convergence */
                );
                /**Returns  the perturbation fraction 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double PerturbationFraction
                (
                );
                /**Sets  the perturbation fraction 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetPerturbationFraction
                (
                    double perturbationFraction /** Perturbation fraction */
                );
                /**Returns  the constraint checking flag, only effective for global sensitivity optimization type 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: bool ConstraintChecking
                (
                );
                /**Sets  the constraint checking flag, only effective for global sensitivity optimization type 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetConstraintChecking
                (
                    bool constraintChecking /** Constraint checking flag */
                );
                /**Returns  the save all interation results flag 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: bool SaveAllIterationResults
                (
                );
                /**Sets  the save all interation results flag 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_design_sim ("NX Design Simulation") */
                public: void SetSaveAllIterationResults
                (
                    bool saveResults /** Save all iteration results flag */
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
