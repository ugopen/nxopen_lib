#ifndef NXOpen_ANNOTATIONS_CUSTOMSYMBOLTEXTDATA_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_CUSTOMSYMBOLTEXTDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_CustomSymbolTextData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CustomSymbols.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class CustomSymbolTextData;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class CustomSymbolTextDataImpl;
        /** Represents custom symbol text data 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  CustomSymbolTextData : public TransientObject
        {
            private: CustomSymbolTextDataImpl * m_customsymboltextdata_impl;
            /// \cond NX_NO_DOC 
            public: explicit CustomSymbolTextData(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~CustomSymbolTextData();
            /**Returns  the text type 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TextType TextType
            (
            );
            /**Returns  the control text index. Valid for the text type
                        @link Annotations::TextTypeControlled Annotations::TextTypeControlled@endlink . 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: int ControlTextIndex
            (
            );
            /**Sets  the control text index. Valid for the text type
                        @link Annotations::TextTypeControlled Annotations::TextTypeControlled@endlink . 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetControlTextIndex
            (
                int index /** New control text index */
            );
            /** Returns the text. Valid for the text type
                        @link Annotations::TextTypeArbitrary Annotations::TextTypeArbitrary@endlink  and            
                        @link Annotations::TextTypePartiallyControlled Annotations::TextTypePartiallyControlled@endlink .  @return  List of lines 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetText
            (
            );
            /** Sets the text. Valid for the text type
                        @link Annotations::TextTypeArbitrary Annotations::TextTypeArbitrary@endlink  and        
                        @link Annotations::TextTypePartiallyControlled Annotations::TextTypePartiallyControlled@endlink . 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetText
            (
                std::vector<NXString> & lines /** List of lines */
            );
            /**Returns  the integer value. Valid for the text type
                        @link Annotations::TextTypeInteger Annotations::TextTypeInteger@endlink . 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: int IntegerValue
            (
            );
            /**Sets  the integer value. Valid for the text type
                        @link Annotations::TextTypeInteger Annotations::TextTypeInteger@endlink . 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIntegerValue
            (
                int intValue /** New integer value */
            );
            /**Returns  the real value. Valid for the text type
                        @link Annotations::TextTypeReal Annotations::TextTypeReal@endlink . 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double RealValue
            (
            );
            /**Sets  the real value. Valid for the text type
                        @link Annotations::TextTypeReal Annotations::TextTypeReal@endlink . 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRealValue
            (
                double realValue /** New real value */
            );
            /**Returns  the string value. Valid for the text type
                        @link Annotations::TextTypeControlled Annotations::TextTypeControlled@endlink  and  
                        @link Annotations::TextTypePartiallyControlled Annotations::TextTypePartiallyControlled@endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringValue
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
