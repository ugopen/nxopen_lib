#ifndef NXOpen_ANNOTATIONS_SIMPLEDRAFTINGAIDPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_SIMPLEDRAFTINGAIDPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_SimpleDraftingAidPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_LetteringPreferences.hxx>
#include <NXOpen/Annotations_LineAndArrowPreferences.hxx>
#include <NXOpen/Annotations_SymbolPreferences.hxx>
#include <NXOpen/Annotations_UserSymbolPreferences.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class SimpleDraftingAidPreferences;
    }
    namespace Annotations
    {
        class LetteringPreferences;
    }
    namespace Annotations
    {
        class LineAndArrowPreferences;
    }
    namespace Annotations
    {
        class SymbolPreferences;
    }
    namespace Annotations
    {
        class UserSymbolPreferences;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class SimpleDraftingAidPreferencesImpl;
        /** Represents simple drafting aid preferences 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  SimpleDraftingAidPreferences : public TransientObject
        {
            private: SimpleDraftingAidPreferencesImpl * m_simpledraftingaidpreferences_impl;
            /// \cond NX_NO_DOC 
            public: explicit SimpleDraftingAidPreferences(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~SimpleDraftingAidPreferences();
            /** Returns the lettering preferences  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LetteringPreferences * GetLetteringPreferences
            (
            );
            /** Sets the lettering preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLetteringPreferences
            (
                NXOpen::Annotations::LetteringPreferences * preferences /** preferences */ 
            );
            /** Returns the line and arrow preferences  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineAndArrowPreferences * GetLineAndArrowPreferences
            (
            );
            /** Sets the line and arrow preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLineAndArrowPreferences
            (
                NXOpen::Annotations::LineAndArrowPreferences * preferences /** preferences */ 
            );
            /** Returns the symbol preferences  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SymbolPreferences * GetSymbolPreferences
            (
            );
            /** Sets the symbol preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSymbolPreferences
            (
                NXOpen::Annotations::SymbolPreferences * preferences /** preferences */ 
            );
            /** Returns the user symbol preferences  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::UserSymbolPreferences * GetUserSymbolPreferences
            (
            );
            /** Sets the user symbol preferences 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUserSymbolPreferences
            (
                NXOpen::Annotations::UserSymbolPreferences * preferences /** preferences */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
