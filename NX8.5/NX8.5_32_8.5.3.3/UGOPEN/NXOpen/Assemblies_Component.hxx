#ifndef NXOpen_ASSEMBLIES_COMPONENT_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_COMPONENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_Component.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_Subset.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Routing_ICharacteristic.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Update.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        class Component;
    }
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Assemblies
    {
        class ComponentAssembly;
    }
    namespace Assemblies
    {
        class Subset;
    }
    class BasePart;
    class DisplayableObject;
    class ErrorList;
    class INXObject;
    class NXObject;
    namespace PDM
    {
        class DesignElementRevision;
    }
    namespace PDM
    {
        class DesignSubordinateRevision;
    }
    namespace Positioning
    {
        class ComponentConstraint;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ICharacteristic;
    }
    class Unit;
    namespace Assemblies
    {
        /** Represents the component quantity type of the component */
        enum ComponentQuantity
        {
            ComponentQuantityNone/** No quantity */,
            ComponentQuantityInteger/** Integer quantity */,
            ComponentQuantityReal/** Real quantity */,
            ComponentQuantityAsRequired/** Quantity As required. */
        };

        /** The overall result of the degrees of freedom calculation reported
                in @link DegreesOfFreedom DegreesOfFreedom@endlink . */
        enum DegreesOfFreedomResult
        {
            DegreesOfFreedomResultUnknown/** The calculation failed to produce a result, possibly because the component
                                                                                                   is inconsistently constrained. */,
            DegreesOfFreedomResultSuccess/** The degrees of freedom calculation succeeded. */
        };

        /** The status of a rotation point, rotation axis or translation direction reported
                in @link DegreesOfFreedom DegreesOfFreedom@endlink . */
        enum DegreesOfFreedomStatus
        {
            DegreesOfFreedomStatusNotUsed/** The field is not used. */,
            DegreesOfFreedomStatusStatic/** The point or direction is well defined. */,
            DegreesOfFreedomStatusFree/** The point or direction is under defined. */,
            DegreesOfFreedomStatusInstantaneous/** The point or direction is instantaneous. */,
            DegreesOfFreedomStatusStaticNormal/** The direction represents a normal to two translational degrees of freedom. The direction is well defined. */,
            DegreesOfFreedomStatusFreeNormal/** The direction represents a normal to two translational degrees of freedom. The direction is under defined. */,
            DegreesOfFreedomStatusInstantaneousNormal/** The direction represents a normal to two translational degrees of freedom. The direction is instantaneous. */
        };

         /** Structure used to report the Degrees of Freedom of a component.
                If there is one rational degrees of freedom then axis is determined by base_point1
                and rotation_direction1. 
                If there are 2 rotational degrees of freedom then one axis is determined by base_point1
                and rotation_direction1 and the other by base_point2 and rotation_direction2.
                If there are 3 rotational degrees of freedom then the fixed point for the rotations
                is in base_point1 and there is no axis direction given.
                The translational degrees of freedom are given in translation_direction1 and
                translation_direction2, with the possibility that one of these may be a "normal" 
                to 2 degrees of freedom, as specified in the associated status. */

        struct  DegreesOfFreedom
        {
            public: /** The success or otherwise of the degrees of freedom calculation */NXOpen::Assemblies::DegreesOfFreedomResult Result;
            public: /** Number of static and free rotational degrees of freedom. */int NumRotational;
            public: /** Number of static and free translational degrees of freedom. */int NumTranslational;
            public: /** Number of instantaneous rotational degrees of freedom. */int NumInstantaneousRotational;
            public: /** Number of instantaneous translational degrees of freedom. */int NumInstantaneousTranslational;
            public: /** First rotation base point status. */NXOpen::Assemblies::DegreesOfFreedomStatus BasePoint1Status;
            public: /** First rotation base point. */NXOpen::Point3d BasePoint1;
            public: /** First rotation direction status. */NXOpen::Assemblies::DegreesOfFreedomStatus RotationDirection1Status;
            public: /** First rotation direction. */NXOpen::Vector3d RotationDirection1;
            public: /** Second rotation base point status. */NXOpen::Assemblies::DegreesOfFreedomStatus BasePoint2Status;
            public: /** Second rotation base point. */NXOpen::Point3d BasePoint2;
            public: /** Second rotation direction status. */NXOpen::Assemblies::DegreesOfFreedomStatus RotationDirection2Status;
            public: /** Second rotation direction. */NXOpen::Vector3d RotationDirection2;
            public: /** First translation direction status. */NXOpen::Assemblies::DegreesOfFreedomStatus TranslationDirection1Status;
            public: /** First translation direction. */NXOpen::Vector3d TranslationDirection1;
            public: /** Second translation direction status. */NXOpen::Assemblies::DegreesOfFreedomStatus TranslationDirection2Status;
            public: /** Second translation direction. */NXOpen::Vector3d TranslationDirection2;
            public: DegreesOfFreedom() :
                Result((NXOpen::Assemblies::DegreesOfFreedomResult)0),
                NumRotational(),
                NumTranslational(),
                NumInstantaneousRotational(),
                NumInstantaneousTranslational(),
                BasePoint1Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                BasePoint1(),
                RotationDirection1Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                RotationDirection1(),
                BasePoint2Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                BasePoint2(),
                RotationDirection2Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                RotationDirection2(),
                TranslationDirection1Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                TranslationDirection1(),
                TranslationDirection2Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                TranslationDirection2()
            {
            }
            /** Constructor for the DegreesOfFreedom struct. */ 
            public: DegreesOfFreedom(NXOpen::Assemblies::DegreesOfFreedomResult resultInitial /** The success or otherwise of the degrees of freedom calculation */, 
                    int numRotationalInitial /** Number of static and free rotational degrees of freedom. */, 
                    int numTranslationalInitial /** Number of static and free translational degrees of freedom. */, 
                    int numInstantaneousRotationalInitial /** Number of instantaneous rotational degrees of freedom. */, 
                    int numInstantaneousTranslationalInitial /** Number of instantaneous translational degrees of freedom. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus basePoint1StatusInitial /** First rotation base point status. */, 
                    const NXOpen::Point3d &basePoint1Initial /** First rotation base point. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus rotationDirection1StatusInitial /** First rotation direction status. */, 
                    const NXOpen::Vector3d &rotationDirection1Initial /** First rotation direction. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus basePoint2StatusInitial /** Second rotation base point status. */, 
                    const NXOpen::Point3d &basePoint2Initial /** Second rotation base point. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus rotationDirection2StatusInitial /** Second rotation direction status. */, 
                    const NXOpen::Vector3d &rotationDirection2Initial /** Second rotation direction. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus translationDirection1StatusInitial /** First translation direction status. */, 
                    const NXOpen::Vector3d &translationDirection1Initial /** First translation direction. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus translationDirection2StatusInitial /** Second translation direction status. */, 
                    const NXOpen::Vector3d &translationDirection2Initial /** Second translation direction. */) :
                Result(resultInitial),
                NumRotational(numRotationalInitial),
                NumTranslational(numTranslationalInitial),
                NumInstantaneousRotational(numInstantaneousRotationalInitial),
                NumInstantaneousTranslational(numInstantaneousTranslationalInitial),
                BasePoint1Status(basePoint1StatusInitial),
                BasePoint1(basePoint1Initial),
                RotationDirection1Status(rotationDirection1StatusInitial),
                RotationDirection1(rotationDirection1Initial),
                BasePoint2Status(basePoint2StatusInitial),
                BasePoint2(basePoint2Initial),
                RotationDirection2Status(rotationDirection2StatusInitial),
                RotationDirection2(rotationDirection2Initial),
                TranslationDirection1Status(translationDirection1StatusInitial),
                TranslationDirection1(translationDirection1Initial),
                TranslationDirection2Status(translationDirection2StatusInitial),
                TranslationDirection2(translationDirection2Initial)
            {
            }
        };

        /** Represents the type of the positioning override on the component */
        enum PositionOverrideType
        {
            PositionOverrideTypeNone/** No position override */,
            PositionOverrideTypeUnloaded/** Position overridden, but in an unloaded parent */,
            PositionOverrideTypeExplicit/** Position explicitly overridden by user */,
            PositionOverrideTypeMatingImplicit/** Position implicitly overridden because of mating conditions */,
            PositionOverrideTypeConstraintImplicit/** Position implicitly overridden because of assembly constraints */
        };

        /** Represents the collaborative content type corresponding to this component*/
        enum CollaborativeContentType
        {
            CollaborativeContentTypeWorkset/** Workset */,
            CollaborativeContentTypeSubset/** Subset */,
            CollaborativeContentTypeShapeDesignElement/** Shape Design Element in a Workset*/,
            CollaborativeContentTypeReuseDesignElement/** Reuse Design Element in a Workset*/,
            CollaborativeContentTypePromissoryDesignElement/** Promissory Design Element in a Workset*/,
            CollaborativeContentTypeSubordinate/** Subordinate Design Element in a Workset*/,
            CollaborativeContentTypeDesignFeature/** Design Feature*/,
            CollaborativeContentTypeDesignControlElement/** Design Control Element*/,
            CollaborativeContentTypeNotAssigned/** Non-collaborative content such as items*/
        };

    }
    namespace Assemblies
    {
        class _ComponentBuilder;
        class ComponentImpl;
        /** 
            Represents a component in a @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink . Note that a
            Component is an occurrence whose prototype is a @link Part Part@endlink . See
            @link NXObject::Prototype NXObject::Prototype@endlink .

             <br> 

            Components are arranged in a tree, with each component having a single parent, and one
            or more children. The top of the tree is the Root Component (see
            @link Assemblies::ComponentAssembly::RootComponent Assemblies::ComponentAssembly::RootComponent@endlink  which has a NULL
            parent. The components below the root are referred to as "Top Level" components, which
            represent the component parts that have been added directly to the
            ComponentAssembly. (Calling @link Assemblies::ComponentAssembly::AddComponent Assemblies::ComponentAssembly::AddComponent@endlink  will
            create a new Top Level component.) Components beneath the top level represent
            components defined in sub-assemblies of the main assembly.

             <br> 
            
           
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_ASSEMBLIESEXPORT  Component : public DisplayableObject, public virtual Routing::ICharacteristic
        {
            /** Representation status of a component
                */
            public: enum RepresentationMode
            {
                RepresentationModeLightweight/** The component's solid bodies are all displayed using the lightweight representation */,
                RepresentationModePartial/** The component's solid bodies are displayed with some being exact and some being shown lightweight */,
                RepresentationModeExact/** The component's solid bodies are displayed with the exact data */,
                RepresentationModeNone/** There are no bodies to display for the current component */
            };

            private: ComponentImpl * m_component_impl;
            private: friend class  _ComponentBuilder;
            protected: Component();
            public: ~Component();
            /**Returns  the parent of the component. For the root component of an assembly, this
                    will be NULL. See @link Assemblies::ComponentAssembly::RootComponent Assemblies::ComponentAssembly::RootComponent@endlink .
                 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::Component * Parent
            (
            );
            /**Returns  the @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink  which owns this component as a "Top Level" component.
                    For components in a multi-level assembly, this is NOT the same the part that owns this component object. 
                    I.e. it is not the same as calling:
                     @code 
                     NXObject.OwningPart()
                     @endcode 
                     @code 
                    BasePart.ComponentAssembly()
                     @endcode 
                    
                 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ComponentAssembly * DirectOwner
            (
            );
            /** Returns the child components of this component 
                    However, it does not return non-geometric components (NGCs)
                    To enable this method to also return NGCs, set the following environment variable:
                    UGII_ALLOW_NGC_IN_UGOPEN=YES  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Assemblies::Component *> GetChildren
            (
            );
            /** Given a prototype object, returns the corresponding occurrence
                in this component  @return  the occurrence of the prototype in this component 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * FindOccurrence
            (
                NXOpen::NXObject * proto /** the prototype */
            );
            /** 
                    Gets the layer option. This controls which layer the component's geometry will appear on in its parent part.
                 @return  The layer option of the component in its parent part
                                                 -1 Means that the component's geometry has the layer settings defined in its orginal part
                                                  1-255 Means the components geometry is on the specified layer
                                          
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int GetLayerOption
            (
            );
            /** 
                    Sets the layer option. This controls which layer the component's geometry will appear on in its parent part.
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetLayerOption
            (
                int layer /** The new layer for this component in its parent part 
                                                     -1 Means use the original layer settings defined in the component's part.
                                                      0 Means use the current work layer
                                                      1-255 Means use the specified layer.
                                         */
            );
            /**Returns  the name of the reference set which represents the entire part. This
                    can be used as a parameter to @link Assemblies::ComponentAssembly::ReplaceReferenceSet Assemblies::ComponentAssembly::ReplaceReferenceSet@endlink .
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString EntirePartRefsetName
            (
            );
            /**Returns  the name of the reference set which represents the empty set. This
                    can be used as a parameter to @link Assemblies::ComponentAssembly::ReplaceReferenceSet Assemblies::ComponentAssembly::ReplaceReferenceSet@endlink .
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString EmptyPartRefsetName
            (
            );
            /**Returns  
                    the name of the reference set used for this component
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString ReferenceSet
            (
            );
            /**
                    Gets the position of a component
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void GetPosition
            (
                NXOpen::Point3d* position /** The origin of this component */,
                NXOpen::Matrix3x3* orientation /** The orientation of this component */
            );
            /**
                    Ensures there is a positioning override on component in the given part of
                    the given parent.  This method does nothing if the component already has a
                    positioning override in the parent, or if any necessary data is unloaded.

                    parent may be NULL, in which case the positioning override will be created
                    in the same part as the component.
                
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void EstablishPositionOverride
            (
                NXOpen::Assemblies::Component * parent /** The parent of the component in which the override is to be created */
            );
            /**
                    Removes the highest level positioning override on component in or below
                    the given parent.  parent may be NULL, in which case the highest level
                    positioning override on component is removed.  This method does nothing
                    if there is no positioning override on the component, or if any necessary
                    data is unloaded.
                
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RemovePositionOverride
            (
                NXOpen::Assemblies::Component * parent /** The parent of the component in or below which the override is to be removed */
            );
            /**
                    Find the highest level parent in which the position of component is
                    overridden.  This will be NULL if the component is not overridden.
                    It will be the root component if the component is overridden in
                    the same part as itself.  It will be NULL if the position of the
                    component is overridden in a parent assembly which is currently
                    unloaded.
                 @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * GetPositionOverrideParent
            (
            );
            /**
                    Gets the type of the highest level positioning override on the component.
                 @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::PositionOverrideType GetPositionOverrideType
            (
            );
            /**Returns 
                    the @link Assemblies::Arrangement Assemblies::Arrangement@endlink  that controls this component's
                    suppression state.  The controlling Arrangement will be defined in a
                    @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink  in the tree above this Component.
                     <br> 
                    Note: In the current release, Arrangements are only used for controlling a
                    component's suppression state. In future releases, further attributes will be
                    controlled via Arrangements.
                     <br> 
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Arrangement * SuppressingArrangement
            (
            );
            /**
                    Changes the Arrangement used for this component. If this is the root component
                    (i.e. it has no parent) then this is equivalent to setting the active arrangement
                    in the owner. (See @link Assemblies::Component::DirectOwner Assemblies::Component::DirectOwner@endlink  and
                    @link Assemblies::ComponentAssembly::SetActiveArrangement Assemblies::ComponentAssembly::SetActiveArrangement@endlink .) For
                    non-root components, this sets the arrangement used for this component in the
                    context of its parent component. Note that this method should only be used for
                    components which have children.
                    
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetUsedArrangement
            (
                NXOpen::Assemblies::Arrangement * newArrangement /** The new @link Assemblies::Arrangement Assemblies::Arrangement@endlink . This Arrangement
                                                                               must be defined in a the ComponentAssembly of this Component's
                                                                               prototype part.
                                                                            */
            );
            /**Returns 
                    the Arrangement used for this component. See @link Assemblies::Component::SetUsedArrangement Assemblies::Component::SetUsedArrangement@endlink 
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Arrangement * UsedArrangement
            (
            );
            /** Set positioning for the selected @link Assemblies::Component Assemblies::Component@endlink s across all possible 
                    @link Assemblies::Arrangement Assemblies::Arrangement@endlink s.  Positioning can be set to either the same in all
                    @link Assemblies::Arrangement Assemblies::Arrangement@endlink s, set_as_varied = FALSE, or individually positioned in each,
                    set_as_varied = TRUE. 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetPositioningVaried
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** The components whose positioning will be altered. */,
                bool setAsVaried /** If FALSE components will have same position in all @link Assemblies::Arrangement Assemblies::Arrangement@endlink s, TRUE allows the position to be varied. */
            );
            /**Returns 
                    the suppressed state of the component in its controlling arrangement. 
                    (See @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink .)
                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool IsSuppressed
            (
            );
            /**
                    Suppresses the component in the ComponentAssembly that contains its controlling Arrangement. 
                    The component will be suppressed in all Arrangements in the ComponentAssembly, not just
                    in the controlling arrangement.
                     <br> This is equivalent to calling: <br> 

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 
                     <br> @link Assemblies::ComponentAssembly::SuppressComponents Assemblies::ComponentAssembly::SuppressComponents@endlink  <br> 

                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Suppress
            (
            );
            /**
                    Suppresses an array of components in the ComponentAssembly that contains their
                    controlling Arrangement.  The component will be suppressed in all Arrangements in
                    the ComponentAssembly.  
                     <br> This is equivalent to calling: <br> 

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 

                     <br> And then calling  <br> 

                     <br> @link Assemblies::ComponentAssembly::SuppressComponents Assemblies::ComponentAssembly::SuppressComponents@endlink  <br> 

                    on the component array. Note that all components should have
                    the same suppressing Arrangement.
                 @return  list of errors encountered during the suppress 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * Suppress
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be suppressed. Each component will be
                                                                                                    suppressed in its controlling arrangement. Note that
                                                                                                    the components must all be underneath the same assembly
                                                                                                */
            );
            /**
                    Unsuppresses the component in the ComponentAssembly that contains its controlling Arrangement. 
                    The component will be unsuppressed in all Arrangements in the ComponentAssembly.
                     <br> This is equivalent to calling: <br> 

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 
                    @link Assemblies::ComponentAssembly::UnsuppressComponents Assemblies::ComponentAssembly::UnsuppressComponents@endlink 

                
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Unsuppress
            (
            );
            /**
                    Unsuppresses an array of components in the ComponentAssembly that contains their
                    controlling Arrangement.  The component will be unsuppressed in all Arrangements in
                    the ComponentAssembly.  This is equivalent to calling:

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 


                     <br> @link Assemblies::ComponentAssembly::UnsuppressComponents Assemblies::ComponentAssembly::UnsuppressComponents@endlink  <br> 

                    on the component array. Note that all components should have
                    the same suppressing Arrangement.

                 @return  list of errors encountered during the unsuppress 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * Unsuppress
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be unsuppressed. Each component will be
                                                                                                    unsuppressed in its controlling arrangement. Note that
                                                                                                    the components must all be underneath the same assembly
                                                                                                */
            );
            /** Update the assembly structure for this assembly in the 
                    context of the displayed part to the specified number of
                    levels, ignoring components already processed by previous
                    calls.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void UpdateStructure
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Component tags to start update structure from */,
                int nLevels /** The number of levels to update. If -1 then all levels are updated.*/
            );
            /** Update the assembly structure for this assembly in the 
                    context of the displayed part to the specified number of
                    levels.
                
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void UpdateStructure
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Component tags to start update structure from */,
                int nLevels /** The number of levels to update. If -1 then all levels are updated.*/,
                bool checkComponentsVisited /** If true, only perform update structure on each component once this session.*/
            );
            /**Returns  the displayable name of the prototype part.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString DisplayName
            (
            );
            /**Returns  the fixed state of this component.  True if there is an unsuppressed
                    @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink  fix constraint on this component
                    and false otherwise.  If the part controlling the position of this
                    component is not loaded then false will be returned.
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool IsFixed
            (
            );
            /**Returns  a fix @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink  of this component.
                    The constraint may be suppressed or NULL.  If the part 
                    controlling the position of this component is not loaded then NULL
                    will be returned.
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ComponentConstraint * FixConstraint
            (
            );
            /** Returns the @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink s directly connected to this component.  If
                    the part containing those constraints is not loaded then no constraints will be 
                    returned.
                 @return  Constraints directly connected to this component 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Positioning::ComponentConstraint *> GetConstraints
            (
            );
            /** Returns the @link DegreesOfFreedom DegreesOfFreedom@endlink  for this component. 
                    Any constraints that reference unloaded data are ignored in the degrees of freedom calculation. An example
                    would be if a constraint was referencing geometry in an unloaded component. When this occurs there may be
                    a greater number of degrees of freedom than if all the data were loaded.
                 @return  The degrees of freedom of this component. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::DegreesOfFreedom GetDegreesOfFreedom
            (
            );
            /** Returns the @link DegreesOfFreedom DegreesOfFreedom@endlink  for this component. 
                    The degrees of freedom are found relative to the components passed in.
                    Those components are regarded as fixed and only constraints directly 
                    connecting this component with those in the array are considered.

                    Note that any directly connected constraints that reference unloaded data
                    are ignored in the degrees of freedom calculation. An example would be if
                    a constraint was referencing geometry in an unloaded component. When this
                    occurs there may be a greater number of degrees of freedom than if all
                    the data were loaded.         
                 @return  The degrees of freedom of this component. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::DegreesOfFreedom GetDegreesOfFreedom
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components relative to which the degrees 
                                                                                                               of freedom will be found.
                                                                                                           */
            );
            /** Recalls the @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink s previously remembered on the part
                    of this component, creating new constraints from them.  The new constraints are
                    incomplete and refer to the component.
                
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RecallConstraints
            (
            );
            /** Recalls the @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink s previously remembered on the part
                    of this component, creating new constraints from them.  The new constraints are
                    incomplete and refer to the component.
                 @return  The constraints created by the recall operation 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Positioning::ComponentConstraint *> RecallAndListConstraints
            (
            );
            /** Remove all the remembered constraints stored on the part of this component.
                
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RemoveRememberedConstraints
            (
            );
            /**
                    Gets the component state as Geometric or Non-Geometric.
                 @return  True if the component is non-geometric, false otherwise 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool GetNonGeometricState
            (
            );
            /**
                    Gets the quantity type of the components. Returns @link Assemblies::ComponentQuantity Assemblies::ComponentQuantity@endlink .
                 @return  Quantity type an enumeration value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::ComponentQuantity GetComponentQuantityType
            (
            );
            /**
                    Gets the value of the integer quantity of component.
                 @return  Integer quantity value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int GetIntegerQuantity
            (
            );
            /**
                    Gets the value of real quantity and corresponding units on this component.
                 @return  Real quantity value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: double GetRealQuantity
            (
                NXString* quantityUnits /** Units */
            );
            /**
                    Gets the as-required quantity on this component.
                 @return  As-Required string "A/R"
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString GetAsRequiredQuantity
            (
            );
            /**
                      Sets an array of components to display using the lightweight representation.
                 @return  list of errors encountered during the display as lightweight 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: NXOpen::ErrorList * DisplayComponentsLightweight
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Array of components to be set to lightweight */
            );
            /**
                    Sets an array of components to display using the exact representation.
                 @return  list of errors encountered during the display as exact 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: NXOpen::ErrorList * DisplayComponentsExact
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Array of componets to be set to exact */
            );
            /**
                   Returns the representation mode for the component's bodies.
                   This mode is dependent on the currently used reference set for the component.
                 @return  The mode for the components display. An enumeration value. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::Component::RepresentationMode GetComponentRepresentationMode
            (
            );
            /** Creates or modifies an attribute with the option to update or not. 
                    NOTE: This method does not support the use of @link NXObject::AttributeTypeReference NXObject::AttributeTypeReference@endlink .
                          Instead, set the type to @link NXObject::AttributeTypeString NXObject::AttributeTypeString@endlink  and specify a ReferenceValue.

                    The following data members of the Info structure are ignored by this method:
                        Alias
                        Inherited
                        Required
                        Unset
                        Locked

                    The following data members of an attribute cannot be edited once the attribute is set:
                        Type 
                        Title
                        TitleAlias
                        Array
                        ArrayElementIndex
                        The dimensionality of the Unit specification (cannot change from mm to microA, but from mm to cm is fine) 

                    The following data members can be set and modified only if the attribute is not associated with a template:
                        Category

                    The following data of an attribute can be set if and only if the attribute is not associated with a template. It cannot be modified once set.
                        Array 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInstanceUserAttribute
            (
                const NXOpen::NXObject::AttributeInformation & info /** info */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies an integer attribute with the option to update or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInstanceUserAttribute
            (
                const NXString & title /** title */ ,
                int index /** index */ ,
                int value /** value */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies an integer attribute with the option to update or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetInstanceUserAttribute
            (
                const char * title /** title */ ,
                int index /** index */ ,
                int value /** value */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies a real attribute with the option to update or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInstanceUserAttribute
            (
                const NXString & title /** title */ ,
                int index /** index */ ,
                double value /** value */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies a real attribute with the option to update or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetInstanceUserAttribute
            (
                const char * title /** title */ ,
                int index /** index */ ,
                double value /** value */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies a string attribute with the option to update or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInstanceUserAttribute
            (
                const NXString & title /** title */ ,
                int index /** index */ ,
                const NXString & value /** value */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies a string attribute with the option to update or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetInstanceUserAttribute
            (
                const char * title /** title */ ,
                int index /** index */ ,
                const char * value /** value */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies a null attribute with the option to update or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInstanceUserAttribute
            (
                const NXString & title /** title */ ,
                int index /** index */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies a null attribute with the option to update or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetInstanceUserAttribute
            (
                const char * title /** title */ ,
                int index /** index */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies a time attribute with the option to update or not. 
                    The time value is assumed to be in the current time zone of the machine running the program. 
                    NX will store the value in UTC. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInstanceTimeUserAttribute
            (
                const NXString & title /** title */ ,
                int index /** index */ ,
                const NXString & value /** The current date and time is used if
                                                    the value is NULL.  See
                                                    @link NXObject::DateAndTimeFormat NXObject::DateAndTimeFormat@endlink 
                                                    for valid formats.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies a time attribute with the option to update or not. 
                    The time value is assumed to be in the current time zone of the machine running the program. 
                    NX will store the value in UTC. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetInstanceTimeUserAttribute
            (
                const char * title /** title */ ,
                int index /** index */ ,
                const char * value /** The current date and time is used if
                                                    the value is NULL.  See
                                                    @link NXObject::DateAndTimeFormat NXObject::DateAndTimeFormat@endlink 
                                                    for valid formats.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies a boolean attribute with the option to update or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInstanceBooleanUserAttribute
            (
                const NXString & title /** title */ ,
                int index /** index */ ,
                bool value /** value */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Creates or modifies a boolean attribute with the option to update or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetInstanceBooleanUserAttribute
            (
                const char * title /** title */ ,
                int index /** index */ ,
                bool value /** value */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Determines if and attribute with the given Title, Type and array Index is present on the object
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    NOTE: This method does not support the use of @link NXObject::AttributeTypeReference NXObject::AttributeTypeReference@endlink .
                          Instead, use @link NXObject::AttributeTypeString NXObject::AttributeTypeString@endlink .  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool HasInstanceUserAttribute
            (
                const NXString & title /** title */ ,
                NXOpen::NXObject::AttributeType type /** type */ ,
                int index /** index */ 
            );
            /** Determines if and attribute with the given Title, Type and array Index is present on the object
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    NOTE: This method does not support the use of @link NXObject::AttributeTypeReference NXObject::AttributeTypeReference@endlink .
                          Instead, use @link NXObject::AttributeTypeString NXObject::AttributeTypeString@endlink .  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            bool HasInstanceUserAttribute
            (
                const char * title /** title */ ,
                NXOpen::NXObject::AttributeType type /** type */ ,
                int index /** index */ 
            );
            /** Gets the first attribute encountered on the object, if any, with a given Title, Type and array Index.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink .
                    The date format set by the Customer Defaults is used for attributes of type time.
                    NOTE: This method does not support the use of @link NXObject::AttributeTypeReference NXObject::AttributeTypeReference@endlink .
                          Instead, use @link NXObject::AttributeTypeString NXObject::AttributeTypeString@endlink .
                          For reference type string attributes, both the ReferenceValue and the calculated StringValue are returned.  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject::AttributeInformation GetInstanceUserAttribute
            (
                const NXString & title /** title */ ,
                NXOpen::NXObject::AttributeType type /** type */ ,
                int index /** index */ 
            );
            /** Gets the first attribute encountered on the object, if any, with a given Title, Type and array Index.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink .
                    The date format set by the Customer Defaults is used for attributes of type time.
                    NOTE: This method does not support the use of @link NXObject::AttributeTypeReference NXObject::AttributeTypeReference@endlink .
                          Instead, use @link NXObject::AttributeTypeString NXObject::AttributeTypeString@endlink .
                          For reference type string attributes, both the ReferenceValue and the calculated StringValue are returned.  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::NXObject::AttributeInformation GetInstanceUserAttribute
            (
                const char * title /** title */ ,
                NXOpen::NXObject::AttributeType type /** type */ ,
                int index /** index */ 
            );
            /** Gets a boolean attribute by Title and array Index.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink .  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetInstanceBooleanUserAttribute
            (
                const NXString & title /** title */ ,
                int index /** index */ 
            );
            /** Gets a boolean attribute by Title and array Index.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink .  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            bool GetInstanceBooleanUserAttribute
            (
                const char * title /** title */ ,
                int index /** index */ 
            );
            /** Gets an integer attribute by Title and array Index.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink .  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int GetInstanceIntegerUserAttribute
            (
                const NXString & title /** title */ ,
                int index /** index */ 
            );
            /** Gets an integer attribute by Title and array Index.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink .  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            int GetInstanceIntegerUserAttribute
            (
                const char * title /** title */ ,
                int index /** index */ 
            );
            /** Gets a real attribute by Title and array Index.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink .  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double GetInstanceRealUserAttribute
            (
                const NXString & title /** title */ ,
                int index /** index */ 
            );
            /** Gets a real attribute by Title and array Index.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink .  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            double GetInstanceRealUserAttribute
            (
                const char * title /** title */ ,
                int index /** index */ 
            );
            /** Gets a string attribute by Title and array Index.
                    For reference type string attributes, the calculated StringValue is returned.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink .
                    Gets a string attribute value by title.  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetInstanceStringUserAttribute
            (
                const NXString & title /** title */ ,
                int index /** index */ 
            );
            /** Gets a string attribute by Title and array Index.
                    For reference type string attributes, the calculated StringValue is returned.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink .
                    Gets a string attribute value by title.  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            NXString GetInstanceStringUserAttribute
            (
                const char * title /** title */ ,
                int index /** index */ 
            );
            /** Gets a time attribute by Title and array Index.
                    The date format set by the Customer Defaults is used.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink . 
                    Gets a time attribute by title.  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetInstanceTimeUserAttribute
            (
                const NXString & title /** title */ ,
                int index /** index */ 
            );
            /** Gets a time attribute by Title and array Index.
                    The date format set by the Customer Defaults is used.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributes NXObject::GetUserAttributes@endlink . 
                    Gets a time attribute by title.  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            NXString GetInstanceTimeUserAttribute
            (
                const char * title /** title */ ,
                int index /** index */ 
            );
            /** Gets all the attributes that have been set on the given object.
                    The elements of array attributes are returned individually in order of increasing indices. 
                    The returned Title of an array element is the array title (without index). The Index data member holds the index.
                    The date format set by the Customer Defaults is used.
                    Reference type attributes are returned as being of type @link NXObject::AttributeTypeString NXObject::AttributeTypeString@endlink ,
                    and both the ReferenceValue and the calculated StringValue are returned.  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::NXObject::AttributeInformation> GetInstanceUserAttributes
            (
            );
            /** Gets all the attributes that have been set on the given object, 
                    as well as information from attribute templates that have not been set (if 'IncludeUnset' is 'true').
                    The elements of array attributes are returned individually in order of increasing indices. 
                    The returned Title of an array element is the array title (without index). The Index data member holds the index.
                    The date format set by the Customer Defaults is used.
                    Reference type attributes are returnes as being of type @link NXObject::AttributeTypeString NXObject::AttributeTypeString@endlink ,
                    and both the ReferenceValue and the calculated StringValue are returned.  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::NXObject::AttributeInformation> GetInstanceUserAttributes
            (
                bool includeUnset /** includeunset */ 
            );
            /** Gets the first attribute encountered on the object, if any, with a given title, type and array index.
                    The value of the attribute is converted to and returned as a string.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributesAsStrings NXObject::GetUserAttributesAsStrings@endlink .
                    The date format set by the Customer Defaults is used for attributes of type time.
                    NOTE: This method does not support the use of @link NXObject::AttributeTypeReference NXObject::AttributeTypeReference@endlink .
                          Instead, use @link NXObject::AttributeTypeString NXObject::AttributeTypeString@endlink .
                          For reference type string attributes, the calculated StringValue is returned.  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetInstanceUserAttributeAsString
            (
                const NXString & title /** title */ ,
                NXOpen::NXObject::AttributeType type /** type */ ,
                int index /** index */ 
            );
            /** Gets the first attribute encountered on the object, if any, with a given title, type and array index.
                    The value of the attribute is converted to and returned as a string.
                    If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                    The first element of an array has Index 0 (zero).
                    To get all the array elements of an array, please use @link NXObject::GetUserAttributesAsStrings NXObject::GetUserAttributesAsStrings@endlink .
                    The date format set by the Customer Defaults is used for attributes of type time.
                    NOTE: This method does not support the use of @link NXObject::AttributeTypeReference NXObject::AttributeTypeReference@endlink .
                          Instead, use @link NXObject::AttributeTypeString NXObject::AttributeTypeString@endlink .
                          For reference type string attributes, the calculated StringValue is returned.  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            NXString GetInstanceUserAttributeAsString
            (
                const char * title /** title */ ,
                NXOpen::NXObject::AttributeType type /** type */ ,
                int index /** index */ 
            );
            /** Gets all the attributes that have been set on the given object.
                    The values are returned as strings.
                    The elements of array attributes are returned individually in order of increasing indices. 
                    The returned Title of an array element is the array title (without index). The Index data member holds the index.
                    This method does not support the use of @link NXObject::AttributeTypeReference NXObject::AttributeTypeReference@endlink .
                    Reference type attributes return the calculated StringValue.
                    The date format set by the Customer Defaults is used.  @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetInstanceUserAttributesAsStrings
            (
            );
            /** Deletes the first attribute encountered with the given Type, Title and Index.
                    If a candidate attribute is not an array attribute, the DeleteEntireArray input is ignored,
                    otherwise the last element of the array is deleted.
                    NOTE: This method does not support the use of @link NXObject::AttributeTypeReference NXObject::AttributeTypeReference@endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteInstanceUserAttribute
            (
                NXOpen::NXObject::AttributeType type /** type */ ,
                const NXString & title /** title */ ,
                bool deleteEntireArray /** delete entire array */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Deletes the first attribute encountered with the given Type, Title and Index.
                    If a candidate attribute is not an array attribute, the DeleteEntireArray input is ignored,
                    otherwise the last element of the array is deleted.
                    NOTE: This method does not support the use of @link NXObject::AttributeTypeReference NXObject::AttributeTypeReference@endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void DeleteInstanceUserAttribute
            (
                NXOpen::NXObject::AttributeType type /** type */ ,
                const char * title /** title */ ,
                bool deleteEntireArray /** delete entire array */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Deletes the attributes encountered with the given Type with option to update or not.
                    NOTE: This method does not support the use of @link NXObject::AttributeTypeReference NXObject::AttributeTypeReference@endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteInstanceUserAttributes
            (
                NXOpen::NXObject::AttributeType type /** type */ ,
                NXOpen::Update::Option option /** option */ 
            );
            /** Lock or unlock the given attribute.
                    For array attributes, the Title should be set to the array title, without the appended index.
                    Individual array elements cannot be separately locked 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInstanceUserAttributeLock
            (
                const NXString & title /** title */ ,
                NXOpen::NXObject::AttributeType type /** type */ ,
                bool lock /** lock */ 
            );
            /** Lock or unlock the given attribute.
                    For array attributes, the Title should be set to the array title, without the appended index.
                    Individual array elements cannot be separately locked 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetInstanceUserAttributeLock
            (
                const char * title /** title */ ,
                NXOpen::NXObject::AttributeType type /** type */ ,
                bool lock /** lock */ 
            );
            /** Determine the lock of the given attribute.
                    For array attributes, the Title should be set to the array title, without the appended index.
                    Individual array elements cannot be separately locked  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetInstanceUserAttributeLock
            (
                const NXString & title /** title */ ,
                NXOpen::NXObject::AttributeType type /** type */ 
            );
            /** Determine the lock of the given attribute.
                    For array attributes, the Title should be set to the array title, without the appended index.
                    Individual array elements cannot be separately locked  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            bool GetInstanceUserAttributeLock
            (
                const char * title /** title */ ,
                NXOpen::NXObject::AttributeType type /** type */ 
            );
            /**Returns  the @link Assemblies::Subset Assemblies::Subset@endlink  that corresponds to this component.
                    This can be NULL if the component is not a subset. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::Subset * Subset
            (
            );
            /**Returns  the collaborative content type of this component.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::CollaborativeContentType CollaborativeContentType
            (
            );
            /**Returns  the @link PDM::DesignElementRevision PDM::DesignElementRevision@endlink  that corresponds to this component.
                    This can be NULL if the component is not a design element.
                    This will return parent reuse design element revision if this component represent a @link DesignSubordinateRevision DesignSubordinateRevision@endlink  .
                 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::DesignElementRevision * DesignElementRevision
            (
            );
            /**Returns  the @link PDM::DesignSubordinateRevision PDM::DesignSubordinateRevision@endlink  that corresponds to this component.
                    This can be NULL if the component is not a subordinate design element.
                 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::DesignSubordinateRevision * DesignSubordinateRevision
            (
            );
            /** Get all of the characteristics values on the this object.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual NXOpen::Routing::CharacteristicList * GetCharacteristics
            (
            );
            /** Set all of the characteristics values on this object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /** Get the value of an integer characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual int GetIntegerCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get the value of an integer characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            int GetIntegerCharacteristic
            (
                const char * name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** value */ 
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetCharacteristic
            (
                const char * name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** value */ 
            );
            /** Get the value of a real characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual double GetRealCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get the value of a real characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            double GetRealCharacteristic
            (
                const char * name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** value */ 
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetCharacteristic
            (
                const char * name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** value */ 
            );
            /** Get the value of a string characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual NXString GetStringCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get the value of a string characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            NXString GetStringCharacteristic
            (
                const char * name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetCharacteristic
            (
                const char * name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes the input list of characteristics from this object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void DeleteCharacterstics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /**   Returns the destination characteristics from the input object.
                          Retrieves the description of which destination characteristics to read
                          from the application view and then reads those destination 
                          characteristics from the object
                          <ul>
                              <li>Ports: Reads characteristics from the port.</li>
                              <li>RCPs: Attempts to find a port at the RCP, reads characteristics from
                                          the port if it exists, otherwise reads from the
                                          stock associated with the rcp.</li>
                              <li>Segments: Reads characteristics from the stock associated with the segment.</li>
                              <li>Components: Reads characteristics directly from the component.</li>
                              <li>Stock: Reads characteristics from the stock or from the stock's data.</li>
                          </ul>
                     @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual NXOpen::Routing::CharacteristicList * GetDestinationCharacteristics
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
