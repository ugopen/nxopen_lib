#ifndef NXOpen_CAM_INSPECTIONMETHODBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONMETHODBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionMethodBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_MethodBuilder.hxx>
#include <NXOpen/CAM_InspectionMethodBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionMethodBuilder;
    }
    namespace CAM
    {
        class MethodBuilder;
    }
    class NXColor;
    namespace CAM
    {
        class _InspectionMethodBuilderBuilder;
        class InspectionMethodBuilderImpl;
        /** Represents the builder for a CMM Inspection method.  <br> To create a new instance of this class, use @link CAM::InspectionGroupCollection::CreateInspectionMethodBuilder  CAM::InspectionGroupCollection::CreateInspectionMethodBuilder @endlink  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionMethodBuilder : public CAM::MethodBuilder
        {
            /** CMM Inspection modes. */
            public: enum InspectionModes
            {
                InspectionModesProgramDefault/** Program Default */,
                InspectionModesProgram/** Program */,
                InspectionModesManual/** Manual */,
                InspectionModesAuto/** Auto */
            };

            /** CMM Inspection operation types. */
            public: enum OperationTypes
            {
                OperationTypesNone/** None */,
                OperationTypesManualPoint/** Measured Point */,
                OperationTypesUVGrid/** Point Set (Rectangular UV Grid) */,
                OperationTypesPointHelix/** Point Helix */,
                OperationTypesLineScan/** Scan Line */,
                OperationTypesCircularScan/** Scan Arc */,
                OperationTypesCurveScan/** Scan Curve */,
                OperationTypesHelicalScan/** Scan Helix */,
                OperationTypesCurveScan5axis/** 5-axis Scan Curve */,
                OperationTypesLinearSafeMoveToPoint/** Linear Safe Move To Point */,
                OperationTypesDeltaMove/** Delta Move */,
                OperationTypesLinear5axisMoveToPoint/** Linear 5-axis Move To Point */
            };

            /** CMM Inspection transition modes. */
            public: enum TransitionTypes
            {
                TransitionTypesNone/** No Transition Point */,
                TransitionTypesManual/** Manual Transition Point */,
                TransitionTypesSafePlane/** Safe Plane Transition Point */
            };

            /** CMM Inspection method feature type. */
            public: enum MethodTypes
            {
                MethodTypesNone/** None */,
                MethodTypesArc/** Arc */,
                MethodTypesCircle/** Circle */,
                MethodTypesPoint/** Point */,
                MethodTypesSphere/** Sphere */,
                MethodTypesSurface/** Surface */,
                MethodTypesPattern/** Pattern */,
                MethodTypesCurve/** Curve */,
                MethodTypesCylinder/** Cylinder */,
                MethodTypesCone/** Cone */,
                MethodTypesPlane/** Plane */,
                MethodTypesLine/** Line */,
                MethodTypesCParln/** Bounded Slot Tab */,
                MethodTypesSlotTab/** Slot Tab */,
                MethodTypesSurfaceOfRevolution/** Surface of Revolution */,
                MethodTypesTorus/** Torus */
            };

            /** the UV modes */
            public: enum UVModeTypes
            {
                UVModeTypesPercentage/** Percentage */,
                UVModeTypesDistance/** Distance from start and end in part units */,
                UVModeTypesFull/** Full circumference */,
                UVModeTypesDegrees/** Angle from start and end */,
                UVModeTypesSweep/** Start angle and sweep angle */
            };

            /** the point sequence modes */
            public: enum PointSequenceModeTypes
            {
                PointSequenceModeTypesZig/** Zig only */,
                PointSequenceModeTypesZigZag/** Zig and Zag */,
                PointSequenceModeTypesNearest/** Nearest point */
            };

            /** the point sequence start location */
            public: enum PointSequenceStartTypes
            {
                PointSequenceStartTypesUminVmin/** Umin - Vmin */,
                PointSequenceStartTypesUminVmax/** Umin - Vmax */,
                PointSequenceStartTypesUmaxVmin/** Umax - Vmin */,
                PointSequenceStartTypesUmaxVmax/** Umax - Vmax */
            };

            /** the point sequence start direction */
            public: enum PointSequenceDirectionTypes
            {
                PointSequenceDirectionTypesU/** Order by U */,
                PointSequenceDirectionTypesV/** Order by V */
            };

            /** the scan curve mode */
            public: enum ScanCurveModeTypes
            {
                ScanCurveModeTypesExistingCurve/** Use existing curve */,
                ScanCurveModeTypesAutoCurve/** Autogenerate curves */,
                ScanCurveModeTypesOffsetCurve/** Offset curve */
            };

            /** the scan mode 3-axis, 5-axis type */
            public: enum ScanModeTypes
            {
                ScanModeTypesMode3axis/** 3-axis mode */,
                ScanModeTypesMode5axis/** 5-axis mode */
            };

            /** the helix turn type */
            public: enum ScanHelixTurnTypes
            {
                ScanHelixTurnTypesPitch/** Pitch */,
                ScanHelixTurnTypesSweepAngle/** Sweep Angle */,
                ScanHelixTurnTypesRevolutions/** Revolutions */
            };

            /** the helix turn direction type */
            public: enum ScanHelixTurnDirectionTypes
            {
                ScanHelixTurnDirectionTypesRight/** Right hand turn */,
                ScanHelixTurnDirectionTypesLeft/** Left hand turn */
            };

            /** the analysis datum plane fitting type */
            public: enum DatumPlaneFittingTypes
            {
                DatumPlaneFittingTypesLeastSquares/** Least Squares */,
                DatumPlaneFittingTypesHighPoint/** High Point */
            };

            /** the analysis limits of size fitting type */
            public: enum LimitsOfSizeTypes
            {
                LimitsOfSizeTypesAverage/** Average */,
                LimitsOfSizeTypesFunctional/** Functional */,
                LimitsOfSizeTypesTwoPoint/** Two Point */
            };

            /** the analysis axis extrapolation type */
            public: enum AxisExtrapolationTypes
            {
                AxisExtrapolationTypesOn/** Extrapolate */,
                AxisExtrapolationTypesOff/** Do not extrapolate */
            };

            /** the analysis cylinder/circle fitting type */
            public: enum CylinderFittingTypes
            {
                CylinderFittingTypesLeastSquares/** Least Squares */,
                CylinderFittingTypesMinimumDeviation/** Minimum Deviation */,
                CylinderFittingTypesCrossSectionCenters/** Cross Section Centers */,
                CylinderFittingTypesExternalFunction/** External Function */
            };

            /** the analysis surface profile fitting type */
            public: enum SurfaceProfileTypes
            {
                SurfaceProfileTypesMinimumDeviationNormal/** Minimum Deviation - Normal */,
                SurfaceProfileTypesMinimumDeviation3D/** Minimum Deviation - 3D */,
                SurfaceProfileTypesLeastSquaresNormal/** Least Squares - Normal */,
                SurfaceProfileTypesLeastSquares3D/** Least Squares - 3D */
            };

            /** the analysis profile disposition fitting type */
            public: enum ProfileDispositionTypes
            {
                ProfileDispositionTypesStandard/** Standard */,
                ProfileDispositionTypesUpper/** Upper */,
                ProfileDispositionTypesLower/** Lower */
            };

            /** the tolerance degree of freedom mode */
            public: enum ToleranceDegreeOfFreedomMode
            {
                ToleranceDegreeOfFreedomModeTolerance/** From Tolerance Definition */,
                ToleranceDegreeOfFreedomModeOn/** On */,
                ToleranceDegreeOfFreedomModeOff/** Off */,
                ToleranceDegreeOfFreedomModeLimits/** Use Limits */
            };

            private: InspectionMethodBuilderImpl * m_inspectionmethodbuilder_impl;
            private: friend class  _InspectionMethodBuilderBuilder;
            protected: InspectionMethodBuilder();
            public: ~InspectionMethodBuilder();
            /**Returns  the method feature type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::MethodTypes MethodType
            (
            );
            /**Sets  the method feature type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMethodType
            (
                NXOpen::CAM::InspectionMethodBuilder::MethodTypes type /** type */ 
            );
            /**Returns  the number of path points 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int PointCount
            (
            );
            /**Sets  the number of path points 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointCount
            (
                int pointCount /** pointcount */ 
            );
            /**Returns  the number of points in U direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int UCount
            (
            );
            /**Sets  the number of points in U direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUCount
            (
                int uCount /** ucount */ 
            );
            /**Returns  the number of points in V direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int VCount
            (
            );
            /**Sets  the number of points in V direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVCount
            (
                int vCount /** vcount */ 
            );
            /**Returns  the U start parameter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double UStart
            (
            );
            /**Sets  the U start parameter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUStart
            (
                double uStart /** ustart */ 
            );
            /**Returns  the U end parameter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double UEnd
            (
            );
            /**Sets  the U end parameter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUEnd
            (
                double uEnd /** uend */ 
            );
            /**Returns  the V start parameter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double VStart
            (
            );
            /**Sets  the V start parameter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVStart
            (
                double vStart /** vstart */ 
            );
            /**Returns  the V end parameter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double VEnd
            (
            );
            /**Sets  the V end parameter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVEnd
            (
                double vEnd /** vend */ 
            );
            /**Returns  the U start distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double UStartDist
            (
            );
            /**Sets  the U start distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUStartDist
            (
                double uStart /** ustart */ 
            );
            /**Returns  the U end distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double UEndDist
            (
            );
            /**Sets  the U end distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUEndDist
            (
                double uEnd /** uend */ 
            );
            /**Returns  the V start distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double VStartDist
            (
            );
            /**Sets  the V start distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVStartDist
            (
                double vStart /** vstart */ 
            );
            /**Returns  the V end distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double VEndDist
            (
            );
            /**Sets  the V end distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVEndDist
            (
                double vEnd /** vend */ 
            );
            /**Returns  the U start degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double UStartDeg
            (
            );
            /**Sets  the U start degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUStartDeg
            (
                double uStart /** ustart */ 
            );
            /**Returns  the U end degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double UEndDeg
            (
            );
            /**Sets  the U end degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUEndDeg
            (
                double uEnd /** uend */ 
            );
            /**Returns  the V start degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double VStartDeg
            (
            );
            /**Sets  the V start degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVStartDeg
            (
                double vStart /** vstart */ 
            );
            /**Returns  the V end degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double VEndDeg
            (
            );
            /**Sets  the V end degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVEndDeg
            (
                double vEnd /** vend */ 
            );
            /**Returns  the U start sweep degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double UStartSweep
            (
            );
            /**Sets  the U start sweep degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUStartSweep
            (
                double uStart /** ustart */ 
            );
            /**Returns  the U sweep degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double UEndSweep
            (
            );
            /**Sets  the U sweep degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUEndSweep
            (
                double uEnd /** uend */ 
            );
            /**Returns  the V start sweep degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double VStartSweep
            (
            );
            /**Sets  the V start sweep degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVStartSweep
            (
                double vStart /** vstart */ 
            );
            /**Returns  the V sweep degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double VEndSweep
            (
            );
            /**Sets  the V sweep degrees 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVEndSweep
            (
                double vEnd /** vend */ 
            );
            /**Returns  the start U mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes UStartMode
            (
            );
            /**Sets  the start U mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUStartMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the end U mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes UEndMode
            (
            );
            /**Sets  the end U mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUEndMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the start V mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes VStartMode
            (
            );
            /**Sets  the start V mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVStartMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the end V mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes VEndMode
            (
            );
            /**Sets  the end V mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVEndMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the approach distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double ApproachDistance
            (
            );
            /**Sets  the approach distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetApproachDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the retract distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double RetractDistance
            (
            );
            /**Sets  the retract distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRetractDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the default inspection mode 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::InspectionModes InspectionMode
            (
            );
            /**Sets  the default inspection mode 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetInspectionMode
            (
                NXOpen::CAM::InspectionMethodBuilder::InspectionModes inspectionMode /** inspectionmode */ 
            );
            /**Returns  the default inspection operation type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::OperationTypes DefaultOperationType
            (
            );
            /**Sets  the default inspection operation type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDefaultOperationType
            (
                NXOpen::CAM::InspectionMethodBuilder::OperationTypes operationType /** operationtype */ 
            );
            /**Returns  the type of entry transition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::TransitionTypes EntryTransition
            (
            );
            /**Sets  the type of entry transition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEntryTransition
            (
                NXOpen::CAM::InspectionMethodBuilder::TransitionTypes entryTransition /** entrytransition */ 
            );
            /**Returns  a flag to indicate if an entry point is required 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool EntryPoint
            (
            );
            /**Sets  a flag to indicate if an entry point is required 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEntryPoint
            (
                bool entryPoint /** entrypoint */ 
            );
            /**Returns  a flag to indicate if collision avoidance is required at entry 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool EntryAvoidance
            (
            );
            /**Sets  a flag to indicate if collision avoidance is required at entry 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEntryAvoidance
            (
                bool entryAvoidance /** entryavoidance */ 
            );
            /**Returns  the distance from the entry or exit point to safe plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double EntryExitDistance
            (
            );
            /**Sets  the distance from the entry or exit point to safe plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEntryExitDistance
            (
                double entryExitDistance /** entryexitdistance */ 
            );
            /**Returns  a flag to indicate if collision avoidance is required at exit 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool ExitAvoidance
            (
            );
            /**Sets  a flag to indicate if collision avoidance is required at exit 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExitAvoidance
            (
                bool exitAvoidance /** exitavoidance */ 
            );
            /**Returns  a flag to indicate if an exit point is required 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool ExitPoint
            (
            );
            /**Sets  a flag to indicate if an exit point is required 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExitPoint
            (
                bool exitPoint /** exitpoint */ 
            );
            /**Returns  the type of exit transition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::TransitionTypes ExitTransition
            (
            );
            /**Sets  the type of exit transition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExitTransition
            (
                NXOpen::CAM::InspectionMethodBuilder::TransitionTypes exitTransition /** exittransition */ 
            );
            /**Returns  the default animation speed setting 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int Speed
            (
            );
            /**Sets  the default animation speed setting 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSpeed
            (
                int speed /** speed */ 
            );
            /**Returns  the color used for displaying transition elements 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ColorTransition
            (
            );
            /**Sets  the color used for displaying transition elements 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorTransition
            (
                NXOpen::NXColor * colorTransition /** colortransition */ 
            );
            /**Returns  the color used for displaying approach elements 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ColorApproach
            (
            );
            /**Sets  the color used for displaying approach elements 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorApproach
            (
                NXOpen::NXColor * colorApproach /** colorapproach */ 
            );
            /**Returns  the color used for displaying retract elements 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ColorRetract
            (
            );
            /**Sets  the color used for displaying retract elements 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorRetract
            (
                NXOpen::NXColor * colorRetract /** colorretract */ 
            );
            /**Returns  the color used for displaying entry and exit elements 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ColorEntryExit
            (
            );
            /**Sets  the color used for displaying entry and exit elements 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorEntryExit
            (
                NXOpen::NXColor * colorEntryExit /** colorentryexit */ 
            );
            /**Returns  the color used for displaying measured points 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ColorMeasurePoint
            (
            );
            /**Sets  the color used for displaying measured points 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorMeasurePoint
            (
                NXOpen::NXColor * colorMeasurePoint /** colormeasurepoint */ 
            );
            /**Returns  the color used for displaying path lines 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ColorLine
            (
            );
            /**Sets  the color used for displaying path lines 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorLine
            (
                NXOpen::NXColor * colorLine /** colorline */ 
            );
            /**Returns  a flag to indicate if manual point creation is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool ManualPoint
            (
            );
            /**Sets  a flag to indicate if manual point creation is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetManualPoint
            (
                bool manualPoint /** manualpoint */ 
            );
            /**Returns  a flag to indicate if rectangular UV grid is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool UVGrid
            (
            );
            /**Sets  a flag to indicate if rectangular UV grid is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUVGrid
            (
                bool uvGrid /** uvgrid */ 
            );
            /**Returns  a flag to indicate if point helix is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool PointHelix
            (
            );
            /**Sets  a flag to indicate if point helix is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointHelix
            (
                bool pointHelix /** pointhelix */ 
            );
            /**Returns  a flag to indicate if scan line is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool LineScan
            (
            );
            /**Sets  a flag to indicate if scan line is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLineScan
            (
                bool lineScan /** linescan */ 
            );
            /**Returns  a flag to indicate if scan arc is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool CircularScan
            (
            );
            /**Sets  a flag to indicate if scan arc is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCircularScan
            (
                bool circularScan /** circularscan */ 
            );
            /**Returns  a flag to indicate if scan curve is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool CurveScan
            (
            );
            /**Sets  a flag to indicate if scan curve is allowed 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCurveScan
            (
                bool curveScan /** curvescan */ 
            );
            /**Returns  the point sequence mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PointSequenceModeTypes PointSequenceMode
            (
            );
            /**Sets  the point sequence mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequenceMode
            (
                NXOpen::CAM::InspectionMethodBuilder::PointSequenceModeTypes ptSeqMode /** ptseqmode */ 
            );
            /**Returns  the point sequence start location 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PointSequenceStartTypes PointSequenceStart
            (
            );
            /**Sets  the point sequence start location 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequenceStart
            (
                NXOpen::CAM::InspectionMethodBuilder::PointSequenceStartTypes ptSeqStart /** ptseqstart */ 
            );
            /**Returns  the point sequence start direction 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PointSequenceDirectionTypes PointSequenceDirection
            (
            );
            /**Sets  the point sequence start direction 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequenceDirection
            (
                NXOpen::CAM::InspectionMethodBuilder::PointSequenceDirectionTypes ptSeqDir /** ptseqdir */ 
            );
            /**Returns  the scan curve mode 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ScanCurveModeTypes ScanCurveMode
            (
            );
            /**Sets  the scan curve mode 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetScanCurveMode
            (
                NXOpen::CAM::InspectionMethodBuilder::ScanCurveModeTypes mode /** mode */ 
            );
            /**Returns  the minimum number of scan points 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int NbScanPoints
            (
            );
            /**Sets  the minimum number of scan points 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNbScanPoints
            (
                int count /** count */ 
            );
            /**Returns  the minimum spacing between scan points 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double MinSpacing
            (
            );
            /**Sets  the minimum spacing between scan points 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMinSpacing
            (
                double minSpacing /** minspacing */ 
            );
            /**Returns  the maximum spacing between scan points 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double MaxSpacing
            (
            );
            /**Sets  the maximum spacing between scan points 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMaxSpacing
            (
                double maxSpacing /** maxspacing */ 
            );
            /**Returns  the curvature increase factor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double CurvatureFactor
            (
            );
            /**Sets  the curvature increase factor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCurvatureFactor
            (
                double curvatureFactor /** curvaturefactor */ 
            );
            /**Returns  the offset distance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double OffsetDistance
            (
            );
            /**Sets  the offset distance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetOffsetDistance
            (
                double offsetDistance /** offsetdistance */ 
            );
            /**Returns  the scan start end mode 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes StartEndMode
            (
            );
            /**Sets  the scan start end mode 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartEndMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes startEndMode /** startendmode */ 
            );
            /**Returns  the start point offset distance along the scan 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double StartDistance
            (
            );
            /**Sets  the start point offset distance along the scan 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartDistance
            (
                double startDistance /** startdistance */ 
            );
            /**Returns  the end point offset distance along the scan 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double EndDistance
            (
            );
            /**Sets  the end point offset distance along the scan 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEndDistance
            (
                double endDistance /** enddistance */ 
            );
            /**Returns  the start percentage along the scan 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double StartPercentage
            (
            );
            /**Sets  the start percentage along the scan 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartPercentage
            (
                double startPercentage /** startpercentage */ 
            );
            /**Returns  the end Percentage along the scan 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double EndPercentage
            (
            );
            /**Sets  the end Percentage along the scan 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEndPercentage
            (
                double endPercentage /** endpercentage */ 
            );
            /**Returns  the tilt angle (degrees) 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double TiltAngle
            (
            );
            /**Sets  the tilt angle (degrees) 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTiltAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the advance angle (degrees) 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double AdvanceAngle
            (
            );
            /**Sets  the advance angle (degrees) 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAdvanceAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the scan step size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double StepSize
            (
            );
            /**Sets  the scan step size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStepSize
            (
                double step /** step */ 
            );
            /**Returns  the scan stop radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double StopRadius
            (
            );
            /**Sets  the scan stop radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStopRadius
            (
                double radius /** radius */ 
            );
            /**Returns  the scan speed 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ScanSpeed
            (
            );
            /**Sets  the scan speed 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetScanSpeed
            (
                double speed /** speed */ 
            );
            /**Returns  the scan force 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ScanForce
            (
            );
            /**Sets  the scan force 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetScanForce
            (
                double force /** force */ 
            );
            /**Returns  the 3,5 axis scan mode type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ScanModeTypes ScanModeType
            (
            );
            /**Sets  the 3,5 axis scan mode type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetScanModeType
            (
                NXOpen::CAM::InspectionMethodBuilder::ScanModeTypes modeType /** modetype */ 
            );
            /**Returns  the turn type of the Scan Helix 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ScanHelixTurnTypes TurnType
            (
            );
            /**Sets  the turn type of the Scan Helix 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTurnType
            (
                NXOpen::CAM::InspectionMethodBuilder::ScanHelixTurnTypes turnType /** turntype */ 
            );
            /**Returns  the turn direction type of the Scan Helix 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ScanHelixTurnDirectionTypes TurnDirection
            (
            );
            /**Sets  the turn direction type of the Scan Helix 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTurnDirection
            (
                NXOpen::CAM::InspectionMethodBuilder::ScanHelixTurnDirectionTypes turnDirection /** turndirection */ 
            );
            /**Returns  the pitch of the Scan Helix 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double Pitch
            (
            );
            /**Sets  the pitch of the Scan Helix 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPitch
            (
                double pitch /** pitch */ 
            );
            /**Returns  the sweep of the Scan Helix 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double Sweep
            (
            );
            /**Sets  the sweep of the Scan Helix 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSweep
            (
                double sweep /** sweep */ 
            );
            /**Returns  the revolutions of the Scan Helix 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double Revolutions
            (
            );
            /**Sets  the revolutions of the Scan Helix 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRevolutions
            (
                double revolutions /** revolutions */ 
            );
            /**Returns  the analysis datum plane fitting mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::DatumPlaneFittingTypes DatumPlaneFittingMode
            (
            );
            /**Sets  the analysis datum plane fitting mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDatumPlaneFittingMode
            (
                NXOpen::CAM::InspectionMethodBuilder::DatumPlaneFittingTypes mode /** mode */ 
            );
            /**Returns  the analysis axis extrapolation mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::AxisExtrapolationTypes AxisExtrapolationMode
            (
            );
            /**Sets  the analysis axis extrapolation mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAxisExtrapolationMode
            (
                NXOpen::CAM::InspectionMethodBuilder::AxisExtrapolationTypes mode /** mode */ 
            );
            /**Returns  the analysis limits of size fitting mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::LimitsOfSizeTypes LimitsOfSizeMode
            (
            );
            /**Sets  the analysis limits of size fitting mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLimitsOfSizeMode
            (
                NXOpen::CAM::InspectionMethodBuilder::LimitsOfSizeTypes mode /** mode */ 
            );
            /**Returns  the analysis cylinder/circle fitting mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::CylinderFittingTypes CylinderCircleFitMode
            (
            );
            /**Sets  the analysis cylinder/circle fitting mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCylinderCircleFitMode
            (
                NXOpen::CAM::InspectionMethodBuilder::CylinderFittingTypes mode /** mode */ 
            );
            /**Returns  the analysis surface profile fitting mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::SurfaceProfileTypes SurfaceProfileMode
            (
            );
            /**Sets  the analysis surface profile fitting mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSurfaceProfileMode
            (
                NXOpen::CAM::InspectionMethodBuilder::SurfaceProfileTypes mode /** mode */ 
            );
            /**Returns  the analysis profile disposition fitting mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ProfileDispositionTypes ProfileDispositionMode
            (
            );
            /**Sets  the analysis profile disposition fitting mode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetProfileDispositionMode
            (
                NXOpen::CAM::InspectionMethodBuilder::ProfileDispositionTypes mode /** mode */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
