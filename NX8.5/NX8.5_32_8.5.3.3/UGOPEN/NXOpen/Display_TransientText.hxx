#ifndef NXOpen_DISPLAY_TRANSIENTTEXT_HXX_INCLUDED
#define NXOpen_DISPLAY_TRANSIENTTEXT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_TransientText.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_display_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Display
    {
        class TransientText;
    }
    class DisplayableObject;
    class View;
    namespace Display
    {
    }
    namespace Display
    {
        class TransientTextImpl;
        /** Represents temporary text strings which can be used for Temporary Display 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_DISPLAYEXPORT  TransientText : public TransientObject
        {
            /**  the view or views in which the transient text is to be displayed.  Note that this
                         property is only used when the view property is other than NULL. */
            public: enum ViewType
            {
                ViewTypeWorkViewOnly/** work view only */ ,
                ViewTypeAllActiveViews/** all active views */ ,
                ViewTypeViewOfLastCursor/** view of last cursor */ ,
                ViewTypeAllViewsButDrawing/** all views but drawing */ ,
                ViewTypeAllActiveMemberViews/** all active member views */ ,
                ViewTypeFirstViewFound/** first view found */ 
            };

            /** This enumerated type specifies the type of reference point used in the text box
                        for standard_text methods. */
            public: enum StandardTextRef
            {
                StandardTextRefSystemDefault/** Display the text using the system
                                                                                             default reference point position */,
                StandardTextRefBaselineStart = 0/** Display the text starting on the
                                                                                             baseline, at the left end of the
                                                                                             text box for left-to-right text,
                                                                                             or at the right end of the text box
                                                                                             for right-to-left text */,
                StandardTextRefBaselineCenter/** Display the text with the given position
                                                                                          in the horizontal center of the text box
                                                                                          at the baseline */,
                StandardTextRefBaselineEnd/** Display the text starting on the baseline,
                                                                                        at the right end of the text box
                                                                                        for left-to-right text,
                                                                                        or at the left end of the text box
                                                                                        for right-to-left text */,
                StandardTextRefTopLeft/** Display the text with the given position
                                                                                        in the top left of the text box */,
                StandardTextRefTopCenter/** Display the text with the given position
                                                                                        in the top center of the text box */,
                StandardTextRefTopRight/** Display the text with the given position
                                                                                        in the top right of the text box */,
                StandardTextRefMiddleLeft/** Display the text with the given position
                                                                                        in the middle left of the text box */,
                StandardTextRefMiddleCenter/** Display the text with the given position
                                                                                        in middle center of text box */,
                StandardTextRefMiddleRight/** Display the text with the given position
                                                                                        in middle right of text box */,
                StandardTextRefBottomLeft/** Display the text with the given position
                                                                                        in bottom left of text box */,
                StandardTextRefBottomCenter/** Display the text with the given position
                                                                                        in bottom center of text box */,
                StandardTextRefBottomRight/** Display the text with the given position
                                                                                        in bottom right of text box */
            };

            /**  Provides a way to specify the size of the desired text, as small,
                         medium or large (normal is a synonym for medium). */
            public: enum TextSize
            {
                TextSizeSmall/** small */ ,
                TextSizeNormal/** normal */ ,
                TextSizeMedium = 1/** medium */ ,
                TextSizeLarge/** large */ ,
                TextSizeNumSizes/** num sizes */ 
            };

            private: TransientTextImpl * m_transienttext_impl;
            /// \cond NX_NO_DOC 
            public: explicit TransientText(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~TransientText();
            /** Displays text as temporary display using absolute geometry. Insure that
                        you have set all needed properties before using this method.  Note that
                        the text will be displayed on the Absolute XY plane. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayTemporaryAbsoluteGeometry
            (
                int fontIndex /** The index of the font to be used.  This may
                                                                           be 0, which means to use the default font. */,
                NXOpen::View * view /** The view in which to display the text.
                                                                           This may be NULL, in which case the
                                                                           viewType argument is used. */,
                NXOpen::Display::TransientText::ViewType viewType /** Used only when view is NULL. */,
                NXOpen::DisplayableObject * object /** May be NULL, in which case the
                                                                                 text will be drawn at the given position.
                                                                                 If not NULL, draw the text at the
                                                                                 attention point of object. */,
                const NXOpen::Point3d & position /** In Absolute Coordinates */
            );
            /** Displays text as temporary display using screen geometry.  Insure that
                        you have set all needed properties before using this method.  This method
                        is not supported for 2D output such as CGM.  Note that the text will be displayed
                        on the Absolute XY plane. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayTemporaryScreenGeometry
            (
                int fontIndex /** The index of the font to be used.  This may
                                                                           be 0, which means to use the default font. */,
                NXOpen::View * view /** The view in which to display the text.
                                                                           This may be NULL, in which case the
                                                                           viewType argument is used. */,
                NXOpen::Display::TransientText::ViewType viewType /** Used only when view is NULL. */,
                NXOpen::DisplayableObject * object /** May be NULL, in which case the
                                                                                      text will be drawn at the given position.
                                                                                      If not NULL, draw the text at the
                                                                                      attention point of object. */,
                const NXOpen::Point3d & position /** In Absolute Coordinates */
            );
            /** Displays text as temporary display using screen geometry but with rotation
                        defined in absolute space.  The text will be displayed on the XY plane of
                        the absolute coordinate system.  Insure that you have set all needed properties
                        before using this method.  This method is not supported for 2D output such as CGM. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DisplayTemporaryAbsRotScreenSizeGeometry
            (
                int fontIndex /** The index of the font to be used.  This may
                                                                           be 0, which means to use the default font. */,
                NXOpen::View * view /** The view in which to display the text.
                                                                           This may be NULL, in which case the
                                                                           viewType argument is used. */,
                NXOpen::Display::TransientText::ViewType viewType /** Used only when view is NULL. */,
                NXOpen::DisplayableObject * object /** May be NULL, in which case the
                                                                                      text will be drawn at the given position.
                                                                                      If not NULL, draw the text at the
                                                                                      attention point of object. */,
                const NXOpen::Point3d & position /** In Absolute Coordinates */
            );
            /** Adds a text string to the TransientText object.  A TransientText object
                        may have one or more text strings.  If an attempt is made to display
                        a TransientText object with zero text strings, an error will be returned. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void AddTextString
            (
                const NXString & textString /** textstring */ 
            );
            /** Adds a text string to the TransientText object.  A TransientText object
                        may have one or more text strings.  If an attempt is made to display
                        a TransientText object with zero text strings, an error will be returned. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void AddTextString
            (
                const char * textString /** textstring */ 
            );
            /**Returns   the style of font to be used to display the transient text. Every text font has at least
                         one style.  To determine which styles a font has, use UF_UGFONT_ask_font_styles.
                         If not specified, the default font style for the font will be used.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FontStyle
            (
            );
            /**Sets   the style of font to be used to display the transient text. Every text font has at least
                         one style.  To determine which styles a font has, use UF_UGFONT_ask_font_styles.
                         If not specified, the default font style for the font will be used.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFontStyle
            (
                const NXString & fontStyle /** fontstyle */ 
            );
            /**Sets   the style of font to be used to display the transient text. Every text font has at least
                         one style.  To determine which styles a font has, use UF_UGFONT_ask_font_styles.
                         If not specified, the default font style for the font will be used.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetFontStyle
            (
                const char * fontStyle /** fontstyle */ 
            );
            /**Returns  the index of the color to be used to display the transient text. If not specified,
                        the System Color will be used. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int Color
            (
            );
            /**Sets  the index of the color to be used to display the transient text. If not specified,
                        the System Color will be used. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetColor
            (
                int colorIndex /** colorindex */ 
            );
            /**Returns  the position of the text relative to positions on the text box 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::TransientText::StandardTextRef ReferencePositionType
            (
            );
            /**Sets  the position of the text relative to positions on the text box 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReferencePositionType
            (
                NXOpen::Display::TransientText::StandardTextRef referencePositionType /** referencepositiontype */ 
            );
            /**Returns  the approximate size of the text (small, mendium, large) as measured on
                        the graphics screen.  This property is not used by
                        @link Display::TransientText::DisplayTemporaryAbsoluteGeometry Display::TransientText::DisplayTemporaryAbsoluteGeometry@endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::TransientText::TextSize ScreenTextSize
            (
            );
            /**Sets  the approximate size of the text (small, mendium, large) as measured on
                        the graphics screen.  This property is not used by
                        @link Display::TransientText::DisplayTemporaryAbsoluteGeometry Display::TransientText::DisplayTemporaryAbsoluteGeometry@endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScreenTextSize
            (
                NXOpen::Display::TransientText::TextSize textSize /** textsize */ 
            );
            /** Returns the size of the text, in absolute coordinate, in units of the displayed part.
                         These values are only only used by
                         @link Display::TransientText::DisplayTemporaryAbsoluteGeometry Display::TransientText::DisplayTemporaryAbsoluteGeometry@endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void GetAbsoluteTextSize
            (
                double* glyphWidth /** glyphwidth */ ,
                double* glyphHeight /** glyphheight */ 
            );
            /** Sets the size of the text, in absolute coordinates, in units of the displayed part.
                        These values are only used by
                        @link Display::TransientText::DisplayTemporaryAbsoluteGeometry Display::TransientText::DisplayTemporaryAbsoluteGeometry@endlink .
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAbsoluteTextSize
            (
                double glyphWidth /** glyphwidth */ ,
                double glyphHeight /** glyphheight */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
