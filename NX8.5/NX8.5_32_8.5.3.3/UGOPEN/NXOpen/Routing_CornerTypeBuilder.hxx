#ifndef NXOpen_ROUTING_CORNERTYPEBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_CORNERTYPEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_CornerTypeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_CornerTypeBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class CornerTypeBuilder;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class _CornerTypeBuilderBuilder;
        class CornerTypeBuilderImpl;
        /** Contains setting for corner creation. Type of bend to be created and the method to
                create the corner. 
            
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  CornerTypeBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Defines the type of bend available for bend creation.Type of bend available are None,Miter
                        ,Bend , S-bend and S-Elbow.
                      */
            public: enum Type
            {
                TypeNone/** none */ ,
                TypeMiter/** miter */ ,
                TypeBend/** bend */ ,
                TypeSBend/** sbend */ ,
                TypeSElbow/** selbow */ ,
                TypeUBend/** ubend */ ,
                TypeUElbow/** uelbow */ ,
                TypeCope/** cope */ ,
                TypeMiteredBend/** mitered bend */ 
            };

            /** Methods available for bend creation. 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link Routing::CornerTypeBuilder::BendMethods Routing::CornerTypeBuilder::BendMethods@endlink  instead. <br>  
            */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use Routing::CornerTypeBuilder::BendMethods instead.") enum BendOptions
            {
                BendOptionsRadius/** Radius method allows corner creation with the specified radius value  */,
                BendOptionsRatioToDiameter/** Ratio to diameter method */,
                BendOptionsBendRadiusTable/** Bend table method creates bend from specified bend table*/
            };

            /** Methods available for bend creation. */
            public: enum BendMethods
            {
                BendMethodsRadius/** Radius method allows corner creation with the specified radius value  */,
                BendMethodsRatioToDiameter/** Ratio to diameter method */,
                BendMethodsBendRadiusTable/** Bend table method creates bend from specified bend table*/,
                BendMethodsInnerRadius/** Inner Radius method allows corner creation with the specified inner radius value  */
            };

            private: CornerTypeBuilderImpl * m_cornertypebuilder_impl;
            private: friend class  _CornerTypeBuilderBuilder;
            protected: CornerTypeBuilder();
            public: ~CornerTypeBuilder();
            /**Returns  the route corner type options 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::CornerTypeBuilder::Type RouteCornerTypeOptions
            (
            );
            /**Sets  the route corner type options 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetRouteCornerTypeOptions
            (
                NXOpen::Routing::CornerTypeBuilder::Type routeCornerTypeOptions /** routecornertypeoptions */ 
            );
            /**Returns  the route corner bend options 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::CornerTypeBuilder::BendMethods RouteCornerBendMethods
            (
            );
            /**Sets  the route corner bend options 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetRouteCornerBendMethods
            (
                NXOpen::Routing::CornerTypeBuilder::BendMethods routeCornerBendMethods /** routecornerbendmethods */ 
            );
            /**Returns  the route corner bend options 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link Routing::CornerTypeBuilder::RouteCornerBendMethods Routing::CornerTypeBuilder::RouteCornerBendMethods@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use Routing::CornerTypeBuilder::RouteCornerBendMethods instead.") NXOpen::Routing::CornerTypeBuilder::BendOptions RouteCornerBendOptions
            (
            );
            /**Sets  the route corner bend options 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link Routing::CornerTypeBuilder::SetRouteCornerBendMethods Routing::CornerTypeBuilder::SetRouteCornerBendMethods@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use Routing::CornerTypeBuilder::SetRouteCornerBendMethods instead.") void SetRouteCornerBendOptions
            (
                NXOpen::Routing::CornerTypeBuilder::BendOptions routeCornerBendOptions /** routecornerbendoptions */ 
            );
            /**Returns  the route corner radius 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * RouteCornerRadius
            (
            );
            /**Returns  the route corner ratio to diameter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * RouteCornerRatioToDiameter
            (
            );
            /** Route specify elbow 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RouteCornerSpecifyElbow
            (
            );
            /**Returns  the route corner require linear solution 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool RouteCornerRequireLinearSolution
            (
            );
            /**Sets  the route corner require linear solution 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetRouteCornerRequireLinearSolution
            (
                bool routeCornerRequireLinearSolution /** routecornerrequirelinearsolution */ 
            );
            /** Route alternate solution
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RouteCornerAlternateSolution
            (
            );
            /** Import bend radius table 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RouteCornerImportBendRadiusTable
            (
            );
            /** Bend corner info 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RouteCornerBendRadiusInfo
            (
            );
            /**Returns  the name of bend radius table
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString RouteCornerBendTable
            (
            );
            /**Sets  the name of bend radius table
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetRouteCornerBendTable
            (
                const NXString & bendTableName /** bendtablename */ 
            );
            /**Sets  the name of bend radius table
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetRouteCornerBendTable
            (
                const char * bendTableName /** bendtablename */ 
            );
            /** Returns the created elbow part @return  Characteristic list used to find the appropriate 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::CharacteristicList * GetElbowPart
            (
            );
            /** Sets the elbow part to be used for elbow creation
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetElbowPart
            (
                NXOpen::Routing::CharacteristicList * elbowPart /** Characteristic list used to find the appropriate */
            );
            /** Returns the  applied charx of elbow part @return  Characteristic list used to find the appropriate 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::CharacteristicList * GetElbowAppliedCharx
            (
            );
            /** Sets the applied charx for elbow creation
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetElbowAppliedCharx
            (
                NXOpen::Routing::CharacteristicList * elbowPart /** Characteristic list used to find the appropriate */
            );
            /**Returns  the number of miter in mitered bend corner
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int RouteCornerNumberOfMiters
            (
            );
            /**Sets  the number of miter in mitered bend corner
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetRouteCornerNumberOfMiters
            (
                int routeCornerNumberOfMiter /** routecornernumberofmiter */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
