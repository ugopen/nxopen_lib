#ifndef NXOpen_TOOLING_STOCKSIZEBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_STOCKSIZEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_StockSizeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_StockSizeBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class StockSizeBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Expression;
    class NXObject;
    class SelectBodyList;
    namespace Tooling
    {
        class _StockSizeBuilderBuilder;
        class StockSizeBuilderImpl;
        /** Represents a Tooling::StockSizeBuilder builder.  <br> To create a new instance of this class, use @link Tooling::StockSizeCollection::CreateStocksizeBuilder  Tooling::StockSizeCollection::CreateStocksizeBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Clearance.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        CylinderType </td> <td> 
         
        Circumscribed </td> </tr> 

        <tr><td> 
         
        SizePrecision </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StockType </td> <td> 
         
        Block </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  StockSizeBuilder : public Builder
        {
            /** Represents the shape of stock size. */
            public: enum Shape
            {
                ShapeBlock/** The shape is a block */,
                ShapeCylinder/** The shape is a cylinder */
            };

            /** Represents the base circle type of cylinder. */
            public: enum Cylinder
            {
                CylinderCircumscribed/** circumcircle based cylinder */,
                CylinderInscribedCircle/** inscribed circle based cylinder */
            };

            private: StockSizeBuilderImpl * m_stocksizebuilder_impl;
            private: friend class  _StockSizeBuilderBuilder;
            protected: StockSizeBuilder();
            public: ~StockSizeBuilder();
            /**Returns  the selected body to calculate a bounding box for stock size. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectBody
            (
            );
            /**Returns  the reference csys to calculate stocksize.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * RefCsys
            (
            );
            /**Sets  the reference csys to calculate stocksize.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRefCsys
            (
                NXOpen::CoordinateSystem * refCsys /** refcsys */ 
            );
            /**Returns  the stock shape to be generated, it can be a box or cylinder. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::StockSizeBuilder::Shape StockType
            (
            );
            /**Sets  the stock shape to be generated, it can be a box or cylinder. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStockType
            (
                NXOpen::Tooling::StockSizeBuilder::Shape enumStockType /** enumstocktype */ 
            );
            /**Returns  the cylinder type to generate a cylinder for the stock size. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::StockSizeBuilder::Cylinder CylinderType
            (
            );
            /**Sets  the cylinder type to generate a cylinder for the stock size. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCylinderType
            (
                NXOpen::Tooling::StockSizeBuilder::Cylinder enumCylinderType /** enumcylindertype */ 
            );
            /**Returns  the stock size string, it is seperated by " X ". 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringStock
            (
            );
            /**Sets  the stock size string, it is seperated by " X ". 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStringStock
            (
                const NXString & stringStock /** stringstock */ 
            );
            /**Sets  the stock size string, it is seperated by " X ". 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetStringStock
            (
                const char * stringStock /** stringstock */ 
            );
            /**Returns  the size precision of the stock. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int SizePrecision
            (
            );
            /**Sets  the size precision of the stock. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSizePrecision
            (
                int integerPrecision /** integerprecision */ 
            );
            /**Returns  the clearance of the stocksize. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Clearance
            (
            );
            /** Modifies the reference csys for stock size. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void ModifyRefCsys
            (
                const NXOpen::Point3d & inputOrigin /** inputorigin */ ,
                const NXOpen::Matrix3x3 & inputMatrix /** inputmatrix */ 
            );
            /** Creates the reference csys for stock size. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateRefCsys
            (
                const NXOpen::Point3d & inputOrigin /** inputorigin */ ,
                const NXOpen::Matrix3x3 & inputMatrix /** inputmatrix */ 
            );
            /** Add or edit stock size attributes. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void EditStockSizeAttr
            (
                NXOpen::NXObject * workPart /** workpart */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
