#ifndef NXOpen_ANNOTATIONS_FEATURECONTROLFRAMEDATABUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_FEATURECONTROLFRAMEDATABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_FeatureControlFrameDataBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_CompoundDatumReferenceBuilder.hxx>
#include <NXOpen/Annotations_DatumReferenceBuilder.hxx>
#include <NXOpen/Annotations_FeatureControlFrameDataBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class FeatureControlFrameDataBuilder;
    }
    namespace Annotations
    {
        class CompoundDatumReferenceBuilder;
    }
    namespace Annotations
    {
        class DatumReferenceBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _FeatureControlFrameDataBuilderBuilder;
        class FeatureControlFrameDataBuilderImpl;
        /**
            Represents a FeatureControlFrameDataBuilder
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  FeatureControlFrameDataBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Specifies the zone shape for the feature control frame */
            public: enum ToleranceZoneShape
            {
                ToleranceZoneShapeNone/** no zone shape */,
                ToleranceZoneShapeDiameter/** diameter */,
                ToleranceZoneShapeSphericalDiameter/** spherical diameter */,
                ToleranceZoneShapeSquare/** square */
            };

            /** Specifies the tolerance material modifier condition */
            public: enum ToleranceMaterialModifier
            {
                ToleranceMaterialModifierNone/** no material modifier */,
                ToleranceMaterialModifierLeastMaterialCondition/** least material condition */,
                ToleranceMaterialModifierMaximumMaterialCondition/** maximum material condition */,
                ToleranceMaterialModifierRegardlessOfFeatureSize/** regardless of feature size condition */
            };

            /** Specifies the unit type */
            public: enum AreaSymbolType
            {
                AreaSymbolTypeRectangular/**Rectangular*/,
                AreaSymbolTypeCircular/**Circular*/,
                AreaSymbolTypeSpherical/**Spherical*/,
                AreaSymbolTypeSquare/**Square*/
            };

            private: FeatureControlFrameDataBuilderImpl * m_featurecontrolframedatabuilder_impl;
            private: friend class  _FeatureControlFrameDataBuilderBuilder;
            protected: FeatureControlFrameDataBuilder();
            public: ~FeatureControlFrameDataBuilder();
            /**Returns  the unit basis toggle
                        Only available when feature control frame characteristic is
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicStraightness Annotations::FeatureControlFrameBuilder::FcfCharacteristicStraightness@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicFlatness Annotations::FeatureControlFrameBuilder::FcfCharacteristicFlatness@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfALine Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfALine@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfASurface Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfASurface@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool UnitBasis
            (
            );
            /**Sets  the unit basis toggle
                        Only available when feature control frame characteristic is
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicStraightness Annotations::FeatureControlFrameBuilder::FcfCharacteristicStraightness@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicFlatness Annotations::FeatureControlFrameBuilder::FcfCharacteristicFlatness@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfALine Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfALine@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfASurface Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfASurface@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetUnitBasis
            (
                bool unitBasis /** unitbasis */ 
            );
            /**Returns  the zone shape 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FeatureControlFrameDataBuilder::ToleranceZoneShape ZoneShape
            (
            );
            /**Sets  the zone shape 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetZoneShape
            (
                NXOpen::Annotations::FeatureControlFrameDataBuilder::ToleranceZoneShape zoneShape /** zoneshape */ 
            );
            /**Returns  the tolerance value string 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ToleranceValue
            (
            );
            /**Sets  the tolerance value string 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetToleranceValue
            (
                const NXString & toleranceValue /** tolerancevalue */ 
            );
            /**Sets  the tolerance value string 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetToleranceValue
            (
                const char * toleranceValue /** tolerancevalue */ 
            );
            /**Returns  the unit basis value1 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::UnitBasis Annotations::FeatureControlFrameDataBuilder::UnitBasis@endlink 
                        is true.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString UnitBasisValue1
            (
            );
            /**Sets  the unit basis value1 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::UnitBasis Annotations::FeatureControlFrameDataBuilder::UnitBasis@endlink 
                        is true.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetUnitBasisValue1
            (
                const NXString & unitBasisValue1 /** unitbasisvalue1 */ 
            );
            /**Sets  the unit basis value1 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::UnitBasis Annotations::FeatureControlFrameDataBuilder::UnitBasis@endlink 
                        is true.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetUnitBasisValue1
            (
                const char * unitBasisValue1 /** unitbasisvalue1 */ 
            );
            /**Returns  the unit basis value2 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::UnitBasis Annotations::FeatureControlFrameDataBuilder::UnitBasis@endlink 
                        is true.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString UnitBasisValue2
            (
            );
            /**Sets  the unit basis value2 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::UnitBasis Annotations::FeatureControlFrameDataBuilder::UnitBasis@endlink 
                        is true.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetUnitBasisValue2
            (
                const NXString & unitBasisValue2 /** unitbasisvalue2 */ 
            );
            /**Sets  the unit basis value2 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::UnitBasis Annotations::FeatureControlFrameDataBuilder::UnitBasis@endlink 
                        is true.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetUnitBasisValue2
            (
                const char * unitBasisValue2 /** unitbasisvalue2 */ 
            );
            /**Returns  the material modifier 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FeatureControlFrameDataBuilder::ToleranceMaterialModifier MaterialModifier
            (
            );
            /**Sets  the material modifier 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetMaterialModifier
            (
                NXOpen::Annotations::FeatureControlFrameDataBuilder::ToleranceMaterialModifier materialModifier /** materialmodifier */ 
            );
            /**Returns  the free state toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool FreeState
            (
            );
            /**Sets  the free state toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetFreeState
            (
                bool freeState /** freestate */ 
            );
            /**Returns  the tangent plane toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool TangentPlane
            (
            );
            /**Sets  the tangent plane toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetTangentPlane
            (
                bool tangentPlane /** tangentplane */ 
            );
            /**Returns  the projected toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool Projected
            (
            );
            /**Sets  the projected toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetProjected
            (
                bool projected /** projected */ 
            );
            /**Returns  the projected value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::Projected Annotations::FeatureControlFrameDataBuilder::Projected@endlink 
                        is true. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ProjectedValue
            (
            );
            /**Sets  the projected value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::Projected Annotations::FeatureControlFrameDataBuilder::Projected@endlink 
                        is true. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetProjectedValue
            (
                const NXString & projectedValue /** projectedvalue */ 
            );
            /**Sets  the projected value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::Projected Annotations::FeatureControlFrameDataBuilder::Projected@endlink 
                        is true. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetProjectedValue
            (
                const char * projectedValue /** projectedvalue */ 
            );
            /**Returns  the circle utoggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool CircleU
            (
            );
            /**Sets  the circle utoggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetCircleU
            (
                bool circleU /** circleu */ 
            );
            /**Returns  the circle u value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::CircleU Annotations::FeatureControlFrameDataBuilder::CircleU@endlink 
                        is true. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CircleUvalue
            (
            );
            /**Sets  the circle u value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::CircleU Annotations::FeatureControlFrameDataBuilder::CircleU@endlink 
                        is true. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetCircleUvalue
            (
                const NXString & circleUValue /** circleuvalue */ 
            );
            /**Sets  the circle u value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::CircleU Annotations::FeatureControlFrameDataBuilder::CircleU@endlink 
                        is true. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetCircleUvalue
            (
                const char * circleUValue /** circleuvalue */ 
            );
            /**Returns  the statistical tolerance toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool StatisticalTolerance
            (
            );
            /**Sets  the statistical tolerance toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetStatisticalTolerance
            (
                bool statisticalTolerance /** statisticaltolerance */ 
            );
            /**Returns  the common zone toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool CommonZone
            (
            );
            /**Sets  the common zone toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetCommonZone
            (
                bool commonZone /** commonzone */ 
            );
            /**Returns  the maximum tolerance toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumTolerance
            (
            );
            /**Sets  the maximum tolerance toggle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetMaximumTolerance
            (
                bool maximumTolerance /** maximumtolerance */ 
            );
            /**Returns  the maximum tolerance value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::MaximumTolerance Annotations::FeatureControlFrameDataBuilder::MaximumTolerance@endlink 
                        is true. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MaximumToleranceValue
            (
            );
            /**Sets  the maximum tolerance value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::MaximumTolerance Annotations::FeatureControlFrameDataBuilder::MaximumTolerance@endlink 
                        is true. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetMaximumToleranceValue
            (
                const NXString & maximumToleranceValue /** maximumtolerancevalue */ 
            );
            /**Sets  the maximum tolerance value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilder::MaximumTolerance Annotations::FeatureControlFrameDataBuilder::MaximumTolerance@endlink 
                        is true. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetMaximumToleranceValue
            (
                const char * maximumToleranceValue /** maximumtolerancevalue */ 
            );
            /**Returns  the primary datum reference 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DatumReferenceBuilder * PrimaryDatumReference
            (
            );
            /**Returns  the primary compound datum reference 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CompoundDatumReferenceBuilder * PrimaryCompoundDatumReference
            (
            );
            /**Sets  the primary compound datum reference 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetPrimaryCompoundDatumReference
            (
                NXOpen::Annotations::CompoundDatumReferenceBuilder * primaryDatumReference /** primarydatumreference */ 
            );
            /**Returns  the secondary datum reference 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DatumReferenceBuilder * SecondaryDatumReference
            (
            );
            /**Returns  the secondary compound datum reference 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CompoundDatumReferenceBuilder * SecondaryCompoundDatumReference
            (
            );
            /**Sets  the secondary compound datum reference 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetSecondaryCompoundDatumReference
            (
                NXOpen::Annotations::CompoundDatumReferenceBuilder * secondaryDatumReference /** secondarydatumreference */ 
            );
            /**Returns  the tertiary datum reference 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DatumReferenceBuilder * TertiaryDatumReference
            (
            );
            /**Returns  the tertiary compound datum reference 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CompoundDatumReferenceBuilder * TertiaryCompoundDatumReference
            (
            );
            /**Sets  the tertiary compound datum reference 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetTertiaryCompoundDatumReference
            (
                NXOpen::Annotations::CompoundDatumReferenceBuilder * tertiaryDatumReference /** tertiarydatumreference */ 
            );
            /** Get the datum references 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void PrimaryDatumReferences
            (
                std::vector<NXOpen::Annotations::DatumReferenceBuilder *> & primaryDatumReferences /** datum references */
            );
            /**Returns  the material modifier 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FeatureControlFrameDataBuilder::AreaSymbolType AreaSymbol
            (
            );
            /**Sets  the material modifier 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetAreaSymbol
            (
                NXOpen::Annotations::FeatureControlFrameDataBuilder::AreaSymbolType areaSymbol /** areasymbol */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
