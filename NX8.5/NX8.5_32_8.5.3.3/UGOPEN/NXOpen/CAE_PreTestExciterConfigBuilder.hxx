#ifndef NXOpen_CAE_PRETESTEXCITERCONFIGBUILDER_HXX_INCLUDED
#define NXOpen_CAE_PRETESTEXCITERCONFIGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PreTestExciterConfigBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_PreTestExciterConfigBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PreTestExciterConfigBuilder;
    }
    class Builder;
    namespace CAE
    {
        class _PreTestExciterConfigBuilderBuilder;
        class PreTestExciterConfigBuilderImpl;
        /** Represents a @link CAE::PreTestExciterConfig CAE::PreTestExciterConfig@endlink  builder  <br> To create a new instance of this class, use @link CAE::PreTestSolutionCollection::CreateExciterConfigBuilder  CAE::PreTestSolutionCollection::CreateExciterConfigBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DampingRatio </td> <td> 
         
        1.0 </td> </tr> 

        <tr><td> 
         
        MethodChoice </td> <td> 
         
        AutomaticNmif </td> </tr> 

        <tr><td> 
         
        NmifThreshold </td> <td> 
         
        0.3 </td> </tr> 

        <tr><td> 
         
        OffAxisAngleChoice </td> <td> 
         
        None </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PreTestExciterConfigBuilder : public Builder
        {
            /** Selected method for the exciter selection */
            public: enum MethodChoiceType
            {
                MethodChoiceTypeAutomaticNmif/** automatic nmif */ ,
                MethodChoiceTypeManual/** manual */ 
            };

            /** Selected off axis angle for the exciter selection */
            public: enum OffAxisAngleChoiceType
            {
                OffAxisAngleChoiceTypeNone/** none */ ,
                OffAxisAngleChoiceTypeAngle45/** angle45 */ ,
                OffAxisAngleChoiceTypeAngle30/** angle30 */ 
            };

            private: PreTestExciterConfigBuilderImpl * m_pretestexciterconfigbuilder_impl;
            private: friend class  _PreTestExciterConfigBuilderBuilder;
            protected: PreTestExciterConfigBuilder();
            public: ~PreTestExciterConfigBuilder();
            /**Returns  the exciter selection method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PreTestExciterConfigBuilder::MethodChoiceType MethodChoice
            (
            );
            /**Sets  the exciter selection method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetMethodChoice
            (
                NXOpen::CAE::PreTestExciterConfigBuilder::MethodChoiceType algorithmChoice /** algorithmchoice */ 
            );
            /**Returns  the damping ratio 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DampingRatio
            (
            );
            /**Sets  the damping ratio 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetDampingRatio
            (
                double dampingRatio /** dampingratio */ 
            );
            /**Returns  the damping ratio 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double NmifThreshold
            (
            );
            /**Sets  the damping ratio 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetNmifThreshold
            (
                double nmifThreshold /** nmifthreshold */ 
            );
            /**Returns  the off axis angle choice 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PreTestExciterConfigBuilder::OffAxisAngleChoiceType OffAxisAngleChoice
            (
            );
            /**Sets  the off axis angle choice 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetOffAxisAngleChoice
            (
                NXOpen::CAE::PreTestExciterConfigBuilder::OffAxisAngleChoiceType offAxisAngleChoice /** offaxisanglechoice */ 
            );
            /**Returns  the name 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetName
            (
                const NXString & title /** title */ 
            );
            /**Sets  the name 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            void SetName
            (
                const char * title /** title */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
