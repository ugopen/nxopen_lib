#ifndef NXOpen_ANNOTATIONS_UNITSFORMATPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_UNITSFORMATPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_UnitsFormatPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class UnitsFormatPreferences;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class UnitsFormatPreferencesImpl;
        /** Represents units and format preferences 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  UnitsFormatPreferences : public TransientObject
        {
            private: UnitsFormatPreferencesImpl * m_unitsformatpreferences_impl;
            /// \cond NX_NO_DOC 
            public: explicit UnitsFormatPreferences(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~UnitsFormatPreferences();
            /**Returns  the primary dimension unit 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DimensionUnit PrimaryDimensionUnit
            (
            );
            /**Sets  the primary dimension unit 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrimaryDimensionUnit
            (
                NXOpen::Annotations::DimensionUnit unit /** unit */ 
            );
            /**Returns  the primary dimension text format 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DimensionTextFormat PrimaryDimensionTextFormat
            (
            );
            /**Sets  the primary dimension text format 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrimaryDimensionTextFormat
            (
                NXOpen::Annotations::DimensionTextFormat textFormat /** text format */ 
            );
            /**Returns  the decimal point character 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DecimalPointCharacter DecimalPointCharacter
            (
            );
            /**Sets  the decimal point character 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDecimalPointCharacter
            (
                NXOpen::Annotations::DecimalPointCharacter decimalPointCharacter /** decimal point character */ 
            );
            /**Returns  the flag indicating whether to display trailing zeros on dimension values 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayTrailingZeros
            (
            );
            /**Sets  the flag indicating whether to display trailing zeros on dimension values 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayTrailingZeros
            (
                bool displayTrailingZeros /** display trailing zeros */ 
            );
            /**Returns  the tolerance text placement relative to the dimension text 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TolerancePlacement TolerancePlacement
            (
            );
            /**Sets  the tolerance text placement relative to the dimension text 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTolerancePlacement
            (
                NXOpen::Annotations::TolerancePlacement placement /** placement */ 
            );
            /**Returns  the angular dimension format 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AngularDimensionFormat AngularDimensionFormat
            (
            );
            /**Sets  the angular dimension format 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAngularDimensionFormat
            (
                NXOpen::Annotations::AngularDimensionFormat format /** format */ 
            );
            /**Returns  the angular tolerance format 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AngularDimensionFormat AngularToleranceFormat
            (
            );
            /**Sets  the angular tolerance format 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAngularToleranceFormat
            (
                NXOpen::Annotations::AngularDimensionFormat format /** format */ 
            );
            /**Returns  the dual dimension placement relative to the primary dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DualDimensionPlacement DualDimensionPlacement
            (
            );
            /**Sets  the dual dimension placement relative to the primary dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDualDimensionPlacement
            (
                NXOpen::Annotations::DualDimensionPlacement placement /** placement */ 
            );
            /**Returns  the dual dimension unit 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DimensionUnit DualDimensionUnit
            (
            );
            /**Sets  the dual dimension unit 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDualDimensionUnit
            (
                NXOpen::Annotations::DimensionUnit unit /** unit */ 
            );
            /**Returns  the dual dimension text format 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DimensionTextFormat DualDimensionTextFormat
            (
            );
            /**Sets  the dual dimension text format 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDualDimensionTextFormat
            (
                NXOpen::Annotations::DimensionTextFormat textFormat /** text format */ 
            );
            /**Returns  the flag indicating whether to convert the primary tolerance to dual dimension unit 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool ConvertPrimaryToleranceToDualDimensionUnit
            (
            );
            /**Sets  the flag indicating whether to convert the primary tolerance to dual dimension unit 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetConvertPrimaryToleranceToDualDimensionUnit
            (
                bool convertPrimaryToleranceToDualUnit /** convert primary tolerance to dual unit */ 
            );
            /**Returns  the angular dimension suppress zeros option 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AngularSuppressZeros SuppressAngularZerosOption
            (
            );
            /**Sets  the angular dimension suppress zeros option 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSuppressAngularZerosOption
            (
                NXOpen::Annotations::AngularSuppressZeros option /** option */ 
            );
            /**Returns  the dimension leading zero display property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool DimensionLeadingZero
            (
            );
            /**Sets  the dimension leading zero display property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDimensionLeadingZero
            (
                bool dimensionLeadingZero /** dimension leading zero */ 
            );
            /**Returns  the tolerance leading zero display property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToleranceLeadingZero
            (
            );
            /**Sets  the tolerance leading zero display property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToleranceLeadingZero
            (
                bool toleranceLeadingZero /** tolerance leading zero */ 
            );
            /**Returns  the fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool FractionalDisplay
            (
            );
            /**Sets  the fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFractionalDisplay
            (
                bool fractionalDisplay /** fractionaldisplay */ 
            );
            /**Returns  the numerator degrees of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int NumeratorDegrees
            (
            );
            /**Sets  the numerator degrees of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNumeratorDegrees
            (
                int numeratorDegrees /** numerator degrees */ 
            );
            /**Returns  the numerator minutes of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int NumeratorMinutes
            (
            );
            /**Sets  the numerator minutes of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNumeratorMinutes
            (
                int numeratorMinutes /** numerator minutes */ 
            );
            /**Returns  the numerator seconds of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int NumeratorSeconds
            (
            );
            /**Sets  the numerator seconds of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNumeratorSeconds
            (
                int numeratorSeconds /** numerator seconds */ 
            );
            /**Returns  the numerator fractional degrees of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double NumeratorFraction
            (
            );
            /**Sets  the numerator fractional degrees of fractional display for angular dimension
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNumeratorFraction
            (
                double numeratorFraction /** numeratorfraction */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
