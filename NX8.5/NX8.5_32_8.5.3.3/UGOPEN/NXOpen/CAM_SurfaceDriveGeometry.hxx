#ifndef NXOpen_CAM_SURFACEDRIVEGEOMETRY_HXX_INCLUDED
#define NXOpen_CAM_SURFACEDRIVEGEOMETRY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_SurfaceDriveGeometry.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_SurfaceDriveGeometry.hxx>
#include <NXOpen/CAM_SurfaceDriveGeometrySet.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class SurfaceDriveGeometry;
    }
    namespace CAM
    {
        class SurfaceDriveGeometrySet;
    }
    namespace CAM
    {
        class SurfaceDriveGeometrySetList;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXObject;
    namespace CAM
    {
        class _SurfaceDriveGeometryBuilder;
        class SurfaceDriveGeometryImpl;
        /** Represents a CAM drive geometry object for surface area 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  SurfaceDriveGeometry : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: SurfaceDriveGeometryImpl * m_surfacedrivegeometry_impl;
            private: friend class  _SurfaceDriveGeometryBuilder;
            protected: SurfaceDriveGeometry();
            public: ~SurfaceDriveGeometry();
            /**Returns  the geometry list 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::SurfaceDriveGeometrySetList * GeometryList
            (
            );
            /** Create an empty geometry set @return  the geometry set object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::SurfaceDriveGeometrySet * CreateEmptyGeometrySet
            (
            );
            /** Create a new geometry set @return  the geometry set object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::SurfaceDriveGeometrySet * CreateGeometrySet
            (
                NXOpen::NXObject * surface /** the surface*/
            );
            /** Select next row  @return  the new geometry set object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::SurfaceDriveGeometrySet * StartNextRow
            (
                NXOpen::NXObject * surface /** the surface*/
            );
            /** Commits any edits that have been applied to the builder. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Commit
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
