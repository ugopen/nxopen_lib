#ifndef NXOpen_LICENSEMANAGER_HXX_INCLUDED
#define NXOpen_LICENSEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     LicenseManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class LicenseManager;
    class Session;
    class LicenseManagerImpl;
    /** Provides utility methods for managing licenses.
        
         <br> This class only manages the licenses that are used by the current NX Open
        application. If several applications are loaded in a session, each application will
        have its own independent license manager. It is possible for two applications to both
        reserve the same license.  Although this will only reserve a single license from the
        FLEX server, the license will not be released to the server until both applications
        have released it. 
         <br> 
        
         <br> 
        As of NX6 the concept of User-Defined License Contexts has been introduced.  This concept 
        gives greater control of licensing of the application.  To find out more about this topic, please 
        reference the NXOpen Programmer's Guide.  All user-defined context names have a max length of 128 
        characters long consisting of only numbers and letters.
         <br> 
        
         <br> 
        The main NX User Interface will also manage licenses independently. If an NX Open 
        application releases the "solid_modeling" license, but the main NX UI is still using that 
        license, then it will not be returned to the server.
         <br> 

         <br> Methods for this class use the license feature name, which can be found in the
        documentation for NX Open methods and properties. This is in the format 
        <tt>License requirements: license feature name ("license description")</tt>.  For
        example, given <tt>License requirements: solid_modeling ("SOLIDS MODELING")</tt>, then
        the license feature name, <tt>solid_modeling</tt> would be used. <br> 
        
      <br> To obtain an instance of this class, refer to @link Session  Session @endlink  <br> 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  LicenseManager
    {
        private: LicenseManagerImpl * m_licensemanager_impl;
        private: NXOpen::Session* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit LicenseManager(NXOpen::Session *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~LicenseManager();
        /** Reserve a license against the specified license context.  If the specified user-defined 
            context does not already exist it will be created.
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void Reserve
        (
            const NXString & license /** License feature name to be reserved   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & contextName /** Name of context to reserve license against.  Will use the default context if NULL is specified.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Reserve a license against the specified license context.  If the specified user-defined 
            context does not already exist it will be created.
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void Reserve
        (
            const char * license /** License feature name to be reserved   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * contextName /** Name of context to reserve license against.  Will use the default context if NULL is specified.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Release a license against the specified license context. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void Release
        (
            const NXString & license /** License feature name to be released   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & contextName /** Name of context to release license against.  Will use the default context if NULL is specified.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Release a license against the specified license context. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void Release
        (
            const char * license /** License feature name to be released   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * contextName /** Name of context to release license against.  Will use the default context if NULL is specified.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Release all licenses against the specified license context.  If the context specified is a user-defined context it will be deleted. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void ReleaseAll
        (
            const NXString & contextName /** Name of context release to release.  Will use the default context if NULL is specified.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Release all licenses against the specified license context.  If the context specified is a user-defined context it will be deleted. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void ReleaseAll
        (
            const char * contextName /** Name of context release to release.  Will use the default context if NULL is specified.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the licenses that are currently reserved against a context.  This method will
            also output the licenses reserved against the default context in the syslog.   @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetReservedLicenses
        (
            const NXString & contextName /** Name of context to release against.  Will use the default context if NULL is specified.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the licenses that are currently reserved against a context.  This method will
            also output the licenses reserved against the default context in the syslog.   @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        std::vector<NXString> GetReservedLicenses
        (
            const char * contextName /** Name of context to release against.  Will use the default context if NULL is specified.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
