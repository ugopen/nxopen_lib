#ifndef NXOpen_PREFERENCES_SESSIONDRAFTING_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONDRAFTING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionDrafting.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class SessionDrafting;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        class SessionDraftingImpl;
        /** Represents the set of Drafting preferences applicable to entire session <br> To obtain an instance of this class, refer to @link Preferences::SessionPreferences  Preferences::SessionPreferences @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  SessionDrafting
        {
            /** Describes the available edge face display types */
            public: enum EdgeFaceDisplayType
            {
                EdgeFaceDisplayTypeDisplayAndEmphasize/** display and emphasize */ ,
                EdgeFaceDisplayTypeCurvesOnly/** curves only */ 
            };

            /** Describes the available types for annotation style preference */
            public: enum AnnotationStyleType
            {
                AnnotationStyleTypeTextboxAndLeaders/** textbox and leaders */ ,
                AnnotationStyleTypeDetailed/** detailed */ 
            };

            /** Describes the available grid objects */
            public: enum GridObjectType
            {
                GridObjectTypeDrafting/** Drafting Grid  */,
                GridObjectTypeSketch/** Sketch Grid */,
                GridObjectTypeSheetzone/** Sheet Zone Grid */
            };

            private: SessionDraftingImpl * m_sessiondrafting_impl;
            private: NXOpen::Preferences::SessionPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SessionDrafting(NXOpen::Preferences::SessionPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SessionDrafting();
            /**Returns  the load on selection flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool LoadComponentOnFacetedViewSelection
            (
            );
            /**Sets  the load on selection flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLoadComponentOnFacetedViewSelection
            (
                bool loadComponentOnFacetedViewSelection /** load component on faceted view selection */ 
            );
            /**Returns  the load on update flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool LoadComponentOnFacetedViewUpdate
            (
            );
            /**Sets  the load on update flag 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLoadComponentOnFacetedViewUpdate
            (
                bool loadComponentOnFacetedViewUpdate /** load component on faceted view update */ 
            );
            /**Returns  the extracted edge face display 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionDrafting::EdgeFaceDisplayType ExtractedEdgeFaceDisplay
            (
            );
            /**Sets  the extracted edge face display 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExtractedEdgeFaceDisplay
            (
                NXOpen::Preferences::SessionDrafting::EdgeFaceDisplayType extractedEdgeFaceDisplay /** extracted edge face display */ 
            );
            /**Returns  the dynamic alignment flag. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool DynamicAlignment
            (
            );
            /**Sets  the dynamic alignment flag. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDynamicAlignment
            (
                bool dynamicAlignment /** dynamic alignment */ 
            );
            /**Returns  the drafting grid object. 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionDrafting::GridObjectType GridObject
            (
            );
            /**Sets  the drafting grid object. 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: void SetGridObject
            (
                NXOpen::Preferences::SessionDrafting::GridObjectType drawingGridObject /** drawing grid object */ 
            );
            /**Returns  the Drafting Welcome mode, for autotests only 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int ForcedWelcomeMode
            (
            );
            /**Sets  the Drafting Welcome mode, for autotests only 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetForcedWelcomeMode
            (
                int enterWelcomeMode /** 0: do NOT use welcome, 1: ALWAYS use welcome */
            );
            /**Returns  the automatic update drafting preferences for custom symbol 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool AutomaticCustomSymbolUpdate
            (
            );
            /**Sets  the automatic update drafting preferences for custom symbol 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void SetAutomaticCustomSymbolUpdate
            (
                bool automaticUpdateOption /** automaticupdateoption */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
