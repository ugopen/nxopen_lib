#ifndef NXOpen_TOOLING_AUTODIMENSIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_AUTODIMENSIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_AutoDimensionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_AutoDimensionBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class AutoDimensionBuilder;
    }
    namespace Annotations
    {
        class SelectOrdinateDimensionList;
    }
    class Builder;
    class NXColor;
    class NXObject;
    class SelectNXObject;
    class SelectNXObjectList;
    namespace Tooling
    {
        class _AutoDimensionBuilderBuilder;
        class AutoDimensionBuilderImpl;
        /**
              Represents a @link Tooling::AutoDimensionBuilder Tooling::AutoDimensionBuilder@endlink  which is 
              used to create or edit the Auto Dimension.
             <br> To create a new instance of this class, use @link Tooling::ToolingDrawingCollection::CreateAutoDimensionBuilder  Tooling::ToolingDrawingCollection::CreateAutoDimensionBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DimensionCharacterSize </td> <td> 
         
        3.5 </td> </tr> 

        <tr><td> 
         
        OffsetValueForMargin </td> <td> 
         
        20 </td> </tr> 

        <tr><td> 
         
        SelectHolesAutomatically </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TextAngle </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        TextFont </td> <td> 
         
        First </td> </tr> 

        <tr><td> 
         
        TextOrientation </td> <td> 
         
        Horizontal </td> </tr> 

        <tr><td> 
         
        Tolerance </td> <td> 
         
        NoTolerance </td> </tr> 

        <tr><td> 
         
        ToleranceCharacterSize </td> <td> 
         
        3.5 </td> </tr> 

        <tr><td> 
         
        ToleranceLowerValue </td> <td> 
         
        -0.001 </td> </tr> 

        <tr><td> 
         
        ToleranceUpperValue </td> <td> 
         
        0.001 </td> </tr> 

        <tr><td> 
         
        ToleranceValue </td> <td> 
         
        0.001 </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        CreateOrdinateDimension </td> </tr> 

        <tr><td> 
         
        ValuePrecision </td> <td> 
         
        NominalMinusX </td> </tr> 

        </table>  

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  AutoDimensionBuilder : public Builder
        {
            /** create or edit ordinate dimension*/
            public: enum MainType
            {
                MainTypeCreateOrdinateDimension/** create ordinate dimension */ ,
                MainTypeEditOrdinateDimension/** edit ordinate dimension */ 
            };

            /** tolerance type*/
            public: enum ToleranceType
            {
                ToleranceTypeNoTolerance/** no tolerance */ ,
                ToleranceTypeEqualBilateralTolerance/** equal bilateral tolerance */ ,
                ToleranceTypeBilateralTolerance/** bilateral tolerance */ ,
                ToleranceTypeUnilateralPlus/** unilateral plus */ ,
                ToleranceTypeUnilateralMinus/** unilateral minus */ 
            };

            /** value precision type*/
            public: enum ValuePrecisionType
            {
                ValuePrecisionTypeNominalMinusX/** nominal minus x */ ,
                ValuePrecisionTypeNominalMinusXDotx/** nominal minus xdotx */ ,
                ValuePrecisionTypeNominalMinusXDotxx/** nominal minus xdotxx */ ,
                ValuePrecisionTypeNominalMinusXDotxxx/** nominal minus xdotxxx */ ,
                ValuePrecisionTypeNominalMinusXDotxxxx/** nominal minus xdotxxxx */ ,
                ValuePrecisionTypeNominalMinusXDotxxxxx/** nominal minus xdotxxxxx */ ,
                ValuePrecisionTypeNominalMinusXDotxxxxxx/** nominal minus xdotxxxxxx */ 
            };

            /** text orientation type*/
            public: enum TextOrientationType
            {
                TextOrientationTypeHorizontal/** horizontal */ ,
                TextOrientationTypeAligned/** aligned */ ,
                TextOrientationTypeTextOverDimensionLine/** text over dimension line */ ,
                TextOrientationTypeTextAtAngle/** text at angle */ ,
                TextOrientationTypePerpendicular/** perpendicular */ 
            };

            /** text font type*/
            public: enum TextFontType
            {
                TextFontTypeFirst/** first */ ,
                TextFontTypeSecond/** second */ ,
                TextFontTypeThird/** third */ ,
                TextFontTypeFourth/** fourth */ ,
                TextFontTypeFifth/** fifth */ 
            };

            private: AutoDimensionBuilderImpl * m_autodimensionbuilder_impl;
            private: friend class  _AutoDimensionBuilderBuilder;
            protected: AutoDimensionBuilder();
            public: ~AutoDimensionBuilder();
            /**Returns  the type create or edit ordinate dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AutoDimensionBuilder::MainType Type
            (
            );
            /**Sets  the type create or edit ordinate dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::AutoDimensionBuilder::MainType type /** type */ 
            );
            /**Returns  the option whether to select holes automatically 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool SelectHolesAutomatically
            (
            );
            /**Sets  the option whether to select holes automatically 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectHolesAutomatically
            (
                bool selectHolesAutomatically /** selectholesautomatically */ 
            );
            /**Returns  the ordinate origin point 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * OriginPoint
            (
            );
            /**Returns  the objects to dimension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * ObjectToDimension
            (
            );
            /**Returns  the selected dimensions to edit 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SelectOrdinateDimensionList * Dimensions
            (
            );
            /**Returns  the tolerance type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AutoDimensionBuilder::ToleranceType Tolerance
            (
            );
            /**Sets  the tolerance type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTolerance
            (
                NXOpen::Tooling::AutoDimensionBuilder::ToleranceType toleranceType /** tolerancetype */ 
            );
            /**Returns  the tolerance value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceValue
            (
            );
            /**Sets  the tolerance value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetToleranceValue
            (
                double toleranceValue /** tolerancevalue */ 
            );
            /**Returns  the tolerance upper value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceUpperValue
            (
            );
            /**Sets  the tolerance upper value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetToleranceUpperValue
            (
                double toleranceUpperValue /** toleranceuppervalue */ 
            );
            /**Returns  the tolerance lower value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceLowerValue
            (
            );
            /**Sets  the tolerance lower value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetToleranceLowerValue
            (
                double toleranceLowerValue /** tolerancelowervalue */ 
            );
            /**Returns  the tolerance character size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceCharacterSize
            (
            );
            /**Sets  the tolerance character size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetToleranceCharacterSize
            (
                double toleranceCharacterSize /** tolerancecharactersize */ 
            );
            /**Returns  the tolerance color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ToleranceColor
            (
            );
            /**Sets  the tolerance color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetToleranceColor
            (
                NXOpen::NXColor * toleranceColor /** tolerancecolor */ 
            );
            /**Returns  the value precision 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AutoDimensionBuilder::ValuePrecisionType ValuePrecision
            (
            );
            /**Sets  the value precision 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetValuePrecision
            (
                NXOpen::Tooling::AutoDimensionBuilder::ValuePrecisionType valuePrecision /** valueprecision */ 
            );
            /**Returns  the offset value of margins 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double OffsetValueForMargin
            (
            );
            /**Sets  the offset value of margins 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOffsetValueForMargin
            (
                double offsetValueForMargin /** offsetvalueformargin */ 
            );
            /**Returns  the tolerance character size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double DimensionCharacterSize
            (
            );
            /**Sets  the tolerance character size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDimensionCharacterSize
            (
                double dimensionCharacterSize /** dimensioncharactersize */ 
            );
            /**Returns  the dimension color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * DimensionColor
            (
            );
            /**Sets  the dimension color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDimensionColor
            (
                NXOpen::NXColor * dimensionColor /** dimensioncolor */ 
            );
            /**Returns  the text orientation 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AutoDimensionBuilder::TextOrientationType TextOrientation
            (
            );
            /**Sets  the text orientation 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTextOrientation
            (
                NXOpen::Tooling::AutoDimensionBuilder::TextOrientationType textOrientation /** textorientation */ 
            );
            /**Returns  the text angle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double TextAngle
            (
            );
            /**Sets  the text angle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTextAngle
            (
                double textAngle /** textangle */ 
            );
            /**Returns  the text orientation 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AutoDimensionBuilder::TextFontType TextFont
            (
            );
            /**Sets  the text orientation 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTextFont
            (
                NXOpen::Tooling::AutoDimensionBuilder::TextFontType textFont /** textfont */ 
            );
            /**Returns  the option whether to create X dimensions 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CreateXDimensions
            (
            );
            /**Sets  the option whether to create X dimensions 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCreateXDimensions
            (
                bool createXDimensions /** createxdimensions */ 
            );
            /**Returns  the option whether to create Y dimensions 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CreateYDimensions
            (
            );
            /**Sets  the option whether to create Y dimensions 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCreateYDimensions
            (
                bool createYDimensions /** createydimensions */ 
            );
            /** The method to create ordinate origin  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::NXObject * CreateOrdinateOrigin
            (
                NXOpen::NXObject * viewTag /** viewtag */ ,
                const NXOpen::Point3d & pointData /** pointdata */ 
            );
            /** The method to create ordinate origin margins 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateOrdinateOriginMargins
            (
                NXOpen::NXObject * ordinateOrigin /** ordinateorigin */ ,
                NXOpen::NXObject * viewTag /** viewtag */ 
            );
            /**Returns  the created ordinate origin tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * CreatedOrdinateOrigin
            (
            );
            /**Sets  the created ordinate origin tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCreatedOrdinateOrigin
            (
                NXOpen::NXObject * ordinateOriginTag /** Sets the created ordinate origin */
            );
            /**Returns  the ordinate view tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * OrdinateView
            (
            );
            /**Sets  the ordinate view tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOrdinateView
            (
                NXOpen::NXObject * ordinateViewTag /** Sets the ordinate view tag */
            );
            /**Returns  the first margin tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * FirstMargin
            (
            );
            /**Sets  the first margin tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFirstMargin
            (
                NXOpen::NXObject * firstMarginTag /** Sets the first margin tag */
            );
            /**Returns  the second margin tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * SecondMargin
            (
            );
            /**Sets  the second margin tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSecondMargin
            (
                NXOpen::NXObject * secondMarginTag /** Sets the second margin tag */
            );
            /**Returns  the third margin tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * ThirdMargin
            (
            );
            /**Sets  the third margin tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetThirdMargin
            (
                NXOpen::NXObject * thirdMarginTag /** Sets the third margin tag */
            );
            /**Returns  the fourth margin tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * FourthMargin
            (
            );
            /**Sets  the fourth margin tag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFourthMargin
            (
                NXOpen::NXObject * fourthMarginTag /** Sets the fourth margin tag */
            );
            /** The method to cycle objects in view  @return  Output object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::NXObject * CycleObjectsInView
            (
                NXOpen::NXObject * viewTag /** The view to cycle */,
                int vseqNumber /** The View Sequence Number of the View must NOT be DSS_ALL_VIEWS or DSS_NO_VIEWS */,
                bool isDrawing /** Is this view a drawing */,
                NXOpen::NXObject * inObject /** Input object */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
