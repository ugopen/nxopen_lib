#ifndef NXOpen_HUMANDATA_HXX_INCLUDED
#define NXOpen_HUMANDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     HumanData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class HumanData;
    class NXObject;
    class HumanDataImpl;
    /** Represent the data used to create the human 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  HumanData : public TransientObject
    {
        /** This enum represents the database used for human creation */
        public: enum DatabaseType
        {
            DatabaseTypeNone/** none */ ,
            DatabaseTypeANSUR/** ansur */ ,
            DatabaseTypeNHANES/** nhanes */ 
        };

        /** This enum represents the gender of human */
        public: enum GenderType
        {
            GenderTypeMale/** male */ ,
            GenderTypeFemale/** female */ 
        };

        /** This enum represents the stature data type of human */
        public: enum StatureType
        {
            StatureTypePercentile99/** Indicate stature is 99% of population */,
            StatureTypePercentile95/** Indicate stature is 95% of population */,
            StatureTypePercentile50/** Indicate stature is 50% of population */,
            StatureTypePercentile5/** Indicate stature is 5% of population */,
            StatureTypePercentile1/** Indicate stature is 1% of population */,
            StatureTypeCustom/** Indicate stature value is the actual height height of the human */,
            StatureTypeRegress/** Indicate stature value is computed */
        };

        /** This enum represents the weight data type of human */
        public: enum WeightType
        {
            WeightTypePercentile99/** Indicate weight is 99% of population */,
            WeightTypePercentile95/** Indicate weight is 95% of population */,
            WeightTypePercentile50/** Indicate weight is 50% of population */,
            WeightTypePercentile5/** Indicate weight is 5% of population */,
            WeightTypePercentile1/** Indicate weight is 1% of population */,
            WeightTypeCustom/** Indicate weight value is the actual weight of the human */,
            WeightTypeRegress/** Indicate weight value is computed */
        };

        /** This enum represents the location of the reference point */
        public: enum ReferencePointType
        {
            ReferencePointTypeNo/** Indicate no reference point                  */,
            ReferencePointTypeLeftEye/** Indicate reference point at the left eye     */,
            ReferencePointTypeRightEye/** Indicate reference point at the right eye    */,
            ReferencePointTypeHPoint/** Indicate reference point at the H-point      */,
            ReferencePointTypeLeftToe/** Indicate reference point at the left toe     */,
            ReferencePointTypeRightToe/** Indicate reference point at the right toe    */,
            ReferencePointTypeNumberReferences/** Indicate the number of reference point types */
        };

        /** This enum represents the unit for stature */
        public: enum StatureUnitType
        {
            StatureUnitTypeInch/** Indicate inch for stature */,
            StatureUnitTypeMm/** Indicate mm for stature   */,
            StatureUnitTypeCm/** Indicate cm for stature   */,
            StatureUnitTypeM/** Indicate m for stature    */
        };

        /** This enum represents the unit for weight */
        public: enum WeightUnitType
        {
            WeightUnitTypeLb/** Indicate lb for weight */,
            WeightUnitTypeKg/** Indicate kg for weight */
        };

        /** This enum represents the types of the advanced scaling variable names */
        public: enum AdvancedScalingType
        {
            AdvancedScalingTypeAbdominalDepth/** Indicate scaling of abdominal depth         */,
            AdvancedScalingTypeAcromionHeight/** Indicate scaling of acromion height         */,
            AdvancedScalingTypeAnkleHeight/** Indicate scaling of ankle height            */,
            AdvancedScalingTypeArmLength/** Indicate scaling of arm length              */,
            AdvancedScalingTypeBiacromialBreadth/** Indicate scaling of biacromial breadth      */,
            AdvancedScalingTypeBideltoidBreadth/** Indicate scaling of bideltoid breadth       */,
            AdvancedScalingTypeButtockKneeLength/** Indicate scaling of buttock_knee_length     */,
            AdvancedScalingTypeElbowFingertipLength/** Indicate scaling of elbow_fingertip_length  */,
            AdvancedScalingTypeElbowRestHeight/** Indicate scaling of elbow_rest_height       */,
            AdvancedScalingTypeFootBreadth/** Indicate scaling of foot_breadth            */,
            AdvancedScalingTypeFootLength/** Indicate scaling of foot_length             */,
            AdvancedScalingTypeHandBreadth/** Indicate scaling of hand_breadth            */,
            AdvancedScalingTypeHandLength/** Indicate scaling of hand_length             */,
            AdvancedScalingTypeHeadBreadth/** Indicate scaling of head_breadth            */,
            AdvancedScalingTypeHeadHeight/** Indicate scaling of head_height             */,
            AdvancedScalingTypeHeadLength/** Indicate scaling of head_length             */,
            AdvancedScalingTypeHipBreadth/** Indicate scaling of hip_breadth             */,
            AdvancedScalingTypeInterpupilDistance/** Indicate scaling of interpupil_distance     */,
            AdvancedScalingTypeShoulderElbowLength/** Indicate scaling of shoulder_elbow_length   */,
            AdvancedScalingTypeSittingAcromialHeight/** Indicate scaling of sitting_acromial_height */,
            AdvancedScalingTypeSittingEyeHeight/** Indicate scaling of sitting_eye_height      */,
            AdvancedScalingTypeSittingHeight/** Indicate scaling of sitting_height          */,
            AdvancedScalingTypeSittingKneeHeight/** Indicate scaling of sitting_knee_height     */,
            AdvancedScalingTypeThighClearance/** Indicate scaling of thigh_clearance         */,
            AdvancedScalingTypeThumbtipReach/** Indicate scaling of thumbtip_reach          */
        };

        /** This enum represents the types of the segment scaling variable names */
        public: enum SegmentScalingType
        {
            SegmentScalingTypeHead/** Indicate scaling of head         */,
            SegmentScalingTypeNeck/** Indicate scaling of neck         */,
            SegmentScalingTypeTorso/** Indicate scaling of torso        */,
            SegmentScalingTypeUpperArm/** Indicate scaling of upper_arm    */,
            SegmentScalingTypeLowerArm/** Indicate scaling of lower_arm    */,
            SegmentScalingTypeHand/** Indicate scaling of hand         */,
            SegmentScalingTypeLowerTorso/** Indicate scaling of lower_torso  */,
            SegmentScalingTypeUpperLeg/** Indicate scaling of upper_leg    */,
            SegmentScalingTypeLowerLeg/** Indicate scaling of lower_leg    */,
            SegmentScalingTypeFoot/** Indicate scaling of foot         */
        };

        /** This enum represents the types of the joint names */
        public: enum JointType
        {
            JointTypeBaseOfNeck/** Indicate joint named base_of_neck    */,
            JointTypeLeftShoulder/** Indicate joint named left_shoulder   */,
            JointTypeRightShoulder/** Indicate joint named right_shoulder  */,
            JointTypeTorso/** Indicate joint named torso           */,
            JointTypeLeftElbow/** Indicate joint named left_elbow      */,
            JointTypeRightElbow/** Indicate joint named right_elbow     */,
            JointTypeLeftWrist/** Indicate joint named left_wrist      */,
            JointTypeRightWrist/** Indicate joint named right_wrist     */,
            JointTypeLthumb0/** Indicate joint named lthumb0         */,
            JointTypeLthumb1/** Indicate joint named lthumb1         */,
            JointTypeLthumb2/** Indicate joint named lthumb2         */,
            JointTypeLeftFinger00/** Indicate joint named left_finger00   */,
            JointTypeLinfinger01/** Indicate joint named linfinger01     */,
            JointTypeLinfinger02/** Indicate joint named linfinger02     */,
            JointTypeLeftFinger10/** Indicate joint named left_finger10   */,
            JointTypeLmidfinger11/** Indicate joint named lmidfinger11    */,
            JointTypeLmidfinger12/** Indicate joint named lmidfinger12    */,
            JointTypeLeftFinger20/** Indicate joint named left_finger20   */,
            JointTypeLringfinger21/** Indicate joint named lringfinger21   */,
            JointTypeLringfinger22/** Indicate joint named lringfinger22   */,
            JointTypeLeftFinger30/** Indicate joint named left_finger30   */,
            JointTypeLpinfinger31/** Indicate joint named lpinfinger31    */,
            JointTypeLpinfinger32/** Indicate joint named lpinfinger32    */,
            JointTypeRthumb0/** Indicate joint named rthumb0         */,
            JointTypeRthumb1/** Indicate joint named rthumb1         */,
            JointTypeRthumb2/** Indicate joint named rthumb2         */,
            JointTypeRightFinger00/** Indicate joint named right_finger00  */,
            JointTypeRinfinger01/** Indicate joint named rinfinger01     */,
            JointTypeRinfinger02/** Indicate joint named rinfinger02     */,
            JointTypeRightFinger10/** Indicate joint named right_finger10  */,
            JointTypeRmidfinger11/** Indicate joint named rmidfinger11    */,
            JointTypeRmidfinger12/** Indicate joint named rmidfinger12    */,
            JointTypeRightFinger20/** Indicate joint named right_finger20  */,
            JointTypeRringfinger21/** Indicate joint named rringfinger21   */,
            JointTypeRringfinger22/** Indicate joint named rringfinger22   */,
            JointTypeRightFinger30/** Indicate joint named right_finger30  */,
            JointTypeRpinfinger31/** Indicate joint named rpinfinger31    */,
            JointTypeRpinfinger32/** Indicate joint named rpinfinger32    */,
            JointTypeWaist/** Indicate joint named waist           */,
            JointTypeLeftHip/** Indicate joint named left_hip        */,
            JointTypeRightHip/** Indicate joint named right_hip       */,
            JointTypeLeftKnee/** Indicate joint named left_knee       */,
            JointTypeRightKnee/** Indicate joint named right_knee      */,
            JointTypeLeftAnkle/** Indicate joint named left_ankle      */,
            JointTypeRightAnkle/** Indicate joint named right_ankle     */,
            JointTypeLeftToes/** Indicate joint named left_toes       */,
            JointTypeRightToes/** Indicate joint named right_toes      */
        };

        /** This enum represents the types of inverse kinematics */
        public: enum InverseKinematicsType
        {
            InverseKinematicsTypeDynamicDrag/** Indicate dynamic drag type of inverse kinematics */,
            InverseKinematicsTypeActiveReach/** Indicate active reach type of inverse kinematics */
        };

        /** This enum represents the body parts of dynamic drag */
        public: enum InverseKinematicsBodyParts
        {
            InverseKinematicsBodyPartsHead/** Indicate inverse kinematics body parts named head           */,
            InverseKinematicsBodyPartsEyes/** Indicate inverse kinematics body parts named eyes           */,
            InverseKinematicsBodyPartsLeftHand/** Indicate inverse kinematics body parts named left hand      */,
            InverseKinematicsBodyPartsRightHand/** Indicate inverse kinematics body parts named right hand     */,
            InverseKinematicsBodyPartsLeftElbow/** Indicate inverse kinematics body parts named left elbow     */,
            InverseKinematicsBodyPartsRightElbow/** Indicate inverse kinematics body parts named right elbow    */,
            InverseKinematicsBodyPartsLeftKnee/** Indicate inverse kinematics body parts named left knee      */,
            InverseKinematicsBodyPartsRightKnee/** Indicate inverse kinematics body parts named right knee     */,
            InverseKinematicsBodyPartsLeftFoot/** Indicate inverse kinematics body parts named left foot      */,
            InverseKinematicsBodyPartsRightFoot/** Indicate inverse kinematics body parts named right foot     */,
            InverseKinematicsBodyPartsCenterOfMass/** Indicate inverse kinematics body parts named center of mass */
        };

        /** This enum represents the motion initiation joint of hand dynamic drag */
        public: enum InverseKinematicsInitJoint
        {
            InverseKinematicsInitJointShoulder/** Indicate starting at the shoulder for simple arm motions
                                                                                       without changing the upper body position. */,
            InverseKinematicsInitJointWaist/** Indicate starting arm motion at the waist and using the
                                                                                       entire upper body                         */
        };

        /** This enum represents the balance type of active reach */
        public: enum InverseKinematicsBalanceType
        {
            InverseKinematicsBalanceTypeAllowStep/** Indicate human is allowed to move one step to keep balance                   */,
            InverseKinematicsBalanceTypeNoStep/** Indicate human foot is fixate without step                                   */,
            InverseKinematicsBalanceTypeKeepSeated/** Indicate human is in a seated position and thus supported by the lower torso */
        };

        /** This enum represents the head and eye type of active reach */
        public: enum InverseKinematicsHeadEyeType
        {
            InverseKinematicsHeadEyeTypeFollowLastDefined/** Indicate the position of head and eye follow the last defined position */,
            InverseKinematicsHeadEyeTypeFixate/** Indicate the position of head and eye is fixate                        */
        };

        /** This enum represents the type to define hand goal position */
        public: enum HandGoalType
        {
            HandGoalTypeGoalPoint/** Indicate the hand goal is point       */,
            HandGoalTypeGoalCsys/** Indicate the hand goal is csys        */,
            HandGoalTypeHandFigure/** Indicate the hand goal is hand figure */
        };

        /** This enum represents the types of human hand foot */
        public: enum HandFootType
        {
            HandFootTypeHand/** Indicate the hand */,
            HandFootTypeFoot/** Indicate the foot */
        };

        /** This enum represents the types of human side */
        public: enum SideType
        {
            SideTypeLeft/** Indicate the left  side of human */,
            SideTypeRight/** Indicate the right side of human */,
            SideTypeCenter/** Indicate the center of human     */
        };

        /** This enum represents the body parts of edit human display */
        public: enum EditDisplayBodyParts
        {
            EditDisplayBodyPartsLeftEyePoint/** Indicate edit display body parts named left eye point   */,
            EditDisplayBodyPartsRightEyePoint/** Indicate edit display body parts named right eye point  */,
            EditDisplayBodyPartsMidEyePoint/** Indicate edit display body parts named mid eye point    */,
            EditDisplayBodyPartsHipPoint/** Indicate edit display body parts named hip point        */,
            EditDisplayBodyPartsLeftToePoint/** Indicate edit display body parts named left toe point   */,
            EditDisplayBodyPartsRightToePoint/** Indicate edit display body parts named right toe point  */,
            EditDisplayBodyPartsLeftHeelPoint/** Indicate edit display body parts named left heel point  */,
            EditDisplayBodyPartsRightHeelPoint/** Indicate edit display body parts named right heel point */,
            EditDisplayBodyPartsCenterOfMass/** Indicate edit display body parts named center of mass   */,
            EditDisplayBodyPartsAll/** Indicate edit display body parts named all              */
        };

        private: HumanDataImpl * m_humandata_impl;
        /// \cond NX_NO_DOC 
        public: explicit HumanData(void *ptr);
        /// \endcond 
        /** Free resources associated with the instance. After this method
                is called, it is illegal to use the object.  In .NET, this method
                is automatically called when the object is deleted by the garbage
                collector. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~HumanData();
        /**Returns  the name of the human feature 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString Name
        (
        );
        /**Returns  the human figure file used to create the human feature 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString FigureFile
        (
        );
        /**Returns  the gender of the human 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanData::GenderType Gender
        (
        );
        /**Returns  the stature type for stature value 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanData::StatureType StatureOption
        (
        );
        /**Returns  the stature value 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: double StatureValue
        (
        );
        /**Returns  the weight type for weight value 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanData::WeightType WeightOption
        (
        );
        /**Returns  the weight value 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: double WeightValue
        (
        );
        /**Returns  the flag for associative reference point 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: bool AssocReferencePoint
        (
        );
        /**Returns  the reference point type 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanData::ReferencePointType ReferencePointLocationType
        (
        );
        /**Returns  the reference point 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::NXObject * ReferencePoint
        (
        );
        /** The transformation matrix of the human 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void GetXform
        (
            NXOpen::Matrix3x3* orientation /** orientation */ ,
            NXOpen::Point3d* position /** position */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
