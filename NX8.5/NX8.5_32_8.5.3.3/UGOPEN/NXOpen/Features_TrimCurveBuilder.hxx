#ifndef NXOpen_FEATURES_TRIMCURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_TRIMCURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_TrimCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_TrimCurveBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveOptions.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class TrimCurveBuilder;
    }
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveOptions;
    }
    class Plane;
    class Section;
    class SelectObjectList;
    class SelectPoint;
    namespace Features
    {
        class _TrimCurveBuilderBuilder;
        class TrimCurveBuilderImpl;
        /**
            Represents a @link Features::TrimCurve Features::TrimCurve@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateTrimCurveBuilder  Features::FeatureCollection::CreateTrimCurveBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CurveEndOption </td> <td> 
         
        Start </td> </tr> 

        <tr><td> 
         
        CurveExtensionType </td> <td> 
         
        Natural </td> </tr> 

        <tr><td> 
         
        CurveOptions.Associative </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        CurveTrimRegionOption </td> <td> 
         
        Inside </td> </tr> 

        <tr><td> 
         
        FirstBoundingObjectEndOption </td> <td> 
         
        Start </td> </tr> 

        <tr><td> 
         
        FirstBoundingObjectOption </td> <td> 
         
        SelectObject </td> </tr> 

        <tr><td> 
         
        InteresectionDirectionOption </td> <td> 
         
        RelativeToWcs </td> </tr> 

        <tr><td> 
         
        InteresectionMethod </td> <td> 
         
        Inferred </td> </tr> 

        <tr><td> 
         
        SecondBoundingObjectEndOption </td> <td> 
         
        Start </td> </tr> 

        <tr><td> 
         
        SecondBoundingObjectOption </td> <td> 
         
        SelectObject </td> </tr> 

        </table>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  TrimCurveBuilder : public Features::FeatureBuilder
        {
            /** Represents the trim curve end options */
            public: enum CurveEndOptions
            {
                CurveEndOptionsStart/** Trim curve from start */,
                CurveEndOptionsEnd/** Trim curve from end */
            };

            /** Represents the trim curve first bounding object options */
            public: enum FirstBoundingObjectOptions
            {
                FirstBoundingObjectOptionsSelectObject/** Select object */,
                FirstBoundingObjectOptionsSpecifyPlane/** Define plane */
            };

            /** Represents the trim curve first bounding object end options */
            public: enum FirstBoundingObjectEndOptions
            {
                FirstBoundingObjectEndOptionsStart/** Trim first bounding object from start */,
                FirstBoundingObjectEndOptionsEnd/** Trim first bounding object from end */
            };

            /** Represents the trim curve second bounding object options */
            public: enum SecondBoundingObjectOptions
            {
                SecondBoundingObjectOptionsSelectObject/** Select object */,
                SecondBoundingObjectOptionsSpecifyPlane/** Define plane */
            };

            /** Represents the trim curve second bounding object end options */
            public: enum SecondBoundingObjectEndOptions
            {
                SecondBoundingObjectEndOptionsStart/** Trim second ounding object from start */,
                SecondBoundingObjectEndOptionsEnd/** Trim second bounding object from end */
            };

            /** Represents the trim curve interesection direction options */
            public: enum InteresectionDirectionOptions
            {
                InteresectionDirectionOptionsShortest3dDistance/** Shortest 3d distance */,
                InteresectionDirectionOptionsRelativeToWcs/** Relative to WCS */,
                InteresectionDirectionOptionsAlongAVector/** Along a vector */,
                InteresectionDirectionOptionsAlongScreenNormal/** Along screen normal */
            };

            /** Represents the trim curve interesection methods */
            public: enum InteresectionMethods
            {
                InteresectionMethodsInferred/** Inferred */,
                InteresectionMethodsUserDefined/** User defined */
            };

            /** Represents the trim curve extension types */
            public: enum CurveExtensionTypes
            {
                CurveExtensionTypesNatural/** Natural */,
                CurveExtensionTypesLinear/** Linear */,
                CurveExtensionTypesCircular/** Circular */,
                CurveExtensionTypesNone/** None */
            };

            /** Represents the trim curve trim region options */
            public: enum CurveTrimRegionOptions
            {
                CurveTrimRegionOptionsInside/** Inside */,
                CurveTrimRegionOptionsOutside/** Outside */
            };

            private: TrimCurveBuilderImpl * m_trimcurvebuilder_impl;
            private: friend class  _TrimCurveBuilderBuilder;
            protected: TrimCurveBuilder();
            public: ~TrimCurveBuilder();
            /**Returns  the curves to trim 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * CurvesToTrim
            (
            );
            /**Returns  the end of the curve that would be trimmed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurveBuilder::CurveEndOptions CurveEndOption
            (
            );
            /**Sets  the end of the curve that would be trimmed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetCurveEndOption
            (
                NXOpen::Features::TrimCurveBuilder::CurveEndOptions curveEndOption /** curveendoption */ 
            );
            /**Returns  the first bounding object option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurveBuilder::FirstBoundingObjectOptions FirstBoundingObjectOption
            (
            );
            /**Sets  the first bounding object option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetFirstBoundingObjectOption
            (
                NXOpen::Features::TrimCurveBuilder::FirstBoundingObjectOptions firstBoundingObjectOption /** firstboundingobjectoption */ 
            );
            /**Returns  the objects for the first boundary against which the selected curves are to be trimmed.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectObjectList * FirstBoundingObject
            (
            );
            /**Returns  the end of the first bounding object which would be trimmed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurveBuilder::FirstBoundingObjectEndOptions FirstBoundingObjectEndOption
            (
            );
            /**Sets  the end of the first bounding object which would be trimmed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetFirstBoundingObjectEndOption
            (
                NXOpen::Features::TrimCurveBuilder::FirstBoundingObjectEndOptions firstBoundingObjectEndOption /** firstboundingobjectendoption */ 
            );
            /**Returns  the first bounding object plane 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * FirstBoundingPlane
            (
            );
            /**Sets  the first bounding object plane 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetFirstBoundingPlane
            (
                NXOpen::Plane * firstPlane /** firstplane */ 
            );
            /**Returns  the second bounding object option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurveBuilder::SecondBoundingObjectOptions SecondBoundingObjectOption
            (
            );
            /**Sets  the second bounding object option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSecondBoundingObjectOption
            (
                NXOpen::Features::TrimCurveBuilder::SecondBoundingObjectOptions secondboundingObjectOption /** secondboundingobjectoption */ 
            );
            /**Returns  the objects for the second boundary against which the selected curves are to be trimmed.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectObjectList * SecondBoundingObject
            (
            );
            /**Returns  the first bounding object plane 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * SecondBoundingPlane
            (
            );
            /**Sets  the first bounding object plane 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSecondBoundingPlane
            (
                NXOpen::Plane * secondPlane /** secondplane */ 
            );
            /**Returns  the end of the second bounding object which would be trimmed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurveBuilder::SecondBoundingObjectEndOptions SecondBoundingObjectEndOption
            (
            );
            /**Sets  the end of the second bounding object which would be trimmed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSecondBoundingObjectEndOption
            (
                NXOpen::Features::TrimCurveBuilder::SecondBoundingObjectEndOptions secondBoundingObjectEndOption /** secondboundingobjectendoption */ 
            );
            /**Returns  the method the system uses to find object intersections 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurveBuilder::InteresectionDirectionOptions InteresectionDirectionOption
            (
            );
            /**Sets  the method the system uses to find object intersections 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetInteresectionDirectionOption
            (
                NXOpen::Features::TrimCurveBuilder::InteresectionDirectionOptions interesectionDirectionOption /** interesectiondirectionoption */ 
            );
            /**Returns  the vector direction for the trim operation 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * InteresectionOptionVector
            (
            );
            /**Sets  the vector direction for the trim operation 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetInteresectionOptionVector
            (
                NXOpen::Direction * interesectionOptionVector /** interesectionoptionvector */ 
            );
            /**Returns  the method to be used to determine the intersections 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurveBuilder::InteresectionMethods InteresectionMethod
            (
            );
            /**Sets  the method to be used to determine the intersections 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetInteresectionMethod
            (
                NXOpen::Features::TrimCurveBuilder::InteresectionMethods interesectionMethod /** interesectionmethod */ 
            );
            /**Returns  the curves the end to trim needs to be reversed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectObjectList * ReverseTrimEnd
            (
            );
            /**Returns  the shape of the extension, if the curve to be trimmed is to be extended 
                        to its bounding object(s)
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurveBuilder::CurveExtensionTypes CurveExtensionType
            (
            );
            /**Sets  the shape of the extension, if the curve to be trimmed is to be extended 
                        to its bounding object(s)
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetCurveExtensionType
            (
                NXOpen::Features::TrimCurveBuilder::CurveExtensionTypes curveExtensionType /** curveextensiontype */ 
            );
            /**Returns  the portion of the curves to be trimmed
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TrimCurveBuilder::CurveTrimRegionOptions CurveTrimRegionOption
            (
            );
            /**Sets  the portion of the curves to be trimmed
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetCurveTrimRegionOption
            (
                NXOpen::Features::TrimCurveBuilder::CurveTrimRegionOptions curveTrimRegionOption /** curvetrimregionoption */ 
            );
            /**Returns  the option whether bounding objects are to be trimmed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool TrimBoundingObjects
            (
            );
            /**Sets  the option whether bounding objects are to be trimmed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetTrimBoundingObjects
            (
                bool trimBoundingObjects /** trimboundingobjects */ 
            );
            /**Returns  the Curve Options
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveOptions * CurveOptions
            (
            );
            /**Returns  the pick point for the first bounding object
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d FirstBoundingObjectPickPoint
            (
            );
            /**Sets  the pick point for the first bounding object
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetFirstBoundingObjectPickPoint
            (
                const NXOpen::Point3d & firstBndgObjPickPoint /** firstbndgobjpickpoint */ 
            );
            /**Returns  the pick point for the second bounding object
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d SecondBoundingObjectPickPoint
            (
            );
            /**Sets  the pick point for the second bounding object
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSecondBoundingObjectPickPoint
            (
                const NXOpen::Point3d & secondBndgObjPickPoint /** secondbndgobjpickpoint */ 
            );
            /**Returns  the first user defined intersection point.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectPoint * FirstReferenceIntersection
            (
            );
            /**Returns  the second user defined intersection point.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectPoint * SecondReferenceIntersection
            (
            );
            /**Returns  the list of curves with the pick points 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectObjectList * CurveList
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
