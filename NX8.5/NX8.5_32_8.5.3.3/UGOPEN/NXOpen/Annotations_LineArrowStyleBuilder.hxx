#ifndef NXOpen_ANNOTATIONS_LINEARROWSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LINEARROWSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LineArrowStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_LineArrowStyleBuilder.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class LineArrowStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace Annotations
    {
        class _LineArrowStyleBuilderBuilder;
        class LineArrowStyleBuilderImpl;
        /**
            Represents a @link Annotations::LineArrowStyleBuilder Annotations::LineArrowStyleBuilder@endlink .
            This class queries and sets preferences that apply to leaders and arrow and 
            extension lines when creating or editing annotations, including dimensions.
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  LineArrowStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: LineArrowStyleBuilderImpl * m_linearrowstylebuilder_impl;
            private: friend class  _LineArrowStyleBuilderBuilder;
            protected: LineArrowStyleBuilder();
            public: ~LineArrowStyleBuilder();
            /**Returns  the first arrowhead type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ArrowheadType FirstArrowType
            (
            );
            /**Sets  the first arrowhead type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFirstArrowType
            (
                NXOpen::Annotations::ArrowheadType firstArrowType /** firstarrowtype */ 
            );
            /**Returns  the second arrowhead type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ArrowheadType SecondArrowType
            (
            );
            /**Sets  the second arrowhead type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSecondArrowType
            (
                NXOpen::Annotations::ArrowheadType secondArrowType /** secondarrowtype */ 
            );
            /**Returns  the leader location 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::VerticalTextJustification LeaderLocation
            (
            );
            /**Sets  the leader location 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLeaderLocation
            (
                NXOpen::Annotations::VerticalTextJustification leaderLocation /** leaderlocation */ 
            );
            /**Returns  the arrowhead length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowheadLength
            (
            );
            /**Sets  the arrowhead length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetArrowheadLength
            (
                double arrowheadLength /** arrowheadlength */ 
            );
            /**Returns  the arrowhead included angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowheadIncludedAngle
            (
            );
            /**Sets  the arrowhead included angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetArrowheadIncludedAngle
            (
                double arrowheadIncludedAngle /** arrowheadincludedangle */ 
            );
            /**Returns  the dot arrowhead diameter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DotArrowheadDiameter
            (
            );
            /**Sets  the dot arrowhead diameter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDotArrowheadDiameter
            (
                double dotArrowheadDiameter /** dotarrowheaddiameter */ 
            );
            /**Returns  the stub length. This is the size of the dogleg on a label or dimension 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double StubLength
            (
            );
            /**Sets  the stub length. This is the size of the dogleg on a label or dimension 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStubLength
            (
                double stubLength /** stublength */ 
            );
            /**Returns  the distance from the text to the dimension line(stub) or arc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double TextToLineDistance
            (
            );
            /**Sets  the distance from the text to the dimension line(stub) or arc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTextToLineDistance
            (
                double textToLineDistance /** texttolinedistance */ 
            );
            /**Returns  the distance an extension line or arc extends past the dimension line or arc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double LinePastArrowDistance
            (
            );
            /**Sets  the distance an extension line or arc extends past the dimension line or arc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLinePastArrowDistance
            (
                double linePastArrowDistance /** linepastarrowdistance */ 
            );
            /**Returns  the extension line angle. This angle only applies to vertical and horizontal dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ObliqueExtensionLineAngle
            (
            );
            /**Sets  the extension line angle. This angle only applies to vertical and horizontal dimensions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetObliqueExtensionLineAngle
            (
                double obliqueExtensionLineAngle /** obliqueextensionlineangle */ 
            );
            /**Returns  the distance from the position on the object being dimensioned to
                        the end of the first extension line or arc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double FirstPosToExtensionLineDistance
            (
            );
            /**Sets  the distance from the position on the object being dimensioned to
                        the end of the first extension line or arc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFirstPosToExtensionLineDistance
            (
                double firstPosToExtensionLineDistance /** firstpostoextensionlinedistance */ 
            );
            /**Returns  the  distance from the position on the object being dimensioned to
                        the end of the second extension line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double SecondPosToExtensionLineDistance
            (
            );
            /**Sets  the  distance from the position on the object being dimensioned to
                        the end of the second extension line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSecondPosToExtensionLineDistance
            (
                double secondPosToExtensionLineDistance /** secondpostoextensionlinedistance */ 
            );
            /**Returns  the distance from the apex of the datum arrowhead to the
                        end of the extension line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DatumLengthPastArrow
            (
            );
            /**Sets  the distance from the apex of the datum arrowhead to the
                        end of the extension line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDatumLengthPastArrow
            (
                double datumLengthPastArrow /** datumlengthpastarrow */ 
            );
            /**Returns  the character size factor which controls the distance between the stub and label text
                        when the text displays above the stub line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double TextOverStubFactor
            (
            );
            /**Sets  the character size factor which controls the distance between the stub and label text
                        when the text displays above the stub line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTextOverStubFactor
            (
                double textOverStubFactor /** textoverstubfactor */ 
            );
            /**Returns  the character size factor that controls the gap between text and the leader 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double TextOverLeaderGapFactor
            (
            );
            /**Sets  the character size factor that controls the gap between text and the leader 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTextOverLeaderGapFactor
            (
                double textOverLeaderGapFactor /** textoverleadergapfactor */ 
            );
            /**Returns  the first extension line color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * FirstExtensionLineColor
            (
            );
            /**Sets  the first extension line color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFirstExtensionLineColor
            (
                NXOpen::NXColor * firstExtensionLineColor /** firstextensionlinecolor */ 
            );
            /**Returns  the first extension line font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont FirstExtensionLineFont
            (
            );
            /**Sets  the first extension line font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFirstExtensionLineFont
            (
                NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont /** firstextensionlinefont */ 
            );
            /**Returns  the first extension line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth FirstExtensionLineWidth
            (
            );
            /**Sets  the first extension line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFirstExtensionLineWidth
            (
                NXOpen::Annotations::LineWidth firstExtensionLineWidth /** firstextensionlinewidth */ 
            );
            /**Returns  the first arrowhead color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * FirstArrowheadColor
            (
            );
            /**Sets  the first arrowhead color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFirstArrowheadColor
            (
                NXOpen::NXColor * firstArrowheadColor /** firstarrowheadcolor */ 
            );
            /**Returns  the first arrowhead font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont FirstArrowheadFont
            (
            );
            /**Sets  the first arrowhead font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFirstArrowheadFont
            (
                NXOpen::DisplayableObject::ObjectFont firstArrowheadFont /** firstarrowheadfont */ 
            );
            /**Returns  the first arrowhead width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth FirstArrowheadWidth
            (
            );
            /**Sets  the first arrowhead width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFirstArrowheadWidth
            (
                NXOpen::Annotations::LineWidth firstArrowheadWidth /** firstarrowheadwidth */ 
            );
            /**Returns  the first arrow line color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * FirstArrowLineColor
            (
            );
            /**Sets  the first arrow line color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFirstArrowLineColor
            (
                NXOpen::NXColor * firstArrowLineColor /** firstarrowlinecolor */ 
            );
            /**Returns  the first arrow line font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont FirstArrowLineFont
            (
            );
            /**Sets  the first arrow line font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFirstArrowLineFont
            (
                NXOpen::DisplayableObject::ObjectFont firstArrowLineFont /** firstarrowlinefont */ 
            );
            /**Returns  the first arrow line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth FirstArrowLineWidth
            (
            );
            /**Sets  the first arrow line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFirstArrowLineWidth
            (
                NXOpen::Annotations::LineWidth firstArrowLineWidth /** firstarrowlinewidth */ 
            );
            /**Returns  the second extension line color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SecondExtensionLineColor
            (
            );
            /**Sets  the second extension line color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSecondExtensionLineColor
            (
                NXOpen::NXColor * secondExtensionLineColor /** secondextensionlinecolor */ 
            );
            /**Returns  the second extension line font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont SecondExtensionLineFont
            (
            );
            /**Sets  the second extension line font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSecondExtensionLineFont
            (
                NXOpen::DisplayableObject::ObjectFont secondExtensionLineFont /** secondextensionlinefont */ 
            );
            /**Returns  the second extension line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth SecondExtensionLineWidth
            (
            );
            /**Sets  the second extension line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSecondExtensionLineWidth
            (
                NXOpen::Annotations::LineWidth secondExtensionLineWidth /** secondextensionlinewidth */ 
            );
            /**Returns  the second arrowhead color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SecondArrowheadColor
            (
            );
            /**Sets  the second arrowhead color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSecondArrowheadColor
            (
                NXOpen::NXColor * secondArrowheadColor /** secondarrowheadcolor */ 
            );
            /**Returns  the second arrowhead font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont SecondArrowheadFont
            (
            );
            /**Sets  the second arrowhead font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSecondArrowheadFont
            (
                NXOpen::DisplayableObject::ObjectFont secondArrowheadFont /** secondarrowheadfont */ 
            );
            /**Returns  the second arrowhead width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth SecondArrowheadWidth
            (
            );
            /**Sets  the second arrowhead width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSecondArrowheadWidth
            (
                NXOpen::Annotations::LineWidth secondArrowheadWidth /** secondarrowheadwidth */ 
            );
            /**Returns  the second arrow line color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SecondArrowLineColor
            (
            );
            /**Sets  the second arrow line color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSecondArrowLineColor
            (
                NXOpen::NXColor * secondArrowLineColor /** secondarrowlinecolor */ 
            );
            /**Returns  the second arrow line font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont SecondArrowLineFont
            (
            );
            /**Sets  the second arrow line font 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSecondArrowLineFont
            (
                NXOpen::DisplayableObject::ObjectFont secondArrowLineFont /** secondarrowlinefont */ 
            );
            /**Returns  the second arrow line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth SecondArrowLineWidth
            (
            );
            /**Sets  the second arrow line width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSecondArrowLineWidth
            (
                NXOpen::Annotations::LineWidth secondArrowLineWidth /** secondarrowlinewidth */ 
            );
            /**Returns  the size of all around symbol. This is also used for inner diameter of all over symbol 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double AllAroundSymbolSize
            (
            );
            /**Sets  the size of all around symbol. This is also used for inner diameter of all over symbol 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAllAroundSymbolSize
            (
                double allAroundSymbol /** allaroundsymbol */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
