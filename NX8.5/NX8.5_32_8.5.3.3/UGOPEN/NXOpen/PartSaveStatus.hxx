#ifndef NXOpen_PARTSAVESTATUS_HXX_INCLUDED
#define NXOpen_PARTSAVESTATUS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PartSaveStatus.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class PartSaveStatus;
    class BasePart;
    class PartSaveStatusImpl;
    /** This class represents a list of part names with associated status codes that serve
        to communicate why these parts where not able to be saved during part save.

     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  PartSaveStatus : public TransientObject
    {
        private: PartSaveStatusImpl * m_partsavestatus_impl;
        /// \cond NX_NO_DOC 
        public: explicit PartSaveStatus(void *ptr);
        /// \endcond 
        /** Free resources associated with the instance. After this method
            is called, it is illegal to use the object.  In .NET, this method
            is automatically called when the object is deleted by the garbage
            collector. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~PartSaveStatus();
        /**Returns  the number of parts that could not be saved 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: int NumberUnsavedParts
        (
        );
        /** Returns the name of a particular part that could not be saved  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart * GetPart
        (
            int i /** Index into list of unsaved parts */
        );
        /** Returns the error code indicating the reason the part could not
            be saved  @return  Error code reason that part could not
                                       be saved 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: int GetStatus
        (
            int i /** Index into list of unsaved parts */
        );
        /**Returns  the number of objects that could not be saved 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: int NumberUnsavedObjects
        (
        );
        /** Returns the error code indicating the reason the part could not
            be saved  @return  Error code reason that part could not
                                       be saved 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: int GetObjectStatus
        (
            int i /** Index into list of unsaved parts */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
