#ifndef NXOpen_PARTREOPENREPORT_HXX_INCLUDED
#define NXOpen_PARTREOPENREPORT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PartReopenReport.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PartReopenStatus.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class PartReopenReport;
    class PartReopenStatus;
    class PartReopenReportImpl;
    /** Contains information about a part and its components after it has been
    reopened. Instances of this class are returned from the following reopen
    methods:
    @link BasePart::Reopen BasePart::Reopen@endlink 
    @link BasePart::ReopenAs BasePart::ReopenAs@endlink 
    @link PartCollection::ReopenAll PartCollection::ReopenAll@endlink 

     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  PartReopenReport : public TransientObject
    {
        private: PartReopenReportImpl * m_partreopenreport_impl;
        /// \cond NX_NO_DOC 
        public: explicit PartReopenReport(void *ptr);
        /// \endcond 
        /** Free resources associated with the instance. After this method
            is called, it is illegal to use the object.  In .NET, this method
            is automatically called when the object is deleted by the garbage
            collector. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~PartReopenReport();
        /**Returns  the number of parts that reopen was attempted on. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: int NumberReopenParts
        (
        );
        /**Returns  whether or not the display part was reopened by the reopen operation. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool WasDisplayPartReopened
        (
        );
        /**Returns  whether or not the work part failed to reset during the reopen operation. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool CouldNotResetWorkPart
        (
        );
        /** Returns a list of objects representing information about the parts that were
            reopened during the reopen operation. See
            @link PartReopenStatus PartReopenStatus@endlink .  @return  
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::PartReopenStatus *> GetStatuses
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
