#ifndef NXOpen_GEOMETRICUTILITIES_CURVELENGTHDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CURVELENGTHDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_CurveLengthData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class CurveLengthData;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        /** This enum represents the extension method */
        enum ExtensionMethod
        {
            ExtensionMethodIncremental/** Extension Method Incremental */,
            ExtensionMethodTotal/** Extension Method Total */
        };

        /** This enum represents the extension side */
        enum ExtensionSide
        {
            ExtensionSideStartEnd/** Extension Side Start/End */,
            ExtensionSideStart/** Extension Side Start */,
            ExtensionSideEnd/** Extension Side End */,
            ExtensionSideSymmetric/** Extension Side Symmetric */
        };

        /** This enum represents extension direction */
        enum ExtensionDirection
        {
            ExtensionDirectionNatural/** Extension Direction Natural */,
            ExtensionDirectionLinear/** Extension Direction Circular */,
            ExtensionDirectionCircular/** Extension Direction Linear */
        };

    }
    namespace GeometricUtilities
    {
        class _CurveLengthDataBuilder;
        class CurveLengthDataImpl;
        /** Represents an CurveLength data. 
            
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  CurveLengthData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: CurveLengthDataImpl * m_curvelengthdata_impl;
            private: friend class  _CurveLengthDataBuilder;
            protected: CurveLengthData();
            public: ~CurveLengthData();
            /**Sets  the total or incremental extension method 
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtensionMethod
            (
                NXOpen::GeometricUtilities::ExtensionMethod extensionMethod /** CurveLength extension method */
            );
            /**Returns  the total or incremental extension method 
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::ExtensionMethod ExtensionMethod
            (
            );
            /**Sets  the extension direction
                   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtensionDirection
            (
                NXOpen::GeometricUtilities::ExtensionDirection extensionDirection /** CurveLength extension direction */
            );
            /**Returns  the extension direction
                   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::ExtensionDirection ExtensionDirection
            (
            );
            /**Sets  the extension side option 
                   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtensionSide
            (
                NXOpen::GeometricUtilities::ExtensionSide extensionSide /** CurveLength both ends */
            );
            /**Returns  the extension side option 
                   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::ExtensionSide ExtensionSide
            (
            );
            /** Set start distance 
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartDistance
            (
                const NXString & startDistance /** Start distance   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set start distance 
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetStartDistance
            (
                const char * startDistance /** Start distance   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the start distance 
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * StartDistance
            (
            );
            /** Set end distance 
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndDistance
            (
                const NXString & endDistance /** End distance   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set end distance 
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetEndDistance
            (
                const char * endDistance /** End distance   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the end distance 
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * EndDistance
            (
            );
            /** Set total length
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTotalLength
            (
                const NXString & totalLength /** Total Length   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set total length
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetTotalLength
            (
                const char * totalLength /** Total Length   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the total length
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * TotalLength
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
