#ifndef NXOpen_GEOMETRICUTILITIES_REPLASSTBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_REPLASSTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_ReplAsstBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_EntityUsageInfo.hxx>
#include <NXOpen/GeometricUtilities_ParentEquivalencyMap.hxx>
#include <NXOpen/GeometricUtilities_ReplAsstBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class ReplAsstBuilder;
    }
    class DisplayableObject;
    namespace GeometricUtilities
    {
        class EntityUsageInfo;
    }
    namespace GeometricUtilities
    {
        class EntityUsageInfoList;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class ParentEquivalencyMap;
    }
    namespace GeometricUtilities
    {
        class ParentEquivalencyMapList;
    }
    namespace GeometricUtilities
    {
        class _ReplAsstBuilderBuilder;
        class ReplAsstBuilderImpl;
        /**
            Represents a @link GeometricUtilities::ReplAsstBuilder GeometricUtilities::ReplAsstBuilder@endlink . This is the primary data container
            for Replacement Assistant mapping environment available on editing Linked Body, Linked Face, Extract Body, 
            Extract Face and Mirror Body features. Execute Enter() before invoking any match creation or automatic matching APIs.
            Call Exit() to exit the mapping environment.
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  ReplAsstBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: ReplAsstBuilderImpl * m_replasstbuilder_impl;
            private: friend class  _ReplAsstBuilderBuilder;
            protected: ReplAsstBuilder();
            public: ~ReplAsstBuilder();
            /** Entry and re-entry to the Replacement Assistant mapping environment. 
                        This function needs to be executed before invoking any match creation or automatic matching APIs.
                        The matches inferred internally (internal identifier reuse, inherited from parent and siblings)
                        will be populated when this function is executed for the first time after selecting a
                        replacement entity. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void Enter
            (
            );
            /** Exit the Replacement Assistant mapping environment. 
                        Any match creation or automatic matchping API cannot be executed after this function is called.
                        
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void Exit
            (
            );
            /**Returns  the list of all Parent Equivalency Map objects 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ParentEquivalencyMapList * MatchList
            (
            );
            /** This is the default creator for a parent equivalency map.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ParentEquivalencyMap * CreateEmptyMatch
            (
            );
            /**Returns  the list of all Entity Usage Info objects 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EntityUsageInfoList * UsageInfoList
            (
            );
            /** Query the downstream usage of the current feature's output entities and populate the usageInfoList.
                        This API need be called only ONCE per feature being reparented.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int QueryFeatureOutputUsage
            (
            );
            /** Perform automatic matching based on user-defined object names. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateNameBasedMaps
            (
                std::vector<NXOpen::GeometricUtilities::ParentEquivalencyMap *> & maps /** new maps created by name-based matching */
            );
            /** Infer more matches from matches already 'Accepted'. Add [array_order_guaranteed] annotation for output array when API wrap allows the same.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateInferredMaps
            (
                std::vector<NXOpen::GeometricUtilities::ParentEquivalencyMap *> & maps /** new maps created by inferring */
            );
            /** Perform geometric matching. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateGeometricMaps
            (
                std::vector<NXOpen::GeometricUtilities::ParentEquivalencyMap *> & maps /** new maps created by geometric matching */
            );
            /**Returns  the deviation allowance for geometric matching 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double Allowance
            (
            );
            /**Sets  the deviation allowance for geometric matching 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAllowance
            (
                double allowance /** allowance */ 
            );
            /**Returns  the one to one auto matching preference 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool OneToOne
            (
            );
            /**Sets  the one to one auto matching preference 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOneToOne
            (
                bool oneToOne /** onetoone */ 
            );
            /**Returns  the automatic matching preference to match sheet boundaries only 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool MatchSheetBoundariesOnly
            (
            );
            /**Sets  the automatic matching preference to match sheet boundaries only 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMatchSheetBoundariesOnly
            (
                bool sheetBoundariesOnly /** sheetboundariesonly */ 
            );
            /** Set the source entities for the Replacement Assistant. If there are matches already
                    created and the body is changed, the matches will be deleted. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewParents
            (
                const std::vector<NXOpen::DisplayableObject *> & replacementObjects /** replacement objects */
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
