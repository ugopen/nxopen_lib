#ifndef NXOpen_CAE_AFUDATA_HXX_INCLUDED
#define NXOpen_CAE_AFUDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AfuData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AfuHeaderId.hxx>
#include <NXOpen/CAE_XYFunctionDataTypes.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class AfuData;
    }
    namespace CAE
    {
        class AfuHeaderId;
    }
    namespace CAE
    {
        class AfuDataImpl;
        /** the data used to create an AFU Data Record 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  AfuData : public TransientObject
        {
            /** Defines abscissa data type for AFU data record */
            public: enum AbscissaType
            {
                AbscissaTypeEven/** The abscissa value is even and calculated by increment */,
                AbscissaTypeUneven/** The abscissa value is uneven and input by user */,
                AbscissaTypeSequence/** The abscissa value is a sequence and input by user */
            };

            /** Defines ordinate data type for AFU data record */
            public: enum OrdinateType
            {
                OrdinateTypeReal/** Ordinate Data is a single Real value */,
                OrdinateTypeRealImaginary/** Ordinate Data is Complex with Real and Imaginary values */,
                OrdinateTypeMagnitudePhase/** Ordinate Data is Complex with Amplitude and Phase values*/
            };

            private: AfuDataImpl * m_afudata_impl;
            /// \cond NX_NO_DOC 
            public: explicit AfuData(void *ptr);
            /// \endcond 
            /** Free the AFU Data transient object memory 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~AfuData();
            /**Sets  the name of AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetFileName
            (
                const NXString & afuFileName /** The full name of the AFU file */
            );
            /**Sets  the name of AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            void SetFileName
            (
                const char * afuFileName /** The full name of the AFU file */
            );
            /**Returns  the name of AFU file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString FileName
            (
            );
            /**Sets  the name of the AFU Data Record 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetRecordName
            (
                const NXString & afuRecordName /** The name of AFU Data Record */
            );
            /**Sets  the name of the AFU Data Record 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            void SetRecordName
            (
                const char * afuRecordName /** The name of AFU Data Record */
            );
            /**Returns  the name of the AFU Data Record 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString RecordName
            (
            );
            /** Sets the main AFU Data Record ID information 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetIdInformation
            (
                const NXString & reference /** String to define reference direction sense.
                                                                      Up to 4 characters are allowed and
                                                                      the redundant characters will be ignored.
                                                                      ( X, Y, Z, RX, RY, and RZ have specific
                                                                      meaning but the character set can be
                                                                      anything including a "+" or "-" as the
                                                                      last character. examples:  ABC+  RSTU )
                                                                      <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int referenceId /** ID of reference element or node */,
                const NXString & response /** String to define response direction sense.
                                                                     Up to 4 characters are allowed and the redundant
                                                                     characters will be ignored.
                                                                    ( X, Y, Z, RX, RY, and RZ have specific
                                                                      meaning but the character set can be
                                                                      anything including a "+" or "-" as the
                                                                      last character. examples:  ABC+  RSTU )
                                                                       <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int responseId /** ID of response element or node */
            );
            /** Sets the main AFU Data Record ID information 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            void SetIdInformation
            (
                const char * reference /** String to define reference direction sense.
                                                                      Up to 4 characters are allowed and
                                                                      the redundant characters will be ignored.
                                                                      ( X, Y, Z, RX, RY, and RZ have specific
                                                                      meaning but the character set can be
                                                                      anything including a "+" or "-" as the
                                                                      last character. examples:  ABC+  RSTU )
                                                                      <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int referenceId /** ID of reference element or node */,
                const char * response /** String to define response direction sense.
                                                                     Up to 4 characters are allowed and the redundant
                                                                     characters will be ignored.
                                                                    ( X, Y, Z, RX, RY, and RZ have specific
                                                                      meaning but the character set can be
                                                                      anything including a "+" or "-" as the
                                                                      last character. examples:  ABC+  RSTU )
                                                                       <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int responseId /** ID of response element or node */
            );
            /** Returns main AFU Data Record ID information 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void GetIdInformation
            (
                NXString* reference /** String to define reference direction sense.
                                                                    Up to 4 characters are allowed and the redundant
                                                                    characters will be ignored.
                                                                    ( X, Y, Z, RX, RY, and RZ have specific
                                                                      meaning but the character set can be
                                                                      anything including a "+" or "-" as the
                                                                      last character. examples:  ABC+  RSTU )
                                                                */,
                int* referenceId /** ID of reference element or node */,
                NXString* response /** String to define response direction sense.
                                                                    Up to 4 characters are allowed and the
                                                                    redundant characters will be ignored.
                                                                    ( X, Y, Z, RX, RY, and RZ have specific
                                                                      meaning but the character set can be
                                                                      anything including a "+" or "-" as the
                                                                      last character. examples:  ABC+  RSTU )
                                                                */,
                int* responseId /** ID of response element or node */
            );
            /** Set the Abscissa Axis definitions of an AFU Data Record 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetAxisDefinition
            (
                NXOpen::CAE::AfuData::AbscissaType abscissaType /** Abscissas specific data type */,
                NXOpen::CAE::XyFunctionUnit xUnit /** Unit Code of abscissa data */,
                NXOpen::CAE::AfuData::OrdinateType oridinateType /** Ordinate specific data type */,
                NXOpen::CAE::XyFunctionUnit yUnit /** Unit Code of ordinate data */
            );
            /** Get the Abscissa Axis definitions of an AFU Data Record 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void GetAxisDefinition
            (
                NXOpen::CAE::AfuData::AbscissaType* abscissaType /** Abscissa specific data type */,
                NXOpen::CAE::XyFunctionUnit* xUnit /** Unit Code of abscissa data */,
                NXOpen::CAE::AfuData::OrdinateType* oridinateType /** Ordinate specific data type */,
                NXOpen::CAE::XyFunctionUnit* yUnit /** Unit Code of ordinate data */
            );
            /** Set the Abscissa Information for AFU Data Record when abscissa type is even 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetEvenData
            (
                double xMinimum /** Minimum abscissa data value */,
                double xIncrement /** Abscissa increment */,
                int numberOfPoints /** Number of abscissa elements */
            );
            /** Get the Abscissa Information for an AFU Data Record when the abscissa type is even 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void GetEvenData
            (
                double* xMinimum /** Minimum abscissa data value */,
                double* xIncrement /** Abscissa increment */,
                int* numberOfPoints /** Number of abscissa elements */
            );
            /** Set the XY Data of an AFU Data Record when the ordinate type is real 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetRealData
            (
                const std::vector<double> & xValues /** Abscissa element data values */,
                const std::vector<double> & yValues /** Ordinate element data values */
            );
            /** Get the XY Data of an AFU Data Record when the ordinate type is real  @return  Ordinate element data values 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: std::vector<double> GetRealData
            (
                std::vector<double> & xValues /** Abscissa element data values */
            );
            /** Set the XY Data of an AFU record when the ordinate type is Complex 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetComplexData
            (
                const std::vector<double> & xValues /** Abscissa element data values*/,
                const std::vector<double> & yValues /** Ordinate element data values for real part or magnitude part */,
                const std::vector<double> & zValues /** Ordinate element data values for imaginary part or phase part */
            );
            /** Get the XY data of an AFU Data Record when the ordinate type is Complex  @return  Ordinate element data values for imaginary part or phase part 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: std::vector<double> GetComplexData
            (
                std::vector<double> & xValues /** Abscissa element data values*/,
                std::vector<double> & yValues /** Ordinate element data values for real part or magnitude part */
            );
            /**Sets  the data type of the AFU Data Record 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetFunctionDataType
            (
                NXOpen::CAE::XyFunctionDataType functionDataType /** The data type of a function in AFU */
            );
            /**Returns  the data type of the AFU Data Record 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXOpen::CAE::XyFunctionDataType FunctionDataType
            (
            );
            /**Sets  the AFU Header Id data of the AFU Data Record 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetAfuHeaderId
            (
                NXOpen::CAE::AfuHeaderId * afuHeaderId /** The AFU Header Id data */
            );
            /**Returns  the AFU Header Id data of the AFU Data Record 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXOpen::CAE::AfuHeaderId * AfuHeaderId
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
