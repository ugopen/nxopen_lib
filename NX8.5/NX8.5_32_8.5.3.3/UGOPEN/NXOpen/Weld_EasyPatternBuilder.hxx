#ifndef NXOpen_WELD_EASYPATTERNBUILDER_HXX_INCLUDED
#define NXOpen_WELD_EASYPATTERNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_EasyPatternBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/Weld_EasyPatternBuilder.hxx>
#include <NXOpen/libnxopencpp_weld_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Weld
    {
        class EasyPatternBuilder;
    }
    class Builder;
    class ScCollector;
    class Section;
    namespace Weld
    {
        class _EasyPatternBuilderBuilder;
        class EasyPatternBuilderImpl;
        /** Represents the easy pattern builder. This is used to create hem, trim and surface measurement
                points at various plane locations.  <br> To create a new instance of this class, use @link Weld::WeldManager::CreateEasyPatternBuilder  Weld::WeldManager::CreateEasyPatternBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BackEdgeOffset </td> <td> 
         
        2 (millimeters part), 0.08 (inches part) </td> </tr> 

        <tr><td> 
         
        GridAngleTolerance </td> <td> 
         
        15 </td> </tr> 

        <tr><td> 
         
        GridIncrement </td> <td> 
         
        25 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        Height </td> <td> 
         
        25 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        HemMethod </td> <td> 
         
        MidPoint </td> </tr> 

        <tr><td> 
         
        LengthAndWidth </td> <td> 
         
        5 (millimeters part), 0.02 (inches part) </td> </tr> 

        <tr><td> 
         
        MaximumSpacing </td> <td> 
         
        20 (millimeters part), 0.8 (inches part) </td> </tr> 

        <tr><td> 
         
        MinimumFlangeWidth </td> <td> 
         
        6.0 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        NumberSurfaceVectors </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PlaneLocation </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlaneMethod </td> <td> 
         
        InferPlanes </td> </tr> 

        <tr><td> 
         
        SpacingMethod </td> <td> 
         
        Grid </td> </tr> 

        <tr><td> 
         
        TrimEdgeOffset </td> <td> 
         
        2 (millimeters part), 0.08 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_WELDEXPORT  EasyPatternBuilder : public Builder
        {
            /** Controls the type of pattern. */
            public: enum Types
            {
                TypesTrimAndSurface/** Trim vector and surface vectors. */,
                TypesHemAndSurface/** Hem vector and surface vectors.  */
            };

            /** The plane to cut sections in to determine placement measurement patterns. */
            public: enum PlaneMethodTypes
            {
                PlaneMethodTypesInferPlanes/** Determine the best XC,YC, or ZC plane. */,
                PlaneMethodTypesParallelXCPlanes/** Patterns are on the XC plane. */,
                PlaneMethodTypesParallelYCPlanes/** Patterns are on the YC plane. */,
                PlaneMethodTypesParallelZCPlanes/** Patterns are on the ZC plane. */
            };

            /** Indicates whether planes should be cut a grid lines, or if a single plane should be used. */
            public: enum SpacingMethodTypes
            {
                SpacingMethodTypesGrid/** Use Grid spacing to cut sections. */,
                SpacingMethodTypesSinglePlane/** Use a single plane to cut a sections. */
            };

            /** Indicates the method to use to compute the hem vector location. */
            public: enum HemMethodTypes
            {
                HemMethodTypesMidPoint/** Use the mid point of a section cut. */,
                HemMethodTypesNormalToBody/** Use Normal to Body Method. */
            };

            private: EasyPatternBuilderImpl * m_easypatternbuilder_impl;
            private: friend class  _EasyPatternBuilderBuilder;
            protected: EasyPatternBuilder();
            public: ~EasyPatternBuilder();
            /**Returns  the surface vector face. This is the face surface vectors will be created on. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SurfaceVectorFace
            (
            );
            /**Returns  the reverse direction. This will reverse direction of all measurement points created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction. This will reverse direction of all measurement points created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the pattern path. This path is used to determine the pattern spacing. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * PatternPath
            (
            );
            /**Returns  the plane method. This is used to control plane orientations for the measurement points. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::EasyPatternBuilder::PlaneMethodTypes PlaneMethod
            (
            );
            /**Sets  the plane method. This is used to control plane orientations for the measurement points. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetPlaneMethod
            (
                NXOpen::Weld::EasyPatternBuilder::PlaneMethodTypes planeMethod /** planemethod */ 
            );
            /**Returns  the spacing method. This method controls whether multiple patterns are created or a single pattern. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::EasyPatternBuilder::SpacingMethodTypes SpacingMethod
            (
            );
            /**Sets  the spacing method. This method controls whether multiple patterns are created or a single pattern. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSpacingMethod
            (
                NXOpen::Weld::EasyPatternBuilder::SpacingMethodTypes spacingMethod /** spacingmethod */ 
            );
            /**Returns  the grid increment. The grid spacing value use to generate planes. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double GridIncrement
            (
            );
            /**Sets  the grid increment. The grid spacing value use to generate planes. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetGridIncrement
            (
                double gridIncrement /** gridincrement */ 
            );
            /**Returns  the plane location. The single plane location to create a pattern. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PlaneLocation
            (
            );
            /**Sets  the plane location. The single plane location to create a pattern. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetPlaneLocation
            (
                double planeLocation /** planelocation */ 
            );
            /**Returns  the number surface vectors to create for each pattern. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int NumberSurfaceVectors
            (
            );
            /**Sets  the number surface vectors to create for each pattern. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetNumberSurfaceVectors
            (
                int numberSurfaceVectors /** numbersurfacevectors */ 
            );
            /**Returns  the trim edge offset distance. This is the offset distance from the path specified. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double TrimEdgeOffset
            (
            );
            /**Sets  the trim edge offset distance. This is the offset distance from the path specified. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetTrimEdgeOffset
            (
                double trimEdgeOffset /** trimedgeoffset */ 
            );
            /**Returns  the back edge offset. This offset distance is measured from the end of the section cut curve. The start of the curve is at path curve specified.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BackEdgeOffset
            (
            );
            /**Sets  the back edge offset. This offset distance is measured from the end of the section cut curve. The start of the curve is at path curve specified.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetBackEdgeOffset
            (
                double backEdgeOffset /** backedgeoffset */ 
            );
            /**Returns  the maximum spacing between the trim edge offset and the back edge offset. 
             <br>  Created in NX7.5.5.  <br>  
             <br> License requirements : None */
            public: double MaximumSpacing
            (
            );
            /**Sets  the maximum spacing between the trim edge offset and the back edge offset. 
             <br>  Created in NX7.5.5.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMaximumSpacing
            (
                double maximumSpacing /** maximumspacing */ 
            );
            /**Returns  the hem method. This controls the method used for determining the hem point location and vector direction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::EasyPatternBuilder::HemMethodTypes HemMethod
            (
            );
            /**Sets  the hem method. This controls the method used for determining the hem point location and vector direction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetHemMethod
            (
                NXOpen::Weld::EasyPatternBuilder::HemMethodTypes hemMethod /** hemmethod */ 
            );
            /**Returns  the distance tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetDistanceTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the length and width of the measurement solid to create. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double LengthAndWidth
            (
            );
            /**Sets  the length and width of the measurement solid to create. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetLengthAndWidth
            (
                double lengthAndWidth /** lengthandwidth */ 
            );
            /**Returns  the height of the measurement solid to create. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double Height
            (
            );
            /**Sets  the height of the measurement solid to create. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetHeight
            (
                double height /** height */ 
            );
            /**Returns  the grid angle tolerance. This is used for the inferred grid spacing method.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double GridAngleTolerance
            (
            );
            /**Sets  the grid angle tolerance. This is used for the inferred grid spacing method.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetGridAngleTolerance
            (
                double gridAngleTolerance /** gridangletolerance */ 
            );
            /**Returns  the value used to control when only one surface measurement vector will be created.  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: double MinimumFlangeWidth
            (
            );
            /**Sets  the value used to control when only one surface measurement vector will be created.  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMinimumFlangeWidth
            (
                double minimumFlangeWidth /** minimumflangewidth */ 
            );
            /**Returns  the type of pattern to created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::EasyPatternBuilder::Types Type
            (
            );
            /**Sets  the type of pattern to created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetType
            (
                NXOpen::Weld::EasyPatternBuilder::Types type /** type */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
