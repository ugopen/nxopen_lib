#ifndef NXOpen_ANNOTATIONS_IMPORTSYMBOLBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_IMPORTSYMBOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_ImportSymbolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_ImportSymbolBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class ImportSymbolBuilder;
    }
    class Builder;
    namespace Annotations
    {
        class _ImportSymbolBuilderBuilder;
        class ImportSymbolBuilderImpl;
        /**
            Represents a builder allowing import of one or many foreign symbols.
             <br> To create a new instance of this class, use @link DraftingManager::CreateImportSymbolBuilder  DraftingManager::CreateImportSymbolBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        IncludeSubfolders </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PreserveFolderStructure </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SelectMode </td> <td> 
         
        File </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  ImportSymbolBuilder : public Builder
        {
            /** the Selection mode Enum */
            public: enum FileFolder
            {
                FileFolderFile/** File Selection mode */,
                FileFolderFolder/** Folder Selection mode */
            };

            private: ImportSymbolBuilderImpl * m_importsymbolbuilder_impl;
            private: friend class  _ImportSymbolBuilderBuilder;
            protected: ImportSymbolBuilder();
            public: ~ImportSymbolBuilder();
            /**Returns  the selection mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXOpen::Annotations::ImportSymbolBuilder::FileFolder SelectMode
            (
            );
            /**Sets  the selection mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetSelectMode
            (
                NXOpen::Annotations::ImportSymbolBuilder::FileFolder selectMode /** selectmode */ 
            );
            /**Returns  the name of the input folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXString InputFolder
            (
            );
            /**Sets  the name of the input folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetInputFolder
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the name of the input folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            void SetInputFolder
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the subfolders toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: bool IncludeSubfolders
            (
            );
            /**Sets  the subfolders toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetIncludeSubfolders
            (
                bool includeSubfolders /** includesubfolders */ 
            );
            /**Returns  the folder structure toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: bool PreserveFolderStructure
            (
            );
            /**Sets  the folder structure toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetPreserveFolderStructure
            (
                bool preserveFolderStructure /** preservefolderstructure */ 
            );
            /** Starts the Import process 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void StartImport
            (
            );
            /**Returns  the Reuse library path selection 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: NXString LibraryPath
            (
            );
            /**Sets  the Reuse library path selection 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetLibraryPath
            (
                const NXString & path /** path */ 
            );
            /**Sets  the Reuse library path selection 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            void SetLibraryPath
            (
                const char * path /** path */ 
            );
            /** Returns the names of the selected files 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void GetFilesToProcess
            (
                std::vector<NXString> & files /**the list of selected files*/
            );
            /** Sets the names of the selected files 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetFilesToProcess
            (
                std::vector<NXString> & files /**the list of the selected files  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the names of the expanded files 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void GetExpandedFiles
            (
                std::vector<NXString> & files /**the list of selected files*/
            );
            /** Sets the names of the expanded files 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetExpandedFiles
            (
                std::vector<NXString> & files /**the list of the selected files  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the Teamcwenter mode status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: bool IsTeamcenter
            (
            );
            /**Sets  the Teamcwenter mode status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetTeamcenter
            (
                bool isTeamcenter /** isteamcenter */ 
            );
            /**Returns  the Is Part Symbol status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: bool IsPartSymbol
            (
            );
            /**Sets  the Is Part Symbol status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_drafting_plus ("DraftingPlus") */
            public: void SetPartSymbol
            (
                bool isPartSymbol /** ispartsymbol */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
