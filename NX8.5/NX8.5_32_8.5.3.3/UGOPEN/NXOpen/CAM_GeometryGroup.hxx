#ifndef NXOpen_CAM_GEOMETRYGROUP_HXX_INCLUDED
#define NXOpen_CAM_GEOMETRYGROUP_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_GeometryGroup.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_Geometry.hxx>
#include <NXOpen/CAM_BlankIpw.hxx>
#include <NXOpen/CAM_GeometryGroup.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class GeometryGroup;
    }
    namespace CAM
    {
        class BlankIpw;
    }
    namespace CAM
    {
        class Geometry;
    }
    class CartesianCoordinateSystem;
    class Direction;
    namespace CAM
    {
        class _GeometryGroupBuilder;
        class GeometryGroupImpl;
        /** Represents a CAM geometry builder for group level 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  GeometryGroup : public CAM::Geometry
        {
            /** the blank definition types */
            public: enum BlankDefinitionTypes
            {
                BlankDefinitionTypesFromGeometry/** blank defined through selected geometry */,
                BlankDefinitionTypesOffsetFromPart/** blank defined through offset from part */,
                BlankDefinitionTypesAutoBlock/** blank defined through auto block around part */,
                BlankDefinitionTypesIpw/** blank defined through IPW */,
                BlankDefinitionTypesBoundingCylinder/** blank defined through bounding cylinder */,
                BlankDefinitionTypesPartOutline/** blank defined through part outline */,
                BlankDefinitionTypesPartConvexHull/** blank defined through part convex hull */
            };

            /** the derived blank orientation types */
            public: enum OrientationTypes
            {
                OrientationTypesMcs/** derived blank orientation using MCS */,
                OrientationTypesSpecify/** derived blank orientation using user defined */
            };

            /** the derived blank direction types */
            public: enum DirectionTypes
            {
                DirectionTypesZm/** derived blank direction using ZM */,
                DirectionTypesSpecify/** derived blank direction using user defined */
            };

            private: GeometryGroupImpl * m_geometrygroup_impl;
            private: friend class  _GeometryGroupBuilder;
            protected: GeometryGroup();
            public: ~GeometryGroup();
            /**Returns  the blank definition type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::GeometryGroup::BlankDefinitionTypes BlankDefinitionType
            (
            );
            /**Sets  the blank definition type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBlankDefinitionType
            (
                NXOpen::CAM::GeometryGroup::BlankDefinitionTypes newValue /** the blank definition type */
            );
            /**Returns  the blank offset from part 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OffsetFromPart
            (
            );
            /**Sets  the blank offset from part 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOffsetFromPart
            (
                double newValue /** the offset value */
            );
            /**Returns  the blank auto block offset along positive X axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double AutoBlockOffsetPositiveX
            (
            );
            /**Sets  the blank auto block offset along positive X axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAutoBlockOffsetPositiveX
            (
                double newValue /** the offset value */
            );
            /**Returns  the blank auto block offset along negative X axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double AutoBlockOffsetNegativeX
            (
            );
            /**Sets  the blank auto block offset along negative X axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAutoBlockOffsetNegativeX
            (
                double newValue /** the offset value */
            );
            /**Returns  the blank auto block offset along positive Y axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double AutoBlockOffsetPositiveY
            (
            );
            /**Sets  the blank auto block offset along positive Y axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAutoBlockOffsetPositiveY
            (
                double newValue /** the offset value */
            );
            /**Returns  the blank auto block offset along negative Y axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double AutoBlockOffsetNegativeY
            (
            );
            /**Sets  the blank auto block offset along negative Y axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAutoBlockOffsetNegativeY
            (
                double newValue /** the offset value */
            );
            /**Returns  the blank auto block offset along positive Z axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double AutoBlockOffsetPositiveZ
            (
            );
            /**Sets  the blank auto block offset along positive Z axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAutoBlockOffsetPositiveZ
            (
                double newValue /** the offset value */
            );
            /**Returns  the blank auto block offset along negative Z axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double AutoBlockOffsetNegativeZ
            (
            );
            /**Sets  the blank auto block offset along negative Z axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAutoBlockOffsetNegativeZ
            (
                double newValue /** the offset value */
            );
            /**Returns  the Blank IPW
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BlankIpw * BlankIpw
            (
            );
            /**Returns  the bounding geometry offset along positive Z axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OffsetPositiveZ
            (
            );
            /**Sets  the bounding geometry offset along positive Z axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOffsetPositiveZ
            (
                double newValue /** the offset value */
            );
            /**Returns  the bounding geometry offset along negative Z axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OffsetNegativeZ
            (
            );
            /**Sets  the bounding geometry offset along negative Z axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOffsetNegativeZ
            (
                double newValue /** the offset value */
            );
            /**Returns  the derived blank orientation type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::GeometryGroup::OrientationTypes OrientationType
            (
            );
            /**Sets  the derived blank orientation type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOrientationType
            (
                NXOpen::CAM::GeometryGroup::OrientationTypes newValue /** the orientation type */
            );
            /**Returns  the user defined coordinate system 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CartesianCoordinateSystem * Csys
            (
            );
            /**Sets  the user defined coordinate system 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCsys
            (
                NXOpen::CartesianCoordinateSystem * csys /** the Csys */
            );
            /**Returns  the derived blank orientation type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::GeometryGroup::DirectionTypes DirectionType
            (
            );
            /**Sets  the derived blank orientation type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDirectionType
            (
                NXOpen::CAM::GeometryGroup::DirectionTypes newValue /** the direction type */
            );
            /**Returns  the user defined vector 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the user defined vector 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** the vector */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
