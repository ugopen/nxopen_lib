#ifndef NXOpen_CAE_MESHCONTROLBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MESHCONTROLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_MeshControlBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_MeshControlBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class MeshControlBuilder;
    }
    class Builder;
    namespace CAE
    {
        class MeshControl;
    }
    class Expression;
    class NXObject;
    class SelectNXObjectList;
    namespace CAE
    {
        class _MeshControlBuilderBuilder;
        class MeshControlBuilderImpl;
        /**
            Represents a @link CAE::MeshControl CAE::MeshControl@endlink 
             <br> To create a new instance of this class, use @link CAE::MeshControlCollection::CreateBuilder  CAE::MeshControlCollection::CreateBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        MappedNumberOfLayers </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        SizingOption </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        SpacingNumberOfElements </td> <td> 
         
        6 </td> </tr> 

        <tr><td> 
         
        WeldDirection </td> <td> 
         
        Both </td> </tr> 

        <tr><td> 
         
        WeldNumberOfLayers </td> <td> 
         
        2 </td> </tr> 

        </table>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  MeshControlBuilder : public Builder
        {
            /** the mesh control types */
            public: enum Types
            {
                TypesEdgeDensityNumber/** edge density number */ ,
                TypesEdgeDensitySize/**@link CAE::MeshControlBuilder::SizeTypes CAE::MeshControlBuilder::SizeTypes@endlink */,
                TypesEdgeDensityChordal/** edge density chordal */ ,
                TypesEdgeDensityProgression/**@link CAE::MeshControlBuilder::ProgressionTypes CAE::MeshControlBuilder::ProgressionTypes@endlink */,
                TypesFaceDensitySize/** face density size */ ,
                TypesWeldRow/** weld row */ ,
                TypesMappedHoles/** mapped holes */ ,
                TypesTypesLastValue/** types last value */ 
            };

            /** the mesh control size subtypes. */
            public: enum SizeTypes
            {
                SizeTypesAll/** all */ ,
                SizeTypesStart/** start */ ,
                SizeTypesEnd/** end */ ,
                SizeTypesStartAndEnd/** start and end */ ,
                SizeTypesLastValue/** last value */ 
            };

            /** the mesh control progression subtypes. */
            public: enum ProgressionTypes
            {
                ProgressionTypesStart/** start */ ,
                ProgressionTypesEnd/** end */ ,
                ProgressionTypesCenter/** center */ ,
                ProgressionTypesLastValue/** last value */ 
            };

            /** the mesh control weld row direction subtypes. */
            public: enum WeldSide
            {
                WeldSideBoth/** both */ ,
                WeldSideSide1/** side1 */ ,
                WeldSideSide2/** side2 */ 
            };

            /** the sizing subtypes for weld row and mapped holes. */
            public: enum SizingType
            {
                SizingTypeNone/** none */ ,
                SizingTypeByNumber/** by number */ ,
                SizingTypeBySize/** by size */ 
            };

            private: MeshControlBuilderImpl * m_meshcontrolbuilder_impl;
            private: friend class  _MeshControlBuilderBuilder;
            protected: MeshControlBuilder();
            public: ~MeshControlBuilder();
            /**Returns  the selection 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::SelectNXObjectList * Selection
            (
            );
            /**Returns  the type of mesh control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshControlBuilder::Types MainType
            (
            );
            /**Sets  the type of mesh control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMainType
            (
                NXOpen::CAE::MeshControlBuilder::Types type /** type */ 
            );
            /**Returns  the size type of mesh control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshControlBuilder::SizeTypes SizeSubtype
            (
            );
            /**Sets  the size type of mesh control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSizeSubtype
            (
                NXOpen::CAE::MeshControlBuilder::SizeTypes type /** type */ 
            );
            /**Returns  the progression or bias starting type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshControlBuilder::ProgressionTypes ProgressionSubtype
            (
            );
            /**Sets  the progression or bias starting type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetProgressionSubtype
            (
                NXOpen::CAE::MeshControlBuilder::ProgressionTypes type /** type */ 
            );
            /**Returns  the number of elements defined on edge. Valid for following types:
                        @link CAE::MeshControlBuilder::TypesEdgeDensityNumber CAE::MeshControlBuilder::TypesEdgeDensityNumber@endlink , 
                        @link CAE::MeshControlBuilder::TypesEdgeDensityProgression CAE::MeshControlBuilder::TypesEdgeDensityProgression@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int NumOfElements
            (
            );
            /**Sets  the number of elements defined on edge. Valid for following types:
                        @link CAE::MeshControlBuilder::TypesEdgeDensityNumber CAE::MeshControlBuilder::TypesEdgeDensityNumber@endlink , 
                        @link CAE::MeshControlBuilder::TypesEdgeDensityProgression CAE::MeshControlBuilder::TypesEdgeDensityProgression@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNumOfElements
            (
                int numOfElements /** numofelements */ 
            );
            /**Returns  the value stored in Size field. This field represents:
                        Size  for @link CAE::MeshControlBuilder::TypesEdgeDensitySize CAE::MeshControlBuilder::TypesEdgeDensitySize@endlink  
                        Size  for @link CAE::MeshControlBuilder::TypesFaceDensitySize CAE::MeshControlBuilder::TypesFaceDensitySize@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * OverallSize
            (
            );
            /**Returns  the value stored in start size field. This field represents:
                        Size  for @link CAE::MeshControlBuilder::TypesEdgeDensitySize CAE::MeshControlBuilder::TypesEdgeDensitySize@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * StartSize
            (
            );
            /**Returns  the value stored in end size field. This field represents:
                        Size  for @link CAE::MeshControlBuilder::TypesEdgeDensitySize CAE::MeshControlBuilder::TypesEdgeDensitySize@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * EndSize
            (
            );
            /**Returns  the value stored in chordal tolerance field. This field represents:
                        Tolerance for @link CAE::MeshControlBuilder::TypesEdgeDensityChordal CAE::MeshControlBuilder::TypesEdgeDensityChordal@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * ChordalTolerance
            (
            );
            /**Returns  the value stored in geometric ratio field. This field represents:
                        Ratio for @link CAE::MeshControlBuilder::TypesEdgeDensityProgression CAE::MeshControlBuilder::TypesEdgeDensityProgression@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * GeometricRatio
            (
            );
            /**Returns  the value stored in edge fraction field. This field represents:
                        Fraction for @link CAE::MeshControlBuilder::TypesEdgeDensityProgression CAE::MeshControlBuilder::TypesEdgeDensityProgression@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * EdgeFraction
            (
            );
            /** The calculate Auto Size method.
                        This computes and populates num of elements and size fields based auto 
                        element size computation. Selected geometry is used in computation. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AutoSize
            (
            );
            /** The intialization method for editing mesh control. 
                        This method is to be used if builder is created in create mode and then user wants to edit a mesh control.
                        This method populates all required mesh control data for editing purpose 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void LoadMeshControlData
            (
                NXOpen::CAE::MeshControl * tMeshControl /** tmeshcontrol */ 
            );
            /**Returns  the select weld face 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::SelectNXObjectList * SelectWeldFace
            (
            );
            /**Returns  the weld direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshControlBuilder::WeldSide WeldDirection
            (
            );
            /**Sets  the weld direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetWeldDirection
            (
                NXOpen::CAE::MeshControlBuilder::WeldSide weldDirection /** welddirection */ 
            );
            /**Returns  the scar edge to define weld direction  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::NXObject * WeldDirectionScarEdge
            (
            );
            /**Sets  the scar edge to define weld direction  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetWeldDirectionScarEdge
            (
                NXOpen::NXObject * tScarEdge /** tscaredge */ 
            );
            /**Returns  the weld offset 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * WeldOffset
            (
            );
            /**Returns  the weld number of layers 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int WeldNumberOfLayers
            (
            );
            /**Sets  the weld number of layers 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetWeldNumberOfLayers
            (
                int weldNumberOfLayers /** weldnumberoflayers */ 
            );
            /** Create weld face definition   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int AddWeldFaceDefinition
            (
            );
            /** Delete weld face definition 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void DeleteWeldFaceDefinitions
            (
                const std::vector<int> & piFaceDefinitions /** pifacedefinitions */ 
            );
            /** Auto create face definitions  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<int> AutoCreateWeldFaceDefinitions
            (
            );
            /** Get weld face definitions  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<int> GetWeldFaceDefinitions
            (
            );
            /** Set current weld face definition 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetWeldFaceDefinition
            (
                int iFaceDefinition /** ifacedefinition */ 
            );
            /**Returns  the mapped offset 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * MappedOffset
            (
            );
            /**Returns  the mapped number of layers 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int MappedNumberOfLayers
            (
            );
            /**Sets  the mapped number of layers 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMappedNumberOfLayers
            (
                int mappedNumberOfLayers /** mappednumberoflayers */ 
            );
            /**Returns  the sizing option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshControlBuilder::SizingType SizingOption
            (
            );
            /**Sets  the sizing option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSizingOption
            (
                NXOpen::CAE::MeshControlBuilder::SizingType sizingOption /** sizingoption */ 
            );
            /**Returns  the spacing number of elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int SpacingNumberOfElements
            (
            );
            /**Sets  the spacing number of elements 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSpacingNumberOfElements
            (
                int spacingNumberOfElements /** spacingnumberofelements */ 
            );
            /**Returns  the spacing element size 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * SpacingElementSize
            (
            );
            /** Commits the creation of the @link CAE::MeshControl CAE::MeshControl@endlink  objects
                        or Commits the changes made to the @link CAE::MeshControl CAE::MeshControl@endlink 
                      @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<NXOpen::CAE::MeshControl *> CommitDensities
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
