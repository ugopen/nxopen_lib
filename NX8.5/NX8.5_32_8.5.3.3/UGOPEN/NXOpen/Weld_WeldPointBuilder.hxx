#ifndef NXOpen_WELD_WELDPOINTBUILDER_HXX_INCLUDED
#define NXOpen_WELD_WELDPOINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_WeldPointBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/WeldAssistant.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_weld_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Weld
    {
        class WeldPointBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Direction;
    class DisplayableObject;
    namespace Features
    {
        class Feature;
    }
    class Plane;
    class Section;
    class TaggedObject;
    namespace Weld
    {
        class _WeldPointBuilderBuilder;
        class WeldPointBuilderImpl;
        /** Represents a Spot Weld feature  <br> To create a new instance of this class, use @link Weld::WeldManager::CreateWeldPointBuilder  Weld::WeldManager::CreateWeldPointBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ConnectingOnlyOnePart </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        CreationDirection </td> <td> 
         
        Default </td> </tr> 

        <tr><td> 
         
        CsysAssemblyState </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        CsysWorkPartState </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        CustomCylinderAbove </td> <td> 
         
        0.5 (millimeters part), 0.02 (inches part) </td> </tr> 

        <tr><td> 
         
        CustomRadius </td> <td> 
         
        0.5 (millimeters part), 0.02 (inches part) </td> </tr> 

        <tr><td> 
         
        CustomTotalCylinderLength </td> <td> 
         
        1 (millimeters part), 0.04 (inches part) </td> </tr> 

        <tr><td> 
         
        DatumFirstReferenceDirection </td> <td> 
         
        X </td> </tr> 

        <tr><td> 
         
        DatumMajorDirection </td> <td> 
         
        X </td> </tr> 

        <tr><td> 
         
        DatumSecondReferenceDirection </td> <td> 
         
        X </td> </tr> 

        <tr><td> 
         
        DistanceTolerance </td> <td> 
         
        0.025 (millimeters part), 0.001 (inches part) </td> </tr> 

        <tr><td> 
         
        EndDistance </td> <td> 
         
        6.25 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        EndDistanceLocation </td> <td> 
         
        Length </td> </tr> 

        <tr><td> 
         
        ExtendMethod </td> <td> 
         
        Boundary </td> </tr> 

        <tr><td> 
         
        Location </td> <td> 
         
        AlongGuideEdge </td> </tr> 

        <tr><td> 
         
        MeasurementDefaultHeight </td> <td> 
         
        10 (millimeters part), 0.4 (inches part) </td> </tr> 

        <tr><td> 
         
        MeasurementDefaultWidth </td> <td> 
         
        3 (millimeters part), 0.12 (inches part) </td> </tr> 

        <tr><td> 
         
        MeasurementHoleSize </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        <tr><td> 
         
        MeasurementSlotLength </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        <tr><td> 
         
        MeasurementSlotWidth </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        <tr><td> 
         
        MeasurementStudSize </td> <td> 
         
        0.0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        MirrorByType </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        NumberConnectedPanels </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        OffsetDistance </td> <td> 
         
        6.25 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        OutputType </td> <td> 
         
        Fixed </td> </tr> 

        <tr><td> 
         
        PointMethod </td> <td> 
         
        Multiple </td> </tr> 

        <tr><td> 
         
        PointsGuideDistance </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ProjectionMethod </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        ReferenceSheetSpacingMethod </td> <td> 
         
        Distance </td> </tr> 

        <tr><td> 
         
        ReferenceSheetType </td> <td> 
         
        Overlap </td> </tr> 

        <tr><td> 
         
        ShowThroughAssemblyState </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ShowThroughWorkPartState </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        SizeMethod </td> <td> 
         
        Auto </td> </tr> 

        <tr><td> 
         
        SolidType </td> <td> 
         
        SolidNone </td> </tr> 

        <tr><td> 
         
        SpacingCalculateMethod </td> <td> 
         
        Arclength </td> </tr> 

        <tr><td> 
         
        SpacingNumber </td> <td> 
         
        12.5 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        StartDistance </td> <td> 
         
        6.25 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        StartDistanceLocation </td> <td> 
         
        Length </td> </tr> 

        <tr><td> 
         
        TranslateXDistance </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        TranslateYDistance </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        TranslateZDistance </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        WeldType </td> <td> 
         
        ResistanceSpot </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_WELDEXPORT  WeldPointBuilder : public Builder
        {
            private: WeldPointBuilderImpl * m_weldpointbuilder_impl;
            private: friend class  _WeldPointBuilderBuilder;
            protected: WeldPointBuilder();
            public: ~WeldPointBuilder();
            /**Returns  the output type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::OutputType OutputType
            (
            );
            /**Sets  the output type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetOutputType
            (
                NXOpen::Weld::OutputType outputType /** output type */
            );
            /**Returns  the num connected panels. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: int NumberConnectedPanels
            (
            );
            /**Sets  the num connected panels. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetNumberConnectedPanels
            (
                int numConnectedPanels /** num connected panels */ 
            );
            /**Returns  the start dist location 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldParasetLocation StartDistanceLocation
            (
            );
            /**Sets  the start dist location 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetStartDistanceLocation
            (
                NXOpen::Weld::WeldParasetLocation startDistLocation /** start distance location */
            );
            /**Sets  the end dist location 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetEndDistanceLocation
            (
                NXOpen::Weld::WeldParasetLocation endDistLocation /** end dist location */ 
            );
            /**Returns  the end dist location 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldParasetLocation EndDistanceLocation
            (
            );
            /**Returns   the method for creating weld points.  Weld points can be created using guide
                     entities or @link Point Point@endlink  objects. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldPointMethod PointMethod
            (
            );
            /**Sets   the method for creating weld points.  Weld points can be created using guide
                     entities or @link Point Point@endlink  objects. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetPointMethod
            (
                NXOpen::Weld::WeldPointMethod ptMethod /** pt method */ 
            );
            /**Sets  the refsheet spacing method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetReferenceSheetSpacingMethod
            (
                NXOpen::Weld::WeldPointSpacingMethod spacingMethod /** spacing method */ 
            );
            /**Returns  the refsheet spacing method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldPointSpacingMethod ReferenceSheetSpacingMethod
            (
            );
            /**Sets  the work coordinate systemstate 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCsysWorkPartState
            (
                bool workCsysState /** workcsysstate */ 
            );
            /**Returns  the work coordinate systemstate 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool CsysWorkPartState
            (
            );
            /**Sets  the assy coordinate system state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCsysAssemblyState
            (
                bool assyCsysState /** assy csys state */ 
            );
            /**Returns  the assy coordinate system state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool CsysAssemblyState
            (
            );
            /**Sets  the through work coordinate system state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetShowThroughWorkPartState
            (
                bool thruWorkState /** thru work state */ 
            );
            /**Returns  the through work coordinate system state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool ShowThroughWorkPartState
            (
            );
            /**Sets  the through assy coordinate system state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetShowThroughAssemblyState
            (
                bool thruAssyState /** thru assy state */ 
            );
            /**Returns  the through assy coordinate system state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool ShowThroughAssemblyState
            (
            );
            /**Sets  the mirror by type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMirrorByType
            (
                bool mirrorByType /** mirror by type */ 
            );
            /**Returns  the mirror by type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool MirrorByType
            (
            );
            /**Returns   the type of sheet to create to place weld points on. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldPointReferenceSheetType ReferenceSheetType
            (
            );
            /**Sets   the type of sheet to create to place weld points on. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetReferenceSheetType
            (
                NXOpen::Weld::WeldPointReferenceSheetType refSheetType /** ref sheet type */ 
            );
            /**Returns  the processing method to use for generating weld points along reference section(s) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldPointLocation Location
            (
            );
            /**Sets  the processing method to use for generating weld points along reference section(s) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetLocation
            (
                NXOpen::Weld::WeldPointLocation location /** location */ 
            );
            /**Returns  the offset curve extend method. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldPointExtendMethod ExtendMethod
            (
            );
            /**Sets  the offset curve extend method. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetExtendMethod
            (
                NXOpen::Weld::WeldPointExtendMethod extendMethod /** extend method */ 
            );
            /**Returns  the sequence number for the weld point feature. Each Weld point feature contains a single point.
                    If multiple Weld points are to be created, you must specify the sequence of the point you want.
                    For example if you are expecting 3 points to be created. You must create 3 weld point features.
                    The features will have sequence numbers 0,1 and 2.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: int SequenceNumber
            (
            );
            /**Sets  the sequence number for the weld point feature. Each Weld point feature contains a single point.
                    If multiple Weld points are to be created, you must specify the sequence of the point you want.
                    For example if you are expecting 3 points to be created. You must create 3 weld point features.
                    The features will have sequence numbers 0,1 and 2.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSequenceNumber
            (
                int sequenceNumber /** sequence number */ 
            );
            /**Returns  the plane that a point is to be mirrored about. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Plane * MirrorPlane
            (
            );
            /**Sets  the plane that a point is to be mirrored about. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMirrorPlane
            (
                NXOpen::Plane * mirrorPlane /** mirror plane */ 
            );
            /**Returns  the coordinate system that a point is to be translated about. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::CoordinateSystem * TranslateCsys
            (
            );
            /**Sets  the coordinate system that a point is to be translated about. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetTranslateCsys
            (
                NXOpen::CoordinateSystem * translateCsys /** translate csys */ 
            );
            /**Returns  the offset distance from edges in guide_collector1 to place weld points  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXString OffsetDistance
            (
            );
            /**Sets  the offset distance from edges in guide_collector1 to place weld points  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetOffsetDistance
            (
                const NXString & offsetDistance /** offset distance */ 
            );
            /**Sets  the offset distance from edges in guide_collector1 to place weld points  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            void SetOffsetDistance
            (
                const char * offsetDistance /** offset distance */ 
            );
            /**Returns  the start dist
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXString StartDistance
            (
            );
            /**Sets  the start dist
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetStartDistance
            (
                const NXString & startDistStr /** expression string */
            );
            /**Sets  the start dist
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            void SetStartDistance
            (
                const char * startDistStr /** expression string */
            );
            /**Returns  the end dist 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXString EndDistance
            (
            );
            /**Sets  the end dist 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetEndDistance
            (
                const NXString & endDistStr /** expression string */
            );
            /**Sets  the end dist 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            void SetEndDistance
            (
                const char * endDistStr /** expression string */
            );
            /**Returns  the spacing number 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXString SpacingNumber
            (
            );
            /**Sets  the spacing number 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSpacingNumber
            (
                const NXString & spacingOrNumberStr /** expression string */
            );
            /**Sets  the spacing number 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            void SetSpacingNumber
            (
                const char * spacingOrNumberStr /** expression string */
            );
            /**Returns the tran x dist 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXString TranslateXDistance
            (
            );
            /**Sets the tran x dist 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetTranslateXDistance
            (
                const NXString & transXDistStr /** expression string */
            );
            /**Sets the tran x dist 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            void SetTranslateXDistance
            (
                const char * transXDistStr /** expression string */
            );
            /**Returns the trans y dist 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXString TranslateYDistance
            (
            );
            /**Sets the trans y dist 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetTranslateYDistance
            (
                const NXString & transYDistStr /** expression string */
            );
            /**Sets the trans y dist 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            void SetTranslateYDistance
            (
                const char * transYDistStr /** expression string */
            );
            /**Returns  the translate distance for weld points in z axis direction.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXString TranslateZDistance
            (
            );
            /**Sets  the translate distance for weld points in z axis direction.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetTranslateZDistance
            (
                const NXString & transZDistStr /** expression string */
            );
            /**Sets  the translate distance for weld points in z axis direction.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            void SetTranslateZDistance
            (
                const char * transZDistStr /** expression string */
            );
            /**Returns  the distance tolerance for the weld point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance for the weld point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distance tolerance */ 
            );
            /**Returns  the distance percentage from the start of the curve where the
                    weld point should be. 0.0 is the start of the curve
                    100.0 is the end of the curve. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double PointsGuideDistance
            (
            );
            /**Sets  the distance percentage from the start of the curve where the
                    weld point should be. 0.0 is the start of the curve
                    100.0 is the end of the curve. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetPointsGuideDistance
            (
                double pointsGuideDist /** points guide dist */ 
            );
            /**Returns  the radius to create the sphere, cylinder, or cone with 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double CustomRadius
            (
            );
            /**Sets  the radius to create the sphere, cylinder, or cone with 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCustomRadius
            (
                double customRadius /** custom radius */ 
            );
            /**Returns  the distance the custom cylinder should be created above the
                    weld point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double CustomCylinderAbove
            (
            );
            /**Sets  the distance the custom cylinder should be created above the
                    weld point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCustomCylinderAbove
            (
                double customCylinderAbove /** custom cylinder above */ 
            );
            /**Returns  the total length of the cylinder to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double CustomTotalCylinderLength
            (
            );
            /**Sets  the total length of the cylinder to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCustomTotalCylinderLength
            (
                double totalCylinderLength /** total cylinder length */ 
            );
            /**Returns  the default width of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double MeasurementDefaultWidth
            (
            );
            /**Sets  the default width of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMeasurementDefaultWidth
            (
                double measurementDefaultWidth /** measurement default width */ 
            );
            /**Returns  the default height of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double MeasurementDefaultHeight
            (
            );
            /**Sets  the default height of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMeasurementDefaultHeight
            (
                double measurementDefaultHeight /** measurement default height */ 
            );
            /**Returns  the hole_size of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double MeasurementHoleSize
            (
            );
            /**Sets  the hole_size of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMeasurementHoleSize
            (
                double holeSize /** hole size */ 
            );
            /**Returns  the slot width of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double MeasurementSlotWidth
            (
            );
            /**Sets  the slot width of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMeasurementSlotWidth
            (
                double slotWidth /** slot width */ 
            );
            /**Returns  the slot height of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double MeasurementSlotLength
            (
            );
            /**Sets  the slot height of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMeasurementSlotLength
            (
                double slotLength /** slot length */ 
            );
            /**Returns  the stud size of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double MeasurementStudSize
            (
            );
            /**Sets  the stud size of the object for measurement to be created. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMeasurementStudSize
            (
                double studSize /** stud size */ 
            );
            /**Returns  the output solid type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldCustom SolidType
            (
            );
            /**Sets  the output solid type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSolidType
            (
                NXOpen::Weld::WeldCustom solidType /** solid type */ 
            );
            /**Returns  the weld type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldFeatureSetType WeldType
            (
            );
            /**Sets  the weld type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetWeldType
            (
                NXOpen::Weld::WeldFeatureSetType curWeldType /** cur weld type */ 
            );
            /**Returns  the project method type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldProjectionMethod ProjectionMethod
            (
            );
            /**Sets  the project method type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetProjectionMethod
            (
                NXOpen::Weld::WeldProjectionMethod projMethod /** proj method */ 
            );
            /**Sets  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetConnectingOnlyOnePart
            (
                bool connectingOnlyOnePart /** connecting only one part */ 
            );
            /**Returns  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool ConnectingOnlyOnePart
            (
            );
            /**Sets  the project direction NXOpen object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetProjectDirectionObject
            (
                NXOpen::Direction * direction /** Project direction */
            );
            /**Returns  the project direction NXOpen object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Direction * ProjectDirectionObject
            (
            );
            /**Sets  the project direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetProjectDirection
            (
                const NXOpen::Vector3d & direction /** Project direction */
            );
            /**Returns  the project direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Vector3d ProjectDirection
            (
            );
            /**Returns  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Plane * SectionPlaneEntity
            (
            );
            /**Sets  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSectionPlaneEntity
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the project method type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldSpacingCalcMethod SpacingCalculateMethod
            (
            );
            /**Sets  the project method type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSpacingCalculateMethod
            (
                NXOpen::Weld::WeldSpacingCalcMethod spacingCalcMethod /** spacing calc method */ 
            );
            /**Returns  the datum major direction type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldDatumControlDirection DatumMajorDirection
            (
            );
            /**Sets  the datum major direction type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetDatumMajorDirection
            (
                NXOpen::Weld::WeldDatumControlDirection datumMajorDir /** datum major dir */ 
            );
            /**Returns  the datum reference direction type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldDatumControlDirection DatumFirstReferenceDirection
            (
            );
            /**Sets  the datum reference direction type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetDatumFirstReferenceDirection
            (
                NXOpen::Weld::WeldDatumControlDirection datumRefDir /** datum ref dir */ 
            );
            /**Returns  the datum reference direction type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldDatumControlDirection DatumSecondReferenceDirection
            (
            );
            /**Sets  the datum reference direction type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetDatumSecondReferenceDirection
            (
                NXOpen::Weld::WeldDatumControlDirection datumRefDir /** datum ref dir */ 
            );
            /**Sets  the measurement size method. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSizeMethod
            (
                NXOpen::Weld::WeldMeasurementSizeMethod sizeMethod /** size method */ 
            );
            /**Returns  the measurement size method. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldMeasurementSizeMethod SizeMethod
            (
            );
            /** Gets the user selected faces for the indicated face set 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void GetFaceSet
            (
                int facesetIndex /** Which faceset to get the faces for. 0 is the first */,
                std::vector<NXOpen::DisplayableObject *> & objects /** the face set reference objects */,
                std::vector<NXOpen::Features::Feature *> & frecs /** the face set wave linked frecs */
            );
            /** Sets the user selected faces for the indicated face set 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetFaceSet
            (
                NXOpen::Weld::WeldFacesetIndex facesetIndex /** Which faceset to get the faces for. 0 is the first */,
                const std::vector<NXOpen::DisplayableObject *> & objects /** the face set reference objects */
            );
            /** The commit for reference sheets 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void CommitReferenceSheets
            (
                NXOpen::Weld::WeldOverlapStatus createStatus /** create status*/
            );
            /** The clear for all existed facesets 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void ClearFaceSets
            (
            );
            /** 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void CommitFaceSets
            (
            );
            /** The current refsheet  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: int GetCurrentReferenceSheet
            (
            );
            /** Set current refsheet
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCurrentReferenceSheet
            (
                int currentRefSheet /** current refsheet*/
            );
            /**The creation for single weld point
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void CreateSingleWeldPoint
            (
                const NXOpen::Point3d & pointCoord /** point coordinate*/
            );
            /**The commit for first section 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetFirstSection
            (
                NXOpen::Section * section /**the section from uicomp*/
            );
            /**Update first section 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void UpdateFirstSection
            (
                NXOpen::Section * totalSection /** the total section*/
            );
            /**Update second section 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void UpdateSecondSection
            (
                NXOpen::Section * totalSection /** the total section*/
            );
            /**Create second section 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSecondSection
            (
                NXOpen::Section * section /**the section from uicomp*/
            );
            /**Create offset curve  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Section * CreateOffsetCurve
            (
            );
            /**To calculate all weld points
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void CalculateWeldPoints
            (
                std::vector<NXOpen::Point3d> & points /** weld points */
            );
            /**Set the selected point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetPoint
            (
                int index /** point index*/
            );
            /**Set or edit characteristics for selected points 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCharacteristics
            (
                const NXString & attrTitle /**attribute title  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Weld::WeldAttribType attrType /**attribute type*/,
                const NXString & attrValue /**attribute value  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Set or edit characteristics for selected points 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            void SetCharacteristics
            (
                const char * attrTitle /**attribute title  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Weld::WeldAttribType attrType /**attribute type*/,
                const char * attrValue /**attribute value  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Update coordinate system for selected points
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void UpdateCsys
            (
                const NXOpen::Point3d & origin /** origin point */,
                const NXOpen::Matrix3x3 & matrix /** rotate matrix */
            );
            /**Move selected points
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void MovePoint
            (
                const NXOpen::Point3d & origin /** the new position to be located*/
            );
            /** To create center line @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Section * CreateCenterLine
            (
            );
            /**Commit created section
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void CommitSection
            (
                NXOpen::Section * path /** the created path*/
            );
            /**Set the selection type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSelectionType
            (
                NXOpen::Weld::WeldSelectionType selectionType /** selection type */
            );
            /** Flip the z axis 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void FlipZAxis
            (
            );
            /** Create section curve @return  section curve
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Section * CreateSectionPlaneCurves
            (
            );
            /**Returns  the creation direction type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldCreationDirection CreationDirection
            (
            );
            /**Sets  the creation direction type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCreationDirection
            (
                NXOpen::Weld::WeldCreationDirection creationDirection /** creation direction type */
            );
            /** Add or remove mirror translate reference objects
             <br>  Created in NX7.5.5.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMirrorTranslateReferenceObjects
            (
                const std::vector<NXOpen::TaggedObject *> & refs /** the mirror translate reference objects to be added*/
            );
            /** Get mirror translate reference objects
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void GetMirrorTranslateReferenceObjects
            (
                std::vector<NXOpen::DisplayableObject *> & objects /** the mirror translate reference objects*/
            );
            /** Calculate location and default direction of datum and measurement, need to set the current point prior to calling this method 
             <br>  Created in NX7.5.5.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void CalculateDatumMeasurementDefaultDirection
            (
            );
            /**Remove characteristics for selected points, need to set the current point prior to calling this method  
             <br>  Created in NX7.5.5.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void RemoveCharacteristics
            (
                const NXString & attrTitle /**attribute title  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Weld::WeldAttribType attrType /**attribute type*/,
                const NXString & attrValue /**attribute value  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Remove characteristics for selected points, need to set the current point prior to calling this method  
             <br>  Created in NX7.5.5.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            void RemoveCharacteristics
            (
                const char * attrTitle /**attribute title  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Weld::WeldAttribType attrType /**attribute type*/,
                const char * attrValue /**attribute value  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Remove the current selected point, need to set the current point prior to calling this method  
             <br>  Created in NX7.5.5.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void RemoveWeldPoint
            (
            );
            /**Get the amount of face sets   @return  total amount of face sets 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: int GetNumFaceSets
            (
            );
            /** Get the first section. For guide curves method, this section contains curves that used to create weld path, 
                  For centerline method, this section contians the first group of curves used to create centerline  @return the section 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Section * GetFirstSection
            (
            );
            /** Get the second section. this method for centerline method weld only, this section contains 
                 the second group of curves used to create centerline  @return the section 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Section * GetSecondSection
            (
            );
            /** The refernence sheet feature  @return  the reference sheet
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Features::Feature * GetReferenceSheets
            (
            );
            /**Get coordinate system for point
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void GetCsys
            (
                NXOpen::Point3d* origin /** origin point */,
                NXOpen::Matrix3x3* matrix /** rotate matrix */
            );
            /** Project selected points along the specified vector to reference sheets
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void ProjectPoints
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
