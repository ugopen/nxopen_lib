#ifndef NXOpen_BLOCKSTYLER_CHOOSEEXPRESSION_HXX_INCLUDED
#define NXOpen_BLOCKSTYLER_CHOOSEEXPRESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BlockStyler_ChooseExpression.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_ChooseExpression.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace BlockStyler
    {
        class ChooseExpression;
    }
    namespace BlockStyler
    {
        class UIBlock;
    }
    class TaggedObject;
    namespace BlockStyler
    {
        class _ChooseExpressionBuilder;
        class ChooseExpressionImpl;
        /** Represents Choose Expression block
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENUICPPEXPORT  ChooseExpression : public BlockStyler::UIBlock
        {
            private: ChooseExpressionImpl * m_chooseexpression_impl;
            private: friend class  _ChooseExpressionBuilder;
            protected: ChooseExpression();
            public: ~ChooseExpression();
            /**Returns  the ExpressionSortType as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ExpressionSortTypeAsString
            (
            );
            /**Sets  the ExpressionSortType as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetExpressionSortTypeAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the ExpressionSortType as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetExpressionSortTypeAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the ExpressionSortType members @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetExpressionSortTypeMembers
            (
            );
            /**Returns  the ExpressionTypeIndex as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ExpressionTypeIndexAsString
            (
            );
            /**Sets  the ExpressionTypeIndex as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetExpressionTypeIndexAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the ExpressionTypeIndex as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetExpressionTypeIndexAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the ExpressionTypeIndex members @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetExpressionTypeIndexMembers
            (
            );
            /**Returns  the SelectedExpression
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * SelectedExpression
            (
            );
            /**Sets  the SelectedExpression
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedExpression
            (
                NXOpen::TaggedObject * selectedExpression /** selectedexpression */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
