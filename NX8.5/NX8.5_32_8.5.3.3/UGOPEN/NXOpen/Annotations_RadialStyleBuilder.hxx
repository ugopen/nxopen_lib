#ifndef NXOpen_ANNOTATIONS_RADIALSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_RADIALSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_RadialStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_RadialStyleBuilder.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class RadialStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _RadialStyleBuilderBuilder;
        class RadialStyleBuilderImpl;
        /**
            Represents a @link Annotations::RadialStyleBuilder Annotations::RadialStyleBuilder@endlink .
            This class queries and sets preferences specific to radial dimensions when creating or
            editing a radial type dimension.
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  RadialStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: RadialStyleBuilderImpl * m_radialstylebuilder_impl;
            private: friend class  _RadialStyleBuilderBuilder;
            protected: RadialStyleBuilder();
            public: ~RadialStyleBuilder();
            /**Returns  the diameter symbol type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DiameterSymbol DiameterSymbolType
            (
            );
            /**Sets  the diameter symbol type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDiameterSymbolType
            (
                NXOpen::Annotations::DiameterSymbol diameterSymbolType /** diametersymboltype */ 
            );
            /**Returns  the text for a user-defined diameter symbol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DiameterSymbol
            (
            );
            /**Sets  the text for a user-defined diameter symbol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDiameterSymbol
            (
                const NXString & diameterSymbol /** diametersymbol */ 
            );
            /**Sets  the text for a user-defined diameter symbol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void SetDiameterSymbol
            (
                const char * diameterSymbol /** diametersymbol */ 
            );
            /**Returns  the radius symbol type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::RadiusSymbol RadiusSymbolType
            (
            );
            /**Sets  the radius symbol type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetRadiusSymbolType
            (
                NXOpen::Annotations::RadiusSymbol radiusSymbolType /** radiussymboltype */ 
            );
            /**Returns  the text for a user-defined radius symbol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RadiusSymbol
            (
            );
            /**Sets  the text for a user-defined radius symbol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetRadiusSymbol
            (
                const NXString & radiusSymbol /** radiussymbol */ 
            );
            /**Sets  the text for a user-defined radius symbol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void SetRadiusSymbol
            (
                const char * radiusSymbol /** radiussymbol */ 
            );
            /**Returns  the diameter radius symbol placement with respect to the dimension text.
                        One of the options specifies that no symbol be displayed  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DiameterRadiusSymbolPlacement DiameterRadiusPlacement
            (
            );
            /**Sets  the diameter radius symbol placement with respect to the dimension text.
                        One of the options specifies that no symbol be displayed  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDiameterRadiusPlacement
            (
                NXOpen::Annotations::DiameterRadiusSymbolPlacement diameterRadiusPlacement /** diameterradiusplacement */ 
            );
            /**Returns  the location of the dimension text relative to the leader stub 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DiameterRadiusLeaderStub TextAboveLeader
            (
            );
            /**Sets  the location of the dimension text relative to the leader stub 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTextAboveLeader
            (
                NXOpen::Annotations::DiameterRadiusLeaderStub textAboveLeader /** textaboveleader */ 
            );
            /**Returns  the symbol to dimension text distance in character spaces 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double SymbolToDimensionTextDistance
            (
            );
            /**Sets  the symbol to dimension text distance in character spaces 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSymbolToDimensionTextDistance
            (
                double symbolToDimensionTextDistance /** symboltodimensiontextdistance */ 
            );
            /**Returns  the folded radius angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double FoldedRadiusAngle
            (
            );
            /**Sets  the folded radius angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFoldedRadiusAngle
            (
                double foldedRadiusAngle /** foldedradiusangle */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
