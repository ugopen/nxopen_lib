#ifndef NXOpen_FEATURES_FITSURFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_FITSURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FitSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_FitSurfaceBuilder.hxx>
#include <NXOpen/GeometricUtilities_DegreesAndSegmentsOrPatchesBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class FitSurfaceBuilder;
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class DegreesAndSegmentsOrPatchesBuilder;
    }
    class Point;
    class SelectNXObject;
    namespace Features
    {
        class _FitSurfaceBuilderBuilder;
        class FitSurfaceBuilderImpl;
        /**
            This class will provide the ability to fit surfaces through facet bodies or point sets/groups. 
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateFitSurfaceBuilder  Features::FeatureCollection::CreateFitSurfaceBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngleValue.Value </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        DirectionOption </td> <td> 
         
        BestFit </td> </tr> 

        <tr><td> 
         
        IsAutomatic </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsBoundary </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsClosed </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        IsConstrained </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsHalfAngle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsRadius </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsUniformU </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsUniformV </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Parameterization.Degree </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        Parameterization.SegmentsOrPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Parameterization.UDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        Parameterization.UPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Parameterization.VDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        Parameterization.VPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        RadiusValue.Value </td> <td> 
         
        50 (millimeters part), 2 (inches part) </td> </tr> 

        <tr><td> 
         
        RejectionThresholdValue.Value </td> <td> 
         
        10 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        SmoothFactor </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  FitSurfaceBuilder : public Features::FeatureBuilder
        {
            /**Fit Surface creation types */
            public: enum Types
            {
                TypesFitfreeform/** Fit Freeform */,
                TypesFitplane/** Fit Plane */,
                TypesFitsphere/** Fit Sphere */,
                TypesFitcylinder/** Fit Cylinder */,
                TypesFitcone/** Fit Cone */
            };

            /**Direction method provides the ability to specify the projection direction and orientation*/
            public: enum DirectionType
            {
                DirectionTypeBestFit/**The fit target is sort of rectangular.*/,
                DirectionTypeVector/**Vector will specify the fit direction.*/,
                DirectionTypeOrientation/**Orientation will specify the direction and U/V orientation. */,
                DirectionTypeCsys/**CSYS will specify same as orientation but with the need to make it associative with existing geometry. */
            };

            private: FitSurfaceBuilderImpl * m_fitsurfacebuilder_impl;
            private: friend class  _FitSurfaceBuilderBuilder;
            protected: FitSurfaceBuilder();
            public: ~FitSurfaceBuilder();
            /**Returns  the type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FitSurfaceBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetType
            (
                NXOpen::Features::FitSurfaceBuilder::Types type /** type */ 
            );
            /**Returns  the target object to which the face is fitted to can be a facet body, a point set or a point group 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * TargetObject
            (
            );
            /**Returns  the direction option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FitSurfaceBuilder::DirectionType DirectionOption
            (
            );
            /**Sets  the direction option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetDirectionOption
            (
                NXOpen::Features::FitSurfaceBuilder::DirectionType directionOption /** directionoption */ 
            );
            /**Returns  the vector specifies the projection direction
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector specifies the projection direction
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /** The edit CSYS for Orientation option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void EditCSYS
            (
                const NXOpen::Point3d & originCsys /** origincsys */ ,
                const NXOpen::Matrix3x3 & matCsys /** matcsys */ 
            );
            /**Returns  the coordinate system 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * CoordinateSystem
            (
            );
            /**Sets  the coordinate system 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetCoordinateSystem
            (
                NXOpen::CoordinateSystem * coordSystem /** coordsystem */ 
            );
            /**Returns  the boundary will limit or extend to the boundaries
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsBoundary
            (
            );
            /**Sets  the boundary will limit or extend to the boundaries
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetBoundary
            (
                bool isBoundary /** isboundary */ 
            );
            /**Returns  the first point of the boundary
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point1
            (
            );
            /**Sets  the first point of the boundary
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetPoint1
            (
                NXOpen::Point * point1 /** point1 */ 
            );
            /**Returns  the second point of the boundary
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point2
            (
            );
            /**Sets  the second point of the boundary
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetPoint2
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the third point of the boundary
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point3
            (
            );
            /**Sets  the third point of the boundary
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetPoint3
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the fourth point of the boundary
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point4
            (
            );
            /**Sets  the fourth point of the boundary
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetPoint4
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the parameterization 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DegreesAndSegmentsOrPatchesBuilder * Parameterization
            (
            );
            /**Returns  the uniform pathches in U
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsUniformU
            (
            );
            /**Sets  the uniform pathches in U
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetUniformU
            (
                bool isUniform /** isuniform */ 
            );
            /**Returns  the uniform patches in V
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsUniformV
            (
            );
            /**Sets  the uniform patches in V
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetUniformV
            (
                bool isUniform /** isuniform */ 
            );
            /**Returns  the smooth factor influences the smoothness of the surface
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int SmoothFactor
            (
            );
            /**Sets  the smooth factor influences the smoothness of the surface
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetSmoothFactor
            (
                int smoothFactor /** smoothfactor */ 
            );
            /**Returns  the constraint option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsConstrained
            (
            );
            /**Sets  the constraint option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetConstrained
            (
                bool isConstrained /** isconstrained */ 
            );
            /**Returns  the direction constraint  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::Direction * VectorConstraint
            (
            );
            /**Sets  the direction constraint  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetVectorConstraint
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the radius option
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsRadius
            (
            );
            /**Sets  the radius option
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetRadius
            (
                bool isRadius /** isradius */ 
            );
            /**Returns  the radius is fixed to a specific value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RadiusValue
            (
            );
            /**Returns  the half angle option
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsHalfAngle
            (
            );
            /**Sets  the half angle option
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetHalfAngle
            (
                bool isHalfAngle /** ishalfangle */ 
            );
            /**Returns  the angle is fixed to a specific value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * AngleValue
            (
            );
            /**Returns  the closed or open surface
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsClosed
            (
            );
            /**Sets  the closed or open surface
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetClosed
            (
                bool isClosed /** isclosed */ 
            );
            /**Returns  the automatic point rejection
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsAutomatic
            (
            );
            /**Sets  the automatic point rejection
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetAutomatic
            (
                bool isAutomatic /** isautomatic */ 
            );
            /**Returns  the rejection threshold value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RejectionThresholdValue
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
