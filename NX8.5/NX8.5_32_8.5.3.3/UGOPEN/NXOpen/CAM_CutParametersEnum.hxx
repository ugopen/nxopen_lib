#ifndef NXOpen_CAM_CUTPARAMETERSENUM_HXX_INCLUDED
#define NXOpen_CAM_CUTPARAMETERSENUM_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CutParametersEnum.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        /** Available types for simplify shapes method */
        enum CutParametersSimplifyShapesTypes
        {
            CutParametersSimplifyShapesTypesNone/** none */,
            CutParametersSimplifyShapesTypesConvexHull/** convex hull */,
            CutParametersSimplifyShapesTypesMinimumBox/** minumum box */
        };

        /** Available types for traverse open passes */
        enum CutParametersTraverseOpenPassesTypes
        {
            CutParametersTraverseOpenPassesTypesZig/** Maintain cut direction */,
            CutParametersTraverseOpenPassesTypesZigZag/** Alternate cut direction */
        };

        /** Available types for cut order */
        enum CutParametersCutOrderTypes
        {
            CutParametersCutOrderTypesLevelFirst/** level first type */,
            CutParametersCutOrderTypesDepthFirst/** depth first type */,
            CutParametersCutOrderTypesDepthFirstAlways/** depth first always type */
        };

        /** Available types for region resequencing method */
        enum CutParametersRegionSequencingTypes
        {
            CutParametersRegionSequencingTypesStandard/** standard */,
            CutParametersRegionSequencingTypesOptimize/** Optimize */,
            CutParametersRegionSequencingTypesRegionPoints/** Follow Start Points */,
            CutParametersRegionSequencingTypesPredrillPoints/** Follow Predrill Points */
        };

        /** Available types for trim control method */
        enum CutParametersTrimControlTypes
        {
            CutParametersTrimControlTypesNone/** none */,
            CutParametersTrimControlTypesSilhoutte/** silhoutte type */,
            CutParametersTrimControlTypesExteriorEdges/** exterior edges */
        };

        /** Available types for plunge direction  */
        enum CutParametersPlungeDirectionTypes
        {
            CutParametersPlungeDirectionTypesCutDown/** Cut Down */,
            CutParametersPlungeDirectionTypesUpAndDown/** Cut Up and Down */
        };

        /** Available types for actions when gouging   */
        enum CutParametersActionWhenGougingTypes
        {
            CutParametersActionWhenGougingTypesWarning/** Warning */,
            CutParametersActionWhenGougingTypesSkip/** Skip */,
            CutParametersActionWhenGougingTypesRetract/** Retract */,
            CutParametersActionWhenGougingTypesTilt/** Tilt */
        };

        /** Available types for IPW */
        enum CutParametersIpwTypes
        {
            CutParametersIpwTypesThickness/** Thickness */,
            CutParametersIpwTypesNone/** none */,
            CutParametersIpwTypesThreeDimension/** 3d type */,
            CutParametersIpwTypesLevelBased/** level based type */,
            CutParametersIpwTypesTwoDimension/** 2d type */,
            CutParametersIpwTypesUseReferenceTool/** Use reference tool */
        };

        /** Available types for pattern direction */
        enum CutParametersPatternDirectionTypes
        {
            CutParametersPatternDirectionTypesOutward/** Outward */,
            CutParametersPatternDirectionTypesInward/** Inward */
        };

        /** Available types for cut connection 
         <br>  Created in NX6.0.0.  <br>  
        */
        enum CutParametersCutConnectionTypes
        {
            CutParametersCutConnectionTypesTraverse/** Cut connection: Traverse*/,
            CutParametersCutConnectionTypesContinuousCuts/** Cut connection: Continuous Cuts*/
        };

        /** Available types for cleanup control 
         <br>  Created in NX6.0.0.  <br>  
        */
        enum CutParametersCleanupControlTypes
        {
            CutParametersCleanupControlTypesFollowShoulder/** Cleanup control: Follow Shoulder*/,
            CutParametersCleanupControlTypesCutToShoulder/** Cleanup control: Cut to Shoulder*/
        };

        /** Available types for profile 
         <br>  Created in NX6.0.0.  <br>  
        */
        enum CutParametersProfileCutRegionsTypes
        {
            CutParametersProfileCutRegionsTypesAutomaticDetection/** Profile cut regions: Automatic Detection */,
            CutParametersProfileCutRegionsTypesSameAsRoughing/** Profile cut regions: Same as Roughing */
        };

        /** Available types for fillets 
         <br>  Created in NX6.0.0.  <br>  
        */
        enum CutParametersFilletsTypes
        {
            CutParametersFilletsTypesAddIntoFaces/** Fillets mode: Add into Faces */,
            CutParametersFilletsTypesAddIntoDiameters/** Fillets mode: Add into Diameters */,
            CutParametersFilletsTypesSplit/** Fillets mode: Split */,
            CutParametersFilletsTypesOmit/** Fillets mode: Omit */
        };

        /** Available types for finish passes 
         <br>  Created in NX6.0.0.  <br>  
        */
        enum CutParametersFinishPassesTypes
        {
            CutParametersFinishPassesTypesMaintain/** Maintain */,
            CutParametersFinishPassesTypesAlternate/** Alternate */
        };

        /** Available types for Finding Corner Options  
         <br>  Created in NX7.5.0.  <br>  
        */
        enum CutParametersCornerFindingTypes
        {
            CutParametersCornerFindingTypesWithinCutArea/** Within Cut Area */,
            CutParametersCornerFindingTypesIncludeAdjacentPart/** Inlcude Adjacent Part */
        };

        /** extend floor to options 
         <br>  Created in NX8.0.0.  <br>  
        */
        enum CutParametersExtendFloorTypes
        {
            CutParametersExtendFloorTypesNone/** None */,
            CutParametersExtendFloorTypesPartOutline/** Part Outline */,
            CutParametersExtendFloorTypesBlankOutline/** Blank Outline */
        };

        /** Available types for Tool Run Off Options  
         <br>  Created in NX8.0.0.  <br>  
        */
        enum CutParametersToolRunOffTypes
        {
            CutParametersToolRunOffTypesExtendToRegion/** Extend To Region */,
            CutParametersToolRunOffTypesSpecify/** Specify */
        };

        /** Available types for Adjacent Blades Option  
         <br>  Created in NX8.5.0.  <br>  
        */
        enum CutParametersAdjacentBladesTypes
        {
            CutParametersAdjacentBladesTypesUseBladeStock/** Use Blade Stock */,
            CutParametersAdjacentBladesTypesUseCheckStock/** Use Check Stock*/
        };

        /** Available modes for Turning Cutting Corners Extend At Start  
         <br>  Created in NX8.5.0.  <br>  
        */
        enum CutParametersExtendAtStartMode
        {
            CutParametersExtendAtStartModeNone/** None */,
            CutParametersExtendAtStartModeToContainmentGeometry/** To Containment Geometry */,
            CutParametersExtendAtStartModeIncludeAdjacentChamfersOrRounds/** Include Adjacent Chamfers or Rounds */
        };

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
