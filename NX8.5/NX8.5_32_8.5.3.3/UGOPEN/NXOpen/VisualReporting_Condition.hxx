#ifndef NXOpen_VISUALREPORTING_CONDITION_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_CONDITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_Condition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/VisualReporting_Condition.hxx>
#include <NXOpen/VisualReporting_Property.hxx>
#include <NXOpen/libnxopencpp_visualreporting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace VisualReporting
    {
        class Condition;
    }
    class NXObject;
    namespace VisualReporting
    {
        class Property;
    }
    namespace VisualReporting
    {
        class _ConditionBuilder;
        class ConditionImpl;
        /** A Condition within a @link VisualReporting::Rule VisualReporting::Rule@endlink .
            
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_VISUALREPORTINGEXPORT  Condition : public NXObject
        {
            /** Represents the possible type options
                       for a @link VisualReporting::Condition VisualReporting::Condition@endlink . If the type is a
                       @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                       the type of value can be found from @link VisualReporting::Condition::Datatype VisualReporting::Condition::Datatype@endlink .
                    */
            public: enum TypeOption
            {
                TypeOptionAndCondition/** and condition */ ,
                TypeOptionOrCondition/** or condition */ ,
                TypeOptionNotCondition/** not condition */ ,
                TypeOptionValueCondition/** value condition */ 
            };

            /** Represents the possible operator type options.
                       for a @link VisualReporting::Condition VisualReporting::Condition@endlink .
                    */
            public: enum OperatorOption
            {
                OperatorOptionEqualOperator/** equal operator */ ,
                OperatorOptionLessThanOperator/** less than operator */ ,
                OperatorOptionNotLessThanOperator/** not less than operator */ ,
                OperatorOptionGreaterThanOperator/** greater than operator */ ,
                OperatorOptionNotGreaterThanOperator/** not greater than operator */ ,
                OperatorOptionNotEqualOperator/** not equal operator */ ,
                OperatorOptionRegularExpressionOperator/** regular expression operator */ ,
                OperatorOptionContainsOperator/** contains operator */ ,
                OperatorOptionDoesNotContainOperator/** does not contain operator */ ,
                OperatorOptionOnOrBeforeOperator/** on or before operator */ ,
                OperatorOptionOnOrAfterOperator/** on or after operator */ 
            };

            private: ConditionImpl * m_condition_impl;
            private: friend class  _ConditionBuilder;
            protected: Condition();
            public: ~Condition();
            /**Returns  the @link VisualReporting::Condition::TypeOption VisualReporting::Condition::TypeOption@endlink  of this @link VisualReporting::Condition VisualReporting::Condition@endlink 

                        Note that this @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  cannot be modified. 
                        Instead it is determined when creating this @link VisualReporting::Condition VisualReporting::Condition@endlink  by using the appropriate function:
                         - @link VisualReporting::VisualReportBuilder::CreateStringCondition VisualReporting::VisualReportBuilder::CreateStringCondition@endlink 
                         - @link VisualReporting::VisualReportBuilder::CreateIntegerCondition VisualReporting::VisualReportBuilder::CreateIntegerCondition@endlink 
                         - @link VisualReporting::VisualReportBuilder::CreateRealCondition VisualReporting::VisualReportBuilder::CreateRealCondition@endlink 
                         - @link VisualReporting::VisualReportBuilder::CreateBooleanCondition VisualReporting::VisualReportBuilder::CreateBooleanCondition@endlink 
                         - @link VisualReporting::VisualReportBuilder::CreateAndCondition VisualReporting::VisualReportBuilder::CreateAndCondition@endlink 
                         - @link VisualReporting::VisualReportBuilder::CreateOrCondition VisualReporting::VisualReportBuilder::CreateOrCondition@endlink 
                         - @link VisualReporting::VisualReportBuilder::CreateNotCondition VisualReporting::VisualReportBuilder::CreateNotCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition::TypeOption Type
            (
            );
            /**Returns  the @link VisualReporting::Property VisualReporting::Property@endlink  of this @link VisualReporting::Condition VisualReporting::Condition@endlink . If the
                        @link VisualReporting::Property VisualReporting::Property@endlink  is set to NULL, then it is
                        deleted.
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Property * Property
            (
            );
            /**Sets  the @link VisualReporting::Property VisualReporting::Property@endlink  of this @link VisualReporting::Condition VisualReporting::Condition@endlink . If the
                        @link VisualReporting::Property VisualReporting::Property@endlink  is set to NULL, then it is
                        deleted.
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetProperty
            (
                NXOpen::VisualReporting::Property * property /** property */ 
            );
            /**Returns  the @link VisualReporting::Property::DatatypeOption VisualReporting::Property::DatatypeOption@endlink  of this @link VisualReporting::Condition VisualReporting::Condition@endlink .

                        The returned data type will never be
                        @link VisualReporting::Property::DatatypeOptionUnknown VisualReporting::Property::DatatypeOptionUnknown@endlink .
                    
                        Note that this @link VisualReporting::Condition::Datatype VisualReporting::Condition::Datatype@endlink  cannot be modified. 
                        Instead it is specified when creating this @link VisualReporting::Condition VisualReporting::Condition@endlink  by using the appropriate function:
                         - @link VisualReporting::VisualReportBuilder::CreateStringCondition VisualReporting::VisualReportBuilder::CreateStringCondition@endlink 
                         - @link VisualReporting::VisualReportBuilder::CreateIntegerCondition VisualReporting::VisualReportBuilder::CreateIntegerCondition@endlink 
                         - @link VisualReporting::VisualReportBuilder::CreateRealCondition VisualReporting::VisualReportBuilder::CreateRealCondition@endlink 
                         - @link VisualReporting::VisualReportBuilder::CreateBooleanCondition VisualReporting::VisualReportBuilder::CreateBooleanCondition@endlink 

                        Note that the @link VisualReporting::Condition VisualReporting::Condition@endlink s created using the following functions do not
                        have @link VisualReporting::Property::DatatypeOption VisualReporting::Property::DatatypeOption@endlink s and calling this function will cause an error for these:
                         - @link VisualReporting::VisualReportBuilder::CreateAndCondition VisualReporting::VisualReportBuilder::CreateAndCondition@endlink 
                         - @link VisualReporting::VisualReportBuilder::CreateOrCondition VisualReporting::VisualReportBuilder::CreateOrCondition@endlink 
                         - @link VisualReporting::VisualReportBuilder::CreateNotCondition VisualReporting::VisualReportBuilder::CreateNotCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Property::DatatypeOption Datatype
            (
            );
            /**Returns  whether this @link VisualReporting::Condition VisualReporting::Condition@endlink  requires user input.
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: bool HasUserSpecifiedValue
            (
            );
            /**Sets  whether this @link VisualReporting::Condition VisualReporting::Condition@endlink  requires user input.
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetHasUserSpecifiedValue
            (
                bool isUserSpecified /** isuserspecified */ 
            );
            /**Returns  the user prompt for this @link VisualReporting::Condition VisualReporting::Condition@endlink . Only useful for a condition where
                        @link VisualReporting::Condition::HasUserSpecifiedValue VisualReporting::Condition::HasUserSpecifiedValue@endlink  is true.
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString UserPrompt
            (
            );
            /**Sets  the user prompt for this @link VisualReporting::Condition VisualReporting::Condition@endlink . Only useful for a condition where
                        @link VisualReporting::Condition::HasUserSpecifiedValue VisualReporting::Condition::HasUserSpecifiedValue@endlink  is true.
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetUserPrompt
            (
                const NXString & userPrompt /** userprompt */ 
            );
            /**Sets  the user prompt for this @link VisualReporting::Condition VisualReporting::Condition@endlink . Only useful for a condition where
                        @link VisualReporting::Condition::HasUserSpecifiedValue VisualReporting::Condition::HasUserSpecifiedValue@endlink  is true.
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void SetUserPrompt
            (
                const char * userPrompt /** userprompt */ 
            );
            /**Returns  the description for this @link VisualReporting::Condition VisualReporting::Condition@endlink .
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString Description
            (
            );
            /**Sets  the description for this @link VisualReporting::Condition VisualReporting::Condition@endlink .
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets  the description for this @link VisualReporting::Condition VisualReporting::Condition@endlink .
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /**Returns  the value of this @link VisualReporting::Condition VisualReporting::Condition@endlink . 
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString Value
            (
            );
            /**Sets  the value of this @link VisualReporting::Condition VisualReporting::Condition@endlink . 
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetValue
            (
                const NXString & conditionValue /** conditionvalue */ 
            );
            /**Sets  the value of this @link VisualReporting::Condition VisualReporting::Condition@endlink . 
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void SetValue
            (
                const char * conditionValue /** conditionvalue */ 
            );
            /**Returns  the @link VisualReporting::Condition::OperatorOption VisualReporting::Condition::OperatorOption@endlink  of this @link VisualReporting::Condition VisualReporting::Condition@endlink . 
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition::OperatorOption OperatorType
            (
            );
            /**Sets  the @link VisualReporting::Condition::OperatorOption VisualReporting::Condition::OperatorOption@endlink  of this @link VisualReporting::Condition VisualReporting::Condition@endlink . 
                        Only valid for a @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Type VisualReporting::Condition::Type@endlink  is @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetOperatorType
            (
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** operatortype */ 
            );
            /**Returns  the parent condition of this @link VisualReporting::Condition VisualReporting::Condition@endlink . If this
                        condition has no parent or if the parent isn't a condition
                        then this returns NULL.

                        Note that this @link VisualReporting::Condition::ParentCondition VisualReporting::Condition::ParentCondition@endlink  cannot be modified. 
                        Instead it is determined when inserting this @link VisualReporting::Condition VisualReporting::Condition@endlink  in the @link VisualReporting::Rule VisualReporting::Rule@endlink 
                        by using the appropriate function:
                         - @link VisualReporting::VisualReportBuilder::SetFilterConditionOfRule VisualReporting::VisualReportBuilder::SetFilterConditionOfRule@endlink 
                         - @link VisualReporting::VisualReportBuilder::AddChildToCondition VisualReporting::VisualReportBuilder::AddChildToCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * ParentCondition
            (
            );
            /** Returns whether the given @link VisualReporting::Condition VisualReporting::Condition@endlink  is an immediate child of this condition
                     @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: bool IsChildCondition
            (
                NXOpen::VisualReporting::Condition * childCondition /** The possible child Condition */
            );
            /** Return the specified child Condition from this @link VisualReporting::Condition VisualReporting::Condition@endlink 
                     @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * GetChildCondition
            (
                int index /** The index of the returned Condition. */
            );
            /** Returns all the child Conditions in this @link VisualReporting::Condition VisualReporting::Condition@endlink 
                     @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: std::vector<NXOpen::VisualReporting::Condition *> GetChildConditions
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
