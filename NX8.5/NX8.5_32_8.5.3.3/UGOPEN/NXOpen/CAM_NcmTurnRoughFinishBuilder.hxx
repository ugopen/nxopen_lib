#ifndef NXOpen_CAM_NCMTURNROUGHFINISHBUILDER_HXX_INCLUDED
#define NXOpen_CAM_NCMTURNROUGHFINISHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_NcmTurnRoughFinishBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_NcmTurningBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class NcmTurnRoughFinishBuilder;
    }
    namespace CAM
    {
        class NcmTurningBuilder;
    }
    namespace CAM
    {
        class TurnEngageRetractBuilder;
    }
    namespace CAM
    {
        class TurnRoughFinishLocalReturnBuilder;
    }
    namespace CAM
    {
        class _NcmTurnRoughFinishBuilderBuilder;
        class NcmTurnRoughFinishBuilderImpl;
        /** Represents a CAM.NcmTurnRoughFinishBuilder 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  NcmTurnRoughFinishBuilder : public CAM::NcmTurningBuilder
        {
            private: NcmTurnRoughFinishBuilderImpl * m_ncmturnroughfinishbuilder_impl;
            private: friend class  _NcmTurnRoughFinishBuilderBuilder;
            protected: NcmTurnRoughFinishBuilder();
            public: ~NcmTurnRoughFinishBuilder();
            /**Returns  the Profiling Engage builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TurnEngageRetractBuilder * EngageProfileBuilder
            (
            );
            /**Returns  the Profiling Retract builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TurnEngageRetractBuilder * RetractProfileBuilder
            (
            );
            /**Returns  the additional checking for automatic engage
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool AvoidanceForAutomaticEngage
            (
            );
            /**Sets  the additional checking for automatic engage
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAvoidanceForAutomaticEngage
            (
                bool avoidanceAutomaticEngage /** the additional checking for automatic engage*/
            );
            /**Returns  the additional checking for automatic retract 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool AvoidanceForAutomaticRetract
            (
            );
            /**Sets  the additional checking for automatic retract 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAvoidanceForAutomaticRetract
            (
                bool avoidanceAutomaticRetract /** the additional checking for automatic retract */
            );
            /**Returns  the additional checking for minimum clearance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool AvoidanceForMinimumClearance
            (
            );
            /**Sets  the additional checking for minimum clearance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAvoidanceForMinimumClearance
            (
                bool avoidanceMinimumClearance /** the additional checking for minimum clearance */
            );
            /**Returns  the radial safe clearance value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double RadialSafeClearance
            (
            );
            /**Sets  the radial safe clearance value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialSafeClearance
            (
                double radialSafeClearanceValue /** the radial safe clearance value */
            );
            /**Returns  the axial safe clearance value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double AxialSafeClearance
            (
            );
            /**Sets  the axial safe clearance value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialSafeClearance
            (
                double axialSafeClearanceValue /** the axial safe clearance value */
            );
            /**Returns  the Local Return builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TurnRoughFinishLocalReturnBuilder * LocalReturnBuilder
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
