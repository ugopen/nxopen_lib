#ifndef NXOpen_GEOMETRICUTILITIES_MIRRORPATTERN_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_MIRRORPATTERN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_MirrorPattern.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_MirrorPattern.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class MirrorPattern;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Plane;
    class SelectISurface;
    namespace GeometricUtilities
    {
        class _MirrorPatternBuilder;
        class MirrorPatternImpl;
        /** the Mirror pattern definition.  
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  MirrorPattern : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** the Plane options. */
            public: enum PlaneOptions
            {
                PlaneOptionsExisting/** existing plane*/,
                PlaneOptionsNew/** new plane */
            };

            private: MirrorPatternImpl * m_mirrorpattern_impl;
            private: friend class  _MirrorPatternBuilder;
            protected: MirrorPattern();
            public: ~MirrorPattern();
            /**Returns  the Existing Mirror Plane 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectISurface * ExistingPlane
            (
            );
            /**Returns  the plane option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::MirrorPattern::PlaneOptions PlaneOption
            (
            );
            /**Sets  the plane option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPlaneOption
            (
                NXOpen::GeometricUtilities::MirrorPattern::PlaneOptions planeOptions /** plane options */ 
            );
            /**Returns  the new plane  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * NewPlane
            (
            );
            /**Sets  the new plane  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNewPlane
            (
                NXOpen::Plane * newPlane /** newplane */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
