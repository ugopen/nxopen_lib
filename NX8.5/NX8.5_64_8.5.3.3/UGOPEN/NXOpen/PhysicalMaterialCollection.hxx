#ifndef NXOpen_PHYSICALMATERIALCOLLECTION_HXX_INCLUDED
#define NXOpen_PHYSICALMATERIALCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PhysicalMaterialCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PhysicalMaterial.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class PhysicalMaterialCollection;
    class MaterialManager;
    class Material;
    namespace PhysMat
    {
        class PhysicalMaterialAssignBuilder;
    }
    namespace PhysMat
    {
        class PhysicalMaterialLibMgrBuilder;
    }
    namespace PhysMat
    {
        class PhysicalMaterialListBuilder;
    }
    class PhysicalMaterial;
    class PhysicalMaterialBuilder;
    class TaggedObject;
    class PhysicalMaterialCollectionImpl;
    /**  @brief  Represents the collection of all @link PhysicalMaterial PhysicalMaterial@endlink  objects in this Part 

       <br> To obtain an instance of this class, refer to @link MaterialManager  MaterialManager @endlink  <br> 
     <br>  Created in NX5.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  PhysicalMaterialCollection : public TaggedObjectCollection
    {
        private: PhysicalMaterialCollectionImpl * m_physicalmaterialcollection_impl;
        private: NXOpen::MaterialManager* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit PhysicalMaterialCollection(NXOpen::MaterialManager *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~PhysicalMaterialCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::PhysicalMaterialCollection::iterator::copy,initializer)
        class iterator
        {
        public:
            /** Value type associated with iterator*/ 

            typedef Material * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::PhysicalMaterialCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::PhysicalMaterialCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Finds the @link PhysicalMaterial PhysicalMaterial@endlink  with the given identifier as recorded in a journal.
            An exception will be thrown if no object can be found with the given journal identifier.  @return  material found 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Material * FindObject
        (
            const NXString & journalIdentifier /** Identifier to be found */
        );
        /** Finds the @link PhysicalMaterial PhysicalMaterial@endlink  with the given identifier as recorded in a journal.
            An exception will be thrown if no object can be found with the given journal identifier.  @return  material found 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Material * FindObject
        (
            const char * journalIdentifier /** Identifier to be found */
        );
        /** Creates a @link PhysMat::PhysicalMaterialListBuilder PhysMat::PhysicalMaterialListBuilder@endlink  that controls the physical materials list UI block look and feel as well as capturing the interactions so the values/settings can be journaled.
             @return  created @link PhysMat::PhysicalMaterialListBuilder PhysMat::PhysicalMaterialListBuilder@endlink  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysMat::PhysicalMaterialListBuilder * CreateListBlockBuilder
        (
        );
        /** Creates a PhysMat.MaterialAssignBuilder that is used to control/set the material assign UI as well as to assign materials to bodies. 
             @return  created @link PhysMat::PhysicalMaterialAssignBuilder PhysMat::PhysicalMaterialAssignBuilder@endlink  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysMat::PhysicalMaterialAssignBuilder * CreateMaterialAssignBuilder
        (
        );
        /** Creates a PhysMat.PhysicalMaterialBuilder used to edit physical materials.
             @return  created @link PhysicalMaterialBuilder PhysicalMaterialBuilder@endlink  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterialBuilder * CreatePhysicalMaterialEditBuilder
        (
            NXOpen::PhysicalMaterial * physicalMaterial /** @link PhysicalMaterial PhysicalMaterial@endlink  to be edited   */
        );
        /** Creates a PhysMat.PhysicalMaterialBuilder used to inspect physical materials.
             @return  created @link PhysicalMaterialBuilder PhysicalMaterialBuilder@endlink  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterialBuilder * CreatePhysicalMaterialInspectBuilder
        (
            NXOpen::PhysicalMaterial * physicalMaterial /** @link PhysicalMaterial PhysicalMaterial@endlink  to be inspected   */
        );
        /** Creates a PhysMat.PhysicalMaterialBuilder used to create a physical materials of a given type
             @return  created @link PhysicalMaterialBuilder PhysicalMaterialBuilder@endlink  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterialBuilder * CreatePhysicalMaterialBuilder
        (
            NXOpen::PhysicalMaterial::Type materialType /** Type of @link PhysicalMaterial PhysicalMaterial@endlink  to be created  */
        );
        /** Creates a PhysMat.PhysicalMaterialLibMgrBuilder used by the material library manager UI to control the look and feel as well as capturing the interactions so the values/settings can be journaled.
             @return  created @link PhysMat::PhysicalMaterialLibMgrBuilder PhysMat::PhysicalMaterialLibMgrBuilder@endlink  
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysMat::PhysicalMaterialLibMgrBuilder * CreateMaterialLibmgrBuilder
        (
        );
        /** Creates a non-editable material in the part from a NX Material Library definition.  It is preferable to use either NX MatML or NX Legacy library versions as they will have better performance.
             @return  the loaded material  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromNxlibrary
        (
            const NXString & libraryReference /** the unique library reference for a material in this Library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a non-editable material in the part from a NX Material Library definition.  It is preferable to use either NX MatML or NX Legacy library versions as they will have better performance.
             @return  the loaded material  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadFromNxlibrary
        (
            const char * libraryReference /** the unique library reference for a material in this Library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a non-editable material in the part from a MatML file definition.  The material is identified by the library name and the unique material name.  
                If the library name is not fully qualified, it will attempt to find a MatML library with this name in the current directory, followed by the specified 
                customer defaults values for the user and site MatML libraries.  If the customer defaults are using the file format, it will look in the directory where 
                the specified file is located.  
             @return  the loaded material  
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromMatmlLibrary
        (
            const NXString & libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & materialName /** the material name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a non-editable material in the part from a MatML file definition.  The material is identified by the library name and the unique material name.  
                If the library name is not fully qualified, it will attempt to find a MatML library with this name in the current directory, followed by the specified 
                customer defaults values for the user and site MatML libraries.  If the customer defaults are using the file format, it will look in the directory where 
                the specified file is located.  
             @return  the loaded material  
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadFromMatmlLibrary
        (
            const char * libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * materialName /** the material name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a non-editable material in the part from the legacy (phys_material.dat) material library definition.   The material is identified by the unique material identifier in the phys_material.dat file.
             @return  the loaded material  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromLegacynxlibrary
        (
            const NXString & libraryReference /** the unique library reference for a material in this Library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a non-editable material in the part from the legacy (phys_material.dat) material library definition.   The material is identified by the unique material identifier in the phys_material.dat file.
             @return  the loaded material  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadFromLegacynxlibrary
        (
            const char * libraryReference /** the unique library reference for a material in this Library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a non-editable material in the part from a NX MatML material definition.
             @return  the loaded material  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromNxmatmllibrary
        (
            const NXString & materialName /** the unique material name from within this Library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a non-editable material in the part from a NX MatML material definition.
             @return  the loaded material  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadFromNxmatmllibrary
        (
            const char * materialName /** the unique material name from within this Library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a non-editable material in the part from a material library name.
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromLibrary
        (
            const NXString & pcLibName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcMatlName /** the material name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a non-editable material in the part from a material library name.
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadFromLibrary
        (
            const char * pcLibName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcMatlName /** the material name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a non-editable material in the part from a Teamcenter material item revision. 
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadMaterialItemRevision
        (
            const NXString & pcMatlItem /** the material item    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcRevisionID /** the revision identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a non-editable material in the part from a Teamcenter material item revision. 
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadMaterialItemRevision
        (
            const char * pcMatlItem /** the material item    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcRevisionID /** the revision identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Checks if a Teamcenter material item revision is loaded into a part file or not.  If it is, the loaded material is returned. 
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * GetLoadedMaterialItemRevision
        (
            const NXString & pcMatlItem /** the material item    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcRevisionID /** the revision identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Checks if a Teamcenter material item revision is loaded into a part file or not.  If it is, the loaded material is returned. 
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * GetLoadedMaterialItemRevision
        (
            const char * pcMatlItem /** the material item    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcRevisionID /** the revision identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Checks if a library material is loaded into a part file or not.  If it is, the loaded material is returned.
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * GetLoadedLibraryMaterial
        (
            const NXString & pcLibName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcMatlName /** the material name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Checks if a library material is loaded into a part file or not.  If it is, the loaded material is returned.
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * GetLoadedLibraryMaterial
        (
            const char * pcLibName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcMatlName /** the material name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates an editable material (copy) in the part from a library material definition. 
             @return  the copied material  
         <br>  Created in NX6.0.4.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * CopyMaterialFromLibrary
        (
            const NXString & libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & libraryReference /** the material name/identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates an editable material (copy) in the part from a library material definition. 
             @return  the copied material  
         <br>  Created in NX6.0.4.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * CopyMaterialFromLibrary
        (
            const char * libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * libraryReference /** the material name/identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates an editable material (copy) in the part from a library material definition.
             @return  the copied material  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * CopyMaterialFromLibrary
        (
            const NXString & libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & libraryReference /** the material name/identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool retainParentPedigree /** true indicates that the copied material should retain information about what library material it came from */
        );
        /** Creates an editable material (copy) in the part from a library material definition.
             @return  the copied material  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * CopyMaterialFromLibrary
        (
            const char * libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * libraryReference /** the material name/identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool retainParentPedigree /** true indicates that the copied material should retain information about what library material it came from */
        );
        /** Creates an editable material (copy) in the part from a Teamcenter material item revision.  
             @return  the copied material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * CopyMaterialItemRevision
        (
            const NXString & pcMatlItem /** the material item    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcRevisionID /** the revision identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates an editable material (copy) in the part from a Teamcenter material item revision.  
             @return  the copied material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * CopyMaterialItemRevision
        (
            const char * pcMatlItem /** the material item    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcRevisionID /** the revision identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Writes out materials to a material library file.   These materials can be local material definitions or material definitions from other material libraries.
                The combination of the material name and library name identify a material definition.  If the material definition is for a local material, the name is 
                specified and the library name is specified as "".  Write access is needed for the Exported library. 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void OutputMaterialsToLibrary
        (
            std::vector<NXString> & pcMatlNames /** Array of identifiers of the materials to be exported         <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the material names   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcExportedLibName /** The library to write the material definitions to              <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Writes out materials to a material library file.   These materials can be local material definitions or material definitions from other material libraries.
                The combination of the material name and library name identify a material definition.  If the material definition is for a local material, the name is 
                specified and the library name is specified as "".  Write access is needed for the Exported library. 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        void OutputMaterialsToLibrary
        (
            std::vector<NXString> & pcMatlNames /** Array of identifiers of the materials to be exported         <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the material names   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcExportedLibName /** The library to write the material definitions to              <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Writes out materials to a material library file.  These materials can be local material definitions or material definitions
                from other material libraries.  The combination of the material name and library name identify a material definition.  If
                the material definition is for a local material, the name is specified and the library name is specified as "".  Write access
                is needed for the Exported library.  If the bUpdateLibraryReferences is set to true, the NX model is updated to
                reflect the exported library as the library the material is now referenced in.
            
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: void ExportMaterialsToLibrary
        (
            std::vector<NXString> & pcMatlNames /** Array of identifiers of the materials to be exported         <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the material names   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcExportedLibName /** The library to write the material definitions to              <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool bUpdateLibraryReference /** true indicates that the library reference of loaded/local materials should now refer to the exported library, false indicates the library reference should remain unchanged */
        );
        /** Writes out materials to a material library file.  These materials can be local material definitions or material definitions
                from other material libraries.  The combination of the material name and library name identify a material definition.  If
                the material definition is for a local material, the name is specified and the library name is specified as "".  Write access
                is needed for the Exported library.  If the bUpdateLibraryReferences is set to true, the NX model is updated to
                reflect the exported library as the library the material is now referenced in.
            
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        void ExportMaterialsToLibrary
        (
            std::vector<NXString> & pcMatlNames /** Array of identifiers of the materials to be exported         <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the material names   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcExportedLibName /** The library to write the material definitions to              <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool bUpdateLibraryReference /** true indicates that the library reference of loaded/local materials should now refer to the exported library, false indicates the library reference should remain unchanged */
        );
        /** Updates the materials in a material library file.  Write access is needed for this operation.
            
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void UpdateMaterialsInLibrary
        (
            const std::vector<NXOpen::PhysicalMaterial *> & tEditedMatl /** Array of loaded material tags  */,
            std::vector<NXString> & pMatlNames /** Array of the material names which match the name in the library that should take the properties of the  corresponding material (tEditedMatl)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcLibName /** Library to modify   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Updates the materials in a material library file.  Write access is needed for this operation.
            
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        void UpdateMaterialsInLibrary
        (
            const std::vector<NXOpen::PhysicalMaterial *> & tEditedMatl /** Array of loaded material tags  */,
            std::vector<NXString> & pMatlNames /** Array of the material names which match the name in the library that should take the properties of the  corresponding material (tEditedMatl)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcLibName /** Library to modify   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes the materials from a material library file.  Write access is needed for this operation.
            
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void DeleteMaterialsFromLibrary
        (
            std::vector<NXString> & pMatlNames /** Arrays of identifiers of the materials to be deleted from the library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcLibName /** Library to modify   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes the materials from a material library file.  Write access is needed for this operation.
            
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        void DeleteMaterialsFromLibrary
        (
            std::vector<NXString> & pMatlNames /** Arrays of identifiers of the materials to be deleted from the library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcLibName /** Library to modify   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the bodies that don't have a material assigned.  
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: void FindBodiesWithoutMaterial
        (
            std::vector<NXOpen::TaggedObject *> & objects /** the array of bodies without a material */
        );
        /** Returns true if there are bodies in the specified part that do not have a material assigned to them; false if all bodies in the part have a material assigned.   @return  
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: bool AnyBodiesWithoutMaterial
        (
        );
        /** Returns the bodies that are not using the preferred material (either no material assigned or the non-preferred a different material assigned).  
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: void FindBodiesWithoutPreferredMaterial
        (
            std::vector<NXOpen::TaggedObject *> & objects /** the array of bodies not using preferred material */
        );
        /** Returns true if there are bodies that do not have the preferred material assigned to them and false if all bodies are assigned the preferred material. If there is not a preferred material specified, the return value is true.    @return  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: bool AnyBodiesWithoutPreferredMaterial
        (
        );
        /** Displays the property values for the specified library material in the information window.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: void InfoLibraryMaterial
        (
            const NXString & pcLibAr /** the library name    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcMatlNameAr /** the material name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Displays the property values for the specified library material in the information window.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        void InfoLibraryMaterial
        (
            const char * pcLibAr /** the library name    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcMatlNameAr /** the material name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Writes the property values for the specified library material to a file.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: void InfoLibraryMaterialToFile
        (
            const NXString & pcLibAr /** the library name    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcMatlNameAr /** the material name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const NXString & pcFileName /** the full path including filename of file where the information should be written   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Writes the property values for the specified library material to a file.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        void InfoLibraryMaterialToFile
        (
            const char * pcLibAr /** the library name    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcMatlNameAr /** the material name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const char * pcFileName /** the full path including filename of file where the information should be written   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Displays the property values for the specified Teamcenter Material Item Revision in the information window.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: void InfoItemRevision
        (
            const NXString & pcMaterialItem /** the material item             <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcRevision /** the revision identifier       <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Displays the property values for the specified Teamcenter Material Item Revision in the information window.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        void InfoItemRevision
        (
            const char * pcMaterialItem /** the material item             <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcRevision /** the revision identifier       <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Writes the property values for the specified Teamcenter Material Item Revision to a file.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: void InfoItemRevisionToFile
        (
            const NXString & pcMaterialItem /** the material item             <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcRevision /** the revision identifier       <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const NXString & pcFileName /** the full path including filename of file where the information should be written   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Writes the property values for the specified Teamcenter Material Item Revision to a file.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        void InfoItemRevisionToFile
        (
            const char * pcMaterialItem /** the material item             <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * pcRevision /** the revision identifier       <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const char * pcFileName /** the full path including filename of file where the information should be written   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the materials used in the part  @return  Materials used 
         <br>  Created in NX8.0.1.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::PhysicalMaterial *> GetUsedMaterials
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
