#ifndef NXOpen_ROUTING_OVERSTOCKAPPLICATION_HXX_INCLUDED
#define NXOpen_ROUTING_OVERSTOCKAPPLICATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_OverstockApplication.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Routing_OverstockApplicationCollection.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class OverstockApplication;
    }
    class Curve;
    class NXObject;
    class Point;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class Overstock;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _OverstockApplicationBuilder;
        class OverstockApplicationImpl;
        /** Represents a collection of @link Routing::OverstockApplication Routing::OverstockApplication@endlink  objects. 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  OverstockApplication : public NXObject
        {
            private: OverstockApplicationImpl * m_overstockapplication_impl;
            private: friend class  _OverstockApplicationBuilder;
            protected: OverstockApplication();
            public: ~OverstockApplication();
            /**  Returns the set of segments over which the overstock is applied.  @return  the contiguous set of segments this overstock
                                                                                          application is covering.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: std::vector<NXOpen::Routing::ISegment *> GetSegments
            (
            );
            /**Returns   the start control point of the path over which the overstock is applied. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Routing::ControlPoint * StartOfPath
            (
            );
            /**Returns   the method used to define the overstock application. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Routing::Method Definition
            (
            );
            /**Returns   the start point of overstock on the path.  Used in
                         Interval, Point to Point, and Point and Length definition
                         methods. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Point * StartPointOfOverstock
            (
            );
            /**Returns   the end point of overstock on the path.  Used in the Point to Point definition method. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Point * EndPointOfOverstock
            (
            );
            /**Returns   the mid point of overstock on the path.  Used in Point and Length definition
                         method. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Point * MidPointOfOverstock
            (
            );
            /** Gets the cross sections controlled by this object.  These
                     * cross sections could be used for a custom bundling algorithm.   @return  Cross sections.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: std::vector<NXOpen::Curve *> GetCrossSections
            (
            );
            /** Gets the @link Routing::Stock Routing::Stock@endlink  and
                     * @link Routing::OverstockApplication Routing::OverstockApplication@endlink  that this
                     * @link Routing::OverstockApplication Routing::OverstockApplication@endlink  covers.  @return  Covered stocks.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: std::vector<NXOpen::Routing::Stock *> GetCoveredStocks
            (
            );
            /** Sets the @link Routing::Stock Routing::Stock@endlink  and
                     * @link Routing::OverstockApplication Routing::OverstockApplication@endlink  that this
                     * @link Routing::OverstockApplication Routing::OverstockApplication@endlink  covers. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: void SetCoveredStocks
            (
                const std::vector<NXOpen::Routing::Stock *> & coveredStocks /** Stocks to cover */
            );
            /** Returns @link Routing::Overstock Routing::Overstock@endlink  objects covering this @link Routing::OverstockApplication Routing::OverstockApplication@endlink .  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: std::vector<NXOpen::Routing::Overstock *> GetOverstocks
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
