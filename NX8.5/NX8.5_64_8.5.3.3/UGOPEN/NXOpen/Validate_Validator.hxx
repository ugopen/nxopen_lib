#ifndef NXOpen_VALIDATE_VALIDATOR_HXX_INCLUDED
#define NXOpen_VALIDATE_VALIDATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_Validator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Validate_CheckerNode.hxx>
#include <NXOpen/Validate_PartNode.hxx>
#include <NXOpen/Validation.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class Validator;
    }
    class Part;
    namespace Validate
    {
        class CheckerNode;
    }
    namespace Validate
    {
        class PartNode;
    }
    namespace Validate
    {
        class ValidatorOptions;
    }
    namespace Validate
    {
        class _ValidatorBuilder;
        class ValidatorImpl;
        /**Represents a NX @link Validate::Validator Validate::Validator@endlink .
             <br> To create a new instance of this class, use @link Validate::ValidationManager::CreateValidator  Validate::ValidationManager::CreateValidator @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  Validator : public TaggedObject
        {
            private: ValidatorImpl * m_validator_impl;
            private: friend class  _ValidatorBuilder;
            protected: Validator();
            public: ~Validator();
            /** Runs checking process and returns the checking status.
                        If failed checking statuses are found, it will return @link Validation::ResultFailed Validation::ResultFailed@endlink . 
                        Otherwise it will return @link Validation::ResultPass Validation::ResultPass@endlink . 
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: NXOpen::Validation::Result Commit
            (
            );
            /** Adds part node by part file name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void AppendPartNode
            (
                const NXString & fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds part node by part file name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void AppendPartNode
            (
                const char * fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds part node by part object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void AppendPartNode
            (
                NXOpen::Part * partObject /** partobject */ 
            );
            /** Adds part nodes by part file names 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void AppendPartNodes
            (
                std::vector<NXString> & fileNames /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds part nodes by part objects 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void AppendPartNodes
            (
                const std::vector<NXOpen::Part *> & partObject /** partobject */ 
            );
            /** Removes a part node 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void ErasePartNode
            (
                int index /** index */ 
            );
            /** Clears part nodes 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void ClearPartNodes
            (
            );
            /** Finds a part node  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::PartNode * FindPartNode
            (
                int index /** index */ 
            );
            /** Returns all part nodes. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void GetPartNodes
            (
                std::vector<NXOpen::Validate::PartNode *> & partNodes /** partnodes */ 
            );
            /** Adds a checker node.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void AppendCheckerNode
            (
                const NXString & className /** checker class name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds a checker node.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void AppendCheckerNode
            (
                const char * className /** checker class name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds checker nodes.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void AppendCheckerNodes
            (
                std::vector<NXString> & classNames /** checkers' class name array   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes a checker node.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void EraseCheckerNode
            (
                int delNdx /** del ndx */ 
            );
            /** Clears checker nodes 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void ClearCheckerNodes
            (
            );
            /** Returns a checker node.
                     @return  checker node 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: NXOpen::Validate::CheckerNode * FindCheckerNode
            (
                int index /** index */ 
            );
            /** Returns all checker nodes.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void GetCheckerNodes
            (
                std::vector<NXOpen::Validate::CheckerNode *> & checkerNode /** checker name array */
            );
            /**Returns  the run options. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: NXOpen::Validate::ValidatorOptions * ValidatorOptions
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
