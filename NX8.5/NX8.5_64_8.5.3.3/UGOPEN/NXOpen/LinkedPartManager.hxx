#ifndef NXOpen_LINKEDPARTMANAGER_HXX_INCLUDED
#define NXOpen_LINKEDPARTMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     LinkedPartManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class LinkedPartManager;
    class Session;
    class LinkedMirrorPartEntityMapEvent;
    class LinkedMirrorPartAttributeEditEvent;
    class LinkedPartManagerImpl;
    /** Represents the customization interface during linked mirror part creation and update.

       <br>  
       The "map entity handler" customization callback is called during creation of linked mirror part and during
       update of the linked mirror part from source.
       One can provide a custom map between the candidate unmapped entities in the source part and candidate unmapped
       entities in the mirror part.

       The "attribute edit handler" customization callback is called during creation of linked mirror part and during
       update of the linked mirror part from source.
       One can edit the attributes on entities in the mirror part using this callback. 
     
       <br> 
     <br> To obtain an instance of this class, refer to @link Session  Session @endlink  <br> 
     <br>  Created in NX8.5.0.  <br>  
    */
    class NXOPENCPPEXPORT  LinkedPartManager : public TaggedObjectCollection
    {
        public: /** User defined map entity method that is called whenever a linked mirror part is created or updated from source 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<void, NXOpen::LinkedMirrorPartEntityMapEvent *> MapEntityHandler;
        public: /**User defined attribute edit method that is called whenever a linked mirror part is created or updated from source 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<void, NXOpen::LinkedMirrorPartAttributeEditEvent *> AttributeEditHandler;
        private: LinkedPartManagerImpl * m_linkedpartmanager_impl;
        private: NXOpen::Session* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit LinkedPartManager(NXOpen::Session *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~LinkedPartManager();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::LinkedPartManager::iterator::copy,initializer)
        class iterator
        {
        public:
            /** Value type associated with iterator*/ 

            typedef LinkedMirrorPartEntityMapEvent * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::LinkedPartManager *context) : m_context(context), m_current(NULL_TAG)
            {
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::LinkedPartManager *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Registers a user defined map entity method that is called whenever a linked mirror part is created or updated from source  @return  identifier of registered method (used to unregister the method) 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: int AddMapEntityHandler
        (
            const NXOpen::LinkedPartManager::MapEntityHandler&  handler /** method to register */
        );
        /** Unregisters the user defined map entity handler 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void RemoveMapEntityHandler
        (
            int id /** identifier for method to unregister */
        );
        /** Registers a user defined attribute edit method that is called whenever a linked mirror part is created or updated from source  @return  identifier of registered method (used to unregister the method) 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: int AddAttributeEditHandler
        (
            const NXOpen::LinkedPartManager::AttributeEditHandler&  handler /** method to register */
        );
        /** Unregisters the attribute edit handler 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void RemoveAttributeEditHandler
        (
            int id /** identifier for method to unregister */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
