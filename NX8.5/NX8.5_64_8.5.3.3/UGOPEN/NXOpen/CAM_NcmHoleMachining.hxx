#ifndef NXOpen_CAM_NCMHOLEMACHINING_HXX_INCLUDED
#define NXOpen_CAM_NCMHOLEMACHINING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_NcmHoleMachining.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_NcmSubopBuilder.hxx>
#include <NXOpen/CAM_NcmHoleMachining.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class NcmHoleMachining;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class NcmAvoidancePointBuilder;
    }
    namespace CAM
    {
        class NcmClearanceBuilder;
    }
    namespace CAM
    {
        class NcmHoleMachiningEngRet;
    }
    namespace CAM
    {
        class NcmSubopBuilder;
    }
    namespace CAM
    {
        class NcmTransferBuilder;
    }
    namespace CAM
    {
        class _NcmHoleMachiningBuilder;
        class NcmHoleMachiningImpl;
        /**
            Represents a @link CAM::NcmHoleMachining CAM::NcmHoleMachining@endlink 
            
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  NcmHoleMachining : public CAM::NcmSubopBuilder
        {
            /** Available types for overlap types */
            public: enum OverlapTypes
            {
                OverlapTypesAxial/** axial */,
                OverlapTypesAlongCut/** along cut*/,
                OverlapTypesAngle/** angle */
            };

            /** Available types for initial clearance in hole machining */
            public: enum InitialTypes
            {
                InitialTypesClearance/** clearance */,
                InitialTypesDistance/** distance */,
                InitialTypesNone/** none */,
                InitialTypesBlankPlane/** blank plane */
            };

            /** Available types for final clearance in hole machining */
            public: enum FinalTypes
            {
                FinalTypesClearance/** clearance */,
                FinalTypesDistance/** distance */,
                FinalTypesNone/** none */
            };

            /** Available types for cutter compensation in hole machining */
            public: enum CutcomTypes
            {
                CutcomTypesNone/** cutter compensation off */,
                CutcomTypesAllPasses/** cutter compensation on all passes */,
                CutcomTypesFinalPass/** cutter compensation on last pass */
            };

            private: NcmHoleMachiningImpl * m_ncmholemachining_impl;
            private: friend class  _NcmHoleMachiningBuilder;
            protected: NcmHoleMachining();
            public: ~NcmHoleMachining();
            /**Returns  the engage settings 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmHoleMachiningEngRet * Engage
            (
            );
            /**Returns  the initial engage settings 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmHoleMachiningEngRet * InitialEngage
            (
            );
            /**Returns  the retract settings 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmHoleMachiningEngRet * Retract
            (
            );
            /**Returns  the final retract settings 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmHoleMachiningEngRet * FinalRetract
            (
            );
            /**Returns  the region start type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmHoleMachining::OverlapTypes OverlapType
            (
            );
            /**Sets  the region start type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOverlapType
            (
                NXOpen::CAM::NcmHoleMachining::OverlapTypes overlapType /** overlaptype */ 
            );
            /**Returns  the overlap distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double OverlapDistance
            (
            );
            /**Sets  the overlap distance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOverlapDistance
            (
                double overlapDistance /** overlapdistance */ 
            );
            /**Returns  the number of threads 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double NumberOfThreads
            (
            );
            /**Sets  the number of threads 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfThreads
            (
                double numberOfThreads /** numberofthreads */ 
            );
            /**Returns  the overlap angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double OverlapAngle
            (
            );
            /**Sets  the overlap angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOverlapAngle
            (
                double overlapAngle /** overlapangle */ 
            );
            /**Returns  the region start angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double RegionStartAngle
            (
            );
            /**Sets  the region start angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRegionStartAngle
            (
                double regionStartAngle /** regionstartangle */ 
            );
            /**Returns  the clearance setting 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmClearanceBuilder * TransferClearance
            (
            );
            /**Returns  the transfer settings for initial and final 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmTransferBuilder * TransferInitialFinal
            (
            );
            /**Returns  the initial type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmHoleMachining::InitialTypes InitialType
            (
            );
            /**Sets  the initial type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInitialType
            (
                NXOpen::CAM::NcmHoleMachining::InitialTypes initialType /** initialtype */ 
            );
            /**Returns  the initial safe distance builder (inheritable tool dep) 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * InitialSafeDistance
            (
            );
            /**Returns  the final type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmHoleMachining::FinalTypes FinalType
            (
            );
            /**Sets  the final type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFinalType
            (
                NXOpen::CAM::NcmHoleMachining::FinalTypes finalType /** finaltype */ 
            );
            /**Returns  the final safe distance builder (inheritable tool dep) 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * FinalSafeDistance
            (
            );
            /**Returns  the from point builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceFrom
            (
            );
            /**Returns  the start point builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceStart
            (
            );
            /**Returns  the return point builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceReturn
            (
            );
            /**Returns  the gohome point builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceGohome
            (
            );
            /**Returns  the cutter compensation type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NcmHoleMachining::CutcomTypes CutcomType
            (
            );
            /**Sets  the cutter compensation type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutcomType
            (
                NXOpen::CAM::NcmHoleMachining::CutcomTypes cutcomType /** cutcomtype */ 
            );
            /**Returns  the cutter compensation minimum move builder (inheritable tool dep) 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * CutcomMinimumMove
            (
            );
            /**Returns  the cutter compensation minimum angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double CutcomMinimumAngle
            (
            );
            /**Sets  the cutter compensation minimum angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutcomMinimumAngle
            (
                double minimumAngle /** minimumangle */ 
            );
            /**Returns  the cutter compensation output plane status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CutcomOutputPlane
            (
            );
            /**Sets  the cutter compensation output plane status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutcomOutputPlane
            (
                bool outputPlane /** outputplane */ 
            );
            /**Returns  the suppress cutter compensation 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool SuppressCutcom
            (
            );
            /**Sets  the suppress cutter compensation 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSuppressCutcom
            (
                bool suppressCutcom /** suppresscutcom */ 
            );
            /**Returns  the cutter compensation output contact point status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CutcomOutputContactPoint
            (
            );
            /**Sets  the cutter compensation output contact point status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutcomOutputContactPoint
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the start from center 
             <br>  Created in NX7.5.5.  <br>  
             <br> License requirements : None */
            public: bool StartFromCenter
            (
            );
            /**Sets  the start from center 
             <br>  Created in NX7.5.5.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartFromCenter
            (
                bool startFromCenter /** the start from center */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
