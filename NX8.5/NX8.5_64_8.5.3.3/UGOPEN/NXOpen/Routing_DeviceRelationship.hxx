#ifndef NXOpen_ROUTING_DEVICERELATIONSHIP_HXX_INCLUDED
#define NXOpen_ROUTING_DEVICERELATIONSHIP_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DeviceRelationship.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_ObjectRelationship.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class DeviceRelationship;
    }
    namespace Routing
    {
        class ObjectRelationship;
    }
    namespace Routing
    {
        class SingleDevice;
    }
    namespace Routing
    {
        class _DeviceRelationshipBuilder;
        class DeviceRelationshipImpl;
        /** @brief 
                 Represents a relationship between @link Routing::SingleDevice Routing::SingleDevice@endlink  objects.
                

         
                <br> 
                 ObjectRelationship is the abstract base class for @link InterfaceTerminalRelationshipBase InterfaceTerminalRelationshipBase@endlink 
                 and @link DeviceRelationship DeviceRelationship@endlink .
                <br>  
             <br> No creator is available in KF because this is an abstract class.  <br> 
         <br>  Created in NX4.0.2.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  DeviceRelationship : public Routing::ObjectRelationship
        {
            /**
                         Specifies the nature of the relationship between the related and relating objects.
                    
             <br>  Created in NX4.0.2.  <br>  
            */
            public: enum RelationType
            {
                RelationTypeAssociatedEquipment/** the related single devices are attached to the relating single device */
            };

            private: DeviceRelationshipImpl * m_devicerelationship_impl;
            private: friend class  _DeviceRelationshipBuilder;
            protected: DeviceRelationship();
            public: ~DeviceRelationship();
            /**Returns   the type of the relationship. 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::DeviceRelationship::RelationType RelationshipType
            (
            );
            /**Sets   the type of the relationship. 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetRelationshipType
            (
                NXOpen::Routing::DeviceRelationship::RelationType relationshipType /** The new type of the relationship */
            );
            /**  Returns the one @link Routing::SingleDevice Routing::SingleDevice@endlink  to which the other @link Routing::SingleDevice Routing::SingleDevice@endlink  objects are related.  @return  
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::SingleDevice * GetRelatingSingleDevice
            (
            );
            /** Sets the one Relating @link Routing::SingleDevice Routing::SingleDevice@endlink . 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetRelatingSingleDevice
            (
                NXOpen::Routing::SingleDevice * relatingDevice /** The new Relating device */
            );
            /** Returns the list of related @link Routing::SingleDevice Routing::SingleDevice@endlink  objects.  The objects in the list are related to the relating @link Routing::SingleDevice Routing::SingleDevice@endlink  object.  @return  Set of @link Routing::SingleDevice Routing::SingleDevice@endlink  objects that are related to the Relating SingleDevice 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::SingleDevice *> GetRelatedSingleDevices
            (
            );
            /** Adds a @link Routing::SingleDevice Routing::SingleDevice@endlink  to the collection of related @link Routing::SingleDevice Routing::SingleDevice@endlink  objects. 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void AddRelatedSingleDevice
            (
                NXOpen::Routing::SingleDevice * relatedDevice /** The @link Routing::SingleDevice Routing::SingleDevice@endlink  to add to the set of related objects */
            );
            /** Removes a @link Routing::SingleDevice Routing::SingleDevice@endlink  from the collection of related @link Routing::SingleDevice Routing::SingleDevice@endlink  objects. 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveRelatedSingleDevice
            (
                NXOpen::Routing::SingleDevice * relatedDevice /** The @link Routing::SingleDevice Routing::SingleDevice@endlink  that is removed from the set of related objects */
            );
            /** Replaces the collection of related @link Routing::SingleDevice Routing::SingleDevice@endlink  objects. 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ReplaceRelatedSingleDevices
            (
                const std::vector<NXOpen::Routing::SingleDevice *> & relatedDevices /** A set of @link Routing::SingleDevice Routing::SingleDevice@endlink  objects that replaces the current set of related objects */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
