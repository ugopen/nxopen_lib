#ifndef NXOpen_ANNOTATIONS_ANGULARTOLERANCE_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ANGULARTOLERANCE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_AngularTolerance.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class AngularTolerance;
    }
    class Expression;
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class AngularToleranceImpl;
        /** Represents angular tolerance 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  AngularTolerance : public TransientObject
        {
            private: AngularToleranceImpl * m_angulartolerance_impl;
            /// \cond NX_NO_DOC 
            public: explicit AngularTolerance(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~AngularTolerance();
            /**Returns  the tolerance type 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ToleranceType ToleranceType
            (
            );
            /**Sets  the tolerance type 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToleranceType
            (
                NXOpen::Annotations::ToleranceType type /** New tolerance type */
            );
            /** Returns the upper tolerance in degrees  @return  Upper tolerance in degrees 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::Value GetUpperToleranceDegrees
            (
            );
            /** Sets the upper tolerance in degrees 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUpperToleranceDegrees
            (
                const NXOpen::Annotations::Value & upperToleranceDegrees /** New upper tolerance in degrees */
            );
            /** Returns the lower tolerance in degrees  @return  Lower tolerance in degrees 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::Value GetLowerToleranceDegrees
            (
            );
            /** Sets the lower tolerance in degrees 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLowerToleranceDegrees
            (
                const NXOpen::Annotations::Value & lowerToleranceDegrees /** New lower tolerance in degrees */
            );
            /**Returns  the number of decimal places for dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: int DimensionDecimalPlaces
            (
            );
            /**Sets  the number of decimal places for dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDimensionDecimalPlaces
            (
                int dimensionDecimalPlaces /** New number of dimension decimal places */
            );
            /**Returns  the zero tolerance display style 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ZeroToleranceDisplayStyle ZeroToleranceDisplayStyle
            (
            );
            /**Sets  the zero tolerance display style 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetZeroToleranceDisplayStyle
            (
                NXOpen::Annotations::ZeroToleranceDisplayStyle zeroDisplayStyle /** zero display style */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
