#ifndef NXOpen_ROUTING_PORTCONNECTION_HXX_INCLUDED
#define NXOpen_ROUTING_PORTCONNECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_PortConnection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class PortConnection;
    }
    class NXObject;
    namespace Routing
    {
        class Port;
    }
    namespace Routing
    {
        class _PortConnectionBuilder;
        class PortConnectionImpl;
        /** The Routing PortConnection object is used by Routing to position ports
                while placing parts.
              <br> To create a new instance of this class, use @link Routing::PortConnectionCollection::CreatePortConnection  Routing::PortConnectionCollection::CreatePortConnection @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  PortConnection : public NXObject
        {
            /** Overridden port connection validity */
            public: enum OverriddenValidity
            {
                OverriddenValidityNone/** The port connection validity has not been overridden */,
                OverriddenValidityValid/** The port connection validity has been overridden to be valid */,
                OverriddenValidityInvalid/** The port connection validity has been overridden to be invalid */
            };

            private: PortConnectionImpl * m_portconnection_impl;
            private: friend class  _PortConnectionBuilder;
            protected: PortConnection();
            public: ~PortConnection();
            /** Returns the two ports connected by a Port Connection object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetPorts
            (
                NXOpen::Routing::Port ** port1 /** first Port connected by the
                                                                                   Port Connection object */,
                NXOpen::Routing::Port ** port2 /** second Port connected by the
                                                                                   Port Connection object */
            );
            /** Sets the link between the two ports connected by the Port Connection object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetPorts
            (
                NXOpen::Routing::Port * port1 /** first port to be connected by the Port Connection object */,
                NXOpen::Routing::Port * port2 /** second port to be connected by the Port Connection object */
            );
            /** Returns the engagement distance between the two ports connected by a Port Connection object.  @return  engagement distance between the ports connected by the
                                                             Port Connection object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetEngagement
            (
            );
            /** Sets the engagement distance between the two ports connected by a Port Connection object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetEngagement
            (
                double engagement /** engagement distance to be set between the ports
                                                            connected by the Port Connection object */
            );
            /** Returns whether the connection is valid. Validity is initially determined by the alignment of the ports
                        but can be overridden by OverrideValidity or ForceValid  @return  validity of the current connection. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool IsValid
            (
            );
            /** Returns whether the ports in the port connection are aligned correctly.  Both direction and rotation are evaluated.  @return  validity of the current connection. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool ArePortsAligned
            (
            );
            /** Overrides the validity of the port connection.  By default, the validity is determined by
                        evaluating the alignment of the connected ports. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void OverrideValidity
            (
                NXOpen::Routing::PortConnection::OverriddenValidity overriddenValidity /** overridden validity value. */
            );
            /** Gets the reason why a port connection's validity was overridden.  @return  The reason why this connection's validity was overridden. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString GetOverrideReason
            (
            );
            /** Sets the reason why a port connection's validity was overridden. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetOverrideReason
            (
                const NXString & reason /** The reason why this connection's validity was overridden. */
            );
            /** Sets the reason why a port connection's validity was overridden. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetOverrideReason
            (
                const char * reason /** The reason why this connection's validity was overridden. */
            );
            /** Returns the overridden validity value of the port connection.  @return  overridden validity value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::PortConnection::OverriddenValidity GetOverriddenValidity
            (
            );
            /** Force the connection to be valid regardless of the port alignment or the overridden value. 
                        The user's login name and the date and time are recorded automatically along
                        with the given reason. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ForceValid
            (
                const NXString & reason /** The reason why this connection was forced to be valid. */
            );
            /** Force the connection to be valid regardless of the port alignment or the overridden value. 
                        The user's login name and the date and time are recorded automatically along
                        with the given reason. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void ForceValid
            (
                const char * reason /** The reason why this connection was forced to be valid. */
            );
            /** Removes the forced validity setting on the connection.  Validity will now be determined based on the alignment or
                        on the overridden validity setting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveForcedValidity
            (
            );
            /** Returns whether the connection is forced to be valid.  @return  validity of the current connection. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool IsForcedValid
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
