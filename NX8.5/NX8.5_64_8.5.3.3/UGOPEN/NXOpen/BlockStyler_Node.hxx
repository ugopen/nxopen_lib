#ifndef NXOpen_BLOCKSTYLER_NODE_HXX_INCLUDED
#define NXOpen_BLOCKSTYLER_NODE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BlockStyler_Node.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BlockStyler_Node.hxx>
#include <NXOpen/DataContainer.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace BlockStyler
    {
        class Node;
    }
    class DataContainer;
    namespace BlockStyler
    {
        class _NodeBuilder;
        class NodeImpl;
        /**Represents the node created and utilized by @link BlockStyler::Tree BlockStyler::Tree@endlink .
            The node represents the single row of the tree.
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENUICPPEXPORT  Node : public TaggedObject
        {
            /**Represents the Expand/Collapse option*/
            public: enum ExpandOption
            {
                ExpandOptionCollapse/**Use this option to collapse the node.*/,
                ExpandOptionExpand/**Use this option to expand the node. The child node state is unaltered.*/,
                ExpandOptionToggle/**Use this option to collapse the expanded node or expand the collapsed node.*/
            };

            /**Represents the scroll position to be applied on node. 
                    Use one of these options to make the node appear in tree window.*/
            public: enum Scroll
            {
                ScrollCenter/**Scrolls the tree to bring the node at the center of the tree window*/,
                ScrollLeastScroll/**Scrolls the tree to minimal to make the node appear in tree window*/,
                ScrollMostScroll/**Scrolls the tree to maximum to make the node appear in tree window*/
            };

            /**Represents the drag type*/
            public: enum DragType
            {
                DragTypeNone/**No drag*/,
                DragTypeAll/**Drag allowed to any level in the same tree*/
            };

            /**Represents the drop type*/
            public: enum DropType
            {
                DropTypeNone/**Drop not permitted*/,
                DropTypeOn/**Drop permitted on the target node*/,
                DropTypeBefore/**Drop permitted before the target node*/,
                DropTypeAfter/**Drop permitted after the target node*/,
                DropTypeBeforeAndAfter/**Drop permitted before and after the target node*/
            };

            private: NodeImpl * m_node_impl;
            private: friend class  _NodeBuilder;
            protected: Node();
            public: ~Node();
            /**Scrolls horizontally and vertically to make the specific column of 
                    node appear on the tree window.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void ScrollTo
            (
                int columnID /**ColumnId of the column to which tree window scrolls horizontally.*/,
                NXOpen::BlockStyler::Node::Scroll visibleOption /**Option to scroll the tree window vertically.*/
            );
            /**Expands/collapses the node
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void Expand
            (
                NXOpen::BlockStyler::Node::ExpandOption expandOption /**Expand option*/
            );
            /**Gets the node state associated with node state icon. Node state is an iconic 
                   representation, e.g., checked/unchecked icons for corresponding state. Node state 
                   value 1 and 2 represents the standard checked and unchecked state respectively. @return Node state
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int GetState
            (
            );
            /**Sets the node state which is associated with node state icon. Node state is an iconic 
                   representation, e.g., checked/unchecked state. Setting node state to value other 
                   than 1 and 2 calls BlockStyler.Tree.StateIconName callback to fetch
                   the icon name. Node state can be set only after the node has been added to TreeList.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetState
            (
                int state /**Node state*/
            );
            /**Returns  the display text of node. This is same as 0th column text of this node. 
                   Use @link BlockStyler::Node::SetColumnDisplayText BlockStyler::Node::SetColumnDisplayText@endlink  to fetch the text of other column of the same node. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString DisplayText
            (
            );
            /**Sets  the display text of node. This is same as 0th column text of this node. 
                   Use @link BlockStyler::Node::SetColumnDisplayText BlockStyler::Node::SetColumnDisplayText@endlink  to fetch the text of other column of the same node. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayText
            (
                const NXString & displayTest /**Display text*/
            );
            /**Sets  the display text of node. This is same as 0th column text of this node. 
                   Use @link BlockStyler::Node::SetColumnDisplayText BlockStyler::Node::SetColumnDisplayText@endlink  to fetch the text of other column of the same node. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetDisplayText
            (
                const char * displayTest /**Display text*/
            );
            /**Gets the column text for the given columnId. 
                   The text is interpreted as icon if the column display type is  
                   @link BlockStyler::Tree::ColumnDisplayIcon BlockStyler::Tree::ColumnDisplayIcon@endlink . @return Text associated with column.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString GetColumnDisplayText
            (
                int columnID /**Unique column id of the column.*/
            );
            /**Sets the text in the column which corresponds to given columnId. 
                   The text is interpreted as icon if the column display type is  
                   @link BlockStyler::Tree::ColumnDisplayIcon BlockStyler::Tree::ColumnDisplayIcon@endlink .
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetColumnDisplayText
            (
                int columnID /**Unique coulmn id of the column.*/,
                const NXString & columnDisplayText /**Text associated with column*/
            );
            /**Sets the text in the column which corresponds to given columnId. 
                   The text is interpreted as icon if the column display type is  
                   @link BlockStyler::Tree::ColumnDisplayIcon BlockStyler::Tree::ColumnDisplayIcon@endlink .
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetColumnDisplayText
            (
                int columnID /**Unique coulmn id of the column.*/,
                const char * columnDisplayText /**Text associated with column*/
            );
            /**Returns the flag indicating whether cross section is allowed. 
                   It is useful when the node contains @link DisplayableObject DisplayableObject@endlink  as 
                   data. If the flag is true then the @link DisplayableObject DisplayableObject@endlink  is 
                   highlighted, else not. The default value is True
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CrossSelection
            (
            );
            /**Sets the flag indicating whether cross section is allowed. 
                   It is useful when the node contains @link DisplayableObject DisplayableObject@endlink  as 
                   data. If the flag is true then the @link DisplayableObject DisplayableObject@endlink  is 
                   highlighted, else not. The default value is True
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCrossSelection
            (
                bool crossSelection /**Flag indicating whether cross selection is allowed.*/
            );
            /**Returns the text color of the node. The color is applicable for whole row.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int ForegroundColor
            (
            );
            /**Sets the text color of the node. The color is applicable for whole row.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetForegroundColor
            (
                int nodeForgroundColor /**Foreground color.*/
            );
            /**Returns the first child node. Returns NULL if child node is not present.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * FirstChildNode
            (
            );
            /**Returns the next node which might not belong to the same hierarchy. 
                   The next node either is a sibling node or belongs to other root node. 
                   Returns NULL if next node is not present
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * NextNode
            (
            );
            /**Returns  the next node which belongs to the same hierarchy. 
                   Returns NULL null if next sibling node is not present.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * NextSiblingNode
            (
            );
            /**Returns the parent node. Returns NULL if parent node is not present
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * ParentNode
            (
            );
            /**Returns the previous node which might not belong to the same hierarchy. 
                   Returns NULL null if previous node is not present
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * PreviousNode
            (
            );
            /**Returns the previous selected node in the whole tree hierarchy. The node on which this method is called does not have to be selected.
                   Returns NULL if none of the previous nodes are selected.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * PreviousSelectedNode
            (
            );
            /**Returns the next selected node in the whole tree hierarchy. The node on which this method is called does not have to be selected. Returns NULL if none of the next nodes are selected.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * NextSelectedNode
            (
            );
            /**Returns the previous node which belongs to the same hierarchy. 
                   Returns NULL if previous sibling node is not present.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::Node * PreviousSiblingNode
            (
            );
            /**Returns the display icon. This is normal icon positioned before the node text and is 
                   displayed when the node is in unselected state.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString DisplayIcon
            (
            );
            /**Sets the display icon. This is normal icon positioned before the node text and is 
                   displayed when the node is in unselected state.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayIcon
            (
                const NXString & icon /**Icon.*/
            );
            /**Sets the display icon. This is normal icon positioned before the node text and is 
                   displayed when the node is in unselected state.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetDisplayIcon
            (
                const char * icon /**Icon.*/
            );
            /**Returns the selected icon. This icon appears on node selection and is positioned before the node text
                   replacing the @link BlockStyler::Node::DisplayIcon BlockStyler::Node::DisplayIcon @endlink and @link BlockStyler::Node::SetDisplayIcon BlockStyler::Node::SetDisplayIcon @endlink .
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedIcon
            (
            );
            /**Sets the selected icon. This icon appears on node selection and is positioned before the node text
                   replacing the @link BlockStyler::Node::DisplayIcon BlockStyler::Node::DisplayIcon @endlink and @link BlockStyler::Node::SetDisplayIcon BlockStyler::Node::SetDisplayIcon @endlink .
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedIcon
            (
                const NXString & icon /**Icon.*/
            );
            /**Sets the selected icon. This icon appears on node selection and is positioned before the node text
                   replacing the @link BlockStyler::Node::DisplayIcon BlockStyler::Node::DisplayIcon @endlink and @link BlockStyler::Node::SetDisplayIcon BlockStyler::Node::SetDisplayIcon @endlink .
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetSelectedIcon
            (
                const char * icon /**Icon.*/
            );
            /**  @brief  Gets node data which contains the data in the form of unique name-value pairs. 
                    In this context unique name is termed as property name. There 
                    could me more than one such property name - value pair, but the property name of the primary data 
                    should be named "Data" (case-sensitive). For instance, if a @link BlockStyler::Node BlockStyler::Node@endlink  represents a 
                    feature object then property name should be "Data" and the value should be feature object. The primary data is used by NX 
                    for some operations such cross selection. 

             
                     <br> 
                    Initialy the container or list is empty and it is expected that data 
                    would be added to it. Additional property name - value pair can be added to the container or list, but it should be made sure that
                    there is no dublicate property name exists in the container or list. The additional data can be seen as 
                    book keeping information for node. At any point the node data can be fetched and value can be extracted
                    using the corresponding property name. Refer to @link DataContainer DataContainer@endlink  on how property name-value pair is added
                    to the container or list.
                     <br> 
                    @return Node data which is list of property name - value pair. New property name - value pair can be added to it and existing value can be fetched using corresponding property name.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DataContainer * GetNodeData
            (
            );
            /**Returns  the flag indicating whether the node is inserted in @link BlockStyler::Tree BlockStyler::Tree@endlink 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsInserted
            (
            );
            /**Returns  the flag indicating whether the node is in expanded state
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: bool IsExpanded
            (
            );
            /**Returns  the flag indicating whether the node is in selected state
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: bool IsSelected
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
