#ifndef NXOpen_FEATURES_COPLANARBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_COPLANARBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_CoplanarBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_CoplanarBuilder.hxx>
#include <NXOpen/Features_FaceRecognitionBuilder.hxx>
#include <NXOpen/GeometricUtilities_FaceChangeOverflowBehavior.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class CoplanarBuilder;
    }
    namespace Features
    {
        class FaceRecognitionBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class FaceChangeOverflowBehavior;
    }
    class SelectFace;
    class SelectISurface;
    namespace Features
    {
        class _CoplanarBuilderBuilder;
        class CoplanarBuilderImpl;
        /**
            Represents a @link Features::Coplanar Features::Coplanar@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateCoplanarBuilder  Features::FeatureCollection::CreateCoplanarBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        RigidFace.CoaxialEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RigidFace.CoplanarAxesEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RigidFace.CoplanarEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RigidFace.EqualDiameterEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RigidFace.OffsetEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RigidFace.ParallelEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RigidFace.PerpendicularEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RigidFace.SymmetricEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RigidFace.TangentEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RigidFace.ThicknessChainEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RigidFace.UseFaceBrowse </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  CoplanarBuilder : public Features::FeatureBuilder
        {
            private: CoplanarBuilderImpl * m_coplanarbuilder_impl;
            private: friend class  _CoplanarBuilderBuilder;
            protected: CoplanarBuilder();
            public: ~CoplanarBuilder();
            /**Returns  the face change 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * ConstraintFace
            (
            );
            /**Returns  the stationary face 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectISurface * StationaryFace
            (
            );
            /**Returns  the other faces 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FaceRecognitionBuilder * RigidFace
            (
            );
            /**Returns  the face change overflow behavior. Please refer @link GeometricUtilities::FaceChangeOverflowBehavior GeometricUtilities::FaceChangeOverflowBehavior@endlink  for details. 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FaceChangeOverflowBehavior * FaceChangeOverflowBehavior
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
