#ifndef NXOpen_MODLTEMPLATETESTMANAGER_HXX_INCLUDED
#define NXOpen_MODLTEMPLATETESTMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ModlTemplateTestManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_Feature.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ModlTemplateTestManager;
    class TemplateTestManager;
    class Axis;
    namespace Features
    {
        class Feature;
    }
    class Plane;
    class Point;
    class ModlTemplateTestManagerImpl;
    /** Represents a class that is used for autotests.  This class should not
    be made available to customers  <br> To obtain an instance of this class, refer to @link TemplateTestManager  TemplateTestManager @endlink  <br> 
     <br>  Created in NX8.0.0.  <br>  
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  ModlTemplateTestManager
    {
        private: ModlTemplateTestManagerImpl * m_modltemplatetestmanager_impl;
        private: NXOpen::TemplateTestManager* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit ModlTemplateTestManager(NXOpen::TemplateTestManager *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~ModlTemplateTestManager();
        /**For TouchUpdate TemplateTest 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void TouchUpdateTemplateTest
        (
            const NXString & testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & features /** features */ 
        );
        /**For TouchUpdate TemplateTest 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void TouchUpdateTemplateTest
        (
            const char * testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & features /** features */ 
        );
        /**For Delete Template Test
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void DeleteTemplateTest
        (
            const NXString & testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & features /** features */ 
        );
        /**For Delete Template Test
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void DeleteTemplateTest
        (
            const char * testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & features /** features */ 
        );
        /**For Suppress/Unsuppress Template Test
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SuppressTemplateTest
        (
            const NXString & testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & features /** features */ 
        );
        /**For Suppress/Unsuppress Template Test
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void SuppressTemplateTest
        (
            const char * testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & features /** features */ 
        );
        /**For Copy/Paste Template Test
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void CopyPasteTemplateTest
        (
            const NXString & testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & features /** features */ 
        );
        /**For Copy/Paste Template Test
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        void CopyPasteTemplateTest
        (
            const char * testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & features /** features */ 
        );
        /**For Pattern Template Test
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void RunPatternTemplateTest
        (
            const NXString & testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & patternfeature0 /** patternfeature0 */ ,
            NXOpen::Axis * axis /** axis */ ,
            NXOpen::Point * point /** point */ 
        );
        /**For Pattern Template Test
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void RunPatternTemplateTest
        (
            const char * testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & patternfeature0 /** patternfeature0 */ ,
            NXOpen::Axis * axis /** axis */ ,
            NXOpen::Point * point /** point */ 
        );
        /**For Mirror Template Test
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void RunMirrorTemplateTest
        (
            const NXString & testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & mirrorfeature0 /** mirrorfeature0 */ ,
            NXOpen::Plane * plane /** plane */ 
        );
        /**For Mirror Template Test
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void RunMirrorTemplateTest
        (
            const char * testName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int version /** version */ ,
            const std::vector<int> & errorCodes /** errorcodes */ ,
            const std::vector<NXOpen::Features::Feature *> & mirrorfeature0 /** mirrorfeature0 */ ,
            NXOpen::Plane * plane /** plane */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
