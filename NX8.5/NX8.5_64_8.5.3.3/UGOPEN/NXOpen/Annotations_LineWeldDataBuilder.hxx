#ifndef NXOpen_ANNOTATIONS_LINEWELDDATABUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LINEWELDDATABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LineWeldDataBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_LineWeldDataBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class LineWeldDataBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _LineWeldDataBuilderBuilder;
        class LineWeldDataBuilderImpl;
        /** Represents a @link Annotations::LineWeldDataBuilder Annotations::LineWeldDataBuilder@endlink  
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  LineWeldDataBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Represents the finish symbol type. */
            public: enum FinishSymbolType
            {
                FinishSymbolTypeNone/** none */ ,
                FinishSymbolTypeChipping/** chipping */ ,
                FinishSymbolTypeGrinding/** grinding */ ,
                FinishSymbolTypeHammering/** hammering */ ,
                FinishSymbolTypeMachining/** machining */ ,
                FinishSymbolTypeRolling/** rolling */ ,
                FinishSymbolTypePeening/** peening */ 
            };

            /** Represents the contour symbol type */
            public: enum ContourSymbolType
            {
                ContourSymbolTypeNone/** none */ ,
                ContourSymbolTypeConvex/** convex */ ,
                ContourSymbolTypeFlat/** flat */ ,
                ContourSymbolTypeConcave/** concave */ ,
                ContourSymbolTypeBlendedToesIsoAndDinOnly/** blended toes iso and din only */ ,
                ContourSymbolTypeBackingStripPermanentIsoAndDinOnly/** backing strip permanent iso and din only */ ,
                ContourSymbolTypeBackingStripRemovableIsoAndDinOnly/** backing strip removable iso and din only */ ,
                ContourSymbolTypeFlush/** flush */ ,
                ContourSymbolTypeMachiningGradedJunction/** machining graded junction */ 
            };

            /** Represents the weld size code type */
            public: enum WeldSizeCodeType
            {
                WeldSizeCodeTypeNone/** none */ ,
                WeldSizeCodeTypeA/** a */ ,
                WeldSizeCodeTypeC/** c */ ,
                WeldSizeCodeTypeD/** d */ ,
                WeldSizeCodeTypeS/** s */ ,
                WeldSizeCodeTypeZ/** z */ ,
                WeldSizeCodeTypeP/** p */ 
            };

            /** Represents the weld symbol type */
            public: enum WeldSymbolType
            {
                WeldSymbolTypeNone/** none */ ,
                WeldSymbolTypeButtWeldWithRaisedEdges/** butt weld with raised edges */ ,
                WeldSymbolTypeSingleFlange/** single flange */ ,
                WeldSymbolTypeSquareButt/** square butt */ ,
                WeldSymbolTypeVButt/** vbutt */ ,
                WeldSymbolTypeVButtWithBroadRootFace/** vbutt with broad root face */ ,
                WeldSymbolTypeBevelButt/** bevel butt */ ,
                WeldSymbolTypeBevelButtWithBroadRootFace/** bevel butt with broad root face */ ,
                WeldSymbolTypeUButt/** ubutt */ ,
                WeldSymbolTypeJButt/** jbutt */ ,
                WeldSymbolTypeFlareV/** flare v */ ,
                WeldSymbolTypeFlareBevel/** flare bevel */ ,
                WeldSymbolTypeFillet/** fillet */ ,
                WeldSymbolTypePlugSlot/** plug slot */ ,
                WeldSymbolTypeEdge/** edge */ ,
                WeldSymbolTypeSpot/** spot */ ,
                WeldSymbolTypeSeam/** seam */ ,
                WeldSymbolTypeSteepFlankedVButt/** steep flanked vbutt */ ,
                WeldSymbolTypeSteepFlankedBevelButt/** steep flanked bevel butt */ ,
                WeldSymbolTypeBacking/** backing */ ,
                WeldSymbolTypeSurfaceJoint/** surface joint */ ,
                WeldSymbolTypeInclinedJoint/** inclined joint */ ,
                WeldSymbolTypeFoldJoint/** fold joint */ ,
                WeldSymbolTypeStud/** stud */ ,
                WeldSymbolTypeSurfacing/** surfacing */ ,
                WeldSymbolTypeIntermittent/** intermittent */ ,
                WeldSymbolTypeBackingPlate/** backing plate */ ,
                WeldSymbolTypeNotSpecified/** not specified */ 
            };

            private: LineWeldDataBuilderImpl * m_linewelddatabuilder_impl;
            private: friend class  _LineWeldDataBuilderBuilder;
            protected: LineWeldDataBuilder();
            public: ~LineWeldDataBuilder();
            /**Returns  the finishing method for the weld symbol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldDataBuilder::FinishSymbolType FinishSymbol
            (
            );
            /**Sets  the finishing method for the weld symbol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetFinishSymbol
            (
                NXOpen::Annotations::LineWeldDataBuilder::FinishSymbolType finishSymbol /** finishsymbol */ 
            );
            /**Returns  the supplementary contour weld symbols that identify the shape of the weld surface or execution of a weld for both top and bottom of the reference line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldDataBuilder::ContourSymbolType ContourSymbol
            (
            );
            /**Sets  the supplementary contour weld symbols that identify the shape of the weld surface or execution of a weld for both top and bottom of the reference line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetContourSymbol
            (
                NXOpen::Annotations::LineWeldDataBuilder::ContourSymbolType contourSymbol /** contoursymbol */ 
            );
            /**Returns  the groove or coutersink angle
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GrooveCountersinkAngle
            (
            );
            /**Sets  the groove or coutersink angle
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetGrooveCountersinkAngle
            (
                const NXString & grooveCountersinkAngle /** groovecountersinkangle */ 
            );
            /**Sets  the groove or coutersink angle
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetGrooveCountersinkAngle
            (
                const char * grooveCountersinkAngle /** groovecountersinkangle */ 
            );
            /**Returns  the number of welds or root opening or depth of weld 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NumberRootDepth
            (
            );
            /**Sets  the number of welds or root opening or depth of weld 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetNumberRootDepth
            (
                const NXString & numberRootDepth /** numberrootdepth */ 
            );
            /**Sets  the number of welds or root opening or depth of weld 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetNumberRootDepth
            (
                const char * numberRootDepth /** numberrootdepth */ 
            );
            /**Returns  the weld size letter code 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldDataBuilder::WeldSizeCodeType WeldSizeCode
            (
            );
            /**Sets  the weld size letter code 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetWeldSizeCode
            (
                NXOpen::Annotations::LineWeldDataBuilder::WeldSizeCodeType weldSizeCode /** weldsizecode */ 
            );
            /**Returns  the compound weld size letter code 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldDataBuilder::WeldSizeCodeType CompoundWeldSizeCode
            (
            );
            /**Sets  the compound weld size letter code 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetCompoundWeldSizeCode
            (
                NXOpen::Annotations::LineWeldDataBuilder::WeldSizeCodeType compoundWeldSizeCode /** compoundweldsizecode */ 
            );
            /**Returns  the weld size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString WeldSize
            (
            );
            /**Sets  the weld size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetWeldSize
            (
                const NXString & weldSize /** weldsize */ 
            );
            /**Sets  the weld size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetWeldSize
            (
                const char * weldSize /** weldsize */ 
            );
            /**Returns  the compound weld size 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString CompoundWeldSize
            (
            );
            /**Sets  the compound weld size 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetCompoundWeldSize
            (
                const NXString & compoundWeldSize /** compoundweldsize */ 
            );
            /**Sets  the compound weld size 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetCompoundWeldSize
            (
                const char * compoundWeldSize /** compoundweldsize */ 
            );
            /**Returns  the weld symbol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldDataBuilder::WeldSymbolType WeldSymbol
            (
            );
            /**Sets  the weld symbol 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetWeldSymbol
            (
                NXOpen::Annotations::LineWeldDataBuilder::WeldSymbolType weldSymbol /** weldsymbol */ 
            );
            /**Returns  the compound weld 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsCompound
            (
            );
            /**Sets  the compound weld 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetCompound
            (
                bool isCompound /** iscompound */ 
            );
            /**Returns  the length or pitch 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LengthPitch
            (
            );
            /**Sets  the length or pitch 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetLengthPitch
            (
                const NXString & lengthPitch /** lengthpitch */ 
            );
            /**Sets  the length or pitch 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetLengthPitch
            (
                const char * lengthPitch /** lengthpitch */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
