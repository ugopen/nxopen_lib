#ifndef NXOpen_ANNOTATIONS_ORDINATEDIMENSIONPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ORDINATEDIMENSIONPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_OrdinateDimensionPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class OrdinateDimensionPreferences;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class OrdinateDimensionPreferencesImpl;
        /** Represents ordinate dimension preferences 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  OrdinateDimensionPreferences : public TransientObject
        {
            private: OrdinateDimensionPreferencesImpl * m_ordinatedimensionpreferences_impl;
            /// \cond NX_NO_DOC 
            public: explicit OrdinateDimensionPreferences(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~OrdinateDimensionPreferences();
            /**Returns  the positive direction 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OrdinatePositiveDirection PositiveDirection
            (
            );
            /**Sets  the positive direction 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPositiveDirection
            (
                NXOpen::Annotations::OrdinatePositiveDirection option /** New postive direction */
            );
            /**Returns  the origin display option 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OrdinateOriginDisplayOption OriginDisplay
            (
            );
            /**Sets  the origin display option 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOriginDisplay
            (
                NXOpen::Annotations::OrdinateOriginDisplayOption option /** New origin display option */
            );
            /**Returns  the user defined text, if the user defined symbol option is used to display the origin 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXString UserDefinedText
            (
            );
            /**Sets  the user defined text, if the user defined symbol option is used to display the origin 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUserDefinedText
            (
                const NXString & userDefinedText /** New user defined text */
            );
            /**Sets  the user defined text, if the user defined symbol option is used to display the origin 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void SetUserDefinedText
            (
                const char * userDefinedText /** New user defined text */
            );
            /**Returns  the flag indicating whether to align the user defined symbol with the
                        base line 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool AlignSymbolWithBaseline
            (
            );
            /**Sets  the flag indicating whether to align the user defined symbol with the
                        base line 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAlignSymbolWithBaseline
            (
                bool alignSymbolWithBaseline /** Flag to align user defined symbol with base line */
            );
            /**Returns  the user defined symbol angle with baseline, if the symbol is not aligned with 
                        the baseline 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double SymbolAngle
            (
            );
            /**Sets  the user defined symbol angle with baseline, if the symbol is not aligned with 
                        the baseline 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSymbolAngle
            (
                double symbolAngle /** New user defined symbol angle */
            );
            /**Returns  the user defined symbol scale 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double SymbolScale
            (
            );
            /**Sets  the user defined symbol scale 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSymbolScale
            (
                double symbolScale /** New user defiend symbol scale */
            );
            /**Returns  the user defined symbol aspect ratio 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double SymbolAspectRatio
            (
            );
            /**Sets  the user defined symbol aspect ratio 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSymbolAspectRatio
            (
                double symbolAspectRatio /** New user defined symbol aspect ratio */
            );
            /**Returns  the user defined symbol length 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double SymbolLength
            (
            );
            /**Sets  the user defined symbol length 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSymbolLength
            (
                double symbolLength /** New user defined symbol length */
            );
            /**Returns  the user defined symbol height 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double SymbolHeight
            (
            );
            /**Sets  the user defined symbol height 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSymbolHeight
            (
                double symbolHeight /** New user defined symbol height */
            );
            /**Returns  the dimension line and arrow display option 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OrdinateLineArrowDisplayOption LineArrowDisplayOption
            (
            );
            /**Sets  the dimension line and arrow display option 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLineArrowDisplayOption
            (
                NXOpen::Annotations::OrdinateLineArrowDisplayOption option /** New dimension line and arrow display option */
            );
            /**Returns  the dogleg creation option 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OrdinateDoglegCreationOption DoglegCreationOption
            (
            );
            /**Sets  the dogleg creation option 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDoglegCreationOption
            (
                NXOpen::Annotations::OrdinateDoglegCreationOption option /** New dogleg creation option */
            );
            /**Returns  the dogleg definition 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OrdinateDoglegDefinition DoglegDefinition
            (
            );
            /**Sets  the dogleg definition 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDoglegDefinition
            (
                NXOpen::Annotations::OrdinateDoglegDefinition definition /** New dogleg definition */
            );
            /**Returns  the dogleg start offset 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double DoglegStartOffset
            (
            );
            /**Sets  the dogleg start offset 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDoglegStartOffset
            (
                double doglegStartOffset /** New dogleg start offset */
            );
            /**Returns  the dogleg end offset 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double DoglegEndOffset
            (
            );
            /**Sets  the dogleg end offset 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDoglegEndOffset
            (
                double doglegEndOffset /** New dogleg end offset */
            );
            /**Returns  the dogleg angle 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double DoglegAngle
            (
            );
            /**Sets  the dogleg angle 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDoglegAngle
            (
                double doglegAngle /** New dogleg angle */
            );
            /**Returns  the first margin offset 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double FirstMarginOffset
            (
            );
            /**Sets  the first margin offset 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFirstMarginOffset
            (
                double firstMarginOffset /** New first margin offeset */
            );
            /**Returns  the spacing, the distance between margins 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double MarginSpacing
            (
            );
            /**Sets  the spacing, the distance between margins 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMarginSpacing
            (
                double marginSpacing /** New margin spacing */
            );
            /**Returns  the number of margins 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double NumberOfMargins
            (
            );
            /**Sets  the number of margins 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNumberOfMargins
            (
                double nMargins /** New number of margins */
            );
            /**Returns  the text orientation 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::TextOrientation TextOrientation
            (
            );
            /**Sets  the text orientation 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTextOrientation
            (
                NXOpen::Annotations::TextOrientation orientation /** New dimension text orientation */
            );
            /**Returns  the angle if text orientation is 
                        @link Annotations::TextOrientationByAngle Annotations::TextOrientationByAngle@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double TextOrientationAngle
            (
            );
            /**Sets  the angle if text orientation is 
                        @link Annotations::TextOrientationByAngle Annotations::TextOrientationByAngle@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTextOrientationAngle
            (
                double textOrientationAngle /** New dimension text orienation angle */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
