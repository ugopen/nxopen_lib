#ifndef NXOpen_VISUALREPORTING_RULE_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_RULE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_Rule.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/VisualReporting_Classifier.hxx>
#include <NXOpen/VisualReporting_Condition.hxx>
#include <NXOpen/VisualReporting_Rule.hxx>
#include <NXOpen/libnxopencpp_visualreporting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace VisualReporting
    {
        class Rule;
    }
    class NXObject;
    namespace VisualReporting
    {
        class Classifier;
    }
    namespace VisualReporting
    {
        class Condition;
    }
    namespace VisualReporting
    {
        class _RuleBuilder;
        class RuleImpl;
        /** A rule within a @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink .
            
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_VISUALREPORTINGEXPORT  Rule : public NXObject
        {
            private: RuleImpl * m_rule_impl;
            private: friend class  _RuleBuilder;
            protected: Rule();
            public: ~Rule();
            /**Returns  the filter @link VisualReporting::Condition VisualReporting::Condition@endlink  from this @link VisualReporting::Rule VisualReporting::Rule@endlink . 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * FilterCondition
            (
            );
            /**Sets  the filter @link VisualReporting::Condition VisualReporting::Condition@endlink  from this @link VisualReporting::Rule VisualReporting::Rule@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetFilterCondition
            (
                NXOpen::VisualReporting::Condition * filterCondition /** filtercondition */ 
            );
            /** Returns the @link VisualReporting::Classifier VisualReporting::Classifier@endlink s associated with this @link VisualReporting::Rule VisualReporting::Rule@endlink .
                     @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: std::vector<NXOpen::VisualReporting::Classifier *> GetClassifiers
            (
            );
            /**Returns  the active @link VisualReporting::Classifier VisualReporting::Classifier@endlink  in this @link VisualReporting::Rule VisualReporting::Rule@endlink 
                        for a multiple properties report.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Classifier * ActiveClassifier
            (
            );
            /**Sets  the active @link VisualReporting::Classifier VisualReporting::Classifier@endlink  in this @link VisualReporting::Rule VisualReporting::Rule@endlink 
                        for a multiple properties report.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetActiveClassifier
            (
                NXOpen::VisualReporting::Classifier * activeClassifier /** activeclassifier */ 
            );
            /** The @link VisualReporting::Classifier::DateGroupMethodOption VisualReporting::Classifier::DateGroupMethodOption@endlink  in this @link VisualReporting::Classifier VisualReporting::Classifier@endlink  
                        in the @link VisualReporting::Rule VisualReporting::Rule@endlink  will be determined by the overall date range of all reported objects.
                        
                        For example, if the date range spans over 18 monthes, group by year will be used, otherwise if it is over 3 months, group by month will be used.
                        If the date range is small, within 2 weeks, group by day will be used. 

                        Only valid for a @link VisualReporting::Classifier VisualReporting::Classifier@endlink  whose @link VisualReporting::Classifier::GroupingMethodOption VisualReporting::Classifier::GroupingMethodOption@endlink 
                        is @link VisualReporting::Classifier::GroupingMethodOptionAutomatic VisualReporting::Classifier::GroupingMethodOptionAutomatic@endlink  or
                        @link VisualReporting::Classifier::GroupingMethodOptionSemiAutomatic VisualReporting::Classifier::GroupingMethodOptionSemiAutomatic@endlink  and the
                        @link VisualReporting::Property::DatatypeOption VisualReporting::Property::DatatypeOption@endlink  on the @link VisualReporting::Property VisualReporting::Property@endlink 
                        is @link VisualReporting::Property::DatatypeOptionDate VisualReporting::Property::DatatypeOptionDate@endlink .
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: bool GetIsSmartGroupDateEnabled
            (
                NXOpen::VisualReporting::Classifier * classifier /** classifier */ 
            );
            /** The @link VisualReporting::Classifier::DateGroupMethodOption VisualReporting::Classifier::DateGroupMethodOption@endlink  in this @link VisualReporting::Classifier VisualReporting::Classifier@endlink  
                        in the @link VisualReporting::Rule VisualReporting::Rule@endlink  will be determined by the overall date range of all reported objects.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetIsSmartGroupDateEnabled
            (
                NXOpen::VisualReporting::Classifier * classifier /** classifier */ ,
                bool isSmartGroupDateEnabled /** issmartgroupdateenabled */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
