#ifndef NXOpen_BLOCKSTYLER_STRINGBLOCK_HXX_INCLUDED
#define NXOpen_BLOCKSTYLER_STRINGBLOCK_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BlockStyler_StringBlock.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_StringBlock.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace BlockStyler
    {
        class StringBlock;
    }
    namespace BlockStyler
    {
        class UIBlock;
    }
    namespace BlockStyler
    {
        class _StringBlockBuilder;
        class StringBlockImpl;
        /** Represents a String block
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENUICPPEXPORT  StringBlock : public BlockStyler::UIBlock
        {
            private: StringBlockImpl * m_stringblock_impl;
            private: friend class  _StringBlockBuilder;
            protected: StringBlock();
            public: ~StringBlock();
            /**Returns  the BalloonTooltipLayout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString BalloonTooltipLayoutAsString
            (
            );
            /**Sets  the BalloonTooltipLayout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipLayoutAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the BalloonTooltipLayout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetBalloonTooltipLayoutAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the BalloonTooltipLayout members  @return Values to get from the property
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBalloonTooltipLayoutMembers
            (
            );
            /**Returns  the Bitmap
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString Bitmap
            (
            );
            /**Sets  the Bitmap
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBitmap
            (
                const NXString & bitmapString /** bitmap string */ 
            );
            /**Sets  the Bitmap
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetBitmap
            (
                const char * bitmapString /** bitmap string */ 
            );
            /** Gets the BalloonTooltipImages @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBalloonTooltipImages
            (
            );
            /** Sets the BalloonTooltipImages
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipImages
            (
                std::vector<NXString> & imageStrings /** image strings */ 
            );
            /** Gets the BalloonTooltipTexts @return Values to get from the property. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBalloonTooltipTexts
            (
            );
            /** Sets the BalloonTooltipTexts
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipTexts
            (
                std::vector<NXString> & tooltipTextArray /**Value to set for the property. */
            );
            /**Returns  the AllowInternationalTextInput
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool AllowInternationalTextInput
            (
            );
            /**Sets  the AllowInternationalTextInput
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAllowInternationalTextInput
            (
                bool allow /** allow */ 
            );
            /**Returns  the IsPassword. If true, characters will not be readable. They will be displayed as *.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsPassword
            (
            );
            /**Sets  the IsPassword. If true, characters will not be readable. They will be displayed as *.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPassword
            (
                bool passwrod /** passwrod */ 
            );
            /** Gets the ListItems @return Values to get from the property
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetListItems
            (
            );
            /** Sets the ListItems
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetListItems
            (
                std::vector<NXString> & itemStrings /**Value to set to the property*/
            );
            /**Returns  the MaxTextLength
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int MaxTextLength
            (
            );
            /**Sets  the MaxTextLength
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMaxTextLength
            (
                int textLength /** text length */ 
            );
            /**Returns  the PresentationStyle as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString PresentationStyleAsString
            (
            );
            /**Sets  the PresentationStyle as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPresentationStyleAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the PresentationStyle as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetPresentationStyleAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the PresentationStyle members  @return Values to get from the property. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetPresentationStyleMembers
            (
            );
            /**Returns  the ReadOnlyString
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ReadOnlyString
            (
            );
            /**Sets  the ReadOnlyString
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetReadOnlyString
            (
                bool readonly /** readonly */ 
            );
            /**Returns  the RetainValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool RetainValue
            (
            );
            /**Sets  the RetainValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRetainValue
            (
                bool retain /** retain */ 
            );
            /**Returns  the Tooltip
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString Tooltip
            (
            );
            /**Sets  the Tooltip
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetTooltip
            (
                const NXString & tooltipString /** tooltip string */ 
            );
            /**Sets  the Tooltip
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetTooltip
            (
                const char * tooltipString /** tooltip string */ 
            );
            /**Returns  the Value
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString Value
            (
            );
            /**Sets  the Value
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetValue
            (
                const NXString & valueString /** value string */ 
            );
            /**Sets  the Value
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetValue
            (
                const char * valueString /** value string */ 
            );
            /**Returns  the WideValue. Specifies the International text. This property accepts international characters supported by NX.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString WideValue
            (
            );
            /**Sets  the WideValue. Specifies the International text. This property accepts international characters supported by NX.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetWideValue
            (
                const NXString & wideValueString /** wide value string */ 
            );
            /**Sets  the WideValue. Specifies the International text. This property accepts international characters supported by NX.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetWideValue
            (
                const char * wideValueString /** wide value string */ 
            );
            /**Returns  the Width as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString WidthAsString
            (
            );
            /**Sets  the Width as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetWidthAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the Width as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetWidthAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the Width members  @return Values to get from the property. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetWidthMembers
            (
            );
            /**Returns  the Localize
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool Localize
            (
            );
            /**Sets  the Localize
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLocalize
            (
                bool localize /** localize */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
