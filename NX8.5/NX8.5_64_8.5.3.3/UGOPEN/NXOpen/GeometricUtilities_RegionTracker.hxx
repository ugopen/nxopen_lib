#ifndef NXOpen_GEOMETRICUTILITIES_REGIONTRACKER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_REGIONTRACKER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_RegionTracker.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_RegionTracker.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class RegionTracker;
    }
    class Edge;
    class Face;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _RegionTrackerBuilder;
        class RegionTrackerImpl;
        /** a class which collects all the geometric entities used to identify a region of faces during a boolean feature. 
              
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  RegionTracker : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This enum represents the type of edge extremity. This is used to track vertices. */
            public: enum ExtremityType
            {
                ExtremityTypeStart/** start */,
                ExtremityTypeEnd/** end   */
            };

            private: RegionTrackerImpl * m_regiontracker_impl;
            private: friend class  _RegionTrackerBuilder;
            protected: RegionTracker();
            public: ~RegionTracker();
            /**Returns  a flag indicating if the region belongs to the tool (true) or to the target (false) 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool OnTool
            (
            );
            /**Sets  a flag indicating if the region belongs to the tool (true) or to the target (false) 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOnTool
            (
                bool isOnTool /** isontool */ 
            );
            /** The input target or tool faces used to identify the region 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void GetFaceSelectors
            (
                std::vector<NXOpen::Face *> & entities /** Entities to use as selector */
            );
            /** The input target or tool faces used to identify the region 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFaceSelectors
            (
                const std::vector<NXOpen::Face *> & entities /** Entities to use as selector */
            );
            /** An input target or tool face used to identify the region 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOneFaceSelector
            (
                NXOpen::Face * entity /** Entity to use as selector */
            );
            /** The input target or tool edges used to identify the region 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void GetEdgeSelectors
            (
                std::vector<NXOpen::Face *> & entities /** Entities to use as selector */
            );
            /** The input target or tool edges used to identify the region 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEdgeSelectors
            (
                const std::vector<NXOpen::Edge *> & entities /** Entities to use as selector */
            );
            /** An input target or tool edge used to identify the region 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOneEdgeSelector
            (
                NXOpen::Edge * entity /** Entity to use as selector */
            );
            /** The input target or tool vertices (edge extremities) used to identify the region 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void GetVertexSelectors
            (
                std::vector<NXOpen::Edge *> & entities /** Edges associated with the vertex */,
                std::vector<NXOpen::GeometricUtilities::RegionTracker::ExtremityType> & extremities /** Extremity (false : start, true : end) of the edge corresponding to vertex */
            );
            /** One input target or tool vertex (edge extremity) used to identify the region 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOneVertexSelector
            (
                NXOpen::Edge * entity /** Entity to use as selector */,
                NXOpen::GeometricUtilities::RegionTracker::ExtremityType extremity /** Extremity (false : start, true : end) of the edge corresponding to vertex */
            );
            /** The input target or tool vertices (edge extremities) used to identify the region 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetVertexSelectors
            (
                const std::vector<NXOpen::Edge *> & entities /** Entities to use as selector */,
                const std::vector<NXOpen::GeometricUtilities::RegionTracker::ExtremityType> & extremities /** Extremity (false : start, true : end) of the edge corresponding to vertex */
            );
            /** The input point location (x,y,z) used to identify the region 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOnePointSelector
            (
                const NXOpen::Point3d & location /** location */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
