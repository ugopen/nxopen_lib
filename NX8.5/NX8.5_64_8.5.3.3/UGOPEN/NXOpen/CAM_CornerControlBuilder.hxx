#ifndef NXOpen_CAM_CORNERCONTROLBUILDER_HXX_INCLUDED
#define NXOpen_CAM_CORNERCONTROLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CornerControlBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class CornerControlBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class _CornerControlBuilderBuilder;
        class CornerControlBuilderImpl;
        /** Represents a FinishPasses Builder 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  CornerControlBuilder : public TaggedObject
        {
            /** Available methods for Corner Control */
            public: enum CornerControlMethods
            {
                CornerControlMethodsRollAround/** Roll Around */,
                CornerControlMethodsExtendAndTrim/** Extend and Trim */,
                CornerControlMethodsExtend/** Extend */
            };

            /** Available options for corner smoothing */
            public: enum SmoothingOptions
            {
                SmoothingOptionsNone/** none */,
                SmoothingOptionsAllPasses/** all passes */
            };

            /** Available Adjust Feed Rate options */
            public: enum AdjustFeedRateOptions
            {
                AdjustFeedRateOptionsNone/** none */,
                AdjustFeedRateOptionsOnAllArcs/** on all arcs */
            };

            /** Available Slowdown Distance options */
            public: enum SlowdownDistanceOptions
            {
                SlowdownDistanceOptionsNone/** none */,
                SlowdownDistanceOptionsCurrentTool/** current tool */,
                SlowdownDistanceOptionsPreviousTool/** previous tool */
            };

            /** Available options where Corner Smoothing should be applied */
            public: enum SmoothCornersAtOptions
            {
                SmoothCornersAtOptionsBoundary/** Boundary */,
                SmoothCornersAtOptionsPartSurface/** Part Surface */,
                SmoothCornersAtOptionsBoundaryAndPartSurface/** Boundary and Part Surface */
            };

            private: CornerControlBuilderImpl * m_cornercontrolbuilder_impl;
            private: friend class  _CornerControlBuilderBuilder;
            protected: CornerControlBuilder();
            public: ~CornerControlBuilder();
            /**Returns  the Corner Control Method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CornerControlBuilder::CornerControlMethods CornerControlMethod
            (
            );
            /**Sets  the Corner Control Method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCornerControlMethod
            (
                NXOpen::CAM::CornerControlBuilder::CornerControlMethods cornerCtrl /** The Corner Control Method value */
            );
            /**Returns  the corner smoothing option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CornerControlBuilder::SmoothingOptions SmoothingOption
            (
            );
            /**Sets  the corner smoothing option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSmoothingOption
            (
                NXOpen::CAM::CornerControlBuilder::SmoothingOptions smoothingOption /** smoothing option */ 
            );
            /**Returns  the corner filleting radius. This applies to the Smoothing option of all passes 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * FilletingRadius
            (
            );
            /**Returns  the adjust feed rate option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CornerControlBuilder::AdjustFeedRateOptions AdjustFeedRateOption
            (
            );
            /**Sets  the adjust feed rate option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAdjustFeedRateOption
            (
                NXOpen::CAM::CornerControlBuilder::AdjustFeedRateOptions adjustFeedRateOption /** adjust feed rate option */ 
            );
            /**Returns  the minimum compensation factor. This applies when the Adjust Feed Rate option of On All Arcs 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MinCompensationFactor
            (
            );
            /**Returns  the maximum compensation factor. This applies when the Adjust Feed Rate option of On All Arcs 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MaxCompensationFactor
            (
            );
            /**Returns  the slowdown distance option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CornerControlBuilder::SlowdownDistanceOptions SlowdownDistanceOption
            (
            );
            /**Sets  the slowdown distance option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSlowdownDistanceOption
            (
                NXOpen::CAM::CornerControlBuilder::SlowdownDistanceOptions slowdownDistanceOption /** the slowdown distance option */
            );
            /**Returns  the tool diameter percent. This applies to the slowdown distance option of current tool 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ToolDiameterPercent
            (
            );
            /**Returns  the tool diameter. This applies to the slow distance option of previous tool 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * PreviousToolDiameter
            (
            );
            /**Returns  the slowdown percentage. This applies to the slow distance options of current tool and previous tool 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * SlowdownPercent
            (
            );
            /**Returns  the slowdown number of steps. This applies to the slowdown distance options of current tool and previous tool  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfSteps
            (
            );
            /**Sets  the slowdown number of steps. This applies to the slowdown distance options of current tool and previous tool  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfSteps
            (
                int slowdownNumSteps /** the slowdown number of steps */
            );
            /**Returns  the minimum corner angle. This applies to the slowdown distance option of current tool and previous tool 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MinimumCornerAngle
            (
            );
            /**Returns  the maximum corner angle. This applies to the slowdown distance option of current tool and previous tool 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MaximumCornerAngle
            (
            );
            /**Returns  the smooth corners at option. This option applies only to Surface Contour Boundary Drive 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CornerControlBuilder::SmoothCornersAtOptions SmoothCornersAt
            (
            );
            /**Sets  the smooth corners at option. This option applies only to Surface Contour Boundary Drive 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSmoothCornersAt
            (
                NXOpen::CAM::CornerControlBuilder::SmoothCornersAtOptions smoothCornerAt /** smoothcornerat */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
