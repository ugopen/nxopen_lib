#ifndef NXOpen_USERDEFINEDOBJECTS_USERDEFINEDOBJECT_HXX_INCLUDED
#define NXOpen_USERDEFINEDOBJECTS_USERDEFINEDOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UserDefinedObjects_UserDefinedObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/UserDefinedObjects_UserDefinedClass.hxx>
#include <NXOpen/libnxopencpp_userdefinedobjects_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UserDefinedObjects
    {
        class UserDefinedObject;
    }
    class DisplayableObject;
    namespace Features
    {
        class UserDefinedObjectFeature;
    }
    class TaggedObject;
    namespace UserDefinedObjects
    {
        class UserDefinedClass;
    }
    namespace UserDefinedObjects
    {
        class _UserDefinedObjectBuilder;
        class UserDefinedObjectImpl;
        /** JA interface for the UserDefinedObject object 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_USERDEFINEDOBJECTSEXPORT  UserDefinedObject : public DisplayableObject
        {
            /** Status of the object linked to a @link UserDefinedObject UserDefinedObject@endlink  */
            public: enum LinkStatus
            {
                LinkStatusUpToDate/** The associated object is up to date. */,
                LinkStatusOutOfDate/** The associated object is out of date. */
            };

            /** Available link types for a @link UserDefinedObject UserDefinedObject@endlink . */
            public: enum LinkType
            {
                LinkTypeOwning/** The object is owned by the UDO */,
                LinkTypeType1/** If the UDO is deleted the link between the UDO and the associated object is removed and the object is unaffected. 
                                                                If the UDO is updated the associated object is unaffected. If the associated object is deleted the UDO is also deleted.  
                                                                If the associated object is updated the UDO is updated. */,
                LinkTypeType2/** If the UDO is deleted the link between the UDO and the associated object is removed and the object is deleted. 
                                                                If the UDO is updated the associated NX object is unaffected. If the associated object is deleted, it is left 
                                                                in the data model in a condemned state and remains attached to the UDO. If the associated object is updated 
                                                                the UDO is unaffected. */,
                LinkTypeType3/** If the UDO is deleted the link between the UDO and the associated object is removed and the object is unaffected. 
                                                                If the UDO is updated the associated object is unaffected. If the associated object is deleted the link to the 
                                                                UDO is removed and the UDO is updated. If the associated object is updated the UDO is updated */,
                LinkTypeType4/** If the UDO is deleted the link between the UDO and the associated object is removed and the object is unaffected. 
                                                                If the UDO is updated the associated object is unaffected. If the associated object is deleted the link to the 
                                                                UDO is removed and the UDO is unaffected. If the associated object is updated the UDO is unaffected. */
            };

             /** Contains the linked object and it's status along with the type of link.*/
            public:
            struct  LinkDefinition
            {
                public: /** linked object */NXOpen::TaggedObject * AssociatedObject;
                public: /** status of the linked object */NXOpen::UserDefinedObjects::UserDefinedObject::LinkStatus Status;
                public: LinkDefinition() :
                    AssociatedObject(),
                    Status((NXOpen::UserDefinedObjects::UserDefinedObject::LinkStatus)0)
                {
                }
                /** Constructor for the LinkDefinition struct. */ 
                public: LinkDefinition(NXOpen::TaggedObject * associatedObjectInitial /** linked object */, 
                        NXOpen::UserDefinedObjects::UserDefinedObject::LinkStatus statusInitial /** status of the linked object */) :
                    AssociatedObject(associatedObjectInitial),
                    Status(statusInitial)
                {
                }
            };

            private: UserDefinedObjectImpl * m_userdefinedobject_impl;
            private: friend class  _UserDefinedObjectBuilder;
            protected: UserDefinedObject();
            public: ~UserDefinedObject();
            /**Returns  the class name of this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ClassName
            (
            );
            /** Gets the out of date indicator (status) of this UDO  @return  The status of this UDO 
                        0 - The UDO is up to date
                        1 - Out of date due to addition or deletion of links to the UDO
                        2 - Out of date due to update being performed on an associated (linked) object in the absence of a UDO Method
                        3 - Out of date due to addition or deletion of links to the UDO AND update being performed on an Associated (linked) object in the absence of a UDO Method 
                        4 - Out of date due to deletion of associated (linked) objects in the absence of a UDO method 
                        5 - Out of date due to addition or deletion of links to the UDO AND deletion of associated (linked) objects in the absence of a UDO method 
                        6 - Out of date due to update being performed on an associated (linked) object in the absence of a UDO Method AND deletion of associated (linked) objects in the absence of a UDO method 
                        7 - Out of date due to addition or deletion of links to the UDO AND update being performed on an Associated (linked) object in the absence of a UDO Method AND deletion of associated (linked) objects in the absence of a UDO method 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int GetUserDefinedObjectStatus
            (
            );
            /** Clears the out of data indicator (status) of this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void ClearUserDefinedObjectStatus
            (
            );
            /**Returns  the @link UserDefinedObjects::UserDefinedClass UserDefinedObjects::UserDefinedClass@endlink  for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::UserDefinedObjects::UserDefinedClass * UserDefinedClass
            (
            );
            /**Sets  the @link UserDefinedObjects::UserDefinedClass UserDefinedObjects::UserDefinedClass@endlink  for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUserDefinedClass
            (
                NXOpen::UserDefinedObjects::UserDefinedClass * userDefinedClass /** The new class for this UDO */
            );
            /** Gets the @link Features::UserDefinedObjectFeature Features::UserDefinedObjectFeature@endlink  associated with this UDO, if there isn't an associated feature, NULL is returned  @return  The UserDefinedObjectFeature associated this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::UserDefinedObjectFeature * GetUserDefinedObjectFeature
            (
            );
            /** Gets all of the integers stored with this UDO  @return  Array of integers stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetIntegers
            (
            );
            /** Gets the integers stored in the specified range with this UDO  @return  Array of integers stored within the specified  
                                                                    range of the integer array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetIntegers
            (
                int offset /** Index into the array of integers at the start of the 
                                                                returned range.
                                                                Valid values are 0 through (number of integers in the udo - 1)
                                                                and -(number of integers in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the integer array.  
                                                                Therefore using -1 or (number of integers in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of integers you wish to get */
            );
            /** Sets all of the integers stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIntegers
            (
                const std::vector<int> & integers /** New Array of integers stored with this UDO */
            );
            /** Replaces the integers stored with this UDO in the specified range with a new array of integers 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIntegers
            (
                int offset /** Index into the array of integers at the start of the 
                                                                range you wish to cut and replace.
                                                                Valid values are 0 through (number of integers in the udo - 1)
                                                                and -(number of integers in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the integer array.  
                                                                Therefore using -1 or (number of integers in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of integers in the range you wish to cut */,
                const std::vector<int> & integers /** Array of integers to paste in place of the specified range. */
            );
            /** Removes the integers stored at the end of the integer array for this UDO, 
                        and returns them in an array  @return  Array of integers that have been 
                                                                      removed from this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> PopIntegers
            (
                int numIntegers /** num integers */ 
            );
            /** Add the specified integers to the end of the integer array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void PushIntegers
            (
                const std::vector<int> & integers /** Array of new integers to add to this UDO.
                                                                         This routine is cumulutive, and will not remove
                                                                         any integers already stored with the UDO.
                                                                         It simply adds these new integers to the end of
                                                                         the existing integer array and increases 
                                                                         the total number of integers stored with the UDO */
            );
            /** Gets all of the doubles stored with this UDO  @return  Array of doubles stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetDoubles
            (
            );
            /** Gets the doubles stored in the specified range with this UDO  @return  Array of doubles stored within the specified  
                                                                    range of the double array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetDoubles
            (
                int offset /** Index into the array of doubles at the start of the 
                                                                returned range.
                                                                Valid values are 0 through (number of doubles in the udo - 1)
                                                                and -(number of doubles in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the double array.  
                                                                Therefore using -1 or (number of doubles in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of doubles you wish to get */
            );
            /** Sets all of the doubles stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDoubles
            (
                const std::vector<double> & doubles /** New Array of doubles stored with this UDO */
            );
            /** Replaces the doubles stored with this UDO in the specified range with a new array of doubles 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDoubles
            (
                int offset /** Index into the array of doubles at the start of the 
                                                                range you wish to cut and replace.
                                                                Valid values are 0 through (number of doubles in the udo - 1)
                                                                and -(number of doubles in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the double array.  
                                                                Therefore using -1 or (number of doubles in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of doubles in the range you wish to cut */,
                const std::vector<double> & doubles /** Array of doubles to paste in place of the specified range. */
            );
            /** Removes the doubles stored at the end of the double array for this UDO, 
                        and returns them in an array  @return  Array of doubles that have been 
                                                                      removed from this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> PopDoubles
            (
                int numDoubles /** num doubles */ 
            );
            /** Add the specified doubles to the end of the double array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void PushDoubles
            (
                const std::vector<double> & doubles /** Array of new doubles to add to this UDO.
                                                                         This routine is cumulutive, and will not remove
                                                                         any doubles already stored with the UDO.
                                                                         It simply adds these new doubles to the end of
                                                                         the existing double array and increases 
                                                                         the total number of doubles stored with the UDO */
            );
            /** Gets all of the strings stored with this UDO  @return  Array of strings stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetStrings
            (
            );
            /** Gets the strings stored in the specified range with this UDO  @return  Array of strings stored within the specified  
                                                                    range of the string array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetStrings
            (
                int offset /** Index into the array of strings at the start of the 
                                                                returned range.
                                                                Valid values are 0 through (number of strings in the udo - 1)
                                                                and -(number of strings in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the string array.  
                                                                Therefore using -1 or (number of strings in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of strings you wish to get */
            );
            /** Sets all of the strings stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStrings
            (
                std::vector<NXString> & strings /** New Array of strings stored with this UDO   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Replaces the strings stored with this UDO in the specified range with a new array of strings 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStrings
            (
                int offset /** Index into the array of strings at the start of the 
                                                                range you wish to cut and replace.
                                                                Valid values are 0 through (number of strings in the udo - 1)
                                                                and -(number of strings in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the string array.  
                                                                Therefore using -1 or (number of strings in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of strings in the range you wish to cut */,
                std::vector<NXString> & strings /** Array of strings to paste in place of the specified range.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes the strings stored at the end of the string array for this UDO, 
                        and returns them in an array  @return  Array of strings that have been 
                                                                      removed from this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> PopStrings
            (
                int numStrings /** num strings */ 
            );
            /** Add the specified strings to the end of the string array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void PushStrings
            (
                std::vector<NXString> & strings /** Array of new strings to add to this UDO.
                                                                         This routine is cumulutive, and will not remove
                                                                         any strings already stored with the UDO.
                                                                         It simply adds these new strings to the end of
                                                                         the existing string array and increases 
                                                                         the total number of strings stored with the UDO   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets all of the lengths stored with this UDO  @return  Array of lengths stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetLengths
            (
            );
            /** Gets the lengths stored in the specified range with this UDO  @return  Array of lengths stored within the specified  
                                                                    range of the length array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetLengths
            (
                int offset /** Index into the array of lengths at the start of the 
                                                                returned range.
                                                                Valid values are 0 through (number of lengths in the udo - 1)
                                                                and -(number of lengths in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the length array.  
                                                                Therefore using -1 or (number of lengths in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of lengths you wish to get */
            );
            /** Sets all of the lengths stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLengths
            (
                const std::vector<double> & lengths /** New Array of lengths stored with this UDO */
            );
            /** Replaces the lengths stored with this UDO in the specified range with a new array of lengths 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLengths
            (
                int offset /** Index into the array of lengths at the start of the 
                                                                range you wish to cut and replace.
                                                                Valid values are 0 through (number of lengths in the udo - 1)
                                                                and -(number of lengths in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the length array.  
                                                                Therefore using -1 or (number of lengths in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of lengths in the range you wish to cut */,
                const std::vector<double> & lengths /** Array of lengths to paste in place of the specified range. */
            );
            /** Removes the lengths stored at the end of the length array for this UDO, 
                        and returns them in an array  @return  Array of lengths that have been 
                                                                      removed from this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> PopLengths
            (
                int numLengths /** num lengths */ 
            );
            /** Add the specified lengths to the end of the length array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void PushLengths
            (
                const std::vector<double> & lengths /** Array of new lengths to add to this UDO.
                                                                         This routine is cumulutive, and will not remove
                                                                         any lengths already stored with the UDO.
                                                                         It simply adds these new lengths to the end of
                                                                         the existing length array and increases 
                                                                         the total number of lengths stored with the UDO */
            );
            /** Gets all of the areas stored with this UDO  @return  Array of areas stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetAreas
            (
            );
            /** Gets the areas stored in the specified range with this UDO  @return  Array of areas stored within the specified  
                                                                    range of the area array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetAreas
            (
                int offset /** Index into the array of areas at the start of the 
                                                                returned range.
                                                                Valid values are 0 through (number of areas in the udo - 1)
                                                                and -(number of areas in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the area array.  
                                                                Therefore using -1 or (number of areas in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of areas you wish to get */
            );
            /** Sets all of the areas stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAreas
            (
                const std::vector<double> & areas /** New Array of areas stored with this UDO */
            );
            /** Replaces the areas stored with this UDO in the specified range with a new array of areas 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAreas
            (
                int offset /** Index into the array of areas at the start of the 
                                                                range you wish to cut and replace.
                                                                Valid values are 0 through (number of areas in the udo - 1)
                                                                and -(number of areas in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the area array.  
                                                                Therefore using -1 or (number of areas in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of areas in the range you wish to cut */,
                const std::vector<double> & areas /** Array of areas to paste in place of the specified range. */
            );
            /** Removes the areas stored at the end of the area array for this UDO, 
                        and returns them in an array  @return  Array of areas that have been 
                                                                      removed from this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> PopAreas
            (
                int numAreas /** num areas */ 
            );
            /** Add the specified areas to the end of the area array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void PushAreas
            (
                const std::vector<double> & areas /** Array of new areas to add to this UDO.
                                                                         This routine is cumulutive, and will not remove
                                                                         any areas already stored with the UDO.
                                                                         It simply adds these new areas to the end of
                                                                         the existing area array and increases 
                                                                         the total number of areas stored with the UDO */
            );
            /** Gets all of the volumes stored with this UDO  @return  Array of volumes stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetVolumes
            (
            );
            /** Gets the volumes stored in the specified range with this UDO  @return  Array of volumes stored within the specified  
                                                                    range of the volume array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetVolumes
            (
                int offset /** Index into the array of volumes at the start of the 
                                                                returned range.
                                                                Valid values are 0 through (number of volumes in the udo - 1)
                                                                and -(number of volumes in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the volume array.  
                                                                Therefore using -1 or (number of volumes in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of volumes you wish to get */
            );
            /** Sets all of the volumes stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVolumes
            (
                const std::vector<double> & volumes /** New Array of volumes stored with this UDO */
            );
            /** Replaces the volumes stored with this UDO in the specified range with a new array of volumes 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVolumes
            (
                int offset /** Index into the array of volumes at the start of the 
                                                                range you wish to cut and replace.
                                                                Valid values are 0 through (number of volumes in the udo - 1)
                                                                and -(number of volumes in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the volume array.  
                                                                Therefore using -1 or (number of volumes in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of volumes in the range you wish to cut */,
                const std::vector<double> & volumes /** Array of volumes to paste in place of the specified range. */
            );
            /** Removes the volumes stored at the end of the volume array for this UDO, 
                        and returns them in an array  @return  Array of volumes that have been 
                                                                      removed from this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> PopVolumes
            (
                int numVolumes /** num volumes */ 
            );
            /** Add the specified volumes to the end of the volume array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void PushVolumes
            (
                const std::vector<double> & volumes /** Array of new volumes to add to this UDO.
                                                                         This routine is cumulutive, and will not remove
                                                                         any volumes already stored with the UDO.
                                                                         It simply adds these new volumes to the end of
                                                                         the existing volume array and increases 
                                                                         the total number of volumes stored with the UDO */
            );
            /** Gets all links with the given link type that are stored with this UDO  @return  Array of links (with the given link type) stored with this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::UserDefinedObjects::UserDefinedObject::LinkDefinition> GetLinks
            (
                NXOpen::UserDefinedObjects::UserDefinedObject::LinkType linkType /** The type of links you wish to get */
            );
            /** Gets the links with the given link type that are stored in the specified range with this UDO  @return  Array of links stored within the specified  
                                                                    range of the link type's link array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::UserDefinedObjects::UserDefinedObject::LinkDefinition> GetLinks
            (
                NXOpen::UserDefinedObjects::UserDefinedObject::LinkType linkType /** The type of links you wish to get */,
                int offset /** Index into the array of links (with the given link type)
                                                                at the start of the returned range.
                                                                Valid values are 0 through (number of links of the given type in the udo - 1)
                                                                and -(number of links of the given type in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the link array.  
                                                                Therefore using -1 or (number of links of the given link type in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of links (with the given link type) you wish to get */
            );
            /** Sets all of the links with the given link type stored with this UDO.
                        If you already had objects linked to the UDO via the specified link type,
                        this operation will over-write them with the newly specified links. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLinks
            (
                NXOpen::UserDefinedObjects::UserDefinedObject::LinkType linkType /** The type of links you wish to set */,
                const std::vector<NXOpen::UserDefinedObjects::UserDefinedObject::LinkDefinition> & links /** New Array of links (with the given link type) stored with this UDO */
            );
            /** Replaces the links of the given link type stored with this UDO in the specified range with a new array of links 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLinks
            (
                NXOpen::UserDefinedObjects::UserDefinedObject::LinkType linkType /** The type of links you wish to set */,
                int offset /** Index into the array of links (with the given link type) 
                                                                at the start of the range you wish to cut and replace.
                                                                Valid values are 0 through 
                                                                (number of links with the given link type in the udo - 1)
                                                                and -(number of links with the given link type in the udo) through -1.
                                                                If the offset is negative, it is used to count back 
                                                                from the end of the link array.  
                                                                Therefore using -1 or (number of links with the given link type in the udo -1)
                                                                for the offset will give the same result. */,
                int length /** The number of links (with the given link type) in the range you wish to cut */,
                const std::vector<NXOpen::UserDefinedObjects::UserDefinedObject::LinkDefinition> & links /** Array of links (with the given link type) to paste in place of the specified range. */
            );
            /** Removes the links stored at the end of the given link type's link array for this UDO, 
                        and returns them in an array  @return  Array of links (with the given link type) that have been 
                                                                      removed from this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::UserDefinedObjects::UserDefinedObject::LinkDefinition> PopLinks
            (
                NXOpen::UserDefinedObjects::UserDefinedObject::LinkType linkType /** The type of links you wish to remove */,
                int numLinks /** num links */ 
            );
            /** Add the specified links to the end of the given link type's link array for this UDO 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void PushLinks
            (
                NXOpen::UserDefinedObjects::UserDefinedObject::LinkType linkType /** The type of links you wish to add */,
                const std::vector<NXOpen::UserDefinedObjects::UserDefinedObject::LinkDefinition> & links /** Array of new links (with the given link type) to add to this UDO.
                                                                         This routine is cumulutive, and will not remove
                                                                         any links already stored with the UDO.
                                                                         It simply adds these new links to the end of
                                                                         the existing link array for the given link type and increases 
                                                                         the total number of links of the given type stored with the UDO */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
