#ifndef NXOpen_GEOMETRICUTILITIES_ALONGPATHPATTERN_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_ALONGPATHPATTERN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_AlongPathPattern.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_AlongPathPattern.hxx>
#include <NXOpen/GeometricUtilities_DistancePatternSpacing.hxx>
#include <NXOpen/GeometricUtilities_OnPathDistancePatternSpacing.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class AlongPathPattern;
    }
    class Direction;
    namespace GeometricUtilities
    {
        class DistancePatternSpacing;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDistancePatternSpacing;
    }
    class Section;
    namespace GeometricUtilities
    {
        class _AlongPathPatternBuilder;
        class AlongPathPatternImpl;
        /** the AlongPath pattern definition.  Allows specification along
                two section pathes. 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  AlongPathPattern : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This defines y direction Types */
            public: enum YDirectionOptions
            {
                YDirectionOptionsVector/** y direction is a vector. */,
                YDirectionOptionsSection/** y direction is a section. */
            };

            /** This defines path options */
            public: enum PathOptions
            {
                PathOptionsRigid/** path is the selected section. */,
                PathOptionsOffset/** path is an offset from the selected path. */,
                PathOptionsTranslate/** path is a translation from the selected path. */
            };

            private: AlongPathPatternImpl * m_alongpathpattern_impl;
            private: friend class  _AlongPathPatternBuilder;
            protected: AlongPathPattern();
            public: ~AlongPathPattern();
            /**Returns  the x path options 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AlongPathPattern::PathOptions XPathOption
            (
            );
            /**Sets  the x path options 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetXPathOption
            (
                NXOpen::GeometricUtilities::AlongPathPattern::PathOptions xPathOption /** xpathoption */ 
            );
            /**Returns  the x path 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * XPath
            (
            );
            /**Sets  the x path 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetXPath
            (
                NXOpen::Section * xPath /** xpath */ 
            );
            /**Returns  the on path instance spacing along the x path 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDistancePatternSpacing * XOnPathSpacing
            (
            );
            /**Returns  the y direction options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AlongPathPattern::YDirectionOptions YDirectionOption
            (
            );
            /**Sets  the y direction options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetYDirectionOption
            (
                NXOpen::GeometricUtilities::AlongPathPattern::YDirectionOptions yDirectionOption /** ydirectionoption */ 
            );
            /**Returns  the y path options 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AlongPathPattern::PathOptions YPathOption
            (
            );
            /**Sets  the y path options 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetYPathOption
            (
                NXOpen::GeometricUtilities::AlongPathPattern::PathOptions yPathOption /** ypathoption */ 
            );
            /**Returns  the y path, which can be any continuous section 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * YPath
            (
            );
            /**Sets  the y path, which can be any continuous section 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetYPath
            (
                NXOpen::Section * yPath /** ypath */ 
            );
            /**Returns  the on path instance spacing along the y path 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDistancePatternSpacing * YOnPathSpacing
            (
            );
            /**Returns  the y axis, which can be any vector not parallel to the x axis 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * YDirection
            (
            );
            /**Sets  the y axis, which can be any vector not parallel to the x axis 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetYDirection
            (
                NXOpen::Direction * yDirection /** ydirection */ 
            );
            /**Returns  the instance spacing along the y axis 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DistancePatternSpacing * YSpacing
            (
            );
            /**Returns  the UseYDirection toggle attribute. This function gets the UseYDirection toggle value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool UseYDirectionToggle
            (
            );
            /**Sets  the UseYDirection toggle attribute. This function gets the UseYDirection toggle value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUseYDirectionToggle
            (
                bool toggle /** toggle */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
