#ifndef NXOpen_CAM_CUTDEPTHCHECKER_HXX_INCLUDED
#define NXOpen_CAM_CUTDEPTHCHECKER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CutDepthChecker.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_CutDepthChecker.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class CutDepthChecker;
    }
    class Builder;
    namespace CAM
    {
        class Operation;
    }
    namespace CAM
    {
        class _CutDepthCheckerBuilder;
        class CutDepthCheckerImpl;
        /** Represents a cut depth checker object  <br> This has not creator  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  CutDepthChecker : public Builder
        {
            private: CutDepthCheckerImpl * m_cutdepthchecker_impl;
            private: friend class  _CutDepthCheckerBuilder;
            protected: CutDepthChecker();
            public: ~CutDepthChecker();
            /**Returns  the indicator for pausing on gouge 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PauseOnGouge
            (
            );
            /**Sets  the indicator for pausing on gouge 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPauseOnGouge
            (
                bool newValue /** indicator for pausing on gouge */
            );
            /**Returns  the number of gouges to be used as a limit to stop 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int StopLimit
            (
            );
            /**Sets  the number of gouges to be used as a limit to stop 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopLimit
            (
                int newValue /** the number of gouges to be used as a limit to stop */
            );
            /**Returns  the indicator to stop when the number of gouges has equalled the stop limit 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool StopOnLimit
            (
            );
            /**Sets  the indicator to stop when the number of gouges has equalled the stop limit 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopOnLimit
            (
                bool newValue /** the number of gouges to be used as a limit to stop */
            );
            /**Returns  the indicator to display gouges 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayGouges
            (
            );
            /**Sets  the indicator to display gouges 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDisplayGouges
            (
                bool newValue /** indicator to display gouges */
            );
            /**Returns  the indicator to create curves for the gouged motions 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CreateCurvesForGouges
            (
            );
            /**Sets  the indicator to create curves for the gouged motions 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCreateCurvesForGouges
            (
                bool newValue /** indicator to create curves for the gouged motions */
            );
            /**Returns  the indicator to include tool neck in the collision check process 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool CheckNeck
            (
            );
            /**Sets  the indicator to include tool neck in the collision check process 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCheckNeck
            (
                bool newValue /** indicator to include tool neck in the collision check process */
            );
            /**Returns  the operation that is being checked 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Operation * OperationToCheck
            (
            );
            /**Sets  the operation that is being checked 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOperationToCheck
            (
                NXOpen::CAM::Operation * operation /** the operation which has to be checked */
            );
            /**Returns  the number of cut depth violations 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int NumCutDepthViolations
            (
            );
            /**Returns  the maximum cut depth violation 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double MaxCutDepthViolation
            (
            );
            /**Returns  the calculated cut volume 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double CutVolume
            (
            );
            /** The action to perform the check 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void PerformCheck
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
