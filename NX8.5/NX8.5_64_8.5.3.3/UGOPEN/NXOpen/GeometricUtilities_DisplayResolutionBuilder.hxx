#ifndef NXOpen_GEOMETRICUTILITIES_DISPLAYRESOLUTIONBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_DISPLAYRESOLUTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_DisplayResolutionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_DisplayResolutionBuilder.hxx>
#include <NXOpen/Preferences_PartVisualizationShade.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class DisplayResolutionBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _DisplayResolutionBuilderBuilder;
        class DisplayResolutionBuilderImpl;
        /** Represents a @link GeometricUtilities::DisplayResolutionBuilder GeometricUtilities::DisplayResolutionBuilder@endlink .
                The display resolution block defines the parameters for faceting.
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  DisplayResolutionBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: DisplayResolutionBuilderImpl * m_displayresolutionbuilder_impl;
            private: friend class  _DisplayResolutionBuilderBuilder;
            protected: DisplayResolutionBuilder();
            public: ~DisplayResolutionBuilder();
            /**Returns  the resolution 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartVisualizationShade::AdvViewToleranceType Resolution
            (
            );
            /**Sets  the resolution 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetResolution
            (
                NXOpen::Preferences::PartVisualizationShade::AdvViewToleranceType resolution /** resolution */ 
            );
            /**Returns  the edge tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double EdgeTolerance
            (
            );
            /**Sets  the edge tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetEdgeTolerance
            (
                double edgeTolerance /** edgetolerance */ 
            );
            /**Returns  the face tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double FaceTolerance
            (
            );
            /**Sets  the face tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetFaceTolerance
            (
                double faceTolerance /** facetolerance */ 
            );
            /**Returns  the angle tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the width tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double WidthTolerance
            (
            );
            /**Sets  the width tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetWidthTolerance
            (
                double widthTolerance /** widthtolerance */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
