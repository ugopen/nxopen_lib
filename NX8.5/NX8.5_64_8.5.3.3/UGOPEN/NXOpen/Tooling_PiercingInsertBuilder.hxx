#ifndef NXOpen_TOOLING_PIERCINGINSERTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_PIERCINGINSERTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_PiercingInsertBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_PiercingInsertBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class PiercingInsertBuilder;
    }
    class Builder;
    class Expression;
    class Section;
    class SelectBodyList;
    class SelectFaceList;
    namespace Tooling
    {
        class _PiercingInsertBuilderBuilder;
        class PiercingInsertBuilderImpl;
        /** Represents piercing insert builder.  <br> To create a new instance of this class, use @link Tooling::PiercingInsertCollection::CreatePiercingInsertBuilder  Tooling::PiercingInsertCollection::CreatePiercingInsertBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AssociationTool </td> <td> 
         
        AddIntoList </td> </tr> 

        <tr><td> 
         
        DieInsertType </td> <td> 
         
        DieInsert </td> </tr> 

        <tr><td> 
         
        DieOffsetValue </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DieSameOffsetValue </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalBbpslug </td> <td> 
         
        Fillet </td> </tr> 

        <tr><td> 
         
        NormalCavity </td> <td> 
         
        TaperAngle </td> </tr> 

        <tr><td> 
         
        NormalClearance </td> <td> 
         
        0.05 </td> </tr> 

        <tr><td> 
         
        NormalClearanceOption </td> <td> 
         
        Constant </td> </tr> 

        <tr><td> 
         
        NormalDsslug </td> <td> 
         
        Fillet </td> </tr> 

        <tr><td> 
         
        NormalForEachScrap1 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalForEachScrap2 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalOffsetSide </td> <td> 
         
        DieSide </td> </tr> 

        <tr><td> 
         
        NormalOnePunchToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalRenameDialog </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalSlugPara1 </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        NormalSlugPara2 </td> <td> 
         
        -3 </td> </tr> 

        <tr><td> 
         
        NormalSlugPara3 </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        NormalSlugPara4 </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        Position </td> <td> 
         
        Bottom </td> </tr> 

        <tr><td> 
         
        PunchOffsetValue </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketClearanceForBP </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketClearanceForPP </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketClearanceForSP </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketToggleForBP </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketToggleForPP </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketToggleForSP </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketTypeInBP </td> <td> 
         
        Clearance </td> </tr> 

        <tr><td> 
         
        PunchPocketTypeInPP </td> <td> 
         
        Clearance </td> </tr> 

        <tr><td> 
         
        PunchPocketTypeInSP </td> <td> 
         
        Clearance </td> </tr> 

        <tr><td> 
         
        PunchSameOffsetValue </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UserDefinedDieInsertClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UserDefinedDieInsertHeight.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  PiercingInsertBuilder : public Builder
        {
            /** Specifies the option of piercing insert type. */
            public: enum Types
            {
                TypesDieInsert/** the die insert type */,
                TypesDieCavityAndSlugHole/** the die cavity and slug hole type */,
                TypesPunchInsert/** the punch insert type */,
                TypesAssociation/** the association type */,
                TypesDelete/** the delete insert type */
            };

            /** Specifies the type of insert. */
            public: enum DieInsertTypeItems
            {
                DieInsertTypeItemsDieInsert/** the die insert type */,
                DieInsertTypeItemsBackingInsert/** the backing insert type */
            };

            /** Specifies the type of cavity. */
            public: enum NormalCavityType
            {
                NormalCavityTypeTaperAngle/** the taper angle type */,
                NormalCavityTypeStep/** the step type */,
                NormalCavityTypeRoundStep1/** the round step1 type */,
                NormalCavityTypeRoundStep2/** the round step2 type */
            };

            /** Specifies the type of bottom plate slug. */
            public: enum NormalBbpslugType
            {
                NormalBbpslugTypeFillet/** Bottom plate slug type is fillet */,
                NormalBbpslugTypeRectangle/** Bottom plate slug type is rectangle */,
                NormalBbpslugTypeCircle/** Bottom plate slug type is circle */,
                NormalBbpslugTypeMickey/** Bottom plate slug type is mickey */,
                NormalBbpslugTypeClearance/** Bottom plate slug type is clearance */,
                NormalBbpslugTypeSlotVer/** Bottom plate slug type is slot vertical */,
                NormalBbpslugTypeSlotHor/** Bottom plate slug type is slot horizontal */,
                NormalBbpslugTypeNone/** Bottom plate slug type is none */
            };

            /** Specifies the type of die shoe slug. */
            public: enum NormalDsslugType
            {
                NormalDsslugTypeFillet/** Die shoe slug type is fillet */,
                NormalDsslugTypeRectangle/** Die shoe slug type is rectangle */,
                NormalDsslugTypeCircle/** Die shoe slug type is circle */,
                NormalDsslugTypeMickey/** Die shoe slug type is mickey */,
                NormalDsslugTypeClearance/** Die shoe slug type is clearance */,
                NormalDsslugTypeSlotVer/** Die shoe slug type is slot vertical */,
                NormalDsslugTypeSlotHor/** Die shoe slug type is slot horizontal */,
                NormalDsslugTypeNone/** Die shoe slug type is none */
            };

            /** Specifies the punch pocket type in punch plate. */
            public: enum PunchPocketTypeItemsPP
            {
                PunchPocketTypeItemsPPClearance/** Punch pocket type in punch plate is clearance */,
                PunchPocketTypeItemsPPFillet/** Punch pocket type in punch plate is fillet */,
                PunchPocketTypeItemsPPCircle/** Punch pocket type in punch plate is circle */
            };

            /** Specifies the punch pocket type in backing plate. */
            public: enum PunchPocketTypeItemsBP
            {
                PunchPocketTypeItemsBPClearance/** Punch pocket type in backing plate is clearance */,
                PunchPocketTypeItemsBPFillet/** Punch pocket type in backing plate is fillet */,
                PunchPocketTypeItemsBPCircle/** Punch pocket type in backing plate is circle */
            };

            /** Specifies the punch pocket type in stripper plate. */
            public: enum PunchPocketTypeItemsSP
            {
                PunchPocketTypeItemsSPClearance/** Punch pocket type in stripper plate is clearance */,
                PunchPocketTypeItemsSPFillet/** Punch pocket type in stripper plate is fillet */,
                PunchPocketTypeItemsSPCircle/** Punch pocket type in stripper plate is circle */
            };

            /** Specifies the parent part of user defined punch. */
            public: enum NormalUdpparentPartType
            {
                NormalUdpparentPartTypePrjDie099/** Parent part is die */,
                NormalUdpparentPartTypePrjDb000/** Parent part is db */,
                NormalUdpparentPartTypePrjSub002/** Parent part is sub */
            };

            /** Specifies the design option of piercing insert. */
            public: enum NormalClearanceOptionType
            {
                NormalClearanceOptionTypeConstant/** The design option is normal */,
                NormalClearanceOptionTypeVariable/** The design option is fineblanking */
            };

            /** Specifies the offset side of normal pierce insert design. */
            public: enum NormalOffsetSideType
            {
                NormalOffsetSideTypeDieSide/** The offset side is die */,
                NormalOffsetSideTypePunchSide/** The offset side is punch */
            };

            /** Specifies the association tool operation option. */
            public: enum AssociationToolType
            {
                AssociationToolTypeAddIntoList/** The operation option is add into list */,
                AssociationToolTypeRemoveFromList/** The operation option is remove from list */,
                AssociationToolTypeDeleteSelectedInserts/** The operation option is delete selected inserts */
            };

            /** Specifies the position of piercing inserts, for EDW only */
            public: enum InsertPosition
            {
                InsertPositionTop/** The position is top side */,
                InsertPositionBottom/** The position is bottom side  */
            };

            private: PiercingInsertBuilderImpl * m_piercinginsertbuilder_impl;
            private: friend class  _PiercingInsertBuilderBuilder;
            protected: PiercingInsertBuilder();
            public: ~PiercingInsertBuilder();
            /**Returns  the type of piercing insert. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::Types Type
            (
            );
            /**Sets  the type of piercing insert. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::PiercingInsertBuilder::Types type /** Indicates the type value of the dialog's types block to be set to */
            );
            /**Returns  the select scraps for pierce insert design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectScrap
            (
            );
            /**Returns  the select die insert for cavity. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectDieInsertForCavity
            (
            );
            /**Returns  the die insert type. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::DieInsertTypeItems DieInsertType
            (
            );
            /**Sets  the die insert type. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDieInsertType
            (
                NXOpen::Tooling::PiercingInsertBuilder::DieInsertTypeItems dieInsertType /** Indicates the type of insert to design, die insert or backing insert */
            );
            /**  Load standard die insert for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void NormalLoadDie
            (
            );
            /** Create datum plane for user defined die or backing insert outline. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void CreateUserDefinedInsertDatumPlane
            (
            );
            /**Returns  the select die insert outline. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SelectDieInsertOutline
            (
            );
            /**Returns  the user defined die insert height. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UserDefinedDieInsertHeight
            (
            );
            /**Returns  the user defined die insert clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double UserDefinedDieInsertClearance
            (
            );
            /**Sets  the user defined die insert clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUserDefinedDieInsertClearance
            (
                double userDefinedDieInsertClearance /** Indicates the false body clearance value of user defined die or backing insert */
            );
            /**Returns  the selected user defined die insert to edit. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectUserDefinedDieInsertForEdit
            (
            );
            /** Create user defined die insert or backing insert for selected scraps. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void CreateUserDefinedDieInsert
            (
            );
            /**Returns  the cavity type for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalCavityType NormalCavity
            (
            );
            /**Sets  the cavity type for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalCavity
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalCavityType normalCavity /** Indicates the cavity type for normal pierce design */
            );
            /**Returns  the H value of slug hole for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double NormalSlugPara1
            (
            );
            /**Sets  the H value of slug hole for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalSlugPara1
            (
                double normalSlugPara1 /** Indicates the H value of slug hole for normal pierce design */
            );
            /**Returns  the A value of slug hole for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double NormalSlugPara2
            (
            );
            /**Sets  the A value of slug hole for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalSlugPara2
            (
                double normalSlugPara2 /** Indicates A value of slug hole for normal pierce design */
            );
            /**Returns  the C1 value of slug hole for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double NormalSlugPara3
            (
            );
            /**Sets  the C1 value of slug hole for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalSlugPara3
            (
                double normalSlugPara3 /** Indicates C1 value of slug hole for normal pierce design */
            );
            /**Returns  the C2 value of slug hole for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double NormalSlugPara4
            (
            );
            /**Sets  the C2 value of slug hole for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalSlugPara4
            (
                double normalSlugPara4 /** Indicates the C2 value of slug hole for normal pierce design */
            );
            /**Returns  the each scrap option of bottom plate slug for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool NormalForEachScrap1
            (
            );
            /**Sets  the each scrap option of bottom plate slug for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalForEachScrap1
            (
                bool normalForEachScrap1 /** Indicates each scrap option of bottom plate slug for normal pierce design */
            );
            /**Returns  the bottom plate slug type for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalBbpslugType NormalBbpslug
            (
            );
            /**Sets  the bottom plate slug type for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalBbpslug
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalBbpslugType normalBbpslug /** Indicates bottom plate slug type for normal pierce design */
            );
            /**Returns  the each scrap option of die shoe slug for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool NormalForEachScrap2
            (
            );
            /**Sets  the each scrap option of die shoe slug for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalForEachScrap2
            (
                bool normalForEachScrap2 /** Indicates each scrap option of die shoe slug for normal pierce design */
            );
            /**Returns  the die shoe slug type for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalDsslugType NormalDsslug
            (
            );
            /**Sets  the die shoe slug type for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalDsslug
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalDsslugType normalDsslug /** Indicates die shoe slug type for normal pierce design */
            );
            /** Edit offset value table. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void DieEditOffsetValueTable
            (
            );
            /**Returns  the same offset value option of die design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool DieSameOffsetValue
            (
            );
            /**Sets  the same offset value option of die design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDieSameOffsetValue
            (
                bool dieSameOffsetValue /** Indicates the same offset value option of die design */
            );
            /**Returns  the die offset value. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DieOffsetValue
            (
            );
            /**Sets  the die offset value. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDieOffsetValue
            (
                double dieOffsetValue /** Indicates the die offset value */
            );
            /**Returns  the select pierce die insert to be edited. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * NormalSelectPierceDieInsert
            (
            );
            /** Create cavity and slug for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void NormalCreateCavityAndSlug
            (
            );
            /** Load standard punch for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void NormalLoadStandardPunch
            (
            );
            /**Returns  the user defined punch penetration. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double UserDefinedPunchPenetration
            (
            );
            /**Sets  the user defined punch penetration. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUserDefinedPunchPenetration
            (
                double userDefinedPunchPenetration /** Indicates the punch penetration value for pierce design */
            );
            /**Returns  the punch length for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NormalPunchLength
            (
            );
            /**Sets  the punch length for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalPunchLength
            (
                const NXString & normalPunchLength /** Indicates the punch length for normal pierce design */
            );
            /**Sets  the punch length for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetNormalPunchLength
            (
                const char * normalPunchLength /** Indicates the punch length for normal pierce design */
            );
            /**Returns  the punch pocket toggle for punch plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool PunchPocketToggleForPP
            (
            );
            /**Sets  the punch pocket toggle for punch plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchPocketToggleForPP
            (
                bool punchPocketToggleForPP /** Indicates whether to create punch pocket in punch plate */
            );
            /**Returns  the punch pocket type in punch plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::PunchPocketTypeItemsPP PunchPocketTypeInPP
            (
            );
            /**Sets  the punch pocket type in punch plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchPocketTypeInPP
            (
                NXOpen::Tooling::PiercingInsertBuilder::PunchPocketTypeItemsPP punchPocketTypeInPP /** Indicates the type of punch pocket in punch plate */
            );
            /**Returns  the punch pocket clearance for punch plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchPocketClearanceForPP
            (
            );
            /**Sets  the punch pocket clearance for punch plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchPocketClearanceForPP
            (
                double punchPocketClearanceForPP /** Indicates the clearance value of punch pocket in punch plate */
            );
            /**Returns  the punch pocket toggle for backing plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool PunchPocketToggleForBP
            (
            );
            /**Sets  the punch pocket toggle for backing plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchPocketToggleForBP
            (
                bool punchPocketToggleForBP /** Indicates whether to create punch pocket in backing plate */
            );
            /**Returns  the punch pocket type in backing plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::PunchPocketTypeItemsBP PunchPocketTypeInBP
            (
            );
            /**Sets  the punch pocket type in backing plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchPocketTypeInBP
            (
                NXOpen::Tooling::PiercingInsertBuilder::PunchPocketTypeItemsBP punchPocketTypeInBP /** Indicates the type of punch pocket in backing plate */
            );
            /**Returns  the punch pocket clearance for backing plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchPocketClearanceForBP
            (
            );
            /**Sets  the punch pocket clearance for backing plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchPocketClearanceForBP
            (
                double punchPocketClearanceForBP /** Indicates the clearance value of punch pocket in backing plate */
            );
            /**Returns  the punch pocket toggle for stripper plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool PunchPocketToggleForSP
            (
            );
            /**Sets  the punch pocket toggle for stripper plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchPocketToggleForSP
            (
                bool punchPocketToggleForSP /** Indicates whether to create punch pocket in stripper plate */
            );
            /**Returns  the punch pocket type in stripper plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::PunchPocketTypeItemsSP PunchPocketTypeInSP
            (
            );
            /**Sets  the punch pocket type in stripper plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchPocketTypeInSP
            (
                NXOpen::Tooling::PiercingInsertBuilder::PunchPocketTypeItemsSP punchPocketTypeInSP /** Indicates the type of punch pocket in stripper plate */
            );
            /**Returns  the punch pocket clearance for stripper plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchPocketClearanceForSP
            (
            );
            /**Sets  the punch pocket clearance for stripper plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchPocketClearanceForSP
            (
                double punchPocketClearanceForSP /** Indicates the clearance value of punch pocket in stripper plate */
            );
            /**Returns  the punch pocket height in the stripper plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchPocketHeightInSP
            (
            );
            /**Sets  the punch pocket height in the stripper plate. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchPocketHeightInSP
            (
                double punchPocketHeightInSP /** Indicates the punch pocket height value in the stripper plate */
            );
            /** Edit offset value table. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void PunchEditOffsetValueTable
            (
            );
            /**Returns  the same offset value option of punch design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool PunchSameOffsetValue
            (
            );
            /**Sets  the same offset value option of punch design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchSameOffsetValue
            (
                bool punchSameOffsetValue /** Indicates the same offset value option of punch design */
            );
            /**Returns  the punch offset value. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double PunchOffsetValue
            (
            );
            /**Sets  the punch offset value. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchOffsetValue
            (
                double punchOffsetValue /** Indicates the punch offset value */
            );
            /**Returns  the select pierce punch insert to be edited. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * NormalSelectPiercePunch
            (
            );
            /** Create user defined punch for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void NormalCreateUdp
            (
            );
            /** Add standard stripper insert. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void AddStripperInsert
            (
            );
            /**Returns  the clearance option for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalClearanceOptionType NormalClearanceOption
            (
            );
            /**Sets  the clearance option for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalClearanceOption
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalClearanceOptionType normalClearanceOption /** Indicates the clearance option for normal pierce design */
            );
            /**Returns  the clearance value for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double NormalClearance
            (
            );
            /**Sets  the clearance value for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalClearance
            (
                double normalClearance /** Indicates the clearance value for normal pierce design */
            );
            /**Returns  the offset side option for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalOffsetSideType NormalOffsetSide
            (
            );
            /**Sets  the offset side option for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalOffsetSide
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalOffsetSideType normalOffsetSide /** Indicates the offset side option for normal pierce design */
            );
            /**Returns  the rename dialog option for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool NormalRenameDialog
            (
            );
            /**Sets  the rename dialog option for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalRenameDialog
            (
                bool normalRenameDialog /** Indicates the rename dialog option for normal pierce design */
            );
            /**Returns  the one punch option for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool NormalOnePunchToggle
            (
            );
            /**Sets  the one punch option for normal pierce design. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalOnePunchToggle
            (
                bool normalOnePunchToggle /** Indicates the one punch option for normal pierce design */
            );
            /**Returns  the value indicating if the design is for a concept. True indicates it is a concept design. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ConceptDesign
            (
            );
            /**Sets  the value indicating if the design is for a concept. True indicates it is a concept design. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetConceptDesign
            (
                bool conceptDesign /** Indicates whether it is a concept design */
            );
            /**Returns  the option of whether to create false body for die or backing insert. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool SettingWithoutFalseBody
            (
            );
            /**Sets  the option of whether to create false body for die or backing insert. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSettingWithoutFalseBody
            (
                bool settingWithoutFalseBody /** Indicates whether to create false body */
            );
            /** Update position. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdatePosition
            (
            );
            /**Returns  the selection of the scrap to create association. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectAssociationScrap
            (
            );
            /**Returns  the selection of the inserts to create association. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectAssociationInsert
            (
            );
            /**Returns  the select scrap or insert for association update. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * SelectScrapOrInsert
            (
            );
            /**Returns  the association tool type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::AssociationToolType AssociationTool
            (
            );
            /**Sets  the association tool type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociationTool
            (
                NXOpen::Tooling::PiercingInsertBuilder::AssociationToolType associationTool /** Indicates the association tool type */
            );
            /** Link the selected insert with the selected scrap. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void LinkButton
            (
            );
            /**Returns  the parent part name to create insert. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ParentPartName
            (
            );
            /**Sets  the parent part name to create insert. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetParentPartName
            (
                const NXString & parentPart /** Specifies the parent part name */
            );
            /**Sets  the parent part name to create insert. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetParentPartName
            (
                const char * parentPart /** Specifies the parent part name */
            );
            /**Returns  the new component names. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString NewPartNames
            (
            );
            /**Sets  the new component names. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetNewPartNames
            (
                const NXString & newPartNames /** Specifies the new component names */
            );
            /**Sets  the new component names. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetNewPartNames
            (
                const char * newPartNames /** Specifies the new component names */
            );
            /**Returns  the reverse direction 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::InsertPosition Position
            (
            );
            /**Sets  the reverse direction 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPosition
            (
                NXOpen::Tooling::PiercingInsertBuilder::InsertPosition position /** position */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
