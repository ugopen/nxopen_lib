#ifndef NXOpen_CAM_STEPOVERBUILDER_HXX_INCLUDED
#define NXOpen_CAM_STEPOVERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_StepoverBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_StepoverBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class StepoverBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class MultipleStepoverBuilder;
    }
    namespace CAM
    {
        class StockPerPassBuilder;
    }
    namespace CAM
    {
        class _StepoverBuilderBuilder;
        class StepoverBuilderImpl;
        /** Represents a Stepover Builder 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  StepoverBuilder : public TaggedObject
        {
            /** stepover options 
             <br>  Created in NX6.0.0.  <br>  
            */
            public: enum StepoverTypes
            {
                StepoverTypesNone/** None */,
                StepoverTypesConstant/** Constant */,
                StepoverTypesScallop/** Scallop */,
                StepoverTypesPercentToolFlat/** % Tool Flat */,
                StepoverTypesMultiple/** Multiple */,
                StepoverTypesNumber/** Number of stepovers */,
                StepoverTypesMaximum/** Maximum Stepover */,
                StepoverTypesAngular/** Angular */,
                StepoverTypesVariableAverage/** Variable Average */,
                StepoverTypesVariableMaximum/** Variable Maximum */,
                StepoverTypesUseCutDepth/** Use Depth Of Cut */,
                StepoverTypesPercentRemaining/** Percent Of Remaining */,
                StepoverTypesPercentWire/** % Wire */,
                StepoverTypesStockPerPass/** Stock Per Pass */,
                StepoverTypesPercentThreadLength/** Percent Thread Length */,
                StepoverTypesExact/** Exact */,
                StepoverTypesPercentFluteLength/** Percent Flute Length */,
                StepoverTypesBlankContourConstant/** Depth and Number of levels */
            };

            /** apply on part options 
             <br>  Created in NX6.0.0.  <br>  
            */
            public: enum ApplyTypes
            {
                ApplyTypesOnPlane/** Apply on Plane */,
                ApplyTypesOnPart/** Apply on Part */
            };

            private: StepoverBuilderImpl * m_stepoverbuilder_impl;
            private: friend class  _StepoverBuilderBuilder;
            protected: StepoverBuilder();
            public: ~StepoverBuilder();
            /**Returns  the stepover type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::StepoverBuilder::StepoverTypes StepoverType
            (
            );
            /**Sets  the stepover type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStepoverType
            (
                NXOpen::CAM::StepoverBuilder::StepoverTypes newValue /** the stepover type */
            );
            /**Returns  the distance (inheritable tool dependent) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * DistanceBuilder
            (
            );
            /**Returns  the distance (inheritable double) 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * InheritableDistance
            (
            );
            /**Returns  the distance maximum(inheritable tool dependent) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * DistanceMaximumBuilder
            (
            );
            /**Returns  the distance minimum(inheritable tool dependent) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * DistanceMinimumBuilder
            (
            );
            /**Returns  the scallop height 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ScallopBuilder
            (
            );
            /**Returns  the vertical limit (inheritable tool dependent) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * VerticalLimitBuilder
            (
            );
            /**Returns  the horizontal limit (inheritable tool dependent) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * HorizontalLimitBuilder
            (
            );
            /**Returns  the percent tool flat 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * PercentToolFlatBuilder
            (
            );
            /**Returns  the multiple builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::MultipleStepoverBuilder * MultipleBuilder
            (
            );
            /**Returns  the number of additional passes 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int AdditionalPasses
            (
            );
            /**Sets  the number of additional passes 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAdditionalPasses
            (
                int newValue /** the number of additional passes */
            );
            /**Returns  the number of stepovers 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfStepovers
            (
            );
            /**Sets  the number of stepovers 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfStepovers
            (
                int newValue /** the number of stepovers */
            );
            /**Returns  the number of stepovers at first direction
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberAtFirstDirection
            (
            );
            /**Sets  the number of stepovers at first direction
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberAtFirstDirection
            (
                int newValue /** the number of stepovers */
            );
            /**Returns  the number of stepovers at second direction
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberAtSecondDirection
            (
            );
            /**Sets  the number of stepovers at second direction
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberAtSecondDirection
            (
                int newValue /** the number of stepovers */
            );
            /**Returns  the maximum builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MaximumBuilder
            (
            );
            /**Returns  the angular 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double Angular
            (
            );
            /**Sets  the angular 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAngular
            (
                double angular /** the angular */
            );
            /**Returns  the variable maximum builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * VariableMaximumBuilder
            (
            );
            /**Returns  the variable minimum builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * VariableMinimumBuilder
            (
            );
            /**Returns  the variable maximum only builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * VariableMaximumOnlyBuilder
            (
            );
            /**Returns  the variable average maximum value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double MaximumAverage
            (
            );
            /**Sets  the variable average maximum value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaximumAverage
            (
                double maxAverage /** the variable average maximum value */
            );
            /**Returns  the variable average minimum value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double MinimumAverage
            (
            );
            /**Sets  the variable average minimum value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMinimumAverage
            (
                double minAverage /** the variable average minimum value */
            );
            /**Returns  the variable average maximum builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MaximumAverageBuilder
            (
            );
            /**Returns  the variable average minimum builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MinimumAverageBuilder
            (
            );
            /**Returns  the variable average maximum only builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MaximumAverageOnlyBuilder
            (
            );
            /**Returns  the percent of remaining 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * PercentOfRemainingBuilder
            (
            );
            /**Returns  the maximum percent of remaining 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MaximumPercentBuilder
            (
            );
            /**Returns  the minimum percent of remaining 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MinimumPercentBuilder
            (
            );
            /**Returns  the % wire (inheritable tool dependent) 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * PercentWireBuilder
            (
            );
            /**Returns  the stock per pass 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::StockPerPassBuilder * StockPerPassBuilder
            (
            );
            /**Returns  the percent thread length 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * PercentThreadLength
            (
            );
            /**Returns  the apply on part option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::StepoverBuilder::ApplyTypes ApplyOn
            (
            );
            /**Sets  the apply on part option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetApplyOn
            (
                NXOpen::CAM::StepoverBuilder::ApplyTypes applyOption /** the apply on part option */
            );
            /**Returns  the percent flute of length 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * PercentFluteLength
            (
            );
            /**Returns  the number of levels 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int BlankContourNoLevels
            (
            );
            /**Sets  the number of levels 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBlankContourNoLevels
            (
                int noLevels /** the number of levels */
            );
            /**Returns  the Stepover Depth Builder 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * BlankContourDepth
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
