#ifndef NXOpen_VALIDATE_REQUIREMENTCOLLECTION_HXX_INCLUDED
#define NXOpen_VALIDATE_REQUIREMENTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_RequirementCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Validate_Requirement.hxx>
#include <NXOpen/Validate_RequirementBuilder.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class RequirementCollection;
    }
    class BasePart;
    namespace Validate
    {
        class Requirement;
    }
    namespace Validate
    {
        class RequirementBuilder;
    }
    namespace Validate
    {
        class RequirementCollectionImpl;
        /**
             Represents an NX @link Validate::RequirementCollection Validate::RequirementCollection@endlink  object.
             <br> To obtain an instance of this class, refer to @link BasePart  BasePart @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  RequirementCollection
        {
            /** This enum represents the type of external source where requirement is defined */
            public: enum SourceTypeOptions
            {
                SourceTypeOptionsLocalFile/** local file */ ,
                SourceTypeOptionsTeamcenterFile/** teamcenter file */ ,
                SourceTypeOptionsTeamcenter/** teamcenter */ 
            };

            private: RequirementCollectionImpl * m_requirementcollection_impl;
            private: NXOpen::BasePart* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit RequirementCollection(NXOpen::BasePart *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~RequirementCollection();
            /** Creates a @link Validate::RequirementBuilder Validate::RequirementBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::RequirementBuilder * CreateRequirementBuilder
            (
                NXOpen::Validate::Requirement * requirement /** requirement */ 
            );
            /** Finds the @link Validate::Requirement Validate::Requirement@endlink  with the given identifier.
                        An exception will be thrown if no object can be found with given identifier.  @return  @link Validate::Requirement Validate::Requirement@endlink  with the identifier 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Requirement * FindObject
            (
                const NXString & id /** The identifier of the @link Validate::Requirement Validate::Requirement@endlink  */
            );
            /** Finds the @link Validate::Requirement Validate::Requirement@endlink  with the given identifier.
                        An exception will be thrown if no object can be found with given identifier.  @return  @link Validate::Requirement Validate::Requirement@endlink  with the identifier 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Requirement * FindObject
            (
                const char * id /** The identifier of the @link Validate::Requirement Validate::Requirement@endlink  */
            );
            /**  Loads @link Validate::Requirement Validate::Requirement@endlink  from external source.
                         The source can be local file, Teamcenter requirement item or item revision, and Teamcenter spreadsheet dataset
                         for which the input sourceType is LocalFile, Teamcenter and TeamcenterFile respectively.
                     <br/>
                         Example inputs when sourceType is LocalFile
                     <ol>
                     <li>source: "C:\requirement.xml" or "C:\requirement_spreadsheet.xls"</li>
                     <li>revision: empty string</li>
                     <li>project: "category_A" It's a project node name in the source XML file or a sheet name in the source spreadsheet file.</li>
                     </ol>
                     <br/>
                         Example inputs when sourceType is Teamcenter
                     <ol>
                         If source is item revision 000084/A:
                     <li>source: "000084"</li>
                     <li>revision: "A"</li>
                     <li>project: empty string</li>
                     </ol>
                     <ol>
                         If source is item 000084:
                     <li>source: "000084"</li>
                     <li>revision:empty string</li>
                     <li>project: empty string</li>
                     </ol>
                     <br/>
                         Example inputs when sourceType is TeamcenterFile
                     <ol>
                         If source is a spreadsheet dataset in an item revision 000085/A:
                     <li>source: 000085</li>
                     <li>revision: A</li>
                     <li>project: "category_A" It's a sheet name in the source spreadsheet.</li>
                     </ol>
                     <ol>
                         If source is a spreadsheet dataset in item 000085:
                     <li>source: "000085"</li>
                     <li>revision: empty string</li>
                     <li>project: "category_A" It's a sheet name in the source spreadsheet.</li>
                     </ol>
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void LoadFromExternalSource
            (
                NXOpen::Validate::RequirementCollection::SourceTypeOptions sourceType /** Type of the external source */,
                const NXString & source /** File full path if sourceType is LocalFile; Item id if sourceType is Teamcenter or TeamcenterFile. */,
                const NXString & revision /** Only needed if sourceType is Teamcenter or TeamcenterFile. Revision id if source is an item revision. Null if source is an item. */,
                const NXString & project /** Required if sourceType is LocalFile or TeamcenterFile.
                                                                                            Project name if the source is a XML file; Sheet name if source is a spreadsheet file. */
            );
            /**  Loads @link Validate::Requirement Validate::Requirement@endlink  from external source.
                         The source can be local file, Teamcenter requirement item or item revision, and Teamcenter spreadsheet dataset
                         for which the input sourceType is LocalFile, Teamcenter and TeamcenterFile respectively.
                     <br/>
                         Example inputs when sourceType is LocalFile
                     <ol>
                     <li>source: "C:\requirement.xml" or "C:\requirement_spreadsheet.xls"</li>
                     <li>revision: empty string</li>
                     <li>project: "category_A" It's a project node name in the source XML file or a sheet name in the source spreadsheet file.</li>
                     </ol>
                     <br/>
                         Example inputs when sourceType is Teamcenter
                     <ol>
                         If source is item revision 000084/A:
                     <li>source: "000084"</li>
                     <li>revision: "A"</li>
                     <li>project: empty string</li>
                     </ol>
                     <ol>
                         If source is item 000084:
                     <li>source: "000084"</li>
                     <li>revision:empty string</li>
                     <li>project: empty string</li>
                     </ol>
                     <br/>
                         Example inputs when sourceType is TeamcenterFile
                     <ol>
                         If source is a spreadsheet dataset in an item revision 000085/A:
                     <li>source: 000085</li>
                     <li>revision: A</li>
                     <li>project: "category_A" It's a sheet name in the source spreadsheet.</li>
                     </ol>
                     <ol>
                         If source is a spreadsheet dataset in item 000085:
                     <li>source: "000085"</li>
                     <li>revision: empty string</li>
                     <li>project: "category_A" It's a sheet name in the source spreadsheet.</li>
                     </ol>
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void LoadFromExternalSource
            (
                NXOpen::Validate::RequirementCollection::SourceTypeOptions sourceType /** Type of the external source */,
                const char * source /** File full path if sourceType is LocalFile; Item id if sourceType is Teamcenter or TeamcenterFile. */,
                const char * revision /** Only needed if sourceType is Teamcenter or TeamcenterFile. Revision id if source is an item revision. Null if source is an item. */,
                const char * project /** Required if sourceType is LocalFile or TeamcenterFile.
                                                                                            Project name if the source is a XML file; Sheet name if source is a spreadsheet file. */
            );
            /**Returns  the revision rule for requirement from Teamcenter 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString RevisionRule
            (
            );
            /**Sets  the revision rule for requirement from Teamcenter 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRevisionRule
            (
                const NXString & rule /** rule */ 
            );
            /**Sets  the revision rule for requirement from Teamcenter 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetRevisionRule
            (
                const char * rule /** rule */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
