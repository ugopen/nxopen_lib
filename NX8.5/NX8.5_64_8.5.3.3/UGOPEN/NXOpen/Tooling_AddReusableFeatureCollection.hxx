#ifndef NXOpen_TOOLING_ADDREUSABLEFEATURECOLLECTION_HXX_INCLUDED
#define NXOpen_TOOLING_ADDREUSABLEFEATURECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_AddReusableFeatureCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/Tooling_AddReusableFeatureBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class AddReusableFeatureCollection;
    }
    namespace Tooling
    {
        class ToolingManager;
    }
    namespace Tooling
    {
        class AddReusableFeatureBuilder;
    }
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    namespace Tooling
    {
        class AddReusableFeatureCollectionImpl;
        /** Represents a collection of AddReusableFeature  <br> To obtain an instance of this class, refer to @link Tooling::ToolingManager  Tooling::ToolingManager @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  AddReusableFeatureCollection : public TaggedObjectCollection
        {
             /** Defines the input data of AddReusableFeatureBuilder */
            public:
            struct  InputData
            {
                public: /** KRX file of reusable feature template */NXString KrxFile;
                public: /** Library name of reusable feature template */NXString LibName;
                public: /** Library path of reusable feature template */NXString LibPath;
                public: /** Placement entity in create mode */NXOpen::NXObject * Entity;
                public: /** Cursor position in create mode */NXOpen::Point3d Position;
                public: /** Reusable feature in edit mode */NXOpen::Features::Feature * Feature;
                public: InputData() :
                    KrxFile(),
                    LibName(),
                    LibPath(),
                    Entity(),
                    Position(),
                    Feature()
                {
                }
                /** Constructor for the InputData struct. */ 
                public: InputData(const NXString &krxFileInitial /** KRX file of reusable feature template */, 
                        const NXString &libNameInitial /** Library name of reusable feature template */, 
                        const NXString &libPathInitial /** Library path of reusable feature template */, 
                        NXOpen::NXObject * entityInitial /** Placement entity in create mode */, 
                        const NXOpen::Point3d &positionInitial /** Cursor position in create mode */, 
                        NXOpen::Features::Feature * featureInitial /** Reusable feature in edit mode */) :
                    KrxFile(krxFileInitial),
                    LibName(libNameInitial),
                    LibPath(libPathInitial),
                    Entity(entityInitial),
                    Position(positionInitial),
                    Feature(featureInitial)
                {
                }
            };

            private: AddReusableFeatureCollectionImpl * m_addreusablefeaturecollection_impl;
            private: NXOpen::Tooling::ToolingManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit AddReusableFeatureCollection(NXOpen::Tooling::ToolingManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~AddReusableFeatureCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Tooling::AddReusableFeatureCollection::iterator::copy,initializer)
            class iterator
            {
            public:
                /** Value type associated with iterator*/ 

                typedef Tooling::AddReusableFeatureBuilder * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Tooling::AddReusableFeatureCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_TOOLINGEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_TOOLINGEXPORT  void next();
                NXOpen::Tooling::AddReusableFeatureCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a AddReusableFeature builder  @return  Add Reusable Feature Builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AddReusableFeatureBuilder * CreateBuilder
            (
                const NXOpen::Tooling::AddReusableFeatureCollection::InputData & inputData /** Input data */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
