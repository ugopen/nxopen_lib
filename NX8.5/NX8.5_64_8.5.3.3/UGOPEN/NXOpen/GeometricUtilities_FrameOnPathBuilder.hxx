#ifndef NXOpen_GEOMETRICUTILITIES_FRAMEONPATHBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_FRAMEONPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_FrameOnPathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_FrameOnPathBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class FrameOnPathBuilder;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace GeometricUtilities
    {
        class _FrameOnPathBuilderBuilder;
        class FrameOnPathBuilderImpl;
        /** Frame on path builder 
         <br>  Created in NX7.5.1.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  FrameOnPathBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Anchor location types */
            public: enum AnchorLocationType
            {
                AnchorLocationTypeCenter/** Center position */,
                AnchorLocationTypeRight/** Right position */,
                AnchorLocationTypeLeft/** Left position */
            };

            private: FrameOnPathBuilderImpl * m_frameonpathbuilder_impl;
            private: friend class  _FrameOnPathBuilderBuilder;
            protected: FrameOnPathBuilder();
            public: ~FrameOnPathBuilder();
            /**Returns  the anchor location 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FrameOnPathBuilder::AnchorLocationType AnchorLocation
            (
            );
            /**Sets  the anchor location 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAnchorLocation
            (
                NXOpen::GeometricUtilities::FrameOnPathBuilder::AnchorLocationType anchorLocation /** anchorlocation */ 
            );
            /**Returns  the anchor position 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * AnchorPosition
            (
            );
            /**Returns  the offset 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Offset
            (
            );
            /**Returns  the length 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Length
            (
            );
            /**Returns  the height 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the width scale 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: double WScale
            (
            );
            /**Sets  the width scale 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: void SetWScale
            (
                double wScale /** wscale */ 
            );
            /**Returns  the value indicating if apex point is reversed 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: bool IsApexReversed
            (
            );
            /**Sets  the value indicating if apex point is reversed 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetApexReversed
            (
                bool isReversed /** isreversed */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
