#ifndef NXOpen_CAE_XYPLOTDATATYPES_HXX_INCLUDED
#define NXOpen_CAE_XYPLOTDATATYPES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_XyplotDataTypes.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Xyplot
        {
            /** Represents the plot graph style */
            enum GraphStyle
            {
                GraphStyleLine/** Option to display plot in curve style */,
                GraphStyleBar/** Option to display plot in bar style  */,
                GraphStylePlate/** Option to display plot in plate style */,
                GraphStyleSurface/** Option to display plot in surface style */
            };

            /** Represents the 2D plot complex option */
            enum ComplexOption2D
            {
                ComplexOption2DMagnitude/** Magnitude of the complex data for 2D plot */,
                ComplexOption2DMagnitudePhase/** Magnitude and phase angle of complex data for 2D plot */,
                ComplexOption2DPhase/** Only the phase of the complex data for 2D plot */,
                ComplexOption2DReal/** Only the real part of the complex data for 2D plot */,
                ComplexOption2DRealImaginary/** Real and imaginary of the complex data for 2D plot */,
                ComplexOption2DRealImaginaryPhase/** Real, imaginary and phase angle of the complex data for 2D plot */,
                ComplexOption2DPolar/** Polar for 2D plot */,
                ComplexOption2DArgand/** Argand for 2D plot */,
                ComplexOption2DPolar3D/** Polar for 3D plot */,
                ComplexOption2DArgand3D/** Argand for 3D plot */,
                ComplexOption2DPhaseMagnitude/** Phase angle and Magnitude of complex data for 2D plot */,
                ComplexOption2DImaginaryReal/** Real and imaginary of the complex data for 2D plot */,
                ComplexOption2DPhaseRealImaginary/** Phase angle, real and imaginary of the complex data for 2D plot */,
                ComplexOption2DImaginaryRealPhase/** Imaginary, real and phase angle of the complex data for 2D plot */,
                ComplexOption2DPhaseImaginaryReal/** Phase angle, imaginary and real of the complex data for 2D plot */
            };

            /** Represents the 3D plot complex option */
            enum ComplexOption3D
            {
                ComplexOption3DMagnitude/** Magnitude of the complex data for 3D plot */,
                ComplexOption3DPhase/** Phase of the complex data for 3D plot */,
                ComplexOption3DReal/** Real part of the complex data for 3D plot */,
                ComplexOption3DImaginary/** Imaginary part of the complex data for 3D plot */
            };

            /** Prepresents the phase range option */
            enum PhaseRangeOption
            {
                PhaseRangeOptionNegativeTwoPiToZero/** Displays phase between 0 and 360 */,
                PhaseRangeOptionZeroToTwoPi/** Displays phase between -360 and 0 */,
                PhaseRangeOptionNegativePiToPi/** Displays phase between -180 and 180 */,
                PhaseRangeOptionNegativeOneHalfPiToHalfPi/** Displays phase between -270 and 90 */,
                PhaseRangeOptionNegativeHalfPiToOneHalfPi/** Displays phase between -90 and 270 */
            };

            /** Represents the label text type */
            enum TextType
            {
                TextTypeNone/** Not defined type */,
                TextTypeTitle/** Title label */,
                TextTypeLegend/** Legend label */,
                TextTypeGraphName/** Graph name label */,
                TextTypePageNumber/** Page number label */,
                TextTypeMarker/** Marker label */,
                TextTypeNote/** Note label */,
                TextTypeProbingText/** Probing label */,
                TextTypeXLabel/** X Axis name label */,
                TextTypeYLabel/** Y Axis name label */,
                TextTypeZLabel/** Z Axis name label */,
                TextTypeXNumber/** X Axis number label */,
                TextTypeYNumber/** Y Axis number label */,
                TextTypeZNumber/** Z Axis number label */
            };

            /** Represents the axis direction */
            enum AxisDirection
            {
                AxisDirectionX/** X-axis */,
                AxisDirectionY/** Y-axis */,
                AxisDirectionZ/** Z-axis */
            };

            /** Represents the text alignment */
            enum TextAlignment
            {
                TextAlignmentLeft/** Left align text */,
                TextAlignmentCenter/** Center align text */,
                TextAlignmentRight/** Right align text */
            };

            /** Represents the text orientation */
            enum TextOrientation
            {
                TextOrientationHorizontal/** Horizontal text orientation */,
                TextOrientationUpward/** Upward text orientation */,
                TextOrientationDownward/** Downward text orientation */
            };

            /** Represents the type of scale for X or Y axis */
            enum AxisType
            {
                AxisTypeAuto/** Automatic type */,
                AxisTypeLinear/** Linear type */,
                AxisTypeLog/** Log type */,
                AxisTypeDb/** Db type */
            };

            /** Represents the DB scale for plot */
            enum AxisDBScale
            {
                AxisDBScaleTen/** Db 10 */,
                AxisDBScaleTwenty/** Db 20 */
            };

            /** Represents the unit system */
            enum UnitSystem
            {
                UnitSystemFunction/** Function unit */,
                UnitSystemModel/** Model unit */,
                UnitSystemSi/** International standard unit */,
                UnitSystemMn/** Milliforce unit */,
                UnitSystemMm/** Millimeter unit */,
                UnitSystemIn/** Inch unit */,
                UnitSystemCustom/** Custom unit */
            };

            /** Represents the grid style for plot */
            enum GridStyle
            {
                GridStyleNoGrid/** No grid displayed */,
                GridStyleGridOnly/** Only display grid */,
                GridStyleTicksOnly/** Only display tick */,
                GridStyleGridAndTicks/** Display both grid and tick */,
                GridStyleDenseGrid/** Display dense grid */
            };

            /** Represents the line font */
            enum LineFont
            {
                LineFontSolid/** Solid font */,
                LineFontDashed/** Dashed font */,
                LineFontPhantom/** Phantom font */,
                LineFontCenterLine/** Center line font */,
                LineFontDotted/** Dotted font */,
                LineFontLongDashed/** Long dashed font */,
                LineFontDottedDashed/** Dotted dashed font */
            };

            /** Represents the line width */
            enum LineWidth
            {
                LineWidthThin/** Thin width */,
                LineWidthNormal/** Normal width */,
                LineWidthThick/** Thick width */
            };

            /** Represents the point marker */
            enum PointMarker
            {
                PointMarkerNone/** No marker */,
                PointMarkerPlus/** Plus marker */,
                PointMarkerDot/** Dot marker */,
                PointMarkerAsterisk/** Asterisk marker */,
                PointMarkerCircle/** Circle marker */,
                PointMarkerPoundsign/** Pound sign marker */,
                PointMarkerCross/** Cross marker */,
                PointMarkerSquare/** Square marker */,
                PointMarkerTriangle/** Triangle marker */,
                PointMarkerDiamond/** Diamond marker */,
                PointMarkerCenterLine/** Center line marker */
            };

            /** Represents the contouring range */
            enum ContouringRange
            {
                ContouringRangeBorderGrid/** Option to show contour range on the border of the grid */,
                ContouringRangeFullGrid/** Option to show contour range on the face of the grid */
            };

            /** Represents the direction option */
            enum Direction
            {
                DirectionX/** Option to show plot in the X axis direction */,
                DirectionZ/** Option to show plot in the Z axis direction */,
                DirectionXz/** Option to show plot in the both X and Z axis direction */
            };

            /** Represents the bar filling color option */
            enum BarColorOption
            {
                BarColorOptionFill/** Fill color or contour color with no shading */,
                BarColorOptionHidden/** Background color as fill */,
                BarColorOptionShaded/** Fill Color or contour color with shading */
            };

            /** Represents the plate filling color option */
            enum PlateColorOption
            {
                PlateColorOptionFill/** Fill color with no shading */,
                PlateColorOptionHidden/** Background color as fill */,
                PlateColorOptionShaded/** Fill Color with shading */
            };

            /** Represents the surface filling color option */
            enum SurfaceColorOption
            {
                SurfaceColorOptionNone/** No shading */,
                SurfaceColorOptionHidden/** Background color as fill */,
                SurfaceColorOptionShaded/** Fill Color or contour color with shading */
            };

            /** Represents the decimal number format */
            enum DecimalFormat
            {
                DecimalFormatActual/** Show decimal automatically */,
                DecimalFormatX/** Displays one digit followed by period */,
                DecimalFormatXx/** Displays two digits followed by period */,
                DecimalFormatXxx/** Displays three digits followed by period */,
                DecimalFormatXxxx/** Displays four digits followed by period */,
                DecimalFormatXexx/** Scientific notation with one digit followed by period,
                                                                 for example: 5.3E+05 */,
                DecimalFormatXxexx/** Scientific notation with two digits followed by period */,
                DecimalFormatXxxexx/** Scientific notation with three digits followed by period */,
                DecimalFormatXxxxexx/** Scientific notation with four digits followed by period */
            };

             /** Text display style */

            struct  TextStyle
            {
                public: /** Text font */NXString TextFont;
                public: /** Text size. The acceptable range is 1-10 */int TextSize;
                public: /** Text color. The acceptable range is 1-216 */int TextColor;
                public: /** Text width */NXOpen::CAE::Xyplot::LineWidth TextWeight;
                public: /** Text alignment, only valid for title options, 
                                                                              legend options and axis label options */NXOpen::CAE::Xyplot::TextAlignment TextAlignment;
                public: /** Text orientation, only
                                                                              invalid for legend options */NXOpen::CAE::Xyplot::TextOrientation TextOrientation;
                public: TextStyle() :
                    TextFont(),
                    TextSize(),
                    TextColor(),
                    TextWeight((NXOpen::CAE::Xyplot::LineWidth)0),
                    TextAlignment((NXOpen::CAE::Xyplot::TextAlignment)0),
                    TextOrientation((NXOpen::CAE::Xyplot::TextOrientation)0)
                {
                }
                /** Constructor for the TextStyle struct. */ 
                public: TextStyle(const NXString &textFontInitial /** Text font */, 
                        int textSizeInitial /** Text size. The acceptable range is 1-10 */, 
                        int textColorInitial /** Text color. The acceptable range is 1-216 */, 
                        NXOpen::CAE::Xyplot::LineWidth textWeightInitial /** Text width */, 
                        NXOpen::CAE::Xyplot::TextAlignment textAlignmentInitial /** Text alignment, only valid for title options, 
                                                                                      legend options and axis label options */, 
                        NXOpen::CAE::Xyplot::TextOrientation textOrientationInitial /** Text orientation, only
                                                                                      invalid for legend options */) :
                    TextFont(textFontInitial),
                    TextSize(textSizeInitial),
                    TextColor(textColorInitial),
                    TextWeight(textWeightInitial),
                    TextAlignment(textAlignmentInitial),
                    TextOrientation(textOrientationInitial)
                {
                }
            };

             /** Text box display style */

            struct  TextBoxStyle
            {
                public: /** Whether to show the text box */bool ShowTextBox;
                public: /** Text box rim color. The acceptable range is 1-216 */int BoxColor;
                public: /** Whether to fill the text box */bool FillTextBox;
                public: /** Text box filled color. The acceptable range is 1-216 */int FilledColor;
                public: TextBoxStyle() :
                    ShowTextBox(),
                    BoxColor(),
                    FillTextBox(),
                    FilledColor()
                {
                }
                /** Constructor for the TextBoxStyle struct. */ 
                public: TextBoxStyle(bool showTextBoxInitial /** Whether to show the text box */, 
                        int boxColorInitial /** Text box rim color. The acceptable range is 1-216 */, 
                        bool fillTextBoxInitial /** Whether to fill the text box */, 
                        int filledColorInitial /** Text box filled color. The acceptable range is 1-216 */) :
                    ShowTextBox(showTextBoxInitial),
                    BoxColor(boxColorInitial),
                    FillTextBox(fillTextBoxInitial),
                    FilledColor(filledColorInitial)
                {
                }
            };

             /** Axis display style */

            struct  AxisStyle
            {
                public: /** Axis scale type */NXOpen::CAE::Xyplot::AxisType AxisType;
                public: /** DB reference for the X or Y axis */double DbRef;
                public: /** Decibel scale. This value is used to compute the decibel equivalent
                                                                        for all X, Y or Z values and plots them on a linear X, Y or Z axis */NXOpen::CAE::Xyplot::AxisDBScale DbScale;
                public: /** Number of Log decades to display */int LogDecades;
                public: /** Number of dB decades to display */int DbDecades;
                public: /** This value is used to round off values and is a percent value */int GraphOverhead;
                public: AxisStyle() :
                    AxisType((NXOpen::CAE::Xyplot::AxisType)0),
                    DbRef(),
                    DbScale((NXOpen::CAE::Xyplot::AxisDBScale)0),
                    LogDecades(),
                    DbDecades(),
                    GraphOverhead()
                {
                }
                /** Constructor for the AxisStyle struct. */ 
                public: AxisStyle(NXOpen::CAE::Xyplot::AxisType axisTypeInitial /** Axis scale type */, 
                        double dbRefInitial /** DB reference for the X or Y axis */, 
                        NXOpen::CAE::Xyplot::AxisDBScale dbScaleInitial /** Decibel scale. This value is used to compute the decibel equivalent
                                                                                for all X, Y or Z values and plots them on a linear X, Y or Z axis */, 
                        int logDecadesInitial /** Number of Log decades to display */, 
                        int dbDecadesInitial /** Number of dB decades to display */, 
                        int graphOverheadInitial /** This value is used to round off values and is a percent value */) :
                    AxisType(axisTypeInitial),
                    DbRef(dbRefInitial),
                    DbScale(dbScaleInitial),
                    LogDecades(logDecadesInitial),
                    DbDecades(dbDecadesInitial),
                    GraphOverhead(graphOverheadInitial)
                {
                }
            };

             /** Axis number display style */

            struct  AxisNumberStyle
            {
                public: /** Decimal format */NXOpen::CAE::Xyplot::DecimalFormat DecimalFormat;
                public: /** Number style */NXOpen::CAE::Xyplot::TextStyle NumberStyle;
                public: AxisNumberStyle() :
                    DecimalFormat((NXOpen::CAE::Xyplot::DecimalFormat)0),
                    NumberStyle()
                {
                }
                /** Constructor for the AxisNumberStyle struct. */ 
                public: AxisNumberStyle(NXOpen::CAE::Xyplot::DecimalFormat decimalFormatInitial /** Decimal format */, 
                        const NXOpen::CAE::Xyplot::TextStyle &numberStyleInitial /** Number style */) :
                    DecimalFormat(decimalFormatInitial),
                    NumberStyle(numberStyleInitial)
                {
                }
            };

             /** Text display option */

            struct  TextOption
            {
                public: /** Text style */NXOpen::CAE::Xyplot::TextStyle TextStyle;
                public: /** Text box style */NXOpen::CAE::Xyplot::TextBoxStyle TextBox;
                public: TextOption() :
                    TextStyle(),
                    TextBox()
                {
                }
                /** Constructor for the TextOption struct. */ 
                public: TextOption(const NXOpen::CAE::Xyplot::TextStyle &textStyleInitial /** Text style */, 
                        const NXOpen::CAE::Xyplot::TextBoxStyle &textBoxInitial /** Text box style */) :
                    TextStyle(textStyleInitial),
                    TextBox(textBoxInitial)
                {
                }
            };

             /** Axis label display style */

            struct  AxisLabelStyle
            {
                public: /** Whether to use the automatic label title */bool AutoLabelTitle;
                public: /** User defined label title */NXString LabelTitle;
                public: /** Label text option */NXOpen::CAE::Xyplot::TextOption TextOption;
                public: AxisLabelStyle() :
                    AutoLabelTitle(),
                    LabelTitle(),
                    TextOption()
                {
                }
                /** Constructor for the AxisLabelStyle struct. */ 
                public: AxisLabelStyle(bool autoLabelTitleInitial /** Whether to use the automatic label title */, 
                        const NXString &labelTitleInitial /** User defined label title */, 
                        const NXOpen::CAE::Xyplot::TextOption &textOptionInitial /** Label text option */) :
                    AutoLabelTitle(autoLabelTitleInitial),
                    LabelTitle(labelTitleInitial),
                    TextOption(textOptionInitial)
                {
                }
            };

             /** Grid layout style for 2D plot */

            struct  GridLayout2D
            {
                public: /** Grid style in X/Y plane */NXOpen::CAE::Xyplot::GridStyle XyGridStyle;
                public: /** Grid line font */NXOpen::CAE::Xyplot::LineFont GridFont;
                public: /** Grid line width */NXOpen::CAE::Xyplot::LineWidth GridWidth;
                public: /** Grid line color. The acceptable range is 1-216 */int GridColor;
                public: /** Grid dense color. The acceptable range is 1-216 */int DenseColor;
                public: /** Whether to show the background */bool ShowBackground;
                public: /** Background color. The acceptable range is 1-216 */int BackgroundColor;
                public: /** Whether to show contouring */bool DisplayContouring;
                public: /** Contouring level */int ContouringLevel;
                public: /** Option to show contour range either
                                                                                on the border or the faces of the grid */NXOpen::CAE::Xyplot::ContouringRange ContouringRange;
                public: GridLayout2D() :
                    XyGridStyle((NXOpen::CAE::Xyplot::GridStyle)0),
                    GridFont((NXOpen::CAE::Xyplot::LineFont)0),
                    GridWidth((NXOpen::CAE::Xyplot::LineWidth)0),
                    GridColor(),
                    DenseColor(),
                    ShowBackground(),
                    BackgroundColor(),
                    DisplayContouring(),
                    ContouringLevel(),
                    ContouringRange((NXOpen::CAE::Xyplot::ContouringRange)0)
                {
                }
                /** Constructor for the GridLayout2D struct. */ 
                public: GridLayout2D(NXOpen::CAE::Xyplot::GridStyle xyGridStyleInitial /** Grid style in X/Y plane */, 
                        NXOpen::CAE::Xyplot::LineFont gridFontInitial /** Grid line font */, 
                        NXOpen::CAE::Xyplot::LineWidth gridWidthInitial /** Grid line width */, 
                        int gridColorInitial /** Grid line color. The acceptable range is 1-216 */, 
                        int denseColorInitial /** Grid dense color. The acceptable range is 1-216 */, 
                        bool showBackgroundInitial /** Whether to show the background */, 
                        int backgroundColorInitial /** Background color. The acceptable range is 1-216 */, 
                        bool displayContouringInitial /** Whether to show contouring */, 
                        int contouringLevelInitial /** Contouring level */, 
                        NXOpen::CAE::Xyplot::ContouringRange contouringRangeInitial /** Option to show contour range either
                                                                                        on the border or the faces of the grid */) :
                    XyGridStyle(xyGridStyleInitial),
                    GridFont(gridFontInitial),
                    GridWidth(gridWidthInitial),
                    GridColor(gridColorInitial),
                    DenseColor(denseColorInitial),
                    ShowBackground(showBackgroundInitial),
                    BackgroundColor(backgroundColorInitial),
                    DisplayContouring(displayContouringInitial),
                    ContouringLevel(contouringLevelInitial),
                    ContouringRange(contouringRangeInitial)
                {
                }
            };

             /** Grid layout style for 3D plot */

            struct  GridLayout3D
            {
                public: /** 2D grid layout style */NXOpen::CAE::Xyplot::GridLayout2D GridLayout2d;
                public: /** Grid style in Z/Y plane */NXOpen::CAE::Xyplot::GridStyle ZyGridStyle;
                public: GridLayout3D() :
                    GridLayout2d(),
                    ZyGridStyle((NXOpen::CAE::Xyplot::GridStyle)0)
                {
                }
                /** Constructor for the GridLayout3D struct. */ 
                public: GridLayout3D(const NXOpen::CAE::Xyplot::GridLayout2D &gridLayout2dInitial /** 2D grid layout style */, 
                        NXOpen::CAE::Xyplot::GridStyle zyGridStyleInitial /** Grid style in Z/Y plane */) :
                    GridLayout2d(gridLayout2dInitial),
                    ZyGridStyle(zyGridStyleInitial)
                {
                }
            };

             /** Line display option for 2D plot */

            struct  LineOption2D
            {
                public: /** Line font */NXOpen::CAE::Xyplot::LineFont LineFont;
                public: /** Line width */NXOpen::CAE::Xyplot::LineWidth LineWidth;
                public: /** Point marker */NXOpen::CAE::Xyplot::PointMarker PointMarker;
                public: /** Line color. The acceptable range is 1-216 */int LineColor;
                public: LineOption2D() :
                    LineFont((NXOpen::CAE::Xyplot::LineFont)0),
                    LineWidth((NXOpen::CAE::Xyplot::LineWidth)0),
                    PointMarker((NXOpen::CAE::Xyplot::PointMarker)0),
                    LineColor()
                {
                }
                /** Constructor for the LineOption2D struct. */ 
                public: LineOption2D(NXOpen::CAE::Xyplot::LineFont lineFontInitial /** Line font */, 
                        NXOpen::CAE::Xyplot::LineWidth lineWidthInitial /** Line width */, 
                        NXOpen::CAE::Xyplot::PointMarker pointMarkerInitial /** Point marker */, 
                        int lineColorInitial /** Line color. The acceptable range is 1-216 */) :
                    LineFont(lineFontInitial),
                    LineWidth(lineWidthInitial),
                    PointMarker(pointMarkerInitial),
                    LineColor(lineColorInitial)
                {
                }
            };

             /** Line display option for 3D plot */

            struct  LineOption3D
            {
                public: /** 2D line option */NXOpen::CAE::Xyplot::LineOption2D Option2d;
                public: /** Line direction */NXOpen::CAE::Xyplot::Direction LineDirection;
                public: LineOption3D() :
                    Option2d(),
                    LineDirection((NXOpen::CAE::Xyplot::Direction)0)
                {
                }
                /** Constructor for the LineOption3D struct. */ 
                public: LineOption3D(const NXOpen::CAE::Xyplot::LineOption2D &option2dInitial /** 2D line option */, 
                        NXOpen::CAE::Xyplot::Direction lineDirectionInitial /** Line direction */) :
                    Option2d(option2dInitial),
                    LineDirection(lineDirectionInitial)
                {
                }
            };

             /** Bar display option for 2D plot */

            struct  BarOption2D
            {
                public: /** Whether to show outline */bool ShowOutline;
                public: /** Outline color. The acceptable range is 1-216 */int OutlineColor;
                public: /** Filling color. The acceptable range is 1-216 */int FillingColor;
                public: /** Bar width */int BarWidth;
                public: /** Point marker */NXOpen::CAE::Xyplot::PointMarker PointMarker;
                public: BarOption2D() :
                    ShowOutline(),
                    OutlineColor(),
                    FillingColor(),
                    BarWidth(),
                    PointMarker((NXOpen::CAE::Xyplot::PointMarker)0)
                {
                }
                /** Constructor for the BarOption2D struct. */ 
                public: BarOption2D(bool showOutlineInitial /** Whether to show outline */, 
                        int outlineColorInitial /** Outline color. The acceptable range is 1-216 */, 
                        int fillingColorInitial /** Filling color. The acceptable range is 1-216 */, 
                        int barWidthInitial /** Bar width */, 
                        NXOpen::CAE::Xyplot::PointMarker pointMarkerInitial /** Point marker */) :
                    ShowOutline(showOutlineInitial),
                    OutlineColor(outlineColorInitial),
                    FillingColor(fillingColorInitial),
                    BarWidth(barWidthInitial),
                    PointMarker(pointMarkerInitial)
                {
                }
            };

             /** Bar display option for 3D plot */

            struct  BarOption3D
            {
                public: /** 2D bar option */NXOpen::CAE::Xyplot::BarOption2D Option2d;
                public: /** Filling color option */NXOpen::CAE::Xyplot::BarColorOption ColorOption;
                public: /** Bar depth */int BarDepth;
                public: BarOption3D() :
                    Option2d(),
                    ColorOption((NXOpen::CAE::Xyplot::BarColorOption)0),
                    BarDepth()
                {
                }
                /** Constructor for the BarOption3D struct. */ 
                public: BarOption3D(const NXOpen::CAE::Xyplot::BarOption2D &option2dInitial /** 2D bar option */, 
                        NXOpen::CAE::Xyplot::BarColorOption colorOptionInitial /** Filling color option */, 
                        int barDepthInitial /** Bar depth */) :
                    Option2d(option2dInitial),
                    ColorOption(colorOptionInitial),
                    BarDepth(barDepthInitial)
                {
                }
            };

             /** Plate option for 2D plot */

            struct  PlateOption2D
            {
                public: /** Whether to show outline */bool ShowOutline;
                public: /** Outline color. The acceptable range is 1-216 */int OutlineColor;
                public: /** Filling color. The acceptable range is 1-216 */int FillingColor;
                public: /** Point marker */NXOpen::CAE::Xyplot::PointMarker PointMarker;
                public: PlateOption2D() :
                    ShowOutline(),
                    OutlineColor(),
                    FillingColor(),
                    PointMarker((NXOpen::CAE::Xyplot::PointMarker)0)
                {
                }
                /** Constructor for the PlateOption2D struct. */ 
                public: PlateOption2D(bool showOutlineInitial /** Whether to show outline */, 
                        int outlineColorInitial /** Outline color. The acceptable range is 1-216 */, 
                        int fillingColorInitial /** Filling color. The acceptable range is 1-216 */, 
                        NXOpen::CAE::Xyplot::PointMarker pointMarkerInitial /** Point marker */) :
                    ShowOutline(showOutlineInitial),
                    OutlineColor(outlineColorInitial),
                    FillingColor(fillingColorInitial),
                    PointMarker(pointMarkerInitial)
                {
                }
            };

             /** Plate option for 3D plot */

            struct  PlateOption3D
            {
                public: /** 2D plate option */NXOpen::CAE::Xyplot::PlateOption2D Option2d;
                public: /** Filling color option */NXOpen::CAE::Xyplot::PlateColorOption ColorOption;
                public: /** Plate direction */NXOpen::CAE::Xyplot::Direction PlateDirection;
                public: PlateOption3D() :
                    Option2d(),
                    ColorOption((NXOpen::CAE::Xyplot::PlateColorOption)0),
                    PlateDirection((NXOpen::CAE::Xyplot::Direction)0)
                {
                }
                /** Constructor for the PlateOption3D struct. */ 
                public: PlateOption3D(const NXOpen::CAE::Xyplot::PlateOption2D &option2dInitial /** 2D plate option */, 
                        NXOpen::CAE::Xyplot::PlateColorOption colorOptionInitial /** Filling color option */, 
                        NXOpen::CAE::Xyplot::Direction plateDirectionInitial /** Plate direction */) :
                    Option2d(option2dInitial),
                    ColorOption(colorOptionInitial),
                    PlateDirection(plateDirectionInitial)
                {
                }
            };

             /** Surface option for 3D plot */

            struct  SurfaceOption3D
            {
                public: /** Whether to show outline */bool ShowOutline;
                public: /** Outline color. The acceptable range is 1-216 */int OutlineColor;
                public: /** Filling color. The acceptable range is 1-216 */int FillingColor;
                public: /** Filling color option */NXOpen::CAE::Xyplot::SurfaceColorOption ColorOption;
                public: /** Point marker */NXOpen::CAE::Xyplot::PointMarker PointMarker;
                public: SurfaceOption3D() :
                    ShowOutline(),
                    OutlineColor(),
                    FillingColor(),
                    ColorOption((NXOpen::CAE::Xyplot::SurfaceColorOption)0),
                    PointMarker((NXOpen::CAE::Xyplot::PointMarker)0)
                {
                }
                /** Constructor for the SurfaceOption3D struct. */ 
                public: SurfaceOption3D(bool showOutlineInitial /** Whether to show outline */, 
                        int outlineColorInitial /** Outline color. The acceptable range is 1-216 */, 
                        int fillingColorInitial /** Filling color. The acceptable range is 1-216 */, 
                        NXOpen::CAE::Xyplot::SurfaceColorOption colorOptionInitial /** Filling color option */, 
                        NXOpen::CAE::Xyplot::PointMarker pointMarkerInitial /** Point marker */) :
                    ShowOutline(showOutlineInitial),
                    OutlineColor(outlineColorInitial),
                    FillingColor(fillingColorInitial),
                    ColorOption(colorOptionInitial),
                    PointMarker(pointMarkerInitial)
                {
                }
            };

        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
