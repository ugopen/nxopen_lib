#ifndef NXOpen_GEOMETRICUTILITIES_CONICCROSSSECTION_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CONICCROSSSECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_ConicCrossSection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class ConicCrossSection;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    namespace GeometricUtilities
    {
        class _ConicCrossSectionBuilder;
        class ConicCrossSectionImpl;
        /** Represents a conic section data for face blend. 
            
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  ConicCrossSection : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This enum represents the offset options */
            public: enum OffsetMethod
            {
                OffsetMethodConstant/** Constant */,
                OffsetMethodLaw/** Control by law */
            };

            /** This enum represents the rho options */
            public: enum RhoMethod
            {
                RhoMethodConstant/** Constant */,
                RhoMethodLaw/** Control by law */,
                RhoMethodAutoEllipse/** Automatic Ellipse */
            };

            /** This enum represents the conic method for advanced symmetric conic */
            public: enum DefineMethod
            {
                DefineMethodBoundaryPlusCenter/** conic shape controlled by boundary and center values */,
                DefineMethodBoundaryPlusRho/** conic shape controlled by boundary and rho values */,
                DefineMethodCenterPlusRho/** conic shape controlled by center and rho values */
            };

            private: ConicCrossSectionImpl * m_coniccrosssection_impl;
            private: friend class  _ConicCrossSectionBuilder;
            protected: ConicCrossSection();
            public: ~ConicCrossSection();
            /**Returns  the first offset for the conic section with face blend
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FirstOffset
            (
            );
            /** Sets the first offset for the conic section with face blend.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFirstOffset
            (
                const NXString & offset /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the first offset for the conic section with face blend.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetFirstOffset
            (
                const char * offset /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the second offset for the conic section with face blend
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SecondOffset
            (
            );
            /** Sets the second offset for the conic section with face blend.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondOffset
            (
                const NXString & offset /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the second offset for the conic section with face blend.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetSecondOffset
            (
                const char * offset /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the first offset option for the conic section with face blend
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod FirstOffsetOption
            (
            );
            /**Sets  the first offset option for the conic section with face blend
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFirstOffsetOption
            (
                NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod method /** method */ 
            );
            /**Returns  the second offset option for the conic section with face blend
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod SecondOffsetOption
            (
            );
            /**Sets  the second offset option for the conic section with face blend
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondOffsetOption
            (
                NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod method /** method */ 
            );
            /**Returns  the rho expression for the conic section with face blend
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Rho
            (
            );
            /** Sets a rho expression for the conic section with face blend.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRho
            (
                const NXString & rho /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets a rho expression for the conic section with face blend.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetRho
            (
                const char * rho /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the rho option for the conic section with face blend
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ConicCrossSection::RhoMethod RhoOption
            (
            );
            /**Sets  the rho option for the conic section with face blend
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRhoOption
            (
                NXOpen::GeometricUtilities::ConicCrossSection::RhoMethod method /** method */ 
            );
            /**Returns  the First Offset Law builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * FirstLawControl
            (
            );
            /**Returns  the Second Offset Law builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * SecondLawControl
            (
            );
            /**Returns  the Rho Law builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * RhoLawControl
            (
            );
            /** Sets a constant radius for the first law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlConstantFirstOffset
            (
                const NXString & radius /** The value to be set */
            );
            /** Sets a constant radius for the first law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetLawControlConstantFirstOffset
            (
                const char * radius /** The value to be set */
            );
            /** Sets a start radius for the first law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlFirstOffsetStartRadius
            (
                const NXString & radius /** The value to be set */
            );
            /** Sets a start radius for the first law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetLawControlFirstOffsetStartRadius
            (
                const char * radius /** The value to be set */
            );
            /** Sets a end radius for the first law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlFirstOffsetEndRadius
            (
                const NXString & radius /** The value to be set */
            );
            /** Sets a end radius for the first law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetLawControlFirstOffsetEndRadius
            (
                const char * radius /** The value to be set */
            );
            /** Sets a constant radius for the second law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlConstantSecondOffset
            (
                const NXString & radius /** The value to be set */
            );
            /** Sets a constant radius for the second law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetLawControlConstantSecondOffset
            (
                const char * radius /** The value to be set */
            );
            /** Sets a start radius for the second law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlSecondOffsetStartRadius
            (
                const NXString & radius /** The value to be set */
            );
            /** Sets a start radius for the second law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetLawControlSecondOffsetStartRadius
            (
                const char * radius /** The value to be set */
            );
            /** Sets a end radius for the second law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlSecondOffsetEndRadius
            (
                const NXString & radius /** The value to be set */
            );
            /** Sets a end radius for the second law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetLawControlSecondOffsetEndRadius
            (
                const char * radius /** The value to be set */
            );
            /** Sets a constant radius for the rho law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlConstantRho
            (
                const NXString & radius /** The value to be set */
            );
            /** Sets a constant radius for the rho law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetLawControlConstantRho
            (
                const char * radius /** The value to be set */
            );
            /** Sets a start radius for the rho law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlRhoStartRadius
            (
                const NXString & radius /** The value to be set */
            );
            /** Sets a start radius for the rho law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetLawControlRhoStartRadius
            (
                const char * radius /** The value to be set */
            );
            /** Sets a end radius for the rho law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlRhoEndRadius
            (
                const NXString & radius /** The value to be set */
            );
            /** Sets a end radius for the rho law control of the conic section with face blend.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetLawControlRhoEndRadius
            (
                const char * radius /** The value to be set */
            );
            /**Returns  the conic method for the advanced symmetric conic section with face blend
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ConicCrossSection::DefineMethod ConicMethod
            (
            );
            /**Sets  the conic method for the advanced symmetric conic section with face blend
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetConicMethod
            (
                NXOpen::GeometricUtilities::ConicCrossSection::DefineMethod method /** method */ 
            );
            /**Returns  the flag to link multi-transition law types
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool TransitionLinkFlag
            (
            );
            /**Sets  the flag to link multi-transition law types
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTransitionLinkFlag
            (
                bool transitionLinkFlag /** transition link flag */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
