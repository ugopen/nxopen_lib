#ifndef NXOpen_BLOCKSTYLER_BLOCKDIALOG_HXX_INCLUDED
#define NXOpen_BLOCKSTYLER_BLOCKDIALOG_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BlockStyler_BlockDialog.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BlockStyler_BlockDialog.hxx>
#include <NXOpen/BlockStyler_CompositeBlock.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/Selection.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace BlockStyler
    {
        class BlockDialog;
    }
    namespace BlockStyler
    {
        class CompositeBlock;
    }
    namespace BlockStyler
    {
        class PropertyList;
    }
    namespace BlockStyler
    {
        class UIBlock;
    }
    namespace BlockStyler
    {
        class BlockDialogImpl;
        /** Represents a Dialog 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  BlockDialog : public TransientObject
        {
            /** Datatype containing options for showing the dialog */
            public: enum DialogMode
            {
                DialogModeCreate/** When the user presses Ok or Apply on the
                            dialog, the user's inputs are saved in dialog memory and the next time that the dialog
                            is shown in Create mode, the dialog is initialized using the user's previous
                            inputs.  */,
                DialogModeEdit/** The Apply button is not shown.  
                            The user's inputs are not saved in dialog memory and the dialog is not initialized 
                            with the user's previous inputs. */
            };

            public: /** Update callback
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<int, NXOpen::BlockStyler::UIBlock *> Update;
            public: /** Callback to enable OK and Apply buttons of the dialog. 
                    Return True or False to enable or disable the buttons respectively.
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<bool> EnableOKButton;
            public: /**Filter callback 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback2<int, NXOpen::BlockStyler::UIBlock *, NXOpen::TaggedObject *> Filter;
            public: /** Ok callback
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<int> Ok;
            public: /**Apply callback
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<int> Apply;
            public: /** Cancel callback 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<int> Cancel;
            public: /** Close callback 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<int> Close;
            public: /** Initialize callback 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<void> Initialize;
            public: /** Dialog Shown callback 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<void> DialogShown;
            public: /** @brief Focus notify callback. This is invoked when any selection block on the dialog receives focus. 

             
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback2<void, NXOpen::BlockStyler::UIBlock *, bool> FocusNotify;
            public: /** @brief Keyboard focus notify callback. This is invoked when any block having keyboard input such as Integer block receives focus. 

              
                  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback2<void, NXOpen::BlockStyler::UIBlock *, bool> KeyboardFocusNotify;
            private: BlockDialogImpl * m_blockdialog_impl;
            /// \cond NX_NO_DOC 
            public: explicit BlockDialog(void *ptr);
            /// \endcond 
            /** Adds Update callback handler to the dialog. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void AddUpdateHandler
            (
                const NXOpen::BlockStyler::BlockDialog::Update&  cb /** cb */ 
            );
            /** Adds enable-ok-button callback handler to the dialog. 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: void AddEnableOKButtonHandler
            (
                const NXOpen::BlockStyler::BlockDialog::EnableOKButton&  cb /** cb */ 
            );
            /** Adds Filter callback handler to the dialog. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void AddFilterHandler
            (
                const NXOpen::BlockStyler::BlockDialog::Filter&  cb /** cb */ 
            );
            /**Adds Ok callback handler to the dialog. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void AddOkHandler
            (
                const NXOpen::BlockStyler::BlockDialog::Ok&  okCb /** ok cb */ 
            );
            /**Adds Apply callback handler to the dialog. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void AddApplyHandler
            (
                const NXOpen::BlockStyler::BlockDialog::Apply&  applyCb /** apply cb */ 
            );
            /**Adds Cancel callback handler to the dialog.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void AddCancelHandler
            (
                const NXOpen::BlockStyler::BlockDialog::Cancel&  cancelCb /** cancel cb */ 
            );
            /**Adds Close callback handler to the dialog.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void AddCloseHandler
            (
                const NXOpen::BlockStyler::BlockDialog::Close&  closeCb /** close cb */ 
            );
            /** Adds Initialize callback handler to the dialog. The callback function is called while the dialog is being initialized.  The callback is called before applying any user inputs saved in dialog memory.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void AddInitializeHandler
            (
                const NXOpen::BlockStyler::BlockDialog::Initialize&  cb /** cb */ 
            );
            /** Adds Dialog Shown callback handler to the dialog. The callback function is called before the dialog is shown.  The callback can be used to overwrite 
                    changes that are made during dialog initialization when user inputs saved in dialog memory are applied to the dialog.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void AddDialogShownHandler
            (
                const NXOpen::BlockStyler::BlockDialog::DialogShown&  cb /** cb */ 
            );
            /** Shows the dialog in @link BlockStyler::BlockDialog::DialogModeCreate BlockStyler::BlockDialog::DialogModeCreate@endlink  mode @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Selection::Response Show
            (
            );
            /** Shows the dialog in @link BlockStyler::BlockDialog::DialogModeCreate BlockStyler::BlockDialog::DialogModeCreate@endlink  OR @link BlockStyler::BlockDialog::DialogModeEdit BlockStyler::BlockDialog::DialogModeEdit@endlink  mode based on input  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Selection::Response Show
            (
                NXOpen::BlockStyler::BlockDialog::DialogMode dialogMode /**Dialog mode as Create or Edit. @link BlockStyler::BlockDialog::DialogMode  BlockStyler::BlockDialog::DialogMode @endlink  */
            );
            /**Returns  a composite block that contains all the blocks in the dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::CompositeBlock * TopBlock
            (
            );
            /** Performs an Apply and restarts the dialog. This invokes apply callback on the dialog.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void PerformApply
            (
            );
            /** Frees the object from memory.  After this method is called,
                     it is illegal to use the object.  In .NET, this method is automatically
                     called when the object is deleted by the garbage collector. 
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~BlockDialog();
            /** Adds focus notify callback handler to the dialog. 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: void AddFocusNotifyHandler
            (
                const NXOpen::BlockStyler::BlockDialog::FocusNotify&  cb /** cb */ 
            );
            /** Adds keyboard focus notify callback handler to the dialog. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void AddKeyboardFocusNotifyHandler
            (
                const NXOpen::BlockStyler::BlockDialog::KeyboardFocusNotify&  cb /** cb */ 
            );
            /** Registers the reusable block with the dialog 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void RegisterUserDefinedUIBlock
            (
                NXOpen::BlockStyler::BlockDialog * blockDialog /** Dialog which contains the reusable block  */,
                const NXString & blockId /** "Block ID" of reusable block   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Registers the reusable block with the dialog 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void RegisterUserDefinedUIBlock
            (
                NXOpen::BlockStyler::BlockDialog * blockDialog /** Dialog which contains the reusable block  */,
                const char * blockId /** "Block ID" of reusable block   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the properties of a block  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BlockStyler::PropertyList * GetBlockProperties
            (
                const NXString & blockName /**BlockID of the block  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the properties of a block  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::BlockStyler::PropertyList * GetBlockProperties
            (
                const char * blockName /**BlockID of the block  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
