#ifndef NXOpen_TOOLING_FLOWDISPLAYBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_FLOWDISPLAYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_FlowDisplayBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Tooling_FlowDisplayBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class FlowDisplayBuilder;
    }
    class Builder;
    namespace Tooling
    {
        class _FlowDisplayBuilderBuilder;
        class FlowDisplayBuilderImpl;
        /** Represents the builder which is used to create flow analysis.  <br> To create a new instance of this class, use @link Tooling::MoldDesignCollection::CreateFlowDisplayBuilder  Tooling::MoldDesignCollection::CreateFlowDisplayBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AirTrapOption </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NumberIntervals </td> <td> 
         
        20 </td> </tr> 

        <tr><td> 
         
        NumberSubMeshes </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ResultsOption </td> <td> 
         
        MeltFrontTime </td> </tr> 

        <tr><td> 
         
        WeldLineOption </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  FlowDisplayBuilder : public Builder
        {
            /** The option of analysis results. */
            public: enum AnalysisResults
            {
                AnalysisResultsMeltFrontTime/** melt front time */ ,
                AnalysisResultsGateContribution/** gate contribution */ ,
                AnalysisResultsPressureDrop/** pressure drop */ ,
                AnalysisResultsMeltFrontTemperature/** melt front temperature */ ,
                AnalysisResultsMaxTemperature/** max temperature */ ,
                AnalysisResultsAverageTemperature/** average temperature */ ,
                AnalysisResultsFrozenLayerRatio/** frozen layer ratio */ ,
                AnalysisResultsMaxCoolingTime/** max cooling time */ 
            };

            private: FlowDisplayBuilderImpl * m_flowdisplaybuilder_impl;
            private: friend class  _FlowDisplayBuilderBuilder;
            protected: FlowDisplayBuilder();
            public: ~FlowDisplayBuilder();
            /**Returns  the folder in which flow analysis results can be found 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString FolderBrowser
            (
            );
            /**Sets  the folder in which flow analysis results can be found 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetFolderBrowser
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the folder in which flow analysis results can be found 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void SetFolderBrowser
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the analysis results option to display 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::FlowDisplayBuilder::AnalysisResults ResultsOption
            (
            );
            /**Sets  the analysis results option to display 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetResultsOption
            (
                NXOpen::Tooling::FlowDisplayBuilder::AnalysisResults resultsOption /** resultsoption */ 
            );
            /**Returns  the air trap option to be set 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool AirTrapOption
            (
            );
            /**Sets  the air trap option to be set 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetAirTrapOption
            (
                bool airTrapOption /** airtrapoption */ 
            );
            /**Returns  the weld line option to be set 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool WeldLineOption
            (
            );
            /**Sets  the weld line option to be set 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetWeldLineOption
            (
                bool weldLineOption /** weldlineoption */ 
            );
            /** Display color plots in all steps. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void DisplayDynamicColorPlots
            (
            );
            /**Returns  the number of sub-meshes to display 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int NumberSubMeshes
            (
            );
            /**Sets  the number of sub-meshes to display 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetNumberSubMeshes
            (
                int noSubMeshes /** nosubmeshes */ 
            );
            /**Returns  the interval number of the whole filling time. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int NumberIntervals
            (
            );
            /**Sets  the interval number of the whole filling time. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetNumberIntervals
            (
                int numIntervals /** numintervals */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
