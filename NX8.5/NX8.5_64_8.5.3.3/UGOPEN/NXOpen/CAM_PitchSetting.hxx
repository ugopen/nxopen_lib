#ifndef NXOpen_CAM_PITCHSETTING_HXX_INCLUDED
#define NXOpen_CAM_PITCHSETTING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_PitchSetting.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_PitchSetting.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class PitchSetting;
    }
    namespace CAM
    {
        class _PitchSettingBuilder;
        class PitchSettingImpl;
        /**
            Represents a @link CAM::PitchSetting CAM::PitchSetting@endlink 
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  PitchSetting : public TaggedObject
        {
            /** the pitch option types*/
            public: enum OptionTypes
            {
                OptionTypesPitch/** Pitch */,
                OptionTypesLead/** Lead */,
                OptionTypesThreadsPerUnit/** Threads per mm or inch */
            };

            /** the pitch variance types*/
            public: enum VarianceTypes
            {
                VarianceTypesConstant/** Constant */,
                VarianceTypesStartAndEnd/** Start and End */,
                VarianceTypesStartAndIncrement/** Start and Increment */
            };

            /** the output unit types*/
            public: enum OutputUnitTypes
            {
                OutputUnitTypesSameAsInput/** Same as Input */,
                OutputUnitTypesPitch/** Pitch */,
                OutputUnitTypesLead/** Lead */,
                OutputUnitTypesThreadsPerUnit/** Threads per mm */
            };

            private: PitchSettingImpl * m_pitchsetting_impl;
            private: friend class  _PitchSettingBuilder;
            protected: PitchSetting();
            public: ~PitchSetting();
            /**Returns  the pitch option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PitchSetting::OptionTypes Option
            (
            );
            /**Sets  the pitch option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOption
            (
                NXOpen::CAM::PitchSetting::OptionTypes pitchOption /** the pitch option */
            );
            /**Returns  the pitch variance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PitchSetting::VarianceTypes Variance
            (
            );
            /**Sets  the pitch variance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVariance
            (
                NXOpen::CAM::PitchSetting::VarianceTypes pitchVariance /** the pitch variance */
            );
            /**Returns  the thread per mm 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ThreadPerUnit
            (
            );
            /**Sets  the thread per mm 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetThreadPerUnit
            (
                double thread /** the thread per mm or inch*/
            );
            /**Returns  the start 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double Start
            (
            );
            /**Sets  the start 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStart
            (
                double start /** the start */
            );
            /**Returns  the end 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double End
            (
            );
            /**Sets  the end 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEnd
            (
                double end /** the end */
            );
            /**Returns  the increment 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double Increment
            (
            );
            /**Sets  the increment 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIncrement
            (
                double increment /** the increment */
            );
            /**Returns  the distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double Distance
            (
            );
            /**Sets  the distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDistance
            (
                double distance /** the distance */
            );
            /**Returns  the output unit 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PitchSetting::OutputUnitTypes OutputUnit
            (
            );
            /**Sets  the output unit 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOutputUnit
            (
                NXOpen::CAM::PitchSetting::OutputUnitTypes outputUnit /** the output unit */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
