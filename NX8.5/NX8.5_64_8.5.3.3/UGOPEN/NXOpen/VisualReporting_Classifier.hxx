#ifndef NXOpen_VISUALREPORTING_CLASSIFIER_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_CLASSIFIER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_Classifier.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_visualreporting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace VisualReporting
    {
        class Classifier;
    }
    class NXObject;
    namespace VisualReporting
    {
        class _ClassifierBuilder;
        class ClassifierImpl;
        /** A Classifier within a @link VisualReporting::Rule VisualReporting::Rule@endlink .
            
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_VISUALREPORTINGEXPORT  Classifier : public NXObject
        {
            /** Represents the possible type options.
                         for a @link VisualReporting::Classifier VisualReporting::Classifier@endlink .
                    */
            public: enum TypeOption
            {
                TypeOptionSimple/** Simple classifier type */,
                TypeOptionValue/** Value classifier type */,
                TypeOptionRange/** Range classifier type */
            };

            /** Represents the possible grouping method options.
                        for a @link VisualReporting::Classifier VisualReporting::Classifier@endlink .
                    */
            public: enum GroupingMethodOption
            {
                GroupingMethodOptionManual/** Grouping is manual */,
                GroupingMethodOptionAutomatic/** Grouping is automatic */,
                GroupingMethodOptionSemiAutomatic/** Grouping is automatic but some @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink s have been modified */
            };

            /** Represents the possible range method options.
                        for a @link VisualReporting::Classifier VisualReporting::Classifier@endlink .
                    */
            public: enum RangeMethodOption
            {
                RangeMethodOptionNumber/** A numeric range will be used */,
                RangeMethodOptionPercentage/** A percentage range will be used */
            };

            /** Represents the possible date grouping method options.
                        for a @link VisualReporting::Classifier VisualReporting::Classifier@endlink .
                    */
            public: enum DateGroupMethodOption
            {
                DateGroupMethodOptionDay/** The date grouping by day will be used */,
                DateGroupMethodOptionWeek/** The date grouping by week will be used */,
                DateGroupMethodOptionMonth/** The date grouping by month will be used */,
                DateGroupMethodOptionYear/** The date grouping by year will be used */
            };

            private: ClassifierImpl * m_classifier_impl;
            private: friend class  _ClassifierBuilder;
            protected: Classifier();
            public: ~Classifier();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
