#ifndef NXOpen_VALIDATE_VALIDATOROPTIONS_HXX_INCLUDED
#define NXOpen_VALIDATE_VALIDATOROPTIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_ValidatorOptions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class ValidatorOptions;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Validate
    {
        class _ValidatorOptionsBuilder;
        class ValidatorOptionsImpl;
        /** Contains information about run options of check-mate checking process.
            
            
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  ValidatorOptions : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** The log mode type. */
            public: enum LogModeTypes
            {
                LogModeTypesLogPerSession/** Generate log per session */,
                LogModeTypesLogPerPart/** Generate log per part */
            };

            /** The save mode type. */
            public: enum SaveModeTypes
            {
                SaveModeTypesDoNotSave/** Do not perform save. */,
                SaveModeTypesSaveIfPassed/** Perform save only if the checking is passed. */,
                SaveModeTypesAlwaysSave/** Always perform save */
            };

            /** The results display mode type. */
            public: enum ResultsDisplayModeTypes
            {
                ResultsDisplayModeTypesAlwaysDisplay/** Always display results. */,
                ResultsDisplayModeTypesDisplayIfNotPass/** Display results if the checking is not passed. */,
                ResultsDisplayModeTypesDoNotDisplay/** Do not display results */
            };

            private: ValidatorOptionsImpl * m_validatoroptions_impl;
            private: friend class  _ValidatorOptionsBuilder;
            protected: ValidatorOptions();
            public: ~ValidatorOptions();
            /**Returns  the configuration of stopping checking process on error status. If True, stop checking when there is checker returned error status. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool StopOnError
            (
            );
            /**Sets  the configuration of stopping checking process on error status. If True, stop checking when there is checker returned error status. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetStopOnError
            (
                bool stopOnError /** checksum of parameter */
            );
            /**Returns  the configuration of stopping checking on warning status. If True, stop checking when there is checker returned warning status. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool StopOnWarning
            (
            );
            /**Sets  the configuration of stopping checking on warning status. If True, stop checking when there is checker returned warning status. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetStopOnWarning
            (
                bool stopOnWarning /** stop on warning */ 
            );
            /**Returns  the configuration of generating log file after checking. If True, log file will be generated. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool GenerateLogFile
            (
            );
            /**Sets  the configuration of generating log file after checking. If True, log file will be generated. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetGenerateLogFile
            (
                bool generateLogFile /** generate log file */ 
            );
            /**Returns  the configuration of log file directory where the log file will be saved. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString LogFileDirectory
            (
            );
            /**Sets  the configuration of log file directory where the log file will be saved. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLogFileDirectory
            (
                const NXString & logFileDirectory /** logfiledirectory */ 
            );
            /**Sets  the configuration of log file directory where the log file will be saved. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetLogFileDirectory
            (
                const char * logFileDirectory /** logfiledirectory */ 
            );
            /**Returns  the configuration of saving check results into part file. If True, results will be saved in part file after checking finished. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool SaveResultInPart
            (
            );
            /**Sets  the configuration of saving check results into part file. If True, results will be saved in part file after checking finished. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSaveResultInPart
            (
                bool saveResultInPart /** checksum of parameter */
            );
            /**Returns  the configuration of saving check results into Teamcenter. If true, results will be saved into Teamcenter.
                     This parameter is for NX Manager mode only 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::ValidatorOptions::SaveModeTypes SaveResultInTeamcenter
            (
            );
            /**Sets  the configuration of saving check results into Teamcenter. If true, results will be saved into Teamcenter.
                     This parameter is for NX Manager mode only 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSaveResultInTeamcenter
            (
                NXOpen::Validate::ValidatorOptions::SaveModeTypes saveResultInTeamcenter /** save result in teamcenter */ 
            );
            /**Returns  the configuration of skip checking based on result up-to-date status. If True, checking will be skipped if the results are PASS and up-to-date. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool SkipChecking
            (
            );
            /**Sets  the configuration of skip checking based on result up-to-date status. If True, checking will be skipped if the results are PASS and up-to-date. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSkipChecking
            (
                bool skipChecking /** skipchecking */ 
            );
            /**Returns  the configuration of saving part file after checking finished. If True, part file will be saved. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::ValidatorOptions::SaveModeTypes SavePartFile
            (
            );
            /**Sets  the configuration of saving part file after checking finished. If True, part file will be saved. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSavePartFile
            (
                NXOpen::Validate::ValidatorOptions::SaveModeTypes savePartFile /** savepartfile */ 
            );
            /**Returns  the configuration of log file mode how to generate the log files. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::ValidatorOptions::LogModeTypes LogFileMode
            (
            );
            /**Sets  the configuration of log file mode how to generate the log files. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLogFileMode
            (
                NXOpen::Validate::ValidatorOptions::LogModeTypes logFileMode /** logfilemode */ 
            );
            /**Returns  the configuration of excluding read-only parts. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ExcludeReadonlyParts
            (
            );
            /**Sets  the configuration of excluding read-only parts. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetExcludeReadonlyParts
            (
                bool excludeReadonlyParts /** checksum of parameter */
            );
            /**Returns  the configuration of excluding parts not owned by the user. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ExcludeNonOwnerParts
            (
            );
            /**Sets  the configuration of excluding parts not owned by the user. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetExcludeNonOwnerParts
            (
                bool excludeNonOwnerParts /** excludenonownerparts */ 
            );
            /**Returns  the configuration of generating check flag if checking results are PASS 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool GenerateCheckFlag
            (
            );
            /**Sets  the configuration of generating check flag if checking results are PASS 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetGenerateCheckFlag
            (
                bool generateCheckFlag /** generatecheckflag */ 
            );
            /**Returns  the configuration of treating warning status as fail status. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool TreatWarningAsFail
            (
            );
            /**Sets  the configuration of treating warning status as fail status. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetTreatWarningAsFail
            (
                bool treatWarningAsFail /** treatwarningasfail */ 
            );
            /**Returns  the configuration of skipping checking without loading parts 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool SkipCheckingDontLoadPart
            (
            );
            /**Sets  the configuration of skipping checking without loading parts 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSkipCheckingDontLoadPart
            (
                bool skipCheckingDontLoadPart /** skipcheckingdontloadpart */ 
            );
            /**Returns  the configuration of auto display results 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::ValidatorOptions::ResultsDisplayModeTypes AutoDisplayResults
            (
            );
            /**Sets  the configuration of auto display results 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAutoDisplayResults
            (
                NXOpen::Validate::ValidatorOptions::ResultsDisplayModeTypes displayResults /** displayresults */ 
            );
            /**Returns  the configuration of results auto update when work part change 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ResultsAutoUpdate
            (
            );
            /**Sets  the configuration of results auto update when work part change 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetResultsAutoUpdate
            (
                bool autoUpdate /** autoupdate */ 
            );
            /**Returns   the configuration of skip checking based on result overriden state. If True, checking will be skipped if the results are overridden. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool SkipOverriddenResultOption
            (
            );
            /**Sets   the configuration of skip checking based on result overriden state. If True, checking will be skipped if the results are overridden. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSkipOverriddenResultOption
            (
                bool skipOverriddenResult /** skipoverriddenresult */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
