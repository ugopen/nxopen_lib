#ifndef NXOpen_LISTCREATOR_HXX_INCLUDED
#define NXOpen_LISTCREATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ListCreator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ListCreator.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ListCreator;
    class Builder;
    class _ListCreatorBuilder;
    class ListCreatorImpl;
    /**
        Represents a @link ListCreator ListCreator@endlink  to be used when exporting the JT Data
        This class is created using @link PvtransManager PvtransManager@endlink .
        NULL object will be returned from Commit()
        <br> To create a new instance of this class, use @link JtCreator::NewLevel  JtCreator::NewLevel @endlink  <br> 
     <br>  Created in NX8.5.0.  <br>  
    */
    class NXOPENCPPEXPORT  ListCreator : public Builder
    {
        /** Tessellation Option */
        public: enum TessellationOption
        {
            TessellationOptionNx/**  nx level */,
            TessellationOptionDefined/**  defined level */
        };

        /** resolution Type */
        public: enum ResolutionType
        {
            ResolutionTypeCoarse/** Coarse */,
            ResolutionTypeStandard/** Standard */,
            ResolutionTypeFine/** Fine */,
            ResolutionTypeExtraFine/** ExtraFine */,
            ResolutionTypeSuperFine/** SuperFine */,
            ResolutionTypeUltraFine/** UltraFine */,
            ResolutionTypeUserDefined/** UserDefined */
        };

        private: ListCreatorImpl * m_listcreator_impl;
        private: friend class  _ListCreatorBuilder;
        protected: ListCreator();
        public: ~ListCreator();
        /**Returns  the m_tessOption * - Specifies the type for Level of Details, whether Defined Level or Use NX Resolution 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ListCreator::TessellationOption TessOption
        (
        );
        /**Sets  the m_tessOption * - Specifies the type for Level of Details, whether Defined Level or Use NX Resolution 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetTessOption
        (
            NXOpen::ListCreator::TessellationOption tessOption /** tessoption */ 
        );
        /**Returns  the m_label * - Specifies the label for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString Label
        (
        );
        /**Sets  the m_label * - Specifies the label for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetLabel
        (
            const NXString & label /** label */ 
        );
        /**Sets  the m_label * - Specifies the label for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetLabel
        (
            const char * label /** label */ 
        );
        /**Returns  the m_chordal * - Specifies the chordal tolerance for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: double Chordal
        (
        );
        /**Sets  the m_chordal * - Specifies the chordal tolerance for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetChordal
        (
            double chordal /** chordal */ 
        );
        /**Returns  the m_angular * - Specifies the angular tolerance for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: double Angular
        (
        );
        /**Sets  the m_angular * - Specifies the angular tolerance for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetAngular
        (
            double angular /** angular */ 
        );
        /**Returns  the m_length * - Specifies the length tolerance for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: double Length
        (
        );
        /**Sets  the m_length * - Specifies the length tolerance for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetLength
        (
            double length /** length */ 
        );
        /**Returns  the m_simplify * - Specifies the simplification tolerance for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: double Simplify
        (
        );
        /**Sets  the m_simplify * - Specifies the simplification tolerance for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetSimplify
        (
            double simplify /** simplify */ 
        );
        /**Returns  the m_featureSuppression * - Specifies the feature supression for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: double FeatureSuppression
        (
        );
        /**Sets  the m_featureSuppression * - Specifies the feature supression for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetFeatureSuppression
        (
            double suppression /** suppression */ 
        );
        /**Returns  the m_advCompression * - Specifies the advanced compression for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: double AdvCompression
        (
        );
        /**Sets  the m_advCompression * - Specifies the advanced compression for Defined Level of Detail 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetAdvCompression
        (
            double compression /** compression */ 
        );
        /**Returns  the m_resolution * - Specifies the resolution type for Level of Detail using NX resolution 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ListCreator::ResolutionType Resolution
        (
        );
        /**Sets  the m_resolution * - Specifies the resolution type for Level of Detail using NX resolution 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetResolution
        (
            NXOpen::ListCreator::ResolutionType resolution /** resolution */ 
        );
        /**Returns  the m_nxlabel * - Specifies the label for Level of Detail using NX resolution 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString NxLabel
        (
        );
        /**Sets  the m_nxlabel * - Specifies the label for Level of Detail using NX resolution 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetNxLabel
        (
            const NXString & label /** label */ 
        );
        /**Sets  the m_nxlabel * - Specifies the label for Level of Detail using NX resolution 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetNxLabel
        (
            const char * label /** label */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
