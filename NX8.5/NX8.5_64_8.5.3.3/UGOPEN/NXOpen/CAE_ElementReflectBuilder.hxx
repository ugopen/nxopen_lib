#ifndef NXOpen_CAE_ELEMENTREFLECTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_ELEMENTREFLECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ElementReflectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ElementReflectBuilder.hxx>
#include <NXOpen/CAE_ElementTypeBuilder.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ElementReflectBuilder;
    }
    class Builder;
    namespace CAE
    {
        class ElementTypeBuilder;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class Plane;
    namespace CAE
    {
        class _ElementReflectBuilderBuilder;
        class ElementReflectBuilderImpl;
        /**
            Represents a @link CAE::ElementReflectBuilder CAE::ElementReflectBuilder@endlink 
             <br> To create a new instance of this class, use @link CAE::NodeElementManager::CreateElementReflectBuilder  CAE::NodeElementManager::CreateElementReflectBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ElementReflectBuilder : public Builder
        {
            /** Dimension of element to be reflected*/
            public: enum ElemDimType
            {
                ElemDimTypeAny/** any element*/,
                ElemDimTypeBeam/** only beam*/,
                ElemDimTypeShell/** only shell*/,
                ElemDimTypeSolid/** only solid*/
            };

            /**  Option to create new mesh or add to existing mesh */
            public: enum NewMeshType
            {
                NewMeshTypeCreate/** create new mesh*/,
                NewMeshTypeExisting/** add to existing mesh*/
            };

            /**  Option to use label/increment or offset */
            public: enum LabelType
            {
                LabelTypeLabel/** input label by start number/increment*/,
                LabelTypeOffset/** by offset*/
            };

            private: ElementReflectBuilderImpl * m_elementreflectbuilder_impl;
            private: friend class  _ElementReflectBuilderBuilder;
            protected: ElementReflectBuilder();
            public: ~ElementReflectBuilder();
            /**Returns  the element type builder.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ElementTypeBuilder * ElementType
            (
            );
            /**Returns  the selected elements to be reflected 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * Elements
            (
            );
            /**Returns  the plane of reflection 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the plane of reflection 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the element dimension option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementReflectBuilder::ElemDimType ElementDimensionOption
            (
            );
            /**Sets  the element dimension option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementDimensionOption
            (
                NXOpen::CAE::ElementReflectBuilder::ElemDimType elementDimensionOption /** elementdimensionoption */ 
            );
            /**Returns  the element neutral name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NeutralName
            (
            );
            /**Sets  the element neutral name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNeutralName
            (
                const NXString & neutralName /** neutralname */ 
            );
            /**Sets  the element neutral name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetNeutralName
            (
                const char * neutralName /** neutralname */ 
            );
            /**Returns  the mesh collector name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CollectorName
            (
            );
            /**Sets  the mesh collector name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCollectorName
            (
                const NXString & collectorName /** collectorname */ 
            );
            /**Sets  the mesh collector name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetCollectorName
            (
                const char * collectorName /** collectorname */ 
            );
            /**Returns  the new mesh option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementReflectBuilder::NewMeshType NewMeshOption
            (
            );
            /**Sets  the new mesh option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNewMeshOption
            (
                NXOpen::CAE::ElementReflectBuilder::NewMeshType newMeshOption /** newmeshoption */ 
            );
            /**Returns  the mesh name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MeshName
            (
            );
            /**Sets  the mesh name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMeshName
            (
                const NXString & meshName /** meshname */ 
            );
            /**Sets  the mesh name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetMeshName
            (
                const char * meshName /** meshname */ 
            );
            /**Returns  the label option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementReflectBuilder::LabelType LabelOption
            (
            );
            /**Sets  the label option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabelOption
            (
                NXOpen::CAE::ElementReflectBuilder::LabelType labelOption /** labeloption */ 
            );
            /**Returns  the label 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Label
            (
            );
            /**Sets  the label 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabel
            (
                int label /** label */ 
            );
            /**Returns  the increment 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Increment
            (
            );
            /**Sets  the increment 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetIncrement
            (
                int increment /** increment */ 
            );
            /**Returns  the offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Offset
            (
            );
            /**Sets  the offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetOffset
            (
                int offset /** offset */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
