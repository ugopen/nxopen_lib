#ifndef NXOpen_DISPLAY_LIGHTBUILDER_HXX_INCLUDED
#define NXOpen_DISPLAY_LIGHTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_LightBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Display_LightBuilder.hxx>
#include <NXOpen/Display_LightTypes.hxx>
#include <NXOpen/libnxopencpp_display_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Display
    {
        class LightBuilder;
    }
    class Builder;
    class Point;
    namespace Display
    {
        class _LightBuilderBuilder;
        class LightBuilderImpl;
        /**
            Represents a @link Display::LightBuilder Display::LightBuilder@endlink 
             <br> This class is restricted to being called from a program running during an 
            Interactive NX session.  If run from a non-interactive session it will 
            return NULL. <br> 
             <br> To create a new instance of this class, use @link ViewCollection::CreateLightBuilder  ViewCollection::CreateLightBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_DISPLAYEXPORT  LightBuilder : public Builder
        {
            /** shadow types */
            public: enum ShadowType
            {
                ShadowTypeNone/** No shadows will be produced. */,
                ShadowTypeSoftEdged/** Soft-edged,approximated shadows will be generated using a shadow
                                                                                       mapping algorithm. */,
                ShadowTypeHardEdged/** Hard-edged, precise shadows will be generated using a ray-tracing
                                                                                       algorithm. */,
                ShadowTypeTranslucentHard/** Hard-edged, precise shadows will be generated using a ray-tracing
                                                                                       algorithm.  Shadows from translucent objects will also be generated
                                                                                       and their color will be determined by the transparent object's
                                                                                       color. */
            };

            /** light_mode */
            public: enum LightMode
            {
                LightModeFixedToObserver/** fixed to observer */ ,
                LightModeFixedToThePart/** fixed to the part */ 
            };

            private: LightBuilderImpl * m_lightbuilder_impl;
            private: friend class  _LightBuilderBuilder;
            protected: LightBuilder();
            public: ~LightBuilder();
            /**Returns  the light type for a particular light 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LightType LightType
            (
            );
            /**Sets  the light type for a particular light 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLightType
            (
                NXOpen::LightType lightType /** lighttype */ 
            );
            /**Returns  the brightness intensity for a given light 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Intensity
            (
            );
            /**Sets  the brightness intensity for a given light 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIntensity
            (
                double intensity /** intensity */ 
            );
            /**Returns  the use_with_ibl flag for a given light 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseWithIbl
            (
            );
            /**Sets  the use_with_ibl flag for a given light 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseWithIbl
            (
                bool useWithIBL /** usewithibl */ 
            );
            /**Returns  the source position - only applicable to spot and point light types 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * SourcePosition
            (
            );
            /**Sets  the source position - only applicable to spot and point light types 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSourcePosition
            (
                NXOpen::Point * sourcePosition /** sourceposition */ 
            );
            /**Returns  the destination position - only applicable to spot light types 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * DestinationPosition
            (
            );
            /**Sets  the destination position - only applicable to spot light types 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDestinationPosition
            (
                NXOpen::Point * destinationPosition /** destinationposition */ 
            );
            /**Returns  the cone angle - only applicable to spot light types 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double ConeAngle
            (
            );
            /**Sets  the cone angle - only applicable to spot light types 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetConeAngle
            (
                double coneAngle /** coneangle */ 
            );
            /**Returns  the light shadow type - not applicable to ambient or eye light types 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::LightBuilder::ShadowType LightShadowType
            (
            );
            /**Sets  the light shadow type - not applicable to ambient or eye light types 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLightShadowType
            (
                NXOpen::Display::LightBuilder::ShadowType lightShadowType /** lightshadowtype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
