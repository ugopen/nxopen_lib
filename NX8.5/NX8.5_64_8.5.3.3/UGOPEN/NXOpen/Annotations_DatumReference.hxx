#ifndef NXOpen_ANNOTATIONS_DATUMREFERENCE_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DATUMREFERENCE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DatumReference.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Gdts.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class DatumReference;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class DatumReferenceImpl;
        /** Represents a datum reference 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  DatumReference : public TransientObject
        {
            private: DatumReferenceImpl * m_datumreference_impl;
            /// \cond NX_NO_DOC 
            public: explicit DatumReference(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~DatumReference();
            /**Returns  the datum label 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DatumLabel
            (
            );
            /**Sets  the datum label 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDatumLabel
            (
                const NXString & label /** New datum label */
            );
            /**Sets  the datum label 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void SetDatumLabel
            (
                const char * label /** New datum label */
            );
            /** Returns the material condition modifiers  @return  List of modifiers 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::MaterialConditionModifier> GetMaterialConditionModifiers
            (
            );
            /** Sets the material condition modifiers 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaterialConditionModifiers
            (
                const std::vector<NXOpen::Annotations::MaterialConditionModifier> & modifiers /** List of modifiers */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
