#ifndef NXOpen_GEOMETRICUTILITIES_ALIGNMENTMETHODBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_ALIGNMENTMETHODBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_AlignmentMethodBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_AlignmentMethodBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class AlignmentMethodBuilder;
    }
    class Axis;
    class Direction;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    class Section;
    namespace GeometricUtilities
    {
        class _AlignmentMethodBuilderBuilder;
        class AlignmentMethodBuilderImpl;
        /**
            Represents a @link GeometricUtilities::AlignmentMethodBuilder GeometricUtilities::AlignmentMethodBuilder@endlink 
            
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  AlignmentMethodBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Alignment types supported */
            public: enum Type
            {
                TypeParameter/** parameter */ ,
                TypeArcLength/** arc length */ ,
                TypePoints/** points */ ,
                TypeDistance/** distance */ ,
                TypeAngle/** angle */ ,
                TypeSpineCurve/** spine curve */ ,
                TypeSplinePoints/** spline points */ ,
                TypeSegments/** segments */ 
            };

            private: AlignmentMethodBuilderImpl * m_alignmentmethodbuilder_impl;
            private: friend class  _AlignmentMethodBuilderBuilder;
            protected: AlignmentMethodBuilder();
            public: ~AlignmentMethodBuilder();
            /** Set the sections.  Does not compute default alignment 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSections
            (
                const std::vector<NXOpen::Section *> & sections /** Array of sections */
            );
            /** Set the sections.  Does not compute default alignment  @return  The generated onPathDim
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * CreateOnPathDimBuilder
            (
                NXOpen::Section * sec /** The section on which to create the builder */,
                const NXOpen::Point3d & pnt /** The point on the section */
            );
            /** Unload sections held by the builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UnloadSections
            (
            );
            /** Add a section at the given index among existing sections.  Computes points for other sections 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void AddSection
            (
                int sectionIndex /** Where to insert.  New section will have this index */,
                NXOpen::Section * sec /** The New section */
            );
            /** Find and delete the section 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveSection
            (
                NXOpen::Section * sec /** Existing section within the Alignment*/
            );
            /** Remove section at given index 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveSectionAtIndex
            (
                int secIndex /** The index of the section to remove */
            );
            /** Update section at given index 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UpdateSectionAtIndex
            (
                int secIndex /** The index of the section to remove */
            );
            /** Calculate default alignment points on existing sections.  Pre-existing alignment points destroyed 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ComputeDefaultPoints
            (
            );
            /** Get all of the alignment points, returns as a single dimension array  @return  Gets all the points, numPoints is total number of points, not points per section 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::GeometricUtilities::OnPathDimensionBuilder *> GetAllPoints
            (
                int* numSection /** Number of sections returned*/
            );
            /**Returns  the number of section in the alignment point block 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: int NumberOfSections
            (
            );
            /**Returns  the number of alignment points in each section. All the sections always have same number of alignment points  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: int NumberOfPointsPerSection
            (
            );
            /** Gets an alignment point for a section  @return  
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * GetPoint
            (
                int sectionIndex /** Section on which to query the alignment point */,
                int pointIndex /** Alignment point index */
            );
            /** Set the Alignment Points when sections have been set up.
                        The incoming points are organized section by section.  The points
                        parent section match the pre-existing sections held by this object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAlignPoints
            (
                const std::vector<NXOpen::GeometricUtilities::OnPathDimensionBuilder *> & alignPoints /**  Sets the points on the section, numPoints is total number of points for all sections*/
            );
            /** Remove all alignment points.   Keeps the sections 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveAllPoints
            (
            );
            /** Insert a given point, and create corresponding points on other sections.  The points on other sections
                        are computed based on existing alignment points  @return  Index of the newly added point on each section 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddPoint
            (
                NXOpen::GeometricUtilities::OnPathDimensionBuilder * alignPoint /** Pt to insert*/
            );
            /** Remove given point, also remove corresponding points on other sections 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemovePoint
            (
                NXOpen::GeometricUtilities::OnPathDimensionBuilder * alignPoint /** Pt do delete */
            );
            /**Returns  the alignment type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AlignmentMethodBuilder::Type AlignType
            (
            );
            /**Sets  the alignment type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAlignType
            (
                NXOpen::GeometricUtilities::AlignmentMethodBuilder::Type alignType /** aligntype */ 
            );
            /**Returns  the alignment vector 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * AlignVector
            (
            );
            /**Sets  the alignment vector 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAlignVector
            (
                NXOpen::Direction * alignVector /** alignvector */ 
            );
            /**Returns  the alignment axis 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * AlignAxis
            (
            );
            /**Sets  the alignment axis 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAlignAxis
            (
                NXOpen::Axis * alignAxis /** alignaxis */ 
            );
            /**Returns  the align curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * AlignCurve
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
