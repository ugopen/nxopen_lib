#ifndef NXOpen_FEATURES_VISIONPLANEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VISIONPLANEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VisionPlaneBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_VisionPlaneBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class VisionPlaneBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeature;
    }
    class Point;
    namespace Features
    {
        class _VisionPlaneBuilderBuilder;
        class VisionPlaneBuilderImpl;
        /**
            Represents a @link Features::VisionPlane Features::VisionPlane@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateVisionPlaneBuilder  Features::FeatureCollection::CreateVisionPlaneBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AssoToggle </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        BaseDim.Value </td> <td> 
         
        2000 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        DriverPlane.Value </td> <td> 
         
        4 </td> </tr> 

        <tr><td> 
         
        EyeType </td> <td> 
         
        EyeFeature </td> </tr> 

        <tr><td> 
         
        FrontDim.Value </td> <td> 
         
        1000 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        FrontPlane.Value </td> <td> 
         
        4 </td> </tr> 

        <tr><td> 
         
        LowerPlane </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        MidPlane.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        MiddlePlane </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PassengerPlane.Value </td> <td> 
         
        4 </td> </tr> 

        <tr><td> 
         
        UpperPlane </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        VisionType </td> <td> 
         
        Standard </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  VisionPlaneBuilder : public Features::FeatureBuilder
        {
            /** eye definition type */
            public: enum EnumEyeType
            {
                EnumEyeTypeEyeFeature/** eye feature */,
                EnumEyeTypeV1Point/** v1 point */,
                EnumEyeTypeV2Point/** v2 point */
            };

            /** vision angle type */
            public: enum CustomVisionAngle
            {
                CustomVisionAngleStandard/** standard */,
                CustomVisionAngleCustom/** customized */
            };

            private: VisionPlaneBuilderImpl * m_visionplanebuilder_impl;
            private: friend class  _VisionPlaneBuilderBuilder;
            protected: VisionPlaneBuilder();
            public: ~VisionPlaneBuilder();
            /**Returns  the eye type to determine which type of v points to be used 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VisionPlaneBuilder::EnumEyeType EyeType
            (
            );
            /**Sets  the eye type to determine which type of v points to be used 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetEyeType
            (
                NXOpen::Features::VisionPlaneBuilder::EnumEyeType eyeType /** eyetype */ 
            );
            /**Returns  the eye feature; select eec feature when eye type specified 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SelectFeature * EyeFeature
            (
            );
            /**Returns  the point v1; select one point when eye type specified 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PointV1
            (
            );
            /**Sets  the point v1; select one point when eye type specified 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetPointV1
            (
                NXOpen::Point * pointV1 /** pointv1 */ 
            );
            /**Returns  the point v2; select one point when eye type specified 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PointV2
            (
            );
            /**Sets  the point v2; select one point when eye type specified 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetPointV2
            (
                NXOpen::Point * pointV2 /** pointv2 */ 
            );
            /**Returns  the upper plane; toggle on to create upper plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool UpperPlane
            (
            );
            /**Sets  the upper plane; toggle on to create upper plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetUpperPlane
            (
                bool upperPlane /** upperplane */ 
            );
            /**Returns  the middle plane; toggle on to create middle plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool MiddlePlane
            (
            );
            /**Sets  the middle plane; toggle on to create middle plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetMiddlePlane
            (
                bool middlePlane /** middleplane */ 
            );
            /**Returns  the lower plane; toggle on to create lower plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool LowerPlane
            (
            );
            /**Sets  the lower plane; toggle on to create lower plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetLowerPlane
            (
                bool lowerPlane /** lowerplane */ 
            );
            /**Returns  the base dim; dimension from left to right 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BaseDim
            (
            );
            /**Returns  the front dim; dimension here to front 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FrontDim
            (
            );
            /**Returns  the vision type; standard or customer defined 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VisionPlaneBuilder::CustomVisionAngle VisionType
            (
            );
            /**Sets  the vision type; standard or customer defined 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetVisionType
            (
                NXOpen::Features::VisionPlaneBuilder::CustomVisionAngle visionType /** visiontype */ 
            );
            /**Returns  the front plane inclined angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FrontPlane
            (
            );
            /**Returns  the driver side plane inclined angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DriverPlane
            (
            );
            /**Returns  the passenger side plane inclined angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PassengerPlane
            (
            );
            /**Returns  the middle plane inclined angle; means front side,passenger side and driver side are the same 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MidPlane
            (
            );
            /**Returns  the associative toggle; toggle on to create feature 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssoToggle
            (
            );
            /**Sets  the associative toggle; toggle on to create feature 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAssoToggle
            (
                bool assoToggle /** assotoggle */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
