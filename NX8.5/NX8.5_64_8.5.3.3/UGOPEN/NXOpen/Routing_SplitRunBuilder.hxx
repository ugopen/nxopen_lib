#ifndef NXOpen_ROUTING_SPLITRUNBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_SPLITRUNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_SplitRunBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/Routing_SplitRunBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class SplitRunBuilder;
    }
    class Builder;
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace Routing
    {
        class SelectRun;
    }
    namespace Routing
    {
        class _SplitRunBuilderBuilder;
        class SplitRunBuilderImpl;
        /** Builder Class for Split Run Object  <br> To create a new instance of this class, use @link Routing::RouteManager::SplitRunBuilder  Routing::RouteManager::SplitRunBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        NameToFrom </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  SplitRunBuilder : public Builder
        {
            private: SplitRunBuilderImpl * m_splitrunbuilder_impl;
            private: friend class  _SplitRunBuilderBuilder;
            protected: SplitRunBuilder();
            public: ~SplitRunBuilder();
            /**Returns  the user selected Run for Split 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::SelectRun * RunObject
            (
            );
            /**Returns  the user selected split object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::RouteObjectCollector * SplitObject
            (
            );
            /**Returns  the user mentioned run name after split
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString RunName
            (
            );
            /**Sets  the user mentioned run name after split
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetRunName
            (
                const NXString & runName /** runname */ 
            );
            /**Sets  the user mentioned run name after split
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetRunName
            (
                const char * runName /** runname */ 
            );
            /**Returns  the new run name to From section or not
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool NameToFrom
            (
            );
            /**Sets  the new run name to From section or not
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetNameToFrom
            (
                bool nameToFrom /** nametofrom */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
