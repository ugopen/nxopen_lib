#ifndef NXOpen_FEATURES_MATCHEDREFERENCEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MATCHEDREFERENCEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MatchedReferenceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_MatchedReferenceBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class MatchedReferenceBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXObject;
    namespace Features
    {
        class _MatchedReferenceBuilderBuilder;
        class MatchedReferenceBuilderImpl;
        /**
            Represents a @link Features::MatchedReferenceBuilder Features::MatchedReferenceBuilder@endlink 
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  MatchedReferenceBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** MatchedReference block type*/
            public: enum Types
            {
                TypesCurve/** single curve or edge */,
                TypesFace/** single face or datum plane */,
                TypesCurveCollector/** curve collector or edge collector */,
                TypesFaceCollector/** face collector */,
                TypesSection/** section */,
                TypesPoint/** point */,
                TypesVector/** vector*/,
                TypesObject/** general geometry such as the target body and the tool body for copying unite feature */,
                TypesBodyCollector/** body collector */,
                TypesCsys/** csys*/,
                TypesPlane/** plane*/,
                TypesAxis/** axis*/,
                TypesUndefined/** default type for feature name lable */
            };

            /** Matched status*/
            public: enum ResolvedStatus
            {
                ResolvedStatusInitial/** initial state */,
                ResolvedStatusUnresolved/** user unresolved */,
                ResolvedStatusBySystem/** system automatic resolve */,
                ResolvedStatusByUser/** resolve by user */
            };

            private: MatchedReferenceBuilderImpl * m_matchedreferencebuilder_impl;
            private: friend class  _MatchedReferenceBuilderBuilder;
            protected: MatchedReferenceBuilder();
            public: ~MatchedReferenceBuilder();
            /**Returns  the reverse direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the matched entity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * MatchedEntity
            (
            );
            /**Sets  the matched entity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchedEntity
            (
                NXOpen::NXObject * matchedEntity /** matched entity */ 
            );
            /**Returns  the matchedReference type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MatchedReferenceBuilder::Types Type
            (
            );
            /**Sets  the matchedReference type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::MatchedReferenceBuilder::Types type /** type */ 
            );
            /**Returns  the matchedReference matched status 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MatchedReferenceBuilder::ResolvedStatus MatchedStatus
            (
            );
            /**Sets  the matchedReference matched status 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchedStatus
            (
                NXOpen::Features::MatchedReferenceBuilder::ResolvedStatus matchedStatus /** matchedstatus */ 
            );
            /**Returns  the matchedReference parent entity 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * ParentEntity
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
