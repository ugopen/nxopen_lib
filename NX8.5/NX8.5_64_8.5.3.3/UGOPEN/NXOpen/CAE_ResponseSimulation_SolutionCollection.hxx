#ifndef NXOpen_CAE_RESPONSESIMULATION_SOLUTIONCOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_RESPONSESIMULATION_SOLUTIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResponseSimulation_SolutionCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class SolutionCollection;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class Manager;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class Solution;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class SolutionBuilder;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class SolutionCollectionImpl;
            /** Represents a collection of response analysis meta solution  <br> To obtain an instance of this class, refer to @link CAE::ResponseSimulation::Manager  CAE::ResponseSimulation::Manager @endlink  <br> 
             <br>  Created in NX5.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  SolutionCollection : public TaggedObjectCollection
            {
                private: SolutionCollectionImpl * m_solutioncollection_impl;
                private: NXOpen::CAE::ResponseSimulation::Manager* m_owner;
                /// \cond NX_NO_DOC 
                public: explicit SolutionCollection(NXOpen::CAE::ResponseSimulation::Manager *owner);


                /// \endcond 
                public: 
                /**Returns the tag of this object.  */
                tag_t Tag() const; 
                public: ~SolutionCollection();
                /** Iterator for accessing the contents of the collection. */
                //lint -sem(NXOpen::CAE::ResponseSimulation::SolutionCollection::iterator::copy,initializer)
                class iterator
                {
                public:
                    /** Value type associated with iterator*/ 

                    typedef CAE::ResponseSimulation::Solution * value_type;
                    /** Default constructor */
                    iterator() : m_context(NULL), m_current(NULL_TAG)
                    {
                    } //lint !e1401 m_state is not initialized
                    /// \cond NX_NO_DOC
                    explicit iterator(NXOpen::CAE::ResponseSimulation::SolutionCollection *context) : m_context(context), m_current(NULL_TAG)
                    {
                    }//lint !e1401 m_state is not initialized
                    /// \endcond
                    /** Copy constructor */
                    iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                    {
                        copy(other);
                    }
                    /** Copy constructor */
                    iterator &operator =(const iterator &other)
                    {
                        if (&other != this)
                            copy(other);
                        return *this;
                    }
                    /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                    bool operator ==(const iterator &other) const
                    {
                        return m_current == other.m_current && m_context == other.m_context;
                    }
                    /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                    bool operator !=(const iterator &other) const
                    {
                        return !operator == (other);
                    }
                    /** Return the element currently pointed to by the iterator. */
                    NXOPENCPP_CAEEXPORT  value_type operator * ();
                    /** Points the iterator to next element. */
                    iterator & operator ++()
                    {
                        next();
                        return *this;
                    }
                    /** Points the iterator to next element. */
                    iterator operator ++(int)
                    {
                        iterator tmp(*this);
                        ++*this;
                        return tmp;
                    }
                private:
                    void copy(const iterator &other)
                    {
                        m_context = other.m_context;
                        m_current = other.m_current;
                        for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                             m_state[i] = other.m_state[i];
                    }
                    NXOPENCPP_CAEEXPORT  void next();
                    NXOpen::CAE::ResponseSimulation::SolutionCollection *m_context;
                    tag_t m_current;
                    unsigned int m_state[8];
                };
                /** Returns an iterator addressing the first element. */
                iterator begin();
                /** Returns an iterator addressing one past the last element. */
                iterator end()
                {
                    return iterator(this);
                }
                /** Creates the builder object of response analysis meta solution  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::SolutionBuilder * CreateSolutionBuilder
                (
                    NXOpen::CAE::ResponseSimulation::Solution * raSolution /** ra solution */ 
                );
                /**Returns  the active solution 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::Solution * ActiveSolution
                (
                );
                /**Sets  the active solution 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetActiveSolution
                (
                    NXOpen::CAE::ResponseSimulation::Solution * activeSolution /** active solution */ 
                );
                /** Clones a response analysis meta solution  @return  the  newly created @link CAE::ResponseSimulation::Solution CAE::ResponseSimulation::Solution@endlink   
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::Solution * CloneSolution
                (
                    NXOpen::CAE::ResponseSimulation::Solution * oldSolution /** the @link CAE::SimSolution CAE::SimSolution@endlink  to be cloned */,
                    const NXString & suggestedName /** name to use instead of default name (may be NULL)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Clones a response analysis meta solution  @return  the  newly created @link CAE::ResponseSimulation::Solution CAE::ResponseSimulation::Solution@endlink   
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                NXOpen::CAE::ResponseSimulation::Solution * CloneSolution
                (
                    NXOpen::CAE::ResponseSimulation::Solution * oldSolution /** the @link CAE::SimSolution CAE::SimSolution@endlink  to be cloned */,
                    const char * suggestedName /** name to use instead of default name (may be NULL)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Finds a response analysis meta solution with specified solution name  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::Solution * FindObject
                (
                    const NXString & solutionName /** solution name */ 
                );
                /** Finds a response analysis meta solution with specified solution name  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                NXOpen::CAE::ResponseSimulation::Solution * FindObject
                (
                    const char * solutionName /** solution name */ 
                );
            }; //lint !e1712 default constructor not defined for class  

        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
