#ifndef NXOpen_GEOMETRICUTILITIES_FACEPLANESELECTIONBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_FACEPLANESELECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_FacePlaneSelectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_FacePlaneSelectionBuilder.hxx>
#include <NXOpen/GeometricUtilities_FaceSetData.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class FacePlaneSelectionBuilder;
    }
    namespace GeometricUtilities
    {
        class FaceSetData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Plane;
    class Point;
    class ScCollector;
    namespace GeometricUtilities
    {
        class _FacePlaneSelectionBuilderBuilder;
        class FacePlaneSelectionBuilderImpl;
        /**
            Represents a @link GeometricUtilities::FacePlaneSelectionBuilder GeometricUtilities::FacePlaneSelectionBuilder@endlink 
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  FacePlaneSelectionBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Specifies the object type for blend endcap objects. */
            public: enum TrimObjectType
            {
                TrimObjectTypePlane/** plane end cap*/,
                TrimObjectTypeFace/** face end cap*/,
                TrimObjectTypeEdge/** edge limit cap */
            };

            private: FacePlaneSelectionBuilderImpl * m_faceplaneselectionbuilder_impl;
            private: friend class  _FacePlaneSelectionBuilderBuilder;
            protected: FacePlaneSelectionBuilder();
            public: ~FacePlaneSelectionBuilder();
            /**Returns  the trim object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FacePlaneSelectionBuilder::TrimObjectType TrimObject
            (
            );
            /**Sets  the trim object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimObject
            (
                NXOpen::GeometricUtilities::FacePlaneSelectionBuilder::TrimObjectType trimObject /** trimobject */ 
            );
            /**Returns  the select face 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FaceSetData * SelectFace
            (
            );
            /**Returns  the select plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * SelectPlane
            (
            );
            /**Sets  the select plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSelectPlane
            (
                NXOpen::Plane * selectPlane /** selectplane */ 
            );
            /**Returns  the use plane cap blend 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlaneCapBlend
            (
            );
            /**Sets  the use plane cap blend 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUsePlaneCapBlend
            (
                bool usePlaneCapBlend /** useplanecapblend */ 
            );
            /**Returns the user plane cap help point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PlaneHelpPoint
            (
            );
            /**Sets the user plane cap help point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPlaneHelpPoint
            (
                NXOpen::Point * helpPoint /** helppoint */ 
            );
            /**Sets the data OK flag 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOk
            (
                bool isOk /** isok */ 
            );
            /**Returns the data OK flag 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool IsOk
            (
            );
            /**Returns  the select limit edge 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectEdge
            (
            );
            /**Returns  the limit edge switch fin flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool LimitTopolSwitchFinFlag
            (
            );
            /**Sets  the limit edge switch fin flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLimitTopolSwitchFinFlag
            (
                bool switchFlag /** switchflag */ 
            );
            /**Returns  the use face cap blend flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseFaceCapBlend
            (
            );
            /**Sets  the use face cap blend flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUseFaceCapBlend
            (
                bool useFaceCapBlend /** usefacecapblend */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
