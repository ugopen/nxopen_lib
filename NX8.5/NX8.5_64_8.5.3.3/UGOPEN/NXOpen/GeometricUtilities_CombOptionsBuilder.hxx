#ifndef NXOpen_GEOMETRICUTILITIES_COMBOPTIONSBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_COMBOPTIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_CombOptionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_CombOptionsBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class CombOptionsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _CombOptionsBuilderBuilder;
        class CombOptionsBuilderImpl;
        /**
            Represents a @link GeometricUtilities::CombOptionsBuilder GeometricUtilities::CombOptionsBuilder@endlink 
            
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  CombOptionsBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Represents the Analysis types */
            public: enum AnalysisTypes
            {
                AnalysisTypesNone/** None */,
                AnalysisTypesCurvature/** Curvature */,
                AnalysisTypesRadius/** Radius */
            };

            /** Represents the Label types 
             <br>  @deprecated Deprecated in NX7.0.0.  <br>  
            */
            public:  NX_DEPRECATED("Deprecated in NX7.0.0") enum LabelTypes
            {
                LabelTypesNone/** None */,
                LabelTypesMinimum/** Minimum */,
                LabelTypesMaximum/** Maximum */,
                LabelTypesMinimumMaximum/** Minimum and Maximum */
            };

            private: CombOptionsBuilderImpl * m_comboptionsbuilder_impl;
            private: friend class  _CombOptionsBuilderBuilder;
            protected: CombOptionsBuilder();
            public: ~CombOptionsBuilder();
            /**Returns  the show needles flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowNeedles
            (
            );
            /**Sets  the show needles flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowNeedles
            (
                bool showNeedles /** showneedles */ 
            );
            /**Returns  the auto scale flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutoScale
            (
            );
            /**Sets  the auto scale flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAutoScale
            (
                bool hasAutoScale /** hasautoscale */ 
            );
            /**Returns  the scale factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ScaleFactor
            (
            );
            /**Sets  the scale factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScaleFactor
            (
                double scaleFactor /** scalefactor */ 
            );
            /**Returns  the density 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int Density
            (
            );
            /**Sets  the density 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDensity
            (
                int density /** density */ 
            );
            /**Returns  the intermediate density 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int IntermediateDensity
            (
            );
            /**Sets  the intermediate density 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIntermediateDensity
            (
                int intermediateDensity /** intermediatedensity */ 
            );
            /**Returns  the maximum needle flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool HasMaxNeedleLength
            (
            );
            /**Sets  the maximum needle flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHasMaxNeedleLength
            (
                bool hasMaxNeedleLength /** hasmaxneedlelength */ 
            );
            /**Returns  the maximum needle length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxNeedleLength
            (
            );
            /**Sets  the maximum needle length 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaxNeedleLength
            (
                double maxNeedleLength /** maxneedlelength */ 
            );
            /**Returns  the analysis type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CombOptionsBuilder::AnalysisTypes AnalysisType
            (
            );
            /**Sets  the analysis type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAnalysisType
            (
                NXOpen::GeometricUtilities::CombOptionsBuilder::AnalysisTypes analysis /** analysis */ 
            );
            /**Returns  the value indicating if the minimum label is enabled 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsMinimumLabelEnabled
            (
            );
            /**Sets  the value indicating if the minimum label is enabled 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumLabelEnabled
            (
                bool isMinimumLabelEnabled /** isminimumlabelenabled */ 
            );
            /**Returns  the value indicating if the maximum label is enabled 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsMaximumLabelEnabled
            (
            );
            /**Sets  the value indicating if the maximum label is enabled 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumLabelEnabled
            (
                bool isMaximumLabelEnabled /** ismaximumlabelenabled */ 
            );
            /**Returns  the normal to grid plane flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsNormalToGridPlane
            (
            );
            /**Sets  the normal to grid plane flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNormalToGridPlane
            (
                bool isNormalToGridPlane /** isnormaltogridplane */ 
            );
            /**Returns  the reverse needles flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseNeedles
            (
            );
            /**Sets  the reverse needles flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReverseNeedles
            (
                bool reverseNeedles /** reverseneedles */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
