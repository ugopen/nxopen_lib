#ifndef NXOpen_BLOCKSTYLER_INTEGERBLOCK_HXX_INCLUDED
#define NXOpen_BLOCKSTYLER_INTEGERBLOCK_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BlockStyler_IntegerBlock.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_IntegerBlock.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace BlockStyler
    {
        class IntegerBlock;
    }
    namespace BlockStyler
    {
        class UIBlock;
    }
    namespace BlockStyler
    {
        class _IntegerBlockBuilder;
        class IntegerBlockImpl;
        /** Represents a Integer block
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENUICPPEXPORT  IntegerBlock : public BlockStyler::UIBlock
        {
            private: IntegerBlockImpl * m_integerblock_impl;
            private: friend class  _IntegerBlockBuilder;
            protected: IntegerBlock();
            public: ~IntegerBlock();
            /**Returns  the AdaptiveScaleLimits
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool AdaptiveScaleLimits
            (
            );
            /**Sets  the AdaptiveScaleLimits
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAdaptiveScaleLimits
            (
                bool scaleLimits /** scale limits */ 
            );
            /**Returns  the BalloonTooltipImage
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString BalloonTooltipImage
            (
            );
            /**Sets  the BalloonTooltipImage
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipImage
            (
                const NXString & imageString /** image string */ 
            );
            /**Sets  the BalloonTooltipImage
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetBalloonTooltipImage
            (
                const char * imageString /** image string */ 
            );
            /**Returns  the BalloonTooltipLayout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString BalloonTooltipLayoutAsString
            (
            );
            /**Sets  the BalloonTooltipLayout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipLayoutAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the BalloonTooltipLayout as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetBalloonTooltipLayoutAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the BalloonTooltipLayout members  @return Value to get from the property. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBalloonTooltipLayoutMembers
            (
            );
            /**Returns  the BalloonTooltipText
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString BalloonTooltipText
            (
            );
            /**Sets  the BalloonTooltipText
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBalloonTooltipText
            (
                const NXString & balloonTooltipText /** balloon tooltip text */ 
            );
            /**Sets  the BalloonTooltipText
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetBalloonTooltipText
            (
                const char * balloonTooltipText /** balloon tooltip text */ 
            );
            /**Returns  the Bitmap
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString Bitmap
            (
            );
            /**Sets  the Bitmap
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBitmap
            (
                const NXString & bitmapString /** bitmap string */ 
            );
            /**Sets  the Bitmap
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetBitmap
            (
                const char * bitmapString /** bitmap string */ 
            );
            /** Gets the ComboOptions @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetComboOptions
            (
            );
            /** Sets the ComboOptions
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetComboOptions
            (
                const std::vector<int> & optionValue /** option value */ 
            );
            /**Returns  the Increment
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double Increment
            (
            );
            /**Sets  the Increment
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetIncrement
            (
                double increment /** increment */ 
            );
            /**Returns  the LineIncrement
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double LineIncrement
            (
            );
            /**Sets  the LineIncrement
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLineIncrement
            (
                double lineIncrement /** line increment */ 
            );
            /**Returns  the Localize
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool Localize
            (
            );
            /**Sets  the Localize
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLocalize
            (
                bool localize /** localize */ 
            );
            /**Returns  the MaximumValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int MaximumValue
            (
            );
            /**Sets  the MaximumValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumValue
            (
                int maxValue /** max value */ 
            );
            /**Returns  the MaxInclusive
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool MaxInclusive
            (
            );
            /**Sets  the MaxInclusive
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMaxInclusive
            (
                bool maxInclusive /** max inclusive */ 
            );
            /**Returns  the MinimumValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int MinimumValue
            (
            );
            /**Sets  the MinimumValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumValue
            (
                int minValue /** min value */ 
            );
            /**Returns  the MinInclusive
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool MinInclusive
            (
            );
            /**Sets  the MinInclusive
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMinInclusive
            (
                bool minInclusive /** min inclusive */ 
            );
            /**Returns  the PageIncrement
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double PageIncrement
            (
            );
            /**Sets  the PageIncrement
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPageIncrement
            (
                double pageIncrement /** page increment */ 
            );
            /**Returns  the PresentationStyle as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString PresentationStyleAsString
            (
            );
            /**Sets  the PresentationStyle as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPresentationStyleAsString
            (
                const NXString & enumString /** enumstring */ 
            );
            /**Sets  the PresentationStyle as string
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetPresentationStyleAsString
            (
                const char * enumString /** enumstring */ 
            );
            /** Gets the PresentationStyle member  @return Value to get for the property. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetPresentationStyleMembers
            (
            );
            /**Returns  the RetainValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool RetainValue
            (
            );
            /**Sets  the RetainValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRetainValue
            (
                bool retain /** retain */ 
            );
            /**Returns  the ScaleLimits
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ScaleLimits
            (
            );
            /**Sets  the ScaleLimits
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetScaleLimits
            (
                bool scaleLimits /** scale limits */ 
            );
            /**Returns  the ScaleMaxLimitLabel
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ScaleMaxLimitLabel
            (
            );
            /**Sets  the ScaleMaxLimitLabel
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetScaleMaxLimitLabel
            (
                const NXString & maxLimitLabel /** max limit label */ 
            );
            /**Sets  the ScaleMaxLimitLabel
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetScaleMaxLimitLabel
            (
                const char * maxLimitLabel /** max limit label */ 
            );
            /**Returns  the ScaleMinLimitLabel
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ScaleMinLimitLabel
            (
            );
            /**Sets  the ScaleMinLimitLabel
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetScaleMinLimitLabel
            (
                const NXString & minLimitLabel /** min limit label */ 
            );
            /**Sets  the ScaleMinLimitLabel
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetScaleMinLimitLabel
            (
                const char * minLimitLabel /** min limit label */ 
            );
            /**Returns  the ShowScaleValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowScaleValue
            (
            );
            /**Sets  the ShowScaleValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetShowScaleValue
            (
                bool showValue /** show value */ 
            );
            /**Returns  the TitleVisibility
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool TitleVisibility
            (
            );
            /**Sets  the TitleVisibility
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetTitleVisibility
            (
                bool visibility /** visibility */ 
            );
            /**Returns  the Value
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int Value
            (
            );
            /**Sets  the Value
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetValue
            (
                int inetegerValue /** ineteger value */ 
            );
            /**Returns  the WrapSpin
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool WrapSpin
            (
            );
            /**Sets  the WrapSpin
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetWrapSpin
            (
                bool wrapSpin /** wrap spin */ 
            );
            /**Returns  the ReadOnlyValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ReadOnlyValue
            (
            );
            /**Sets  the ReadOnlyValue
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetReadOnlyValue
            (
                bool readOnly /** read only */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
