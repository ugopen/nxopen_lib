#ifndef NXOpen_DIMENSIONS_HXX_INCLUDED
#define NXOpen_DIMENSIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Dimensions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        /** Specifies the diameter symbol */
        enum DiameterSymbol
        {
            DiameterSymbolDia/** Specifies DIA symbol */,
            DiameterSymbolStandard/** Specifies standard symbol */,
            DiameterSymbolUserDefined/** Specifies user defined symbol */,
            DiameterSymbolSpherical/** Specifies spherical symbol */,
            DiameterSymbolLast/** Last enum value. Should not be used. */
        };

        /** Specifies the radius symbol */
        enum RadiusSymbol
        {
            RadiusSymbolR/** Specifies R symbol */,
            RadiusSymbolRAD/** Specfies RAD symbol */,
            RadiusSymbolUserDefined/** Specfies user defined symbol */,
            RadiusSymbolSR/** Specifes SR symbol */,
            RadiusSymbolCR/** Specifies CR symbol */,
            RadiusSymbolLast/** Last enum value. Should not be used. */
        };

        /** Specifies the diameter/radius symbol placement relative to the dimension text */
        enum DiameterRadiusSymbolPlacement
        {
            DiameterRadiusSymbolPlacementBelow/** Specifies diameter/radius symbol is placed below dimension text */,
            DiameterRadiusSymbolPlacementAbove/** Specifies diameter/radius symbol is placed above dimension text */,
            DiameterRadiusSymbolPlacementAfter/** Specifies diameter/radius symbol is placed after dimension text */,
            DiameterRadiusSymbolPlacementBefore/** Specifies diameter/radius symbol is placed before dimension text */,
            DiameterRadiusSymbolPlacementOmit/** Specifies diameter/radius symbol is omitted */,
            DiameterRadiusSymbolPlacementLast/** Last enum value. Should not be used. */
        };

        /** Specifies the leader stub relative to diameter/radius dimension text */
        enum DiameterRadiusLeaderStub
        {
            DiameterRadiusLeaderStubBefore/** Specifies leader stub before the dimension text*/,
            DiameterRadiusLeaderStubBelow/** Specfies leader stub below the dimension text */,
            DiameterRadiusLeaderStubLast/** Last enum value. Should not be used. */
        };

        /** Specifies the dimension unit */
        enum DimensionUnit
        {
            DimensionUnitMillimeters/** Specifies millimeters units */,
            DimensionUnitMeters/** Specified meters units */,
            DimensionUnitInches/** Specifies inches units */,
            DimensionUnitArchitecturalFeetInches/** Specified architectural units - converts inches
                                                                      to feet for measurements larger than 12 inches */,
            DimensionUnitEngineeringFeetInches/** Specified engineering units - converts inches to feet
                                                                    for measurements larger than 72 inches */,
            DimensionUnitLast/** Last enum value. Should not be used. */
        };

        /** Specifies the angular dimension format */
        enum AngularDimensionFormat
        {
            AngularDimensionFormatFractionalDegrees/** Specifies fractional degrees format */,
            AngularDimensionFormatWholeDegrees/** Specifies whole degrees format */,
            AngularDimensionFormatDegreesMinutes/** Specifies degrees minutes format */,
            AngularDimensionFormatDegreesMinutesSeconds/** Specifies degrees minutes seconds format */,
            AngularDimensionFormatLast/** Last enum value. Should not be used. */
        };

        /** Specifies the dimension text format */
        enum DimensionTextFormat
        {
            DimensionTextFormatDecimal/** Specifies decimal format */,
            DimensionTextFormatHalfSizeFraction/** Specifies 1/2 size fraction format */,
            DimensionTextFormatTwoThirdSizeFraction/** Specfies 2/3 size fraction format */,
            DimensionTextFormatFullSizeFraction/** Specifies full size fraction format */,
            DimensionTextFormatLast/** Last enum value. Should not be used. */
        };

        /** Specifies the decimal point character */
        enum DecimalPointCharacter
        {
            DecimalPointCharacterPeriod/** Specifies period decimal point character */,
            DecimalPointCharacterComma/** Specifies comma decimal point character */,
            DecimalPointCharacterLast/** Last enum value. Should not be used. */
        };

        /** Specifies the tolerance text placement relative to the dimension text */
        enum TolerancePlacement
        {
            TolerancePlacementBelow/** Specifies tolerance below dimension text */,
            TolerancePlacementAfter/** Specifies tolerance after dimension text */,
            TolerancePlacementAbove/** Specifies tolerance above dimension text */,
            TolerancePlacementLast/** Last enum value. Should not be used. */
        };

        /** Specifies the dual dimension placement relative to the primary dimension */
        enum DualDimensionPlacement
        {
            DualDimensionPlacementBelow/** Specifies dual dimension below primary dimension */,
            DualDimensionPlacementAfter/** Specifies dual dimension after primary dimension */,
            DualDimensionPlacementAbove/** Specifies dual dimension above primary dimension */,
            DualDimensionPlacementBefore/** Specifies dual dimension before primary dimension */,
            DualDimensionPlacementNone/** Specifies no dual dimension */,
            DualDimensionPlacementLast/** Last enum value. Should not be used. */
        };

        /** Specifies the suppress zeros option for the angular dimension */
        enum AngularSuppressZeros
        {
            AngularSuppressZerosNone/** Specifies no zeros suppressed */,
            AngularSuppressZerosLeading/** Specifies leading zeros suppressed */,
            AngularSuppressZerosAny/** Specifies any zeros suppressed */,
            AngularSuppressZerosTrailing/** Specifies trailing zeros suppressed */,
            AngularSuppressZerosLast/** Last enum value. Should not be used. */
        };

        /** Specifies the fraction denominator format */
        enum FractionDenominatorFormat
        {
            FractionDenominatorFormatOne/** one */ ,
            FractionDenominatorFormatTwo/** two */ ,
            FractionDenominatorFormatFour/** four */ ,
            FractionDenominatorFormatEight/** eight */ ,
            FractionDenominatorFormatSixteen/** sixteen */ ,
            FractionDenominatorFormatThirtyTwo/** thirty two */ ,
            FractionDenominatorFormatSixtyFour/** sixty four */ ,
            FractionDenominatorFormatLast/** Last enum value. Should not be used. */
        };

        /** Specifies the tolerance type */
        enum ToleranceType
        {
            ToleranceTypeNone/** No tolerance */,
            ToleranceTypeLimitOneLine/** -LIM +LIM   */,
            ToleranceTypeLimitTwoLines/** +LIM <br> 
                                                               -LIM  <br> */,
            ToleranceTypeBilateralOneLine/** +-TOL */,
            ToleranceTypeBilateralTwoLines/** +TOL <br> 
                                                                   -TOL  <br> */,
            ToleranceTypeUnilateralAbove/** +TOL <br> 
                                                                -.000  <br> */,
            ToleranceTypeUnilateralBelow/** +.000 <br> 
                                                                -TOL  <br>  */,
            ToleranceTypeBasic/** |xxx| */,
            ToleranceTypeReference/** (xxx) */,
            ToleranceTypeLimitLargerFirst/** +LIM -LIM */,
            ToleranceTypeLimitLargerBelow/** -LIM <br> 
                                                                  +LIM  <br> */,
            ToleranceTypeLimitsAndFits/** A5 */,
            ToleranceTypeNotToScale/** xxx <br> 
                                                            ---  <br> */,
            ToleranceTypeDiameterReference/** (DIA xxx) */,
            ToleranceTypeBasicNotToScale/** basic not to scale */ 
        };

        /** Specifies the dimension text placement */
        enum TextPlacement
        {
            TextPlacementAutomatic/** Specifies automatic text placement */,
            TextPlacementManualArrowsIn/** Specifies manual text placement with arrows inside
                                                                          the extension lines */,
            TextPlacementManualArrowsOut/** Specifies manual text placement with arrows outside
                                                                          the extension lines */,
            TextPlacementManualArrowsInSameDirection/** Specifies manual text placement with arrows in the same direction */,
            TextPlacementLast/** Last enum value. Should not be used. */
        };

        /** Specifies the extension line display option */
        enum ExtensionLineDisplay
        {
            ExtensionLineDisplayTwo/** Displays both the extension lines */,
            ExtensionLineDisplayFirst/** Displays extension line attached to the 
                                                             first object selected to create the dimension */,
            ExtensionLineDisplaySecond/** Displays extension line attached to the 
                                                             second object selected to create the dimension */,
            ExtensionLineDisplayNone/** Doesn't display extension lines */,
            ExtensionLineDisplayLast/** Last enum value. Should not be used. */
        };

        /** Specifies the arrow display option */
        enum ArrowDisplay
        {
            ArrowDisplayTwo/** Displays both the arrows */,
            ArrowDisplayFirst/** Displays arrow to the first object selected to create
                                                    the dimension */,
            ArrowDisplaySecond/** Displays arrow to the second object selected to create
                                                     the dimension */,
            ArrowDisplayNone/** Doesn't display arrows */,
            ArrowDisplayLast/** Last enum value. Should not be used. */
        };

        /** Specifies the dimension text orientation */
        enum TextOrientation
        {
            TextOrientationHorizontal/** Specifies horizontal dimension text */,
            TextOrientationAligned/** Specifies dimenson text aligned with the dimension line */,
            TextOrientationOverDimensionLine/** Specifies dimenson text aligned with and above 
                                                                     the dimension line */,
            TextOrientationByAngle/** Specifies dimension text at angle */,
            TextOrientationPerpendicular/** Specifies dimension text perpendicular to the dimension line */,
            TextOrientationLast/** Last enum value. Should not be used. */
        };

        /** Specifies the narrow dimension display option */
        enum NarrowDisplayOption
        {
            NarrowDisplayOptionNone/** Doesn't display narrow dimension */,
            NarrowDisplayOptionNoLeader/** Displays narrow dimension without leader */,
            NarrowDisplayOptionWithLeaderNoStub/** Displays narrow dimension with leader, but without stub */,
            NarrowDisplayOptionAboveStub/** Displays narrow dimension above stub */,
            NarrowDisplayOptionAfterStub/** Displays narrow dimension after stub */,
            NarrowDisplayOptionLast/** Last enum value. Should not be used. */
        };

        /** Specifies the narrow dimension text orientation */
        enum NarrowTextOrientation
        {
            NarrowTextOrientationHorizontal/** Specifies horizontal text orientation */,
            NarrowTextOrientationParallel/** Specifies parallel text orientation */,
            NarrowTextOrientationLast/** Last enum value. Should not be used. */
        };

        /** Specifies the chamfer dimension form */
        enum ChamferForm
        {
            ChamferFormSymbol/** C5 */,
            ChamferFormSize/** 5 x 5 */,
            ChamferFormSizeAngle/** 5 x 45 */,
            ChamferFormAngleSize/** 45 x 5 */,
            ChamferFormLast/** Last enum value. Should not be used. */
        };

        /** Specifies the chamfer dimension stub type */
        enum ChamferStubType
        {
            ChamferStubTypeNoneTextAboveLeader/** Specifies no stub and text above leader */,
            ChamferStubTypeNoneTextAfterLeader/** Specifies no stub and text after leader */,
            ChamferStubTypeTextAbove/** Specifies text above stub */,
            ChamferStubTypeTextAfter/** Specifies text after stub */,
            ChamferStubTypeLast/** Last enum value. Should not be used. */
        };

        /** Specifies the chamfer dimension leader placement relative to the chamfer */
        enum ChamferLeaderPlacement
        {
            ChamferLeaderPlacementPerpendicular/** Specifies leader perpendicular to the chamfer */,
            ChamferLeaderPlacementParallel/** Specifies leader parallel to the chamfer */,
            ChamferLeaderPlacementLinear/** Specifies leader inline with the chamfer */,
            ChamferLeaderPlacementLast/** Last enum value. Should not be used. */
        };

        /** Specifies the chamfer dimension symbol placement */
        enum ChamferSymbolPlacement
        {
            ChamferSymbolPlacementNone/** Specifies no symbol */,
            ChamferSymbolPlacementPrefix/** CHAM 5 x 5 */,
            ChamferSymbolPlacementSuffix/** 5 x 5 CHAM */,
            ChamferSymbolPlacementLast/** Last enum value. Should not be used. */
        };

        /** Specifies the chamfer dimension separator type */
        enum ChamferSeparatorType
        {
            ChamferSeparatorTypeUppercaseX/** Specifies X */,
            ChamferSeparatorTypeLowercaseX/** Specifies x */
        };

        /** Specifies the positive direction for ordinate dimensions */
        enum OrdinatePositiveDirection
        {
            OrdinatePositiveDirectionAll/** Specifies positive direction for all dimensions */,
            OrdinatePositiveDirectionUpperRight/** Specifies positive direction for dimensions in upper right qudrant */,
            OrdinatePositiveDirectionUpperLeft/** Specifies positive direction for dimensions in upper left qudrant */,
            OrdinatePositiveDirectionLowerRight/** Specifies positive direction for dimensions in lower right qudrant */,
            OrdinatePositiveDirectionLowerLeft/** Specifies positive direction for dimensions in lower left qudrant */,
            OrdinatePositiveDirectionLast/** Last enum value. Should not be used. */
        };

        /** Specifies the ordinate origin dimension display option */
        enum OrdinateOriginDisplayOption
        {
            OrdinateOriginDisplayOptionUserDefinedSymbol/** Displays user defined symbol at the ordinate origin */,
            OrdinateOriginDisplayOptionOrdinateSetName/** Displays the ordinate set name at the ordinate origin */,
            OrdinateOriginDisplayOptionNoText/** Display no text at the ordinate origin */,
            OrdinateOriginDisplayOptionLast/** Last enum value. Should not be used. */
        };

        /** Specifies the ordinate dimension line and arrow display option */
        enum OrdinateLineArrowDisplayOption
        {
            OrdinateLineArrowDisplayOptionNone/** Doesn't display line and arrow */,
            OrdinateLineArrowDisplayOptionAll/** Displays both the line and arrow */,
            OrdinateLineArrowDisplayOptionLast/** Last enum value. Should not be used. */
        };

        /** Specifies the ordinate dimension dogleg definition      
                 <br> A - Start offset <br>   
                 <br> B - End offset <br> 
                 <br> C - Dog leg angle <br> 
                 @code 
                  _____________ Dimension Line
                                |
                                |
                            B   |
                        _______ |
                   A           /
                              /
                         .   /
                         .C / Dogleg Segement 
                         . /
                  _______./
                         |
                         |
               @endcode 
              */
        enum OrdinateDoglegDefinition
        {
            OrdinateDoglegDefinitionStartAndEnd/** Specifies start and end offeset defined */,
            OrdinateDoglegDefinitionStartAngle/** Specifies start offset and dogleg angle defined */,
            OrdinateDoglegDefinitionEndAngle/** Specifies end offset and dogleg angle defined */,
            OrdinateDoglegDefinitionLast/** Last enum value. Should not be used. */
        };

        /** Specifies the dogleg creation option when creating/editing the ordinate dimension */
        enum OrdinateDoglegCreationOption
        {
            OrdinateDoglegCreationOptionInfer/** Software infers whether the dogleg would be created */,
            OrdinateDoglegCreationOptionYes/** Dogleg will always be created */,
            OrdinateDoglegCreationOptionNo/** Dogleg will not be created */,
            OrdinateDoglegCreationOptionLast/** Last enum value. Should not be used. */
        };

        /** Specifies the type of dimension being created */
        enum DimensionType
        {
            DimensionTypeAngularMajor/** Major Angular dimension */,
            DimensionTypeAngularMinor/** Minor Angular dimension */,
            DimensionTypeArcLength/** Arc Length dimension */,
            DimensionTypeBaseline/** Baseline dimension */,
            DimensionTypeChain/** Chain dimension */,
            DimensionTypeChamfer/** Chamfer dimension */,
            DimensionTypeConcentricCircle/** Concentric Circle dimension */,
            DimensionTypeCylindrical/** Cylindrical dimension */,
            DimensionTypeDiameter/** Diameter dimension */,
            DimensionTypeFoldedRadius/** Folded Radius dimension */,
            DimensionTypeHole/** Hole dimension */,
            DimensionTypeHorizontal/** Horizontal dimension */,
            DimensionTypeOrdinateHorizontal/** Horizontal Ordinate dimension */,
            DimensionTypeOrdinateOrigin/** Ordinate Origin dimension */,
            DimensionTypeOrdinateVertical/** Vertical Ordinate dimension */,
            DimensionTypeParallel/** Parallel dimension */,
            DimensionTypePerpendicular/** Perpendicular dimension */,
            DimensionTypeRadius/** Radius dimension */,
            DimensionTypeVertical/** Vertical dimension */,
            DimensionTypeLast/** Last enum value. Should not be used. */
        };

        /** Specifies the radius dimension type */
        enum RadiusDimensionType
        {
            RadiusDimensionTypeToCenter/** Radius dimension to center */,
            RadiusDimensionTypeNotToCenter/** Radius dimension not to center */,
            RadiusDimensionTypeLast/** Last enum value. Should not be used. */
        };

        /** Specifies the dimension trim dimension line style.*/
        enum TrimDimensionLineStyle
        {
            TrimDimensionLineStyleDoNotTrim/** Dimension line will not be trimmed when text crosses both extension lines*/,
            TrimDimensionLineStyleTrim/** Dimension line will be trimmed when text crosses both extension lines*/
        };

        /** Specifies the 0 tolerance display style */
        enum ZeroToleranceDisplayStyle
        {
            ZeroToleranceDisplayStyleBasedOnUnits/** Zero tolerance display is tied to display units */,
            ZeroToleranceDisplayStyleAsZero/** Always display zero tolerance as 0 */,
            ZeroToleranceDisplayStyleOmittedAndInlined/** Omit the display of zero tolerance and inline the remaining tolerance */,
            ZeroToleranceDisplayStyleOmitted/** Omit the display of zero tolerance and maintain position of remaining tolerance */
        };

         /** Specifies the narrow dimension preferences */

        struct  NarrowDimensionData
        {
            public: /** display type */ NXOpen::Annotations::NarrowDisplayOption DisplayType;
            public: /** text orientation */ NXOpen::Annotations::NarrowTextOrientation TextOrientation;
            public: /** leader angle */ double LeaderAngle;
            public: /** text offset */ double TextOffset;
            public: NarrowDimensionData() :
                DisplayType((NXOpen::Annotations::NarrowDisplayOption)0),
                TextOrientation((NXOpen::Annotations::NarrowTextOrientation)0),
                LeaderAngle(),
                TextOffset()
            {
            }
            /** Constructor for the NarrowDimensionData struct. */ 
            public: NarrowDimensionData(NXOpen::Annotations::NarrowDisplayOption displayTypeInitial /** display type */ , 
                    NXOpen::Annotations::NarrowTextOrientation textOrientationInitial /** text orientation */ , 
                    double leaderAngleInitial /** leader angle */ , 
                    double textOffsetInitial /** text offset */ ) :
                DisplayType(displayTypeInitial),
                TextOrientation(textOrientationInitial),
                LeaderAngle(leaderAngleInitial),
                TextOffset(textOffsetInitial)
            {
            }
        };

        /** Specifies the linear chamfer dimension orientation */
        enum ChamferOrientationType
        {
            ChamferOrientationTypeHorizontal/** default (same as the adjacent edge) */,
            ChamferOrientationTypeVertical/** perpendicular with default */,
            ChamferOrientationTypeParallel/** parallel to the chamfer line itself */
        };

        /** Specifies the limit and fit display style */
        enum FitDisplayStyle
        {
            FitDisplayStyleFitSymbols/** Display only the grade and deviation */,
            FitDisplayStyleFitSymbolsAndLimits/** Display grade, deviation, and limit values */,
            FitDisplayStyleFitSymbolsAndTolerances/** Display grade, deviation, and tolerance values */,
            FitDisplayStyleTolerancesOnly/** Display the tolerance values only */
        };

        /** Specifies the limit and fit ANSI hole */
        enum FitAnsiHoleType
        {
            FitAnsiHoleTypeHole/** Use hole values for the ANSI limit and fit tolerance */,
            FitAnsiHoleTypeShaft/** Use shaft values for the ANSI limit and fit tolerance */
        };

        /** Specifies the True Length Text position */
        enum TrueLengthTextPosition
        {
            TrueLengthTextPositionNone/** Do not display True Length Text*/,
            TrueLengthTextPositionPrefix/** Display True Length Text before dimension value */,
            TrueLengthTextPositionSuffix/** Display True Length Text after dimension value */
        };

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
