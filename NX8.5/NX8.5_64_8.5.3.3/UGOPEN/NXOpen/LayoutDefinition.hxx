#ifndef NXOpen_LAYOUTDEFINITION_HXX_INCLUDED
#define NXOpen_LAYOUTDEFINITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     LayoutDefinition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class LayoutDefinition;
    class ModelingView;
    class View;
    class LayoutDefinitionImpl;
    /** Represents the definition of a layout.  This includes the arrangement
        and location of the views in the arrangement.

     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  LayoutDefinition : public TransientObject
    {
        /**
                Indicates the arrangement type of a layout.
            
         <br>  Created in NX3.0.0.  <br>  
        */
        public: enum ArrangementType
        {
            ArrangementTypeL1/** One row by one column*/,
            ArrangementTypeL2/** One row by two columns*/,
            ArrangementTypeL3/** Two rows by one column*/,
            ArrangementTypeL4/** Two rows by two columns*/,
            ArrangementTypeL6/** Two rows by three columns*/,
            ArrangementTypeL9/** Three rows by three columns*/,
            ArrangementTypeNonStandard/** A non standard layout.
                                                                       A layout definition 
                                                                       cannot be made with
                                                                       this option. */
        };

        private: LayoutDefinitionImpl * m_layoutdefinition_impl;
        /// \cond NX_NO_DOC 
        public: explicit LayoutDefinition(void *ptr);
        /// \endcond 
        /** Free resources associated with the instance. After this method
            is called, it is illegal to use the object.  In .NET, this method
            is automatically called when the object is deleted by the garbage
            collector.  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~LayoutDefinition();
        /**Returns  the arrangement type of the layout definition.
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::LayoutDefinition::ArrangementType Arrangement
        (
        );
        /** Returns the @link View View@endlink  at specified position in layout.  
                The system throws an exception when a user enters an invalid position. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void GetView
        (
            int row /** Row of view */,
            int column /** Column of view */,
            NXOpen::View ** view /** view */ 
        );
        /** Sets the @link ModelingView ModelingView@endlink  at specified position in layout.  
                The system throws an exception when a user enters an invalid position 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetView
        (
            int row /** Row of view */,
            int column /** Column of view */,
            NXOpen::ModelingView * view /** view */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
