#ifndef NXOpen_CAE_SIMSOLUTION_HXX_INCLUDED
#define NXOpen_CAE_SIMSOLUTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SimSolution.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SimGroupContainer.hxx>
#include <NXOpen/CAE_CaeDataContainer.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class CaeDataContainer;
    }
    namespace CAE
    {
        class CompanionResultCollection;
    }
    namespace CAE
    {
        class ConstraintResolutionBuilder;
    }
    namespace CAE
    {
        class CorrelAlignmentBuilder;
    }
    namespace CAE
    {
        class PropertyTable;
    }
    namespace CAE
    {
        class SimBC;
    }
    namespace CAE
    {
        class SimConstraint;
    }
    namespace CAE
    {
        class SimGroupContainer;
    }
    namespace CAE
    {
        class SimSolutionStep;
    }
    class Unit;
    namespace CAE
    {
        class _SimSolutionBuilder;
        class SimSolutionImpl;
        /**  @brief  Represents a solution in the .sim files  

         

                For more information, refer to the Solver language documentation 
                in the <a href="../opencae/Solvers.html"> Solver language documentation </a>.

             <br> To create a new instance of this class, use @link CAE::SimSimulation::CreateSolution  CAE::SimSimulation::CreateSolution @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SimSolution : public CAE::SimGroupContainer
        {
            /** Solve Options */
            public: enum SolveOption
            {
                SolveOptionSolve/** write solver input file and launch solve */,
                SolveOptionWriteSolverInputFile/** write solver input file only*/,
                SolveOptionSolveInputFile/** launch solve with existing solver input file*/,
                SolveOptionWriteEditAndSolveInputFile/** write solver input file, allow edit and then launch solve*/,
                SolveOptionEditSolverInputFile/** edit existing solver input file */
            };

            /**  Model Setup Check Options */
            public: enum SetupCheckOption
            {
                SetupCheckOptionDoNotCheck/** do perform any set up checks */,
                SetupCheckOptionCheckAndStopAtFirstError/** perform set up checks but stop at first error */,
                SetupCheckOptionCompleteCheckAndOutputErrors/** perform all set up checks and report all errors */
            };

            private: SimSolutionImpl * m_simsolution_impl;
            private: friend class  _SimSolutionBuilder;
            protected: SimSolution();
            public: ~SimSolution();
            /** Rename Solution and optionally rename associated results files 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: void Rename
            (
                const NXString & name /** new solution name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool renameResults /** true if you what associated results files to be renamed as well  */
            );
            /** Rename Solution and optionally rename associated results files 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            void Rename
            (
                const char * name /** new solution name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool renameResults /** true if you what associated results files to be renamed as well  */
            );
            /**Returns  the property table associated with the solution object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::PropertyTable * PropertyTable
            (
            );
            /**Returns  the property table associated with the solution's solver options 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::PropertyTable * SolverOptionsPropertyTable
            (
            );
            /** Adds a step to the solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddStep
            (
                NXOpen::CAE::SimSolutionStep * step /** solution step to be added */
            );
            /** Creates a step and add to the solution
                      @return  step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * CreateStep
            (
                int stepType /** index of the step type */,
                const NXString & stepName /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a step and add to the solution
                      @return  step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolutionStep * CreateStep
            (
                int stepType /** index of the step type */,
                const char * stepName /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a step, adds it to the solution and optionally makes it the Active Step.  Making it
                        the active step will also make the Solution active if it is not already.
                      @return  step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * CreateStep
            (
                int stepType /** index of the step type */,
                bool makeActive /** if true the step will be made the active step */,
                const NXString & stepName /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a step, adds it to the solution and optionally makes it the Active Step.  Making it
                        the active step will also make the Solution active if it is not already.
                      @return  step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolutionStep * CreateStep
            (
                int stepType /** index of the step type */,
                bool makeActive /** if true the step will be made the active step */,
                const char * stepName /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the count of allowable step types
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int AllowedStepTypeCount
            (
            );
            /** Removes a step from the solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteStep
            (
                NXOpen::CAE::SimSolutionStep * step /** step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  to be added */
            );
            /**Returns  the active step  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * ActiveStep
            (
            );
            /**Sets  the active step  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetActiveStep
            (
                NXOpen::CAE::SimSolutionStep * activeStep /** active step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  */
            );
            /**Returns  the number of steps
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int StepCount
            (
            );
            /** Returns the step at the index passed
                      @return  step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  at the index 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * GetStepByIndex
            (
                int stepIndex /** index of the step */
            );
            /**Returns  the solver type
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString SolverType
            (
            );
            /**Returns  the analysis type
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString AnalysisType
            (
            );
            /**Returns  the solution type
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString SolutionType
            (
            );
            /** Add the bc to the solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddBc
            (
                NXOpen::CAE::SimBC * bc /** the bc to be added */
            );
            /** Remove the bc from the solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveBc
            (
                NXOpen::CAE::SimBC * bc /** the bc to be removed */
            );
            /** Remove all constraints from the solution
                     
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveAllConstraints
            (
            );
            /** Remove all loads from the solution
                     
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveAllLoads
            (
            );
            /** Remove all simulation objects from the solution
                     
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveAllSimulationObjects
            (
            );
            /** Gets the BCs in this solution
                      @return  Resultant bcs 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::SimBC *> GetBcs
            (
            );
            /** Runs  the Assisted Conflict Check Mechanism for all constraints  @link CAE::SimConstraint CAE::SimConstraint@endlink  
                      in an active solution @link CAE::SimSolution CAE::SimSolution@endlink  and/or in an active step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink , 
                      generating new constraints @link CAE::SimConstraint CAE::SimConstraint@endlink  if there is any conflcit between the constraints.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ResolveConstraintConflicts
            (
            );
            /** Solves the solution 
                     
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void Solve
            (
                NXOpen::CAE::SimSolution::SolveOption solveOption /** solve option */,
                NXOpen::CAE::SimSolution::SetupCheckOption setupCheckOption /** setup check option */
            );
            /** Creates the builder object for test and imported solution alignment dialog  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: NXOpen::CAE::CorrelAlignmentBuilder * CreateAlignmentBuilder
            (
            );
            /**Returns  the number of conflicting constraint pairs in this solution 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int ConflictingConstraintsCount
            (
            );
            /** Returns the nth conflicting constraint pair, where the index is between 0 and @link CAE::SimSolution::ConflictingConstraintsCount CAE::SimSolution::ConflictingConstraintsCount@endlink  - 1 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetConflictingConstraintPairByIndex
            (
                int index /** index of the conflicting constraint pair, which is between 0 and @link CAE::SimSolution::ConflictingConstraintsCount CAE::SimSolution::ConflictingConstraintsCount@endlink  - 1 */,
                NXOpen::CAE::SimConstraint ** tConstrain1 /** constraint1 for this constraint pair */,
                NXOpen::CAE::SimConstraint ** tConstrain2 /** constraint2 for this constraint pair */,
                bool* ignored /** indicates that this conflict pair was previously resolved using the @link CAE::ConstraintResolutionBuilder::RuleIgnoreConflict CAE::ConstraintResolutionBuilder::RuleIgnoreConflict@endlink  */
            );
            /** Creates a constraint resolution builder for this input pair of constraints   @return   
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ConstraintResolutionBuilder * CreateConstraintResolutionBuilder
            (
                NXOpen::CAE::SimGroupContainer * tStep /** solution step. can be same as solution */,
                NXOpen::CAE::SimConstraint * tConstraint1 /** first constraint in conflict */,
                NXOpen::CAE::SimConstraint * tConstraint2 /** second constraint in conflict */
            );
            /** Stores the solver language export options to the specified solution.
                        
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ApplySolverLanguageExportOptions
            (
                NXOpen::CAE::CaeDataContainer * propertyList /** the export option parameters. See @link CAE::CaeSession::GetDataContainer  CAE::CaeSession::GetDataContainer @endlink . */
            );
            /** Specify local result file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetLocalResultFile
            (
                const NXString & dirpath /** directory name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & filename /** file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Specify local result file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetLocalResultFile
            (
                const char * dirpath /** directory name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * filename /** file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Specify managed result file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetManagedResultFile
            (
                const NXString & file /** file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Specify managed result file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetManagedResultFile
            (
                const char * file /** file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Clear previously specified result file location 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetInferredResultFile
            (
            );
            /** Set result file units 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResultFileUnits
            (
                const std::vector<NXOpen::Unit *> & units /** 6 units for mass, length, time, temperature, angle, and thermal energy */
            );
            /** Clears previously specified result file units 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetInferredResultFileUnits
            (
            );
            /** Specify whether NX Post should group entities based on
                       node and element groups and meshes in the pre-processing model 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFemValidInPost
            (
                bool valid /** valid or not */
            );
            /** Get the result file directory and result file name 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetResultFile
            (
                NXString* resultfiledir /** directly path where result file is stored */,
                NXString* resfilename /** result file name */
            );
            /** Get the managed result file name  @return  managed result file name 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString GetManagedResultFile
            (
            );
            /** Get basic 6 units which are stored with solution used for loading the result file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetResultFileUnits
            (
                std::vector<NXOpen::Unit *> & units /** 6 basic units used to define the quantities in result file in order of mass, length, time, temperature, angle, and thermal energy */
            );


            /** Returns the CAE Companion Results collection belonging to this Solution 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::CAE::CompanionResultCollection *CompanionResults();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
