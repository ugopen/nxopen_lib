#ifndef NXOpen_GENERICMEASURE_HXX_INCLUDED
#define NXOpen_GENERICMEASURE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GenericMeasure.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MeasureManager.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class GenericMeasure;
    class GenericMeasureImpl;
    /** Represents a single valued measurement 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  GenericMeasure : public TransientObject
    {
        /** The types for a measurement */
        public: enum Type
        {
            TypeMinimumDistance/** minimum distance */ ,
            TypeLocalMinimumDistance/** local minimum distance */ ,
            TypeMaximumDistance/** maximum distance */ ,
            TypeProjectedDistance/** projected distance */ ,
            TypeRadialDistance/** radial distance */ ,
            TypeLength/** length */ ,
            TypeTwoObjectAngle/** two object angle */ ,
            TypeThreePointAngle/** three point angle */ ,
            TypeFaceProperties/** face properties */ ,
            TypeMassProperties/** mass properties */ ,
            TypePointsOnCurves/** points on curves */ ,
            TypeRoutingPathLength/** routing path length */ ,
            TypeDiameterDistance/** diameter distance */ ,
            TypePolarRadius/** polar radius */ ,
            TypePolarAngle/** polar angle */ ,
            TypeRectangularExtreme/** rectangular extreme */ ,
            TypePolarArea/** polar area */ ,
            TypeMinimumSmartDistance/** minimum smart distance */ ,
            TypeMaximumSmartDistance/** maximum smart distance */ 
        };

        private: GenericMeasureImpl * m_genericmeasure_impl;
        /// \cond NX_NO_DOC 
        public: explicit GenericMeasure(void *ptr);
        /// \endcond 
        /**Returns  the type of the measurement 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::GenericMeasure::Type MeasurementType
        (
        );
        /** Free resources associated with the measure. After this method
          is called, it is illegal to use the object.  In .NET, this method
          is automatically called when the object is deleted by the garbage
          collector. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~GenericMeasure();
        /** Display information about a measurement.
           <br> In Interactive mode, output will be displayed in the listing window <br> 
           <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
          
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Information
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
