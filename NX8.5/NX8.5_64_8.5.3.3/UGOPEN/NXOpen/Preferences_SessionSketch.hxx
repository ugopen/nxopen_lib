#ifndef NXOpen_PREFERENCES_SESSIONSKETCH_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONSKETCH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionSketch.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_SketchPreferences.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class SessionSketch;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        class SessionSketchImpl;
        /** Represents the set of sketch preferences applicable to entire session  <br> To obtain an instance of this class, refer to @link Preferences::SessionPreferences  Preferences::SessionPreferences @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  SessionSketch
        {
            /** Describes the available sketch origin types. */
            public: enum OriginType
            {
                OriginTypeInferFromPlaneSelection/** Sketch origin is inferred from placement face */,
                OriginTypeProjectWorkPartOrigin/** Sketch origin is the projection of the work part origin */
            };

            /** Describes the available sketch background types. */
            public: enum BackgroundType
            {
                BackgroundTypeInherit/** Sketch background color is inherited from the parent application */,
                BackgroundTypePlain/** Sketch background color is forced to the plain background color */
            };

            private: SessionSketchImpl * m_sessionsketch_impl;
            private: NXOpen::Preferences::SessionPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SessionSketch(NXOpen::Preferences::SessionPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SessionSketch();
            /**Returns  the snap angle.  This is snap angle tolerance for vertical, horizontal, parallel, and perpendicular 
                lines.The default value is 3 and maximum value is 20 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: double SnapAngle
            (
            );
            /**Sets  the snap angle.  This is snap angle tolerance for vertical, horizontal, parallel, and perpendicular 
                lines.The default value is 3 and maximum value is 20 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSnapAngle
            (
                double snapAngle /** snap angle */ 
            );
            /**Returns  the change view orientation flag.  If true, when a sketch is activated, the view will be changed to 
                align with the sketch 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeViewOrientation
            (
            );
            /**Sets  the change view orientation flag.  If true, when a sketch is activated, the view will be changed to 
                align with the sketch 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetChangeViewOrientation
            (
                bool changeViewOrientation /** change view orientation */ 
            );
            /**Returns  the maintain blank status flag.  If true, when a sketch is activated, previously blanked objects will not be visible 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaintainBlankStatus
            (
            );
            /**Sets  the maintain blank status flag.  If true, when a sketch is activated, previously blanked objects will not be visible 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaintainBlankStatus
            (
                bool keepBlank /** keep blank */ 
            );
            /**Returns  the maintain layer status flag. Controls whether the work layer remains the same or returns to its previous 
                value when a sketch is deactivated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaintainLayerStatus
            (
            );
            /**Sets  the maintain layer status flag. Controls whether the work layer remains the same or returns to its previous 
                value when a sketch is deactivated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaintainLayerStatus
            (
                bool maintainLayerStatus /** maintain layer status */ 
            );
            /**Returns  the displays DOF arrows flag. Controls the display of the degree of freedom arrows. When this flag is set as
                False, the display of the arrows is turned OFF. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayDOFArrows
            (
            );
            /**Sets  the displays DOF arrows flag. Controls the display of the degree of freedom arrows. When this flag is set as
                False, the display of the arrows is turned OFF. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayDOFArrows
            (
                bool displayDOFArrows /** display d o f arrows */ 
            );
            /**Returns  the dynamic constraints display flag. If it is True, constraint symbols do not display if the associated 
                geometry is very small. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool DynamicConstraintDisplay
            (
            );
            /**Sets  the dynamic constraints display flag. If it is True, constraint symbols do not display if the associated 
                geometry is very small. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDynamicConstraintDisplay
            (
                bool dynamicConstraintDisplay /** dynamic constraint display */ 
            );
            /**Returns  the text size fixed flag. If it is True, text size adjusts opposite of zoom scale so that dimensions appear a constant size. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool TextSizeFixed
            (
            );
            /**Sets  the text size fixed flag. If it is True, text size adjusts opposite of zoom scale so that dimensions appear a constant size. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTextSizeFixed
            (
                bool textSizeFixed /** text size fixed */ 
            );
            /**Returns  the dimension text size when the text size fixed flag is set. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double FixedTextSize
            (
            );
            /**Sets  the dimension text size when the text size fixed flag is set. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFixedTextSize
            (
                double fixedTextSize /** fixed text size */ 
            );
            /**Returns  the constraint symbol size. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ConstraintSymbolSize
            (
            );
            /**Sets  the constraint symbol size. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetConstraintSymbolSize
            (
                double constraintSymbolSize /** constraint symbol size */ 
            );
            /**Returns  the display section mapping warning flag. If this is true, when user exits
                sketcher, would get a warning that some dependent feature section may require mapping 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool DisplaySectionMappingWarning
            (
            );
            /**Sets  the display section mapping warning flag. If this is true, when user exits
                sketcher, would get a warning that some dependent feature section may require mapping 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplaySectionMappingWarning
            (
                bool displaySectionMappingWarning /** displaysectionmappingwarning */ 
            );
            /**Returns  the retain dimensions flag. If it is True, sketch dimensions continue to display after a sketch is deactivated.  
             <br>  @deprecated Deprecated in NX8.0.1.  Use @link Annotations::AnnotationManager::MakePmi Annotations::AnnotationManager::MakePmi@endlink  and @link Annotations::AnnotationManager::RemovePmi Annotations::AnnotationManager::RemovePmi@endlink  with individual dimensions instead. <br>  

             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.1.  Use Annotations::AnnotationManager::MakePmi and Annotations::AnnotationManager::RemovePmi with individual dimensions instead.") bool RetainDimensions
            (
            );
            /**Sets  the retain dimensions flag. If it is True, sketch dimensions continue to display after a sketch is deactivated.  
             <br>  @deprecated Deprecated in NX8.0.1.  Use @link Annotations::AnnotationManager::MakePmi Annotations::AnnotationManager::MakePmi@endlink  and @link Annotations::AnnotationManager::RemovePmi Annotations::AnnotationManager::RemovePmi@endlink  with individual dimensions instead. <br>  

             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.1.  Use Annotations::AnnotationManager::MakePmi and Annotations::AnnotationManager::RemovePmi with individual dimensions instead.") void SetRetainDimensions
            (
                bool retainDimensions /** retain dimensions */ 
            );
            /**Returns  the origin option 
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link SketchInPlaceBuilder::SetProjectWorkPartOrigin SketchInPlaceBuilder::SetProjectWorkPartOrigin@endlink  and @link SketchInPlaceBuilder::SetMakeOriginAssociative SketchInPlaceBuilder::SetMakeOriginAssociative@endlink  and @link SketchInPlaceBuilder::SetSketchOrigin SketchInPlaceBuilder::SetSketchOrigin@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use SketchInPlaceBuilder::SetProjectWorkPartOrigin and SketchInPlaceBuilder::SetMakeOriginAssociative and SketchInPlaceBuilder::SetSketchOrigin instead.") NXOpen::Preferences::SessionSketch::OriginType OriginOption
            (
            );
            /**Sets  the origin option 
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link SketchInPlaceBuilder::SetProjectWorkPartOrigin SketchInPlaceBuilder::SetProjectWorkPartOrigin@endlink  and @link SketchInPlaceBuilder::SetMakeOriginAssociative SketchInPlaceBuilder::SetMakeOriginAssociative@endlink  and @link SketchInPlaceBuilder::SetSketchOrigin SketchInPlaceBuilder::SetSketchOrigin@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use SketchInPlaceBuilder::SetProjectWorkPartOrigin and SketchInPlaceBuilder::SetMakeOriginAssociative and SketchInPlaceBuilder::SetSketchOrigin instead.") void SetOriginOption
            (
                NXOpen::Preferences::SessionSketch::OriginType originType /** origin type */ 
            );
            /**Returns  the background option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionSketch::BackgroundType BackgroundOption
            (
            );
            /**Sets  the background option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBackgroundOption
            (
                NXOpen::Preferences::SessionSketch::BackgroundType backgroundType /** background type */ 
            );
            /**Returns  the default sketch name prefix  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultSketchNamePrefix
            (
            );
            /**Sets  the default sketch name prefix  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultSketchNamePrefix
            (
                const NXString & defaultSketchNamePrefix /** default sketch name prefix */ 
            );
            /**Sets  the default sketch name prefix  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            void SetDefaultSketchNamePrefix
            (
                const char * defaultSketchNamePrefix /** default sketch name prefix */ 
            );
            /**Returns  the default vertex name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultVertexNamePrefix
            (
            );
            /**Sets  the default vertex name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultVertexNamePrefix
            (
                const NXString & defaultVertexNamePrefix /** default vertex name prefix */ 
            );
            /**Sets  the default vertex name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            void SetDefaultVertexNamePrefix
            (
                const char * defaultVertexNamePrefix /** default vertex name prefix */ 
            );
            /**Returns  the default line name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultLineNamePrefix
            (
            );
            /**Sets  the default line name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultLineNamePrefix
            (
                const NXString & defaultLineNamePrefix /** default line name prefix */ 
            );
            /**Sets  the default line name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            void SetDefaultLineNamePrefix
            (
                const char * defaultLineNamePrefix /** default line name prefix */ 
            );
            /**Returns  the default arc name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultArcNamePrefix
            (
            );
            /**Sets  the default arc name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultArcNamePrefix
            (
                const NXString & defaultArcNamePrefix /** default arc name prefix */ 
            );
            /**Sets  the default arc name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            void SetDefaultArcNamePrefix
            (
                const char * defaultArcNamePrefix /** default arc name prefix */ 
            );
            /**Returns  the default conic name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultConicNamePrefix
            (
            );
            /**Sets  the default conic name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultConicNamePrefix
            (
                const NXString & defaultConicNamePrefix /** default conic name prefix */ 
            );
            /**Sets  the default conic name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            void SetDefaultConicNamePrefix
            (
                const char * defaultConicNamePrefix /** default conic name prefix */ 
            );
            /**Returns  the default spline name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultSplineNamePrefix
            (
            );
            /**Sets  the default spline name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultSplineNamePrefix
            (
                const NXString & defaultSplineNamePrefix /** default spline name prefix */ 
            );
            /**Sets  the default spline name prefix 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            void SetDefaultSplineNamePrefix
            (
                const char * defaultSplineNamePrefix /** default spline name prefix */ 
            );
            /**Returns  the dimension label 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SketchPreferences::DimensionLabelType DimensionLabel
            (
            );
            /**Sets  the dimension label 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDimensionLabel
            (
                NXOpen::Preferences::SketchPreferences::DimensionLabelType dimensionLabel /** dimension label */ 
            );
            /**Returns  the delay evaluation preference.  This preference is used in the UI to indicate 
                whether the sketch should be evaluated when a constraint is
                added to the sketch. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool DelayEvaluation
            (
            );
            /**Sets  the delay evaluation preference.  This preference is used in the UI to indicate 
                whether the sketch should be evaluated when a constraint is
                added to the sketch. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetDelayEvaluation
            (
                bool delayEvaluation /** delay evaluation */ 
            );
            /**Returns  the display object color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayObjectColor
            (
            );
            /**Sets  the display object color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetDisplayObjectColor
            (
                bool displayObjColor /** display obj color */ 
            );
            /**Returns  the continuous auto dimensioning state in sketch preferences. Newly created sketch
                gets continuous auto dimensioning state from sketch preference. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ContinuousAutoDimensioning
            (
            );
            /**Sets  the continuous auto dimensioning state in sketch preferences. Newly created sketch
                gets continuous auto dimensioning state from sketch preference. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetContinuousAutoDimensioning
            (
                bool continAutoDim /** contin auto dim */ 
            );
            /**Returns  the create inferred constraints 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateInferredConstraints
            (
            );
            /**Sets  the create inferred constraints 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetCreateInferredConstraints
            (
                bool createInferredConstraints /** create inferred constraints */ 
            );
            /**Returns  the flag of auto-dimensions to arc centre. If it is set to true, then we will infer auto-dimensions to 
                arc centre when running auto-dimension 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool AutoDimensionsToArcCenter
            (
            );
            /**Sets  the flag of auto-dimensions to arc centre. If it is set to true, then we will infer auto-dimensions to 
                arc centre when running auto-dimension 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetAutoDimensionsToArcCenter
            (
                bool toArcCenter /** toarccenter */ 
            );
            /**Returns  the update sketch only preference.  This preference is used to indicate 
                whether only the sketch should be updated while sketching using Direct Sketch. When 
                this preference is set to false, an update will propagate through the whole model 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UpdateSketchOnly
            (
            );
            /**Sets  the update sketch only preference.  This preference is used to indicate 
                whether only the sketch should be updated while sketching using Direct Sketch. When 
                this preference is set to false, an update will propagate through the whole model 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUpdateSketchOnly
            (
                bool delayModelUpdate /** delay model update */ 
            );
            /**Returns  the display constraint symbols preference 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayConstraintSymbols
            (
            );
            /**Sets  the display constraint symbols preference 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetDisplayConstraintSymbols
            (
                bool displayConstraintSymbols /** display constraint symbols */ 
            );
            /**Returns  the sketch solving tolerance flag. Controls whether to use user input for sketch tolerance
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool UseSolvingTolerance
            (
            );
            /**Sets  the sketch solving tolerance flag. Controls whether to use user input for sketch tolerance
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetUseSolvingTolerance
            (
                bool useTolerance /** usetolerance */ 
            );
            /**Returns  the sketch solving tolerance. This specifies the maximum allowable distance when solving the sketch
                    constraints. The tolerance value must be greater than 1e-08. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double SolvingTolerance
            (
            );
            /**Sets  the sketch solving tolerance. This specifies the maximum allowable distance when solving the sketch
                    constraints. The tolerance value must be greater than 1e-08. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSolvingTolerance
            (
                double tolerance /** tolerance */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
