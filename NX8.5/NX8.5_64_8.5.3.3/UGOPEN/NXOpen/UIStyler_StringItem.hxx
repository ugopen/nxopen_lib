#ifndef NXOpen_UISTYLER_STRINGITEM_HXX_INCLUDED
#define NXOpen_UISTYLER_STRINGITEM_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_StringItem.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UIStyler
    {
        class StringItem;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        class StringItemImpl;
        /** Represents a StringItem for UI Styler. 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  StringItem : public UIStyler::StylerItem
        {
            public: /**Called when a dialog user enters a character string and presses Return. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Activate;
            private: StringItemImpl * m_stringitem_impl;
            /// \cond NX_NO_DOC 
            public: explicit StringItem(void *ptr);
            /// \endcond 
            /**Registers activate callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddActivateHandler
            (
                const NXOpen::UIStyler::StringItem::Activate&  activateevent /** activateevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /**Specifies a filename that contains a bitmap definition. The filename must contain a UBM, XPM, or BMP 
                extension. When you use this field, the system displays a bitmap for this dialog item instead of a text 
                label. When a bitmap is present, the system uses the text label as tooltip text when a user places the 
                mouse cursor over the bitmap. We recommend that you use a 16x16 bitmap for this dialog item.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBitmap
            (
                const NXString & strBitmap /** Filename with .ubm, .xpm, or .bmp extension that contains bitmap definition   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies a filename that contains a bitmap definition. The filename must contain a UBM, XPM, or BMP 
                extension. When you use this field, the system displays a bitmap for this dialog item instead of a text 
                label. When a bitmap is present, the system uses the text label as tooltip text when a user places the 
                mouse cursor over the bitmap. We recommend that you use a 16x16 bitmap for this dialog item.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetBitmap
            (
                const char * strBitmap /** Filename with .ubm, .xpm, or .bmp extension that contains bitmap definition   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets  the string value for this dialog item. It can be the initial value that is programmatically 
                defined, or interactively entered by the user.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetItemValue
            (
                const NXString & itemVal /** String value */
            );
            /**Sets  the string value for this dialog item. It can be the initial value that is programmatically 
                defined, or interactively entered by the user.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetItemValue
            (
                const char * itemVal /** String value */
            );
            /**Returns  the string value for this dialog item. It can be the initial value that is programmatically 
                defined, or interactively entered by the user.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ItemValue
            (
            );
            /**Specifies descriptive text to display for the dialog item. 
                It should describe the dialog item's intended use. If you specify a bitmap for this dialog item, 
                    it uses this text as tooltip text.
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLabel
            (
                const NXString & strLabel /** String label to display on the left side of the text field   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies descriptive text to display for the dialog item. 
                It should describe the dialog item's intended use. If you specify a bitmap for this dialog item, 
                    it uses this text as tooltip text.
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetLabel
            (
                const char * strLabel /** String label to display on the left side of the text field   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies the sensitivity of the dialog item. When you set sensitivity to False, it grays out the 
                dialog item. This indicates that the dialog item exists but is not active.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /** TRUE if sensitive, FALSE if insensitive */
            );
            /** To get senstivity of string control @return  TRUE if sensitive, FALSE if insensitive 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetSensitivity
            (
            );
            /**Sets  the visibility of the dialog item 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /** TRUE if visible, FALSE if invisible */
            );
            /**Returns  the visibility of the dialog item 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Visibility
            (
            );
            /** Indicates that this dialog item is receiving keyboard focus 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFocus
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
