#ifndef NXOpen_GEOMETRICUTILITIES_RECTANGULARFRAMEBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_RECTANGULARFRAMEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_RectangularFrameBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_RectangularFrameBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class RectangularFrameBuilder;
    }
    class CoordinateSystem;
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class SelectSmartObject;
    namespace GeometricUtilities
    {
        class _RectangularFrameBuilderBuilder;
        class RectangularFrameBuilderImpl;
        /** Rectangular frame builder 
         <br>  Created in NX7.5.1.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  RectangularFrameBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Anchor location types */
            public: enum AnchorLocationType
            {
                AnchorLocationTypeTopLeft/** Top left position */,
                AnchorLocationTypeTopCenter/** Top center position */,
                AnchorLocationTypeTopRight/** Top right position */,
                AnchorLocationTypeMiddleLeft/** Middle left position */,
                AnchorLocationTypeMiddleCenter/** Middle center position */,
                AnchorLocationTypeMiddleRight/** Middle right position */,
                AnchorLocationTypeBottomLeft/** Bottom left position */,
                AnchorLocationTypeBottomCenter/** Bottom center position */,
                AnchorLocationTypeBottomRight/** Bottom right position */
            };

            private: RectangularFrameBuilderImpl * m_rectangularframebuilder_impl;
            private: friend class  _RectangularFrameBuilderBuilder;
            protected: RectangularFrameBuilder();
            public: ~RectangularFrameBuilder();
            /**Returns  the anchor location 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::RectangularFrameBuilder::AnchorLocationType AnchorLocation
            (
            );
            /**Sets  the anchor location 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAnchorLocation
            (
                NXOpen::GeometricUtilities::RectangularFrameBuilder::AnchorLocationType anchorLocation /** anchorlocation */ 
            );
            /**Returns  the point or coordinate system to define initial location and orientation of the frame 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectSmartObject * AnchorLocator
            (
            );
            /**Returns  the coordinate system 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * CoordinateSystem
            (
            );
            /**Sets  the coordinate system 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCoordinateSystem
            (
                NXOpen::CoordinateSystem * coordinateSystem /** coordinatesystem */ 
            );
            /**Returns  the length 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Length
            (
            );
            /**Returns  the height 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the width scale 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: double WScale
            (
            );
            /**Sets  the width scale 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: void SetWScale
            (
                double wScale /** wscale */ 
            );
            /**Returns  the shear 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Shear
            (
            );
            /** Updates the frame based on coordinate system. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: void UpdateOnCoordinateSystem
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
