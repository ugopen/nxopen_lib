#ifndef NXOpen_FIELDS_FIELDVARIABLE_HXX_INCLUDED
#define NXOpen_FIELDS_FIELDVARIABLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_FieldVariable.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class FieldVariable;
    }
    namespace Fields
    {
        class NameVariable;
    }
    class NXObject;
    class Unit;
    namespace Fields
    {
        class _FieldVariableBuilder;
        class FieldVariableImpl;
        /**  @brief  Represents the Field Variables  

         
             <br> A variable is a symbol on whose value a function, polynomial, etc., depends. For example,
            the variables in the function <b><tt>f(x,y)</tt></b> are <b><tt>x</tt></b> and <b><tt>y</tt></b>. A
            function having a single variable is said to be univariate, one having two variables is said to be
            bivariate, and one having three or more variables is said to be multivariate.  In NX, variables in
            this sense are specifically referred to as independent variables. <br> 

             <br> In NX, variables are also used to describe the output of a function; these are referred to
            as the <b><tt>dependent variables</tt></b>.  In NX, a field with a single dependent variable is
            called a <b><tt>scalar field</tt></b>, with three variables of the same measure a <b><tt>vector field</tt></b>,
            all others are simply referred to as fields. <br> 

             <br> In NX, all variables have a measure and associated unit type specification (see also
            @link Unit Unit@endlink ). <br> 
            
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  FieldVariable : public NXObject
        {
            /** Variable Types */
            public: enum Type
            {
                TypeUnknown = -1/** unknown */ ,
                TypeIndependent/** independent */ ,
                TypeDependent/** dependent */ 
            };

            /** Variable value Type */
            public: enum ValueType
            {
                ValueTypeReal/** real */,
                ValueTypeImaginary/** imaginary */,
                ValueTypeComplexRealImaginary/** complex_real_imaginary */,
                ValueTypeComplexMagnitudePhase/** complex_magnitude_phase */
            };

             /** Variable Bounds structure */
            public:
            struct  Bounds
            {
                public: /** true if minimum bound is defined */bool IsMinimumDefined;
                public: /** true if minimum bound is inclusive */bool IsMinimumInclusive;
                public: /** minimum bound value */double MinimumValue;
                public: /** true if maximum bound is defined */bool IsMaximumDefined;
                public: /** true if maximum bound is inclusive */bool IsMaximumInclusive;
                public: /** maximum bound value */double MaximumValue;
                public: Bounds() :
                    IsMinimumDefined(),
                    IsMinimumInclusive(),
                    MinimumValue(),
                    IsMaximumDefined(),
                    IsMaximumInclusive(),
                    MaximumValue()
                {
                }
                /** Constructor for the Bounds struct. */ 
                public: Bounds(bool isMinimumDefinedInitial /** true if minimum bound is defined */, 
                        bool isMinimumInclusiveInitial /** true if minimum bound is inclusive */, 
                        double minimumValueInitial /** minimum bound value */, 
                        bool isMaximumDefinedInitial /** true if maximum bound is defined */, 
                        bool isMaximumInclusiveInitial /** true if maximum bound is inclusive */, 
                        double maximumValueInitial /** maximum bound value */) :
                    IsMinimumDefined(isMinimumDefinedInitial),
                    IsMinimumInclusive(isMinimumInclusiveInitial),
                    MinimumValue(minimumValueInitial),
                    IsMaximumDefined(isMaximumDefinedInitial),
                    IsMaximumInclusive(isMaximumInclusiveInitial),
                    MaximumValue(maximumValueInitial)
                {
                }
            };

            private: FieldVariableImpl * m_fieldvariable_impl;
            private: friend class  _FieldVariableBuilder;
            protected: FieldVariable();
            public: ~FieldVariable();
            /**Returns  the units for this variable, which can be NULL if the variable is unitless.  
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Unit * Units
            (
            );
            /**Returns  the name variable for this variable.  
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::NameVariable * NameVariable
            (
            );
            /**Returns  the type of variable.  
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable::Type VariableType
            (
            );
            /**Returns  the variable's minimum and maximum bounds.
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable::Bounds VariableBounds
            (
            );
            /**Returns  the variable's default value which is value used when evaluating a field and no value is specified  
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: double DefaultValue
            (
            );
            /**Returns  the number of points used for this variable when generating a table    
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: int NumPoints
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
