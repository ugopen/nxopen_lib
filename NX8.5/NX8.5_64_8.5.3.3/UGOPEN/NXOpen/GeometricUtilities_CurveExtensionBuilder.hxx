#ifndef NXOpen_GEOMETRICUTILITIES_CURVEEXTENSIONBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CURVEEXTENSIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_CurveExtensionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveExtensionBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class CurveExtensionBuilder;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    namespace GeometricUtilities
    {
        class _CurveExtensionBuilderBuilder;
        class CurveExtensionBuilderImpl;
        /** Spline extension builder class. This class allows natural extension or trimming of a b-spline cuve. 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  CurveExtensionBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Spline extension options */
            public: enum ExtensionOption
            {
                ExtensionOptionNone/** No extension */,
                ExtensionOptionByValue/** Extend by value */,
                ExtensionOptionByPoint/** Extend up to a point */
            };

            private: CurveExtensionBuilderImpl * m_curveextensionbuilder_impl;
            private: friend class  _CurveExtensionBuilderBuilder;
            protected: CurveExtensionBuilder();
            public: ~CurveExtensionBuilder();
            /**Returns  the flag indicating if extension is symmetry. Symmetric extension follows start extension values 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsSymmetric
            (
            );
            /**Sets  the flag indicating if extension is symmetry. Symmetric extension follows start extension values 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetSymmetric
            (
                bool isSymmetric /** issymmetric */ 
            );
            /**Returns  the extension options 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveExtensionBuilder::ExtensionOption StartExtensionOption
            (
            );
            /**Sets  the extension options 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetStartExtensionOption
            (
                NXOpen::GeometricUtilities::CurveExtensionBuilder::ExtensionOption extensionOption /** extensionoption */ 
            );
            /**Returns  the start value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StartValue
            (
            );
            /**Returns  the point up to which start is extended 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * StartPoint
            (
            );
            /**Sets  the point up to which start is extended 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetStartPoint
            (
                NXOpen::Point * startPoint /** startpoint */ 
            );
            /**Returns  the extension options 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveExtensionBuilder::ExtensionOption EndExtensionOption
            (
            );
            /**Sets  the extension options 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetEndExtensionOption
            (
                NXOpen::GeometricUtilities::CurveExtensionBuilder::ExtensionOption extensionOption /** extensionoption */ 
            );
            /**Returns  the end value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EndValue
            (
            );
            /**Returns  the point up to which end is extended 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * EndPoint
            (
            );
            /**Sets  the point up to which end is extended 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetEndPoint
            (
                NXOpen::Point * endPoint /** endpoint */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
