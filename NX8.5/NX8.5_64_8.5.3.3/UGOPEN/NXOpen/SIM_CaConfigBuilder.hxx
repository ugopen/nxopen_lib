#ifndef NXOpen_SIM_CACONFIGBUILDER_HXX_INCLUDED
#define NXOpen_SIM_CACONFIGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_CaConfigBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SIM_CaConfigBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        class CaConfigBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class SelectTaggedObjectList;
    namespace SIM
    {
        class _CaConfigBuilderBuilder;
        class CaConfigBuilderImpl;
        /** This class is used for replace geometry and export a spf file.
                A call to @link CaConfigBuilder::DoReplace CaConfigBuilder::DoReplace@endlink  will replace the geometry.  @link CaConfigBuilder::ExportSpf  CaConfigBuilder::ExportSpf @endlink  is used to export a spf file.
                Calling @link Builder::Commit Builder::Commit@endlink  on this builder will only return NULL.
             <br> Use the @link Part Part@endlink  class to create a CaConfigBuilder object.  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_SIMEXPORT  CaConfigBuilder : public Builder
        {
            /** The object to replaces with types */
            public: enum ObjectToReplaceWithTypes
            {
                ObjectToReplaceWithTypesNothing/** nothing */ ,
                ObjectToReplaceWithTypesConvexHull/** convex hull */ ,
                ObjectToReplaceWithTypesBoundingSphere/** bounding sphere */ ,
                ObjectToReplaceWithTypesBoundingBlock/** bounding block */ ,
                ObjectToReplaceWithTypesBoundingCylinder/** bounding cylinder */ 
            };

            private: CaConfigBuilderImpl * m_caconfigbuilder_impl;
            private: friend class  _CaConfigBuilderBuilder;
            protected: CaConfigBuilder();
            public: ~CaConfigBuilder();
            /**Returns  the object to replace 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * ObjectToReplace
            (
            );
            /**Returns  the object to replace with 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::CaConfigBuilder::ObjectToReplaceWithTypes ReplaceWith
            (
            );
            /**Sets  the object to replace with 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetReplaceWith
            (
                NXOpen::SIM::CaConfigBuilder::ObjectToReplaceWithTypes objectToReplaceWith /** objecttoreplacewith */ 
            );
            /**Returns  the coordinate system 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * CoordSystem
            (
            );
            /**Sets  the coordinate system 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCoordSystem
            (
                NXOpen::CoordinateSystem * coordSystem /** coordsystem */ 
            );
            /** Replace the simplify bodies 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void DoReplace
            (
            );
            /**Returns  the chain element index 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int ChainElementIndex
            (
            );
            /**Sets  the chain element index 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetChainElementIndex
            (
                int index /** index */ 
            );
            /**Returns  the chain index 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int ChainIndex
            (
            );
            /**Sets  the chain index 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetChainIndex
            (
                int index /** index */ 
            );
            /**Returns  the collision pair index 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int CollisionPairIndex
            (
            );
            /**Sets  the collision pair index 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCollisionPairIndex
            (
                int index /** index */ 
            );
            /**Returns  the protection area element index 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int ProtectionAreaElementIndex
            (
            );
            /**Sets  the protection area element index 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetProtectionAreaElementIndex
            (
                int index /** index */ 
            );
            /**Returns  the protection area index 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int ProtectionAreaIndex
            (
            );
            /**Sets  the protection area index 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetProtectionAreaIndex
            (
                int index /** index */ 
            );
            /**Returns  the output filename 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString FileName
            (
            );
            /**Sets  the output filename 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetFileName
            (
                const NXString & name /** the output new name */
            );
            /**Sets  the output filename 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetFileName
            (
                const char * name /** the output new name */
            );
            /**Returns  the output to listing window 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ListOutput
            (
            );
            /**Sets  the output to listing window 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetListOutput
            (
                bool output /** output */ 
            );
            /**Returns  the delete chains at start 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool DeleteChainsAtStart
            (
            );
            /**Sets  the delete chains at start 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDeleteChainsAtStart
            (
                bool deleteChainsAtStart /** deletechainsatstart */ 
            );
            /**Returns  the facet tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double FacetTolerance
            (
            );
            /**Sets  the facet tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetFacetTolerance
            (
                double facetTolerance /** facettolerance */ 
            );
            /** Export to Sinumerik Spf file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void ExportSpf
            (
                const NXString & targetNode /** The name of the node to export to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Export to Sinumerik Spf file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void ExportSpf
            (
                const char * targetNode /** The name of the node to export to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
