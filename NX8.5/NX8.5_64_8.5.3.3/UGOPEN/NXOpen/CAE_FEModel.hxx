#ifndef NXOpen_CAE_FEMODEL_HXX_INCLUDED
#define NXOpen_CAE_FEMODEL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_FEModel.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_BaseFEModel.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class FEModel;
    }
    namespace CAE
    {
        class AbstractionManager;
    }
    namespace CAE
    {
        class BaseFEModel;
    }
    namespace CAE
    {
        class LaminateGlobalLayupMgr;
    }
    class TaggedObject;
    namespace CAE
    {
        class _FEModelBuilder;
        class FEModelImpl;
        /**  @brief  This class represents a Finite Element Model.
                          This class will act as the gateway to the 
                          Finite Element Nodes (@link CAE::FENode CAE::FENode@endlink ) and Elements (@link CAE::FEElement CAE::FEElement@endlink ) in the model. 
                          Only one instance of this class will exist in each fem part file 

          
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  FEModel : public CAE::BaseFEModel
        {
             /** Structure to specify the Node, Element, and Physical property table start ids and offsets for use in @link CAE::FEModel::AppendFemodel CAE::FEModel::AppendFemodel@endlink  */
            public:
            struct  IdSpecificationObject
            {
                public: /** String to prepend to fem object names such as element collector, material and section */NXString FemObjectPrependName;
                public: /** Start id to use for imported nodes */int NodeStartId;
                public: /** If true node_start_id will be used as an offset for imported node ids */bool NodeIdOffset;
                public: /** Start id to use for imported elements */int ElementStartId;
                public: /** If true element_start_id will be used as an offset for imported element ids */bool ElementIdOffset;
                public: /** Start id to use for imported physical property tables */int PhysicalPropertyTableStartId;
                public: /** If true physical_property_table_start_id will be used as an offset for imported physical property table ids */bool PhysicalPropertyTableIdOffset;
                public: IdSpecificationObject() :
                    FemObjectPrependName(),
                    NodeStartId(),
                    NodeIdOffset(),
                    ElementStartId(),
                    ElementIdOffset(),
                    PhysicalPropertyTableStartId(),
                    PhysicalPropertyTableIdOffset()
                {
                }
                /** Constructor for the IdSpecificationObject struct. */ 
                public: IdSpecificationObject(const NXString &femObjectPrependNameInitial /** String to prepend to fem object names such as element collector, material and section */, 
                        int nodeStartIdInitial /** Start id to use for imported nodes */, 
                        bool nodeIdOffsetInitial /** If true node_start_id will be used as an offset for imported node ids */, 
                        int elementStartIdInitial /** Start id to use for imported elements */, 
                        bool elementIdOffsetInitial /** If true element_start_id will be used as an offset for imported element ids */, 
                        int physicalPropertyTableStartIdInitial /** Start id to use for imported physical property tables */, 
                        bool physicalPropertyTableIdOffsetInitial /** If true physical_property_table_start_id will be used as an offset for imported physical property table ids */) :
                    FemObjectPrependName(femObjectPrependNameInitial),
                    NodeStartId(nodeStartIdInitial),
                    NodeIdOffset(nodeIdOffsetInitial),
                    ElementStartId(elementStartIdInitial),
                    ElementIdOffset(elementIdOffsetInitial),
                    PhysicalPropertyTableStartId(physicalPropertyTableStartIdInitial),
                    PhysicalPropertyTableIdOffset(physicalPropertyTableIdOffsetInitial)
                {
                }
            };

            private: FEModelImpl * m_femodel_impl;
            private: friend class  _FEModelBuilder;
            protected: FEModel();
            public: ~FEModel();
            /** Finds the @link  NXObject   NXObject @endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * Find
            (
                const NXString & journalIdentifier /** Journal identifier of the object */
            );
            /** Finds the @link  NXObject   NXObject @endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::TaggedObject * Find
            (
                const char * journalIdentifier /** Journal identifier of the object */
            );
            /** This method appends finite element model data from a source fem
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AppendFemodel
            (
                NXOpen::CAE::FEModel * sourceFem /** Source finite element model to append data from */,
                const NXOpen::CAE::FEModel::IdSpecificationObject & idSpec /** Node, Element, and Physical property table id specification object */
            );


            /** Returns the laminate global layup manager belonging to the FEM. 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::LaminateGlobalLayupMgr *GlobalLayupMgr();
            /** Returns the circular imprint collection belonging to this fem part 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::CAE::AbstractionManager *AbstractionMgr();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
