#ifndef NXOpen_PREFERENCES_PARTSHEETMETAL_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTSHEETMETAL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartSheetmetal.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/NXColor.hxx>
#include <NXOpen/SheetmetalFeatureProperty.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class PartSheetmetal;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    class Expression;
    class NXColor;
    namespace Preferences
    {
        class PartSheetmetalImpl;
        /** Represents the NX Sheetmetal preferences applicable to part  <br> Preferences are in control of the part. They can not be created but can only be changed.  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  PartSheetmetal
        {
            /** This enum represents the bend definition method options in preferences. 
                         <br> 
                                This is used to specify the bend definition method. You can choose to 
                                use a global Neutral Factor value OR a Bend Table OR a Bend 
                                Allowance Formula OR a Material Table.
                         <br> 
                    
             <br>  Created in NX5.0.0.  <br>  
            */
            public: enum BendDefinitionMethodOptions
            {
                BendDefinitionMethodOptionsNeutralFactorValue/** The neutral factor value method*/,
                BendDefinitionMethodOptionsBendTable/** The bend table method*/,
                BendDefinitionMethodOptionsBendAllowanceFormula/** The bend allowance formula method*/,
                BendDefinitionMethodOptionsMaterialTable/** The material table method*/,
                BendDefinitionMethodOptionsToolTable/** The tool table method*/
            };

            /** The members of the following enumerated type are used to identify
                        object types to the FlatPattern API. These are not the usual
                        NX object types; they are ordinary NX objects that are known to
                        the flat pattern feature for the type of outline they provide to
                        a bend region, joggle region, or lightening hole. */
            public: enum FlatPatternObjectType
            {
                FlatPatternObjectTypeBendCenterLine/** Deprecated */,
                FlatPatternObjectTypeBendUpCenterLine/** bend up center line */ ,
                FlatPatternObjectTypeBendDownCenterLine/** bend down center line */ ,
                FlatPatternObjectTypeBendTangentLine/** bend tangent line */ ,
                FlatPatternObjectTypeOuterMoldLine/** outer mold line */ ,
                FlatPatternObjectTypeInnerMoldLine/** inner mold line */ ,
                FlatPatternObjectTypeExteriorCurves/** exterior curves */ ,
                FlatPatternObjectTypeInteriorCurves/** Deprecated */,
                FlatPatternObjectTypeInteriorCutoutCurves/** interior cutout curves */ ,
                FlatPatternObjectTypeInteriorFeatureCurves/** interior feature curves */ ,
                FlatPatternObjectTypeStrikePoint/** strike point */ ,
                FlatPatternObjectTypeLighteningHoleCenter/** lightening hole center */ ,
                FlatPatternObjectTypeJoggleLine/** joggle line */ ,
                FlatPatternObjectTypeAddedTopGeometry/** added top geometry */ ,
                FlatPatternObjectTypeAddedBottomGeometry/** added bottom geometry */ ,
                FlatPatternObjectTypeToolMarker/** tool marker */ 
            };

             /** The members of the following structure are the display data for an
                        object in a flat pattern drawing member view. */
            public:
            struct  FlatPatternObjectTypeDisplay
            {
                public: /** Object type */NXOpen::Preferences::PartSheetmetal::FlatPatternObjectType Type;
                public: /** Enabled status for the object type */int IsEnabled;
                public: /** Object color */NXColor* Color;
                public: /** Object Layer */int Layer;
                public: /** Object font */NXOpen::DisplayableObject::ObjectFont Font;
                public: /** Object width */NXOpen::DisplayableObject::ObjectWidth Width;
                public: FlatPatternObjectTypeDisplay() :
                    Type((NXOpen::Preferences::PartSheetmetal::FlatPatternObjectType)0),
                    IsEnabled(),
                    Color(),
                    Layer(),
                    Font((NXOpen::DisplayableObject::ObjectFont)0),
                    Width((NXOpen::DisplayableObject::ObjectWidth)0)
                {
                }
                /** Constructor for the FlatPatternObjectTypeDisplay struct. */ 
                public: FlatPatternObjectTypeDisplay(NXOpen::Preferences::PartSheetmetal::FlatPatternObjectType typeInitial /** Object type */, 
                        int isEnabledInitial /** Enabled status for the object type */, 
                        NXColor* colorInitial /** Object color */, 
                        int layerInitial /** Object Layer */, 
                        NXOpen::DisplayableObject::ObjectFont fontInitial /** Object font */, 
                        NXOpen::DisplayableObject::ObjectWidth widthInitial /** Object width */) :
                    Type(typeInitial),
                    IsEnabled(isEnabledInitial),
                    Color(colorInitial),
                    Layer(layerInitial),
                    Font(fontInitial),
                    Width(widthInitial)
                {
                }
            };

             /** The members of the following structure are the display data for a
                        callout in a flat pattern drawing member view. */
            public:
            struct  FlatPatternCalloutTypeDisplay
            {
                public: /** The name of the callout type.
                                    The string is one returned by the 
                                    get_callout_data method, or can
                                    be hand-coded as the application name 'dot' the callout
                                    name, like this:
                                    "FlatPatternView.BendRadius". Neither name is
                                    case sensitive and blanks are not significant. This type
                                    of hand-coded callout type is usable as long as the
                                    callout type name is unique within the application name. 
                                    Beware of changing the defaults and loading old parts. */NXString Type;
                public: /** Enabled status for the callout type. */int IsEnabled;
                public: /** dialog name for the callout type. */NXString Name;
                public: FlatPatternCalloutTypeDisplay() :
                    Type(),
                    IsEnabled(),
                    Name()
                {
                }
                /** Constructor for the FlatPatternCalloutTypeDisplay struct. */ 
                public: FlatPatternCalloutTypeDisplay(const NXString &typeInitial /** The name of the callout type.
                                            The string is one returned by the 
                                            get_callout_data method, or can
                                            be hand-coded as the application name 'dot' the callout
                                            name, like this:
                                            "FlatPatternView.BendRadius". Neither name is
                                            case sensitive and blanks are not significant. This type
                                            of hand-coded callout type is usable as long as the
                                            callout type name is unique within the application name. 
                                            Beware of changing the defaults and loading old parts. */, 
                        int isEnabledInitial /** Enabled status for the callout type. */, 
                        const NXString &nameInitial /** dialog name for the callout type. */) :
                    Type(typeInitial),
                    IsEnabled(isEnabledInitial),
                    Name(nameInitial)
                {
                }
            };

            private: PartSheetmetalImpl * m_partsheetmetal_impl;
            private: NXOpen::Preferences::PartPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PartSheetmetal(NXOpen::Preferences::PartPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PartSheetmetal();
            /** RETURNS the thickness expression  @return  expression object for sheet thickness 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetThickness
            (
            );
            /** THE thickness value string 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetThickness
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & thickness /** default thickness value for NX Sheetmetal solids   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** THE thickness value string 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetThickness
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * thickness /** default thickness value for NX Sheetmetal solids   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the bend radius expression  @return  expression object for radius of bend faces
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetBendRadius
            (
            );
            /** The bend radius value 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetBendRadius
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & bendRadius /** default bend radius value for bend faces   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** The bend radius value 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetBendRadius
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * bendRadius /** default bend radius value for bend faces   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the bend relief depth  @return  expression object for depth of bend relief 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetBendReliefDepth
            (
            );
            /** THE bend relief depth value 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetBendReliefDepth
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & bendReliefDepth /** default depth value for bend relief   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** THE bend relief depth value 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetBendReliefDepth
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * bendReliefDepth /** default depth value for bend relief   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the bend relief width  @return  expression object for width of bend relief 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetBendReliefWidth
            (
            );
            /** THE bend relief depth value 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetBendReliefWidth
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & bendReliefWidth /** default width value for bend relief   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** THE bend relief depth value 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetBendReliefWidth
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * bendReliefWidth /** default width value for bend relief   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the neutral factor  @return  expression object for neutral factor of bend areas 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetNeutralFactor
            (
            );
            /** THE bend relief depth value 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetNeutralFactor
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & neutralFactor /** default neutral factor value for bend relief   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** THE bend relief depth value 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetNeutralFactor
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * neutralFactor /** default neutral factor value for bend relief   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the out corner treatment value for Flat as Solid operations  @return  expression object for out corner treatment value 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetOuterCornerTreatmentValue
            (
            );
            /** THE outer corner treatment value for Flat as Solid operations 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetOuterCornerTreatmentValue
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & outerCornerTreatment /** default value for out corner treatment   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** THE outer corner treatment value for Flat as Solid operations 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetOuterCornerTreatmentValue
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * outerCornerTreatment /** default value for out corner treatment   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the outer corner treatment type in Flat as Solid operation  @return  outer corner treatment type 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Features::SheetMetal::FeatureProperty GetOuterCornerTreatmentType
            (
            );
            /** SETS the outer corner treatment type in Flat as Solid operation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetOuterCornerTreatmentType
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                NXOpen::Features::SheetMetal::FeatureProperty outerCornerTreatmentType /** outer corner treatment type */
            );
            /** RETURNS the inner corner treatment value for Flat as Solid operations  @return  expression object for inner corner treatment value 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetInnerCornerTreatmentValue
            (
            );
            /** SETS the inner corner treatment value for Flat as Solid operations 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetInnerCornerTreatmentValue
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & innerCornerTreatment /** default value for inner corner treatment   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** SETS the inner corner treatment value for Flat as Solid operations 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetInnerCornerTreatmentValue
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * innerCornerTreatment /** default value for inner corner treatment   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** RETURNS the inner corner treatment type in Flat as Solid operation  @return  outer corner treatment type 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Features::SheetMetal::FeatureProperty GetInnerCornerTreatmentType
            (
            );
            /** SETS the inner corner treatment type in Flat as Solid operation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetInnerCornerTreatmentType
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                NXOpen::Features::SheetMetal::FeatureProperty innerCornerTreatmentType /** outer corner treatment type */
            );
            /** RETURNS the flag indicating whether B-Splines are simplified as part of the Flat Solid creation @return  flag  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: bool GetIsBsplineSimplifiedInFlatSolid
            (
            );
            /** SETS the flag indicating whether or not B-Splines are simplified as part of the Flat Solid creation
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetIsBsplineSimplifiedInFlatSolid
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                bool isBsplineSimplifiedInFlatSolid /** flag  */
            );
            /** RETURNS the flag indicating whether or not system generated bend releifs are removed as part of the Flat Solid creation @return  flag  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: bool GetIsSystemGeneratedBendReliefRemovedInFlatSolid
            (
            );
            /** SETS the flag indicating whether or not system generated bend releifs are removed as part of the Flat Solid creation
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetIsSystemGeneratedBendReliefRemovedInFlatSolid
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                bool isSystemGeneratedBendReliefRemoved /** flag  */
            );
            /** RETURNS the minimum arc tolerance during Flat Solid simplification  @return  flag  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: double GetMinimumArcToleranceInFlatSolid
            (
            );
            /** SETS the minimum arc tolerance during Flat Solid simplification 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetMinimumArcToleranceInFlatSolid
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                double minimumArcToleranceInFlatSolid /** flag  */
            );
            /** RETURNS the deviational tolerance during Flat Solid simplification  @return  flag  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: double GetDeviationalToleranceInFlatSolid
            (
            );
            /** SETS the deviational tolerance during Flat Solid simplification 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetDeviationalToleranceInFlatSolid
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                double deviationalToleranceInFlatSolid /** flag  */
            );
            /** RETURNS the bend definition method  @return  bend definition method option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Preferences::PartSheetmetal::BendDefinitionMethodOptions GetBendDefinitionMethodOption
            (
            );
            /** SETS the bend definition method 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetBendDefinitionMethodOption
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                NXOpen::Preferences::PartSheetmetal::BendDefinitionMethodOptions bendDefinitionMethod /** bend definition method option */
            );
            /** RETURNS the bend table name  @return  bend table name
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXString GetBendTable
            (
            );
            /** SETS the bend table name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetBendTable
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & bendTable /** bend table name*/
            );
            /** SETS the bend table name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetBendTable
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * bendTable /** bend table name*/
            );
            /** RETURNS the bend allowance formula  @return  bend allowance formula
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXString GetBendAllowanceFormula
            (
            );
            /** SETS the bend allowance formula 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetBendAllowanceFormula
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & bendAllowanceFormula /** bend allowance formula*/
            );
            /** SETS the bend allowance formula 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetBendAllowanceFormula
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * bendAllowanceFormula /** bend allowance formula*/
            );
            /** RETURNS the material names defined in the material standards table  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: std::vector<NXString> GetMaterialNames
            (
            );
            /** RETURNS the material name saved with the part  @return  The name of the material saved with the part
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXString GetMaterial
            (
            );
            /** RETURNS the material name saved with the part  @return property Values 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: std::vector<NXString> GetMaterialProperties
            (
                const NXString & materialName /**material Name */,
                std::vector<NXString> & propertyNames /**property Names */
            );
            /** RETURNS the material name saved with the part  @return property Values 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            std::vector<NXString> GetMaterialProperties
            (
                const char * materialName /**material Name */,
                std::vector<NXString> & propertyNames /**property Names */
            );
            /** The material standard 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetMaterial
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & standardName /** The name of a material from the material standards file */
            );
            /** The material standard 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetMaterial
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * standardName /** The name of a material from the material standards file */
            );
            /** Commits and applies all the settings done with set_callout_type_display
                        and set_object_type_display. It must be called after a sequence of calls
                        to those methods to cause the view to update. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void Commit
            (
            );
            /** Returns the display data for a flat pattern object type.   @return  The display data for the flat pattern object type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Preferences::PartSheetmetal::FlatPatternObjectTypeDisplay GetFlatPatternObjectTypeDisplay
            (
                NXOpen::Preferences::PartSheetmetal::FlatPatternObjectType objectType /** The object type for which to return the display data. */
            );
            /** Sets the display data for a flat pattern object type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetFlatPatternObjectTypeDisplay
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately.*/,
                NXOpen::Preferences::PartSheetmetal::FlatPatternObjectType objectType /** The object type for which to get the display data. */,
                const NXOpen::Preferences::PartSheetmetal::FlatPatternObjectTypeDisplay & displayData /** The display data for the flat pattern object type. */
            );
            /** Returns the display data for a callout type. The name member of the
                        @link Preferences::PartFlexiblePrintedCircuitDesign::FlatPatternCalloutTypeDisplay Preferences::PartFlexiblePrintedCircuitDesign::FlatPatternCalloutTypeDisplay@endlink 
                        is separately allocated from the callout_type argument string.
                        In some cases the new string will contain an
                        extended form of the callout_type passed in, and that form should
                        be used for subsequent JA calls, without modification.  @return  The display data for the callout type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Preferences::PartSheetmetal::FlatPatternCalloutTypeDisplay GetFlatPatternCalloutTypeDisplay
            (
                const NXString & calloutType /** The name of the callout type for which to get the display data. */
            );
            /** Returns the display data for a callout type. The name member of the
                        @link Preferences::PartFlexiblePrintedCircuitDesign::FlatPatternCalloutTypeDisplay Preferences::PartFlexiblePrintedCircuitDesign::FlatPatternCalloutTypeDisplay@endlink 
                        is separately allocated from the callout_type argument string.
                        In some cases the new string will contain an
                        extended form of the callout_type passed in, and that form should
                        be used for subsequent JA calls, without modification.  @return  The display data for the callout type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            NXOpen::Preferences::PartSheetmetal::FlatPatternCalloutTypeDisplay GetFlatPatternCalloutTypeDisplay
            (
                const char * calloutType /** The name of the callout type for which to get the display data. */
            );
            /** Sets the display data for a callout type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetFlatPatternCalloutTypeDisplay
            (
                const NXString & calloutType /** The name of the callout type for which to set the display data. */,
                const NXOpen::Preferences::PartSheetmetal::FlatPatternCalloutTypeDisplay & displayData /** The display data for the callout type. */
            );
            /** Sets the display data for a callout type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetFlatPatternCalloutTypeDisplay
            (
                const char * calloutType /** The name of the callout type for which to set the display data. */,
                const NXOpen::Preferences::PartSheetmetal::FlatPatternCalloutTypeDisplay & displayData /** The display data for the callout type. */
            );
            /** Returns the types, colors, fonts, widths, and enabled status for all the
                        the available object types. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void GetFlatPatternAllObjectTypeDisplay
            (
                std::vector<NXOpen::Preferences::PartSheetmetal::FlatPatternObjectTypeDisplay> & displayData /** Array of structures with the object type display data. */
            );
            /** Returns the dialog names, identifiers, and enabled status for all the
                        available callout types. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void GetFlatPatternAllCalloutTypeDisplay
            (
                std::vector<NXOpen::Preferences::PartSheetmetal::FlatPatternCalloutTypeDisplay> & displayData /** Array of structures with the callout type display data. */
            );
            /** Returns the flag indicating whether or not maintain circular shape for holes as part of the Flat Solid creation @return  flag  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: bool GetMaintainCircularShapeForHolesInFlatSolid
            (
            );
            /** Sets the flag indicating whether or not maintain circular shape for holes as part of the Flat Solid creation
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetMaintainCircularShapeForHolesInFlatSolid
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                bool isMaintainCircularShapeForHoles /** flag  */
            );
            /** Returns the minimum tool clearance expression  @return  expression object for punch tool clearance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetMinimumToolClearance
            (
            );
            /**Sets minimum tool clearance expression 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetMinimumToolClearance
            (
                bool updateModel /** Specifies whether the model be updated immediately*/,
                const NXString & minToolClearance /** minimum tool clearance value for NX Sheetmetal model   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets minimum tool clearance expression 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetMinimumToolClearance
            (
                bool updateModel /** Specifies whether the model be updated immediately*/,
                const char * minToolClearance /** minimum tool clearance value for NX Sheetmetal model   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the minimum Web Length expression  @return  expression object for Web Length  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::Expression * GetMinimumWebLength
            (
            );
            /**Sets minimum Web Length expression 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetMinimumWebLength
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & minWebLength /** minimum Web Length value for NX Sheetmetal model   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets minimum Web Length expression 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetMinimumWebLength
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * minWebLength /** minimum Web Length value for NX Sheetmetal model   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the tool names defined in the material standards table  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: std::vector<NXString> GetToolNames
            (
            );
            /** Returns the tool name saved with the part  @return  The name of the tool saved with the part
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXString GetTool
            (
            );
            /** Returns the tool properties saved with the part  @return property Values 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: std::vector<NXString> GetToolProperties
            (
                const NXString & toolName /**tool Name */,
                std::vector<NXString> & propertyNames /**property Names */
            );
            /** Returns the tool properties saved with the part  @return property Values 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            std::vector<NXString> GetToolProperties
            (
                const char * toolName /**tool Name */,
                std::vector<NXString> & propertyNames /**property Names */
            );
            /** The tool standard 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetTool
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const NXString & standardName /** The name of a tool from the material standards file */
            );
            /** The tool standard 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetTool
            (
                bool updateModel /** Specifies whether the solid model be recomputed immediately*/,
                const char * standardName /** The name of a tool from the material standards file */
            );
            /** RETURNS the top face color.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::NXColor * GetFlexibleCableTopFaceColor
            (
            );
            /** THE top face color. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetFlexibleCableTopFaceColor
            (
                NXOpen::NXColor * topFaceColor /** topfacecolor */ 
            );
            /** RETURNS the bottom face color.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::NXColor * GetFlexibleCableBottomFaceColor
            (
            );
            /** THE bottom face color. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetFlexibleCableBottomFaceColor
            (
                NXOpen::NXColor * bottomFaceColor /** bottomfacecolor */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
