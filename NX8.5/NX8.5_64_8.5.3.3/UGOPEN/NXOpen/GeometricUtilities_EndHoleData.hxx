#ifndef NXOpen_GEOMETRICUTILITIES_ENDHOLEDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_ENDHOLEDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_EndHoleData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/GeometricUtilities_EndHoleData.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class EndHoleData;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class SelectFace;
    namespace GeometricUtilities
    {
        class _EndHoleDataBuilder;
        class EndHoleDataImpl;
        /** Represents a @link GeometricUtilities::EndHoleData GeometricUtilities::EndHoleData@endlink  
         <br>  Created in NX5.0.2.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  EndHoleData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Represents hole form options. */
            public: enum FormOptions
            {
                FormOptionsScrewClearance/** Screw clearance */,
                FormOptionsThreaded/** Threaded hole */,
                FormOptionsThrough/** Through hole - This option should not be used in NX6 and later versions. Instead of this
                                                                                 screw_clearance option should be used */
            };

            /** Represents thread length options. */
            public: enum ThreadLengthOptions
            {
                ThreadLengthOptionsDiameterx1/** 1   * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx15/** 1.5 * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx20/** 2   * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx25/** 2.5 * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx30/** 3   * (tap drill diameter) */,
                ThreadLengthOptionsStandard/** Length is standard */,
                ThreadLengthOptionsCustom/** Length is custom */,
                ThreadLengthOptionsFull/** Length is full hole depth */
            };

            /** Represents thread rotation options. */
            public: enum ThreadRotationOptions
            {
                ThreadRotationOptionsRight/** Right rotation */,
                ThreadRotationOptionsLeft/** Left rotation */
            };

            /** Represents hole depth limit options for threaded hole in end plate of hole series. */
            public: enum HoleDepthLimitOptions
            {
                HoleDepthLimitOptionsValue/** Value limit options */,
                HoleDepthLimitOptionsUntilSelected/** Until selected limit options */,
                HoleDepthLimitOptionsUntilNext/** Until next limit options */,
                HoleDepthLimitOptionsThroughBody/** Through body limit options */
            };

            private: EndHoleDataImpl * m_endholedata_impl;
            private: friend class  _EndHoleDataBuilder;
            protected: EndHoleData();
            public: ~EndHoleData();
            /**Returns  the match dim of start hole 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: bool MatchDimOfStartHole
            (
            );
            /**Sets  the match dim of start hole 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchDimOfStartHole
            (
                bool matchDimOfStartHole /** matchdimofstarthole */ 
            );
            /**Returns  the form option 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EndHoleData::FormOptions FormOption
            (
            );
            /**Sets  the form option 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFormOption
            (
                NXOpen::GeometricUtilities::EndHoleData::FormOptions formOption /** formoption */ 
            );
            /**Returns  the thread size 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXString ThreadSize
            (
            );
            /**Sets  the thread size 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadSize
            (
                const NXString & threadSize /** threadsize */ 
            );
            /**Sets  the thread size 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetThreadSize
            (
                const char * threadSize /** threadsize */ 
            );
            /**Returns  the tap drill diameter 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TapDrillDiameter
            (
            );
            /**Returns  the thread length option 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EndHoleData::ThreadLengthOptions ThreadLengthOption
            (
            );
            /**Sets  the thread length option 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadLengthOption
            (
                NXOpen::GeometricUtilities::EndHoleData::ThreadLengthOptions threadLengthOption /** threadlengthoption */ 
            );
            /**Returns  the thread depth 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadDepth
            (
            );
            /**Returns  the thread rotation 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EndHoleData::ThreadRotationOptions ThreadRotation
            (
            );
            /**Sets  the thread rotation 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadRotation
            (
                NXOpen::GeometricUtilities::EndHoleData::ThreadRotationOptions threadRotation /** threadrotation */ 
            );
            /**Returns  the fit option 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXString FitOption
            (
            );
            /**Sets  the fit option 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFitOption
            (
                const NXString & fitOption /** fitoption */ 
            );
            /**Sets  the fit option 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetFitOption
            (
                const char * fitOption /** fitoption */ 
            );
            /**Returns  the radial engage option 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXString RadialEngageOption
            (
            );
            /**Sets  the radial engage option 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRadialEngageOption
            (
                const NXString & radialEngageOption /** radialengageoption */ 
            );
            /**Sets  the radial engage option 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetRadialEngageOption
            (
                const char * radialEngageOption /** radialengageoption */ 
            );
            /**Returns  the hole diameter 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HoleDiameter
            (
            );
            /**Returns  the hole depth limit 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EndHoleData::HoleDepthLimitOptions HoleDepthLimitOption
            (
            );
            /**Sets  the hole depth limit 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleDepthLimitOption
            (
                NXOpen::GeometricUtilities::EndHoleData::HoleDepthLimitOptions holeDepthLimitOption /** holedepthlimitoption */ 
            );
            /**Returns  the until selected target - this is applicable for general hole and threaded hole type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * UntilSelectedTarget
            (
            );
            /**Returns  the hole depth 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HoleDepth
            (
            );
            /**Returns  the tip angle 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TipAngle
            (
            );
            /**Returns  the threaded relief enabled - this is applicable for threaded hole type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ThreadedReliefEnabled
            (
            );
            /**Sets  the threaded relief enabled - this is applicable for threaded hole type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadedReliefEnabled
            (
                bool threadedReliefEnabled /** threadedreliefenabled */ 
            );
            /**Returns  the relief diameter - this is applicable for threaded hole type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefDiameter
            (
            );
            /**Returns  the threaded relief depth - this is applicable for threaded hole type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefDepth
            (
            );
            /**Returns  the relief angle - this is applicable for threaded hole type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefAngle
            (
            );
            /**Returns  the threaded relief chamfer enabled - this is applicable for threaded hole type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReliefChamferEnabled
            (
            );
            /**Sets  the threaded relief chamfer enabled - this is applicable for threaded hole type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReliefChamferEnabled
            (
                bool reliefChamferEnabled /** reliefchamferenabled */ 
            );
            /**Returns  the threaded relief chamfer offset - this is applicable for threaded hole type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefChamferOffset
            (
            );
            /**Returns  the threaded relief chamfer angle - this is applicable for threaded hole type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefChamferAngle
            (
            );
            /**Returns  the screw clearance start chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: bool ScrewClearanceStartChamferEnabled
            (
            );
            /**Sets  the screw clearance start chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewClearanceStartChamferEnabled
            (
                bool screwClearenceStartChamferEnabled /** screwclearencestartchamferenabled */ 
            );
            /**Returns  the screw clearance start chamfer offset 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceStartChamferOffset
            (
            );
            /**Returns  the screw clearance start chamfer angle 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceStartChamferAngle
            (
            );
            /**Returns  the threaded start chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: bool ThreadedStartChamferEnabled
            (
            );
            /**Sets  the threaded start chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadedStartChamferEnabled
            (
                bool threadedStartChamferEnabled /** threadedstartchamferenabled */ 
            );
            /**Returns  the threaded start chamfer offset 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedStartChamferDiameter
            (
            );
            /**Returns  the threaded start chamfer angle 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedStartChamferAngle
            (
            );
            /**Returns  the screw clearance end chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: bool ScrewClearanceEndChamferEnabled
            (
            );
            /**Sets  the screw clearance end chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewClearanceEndChamferEnabled
            (
                bool screwClearanceEndChamferEnabled /** screwclearanceendchamferenabled */ 
            );
            /**Returns  the screw clearance end chamfer offset 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceEndChamferOffset
            (
            );
            /**Returns  the screw clearance end chamfer angle 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceEndChamferAngle
            (
            );
            /**Returns  the threaded end chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: bool ThreadedEndChamferEnabled
            (
            );
            /**Sets  the threaded end chamfer enabled 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadedEndChamferEnabled
            (
                bool threadedEndChamferEnabled /** threadedendchamferenabled */ 
            );
            /**Returns  the threaded end chamfer offset 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedEndChamferDiameter
            (
            );
            /**Returns  the threaded end chamfer angle 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedEndChamferAngle
            (
            );
            /**Returns  the boolean operation 
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
