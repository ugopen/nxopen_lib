#ifndef NXOpen_PREFERENCES_BASEVIEWPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_BASEVIEWPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_BaseViewPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_IBaseViewPreferences.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class BaseViewPreferences;
    }
    namespace Preferences
    {
        class ViewPreferences;
    }
    namespace Preferences
    {
        class IBaseViewPreferences;
    }
    namespace Preferences
    {
        class BaseViewPreferencesImpl;
        /** Represents set of Base View Preferences applicable to drafting views. 
                These settings apply to any newly created base view.
              <br> To obtain an instance of this class use @link Preferences::ViewPreferences::BaseView Preferences::ViewPreferences::BaseView@endlink   <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  BaseViewPreferences: public virtual NXOpen::Preferences::IBaseViewPreferences
        {
            private: BaseViewPreferencesImpl * m_baseviewpreferences_impl;
            private: NXOpen::Preferences::ViewPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit BaseViewPreferences(NXOpen::Preferences::ViewPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~BaseViewPreferences();
            /** The status of faceted representation, if True the clipping bounds are inherited, else 
                        the imported model view is placed on the drawing with an Automatic Rectangular Boundary 
             <br>  @deprecated Deprecated in NX8.5.1.  Use @link Preferences::GeneralViewPreferences::SetViewRepresentation Preferences::GeneralViewPreferences::SetViewRepresentation@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.1.  Use Preferences::GeneralViewPreferences::SetViewRepresentation instead.") void SetFacetedRepresentation
            (
                bool isFacetedRepresentation /** is faceted representation */ 
            );
            /** The status of inherit clipping boundary, if True the model view's 
                        clipping boundary are inherited when model view is imported onto the drawing, else 
                        the imported model view is placed on the drawing with an Automatic Rectangular Boundary.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetInheritClippingBoundary
            (
                bool isInheritClippingBoundary /** Inherit XY clipping boundaries of model */
            );
            /** The status of transfer annotation controls whether or not annotations created in 
                        a model view are transferred to the drawing when a view is imported.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTransferAnnotation
            (
                bool isTransferAnnotation /** is transfer annotation */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
