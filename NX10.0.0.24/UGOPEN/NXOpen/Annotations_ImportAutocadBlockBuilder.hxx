#ifndef NXOpen_ANNOTATIONS_IMPORTAUTOCADBLOCKBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_IMPORTAUTOCADBLOCKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_ImportAutocadBlockBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_ImportAutocadBlockBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class ImportAutocadBlockBuilder;
    }
    class Builder;
    namespace Annotations
    {
        class _ImportAutocadBlockBuilderBuilder;
        class ImportAutocadBlockBuilderImpl;
        /**
            Represents a builder allowing import of AutoCAD blocks.
             <br> To create a new instance of this class, use @link NXOpen::DraftingManager::CreateImportAutocadBlockBuilder  NXOpen::DraftingManager::CreateImportAutocadBlockBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        IncludeSubfolders </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PreserveFolderStructure </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SelectMode </td> <td> 
         
        File </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  ImportAutocadBlockBuilder : public NXOpen::Builder
        {
            /** the Selection mode Enum */
            public: enum FileFolder
            {
                FileFolderFile/** File Selection mode */,
                FileFolderFolder/** Folder Selection mode */
            };

            /** Symbol Type Enum. This option is used to differentiate OS, Teamcenter and Part symbols */
            public: enum Type
            {
                TypeTeamcenter/** Teamcenter Symbol */,
                TypePart/** Part Symbol */,
                TypeNative/** OS Symbol */
            };

            private: ImportAutocadBlockBuilderImpl * m_importautocadblockbuilder_impl;
            private: friend class  _ImportAutocadBlockBuilderBuilder;
            protected: ImportAutocadBlockBuilder();
            public: ~ImportAutocadBlockBuilder();
            /**Returns  the selection mode 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Annotations::ImportAutocadBlockBuilder::FileFolder SelectMode
            (
            );
            /**Sets  the selection mode 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetSelectMode
            (
                NXOpen::Annotations::ImportAutocadBlockBuilder::FileFolder selectMode /** selectmode */ 
            );
            /**Returns  the name of the input folder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXString InputFolder
            (
            );
            /**Sets  the name of the input folder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetInputFolder
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the name of the input folder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void SetInputFolder
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the subfolders toggle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: bool IncludeSubfolders
            (
            );
            /**Sets  the subfolders toggle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetIncludeSubfolders
            (
                bool includeSubfolders /** includesubfolders */ 
            );
            /**Returns  the folder structure toggle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: bool PreserveFolderStructure
            (
            );
            /**Sets  the folder structure toggle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetPreserveFolderStructure
            (
                bool preserveFolderStructure /** preservefolderstructure */ 
            );
            /**Returns  the Reuse library path name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXString LibraryPathName
            (
            );
            /**Sets  the Reuse library path name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetLibraryPathName
            (
                const NXString & pathName /** pathname */ 
            );
            /**Sets  the Reuse library path name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void SetLibraryPathName
            (
                const char * pathName /** pathname */ 
            );
            /**Returns  the Symbol type. Used to differentiate native, teamcenter and part folder modes 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Annotations::ImportAutocadBlockBuilder::Type SymbolType
            (
            );
            /**Sets  the Symbol type. Used to differentiate native, teamcenter and part folder modes 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetSymbolType
            (
                NXOpen::Annotations::ImportAutocadBlockBuilder::Type symbolType /** symboltype */ 
            );
            /**Returns  the symbol part unit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: int Unit
            (
            );
            /**Sets  the symbol part unit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetUnit
            (
                int unit /** unit */ 
            );
            /**Returns  the Import polyline option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: int ImportPolylineTo
            (
            );
            /**Sets  the Import polyline option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetImportPolylineTo
            (
                int type /** type */ 
            );
            /**Returns  the model space toggle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: bool IncludeModelSpace
            (
            );
            /**Sets  the model space toggle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetIncludeModelSpace
            (
                bool includeModelSpace /** includemodelspace */ 
            );
            /**Returns  the AutoCAD setting file
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXString SettingsFile
            (
            );
            /**Sets  the AutoCAD setting file
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetSettingsFile
            (
                const NXString & settingsFile /** settingsfile */ 
            );
            /**Sets  the AutoCAD setting file
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void SetSettingsFile
            (
                const char * settingsFile /** settingsfile */ 
            );
            /** Adds a folder to import list 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void AddFolder
            (
                const NXString & folderName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds a folder to import list 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void AddFolder
            (
                const char * folderName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds a file to import list 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void AddFile
            (
                const NXString & fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds a file to import list 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void AddFile
            (
                const char * fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes a folder from import list 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void RemoveFolder
            (
                const NXString & folderName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes a folder from import list 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void RemoveFolder
            (
                const char * folderName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes a file from import list 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void RemoveFile
            (
                const NXString & fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes a file from import list 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void RemoveFile
            (
                const char * fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Selects or deselects a folder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SelectFolder
            (
                const NXString & folderName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool isSelected /** isselected */ 
            );
            /** Selects or deselects a folder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void SelectFolder
            (
                const char * folderName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool isSelected /** isselected */ 
            );
            /** Selects or deselects a file 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SelectFile
            (
                const NXString & fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool isSelected /** isselected */ 
            );
            /** Selects or deselects a file 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void SelectFile
            (
                const char * fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool isSelected /** isselected */ 
            );
            /** Selects or deselects a block. Both file and block names need to be specified 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SelectBlock
            (
                const NXString & fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & blockName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool isSelected /** isselected */ 
            );
            /** Selects or deselects a block. Both file and block names need to be specified 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void SelectBlock
            (
                const char * fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * blockName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool isSelected /** isselected */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
