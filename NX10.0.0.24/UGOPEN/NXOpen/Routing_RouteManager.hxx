#ifndef NXOpen_ROUTING_ROUTEMANAGER_HXX_INCLUDED
#define NXOpen_ROUTING_ROUTEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_RouteManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/Routing_AddFontBuilder.hxx>
#include <NXOpen/Routing_AssignPathBuilder.hxx>
#include <NXOpen/Routing_AttributeHolder.hxx>
#include <NXOpen/Routing_BranchPathNumberingBuilder.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_CompareRunsBuilder.hxx>
#include <NXOpen/Routing_DefineRunBuilder.hxx>
#include <NXOpen/Routing_DesignRuleViolationCollection.hxx>
#include <NXOpen/Routing_DuctReinforcementBuilder.hxx>
#include <NXOpen/Routing_Electrical_ElectricalStockDevice.hxx>
#include <NXOpen/Routing_FindByAttributesBuilder.hxx>
#include <NXOpen/Routing_HandrailBuilder.hxx>
#include <NXOpen/Routing_MergeStocksBuilder.hxx>
#include <NXOpen/Routing_PlatformCreatorBuilder.hxx>
#include <NXOpen/Routing_ReuseLibrary.hxx>
#include <NXOpen/Routing_Run.hxx>
#include <NXOpen/Routing_RunItem.hxx>
#include <NXOpen/Routing_StockPartConverterBuilder.hxx>
#include <NXOpen/Routing_WindCatcherBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class RouteManager;
    }
    class Part;
    namespace Assemblies
    {
        class Component;
    }
    class Curve;
    class Direction;
    namespace Formboard
    {
        class FormboardManager;
    }
    class NXObject;
    class Point;
    namespace Routing
    {
        class AddFontBuilder;
    }
    namespace Routing
    {
        class AnchorCollection;
    }
    namespace Routing
    {
        class AssignCornerBuilder;
    }
    namespace Routing
    {
        class AssignDiscontinuityBuilder;
    }
    namespace Routing
    {
        class AssignPathBuilder;
    }
    namespace Routing
    {
        class AttributeHolder;
    }
    namespace Routing
    {
        class BendCornerCollection;
    }
    namespace Routing
    {
        class BranchPathNumberingBuilder;
    }
    namespace Routing
    {
        class BuiltInPathCollection;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ClockPartBuilder;
    }
    namespace Routing
    {
        class CompareRunsBuilder;
    }
    namespace Routing
    {
        class ConnectPathBuilder;
    }
    namespace Routing
    {
        class ConnectedCurvesBuilder;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ControlPointCollection;
    }
    namespace Routing
    {
        class CopeCornerBuilder;
    }
    namespace Routing
    {
        class CopeCornerCollection;
    }
    namespace Routing
    {
        class CornerCollection;
    }
    namespace Routing
    {
        class CreateFabricationBuilder;
    }
    namespace Routing
    {
        class CrossSectionCollection;
    }
    namespace Routing
    {
        class DefineRunBuilder;
    }
    namespace Routing
    {
        class DeleteFontsBuilder;
    }
    namespace Routing
    {
        class DeleteGapsBuilder;
    }
    namespace Routing
    {
        class DeleteObjectsBuilder;
    }
    namespace Routing
    {
        class DesignRuleCollection;
    }
    namespace Routing
    {
        class DesignRuleViolation;
    }
    namespace Routing
    {
        class DesignRuleViolationCollection;
    }
    namespace Routing
    {
        class DesignRuleViolationLocationCollection;
    }
    namespace Routing
    {
        class DesignRuleViolationViewer;
    }
    namespace Routing
    {
        class DiscontinuityCornerCollection;
    }
    namespace Routing
    {
        class DivisionsBuilder;
    }
    namespace Routing
    {
        class DuctReinforcement;
    }
    namespace Routing
    {
        class DuctReinforcementBuilder;
    }
    namespace Routing
    {
        class DuctSizeCalculatorBuilder;
    }
    namespace Routing
    {
        class EditBendAngleBuilder;
    }
    namespace Routing
    {
        class EditCharacteristicsBuilder;
    }
    namespace Routing
    {
        class EditLineSegmentBuilder;
    }
    namespace Routing
    {
        class EditPlacePartBuilder;
    }
    namespace Routing
    {
        class ElbowSnapSettings;
    }
    namespace Routing
    {
        namespace Electrical
        {
            class AssignProxyBuilder;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class CableConnectionCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class CableDevice;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class CablewaysBuilder;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class CablewaysLayoutBuilder;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class CablewaysLayoutViewCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ConnectionCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ConnectorDeviceCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ElectricalDeviceRelationshipCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ElectricalFormatCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ElectricalNavigatorFilterCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ElectricalStockDevice;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ElectricalStockDeviceCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class HarnessDeviceCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class JumperConnectionCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class NonPathConnectionCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class PathConnectionCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class SystemDeviceCollection;
        }
    }
    namespace Routing
    {
        class FillerCollection;
    }
    namespace Routing
    {
        class FillerStockBuilder;
    }
    namespace Routing
    {
        class FindByAttributesBuilder;
    }
    namespace Routing
    {
        class FittingOverstock;
    }
    namespace Routing
    {
        class FittingOverstockBuilder;
    }
    namespace Routing
    {
        class FittingOverstockCollection;
    }
    namespace Routing
    {
        class FittingPortCollection;
    }
    namespace Routing
    {
        class FixturePortCollection;
    }
    namespace Routing
    {
        class FormboardFrameCollection;
    }
    namespace Routing
    {
        class GapDisplayBuilder;
    }
    namespace Routing
    {
        class HandrailBuilder;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class InfoObjectsBuilder;
    }
    namespace Routing
    {
        class InstanceNameLookupBuilder;
    }
    namespace Routing
    {
        class IntegrateRunsBuilder;
    }
    namespace Routing
    {
        class InterfaceTerminalRelationshipCollection;
    }
    namespace Routing
    {
        class IsoDrawingBuilder;
    }
    namespace Routing
    {
        class LineSegment;
    }
    namespace Routing
    {
        class LinearPathBuilder;
    }
    namespace Routing
    {
        class LinearPathSettings;
    }
    namespace Routing
    {
        class ManualRouteBuilder;
    }
    namespace Routing
    {
        class MergeStocksBuilder;
    }
    namespace Routing
    {
        class MiterCornerCollection;
    }
    namespace Routing
    {
        class MiteredBendCornerCollection;
    }
    namespace Routing
    {
        class ModelTerminalsBuilder;
    }
    namespace Routing
    {
        class MultiPortCollection;
    }
    namespace Routing
    {
        class OffsetPathCollection;
    }
    namespace Routing
    {
        class Overstock;
    }
    namespace Routing
    {
        class OverstockApplicationCollection;
    }
    namespace Routing
    {
        class OverstockBuilder;
    }
    namespace Routing
    {
        class OverstockFacesBuilder;
    }
    namespace Routing
    {
        class PathStockBuilder;
    }
    namespace Routing
    {
        class PlacePartBuilder;
    }
    namespace Routing
    {
        class PlacementSolutionsBuilder;
    }
    namespace Routing
    {
        class PlatformCreatorBuilder;
    }
    namespace Routing
    {
        class PlatformFeature;
    }
    namespace Routing
    {
        class PortCollection;
    }
    namespace Routing
    {
        class PortConnection;
    }
    namespace Routing
    {
        class PortConnectionCollection;
    }
    namespace Routing
    {
        class ProxyPortCollection;
    }
    namespace Routing
    {
        class QuickPathBuilder;
    }
    namespace Routing
    {
        class RemoveDiscontinuityBuilder;
    }
    namespace Routing
    {
        class ReuseLibrary;
    }
    namespace Routing
    {
        class RouteLogicalAssociationCollection;
    }
    namespace Routing
    {
        class RoutePartDescriptorCollection;
    }
    namespace Routing
    {
        class RouteSweptFoldBuilder;
    }
    namespace Routing
    {
        class RouteSweptTwistBuilder;
    }
    namespace Routing
    {
        class RoutingSystemCollection;
    }
    namespace Routing
    {
        class Run;
    }
    namespace Routing
    {
        class RunCollection;
    }
    namespace Routing
    {
        class RunItem;
    }
    namespace Routing
    {
        class SBendCornerCollection;
    }
    namespace Routing
    {
        class SimplifyPathBuilder;
    }
    namespace Routing
    {
        class SpaceReservationBuilder;
    }
    namespace Routing
    {
        class SplinePathBuilder;
    }
    namespace Routing
    {
        class SplitDuctBuilder;
    }
    namespace Routing
    {
        class SplitRunBuilder;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class StockBrowserBuilder;
    }
    namespace Routing
    {
        class StockBuilder;
    }
    namespace Routing
    {
        class StockCollection;
    }
    namespace Routing
    {
        class StockColorBuilder;
    }
    namespace Routing
    {
        class StockDataCollection;
    }
    namespace Routing
    {
        class StockOffsetPointBuilder;
    }
    namespace Routing
    {
        class StockOffsetPortCollection;
    }
    namespace Routing
    {
        class StockPartConverterBuilder;
    }
    namespace Routing
    {
        class StockStyleBuilder;
    }
    namespace Routing
    {
        class StockTransitionBuilder;
    }
    namespace Routing
    {
        class SubdivideSegmentBuilder;
    }
    namespace Routing
    {
        class TerminalPortBuilder;
    }
    namespace Routing
    {
        class TerminalPortCollection;
    }
    namespace Routing
    {
        class TransformPathBuilder;
    }
    namespace Routing
    {
        class UnifyPathBuilder;
    }
    namespace Routing
    {
        class WatertightFittingsBuilder;
    }
    namespace Routing
    {
        class WindCatcher;
    }
    namespace Routing
    {
        class WindCatcherBuilder;
    }
    namespace Routing
    {
        class WireCollection;
    }
    class TaggedObject;
    class Xform;
    namespace Routing
    {
        class RouteManagerImpl;
        /** Manages various Routing collections and methods for use in the current work part.
                 <br> 
                See the NX Routing help for detailed information on the Connection data model.
                 <br> 
             <br> To obtain an instance of this class, refer to @link NXOpen::Part  NXOpen::Part @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  RouteManager
        {
            /** Collector types for Routing information */
            public: enum PartType
            {
                PartTypePart/** part */ ,
                PartTypeStock/** stock */ ,
                PartTypeFabrication/** fabrication */ ,
                PartTypeStockComponent/** stock component */ ,
                PartTypeWireComponent/** wire component */ ,
                PartTypeOverstock/** overstock */ ,
                PartTypeLogical/** logical */ ,
                PartTypeTemplateAssy/** template assy */ ,
                PartTypeConnector/** connector */ ,
                PartTypeSplice/** splice */ ,
                PartTypeDevice/** device */ ,
                PartTypeFiller/** filler */ ,
                PartTypeUnknown = -1/** unknown */ 
            };

            /** Describes how fabrications are reported on the Bill of Material (BOM). */
            public: enum BomLevel
            {
                BomLevelSummery/** summery */ ,
                BomLevelItemized/** itemized */ 
            };

            /** Describes how system reports the lengths of the stock. */
            public: enum BomStockLength
            {
                BomStockLengthSingleSum/** single sum */ ,
                BomStockLengthListEach/** list each */ 
            };

            /** Is the fabrication numbering option on or off? */
            public: enum BomFabrication
            {
                BomFabricationOff/** off */ ,
                BomFabricationOn/** on */ 
            };

            /** Controls how line items are reported in the Parts List. */
            public: enum BomBlankLines
            {
                BomBlankLinesOff/** off */ ,
                BomBlankLinesOn/** on */ 
            };

            /** Route List import modes

                      The following tables describes the effects of the various modes
                      depending on the type (XML, HRN, CMP) of import.
                       @code 
                                              ++--------------+---------------+-----------------+
                    +------------+------------++ Deletes      | Replaces data | Preserves       |
                    |            | Import     || unmatched    | in matching   | existing        |
                    | ImportMode | File Type  || elements     | elements      | connectors      |
                    +============+============++==============+===============+=================+
                    | Update     | XML        || Yes          | Yes           | No              |
                    |            | Legacy CMP || No           | Yes           | Yes             |
                    |            | Legacy HRN || Yes(1)       | Yes(2)        | Yes             |
                    +------------+------------++--------------+---------------+-----------------+
                    | Merge      | XML        || No           | Yes           | Yes             |
                    |            | Legacy CMP || No           | Yes           | Yes             |
                    |            | Legacy HRN || No           | Yes(2)        | Yes             |
                    +------------+------------++--------------+---------------+-----------------+
                    | Append     | XML        || No           | No            | Yes             |
                    |            | Legacy CMP || No           | No            | Yes             |
                    |            | Legacy HRN || No           | No            | Yes             |
                    +------------+------------++--------------+---------------+-----------------+


                                              ++--------------+---------------+-----------------+------------------+
                    +------------+------------++ May add new  | May add new   | May create      | May create       |
                    |            | Import     || connectors   | connections   | duplicate       | duplicate        |
                    | ImportMode | File Type  ||              |               | connector names | connection names |
                    +============+============++==============+===============+=================+==================+
                    | Update     | XML        || Yes          | Yes           | Yes(3)          | Yes(3)           |
                    |            | Legacy CMP || Yes          | No            | No              | No               |
                    |            | Legacy HRN || Yes          | Yes           | No              | No               |
                    +------------+------------++--------------+---------------+-----------------+------------------+
                    | Merge      | XML        || Yes          | Yes           | Yes(3)          | Yes(3)           |
                    |            | Legacy CMP || Yes          | No            | No              | No               |
                    |            | Legacy HRN || Yes          | Yes           | No              | No               |
                    +------------+------------++--------------+---------------+-----------------+------------------+
                    | Append     | XML        || Yes          | Yes           | Yes             | Yes              |
                    |            | Legacy CMP || Yes          | No            | Yes             | No               |
                    |            | Legacy HRN || Yes          | Yes           | No              | Yes              |
                    +------------+------------++--------------+---------------+-----------------+------------------+


                                              ++--------------+---------------+-----------------+
                                              || Maintains    | Maintains     | Elements        |
                                              || assignment   | routing       | matching        |
                    +------------+------------++ information  | information   | criterion       |
                    |            | Import     || for matching | for matching  |                 |
                    | ImportMode | File Type  || connectors   | connections   |                 |
                    +============+============++==============+===============+=================+
                    | Update     | XML        || Yes          | Yes           | GUID            |
                    |            | Legacy CMP || Yes          | Yes           | Names(4)        |
                    |            | Legacy HRN || Yes          | Yes           | Names(4)        |
                    +------------+------------++--------------+---------------+-----------------+
                    | Merge      | XML        || Yes          | Yes           | GUID            |
                    |            | Legacy CMP || Yes          | Yes           | Names(4)        |
                    |            | Legacy HRN || Yes          | Yes           | Names(4)        |
                    +------------+------------++--------------+---------------+-----------------+
                    | Append     | XML        || No           | No            | N/A             |
                    |            | Legacy CMP || No           | No            | N/A             |
                    |            | Legacy HRN || No           | No            | N/A             |
                    +------------+------------++--------------+---------------+-----------------+
                       @endcode 

                       <ol>
                         <li> Connection list data only (no connectors)</li>
                         <li> Connector data is not updated</li>
                         <li> Since matches are made using GUIDs only, no attempt is made to prevent duplicate names</li>
                         <li> Technically, legacy import does check GUIDs as well but using GUID is not practical with legacy import</li>
                       </ol>
                            */
            public: enum ImportMode
            {
                ImportModeUpdate = 700/** Update existing objects with data from the imported objects. */,
                ImportModeMerge/** Update existing objects with data from the imported objects. */,
                ImportModeAppend/** Create the imported objects as new objects. */
            };

            private: RouteManagerImpl * m_routemanager_impl;
            private: NXOpen::Part* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit RouteManager(NXOpen::Part *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~RouteManager();
            /** Returns the default length tolerance for the current root part.  @return  Length tolerance value used by Routing in units
                                                            of the current root part. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetLengthTolerance
            (
            );
            /**Returns  the down direction for the part used by Routing. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Direction * DownDirection
            (
            );
            /**Sets  the down direction for the part used by Routing. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDownDirection
            (
                NXOpen::Direction * downDirection /** down direction */ 
            );
            /**Returns  the type for the part used by Routing. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::RouteManager::PartType PartTypeFlag
            (
            );
            /**Sets  the type for the part used by Routing. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetPartTypeFlag
            (
                NXOpen::Routing::RouteManager::PartType type /** type */ 
            );
            /** Connects the input component to the stocks and other components in the work part.
                         <br> 
                            Subdivides segments intersected by ports of the part
                            and marked interior if the segment is "inside" of the part.  Segments are considered
                            inside if all of the end @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  objects of the
                            segments are inside the bounding box of the component.  Interior segments are
                            not displayable.
                         <br> 
                         <br> 
                            All stocks are split at the new interior segments.  The interior stocks are
                            hidden and do not show up in the bill of materials.
                         <br> 
                         <br> 
                            In addition this routine adds fixture ports of the input component to fixed
                            length splines that are intersected by the ports.
                         <br> 
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void InsertIntoStock
            (
                NXOpen::Assemblies::Component * component /** Must be in the same part as the @link NXOpen::Routing::RouteManager NXOpen::Routing::RouteManager@endlink  object.*/
            );
            /** Disconnects the input component from stocks and components in the work part.
                         <br> 
                            This the opposite of @link NXOpen::Routing::RouteManager::InsertIntoStock NXOpen::Routing::RouteManager::InsertIntoStock@endlink .
                            Interior segments are marked as non-interior, and any subdivisions performed by
                            @link NXOpen::Routing::RouteManager::InsertIntoStock NXOpen::Routing::RouteManager::InsertIntoStock@endlink  are reversed to
                            the previous state.
                         <br> 
                         <br> 
                            Interior stocks are marked as non-interior and merge with the existing stocks
                            that were connected to the component.
                         <br> 
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void LiftFromStock
            (
                NXOpen::Assemblies::Component * component /** Must be in the same part as the @link NXOpen::Routing::RouteManager NXOpen::Routing::RouteManager@endlink  object.*/
            );
            /** Loads a part based on the input @link NXOpen::Routing::CharacteristicList NXOpen::Routing::CharacteristicList@endlink .
                        This object can be created on the fly, or returned from a search through the part library using
                       the @link Preferences::RoutingPartLibrary::MatchCriteria Preferences::RoutingPartLibrary::MatchCriteria@endlink  or
                       @link Preferences::RoutingPartLibrary::MatchCriteriaWithFilter Preferences::RoutingPartLibrary::MatchCriteriaWithFilter@endlink  methods.
                       @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Part * LoadPart
            (
                NXOpen::Routing::CharacteristicList * partEntry /**  Must contain a PART_NAME for a regular part, or a MEMBER_NAME and PART_NAME
                                     for part family parts. */
            );
            /** Logs objects to be checked during the next concurrent design rule check. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void LogConcurrent
            (
                const std::vector<NXOpen::NXObject *> & objects /** Must be in the same part as the @link NXOpen::Routing::RouteManager NXOpen::Routing::RouteManager@endlink  object.*/
            );
            /** Gets objects logged for concurrent design rule check.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::NXObject *> GetConcurrent
            (
            );
            /** Exports all of the NX Routing electrical information from the currently open part
                        to the given file.

                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ExportPlmxml
            (
                const NXString & plmxmlFilename /** The name of the file into which this method will write
                                    the NX Routing PLM XML data.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports all of the NX Routing electrical information from the currently open part
                        to the given file.

                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void ExportPlmxml
            (
                const char * plmxmlFilename /** The name of the file into which this method will write
                                    the NX Routing PLM XML data.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Imports NX Routing electrical information from the given PLM XML file
                        into the current work part.

                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ImportPlmxml
            (
                const NXString & plmxmlFilename /** The name of the file from which this method will read
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode importOperation /** The import mode: update, merge, or append.
                                    See @link NXOpen::Routing::RouteManager::ImportMode NXOpen::Routing::RouteManager::ImportMode@endlink  for more information. */
            );
            /** Imports NX Routing electrical information from the given PLM XML file
                        into the current work part.

                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void ImportPlmxml
            (
                const char * plmxmlFilename /** The name of the file from which this method will read
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode importOperation /** The import mode: update, merge, or append.
                                    See @link NXOpen::Routing::RouteManager::ImportMode NXOpen::Routing::RouteManager::ImportMode@endlink  for more information. */
            );
            /** Imports NX Routing electrical information from the given
                        XML or legacy component file into the current work part.

                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ImportLegacyComponentFile
            (
                const NXString & importFilename /** The name of the file from which this method will read
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode importOperation /** The import mode: update, merge, or append.
                                    See @link NXOpen::Routing::RouteManager::ImportMode NXOpen::Routing::RouteManager::ImportMode@endlink  for more information. */,
                const NXString & importFormatName /** The name of the format from the Routing List (RLIST) configuration file
                                    that describes the fields in the legacy file.
                                    For more information, see the RLIST Configuration File section of the
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Imports NX Routing electrical information from the given
                        XML or legacy component file into the current work part.

                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void ImportLegacyComponentFile
            (
                const char * importFilename /** The name of the file from which this method will read
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode importOperation /** The import mode: update, merge, or append.
                                    See @link NXOpen::Routing::RouteManager::ImportMode NXOpen::Routing::RouteManager::ImportMode@endlink  for more information. */,
                const char * importFormatName /** The name of the format from the Routing List (RLIST) configuration file
                                    that describes the fields in the legacy file.
                                    For more information, see the RLIST Configuration File section of the
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports all of the NX Routing electrical information from the currently open part
                        to the given XML or legacy component file.

                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ExportLegacyComponentFile
            (
                const NXString & exportFilename /** The name of the file into which this method will write
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & exportFormatName /** The name of the format from the Routing List (RLIST) configuration file
                                    that defines the fields this method will create in the legacy file.
                                    For more information, see the RLIST Configuration File section of the
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports all of the NX Routing electrical information from the currently open part
                        to the given XML or legacy component file.

                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void ExportLegacyComponentFile
            (
                const char * exportFilename /** The name of the file into which this method will write
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * exportFormatName /** The name of the format from the Routing List (RLIST) configuration file
                                    that defines the fields this method will create in the legacy file.
                                    For more information, see the RLIST Configuration File section of the
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Imports NX Routing electrical information from the given
                        XML or legacy harness file into the current work part.

                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ImportLegacyHarnessFile
            (
                const NXString & importFilename /** The name of the file from which this method will read
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode importOperation /** The import mode: update, merge, or append.
                                    See @link NXOpen::Routing::RouteManager::ImportMode NXOpen::Routing::RouteManager::ImportMode@endlink  for more information. */,
                const NXString & importFormatName /** The name of the format from the Routing List (RLIST) configuration file
                                    that describes the fields in the legacy file.
                                    For more information, see the RLIST Configuration File section of the
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Imports NX Routing electrical information from the given
                        XML or legacy harness file into the current work part.

                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void ImportLegacyHarnessFile
            (
                const char * importFilename /** The name of the file from which this method will read
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode importOperation /** The import mode: update, merge, or append.
                                    See @link NXOpen::Routing::RouteManager::ImportMode NXOpen::Routing::RouteManager::ImportMode@endlink  for more information. */,
                const char * importFormatName /** The name of the format from the Routing List (RLIST) configuration file
                                    that describes the fields in the legacy file.
                                    For more information, see the RLIST Configuration File section of the
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports all of the NX Routing electrical information from the currently open part
                        to the given XML or legacy harness file.

                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ExportLegacyHarnessFile
            (
                const NXString & exportFilename /** The name of the file into which this method will write
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & exportFormatName /** The name of the format that from the Routing List (RLIST) configuration file
                                    defines the fields this method will create in the legacy file.
                                    For more information, see the RLIST Configuration File section of the
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports all of the NX Routing electrical information from the currently open part
                        to the given XML or legacy harness file.

                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void ExportLegacyHarnessFile
            (
                const char * exportFilename /** The name of the file into which this method will write
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * exportFormatName /** The name of the format that from the Routing List (RLIST) configuration file
                                    defines the fields this method will create in the legacy file.
                                    For more information, see the RLIST Configuration File section of the
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Imports NX Routing electrical information from the given XML
                        file into the current work part.

                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ImportXmlFile
            (
                const NXString & importFilename /** The name of the file from which this method will read
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode importOperation /** The import mode: update, merge, or append.
                                    See @link NXOpen::Routing::RouteManager::ImportMode NXOpen::Routing::RouteManager::ImportMode@endlink  for more information. */
            );
            /** Imports NX Routing electrical information from the given XML
                        file into the current work part.

                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void ImportXmlFile
            (
                const char * importFilename /** The name of the file from which this method will read
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode importOperation /** The import mode: update, merge, or append.
                                    See @link NXOpen::Routing::RouteManager::ImportMode NXOpen::Routing::RouteManager::ImportMode@endlink  for more information. */
            );
            /** Exports all of the NX Routing electrical information from the currently open part
                        to the given XML file.

                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ExportXmlFile
            (
                const NXString & exportFilename /** The name of the file into which this method will write
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports all of the NX Routing electrical information from the currently open part
                        to the given XML file.

                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                    
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void ExportXmlFile
            (
                const char * exportFilename /** The name of the file into which this method will write
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Prints the Netlist content history to the Listing Window 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ViewNetlistHistory
            (
            );
            /** Erases the Netlist content history from the work part 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void EraseNetlistHistory
            (
            );
            /** Executes the Routing Design Rules against the work part 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void CheckDesignRules
            (
                NXOpen::Routing::DesignRuleViolationCollection::Mode mode /** mode */ ,
                NXOpen::Routing::DesignRuleViolationCollection::Reason reason /** reason */ ,
                const std::vector<NXOpen::NXObject *> & objects /** The objects to check.  May be empty. */,
                std::vector<NXOpen::Routing::DesignRuleViolation *> & violations /** The violations generated by the check.  May be empty. */
            );
            /** Places a cut elbow at the given Routing Control Point (RCP). 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_pipetube ("Routing Piping and Tubing") */
            public: void PlaceCutElbow
            (
                NXOpen::Routing::CharacteristicList * loadCharx /** Characteristics used for searching the component to load. */,
                NXOpen::Routing::CharacteristicList * applyCharx /** Characteristics to apply to the component. */,
                NXOpen::Routing::ControlPoint * rcp /** The Routing Control Point (RCP) at which to place the cut elbow. */
            );
            /** Deletes the given Routing Control Points (RCP), segments, curves, and components.

                        Useful for deleting all of the objects along a path.

                        <ol>
                        <li>Given a Routing Control Point (RCP):</li>
                            <ul>
                            <li>Log input RCP to delete.</li>
                            <li>If a side bend RCP, log bend segments to update.</li>
                            <li>If a bend corner RCP, log bend corner, bend arc and bend segment RCPs to delete.</li>
                            </ul>

                        <li>Given a Segment</li>
                            <ul>
                            <li>Log segment, associated bend corner, bend RCP and bend arc to delete.</li>
                            </ul>

                        <li>Given an Instances</li>
                            <ul>
                            <li>Delete component instances from the assembly.</li>
                            </ul>

                        <li>Given any other objects</li>
                            <ul>
                            <li>Log to delete.</li>
                            </ul>
                        </ol>

                        NOTE: Does not delete occurrence or segments with other dependencies.
                     @return  Objects from the given list of objects that survived. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::NXObject *> DeletePath
            (
                const std::vector<NXOpen::NXObject *> & objects /** The objects to delete. */
            );
            /** Changes the given stock or component to a new object that matches the given characteristics.

                        Useful for unifying all of the stocks and components (e.g. elbows and tees) in
                        a path to the same characteristics.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void UnifyPath
            (
                NXOpen::TaggedObject * inputObject /** The stock, elbow, or tee to change. */,
                NXOpen::Routing::CharacteristicList * newCharxList /** The characteristics to use in finding a replacement for the given object. */
            );
            /** Repositions part component given position and transformation 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RepositionPartOccurrence
            (
                NXOpen::Assemblies::Component * partOcc /** part occ */ ,
                const NXOpen::Point3d & position /** part occurrence to move */,
                const NXOpen::Matrix3x3 & transform /** new transform for the part occurrence */
            );
            /** Replace part  @return   
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Assemblies::Component * RouteReplacePart
            (
                NXOpen::Assemblies::Component * oldOcc /** old occ */ ,
                NXOpen::Part * newPart /** new part */ ,
                const NXString & compName /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & refset /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int occLayer /** occ layer */ 
            );
            /** Replace part  @return   
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            NXOpen::Assemblies::Component * RouteReplacePart
            (
                NXOpen::Assemblies::Component * oldOcc /** old occ */ ,
                NXOpen::Part * newPart /** new part */ ,
                const char * compName /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * refset /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int occLayer /** occ layer */ 
            );
            /** Replaces old component with new component. Creates a port map. Lifts the part from the stock.
                        Replaces various references from one set of port occurrences to another set of port occurrences
                        and copies the old characteristics on the new occurrence. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ReplaceComponents
            (
                NXOpen::Assemblies::Component * oldOcc /** old occ */ ,
                NXOpen::Assemblies::Component * newOcc /** new occ */ ,
                const NXString & refsetName /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Replaces old component with new component. Creates a port map. Lifts the part from the stock.
                        Replaces various references from one set of port occurrences to another set of port occurrences
                        and copies the old characteristics on the new occurrence. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void ReplaceComponents
            (
                NXOpen::Assemblies::Component * oldOcc /** old occ */ ,
                NXOpen::Assemblies::Component * newOcc /** new occ */ ,
                const char * refsetName /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Transforms routing objects. The transformation can be a Move or a Copy.
                        NULL objects should not be passed for transformation.   @return  Objects surviving the operation (the
                                                                                            copied objects for a copy, the moved objects
                                                                                            for a move). Can contain NULL entries 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::NXObject *> TransformObjects
            (
                bool allStock /** if TRUE: Copies all stock else Copies
                                                                                    specified stocks only*/,
                const std::vector<NXOpen::Routing::Stock *> & specifiedStocks /** Specified stocks, not used
                                                                                                    if copying all stocks */,
                const std::vector<NXOpen::NXObject *> & objects /** Routing objects (segments, control
                                                                                               points, components, etc.) to transform */,
                const NXOpen::Point3d & position /** Delta position, determines the translation. */,
                const NXOpen::Matrix3x3 & transform /** Rotation matrix, specifies the rotation to apply. */,
                bool copyOperation /** if true, copies the input tags and moves the copy.
                                                                                If false, just moves the input tags.  */
            );
            /** Finds the duplicate Routing Control Points (RCPs) within given tolerance and
                        merges them. Call @link NXOpen::Update::DoUpdate NXOpen::Update::DoUpdate@endlink  afterwards to ensure that
                        the duplicates are deleted. @return  If RCPs are merged returns TRUE else FALSE 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool MergeDuplicateRcps
            (
                double tolerance /** Tolerance value to determine duplicate RCPs */,
                const std::vector<NXOpen::Routing::ControlPoint *> & rcps /** The Routing Control Points (RCPs) */
            );
            /** Removes the @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  objects from the assembly
                        and updates the routing path data. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to remove, this method will
                                                                    delete these objects. */
            );
            /** Connects ports present in this @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink . 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ConnectPartPorts
            (
                NXOpen::Assemblies::Component * component /** component */ 
            );
            /** Creates a Routing fabrication, a sub-assembly made of
                        @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s and
                        @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  from the assembly in which
                        the Routing Fabrication is created. @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Part * BuildFabrication
            (
                const NXString & filename /** The name of the file where newly created fabrication component would be saved  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & objects /** Routing objects to be fabricated */,
                NXOpen::Routing::CharacteristicList * charxData /** attributes to apply to the fabricated component. */
            );
            /** Creates a Routing fabrication, a sub-assembly made of
                        @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s and
                        @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  from the assembly in which
                        the Routing Fabrication is created. @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            NXOpen::Part * BuildFabrication
            (
                const char * filename /** The name of the file where newly created fabrication component would be saved  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & objects /** Routing objects to be fabricated */,
                NXOpen::Routing::CharacteristicList * charxData /** attributes to apply to the fabricated component. */
            );
            /** Creates a Routing fabrication, a sub-assembly made of
                        @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s and
                        @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  from the assembly in which
                        the Routing Fabrication is created. @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Part * BuildFabrication
            (
                const NXString & filename /** The name of the file where newly created fabrication component would be saved  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & objects /** Routing objects to be fabricated */,
                NXOpen::Routing::CharacteristicList * optionalCharxData /** Required attributes to apply to the fabricated component. */,
                NXOpen::Routing::CharacteristicList * requiredCharxData /** Optional attributes to apply to the fabricated component.*/
            );
            /** Creates a Routing fabrication, a sub-assembly made of
                        @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink s and
                        @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  from the assembly in which
                        the Routing Fabrication is created. @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            NXOpen::Part * BuildFabrication
            (
                const char * filename /** The name of the file where newly created fabrication component would be saved  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & objects /** Routing objects to be fabricated */,
                NXOpen::Routing::CharacteristicList * optionalCharxData /** Required attributes to apply to the fabricated component. */,
                NXOpen::Routing::CharacteristicList * requiredCharxData /** Optional attributes to apply to the fabricated component.*/
            );
            /** Creates Bill of Material (BOM). BOM generates a table with the relevant
                        information regarding the existing routing objects present in the NX window.
                        Various options are available on the BOM dialog to control the generated output.
                        These options are the inputs to this function. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void CreateBom
            (
                NXOpen::Routing::RouteManager::BomLevel level /** How fabrications are reported. */,
                NXOpen::Routing::RouteManager::BomStockLength length /** How stock length is reported. */,
                NXOpen::Routing::RouteManager::BomFabrication fabNumbering /** Is fabrication numbering option on/off? */,
                NXOpen::Routing::RouteManager::BomBlankLines blankLines /**  Unused */,
                NXOpen::Part * formatFilePart /** Part List format file part. */
            );
            /** Loads the part list format (template) file. Part list is based on this
                        format and using this Bill of Material (BOM) is generated.  @return  Template part. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Part * ImportPartListFormatFile
            (
                const NXString & fileName /** File name to load.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Loads the part list format (template) file. Part list is based on this
                        format and using this Bill of Material (BOM) is generated.  @return  Template part. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            NXOpen::Part * ImportPartListFormatFile
            (
                const char * fileName /** File name to load.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a linear path builder for building a path consisting of
                        lines, arcs (bends) and elbows.   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::LinearPathBuilder * CreateLinearPathBuilder
            (
            );
            /** Creates a snap elbow settings object, this object is only useful for
                       @link NXOpen::Routing::LinearPathBuilder NXOpen::Routing::LinearPathBuilder@endlink  object.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::ElbowSnapSettings * CreateElbowSnapSettings
            (
            );
            /** Creates a path stock builder.  This builder can be used for assigning stock
                        to new path segments based off of the current default stock and the
                        settings in this builder.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::PathStockBuilder * CreatePathStockBuilder
            (
            );
            /** Creates a linear path settings object which stores preferences to
                        apply when creating linear paths using a @link NXOpen::Routing::LinearPathBuilder NXOpen::Routing::LinearPathBuilder@endlink .
                         @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::LinearPathSettings * CreateLinearPathSettings
            (
            );
            /** Creates a Quick Path builder.  See the documentation in the
                        @link NXOpen::Routing::QuickPathBuilder NXOpen::Routing::QuickPathBuilder@endlink  class for a description of
                        the builder.   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::QuickPathBuilder * CreateQuickPathBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::DesignRuleViolationViewer NXOpen::Routing::DesignRuleViolationViewer@endlink  to display the given violations
                        in the Design Rule Violation Browser just like the Browse Violations command.
                     @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::DesignRuleViolationViewer * CreateDesignRuleViolationViewer
            (
                const std::vector<NXOpen::NXObject *> & violations /** violations */ 
            );
            /** Runs all the registered Design Rules just like the Interactive Check command.
                        Then creates a @link NXOpen::Routing::DesignRuleViolationViewer NXOpen::Routing::DesignRuleViolationViewer@endlink  to display any violations
                        found in the Design Rule Violation Browser.
                     @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::DesignRuleViolationViewer * CreateDesignRuleViolationViewer
            (
            );
            /** Creates a  @link NXOpen::Routing::DeleteObjectsBuilder NXOpen::Routing::DeleteObjectsBuilder@endlink  for deleting routing objects.   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::DeleteObjectsBuilder * CreateDeleteObjectsBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing objects to delete */
            );
            /** Creates a  @link NXOpen::Routing::InfoObjectsBuilder NXOpen::Routing::InfoObjectsBuilder@endlink  for deleting routing objects.   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::InfoObjectsBuilder * CreateInfoObjectsBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing objects to delete */
            );
            /** Creates a  @link NXOpen::Routing::ConnectedCurvesBuilder NXOpen::Routing::ConnectedCurvesBuilder@endlink  for building segments
                      on end-to-end connected curves.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::ConnectedCurvesBuilder * CreateConnectedCurvesBuilder
            (
            );
            /** Creates a  @link NXOpen::Routing::SimplifyPathBuilder NXOpen::Routing::SimplifyPathBuilder@endlink  that combines the
                        collinear segments by merging RCPs.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::SimplifyPathBuilder * CreateSimplifyPathBuilder
            (
                const std::vector<NXOpen::Routing::ISegment *> & segments /** Routing segments to combine */
            );
            /** Creates a  @link NXOpen::Routing::EditLineSegmentBuilder NXOpen::Routing::EditLineSegmentBuilder@endlink  for editing and locking
                        the length of line segments.   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::EditLineSegmentBuilder * CreateEditLineSegmentBuilder
            (
                NXOpen::Routing::LineSegment * line /** The segment
                                                                                                    to edit. */
            );
            /** Creates a @link NXOpen::Routing::SubdivideSegmentBuilder NXOpen::Routing::SubdivideSegmentBuilder@endlink  that can
                        subdivide a segment into multiple segments
                     @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::SubdivideSegmentBuilder * CreateSubdivideSegmentBuilder
            (
                NXOpen::NXObject * segment /** Routing segment to be subdivided */,
                const NXOpen::Point3d & pickPoint /** Location on the segment picked by the user */
            );
            /** Creates a @link NXOpen::Routing::SplinePathBuilder NXOpen::Routing::SplinePathBuilder@endlink  which creates
                        D-Cubed constrainted splines.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::SplinePathBuilder * CreateSplinePathBuilder
            (
                NXOpen::Curve * spline /** The spline to edit. */
            );
            /** Creates a builder than can create or edit stock offset points.  This builder
                        can convert a normal dumb point to stock offset point as well as convert
                        a stock offset point to a normal point.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockOffsetPointBuilder * CreateStockOffsetPointBuilder
            (
                NXOpen::NXObject * pointOrRcp /** The point or Routing
                                                                                        control point to edit,
                                                                                        may be NULL. */
            );
            /** FIXME  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::TransformPathBuilder * CreateTransformPathBuilder
            (
                const std::vector<NXOpen::NXObject *> & objs /** Initial array of objects to transform . */
            );
            /** Creates a @link NXOpen::Routing::AssignCornerBuilder NXOpen::Routing::AssignCornerBuilder@endlink  which creates corner @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::AssignCornerBuilder * CreateAssignCornerBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::AssignCornerBuilder NXOpen::Routing::AssignCornerBuilder@endlink  which creates corner @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::AssignCornerBuilder * CreateAssignCornerBuilder
            (
                NXOpen::NXObject * selectedObject /** selectedobject */ 
            );
            /** Creates a Space Reservation builder.  See the documentation in the
                        @link NXOpen::Routing::SpaceReservationBuilder NXOpen::Routing::SpaceReservationBuilder@endlink  class for a description of
                        the builder.   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::SpaceReservationBuilder * CreateSpaceReservationBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing segments to create Space
                                                                                       Reservation stock on or Space
                                                                                       Reservation stock to be edited */
            );
            /** Creates a @link NXOpen::Routing::OverstockBuilder NXOpen::Routing::OverstockBuilder@endlink  that can
                        create or edit overstock. @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::OverstockBuilder * CreateOverstockBuilder
            (
                NXOpen::Routing::Overstock * overstock /** Overstock to edit */
            );
            /** Creates a @link NXOpen::Routing::FillerStockBuilder NXOpen::Routing::FillerStockBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Routing::FillerStockBuilder * CreateFillerStockBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing segments to create Filler Stock
                                                                                       or filler stock to be edited */
            );
            /** Creates a @link NXOpen::Routing::StockStyleBuilder NXOpen::Routing::StockStyleBuilder@endlink  which assigns style to stock @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockStyleBuilder * CreateStockStyleBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing stock (Routing.Stock )to change
                                                                                       style or segment (Routing.ISegment) having stock with
                                                                                       style as centerline
                                                                                   */
            );
            /** Creates a @link NXOpen::Routing::StockBuilder NXOpen::Routing::StockBuilder@endlink  that can create or edit stock. @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockBuilder * CreateStockBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing segments to assign
                                                                                       stock to or stock to be edited */
            );
            /** Creates a @link NXOpen::Routing::StockBrowserBuilder NXOpen::Routing::StockBrowserBuilder@endlink  which finds and filters stock @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockBrowserBuilder * CreateStockBrowserBuilder
            (
            );
            /** Copy the overstock from subassembly to parent assembly.
                        This functionality, gets the segments which are wavelinked from the subassembly
                        to the parent assembly. It finds the overstock alloted to these segments in subassembly
                        and recreate them over wavelinked segment at the parent assembly level.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString CopyOverstock
            (
            );
            /** Creates a @link NXOpen::Routing::RouteSweptTwistBuilder NXOpen::Routing::RouteSweptTwistBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Routing::RouteSweptTwistBuilder * CreateRouteSweptTwistBuilder
            (
                NXOpen::NXObject * objects /** Routing Stocks to assign twist */
            );
            /** Creates a @link NXOpen::Routing::RouteSweptFoldBuilder NXOpen::Routing::RouteSweptFoldBuilder@endlink .    @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Routing::RouteSweptFoldBuilder * CreateRouteSweptFoldBuilder
            (
                NXOpen::NXObject * selectedStock /** Routing stock selected to insert fold into */,
                NXOpen::NXObject * editFoldObj /** Routing fold segment to edit. */
            );
            /** Creates a @link NXOpen::Routing::StockColorBuilder NXOpen::Routing::StockColorBuilder@endlink  which assigns color to the face of stocks
                        having rectangular cross sections
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Routing::StockColorBuilder * CreateStockColorBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::CopeCornerBuilder NXOpen::Routing::CopeCornerBuilder@endlink .  @return  
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link NXOpen::Routing::RouteManager::CreateAssignCornerBuilder NXOpen::Routing::RouteManager::CreateAssignCornerBuilder@endlink  and then set the corner type as cope with @link NXOpen::Routing::CornerTypeBuilder NXOpen::Routing::CornerTypeBuilder@endlink . <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use NXOpen::Routing::RouteManager::CreateAssignCornerBuilder and then set the corner type as cope with NXOpen::Routing::CornerTypeBuilder.") NXOpen::Routing::CopeCornerBuilder * CreateCopeCornerBuilder
            (
                NXOpen::NXObject * selectedPoint /** Routing Control Point */
            );
            /** Creates a @link NXOpen::Routing::RemoveDiscontinuityBuilder NXOpen::Routing::RemoveDiscontinuityBuilder@endlink  which removes
                        selected discontinuity corners  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::RemoveDiscontinuityBuilder * CreateRemoveDiscontinuityBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing Control Point */
            );
            /** Creates a @link NXOpen::Routing::UnifyPathBuilder NXOpen::Routing::UnifyPathBuilder@endlink  which replaces given stocks
                        and fittings based on the new @link NXOpen::Routing::CharacteristicList NXOpen::Routing::CharacteristicList@endlink .
                        Useful for unifying all of the stocks and components (e.g. elbows and tees) in
                        a path to the same characteristics.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::UnifyPathBuilder * CreateUnifyPathBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing Stocks or Components to unify.*/
            );
            /** Creates a @link NXOpen::Routing::ClockPartBuilder NXOpen::Routing::ClockPartBuilder@endlink . for the rotation of
                        component.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::ClockPartBuilder * CreateClockPartBuilder
            (
                NXOpen::NXObject * selectedPort /** Routing Port */
            );
            /** Creates a @link NXOpen::Routing::ConnectPathBuilder NXOpen::Routing::ConnectPathBuilder@endlink  which connects path @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::ConnectPathBuilder * CreateConnectPathBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::OverstockFacesBuilder NXOpen::Routing::OverstockFacesBuilder@endlink  to qualify faces
                        of fittings for overstock application @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::OverstockFacesBuilder * CreateOverstockFacesBuilder
            (
            );
            /** Creates @link NXOpen::Routing::Electrical::CablewaysBuilder NXOpen::Routing::Electrical::CablewaysBuilder@endlink .  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_cabling ("Routing Cabling") */
            public: NXOpen::Routing::Electrical::CablewaysBuilder * CreateCablewaysBuilder
            (
            );
            /** Creates @link NXOpen::Routing::Electrical::CablewaysBuilder NXOpen::Routing::Electrical::CablewaysBuilder@endlink .  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_cabling ("Routing Cabling") */
            public: NXOpen::Routing::Electrical::CablewaysLayoutBuilder * CreateCablewaysLayoutBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::EditCharacteristicsBuilder NXOpen::Routing::EditCharacteristicsBuilder@endlink  that edits
                        the Required and Optional @link NXOpen::Routing::CharacteristicList NXOpen::Routing::CharacteristicList@endlink 
                        (UG attribute values) of @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  or
                        @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink .  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::EditCharacteristicsBuilder * CreateEditCharacteristicsBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing Stocks or Components to edit characteristics.*/
            );
            /** Creates a @link NXOpen::Routing::PlacePartBuilder NXOpen::Routing::PlacePartBuilder@endlink  that is used to place
                        a routing part into an assembly.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::PlacePartBuilder * CreateRoutingPlacePartBuilder
            (
                NXOpen::Routing::CharacteristicList * partCharx /** Part Characteristics. */,
                const NXOpen::Point3d & placementPos /** The location in 3D space where the part was dropped. */,
                NXOpen::TaggedObject * placementObj /** The object the part was dropped on. Can be NULL */
            );
            /** Creates a @link NXOpen::Routing::PlacePartBuilder NXOpen::Routing::PlacePartBuilder@endlink  that is used to place
                        a routing part into an assembly.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::PlacePartBuilder * CreatePlacePartBuilder
            (
                const NXString & nodeIdentifier /** The identifier of the reuse node that contains the part being placed. */,
                int filteredPtbRowIndex /** The index of the row in the reuse node table to place. */,
                const NXOpen::Point3d & placementPos /** The location in 3D space where the part was dropped. */,
                NXOpen::TaggedObject * placementObj /** The object the part was dropped on. Can be NULL */
            );
            /** Creates a @link NXOpen::Routing::PlacePartBuilder NXOpen::Routing::PlacePartBuilder@endlink  that is used to place
                        a routing part into an assembly.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            NXOpen::Routing::PlacePartBuilder * CreatePlacePartBuilder
            (
                const char * nodeIdentifier /** The identifier of the reuse node that contains the part being placed. */,
                int filteredPtbRowIndex /** The index of the row in the reuse node table to place. */,
                const NXOpen::Point3d & placementPos /** The location in 3D space where the part was dropped. */,
                NXOpen::TaggedObject * placementObj /** The object the part was dropped on. Can be NULL */
            );
            /** Creates a @link NXOpen::Routing::PlacePartBuilder NXOpen::Routing::PlacePartBuilder@endlink  that is used to place
                        a routing part into an assembly.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::PlacePartBuilder * CreatePlacePartBuilderFS
            (
                const NXString & nodeIdentifier /** The identifier of the reuse node that contains the part being placed. */,
                NXOpen::Routing::CharacteristicList * fileSelectCharx /** The charx for the file select part. */,
                const NXOpen::Point3d & placementPos /** The location in 3D space where the part was dropped. */,
                NXOpen::TaggedObject * placementObj /** The object the part was dropped on. Can be NULL */,
                bool replacePartOp /** Are we replacing an existing part. */
            );
            /** Creates a @link NXOpen::Routing::PlacePartBuilder NXOpen::Routing::PlacePartBuilder@endlink  that is used to place
                        a routing part into an assembly.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            NXOpen::Routing::PlacePartBuilder * CreatePlacePartBuilderFS
            (
                const char * nodeIdentifier /** The identifier of the reuse node that contains the part being placed. */,
                NXOpen::Routing::CharacteristicList * fileSelectCharx /** The charx for the file select part. */,
                const NXOpen::Point3d & placementPos /** The location in 3D space where the part was dropped. */,
                NXOpen::TaggedObject * placementObj /** The object the part was dropped on. Can be NULL */,
                bool replacePartOp /** Are we replacing an existing part. */
            );
            /** Creates a @link NXOpen::Routing::PlacePartBuilder NXOpen::Routing::PlacePartBuilder@endlink  that is used to place
                        a routing part into an assembly.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::PlacePartBuilder * CreatePlacePartBuilderPTS
            (
                NXOpen::TaggedObject * ptsPart /** The PTS part being placed. */,
                NXOpen::TaggedObject * ptsInstance /** The instance of the placed PTS part. */,
                const NXOpen::Point3d & placementPos /** The location in 3D space where the part was dropped. */,
                NXOpen::TaggedObject * placementObj /** The object the part was dropped on. Can be NULL */
            );
            /** Creates a @link Routing::EditPlacePartBuilder Routing::EditPlacePartBuilder@endlink  that is used to edit the location of a previously placed
                        routing part in an assembly.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::EditPlacePartBuilder * CreateEditPlacePartBuilder
            (
                NXOpen::Assemblies::Component * partOcc /** The placed part occurrence to edit */
            );
            /** Creates a placement solutions builder used to position a part that has been placed in the assembly.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::PlacementSolutionsBuilder * CreatePlacementSolutionsBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::StockTransitionBuilder NXOpen::Routing::StockTransitionBuilder@endlink  that can create or edit stockTransition. @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockTransitionBuilder * CreateStockTransitionBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing segments to assign
                                                                                       stockTransition to or stockTransition to be edited */
            );
            /** Creates a @link NXOpen::Routing::FittingOverstockBuilder NXOpen::Routing::FittingOverstockBuilder@endlink  that applies
                        or edits overstock on fittings. @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::FittingOverstockBuilder * CreateFittingOverstockBuilder
            (
                NXOpen::Routing::FittingOverstock * overstock /** Fitting Overstock to edit */
            );
            /** Creates a @link NXOpen::Routing::ModelTerminalsBuilder NXOpen::Routing::ModelTerminalsBuilder@endlink  which Models Terminal @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Routing::ModelTerminalsBuilder * ModelTerminalsBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::TerminalPortBuilder NXOpen::Routing::TerminalPortBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Routing::TerminalPortBuilder * TerminalPortBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::AssignDiscontinuityBuilder NXOpen::Routing::AssignDiscontinuityBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::AssignDiscontinuityBuilder * CreateAssignDiscontinuityBuilder
            (
                NXOpen::NXObject * selectedPoint /** Routing Control Point */
            );
            /** Creates a @link NXOpen::Routing::ManualRouteBuilder NXOpen::Routing::ManualRouteBuilder@endlink  that can create or edit stockTransition. @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::ManualRouteBuilder * CreateManualRouteBuilder
            (
                NXOpen::Routing::Electrical::ElectricalStockDevice::RouteLevel routeLevel /** Enum to define the routing level for manual route. */,
                NXOpen::Routing::Electrical::ElectricalStockDevice * elecStockDevice /** elecstockdevice */ 
            );
            /** Creates a Split Duct builder.  See the documentation in the
                        @link NXOpen::Routing::SplitDuctBuilder NXOpen::Routing::SplitDuctBuilder@endlink  class for a description of
                        the builder.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::SplitDuctBuilder * CreateSplitDuctBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::IsoDrawingBuilder NXOpen::Routing::IsoDrawingBuilder@endlink .  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_pipetube ("Routing Piping and Tubing") */
            public: NXOpen::Routing::IsoDrawingBuilder * CreateIsoDrawingBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::HandrailBuilder NXOpen::Routing::HandrailBuilder@endlink  object.  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXOpen::Routing::HandrailBuilder * CreateHandrailBuilder
            (
            );
            /** Creates a Divisions builder.  See the documentation in the
                        @link NXOpen::Routing::DivisionsBuilder NXOpen::Routing::DivisionsBuilder@endlink  class for a description of
                        the builder.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::DivisionsBuilder * CreateDivisionsBuilder
            (
                NXOpen::NXObject * selectedPort /** Routing Port */,
                bool isAbsoluteFlow /** if TRUE: displays absolute flow percentage for each
                                                                                  division, else displays relative flow percentage */
            );
            /** Creates an Edit Bend Angle builder.  See the documentation in the
                        @link NXOpen::Routing::EditBendAngleBuilder NXOpen::Routing::EditBendAngleBuilder@endlink  class for a description of
                        the builder.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::EditBendAngleBuilder * CreateEditBendAngleBuilder
            (
                NXOpen::NXObject * bendRcp /** Routing Port */
            );
            /** Generates the cableways layout data (cable center points) using the
                        default bin-packing algorithm. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void GenerateCablewaysLayoutData
            (
                NXOpen::Curve * segment /** Cableways layout segment. */,
                NXOpen::Xform * xform /** Coordinate system used for generating the data. */,
                double width /** Width of the cable tray or the rectangular space reservation. */,
                double height /** Height of the cable tray or the rectangular space reservation. */,
                int gridFactor /** Determines the spacing between the grid points used in the default bin-packing algorithm. Larger the grid factor, less will be the spacing. */,
                std::vector<NXOpen::Point *> & points /** points */ ,
                std::vector<NXOpen::Routing::Electrical::CableDevice *> & cables /** cables */ 
            );
            /** Returns all of the Built-in path components in the current part 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetAllBIPComponents
            (
                std::vector<NXOpen::Assemblies::Component *> & components /** components */ 
            );
            /** Determines whether or not a built-in path component has proper work part geometry. @return  
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool ComponentHasBIPGeometry
            (
                NXOpen::Assemblies::Component * bipComponent /** BIP Component */
            );
            /** Finds all bip components which do not have referencing built-in path updaters and creates them.
                        This may also involve creating the workpart geometry for the Built-in path if needed. 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void PromoteBIPGeometry
            (
                NXOpen::Assemblies::Component * bipComponent /** bipcomponent */ 
            );
            /** Creates a @link NXOpen::Routing::CreateFabricationBuilder NXOpen::Routing::CreateFabricationBuilder@endlink  which fabricate subassembly from standard parts, path segments, stock, and other routing objects within the current routing assembly  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::CreateFabricationBuilder * CreateFabricationBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing objects to be fabricated */
            );
            /** Creates a @link NXOpen::Routing::SplitRunBuilder  NXOpen::Routing::SplitRunBuilder @endlink  that can
                        split a run. @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::SplitRunBuilder * SplitRunBuilder
            (
                NXOpen::Routing::Run * run /** Cableways layout segment. */
            );
            /** Creates a @link NXOpen::Routing::InstanceNameLookupBuilder NXOpen::Routing::InstanceNameLookupBuilder@endlink  which is used to look up the
                    matching part to place based on the criteria defined in the INSTANCE_NAME_LOOKUP node and the ship
                    identifier specified in the customer defaults.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_pipetube ("Routing Piping and Tubing") */
            public: NXOpen::Routing::InstanceNameLookupBuilder * CreateInstanceNameLookupBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::WatertightFittingsBuilder NXOpen::Routing::WatertightFittingsBuilder@endlink  that
                        creates Watertight Fittings. @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::WatertightFittingsBuilder * CreateWatertightFittingsBuilder
            (
            );
            /**Creates a @link NXOpen::Routing::IntegrateRunsBuilder  NXOpen::Routing::IntegrateRunsBuilder @endlink  that can
                        Integrate two runs. @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::IntegrateRunsBuilder * IntegrateRunsBuilder
            (
                NXOpen::Routing::Run * firstRun /** Cableways layout segment. */,
                NXOpen::Routing::Run * secondRun /** second run */ 
            );
            /** Creates a Duct size calculator builder. See the documentation in the
                    @link NXOpen::Routing::DuctSizeCalculatorBuilder NXOpen::Routing::DuctSizeCalculatorBuilder@endlink  for a description of the builder  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::DuctSizeCalculatorBuilder * CreateDuctSizeCalculatorBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing segments to assign Flow Attributes or stocks */
            );
            /** Creates a proxy port assigned to a connector. See the documentation in the
                        @link NXOpen::Routing::Electrical::AssignProxyBuilder NXOpen::Routing::Electrical::AssignProxyBuilder@endlink  class for a description of
                        the builder.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::Electrical::AssignProxyBuilder * CreateAssignProxyBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing connectors*/
            );
            /** Copies the connections, connectors and devices from the design elements of
                        study to the part containing object_in_part and assembles them. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void AssembleConnectionsImportedFromSubAssemblies
            (
            );
            /** Creates a new @link NXOpen::Routing::RunItem NXOpen::Routing::RunItem@endlink .
                        Use @link Routing::RunCollection::CreateRun Routing::RunCollection::CreateRun@endlink  to create a new run with this new item.
                        Use @link NXOpen::Routing::Run::Edit NXOpen::Routing::Run::Edit@endlink  to add this new item to an existing run.  @return  
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::RunItem * CreateRunItem
            (
                const NXString & referenceID /** Unique reference identifier of this Run Item   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RunItem::Type itemType /** Run Item type */,
                NXOpen::Routing::CharacteristicList * attributes /** Run Item attributes */
            );
            /** Creates a new @link NXOpen::Routing::RunItem NXOpen::Routing::RunItem@endlink .
                        Use @link Routing::RunCollection::CreateRun Routing::RunCollection::CreateRun@endlink  to create a new run with this new item.
                        Use @link NXOpen::Routing::Run::Edit NXOpen::Routing::Run::Edit@endlink  to add this new item to an existing run.  @return  
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            NXOpen::Routing::RunItem * CreateRunItem
            (
                const char * referenceID /** Unique reference identifier of this Run Item   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RunItem::Type itemType /** Run Item type */,
                NXOpen::Routing::CharacteristicList * attributes /** Run Item attributes */
            );
            /** Creates a @link NXOpen::Routing::FindByAttributesBuilder NXOpen::Routing::FindByAttributesBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::FindByAttributesBuilder * CreateFindByAttributesBuilder
            (
            );
            /** Creates an HVAC Duct Reinforcement Builder. See the documentation in the
                        @link NXOpen::Routing::DuctReinforcementBuilder NXOpen::Routing::DuctReinforcementBuilder@endlink  class for a description of the builder.  @return  
             <br>  Created in NX8.5.2.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::DuctReinforcementBuilder * CreateDuctReinforcementBuilder
            (
                NXOpen::Routing::DuctReinforcement * ductReinforcement /** ductreinforcement */ 
            );
            /** Creates an HVAC Wind Catcher builder. See the documentation in the
                        @link NXOpen::Routing::WindCatcherBuilder NXOpen::Routing::WindCatcherBuilder@endlink  class for a description of the builder.  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::WindCatcherBuilder * CreateWindCatcherBuilder
            (
                NXOpen::Routing::WindCatcher * windCatcher /** @link NXOpen::Routing::WindCatcher NXOpen::Routing::WindCatcher@endlink  to be edited, if any. Can be NULL.*/
            );
            /** Creates a @link NXOpen::Routing::PlatformCreatorBuilder NXOpen::Routing::PlatformCreatorBuilder@endlink  which creates accessways platform  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXOpen::Routing::PlatformCreatorBuilder * CreatePlatformCreatorBuilder
            (
            );
            /** Creates an Platform builder. See the documentation in the
                        @link NXOpen::Routing::PlatformCreatorBuilder NXOpen::Routing::PlatformCreatorBuilder@endlink  class for a description of the builder.  @return  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXOpen::Routing::PlatformCreatorBuilder * CreatePlatformCreatorBuilder
            (
                NXOpen::Routing::PlatformFeature * platformFeature /** @link NXOpen::Routing::PlatformFeature NXOpen::Routing::PlatformFeature@endlink */
            );
            /** Creates a @link NXOpen::Routing::AssignPathBuilder NXOpen::Routing::AssignPathBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::AssignPathBuilder * CreateAssignPathBuilder
            (
                NXOpen::Routing::Run * run /** @link NXOpen::Routing::Run NXOpen::Routing::Run@endlink  */
            );
            /** Creates a @link NXOpen::Routing::AttributeHolder NXOpen::Routing::AttributeHolder@endlink  to set Template Attributes and
                        then copying Template Attributes to Routing Objects. @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::AttributeHolder * CreateAttributeHolder
            (
            );
            /** Creates a @link NXOpen::Routing::DefineRunBuilder  NXOpen::Routing::DefineRunBuilder @endlink  that can
                        create or edit a run. @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::DefineRunBuilder * CreateDefineRunBuilder
            (
                NXOpen::Routing::Run * selectedRun /**Routing.Run*/
            );
            /** Creates a  @link NXOpen::Routing::GapDisplayBuilder NXOpen::Routing::GapDisplayBuilder@endlink  for creating gaps
                        and bridges across line segments.   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::GapDisplayBuilder * CreateGapDisplayBuilder
            (
            );
            /** Creates a  @link NXOpen::Routing::AddFontBuilder NXOpen::Routing::AddFontBuilder@endlink  for creating user-defined line fonts
                        to use with line segments.   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::AddFontBuilder * CreateAddFontBuilder
            (
            );
            /** Creates a  @link NXOpen::Routing::DeleteFontsBuilder NXOpen::Routing::DeleteFontsBuilder@endlink  for deleting routing line fonts from segments.   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::DeleteFontsBuilder * CreateDeleteFontsBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing objects to delete */
            );
            /** Creates a  @link NXOpen::Routing::DeleteGapsBuilder NXOpen::Routing::DeleteGapsBuilder@endlink  for deleting routing objects.   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::DeleteGapsBuilder * CreateDeleteGapsBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** Routing objects to delete */
            );
            /** Builds runs from all Xmls contained in the provided folder path. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ImportRunsNative
            (
                const NXString & path /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Builds runs from all Xmls contained in the provided folder path. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void ImportRunsNative
            (
                const char * path /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Builds runs from all Xmls defined on the provided Item Revision from Teamcenter. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ImportRunsManaged
            (
                const NXString & itemPartNumber /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & itemRevision /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Builds runs from all Xmls defined on the provided Item Revision from Teamcenter. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void ImportRunsManaged
            (
                const char * itemPartNumber /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * itemRevision /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a @link NXOpen::Routing::CompareRunsBuilder NXOpen::Routing::CompareRunsBuilder@endlink  to compare runs in the working part 
                        to another part or an xml definition.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::CompareRunsBuilder * CreateCompareRunsBuilder
            (
                NXOpen::Routing::Run * run /**Routing.Run*/
            );
            /** Checks whether all the stock components referenced by the given Routing object are loaded or not. @return  Are all the referencing stock components loaded or not. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool HasAllReferencingStockComponentsLoaded
            (
                NXOpen::TaggedObject * objectToValidate /** Routing object to validate for referencing unloaded stock components. */
            );
            /** Creates a @link NXOpen::Routing::BranchPathNumberingBuilder NXOpen::Routing::BranchPathNumberingBuilder@endlink  for labeling branches.  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::BranchPathNumberingBuilder * CreateBranchPathNumberingBuilder
            (
            );
            /** Places post placement parts based on the postPartCharx@link NXOpen::Routing::CharacteristicList NXOpen::Routing::CharacteristicList@endlink  on the placedPart object.
                        The postPartCharx object can be created on the fly, or returned from a search through the part library using
                        the @link Preferences::RoutingPartLibrary::MatchCriteria Preferences::RoutingPartLibrary::MatchCriteria@endlink  or
                        @link Preferences::RoutingPartLibrary::MatchCriteriaWithFilter Preferences::RoutingPartLibrary::MatchCriteriaWithFilter@endlink  methods.
                        The postPartCharx should be empty to search for post placement part using post placement rules 
                        of current specification. The first part from the search will be used for post placement if the
                        search based on post placement rules returns more than one part. 
                      
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void PlacePostPlacementParts
            (
                NXOpen::Assemblies::Component * placedPart /** placedpart */ ,
                NXOpen::Routing::CharacteristicList * postPartCharx /** postpartcharx */ ,
                std::vector<NXOpen::Assemblies::Component *> & postParts /** postparts */ 
            );
            /** Creates a @link NXOpen::Routing::MergeStocksBuilder NXOpen::Routing::MergeStocksBuilder@endlink  for merging Routing Stocks. 
                        Stocks are mergeable if they are C1 continuous and have mergeable attributes. @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::MergeStocksBuilder * CreateMergeStocksBuilder
            (
            );
            /** Creates a @link NXOpen::Routing::StockPartConverterBuilder NXOpen::Routing::StockPartConverterBuilder@endlink   @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockPartConverterBuilder * CreateStockPartConverterBuilder
            (
            );
            /** Regenarates the stock components in the assembly. This command will fully load the assembly and if any stock components
                        are found to be missing, it will recreate those components. Since parts can get opened and deleted it invokes 
                        full update to restore sanity of the model.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString RecreateStockComponents
            (
            );
            /** Converts all of the spline segments in this part from the pre-NX9 data model
                        to the NX9 data model. 
                    
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ConvertSplineSegments
            (
                std::vector<NXOpen::Routing::ISegment *> & splineSegments /** The converted spline segments.*/,
                std::vector<double> & originalSplineLengths /** The length of each spline segment before converting.*/,
                std::vector<double> & newSplineLengths /** The new length of each spline segment after converting.*/
            );
            /** Places a gasket part based on the gasketCharx @link NXOpen::Routing::CharacteristicList NXOpen::Routing::CharacteristicList@endlink  .
                        The gasket is returned from a search through the reuse part library.
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ModelConnectionPostPlacementGasket
            (
                NXOpen::Assemblies::Component * placedPart /** The newly placed flange which will be shifted to accommodate the gasket */,
                NXOpen::Routing::PortConnection * connection /** The original flange flange connection  */,
                NXOpen::Routing::ReuseLibrary::ReportInBom reportInBOM /** Is the gasket to be reported in the bill of materials? */,
                NXOpen::Routing::CharacteristicList * gasketCharx /** The characteristics used to find the gasket in the reuse library */,
                NXOpen::Routing::PortConnection ** connectionOne /** One of the new gasket flange connections */,
                NXOpen::Routing::PortConnection ** connectionTwo /** The other new gasket flange connection */
            );
            /** Places a weld gap by adding a weld gap characteristic to one of the part occurrences connected.
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ModelConnectionPostPlacementWeldGap
            (
                NXOpen::Assemblies::Component * placedPart /** The newly placed shift flange */,
                NXOpen::Routing::PortConnection * connection /** The original flange flange connection  */,
                double gapValue /** The weld gap width given in the specification */
            );
            /** Creates a user defined object (UDO) linked to one or two connections.
                        This UDO is used in connection post placement to represent items of a given type on the bill of materials (BOM).
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void CreateConnectionPostPlacementUdo
            (
                NXOpen::Routing::ReuseLibrary::PartType udoType /** Represents the connection post placement item type in the specification connection compatibility table */,
                int numberOfItems /** The number of items to represent in the bill of materials */,
                NXOpen::Routing::ReuseLibrary::ReportInBom reportInBOM /** Are the items to be reported in the bill of materials? */,
                NXOpen::Routing::CharacteristicList * udoCharx /** Characteristics of the selected item to add to the UDO */,
                const std::vector<NXOpen::Routing::PortConnection *> & connectionsToLink /** Routing connections to link to the UDO */
            );
            /** This function returns objects of type @link NXOpen::Routing::Run NXOpen::Routing::Run@endlink  referring to given input object. Generally input object 
                        for this function may be @link NXOpen::Routing::ISegment NXOpen::Routing::ISegment@endlink , @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink , 
                        @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink , @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink ,  @link NXOpen::Body NXOpen::Body@endlink  and
                        @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink . It will not give error if any other input is passed. In that case
                        output array will be empty.
                     @return  
             <br>  Created in NX8.5.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::Run *> GetReferencingRuns
            (
                NXOpen::NXObject * object /** object */ 
            );


            /** BuiltInPath collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::BuiltInPathCollection *BuiltInPaths();
            /** ControlPoint collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::ControlPointCollection *ControlPoints();
            /** Port Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::PortCollection *Ports();
            /** PortConnection Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::PortConnectionCollection *PortConnections();
            /** FixturePort Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::FixturePortCollection *FixturePorts();
            /** FittingPort Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::FittingPortCollection *FittingPorts();
            /** MultiPort Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::MultiPortCollection *MultiPorts();
            /** TerminalPort Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::TerminalPortCollection *TerminalPorts();
            /** ProxyPort Collection 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::Routing::ProxyPortCollection *ProxyPorts();
            /** Stock Offset Port Collection. 
             <br>  Created in NX8.0.2.  <br>  
            */
            public: NXOpen::Routing::StockOffsetPortCollection *StockOffsetPorts();
            /** OffsetPath Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::OffsetPathCollection *OffsetPaths();
            /** Run Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::RunCollection *Runs();
            /** RoutingSystem Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::RoutingSystemCollection *RoutingSystems();
            /** RouteLogicalAssociation Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::RouteLogicalAssociationCollection *RouteLogicalAssociations();
            /** Corner collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::CornerCollection *Corners();
            /** BendCorner collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::BendCornerCollection *BendCorners();
            /** CopeCorner collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::CopeCornerCollection *CopeCorners();
            /** DiscontinuityCorner collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::DiscontinuityCornerCollection *DiscontinuityCorners();
            /** MiterCorner collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::MiterCornerCollection *MiterCorners();
            /** SBendCorner collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::SBendCornerCollection *SBendCorners();
            /** MiteredBendCorner collection 
             <br>  Created in NX9.0.2.  <br>  
            */
            public: NXOpen::Routing::MiteredBendCornerCollection *MiteredBendCorners();
            /** RoutePartDescriptor collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::RoutePartDescriptorCollection *RoutePartDescriptors();
            /** Anchor collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::AnchorCollection *Anchors();
            /** Stock collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::StockCollection *Stocks();
            /** StockData collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::StockDataCollection *StockDatas();
            /** CrossSection collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::CrossSectionCollection *CrossSections();
            /** Wire Collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::WireCollection *Wires();
            /** OverstockApplication collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::OverstockApplicationCollection *OverstockApplications();
            /** Filler stock Application collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::FillerCollection *Fillers();
            /** FormboardFrame collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::FormboardFrameCollection *FormboardFrames();
            /** CableConnection collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::CableConnectionCollection *CableConnections();
            /** NonPathConnection collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::NonPathConnectionCollection *NonPathConnections();
            /** ConnectorDevice collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::ConnectorDeviceCollection *ConnectorDevices();
            /** HarnessDevice collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::HarnessDeviceCollection *HarnessDevices();
            /** SystemDevice collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::SystemDeviceCollection *SystemDevices();
            /** ElectricalStockDevice collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::ElectricalStockDeviceCollection *ElectricalStockDevice();
            /** PathConnection collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::PathConnectionCollection *PathConnections();
            /** InterfaceTerminalRelationship collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::InterfaceTerminalRelationshipCollection *InterfaceTerminalRelationships();
            /** JumperConnection collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::JumperConnectionCollection *JumperConnections();
            /** ElectricalDeviceRelationship Connection collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::ElectricalDeviceRelationshipCollection *ElectricalDeviceRelationships();
            /** RoutingDesignRule collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::DesignRuleCollection *DesignRules();
            /** RoutingDesignRuleViolation collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::DesignRuleViolationCollection *DesignRulesViolation();
            /** RoutingDesignRuleViolationLocation collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::DesignRuleViolationLocationCollection *DesignRuleViolationLocation();
            /** Routing Electrical Connection collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::ConnectionCollection *ElectricalConnections();
            /** Routing Electrical Format collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::ElectricalFormatCollection *ElectricalFormats();
            /** Routing Electrical Filter collection 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::ElectricalNavigatorFilterCollection *ElectricalNavigatorFilters();
            /** Collection for managing Formboard data. 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::Formboard::FormboardManager *FormboardManager();
            /** Collection for managing Cableways Layout Views. 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::Routing::Electrical::CablewaysLayoutViewCollection *CablewaysLayoutViews();
            /** Routing FittingOverstock collection 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::Routing::FittingOverstockCollection *FittingOverstock();
            /** Returns the @link NXOpen::Routing::ReuseLibrary NXOpen::Routing::ReuseLibrary@endlink  object
             <br>  Created in NX7.5.3.  <br>  
            */
            public: NXOpen::Routing::ReuseLibrary *ReuseLibrary();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
