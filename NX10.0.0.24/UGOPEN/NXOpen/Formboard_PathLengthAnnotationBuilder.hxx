#ifndef NXOpen_FORMBOARD_PATHLENGTHANNOTATIONBUILDER_HXX_INCLUDED
#define NXOpen_FORMBOARD_PATHLENGTHANNOTATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Formboard_PathLengthAnnotationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_LeaderBuilder.hxx>
#include <NXOpen/Annotations_OriginBuilder.hxx>
#include <NXOpen/Annotations_StyleBuilder.hxx>
#include <NXOpen/Annotations_TextWithEditControlsBuilder.hxx>
#include <NXOpen/Formboard_PathLengthAnnotationBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/libnxopencpp_formboard_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Formboard
    {
        class PathLengthAnnotationBuilder;
    }
    namespace Annotations
    {
        class LeaderBuilder;
    }
    namespace Annotations
    {
        class OriginBuilder;
    }
    namespace Annotations
    {
        class StyleBuilder;
    }
    namespace Annotations
    {
        class TextWithEditControlsBuilder;
    }
    class Builder;
    class Point;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace Formboard
    {
        class _PathLengthAnnotationBuilderBuilder;
        class PathLengthAnnotationBuilderImpl;
        /** TODO Class documentation  <br> To create a new instance of this class, use @link NXOpen::Formboard::FormboardManager::CreatePathLengthAnnotationBuilder  NXOpen::Formboard::FormboardManager::CreatePathLengthAnnotationBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ShowLeadersToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Text.TextBlock.CustomSymbolScale </td> <td> 
         
        1.0 </td> </tr> 

        <tr><td> 
         
        Text.TextBlock.SymbolAspectRatio </td> <td> 
         
        1.0 </td> </tr> 

        <tr><td> 
         
        Text.TextBlock.SymbolHeight </td> <td> 
         
        25.4 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        Text.TextBlock.SymbolLength </td> <td> 
         
        25.4 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        Text.TextBlock.SymbolPreferences </td> <td> 
         
        UseCurrent </td> </tr> 

        <tr><td> 
         
        Text.TextBlock.SymbolScale </td> <td> 
         
        1.0 </td> </tr> 

        <tr><td> 
         
        Text.TextBlock.SymbolSizeMethod </td> <td> 
         
        ScaleAndAspectRatio </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_FORMBOARDEXPORT  PathLengthAnnotationBuilder : public NXOpen::Builder
        {
            /** TODO: Document the whole type */
            public: enum Types
            {
                TypesPointsOnCurves/** TODO */,
                TypesRoutingPathLength/** TODO */
            };

            private: PathLengthAnnotationBuilderImpl * m_pathlengthannotationbuilder_impl;
            private: friend class  _PathLengthAnnotationBuilderBuilder;
            protected: PathLengthAnnotationBuilder();
            public: ~PathLengthAnnotationBuilder();
            /**Returns  the first end point 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Point * FirstEndPoint
            (
            );
            /**Sets  the first end point 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void SetFirstEndPoint
            (
                NXOpen::Point * firstEndPoint /** firstendpoint */ 
            );
            /**Returns  the second end point 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Point * SecondEndPoint
            (
            );
            /**Sets  the second end point 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void SetSecondEndPoint
            (
                NXOpen::Point * secondEndPoint /** secondendpoint */ 
            );
            /**Returns  the route object collector 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Routing::RouteObjectCollector * RouteObjectCollector
            (
            );
            /**Returns  the origin 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Annotations::OriginBuilder * Origin
            (
            );
            /**Returns  the leader 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Annotations::LeaderBuilder * Leader
            (
            );
            /**Returns  the show leaders toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: bool ShowLeadersToggle
            (
            );
            /**Sets  the show leaders toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void SetShowLeadersToggle
            (
                bool showLeadersToggle /** showleaderstoggle */ 
            );
            /**Returns  the u icomp text with symbols0 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Annotations::TextWithEditControlsBuilder * Text
            (
            );
            /**Returns  the style 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Annotations::StyleBuilder * Style
            (
            );
            /**Returns  the type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Formboard::PathLengthAnnotationBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void SetType
            (
                NXOpen::Formboard::PathLengthAnnotationBuilder::Types type /** type */ 
            );
            /**Returns  the expression name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXString ExpressionName
            (
            );
            /** Create and initialize the Path Length Annotation 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void SetPathLengthAnnotationEndPoints
            (
                NXOpen::Point * firstEndPoint /** First end point for the path length annotation */,
                NXOpen::Point * secondEndPoint /** Second end point for the path length annotation */
            );
            /** Create builder end points at the RCP locations
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void CreatePointsAtRcps
            (
                NXOpen::Routing::ControlPoint * firstEndRcp /** First Routing control point */,
                NXOpen::Routing::ControlPoint * secondEndRcp /** Second Routing control point */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
