#ifndef NXOpen_FACET_CLEANUPFACETBODYBUILDER_HXX_INCLUDED
#define NXOpen_FACET_CLEANUPFACETBODYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Facet_CleanupFacetBodyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Facet_CleanupFacetBodyBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_facet_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Facet
    {
        class CleanupFacetBodyBuilder;
    }
    class Builder;
    class SelectDisplayableObjectList;
    namespace Facet
    {
        class _CleanupFacetBodyBuilderBuilder;
        class CleanupFacetBodyBuilderImpl;

        /// \cond NX_NO_DOC 
        /**
            Represents a @link NXOpen::Facet::CleanupFacetBodyBuilder NXOpen::Facet::CleanupFacetBodyBuilder@endlink  builder. 
            It removes defects that are present in the surfaces of the bodies selected. 
             <br> To create a new instance of this class, use @link NXOpen::Facet::FacetModelingCollection::CreateCleanupFacetBodyBuilder  NXOpen::Facet::FacetModelingCollection::CreateCleanupFacetBodyBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BadCoFins </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        BadVertexRings </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        DegenerateFacets </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        FoldedEdges </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        InconsistentFacetNormals </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        LaminarSlits </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        LongFacets </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        MaxRatioLongFacets </td> <td> 
         
        10 </td> </tr> 

        <tr><td> 
         
        MinAngleFoldedFacets </td> <td> 
         
        15 </td> </tr> 

        <tr><td> 
         
        MinFacetNumber </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        NonManifoldEdges </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        NonManifoldVertices </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        OverlappingFacets </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        RedundantFacets </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        SelfIntersections </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        SeperatedRegions </td> <td> 
         
        Analyze </td> </tr> 

        <tr><td> 
         
        ShowInfo </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_FACETEXPORT  CleanupFacetBodyBuilder : public NXOpen::Builder
        {
            /** These represent the options for each facet defect */
            public: enum CleanupOptions
            {
                CleanupOptionsNone/** Don't perform Analysis or Repair */,
                CleanupOptionsAnalyze/** Perform Analysis */,
                CleanupOptionsRepair/** Perform Repair */
            };

            private: CleanupFacetBodyBuilderImpl * m_cleanupfacetbodybuilder_impl;
            private: friend class  _CleanupFacetBodyBuilderBuilder;
            protected: CleanupFacetBodyBuilder();
            public: ~CleanupFacetBodyBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the input bodies 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * InputBodies
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets all options to None 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAllOptionsToNone
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets all options to Analyze 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAllOptionsToAnalyze
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets all options to Repair 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAllOptionsToRepair
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the redundant facets option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions RedundantFacets
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the redundant facets option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRedundantFacets
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions redundantFacets /** redundantfacets */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the overlapping facets option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions OverlappingFacets
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the overlapping facets option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOverlappingFacets
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions overlappingFacets /** overlappingfacets */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the degenerate facets option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions DegenerateFacets
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the degenerate facets option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDegenerateFacets
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions degenerateFacets /** degeneratefacets */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the folded edges option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions FoldedEdges
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the folded edges option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFoldedEdges
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions foldedEdges /** foldededges */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the long facets option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions LongFacets
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the long facets option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLongFacets
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions longFacets /** longfacets */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the non manifold edges option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions NonManifoldEdges
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the non manifold edges option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNonManifoldEdges
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions nonManifoldEdges /** nonmanifoldedges */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the non manifold vertices option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions NonManifoldVertices
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the non manifold vertices option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNonManifoldVertices
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions nonManifoldVertices /** nonmanifoldvertices */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the self intersections option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions SelfIntersections
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the self intersections option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelfIntersections
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions selfIntersections /** selfintersections */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the inconsistent facet normals option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions InconsistentFacetNormals
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the inconsistent facet normals option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInconsistentFacetNormals
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions inconsistentFacetNormals /** inconsistentfacetnormals */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the laminar slits option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions LaminarSlits
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the laminar slits option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLaminarSlits
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions laminarSlits /** laminarslits */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the bad vertex rings option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions BadVertexRings
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the bad vertex rings option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBadVertexRings
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions badVertexRings /** badvertexrings */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the bad co fins option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions BadCoFins
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the bad co fins option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBadCoFins
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions badCoFins /** badcofins */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the seperated regions option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions SeperatedRegions
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the seperated regions option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSeperatedRegions
            (
                NXOpen::Facet::CleanupFacetBodyBuilder::CleanupOptions speratedRegions /** speratedregions */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the max ratio for long facets 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxRatioLongFacets
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the max ratio for long facets 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaxRatioLongFacets
            (
                double maxRatioLongFacets /** maxratiolongfacets */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the min angle for folded facets 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MinAngleFoldedFacets
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the min angle for folded facets 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinAngleFoldedFacets
            (
                double minAngleFoldedFacets /** minanglefoldedfacets */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the min facet number for seperate regions 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int MinFacetNumber
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the min facet number for seperate regions 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinFacetNumber
            (
                int minFacetNumber /** minfacetnumber */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the show information window option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowInfo
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the show information window option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowInfo
            (
                bool showInfo /** showinfo */ 
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
