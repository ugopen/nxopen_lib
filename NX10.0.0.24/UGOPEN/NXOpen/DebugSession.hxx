#ifndef NXOpen_DEBUGSESSION_HXX_INCLUDED
#define NXOpen_DEBUGSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DebugSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AutotestExecuteBuilder.hxx>
#include <NXOpen/AutotestPreferencesBuilder.hxx>
#include <NXOpen/CAE_FacetProximityBuilder.hxx>
#include <NXOpen/CallbackTest.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Features_SelectionTestBuilder.hxx>
#include <NXOpen/GenerateTestSuiteFromHeaderBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/PerformanceManager.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class DebugSession;
    class ArchDebugSession;
    class AssemDebugSession;
    class AttrDebugSession;
    class AutotestExecuteBuilder;
    class AutotestPreferencesBuilder;
    class AutotestPrint;
    namespace CAE
    {
        class CaeAutotest;
    }
    namespace CAE
    {
        class FacetProximityBuilder;
    }
    namespace CAE
    {
        class FemPart;
    }
    namespace CAE
    {
        class OptimizerAutotest;
    }
    namespace CAM
    {
        class PostDebugBuilder;
    }
    namespace CAM
    {
        class ToolPathDisplay;
    }
    class CAMAutotestPrint;
    class CallbackTest;
    namespace Diagramming
    {
        class DiagrammingTestManager;
    }
    namespace Display
    {
        class CanonMRTestBuilder;
    }
    namespace Display
    {
        class ImageTestBuilder;
    }
    namespace Display
    {
        class SelectFontFileBuilder;
    }
    class DraftingAutotestPrint;
    class DraftingDebugSession;
    class DraftingDebugTool;
    class ErrorList;
    class ExpDebugSession;
    namespace Features
    {
        class BodySelectTestBuilder;
    }
    namespace Features
    {
        class CollectorTestBuilder;
    }
    namespace Features
    {
        class HybridTestBuilder;
    }
    namespace Features
    {
        class Joe;
    }
    namespace Features
    {
        class JoeBuilder;
    }
    namespace Features
    {
        class SectionTestBuilder;
    }
    namespace Features
    {
        class SelectionTest;
    }
    namespace Features
    {
        class SelectionTestBuilder;
    }
    namespace Features
    {
        class SmartCollector;
    }
    class GatewayDebugSession;
    class GenerateTestSuiteFromHeaderBuilder;
    class KfTest;
    class ModelingAutotestPrint;
    namespace ModlUtils
    {
        class ExtractReferenceServiceBuilder;
    }
    class MotionInternal;
    class NXObject;
    class NavigatorAutotestPrint;
    class PDMDebugSession;
    class Part;
    class PartnavDebugSession;
    class PerformanceManager;
    class PerformanceManagerAutotestPrint;
    class RoutingAutotestPrint;
    class SIAutotestPreferencesBuilder;
    class SectionInternal;
    namespace SheetMetal
    {
        class SheetMetalAutotestPrint;
    }
    class ShipDebugSession;
    class TCINDrawingBooklet;
    class TaggedObject;
    class TemplateTestManager;
    class _DebugSessionBuilder;
    class DebugSessionImpl;

    /// \cond NX_NO_DOC 
    /** Represents a class that is used for NX testing.  This class shouldn't
    be made available to customers 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  DebugSession : public NXOpen::TaggedObject
    {
        /** The file permission for a given class of user.  These may be combined using the bitwise OR operator 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: enum FilePermission
        {
            FilePermissionNone/** none */ ,
            FilePermissionRead/** read */ ,
            FilePermissionWrite/** write */ ,
            FilePermissionExecute = 4/** execute */ ,
            FilePermissionDelete = 8/** delete */ 
        };

        /** The user class for a file permission setting 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: enum FileUserClass
        {
            FileUserClassSystem/** system */ ,
            FileUserClassOwner = 4/** owner */ ,
            FileUserClassGroup = 8/** group */ ,
            FileUserClassWorld = 12/** world */ 
        };

        /**Mode for update fidelity analysis*/
        public: enum FidelityMode
        {
            FidelityModeNone = -1/**None*/,
            FidelityModeSaveResult/**Save old data*/,
            FidelityModeCompareResult/**Compare with current output.*/
        };

        private: DebugSessionImpl * m_debugsession_impl;
        private: static DebugSession *theDebugSession;
        public: static DebugSession *GetDebugSession();
        private: friend class  _DebugSessionBuilder;
        protected: DebugSession();
        public: ~DebugSession();
        /** Does all the world checks 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void DoAllWorldChecks
        (
        );
        /** Init KF TEST
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void InitKfTest
        (
        );
        /**Returns  the KF TEST
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::KfTest * KfTestInstance
        (
        );
        /** Returns if any errors encountered in setting up the KfHelpers 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void KfHelperSetupErrorTest
        (
        );
        /** Used for ErrorList unit testing.
            Adds an error to the ErrorList 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void AddErrorToList
        (
            NXOpen::ErrorList * errorList /** error list */ ,
            NXOpen::NXObject * failingObject /** failing object */ ,
            const NXString & failingObjectDescription /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int errorCode /** error code */ ,
            const NXString & errorDescription /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Used for ErrorList unit testing.
            Adds an error to the ErrorList 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void AddErrorToList
        (
            NXOpen::ErrorList * errorList /** error list */ ,
            NXOpen::NXObject * failingObject /** failing object */ ,
            const char * failingObjectDescription /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int errorCode /** error code */ ,
            const char * errorDescription /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Used for ErrorList unit testing.
            Performs an internal test of the ErrorList module 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void ErrorListModuleTest
        (
        );
        /** Set a Runtime Debug Token to true or false
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void RdebugSetFlag
        (
            const NXString & name /** Runtime Debug Token   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int value /** value for Runtime Debug Token */
        );
        /** Set a Runtime Debug Token to true or false
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void RdebugSetFlag
        (
            const char * name /** Runtime Debug Token   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int value /** value for Runtime Debug Token */
        );
        /** Creates a Joe builder  @return  JoeBuilder object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::JoeBuilder * CreateJoeBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::Features::Joe * joe /** @link NXOpen::Features::Joe NXOpen::Features::Joe@endlink  to be edited */
        );
        /** Creates a selection test builder  @return  new SelectionTest builder 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::SelectionTestBuilder * CreateSelectionTestBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::Features::SelectionTest * selectionTest /** @link NXOpen::SelectionTest NXOpen::SelectionTest@endlink 
                                                              to be edited, if NULL  then create a new one */
        );
        /** Creates a CallbackTest  @return  CallbackTest object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::CallbackTest * CreateCallbackTest
        (
        );
        /** Starts recording code cov info   
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void StartCodeCovMonitor
        (
        );
        /** Ends monitoring of CCOV and return file with CCOV data  @return  Full Path to file 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString EndCodeCovMonitor
        (
            const NXString & nameRequested /** name of file requested   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Ends monitoring of CCOV and return file with CCOV data  @return  Full Path to file 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        NXString EndCodeCovMonitor
        (
            const char * nameRequested /** name of file requested   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Feature Publishing Validation 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFeatPubVal
        (
            bool featVal /** Feature Publishing Validation On/Off */
        );
        /** Saves fidelity data or compares against saved data for every feature in the part. 
         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        public: void Fidelity
        (
            NXOpen::DebugSession::FidelityMode mode /**Mode in which to execute tool.*/,
            bool detailedReport /**true if detailed report is expected.*/,
            double tolerance /**desired tolerance for comparison.*/,
            bool isAutoTest /**Is this API being called in auto test mode*/
        );
        /** Creates a select font file builder 
                This builder alwasy creats a new builder, as we have no need to edit one. @return  SelectFontFileBuilder object 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::SelectFontFileBuilder * CreateSelectFontFileBuilder
        (
            NXOpen::Part * part /** the part that will own the builder */
        );
        /** Start collecting all the new parts created in the session. 
                Applicable only in NX/Manager mode, so that these parts can
                be deleted from the database at the end of the athena test 
         <br>  Created in NX5.0.4.  <br>  
         <br> License requirements : None */
        public: void StartAthenaTest
        (
        );
        /** Delete all the new parts collected in the session. Applicable
                only in NX/Manager mode. The parts created by the athena test
                will be deleted by using this call. 
         <br>  Created in NX5.0.4.  <br>  
         <br> License requirements : None */
        public: void EndAthenaTest
        (
        );
        /** Creates a @link NXOpen::PreferencesBuilder NXOpen::PreferencesBuilder@endlink   @return  
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder * CreateAutotestPreferencesBuilder
        (
        );
        /** Modify filename path according to context whether running locally or in the context of Devtest
                and or Athena. This method is automatically written to an Autotest journal
                when a JA file method is annotated with the attribute [pathname].
                For an example of the attribute, reference PartCollection.ja Open methods.
                The method will strip the filename from a recorded Autotest path, then 
                defines a search order to locate part files during replay of an Autotest journal.
                The order is the UDU unit ROOT location first unless NX is running in the context of 
                Athena, then the ROOT/athena directory structure is searched first for the part file, then ROOT.  @return  Filename specification 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: NXString ModifyOriginalPath
        (
            const NXString & originalPathname /** Original filename specification including path   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Modify filename path according to context whether running locally or in the context of Devtest
                and or Athena. This method is automatically written to an Autotest journal
                when a JA file method is annotated with the attribute [pathname].
                For an example of the attribute, reference PartCollection.ja Open methods.
                The method will strip the filename from a recorded Autotest path, then 
                defines a search order to locate part files during replay of an Autotest journal.
                The order is the UDU unit ROOT location first unless NX is running in the context of 
                Athena, then the ROOT/athena directory structure is searched first for the part file, then ROOT.  @return  Filename specification 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        NXString ModifyOriginalPath
        (
            const char * originalPathname /** Original filename specification including path   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**GetKitFilename method: The method will strip the kit location to locate the part files during the replay of the an Autotest journal.   @return Filename specification
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString GetKitFile
        (
            const NXString & originalPathname /**Original filename specification including path   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**GetKitFilename method: The method will strip the kit location to locate the part files during the replay of the an Autotest journal.   @return Filename specification
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        NXString GetKitFile
        (
            const char * originalPathname /**Original filename specification including path   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a @link NXOpen::AutotestExecuteBuilder NXOpen::AutotestExecuteBuilder@endlink   @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestExecuteBuilder * CreateAutotestExecuteBuilder
        (
        );
        /** Creates a @link NXOpen::AutotestExecuteBuilder NXOpen::AutotestExecuteBuilder@endlink   @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::GenerateTestSuiteFromHeaderBuilder * CreateTestSuiteBuilder
        (
        );
        /** Creates an extract reference service test builder  @return  new ERS builder 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::ModlUtils::ExtractReferenceServiceBuilder * CreateExtractReferenceServiceBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */
        );
        /** Change the permission of a file.  The permission is specified by a series of bits.
              * Bits 0-3 (with bit 0 being the lowest-order bit) specify the system permission;
              * bits 4-7 specify the owner permission; bits 8-11 specify the group permission;
              * bits 12-15 specify the world permission; and higher-order bits are ignored.  Within
              * each four-bit group, the low-order bit specifies read permission (granted if 1,
              * denied if 0), the second bit specifies write permission, the third bit specifies
              * execute permission, and the high-order bit specifies delete permission.  For example,
              * if bit 9 is on, then group write permission is granted.  These bit assignments are
              * the same as those defined in cfi.h. 
         <br>  Created in NX6.0.4.  <br>  
         <br> License requirements : None */
        public: void SetFilePermission
        (
            const NXString & fileName /** Name of file   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int permission /** Permission bits */
        );
        /** Change the permission of a file.  The permission is specified by a series of bits.
              * Bits 0-3 (with bit 0 being the lowest-order bit) specify the system permission;
              * bits 4-7 specify the owner permission; bits 8-11 specify the group permission;
              * bits 12-15 specify the world permission; and higher-order bits are ignored.  Within
              * each four-bit group, the low-order bit specifies read permission (granted if 1,
              * denied if 0), the second bit specifies write permission, the third bit specifies
              * execute permission, and the high-order bit specifies delete permission.  For example,
              * if bit 9 is on, then group write permission is granted.  These bit assignments are
              * the same as those defined in cfi.h. 
         <br>  Created in NX6.0.4.  <br>  
         <br> License requirements : None */
        void SetFilePermission
        (
            const char * fileName /** Name of file   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int permission /** Permission bits */
        );
        /** Change the permission of a file.  Permissions can be specified for any of four user
              * classes -- system, owner, group, and world.  For each user class, any of four
              * privileges can be granted or denied -- read (r), write (w), execute (x), and
              * delete (d).  The permission string is of the format:
              *    <group1>:<granted privileges>, <group2>:<granted privileges>, ...
              * 
              * If a given privilege for a given user group is omitted, that priviledge is denied for
              * that user group.  For example, to allow full privileges to the owner, read/write
              * privilege to the group and world, and no privileges to the system, specify the
              * permission string as "owner:rwxd, group:rw, world:rw".  The user groups and
              * priviledges can occur in any order.  White space around the colons and commas is
              * optional. 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetFilePermission
        (
            const NXString & fileName /** Name of file   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & permission /** Permission string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Change the permission of a file.  Permissions can be specified for any of four user
              * classes -- system, owner, group, and world.  For each user class, any of four
              * privileges can be granted or denied -- read (r), write (w), execute (x), and
              * delete (d).  The permission string is of the format:
              *    <group1>:<granted privileges>, <group2>:<granted privileges>, ...
              * 
              * If a given privilege for a given user group is omitted, that priviledge is denied for
              * that user group.  For example, to allow full privileges to the owner, read/write
              * privilege to the group and world, and no privileges to the system, specify the
              * permission string as "owner:rwxd, group:rw, world:rw".  The user groups and
              * priviledges can occur in any order.  White space around the colons and commas is
              * optional. 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        void SetFilePermission
        (
            const char * fileName /** Name of file   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * permission /** Permission string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a @link NXOpen::CAE::FacetProximityBuilder NXOpen::CAE::FacetProximityBuilder@endlink  
             @return  Builder 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::CAE::FacetProximityBuilder * CreateFacetProximityBuilder
        (
            NXOpen::CAE::FemPart * femPart /** Name of file */
        );
        /** Creates a @link NXOpen::PerformanceManager NXOpen::PerformanceManager@endlink   @return  
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PerformanceManager * CreatePerformanceManager
        (
        );
        /** Creates a @link NXOpen::Features::SectionTestBuilder NXOpen::Features::SectionTestBuilder@endlink    @return  Features.SectionTestBuilder object 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::SectionTestBuilder * CreateSectionTestBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::Features::SmartCollector * sectionTest /** @link NXOpen::Features::SmartCollector NXOpen::Features::SmartCollector@endlink  to be edited */
        );
        /** Creates a @link NXOpen::Features::CollectorTestBuilder NXOpen::Features::CollectorTestBuilder@endlink    @return  Features.CollectorTestBuilder object 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::CollectorTestBuilder * CreateCollectorTestBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::Features::SmartCollector * collectorTest /** @link NXOpen::Features::SmartCollector NXOpen::Features::SmartCollector@endlink  to be edited */
        );
        /** Creates a @link NXOpen::Features::HybridTestBuilder NXOpen::Features::HybridTestBuilder@endlink    @return  Features.HybridTestBuilder object 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::HybridTestBuilder * CreateHybridTestBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::Features::SmartCollector * hybirdTest /** @link NXOpen::Features::SmartCollector NXOpen::Features::SmartCollector@endlink  to be edited */
        );
        /** Creates a @link NXOpen::Features::BodySelectTestBuilder NXOpen::Features::BodySelectTestBuilder@endlink    @return  Features.BodySelectTestBuilder object 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::BodySelectTestBuilder * CreateBodySelectTestBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::Features::SmartCollector * bodySelectTest /** @link NXOpen::Features::SmartCollector NXOpen::Features::SmartCollector@endlink  to be edited */
        );
        /** See Developer Comment 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void RetainRedoList
        (
            bool retain /**True if REDO List has to be retained.*/
        );
        /** Creates a @link NXOpen::Display::CanonMRTestBuilder NXOpen::Display::CanonMRTestBuilder@endlink    @return  Display.CanonMRTestBuilder object 
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::CanonMRTestBuilder * CreateCanonMrtestBuilder
        (
            NXOpen::Part * part /** the part that will own the builder */
        );
        /** Creates a @link NXOpen::SIAutotestePreferencesBuilder NXOpen::SIAutotestePreferencesBuilder@endlink    @return  SIAutotestePreferencesBuilder object 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::SIAutotestPreferencesBuilder * CreateSiautotestpreferencesBuilder
        (
        );
        /** Creates a @link NXOpen::Display::ImageTestBuilder NXOpen::Display::ImageTestBuilder@endlink    @return  Display.ImageTestBuilder object 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::ImageTestBuilder * CreateImageTestBuilder
        (
            NXOpen::Part * part /** the part that will own the builder */
        );
        /** Creates a @link NXOpen::Features::SectionTestBuilder NXOpen::Features::SectionTestBuilder@endlink    @return  Features.SectionTestBuilder object 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::SectionTestBuilder * CreateSectionTestBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::TaggedObject * sectionTest /** @link NXOpen::SmartContainer NXOpen::SmartContainer@endlink  to be edited */
        );
        /** Creates a @link NXOpen::Features::CollectorTestBuilder NXOpen::Features::CollectorTestBuilder@endlink    @return  Features.CollectorTestBuilder object 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::CollectorTestBuilder * CreateCollectorTestBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::TaggedObject * sectionTest /** @link NXOpen::SmartContainer NXOpen::SmartContainer@endlink  to be edited */
        );
        /** Creates a @link NXOpen::Features::BodySelectTestBuilder NXOpen::Features::BodySelectTestBuilder@endlink    @return  Features.BodySelectTestBuilder object 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::BodySelectTestBuilder * CreateBodySelectTestBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::TaggedObject * sectionTest /** @link NXOpen::SmartContainer NXOpen::SmartContainer@endlink  to be edited */
        );
        /** Jax pre call  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAttributeNoArgs
        (
            const NXString & title /** title */ ,
            int value /** value */ 
        );
        /** Jax pre call  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        void SetAttributeNoArgs
        (
            const char * title /** title */ ,
            int value /** value */ 
        );
        /** Jax pre call  error
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAttributeNoArgsError
        (
            const NXString & title /** title */ ,
            int value /** value */ 
        );
        /** Jax pre call  error
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        void SetAttributeNoArgsError
        (
            const char * title /** title */ ,
            int value /** value */ 
        );
        /** The Jax pre call with specified argument 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAttributeSpecifiedArgs
        (
            const NXString & title /** title */ ,
            int value /** value */ 
        );
        /** The Jax pre call with specified argument 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        void SetAttributeSpecifiedArgs
        (
            const char * title /** title */ ,
            int value /** value */ 
        );
        /** Reset Pre-Call Status 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void ResetPreCallStatus
        (
        );
        /**Returns  the reset Pre-Call Status 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: bool PreCallStatus
        (
        );
        /** Create Postprocess Debug builder for a dialog available from the post dialog so that an internal user can turn on debug options.  @return  created Post Debug Builder 
         <br>  Created in NX9.0.1.  <br>  
         <br> License requirements : cam_base ("CAM BASE") */
        public: NXOpen::CAM::PostDebugBuilder * CreatePostDebugBuilder
        (
        );


        /** Returns the @link NXOpen::AutotestPrint NXOpen::AutotestPrint@endlink  belonging to this debug session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::AutotestPrint *AutotestPrint();
        /** Returns the @link NXOpen::PDMDebugSession NXOpen::PDMDebugSession@endlink  object belonging to this debug session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::PDMDebugSession *PDMDebug();
        /** Returns the @link NXOpen::ModelingAutotestPrint NXOpen::ModelingAutotestPrint@endlink  belonging to this debug session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ModelingAutotestPrint *ModelingAutotestPrint();
        /** Returns the @link NXOpen::SheetMetalAutotestPrint NXOpen::SheetMetalAutotestPrint@endlink  belonging to this debug session 
         <br>  Created in NX9.0.0.  <br>  
        */
        public: NXOpen::SheetMetal::SheetMetalAutotestPrint *SheetMetalAutotestPrint();
        /** Returns the @link NXOpen::RoutingAutotestPrint NXOpen::RoutingAutotestPrint@endlink  belonging to this debug session. 
         <br>  Created in NX6.0.2.  <br>  
        */
        public: NXOpen::RoutingAutotestPrint *RoutingAutotestPrint();
        /** Returns the @link NXOpen::ASSEMDebugSession NXOpen::ASSEMDebugSession@endlink  belonging to this debug session 
         <br>  Created in NX7.0.0.  <br>  
        */
        public: NXOpen::AssemDebugSession *AssemDebug();
        /** Returns the @link NXOpen::GatewayDebugSession NXOpen::GatewayDebugSession@endlink  belonging to this debug session 
         <br>  Created in NX7.0.0.  <br>  
        */
        public: NXOpen::GatewayDebugSession *GatewayDebug();
        /** Returns the @link NXOpen::SectionInternal NXOpen::SectionInternal@endlink  belonging to this debug session 
         <br>  Created in NX6.0.2.  <br>  
        */
        public: NXOpen::SectionInternal *SectionInternal();
        /** Returns the @link NXOpen::CaeAutotest NXOpen::CaeAutotest@endlink  belonging to this debug session 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::CAE::CaeAutotest *CaeAutotest();
        /** Returns the @link NXOpen::CAMAutotestPrint NXOpen::CAMAutotestPrint@endlink  belonging to this debug session 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::CAMAutotestPrint *CAMAutotestPrint();
        /** Returns the @link NXOpen::ExpDebugSession NXOpen::ExpDebugSession@endlink  belonging to this debug session 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::ExpDebugSession *ExpDebug();
        /** Returns the @link NXOpen::MotionInternal NXOpen::MotionInternal@endlink  belonging to this debug session 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::MotionInternal *MotionInternal();
        /** Returns the @link NXOpen::DraftingDebugSession NXOpen::DraftingDebugSession@endlink  belonging to this debug session 
         <br>  Created in NX7.5.1.  <br>  
        */
        public: NXOpen::DraftingDebugSession *DraftingDebug();
        /** Returns the @link NXOpen::DraftingDebugTool NXOpen::DraftingDebugTool@endlink  belonging to this debug session 
         <br>  Created in NX10.0.0.  <br>  
        */
        public: NXOpen::DraftingDebugTool *DraftingDebugTool();
        /** Returns the @link NXOpen::DraftingAutotestPrint NXOpen::DraftingAutotestPrint@endlink  belonging to this debug session 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::DraftingAutotestPrint *DraftingAutotestPrint();
        /** Returns the @link NXOpen::AttrDebugSession NXOpen::AttrDebugSession@endlink  belonging to this debug session 
         <br>  Created in NX8.0.0.  <br>  
        */
        public: NXOpen::AttrDebugSession *AttrDebug();
        /** Returns the @link NXOpen::ARCHDebugSession NXOpen::ARCHDebugSession@endlink  belonging to this debug session 
         <br>  Created in NX8.0.0.  <br>  
        */
        public: NXOpen::ArchDebugSession *ArchDebug();
        /** Returns the @link NXOpen::TCINDrawingBooklet NXOpen::TCINDrawingBooklet@endlink  belonging to this debug session 
         <br>  Created in NX8.0.0.  <br>  
        */
        public: NXOpen::TCINDrawingBooklet *TCINDrawingBooklet();
        /** Returns the Template Test Manager belonging to this debug session 
         <br>  Created in NX8.0.0.  <br>  
        */
        public: NXOpen::TemplateTestManager *Templates();
        /** Returns the @link NXOpen::NavigatorAutotestPrint NXOpen::NavigatorAutotestPrint@endlink  belonging to this debug session 
         <br>  Created in NX8.0.0.  <br>  
        */
        public: NXOpen::NavigatorAutotestPrint *NavigatorAutotestPrint();
        /** Returns the @link NXOpen::PartnavDebugSession NXOpen::PartnavDebugSession@endlink  belonging to this debug session 
         <br>  Created in NX8.0.0.  <br>  
        */
        public: NXOpen::PartnavDebugSession *PartnavDebugSession();
        /** Returns the @link NXOpen::OptimizerAutotest NXOpen::OptimizerAutotest@endlink  belonging to this debug session 
         <br>  Created in NX9.0.0.  <br>  
        */
        public: NXOpen::CAE::OptimizerAutotest *OptimizerAutotest();
        /** Returns the @link NXOpen::ToolPathDisplay NXOpen::ToolPathDisplay@endlink  belonging to this debug session 
         <br>  Created in NX9.0.2.  <br>  
        */
        public: NXOpen::CAM::ToolPathDisplay *CAMToolPathDisplay();
        /** Returns the @link NXOpen::DiagrammingTestManager NXOpen::DiagrammingTestManager@endlink  belonging to this debug session 
         <br>  Created in NX10.0.0.  <br>  
        */
        public: NXOpen::Diagramming::DiagrammingTestManager *DiagrammingTestManager();
        /** Returns the @link NXOpen::ShipDebugSession NXOpen::ShipDebugSession@endlink  belonging to this debug session 
         <br>  Created in NX10.0.0.  <br>  
        */
        public: NXOpen::ShipDebugSession *ShipDebug();
        /** Returns the @link NXOpen::PerformanceManagerAutotestPrint NXOpen::PerformanceManagerAutotestPrint@endlink  belonging to this debug session 
         <br>  Created in NX7.0.0.  <br>  
        */
        public: NXOpen::PerformanceManagerAutotestPrint *PerformanceManagerAutotestPrint();
    };

    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
