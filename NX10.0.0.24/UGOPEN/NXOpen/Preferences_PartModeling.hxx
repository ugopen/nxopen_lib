#ifndef NXOpen_PREFERENCES_PARTMODELING_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTMODELING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartModeling.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class PartModeling;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    namespace Preferences
    {
        class PartModelingImpl;
        /** Represents the set of Modeling preferences applicable to part  <br> To obtain an instance of this class, refer to @link NXOpen::Preferences::PartPreferences  NXOpen::Preferences::PartPreferences @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  PartModeling
        {
            /** Describes the units available for representing density */
            public: enum DensityUnitType
            {
                DensityUnitTypeLbPerCuInch/** Unit is pound per cubic inch  */,
                DensityUnitTypeLbPerCuFeet/** Unit is pound per cubic feet */,
                DensityUnitTypeGmPerCuCm/** Unit is gram per cubic centimeter */,
                DensityUnitTypeKgPerCuMeter/** Unit is kg per cubic meter */
            };

            /** Describes whether the curve curvature display is Curvature Comb or radius of Curvature Comb  */
            public: enum CurveCurvatureDisplayType
            {
                CurveCurvatureDisplayTypeComb/** Curve curvature display is Curvature Comb */,
                CurveCurvatureDisplayTypeRadiusOfComb/** Curve curvature display is radius of Curvature Comb */
            };

            /** Describes all available grid resolutions for selection */
            public: enum GridResolutionType
            {
                GridResolutionTypeNone/** No specific selection for grid resolution */,
                GridResolutionTypeCoarse/** Coarse grid resolution */,
                GridResolutionTypeStandard/** Standard grid resolution */,
                GridResolutionTypeFine/** Fine grid resolution */,
                GridResolutionTypeExtraFine/** Extra Fine grid resolution */,
                GridResolutionTypeUltraFine/** Ultra Fine grid resolution */
            };

            /** the available font for grid/knot line  */
            public: enum GridKnotLineFontType
            {
                GridKnotLineFontTypeSolid = 1/** solid */ ,
                GridKnotLineFontTypeDashed/** dashed */ ,
                GridKnotLineFontTypePhantom/** phantom */ ,
                GridKnotLineFontTypeCenterline/** centerline */ ,
                GridKnotLineFontTypeDotted/** dotted */ ,
                GridKnotLineFontTypeLongDashed/** long dashed */ ,
                GridKnotLineFontTypeDottedDashed/** dotted dashed */ 
            };

            private: PartModelingImpl * m_partmodeling_impl;
            private: NXOpen::Preferences::PartPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PartModeling(NXOpen::Preferences::PartPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PartModeling();
            /**Returns  the U count for grid lines. It is the number of grid curves in the U direction of the faces of the body 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int GridLinesUCount
            (
            );
            /**Sets  the U count for grid lines. It is the number of grid curves in the U direction of the faces of the body 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridLinesUCount
            (
                int gridLineUCount /** grid line u count */ 
            );
            /**Returns  the V count for grid lines. It is the number of grid curves in the V direction of the faces of the body  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int GridLinesVCount
            (
            );
            /**Sets  the V count for grid lines. It is the number of grid curves in the V direction of the faces of the body  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridLinesVCount
            (
                int gridLineVCount /** grid line v count */ 
            );
            /**Returns  the modeling distance tolerance data. This tolerance value is used throughout the Modeling application, 
                such as for creating swept and revolved solid bodies and sectioning solid bodies. For example, when creating 
                sheet bodies, the distance tolerance specifies the maximum allowable distance between corresponding points on 
                the original surface and the resulting B-surface. This value can be read from any part but can only be set
                when the part owning these preferences is the work part.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceToleranceData
            (
            );
            /**Sets  the modeling distance tolerance data. This tolerance value is used throughout the Modeling application, 
                such as for creating swept and revolved solid bodies and sectioning solid bodies. For example, when creating 
                sheet bodies, the distance tolerance specifies the maximum allowable distance between corresponding points on 
                the original surface and the resulting B-surface. This value can be read from any part but can only be set
                when the part owning these preferences is the work part.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDistanceToleranceData
            (
                double distTolData /** dist tol data */ 
            );
            /**Returns  the angle tolerance data. Angle tolerance is the maximum allowable angle between the surface normals at 
                corresponding points, or the maximum allowable angle between curve tangent vectors at corresponding points. 
                This value can be read from any part but can only be set when the part owning these preferences is the work part. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleToleranceData
            (
            );
            /**Sets  the angle tolerance data. Angle tolerance is the maximum allowable angle between the surface normals at 
                corresponding points, or the maximum allowable angle between curve tangent vectors at corresponding points. 
                This value can be read from any part but can only be set when the part owning these preferences is the work part. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAngleToleranceData
            (
                double angleTolData /** angle tol data */ 
            );
            /**Returns  the density. The value used to set this property must be in
                    the units of the density units preference
                    (that is, the value of @link NXOpen::Preferences::PartModeling::DensityUnit NXOpen::Preferences::PartModeling::DensityUnit@endlink ).
                    Likewise, the density returned by this property is in the units
                    of the density units preference. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: double Density
            (
            );
            /**Sets  the density. The value used to set this property must be in
                    the units of the density units preference
                    (that is, the value of @link NXOpen::Preferences::PartModeling::DensityUnit NXOpen::Preferences::PartModeling::DensityUnit@endlink ).
                    Likewise, the density returned by this property is in the units
                    of the density units preference. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDensity
            (
                double density /** density */ 
            );
            /**Returns  the density unit 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartModeling::DensityUnitType DensityUnit
            (
            );
            /**Sets  the density unit 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDensityUnit
            (
                NXOpen::Preferences::PartModeling::DensityUnitType densityUnit /** density unit */ 
            );
            /**Returns  the curve curvature display. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartModeling::CurveCurvatureDisplayType CurveCurvatureDisplay
            (
            );
            /**Sets  the curve curvature display. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurveCurvatureDisplay
            (
                NXOpen::Preferences::PartModeling::CurveCurvatureDisplayType curveCurvatureDisplay /** curve curvature display */ 
            );
            /**Returns  the grid resolution. The six options, None, Coarse, Standard, Fine, Extra Fine and Ultra Fine, produce a grid that 
                is respectively more detailed. The None option shows no grid at all in wireframe mode. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartModeling::GridResolutionType GridResolution
            (
            );
            /**Sets  the grid resolution. The six options, None, Coarse, Standard, Fine, Extra Fine and Ultra Fine, produce a grid that 
                is respectively more detailed. The None option shows no grid at all in wireframe mode. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridResolution
            (
                NXOpen::Preferences::PartModeling::GridResolutionType gridResolution /** grid resolution */ 
            );
            /**Returns  the state of the cut view delay update flag.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool CutViewUpdateDelayed
            (
            );
            /**Sets  the state of the cut view delay update flag.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCutViewUpdateDelayed
            (
                bool isDelayed /** The new state of the delay update flag. */
            );
            /**Returns  the grid line color 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int GridLineColor
            (
            );
            /**Sets  the grid line color 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridLineColor
            (
                int gridLineColor /** grid line color */ 
            );
            /**Returns  the grid line font 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartModeling::GridKnotLineFontType GridLineFont
            (
            );
            /**Sets  the grid line font 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridLineFont
            (
                NXOpen::Preferences::PartModeling::GridKnotLineFontType gridLineFont /** grid line font */ 
            );
            /**Returns  the C0 knot line color 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int C0KnotLineColor
            (
            );
            /**Sets  the C0 knot line color 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC0KnotLineColor
            (
                int knotLineColor /** knot line color */ 
            );
            /**Returns  the C0 knot line font 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartModeling::GridKnotLineFontType C0KnotLineFont
            (
            );
            /**Sets  the C0 knot line font 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC0KnotLineFont
            (
                NXOpen::Preferences::PartModeling::GridKnotLineFontType knotLineFont /** knot line font */ 
            );
            /**Returns  the C1 knot line color 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int C1KnotLineColor
            (
            );
            /**Sets  the C1 knot line color 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC1KnotLineColor
            (
                int knotLineColor /** knot line color */ 
            );
            /**Returns  the C1 knot line font 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartModeling::GridKnotLineFontType C1KnotLineFont
            (
            );
            /**Sets  the C1 knot line font 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC1KnotLineFont
            (
                NXOpen::Preferences::PartModeling::GridKnotLineFontType knotLineFont /** knot line font */ 
            );
            /**Returns  the C2 knot line color 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int C2KnotLineColor
            (
            );
            /**Sets  the C2 knot line color 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC2KnotLineColor
            (
                int knotLineColor /** knot line color */ 
            );
            /**Returns  the C2 knot line font 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartModeling::GridKnotLineFontType C2KnotLineFont
            (
            );
            /**Sets  the C2 knot line font 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC2KnotLineFont
            (
                NXOpen::Preferences::PartModeling::GridKnotLineFontType knotLineFont /** knot line font */ 
            );
            /**Returns  the curve curvature display style 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int CurveCurvatureStyle
            (
            );
            /**Sets  the curve curvature display style 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurveCurvatureStyle
            (
                int newStyle /** new style */ 
            );
            /**Returns  the curve curvature display show cap line 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool CurveCurvatureShowCap
            (
            );
            /**Sets  the curve curvature display show cap line 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurveCurvatureShowCap
            (
                bool newShowCap /** new show cap */ 
            );
            /**Returns  whether grid line use body color
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool GridUseBodyColor
            (
            );
            /**Sets  whether grid line use body color
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridUseBodyColor
            (
                bool useBodyColor /** use body color */ 
            );
            /**Returns  whether grid use body font
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool GridUseBodyFont
            (
            );
            /**Sets  whether grid use body font
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridUseBodyFont
            (
                bool useBodyFont /** use body font */ 
            );
            /**Returns  whether c0 knot line use body color
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool C0KnotUseBodyColor
            (
            );
            /**Sets  whether c0 knot line use body color
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC0KnotUseBodyColor
            (
                bool useBodyColor /** use body color */ 
            );
            /**Returns  whether C0_knot use body font
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool C0KnotUseBodyFont
            (
            );
            /**Sets  whether C0_knot use body font
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC0KnotUseBodyFont
            (
                bool useBodyFont /** use body font */ 
            );
            /**Returns  whether c1 knot line use body color
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool C1KnotUseBodyColor
            (
            );
            /**Sets  whether c1 knot line use body color
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC1KnotUseBodyColor
            (
                bool useBodyColor /** use body color */ 
            );
            /**Returns  whether C1_knot use body font
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool C1KnotUseBodyFont
            (
            );
            /**Sets  whether C1_knot use body font
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC1KnotUseBodyFont
            (
                bool useBodyFont /** use body font */ 
            );
            /**Returns  whether c2 knot line use body color
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool C2KnotUseBodyColor
            (
            );
            /**Sets  whether c2 knot line use body color
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC2KnotUseBodyColor
            (
                bool useBodyColor /** use body color */ 
            );
            /**Returns  whether C2_knot use body font
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool C2KnotUseBodyFont
            (
            );
            /**Sets  whether C2_knot use body font
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC2KnotUseBodyFont
            (
                bool useBodyFont /** use body font */ 
            );
            /**Returns  the curve curvature display style to show it on the inside/outside of the curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayCurveCurvatureOutside
            (
            );
            /**Sets  the curve curvature display style to show it on the inside/outside of the curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayCurveCurvatureOutside
            (
                bool displayOutside /** display outside */ 
            );
            /** Returns whether the part is in History or History-Free mode.
                    Return true for History mode or false for History-Free mode.   @return   
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetHistoryMode
            (
            );
            /** Changes the modeling mode to History Modeling. This will remove Local feature from the model.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHistoryMode
            (
            );
            /** Changes the modeling mode to History-Free Modeling. This will remove parameters from features in the model. Feature edit will not be available and the model will not update.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHistoryFreeMode
            (
            );
            /**Returns  the optimize curve flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool OptimizeCurve
            (
            );
            /**Sets  the optimize curve flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptimizeCurve
            (
                bool optimizeCurve /** Flag indicating whether Optimized Curve should be performed */
            );
            /**Returns  the optimize curve tolerance factor 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptimizeCurveToleranceFactor
            (
            );
            /**Sets  the optimize curve tolerance factor 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptimizeCurveToleranceFactor
            (
                double optimieCurveFactor /** Factor for performing Optimized Curve */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
