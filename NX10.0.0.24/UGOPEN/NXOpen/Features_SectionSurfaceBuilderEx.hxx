#ifndef NXOpen_FEATURES_SECTIONSURFACEBUILDEREX_HXX_INCLUDED
#define NXOpen_FEATURES_SECTIONSURFACEBUILDEREX_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SectionSurfaceBuilderEx.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_SectionSurfaceBuilderEx.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_DepthSkewBuilder.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/GeometricUtilities_Rebuild.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class SectionSurfaceBuilderEx;
    }
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class DepthSkewBuilder;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    namespace GeometricUtilities
    {
        class Rebuild;
    }
    class ScCollector;
    class Section;
    namespace Features
    {
        class _SectionSurfaceBuilderExBuilder;
        class SectionSurfaceBuilderExImpl;
        /**
               Represents a @link Features::SectionSurface Features::SectionSurface@endlink  builder.
               Use @link Features::SectionSurfaceBuilderEx Features::SectionSurfaceBuilderEx@endlink  to create
               section surface. For more details see the NX documentation for Section Surface.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateSectionSurfaceBuilderEx  NXOpen::Features::FeatureCollection::CreateSectionSurfaceBuilderEx @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngleLaw.EndValue.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        AngleLaw.Function </td> <td> 
         
        ft </td> </tr> 

        <tr><td> 
         
        AngleLaw.LawType </td> <td> 
         
        Constant </td> </tr> 

        <tr><td> 
         
        AngleLaw.Parameter </td> <td> 
         
        t </td> </tr> 

        <tr><td> 
         
        AngleLaw.StartValue.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        AngleLaw.Value.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        CircularTypeMode </td> <td> 
         
        ThreePoint </td> </tr> 

        <tr><td> 
         
        ConicTypeMode </td> <td> 
         
        Shoulder </td> </tr> 

        <tr><td> 
         
        ControlRegion </td> <td> 
         
        Entire </td> </tr> 

        <tr><td> 
         
        CubicTypeMode </td> <td> 
         
        TwoSlopes </td> </tr> 

        <tr><td> 
         
        EndContinuity.ContinuityType </td> <td> 
         
        G1 </td> </tr> 

        <tr><td> 
         
        RadiusLaw.EndValue.Value </td> <td> 
         
        1.0 (millimeters part), 0.05 (inches part) </td> </tr> 

        <tr><td> 
         
        RadiusLaw.StartValue.Value </td> <td> 
         
        1.0 (millimeters part), 0.05 (inches part) </td> </tr> 

        <tr><td> 
         
        RadiusLaw.Value.Value </td> <td> 
         
        1.0 (millimeters part), 0.05 (inches part) </td> </tr> 

        <tr><td> 
         
        RhoLaw.EndValue.Value </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        RhoLaw.StartValue.Value </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        RhoLaw.Value.Value </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        SectionMethodCircleTangent </td> <td> 
         
        FilletArc </td> </tr> 

        <tr><td> 
         
        SectionMethodFilletBridge </td> <td> 
         
        Continuity </td> </tr> 

        <tr><td> 
         
        SectionMethodRho </td> <td> 
         
        Rho </td> </tr> 

        <tr><td> 
         
        SlopeControl </td> <td> 
         
        ByApex </td> </tr> 

        <tr><td> 
         
        SpineEndFlowDirection </td> <td> 
         
        NotSpecified </td> </tr> 

        <tr><td> 
         
        SpineStartFlowDirection </td> <td> 
         
        NotSpecified </td> </tr> 

        <tr><td> 
         
        SpineType </td> <td> 
         
        ByVector </td> </tr> 

        <tr><td> 
         
        StartContinuity.ContinuityType </td> <td> 
         
        G1 </td> </tr> 

        </table>  

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  SectionSurfaceBuilderEx : public NXOpen::Features::FeatureBuilder
        {
            /** This enum represents the current types of section surface methods. */
            public: enum Types
            {
                TypesConic/** Conic type */,
                TypesCircular/** Circular type */,
                TypesCubic/** Cubic type */,
                TypesLinear/** Linear type */
            };

            /** This enum represents the current modes of conic type section surfaces. */
            public: enum ConicType
            {
                ConicTypeShoulder/** Shoulder mode */,
                ConicTypeRho/** Rho mode */,
                ConicTypeHilite/** Hilite mode */,
                ConicTypeFourPointSlope/** Four Point Slope mode */,
                ConicTypeFivePoint/** Five Point mode */
            };

            /** This enum represents the current modes of cubic type section surfaces. */
            public: enum CubicType
            {
                CubicTypeTwoSlopes/** Two Slopes mode */,
                CubicTypeFilletBridge/** Fillet Bridge mode */
            };

            /** This enum represents the current modes of circular type section surfaces. */
            public: enum CircularType
            {
                CircularTypeThreePoint/** Three Point mode */,
                CircularTypeTwoPointRadius/** Two Point Radius mode */,
                CircularTypeTwoPointSlope/** Two Point Slope mode */,
                CircularTypeRadiusAngleArc/** Radius Angle Arc mode */,
                CircularTypeCenterRadius/** Center Radius mode */,
                CircularTypeTangentRadius/** Tangent Radius mode */
            };

            /** Slope Control type. */
            public: enum SlopeControlType
            {
                SlopeControlTypeByApex/** slope control by apex */,
                SlopeControlTypeByCurves/** slope control by curves */,
                SlopeControlTypeByFaces/** slope control by faces */
            };

            /** Control Region type. */
            public: enum ControlRegionType
            {
                ControlRegionTypeEntire/** depth and skew applied to the entire section surface */,
                ControlRegionTypeStart/** depth and skew applied to the start section of the section surface */,
                ControlRegionTypeEnd/** depth and skew applied to the end section of the section surface */
            };

            /** Section method Circle Tangent type. */
            public: enum SectionMethodCircleTangentType
            {
                SectionMethodCircleTangentTypeFilletArc/** fillet arc */,
                SectionMethodCircleTangentTypeCoverArc/** cover arc */
            };

            /** Section method Rho type. */
            public: enum SectionMethodRhoType
            {
                SectionMethodRhoTypeRho/** rho law method */,
                SectionMethodRhoTypeLeastTension/** least tension method */
            };

            /** Section method Fillet Bridge type. */
            public: enum SectionMethodFilletBridgeType
            {
                SectionMethodFilletBridgeTypeContinuity/** continuity options */,
                SectionMethodFilletBridgeTypeInheritShape/** inherit shape option */
            };

            /** Spine type. */
            public: enum Spine
            {
                SpineByVector/** spine by vector */,
                SpineByCurve/** spine by curve */
            };

            /** Spine Start Flow type. */
            public: enum SpineStartFlowType
            {
                SpineStartFlowTypeNotSpecified/** flow direction not specified */,
                SpineStartFlowTypePerpendicular/** flow direction perpendicular to the guide */,
                SpineStartFlowTypeIsoLineU/** flow direction follows iso u of the start surface */,
                SpineStartFlowTypeIsoLineV/** flow direction follows iso v of the start surface */
            };

            /** Spine End Flow type. */
            public: enum SpineEndFlowType
            {
                SpineEndFlowTypeNotSpecified/** flow direction not specified */,
                SpineEndFlowTypePerpendicular/** flow direction perpendicular to the guide */,
                SpineEndFlowTypeIsoLineU/** flow direction follows iso u of the start surface */,
                SpineEndFlowTypeIsoLineV/** flow direction follows iso v of the start surface */
            };

            /** Surface Degree type. */
            public: enum UDegreeType
            {
                UDegreeTypeConic/** conic in u */,
                UDegreeTypeCubic/** cubic in u */,
                UDegreeTypeQuintic/** quintic in u */
            };

            /** Body Preference type. */
            public: enum BodyType
            {
                BodyTypeSolid/** solid type */,
                BodyTypeSheet/** sheet type */
            };

            private: SectionSurfaceBuilderExImpl * m_sectionsurfacebuilderex_impl;
            private: friend class  _SectionSurfaceBuilderExBuilder;
            protected: SectionSurfaceBuilderEx();
            public: ~SectionSurfaceBuilderEx();
            /**Returns  the conic type mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::ConicType ConicTypeMode
            (
            );
            /**Sets  the conic type mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetConicTypeMode
            (
                NXOpen::Features::SectionSurfaceBuilderEx::ConicType conicTypeMode /** conictypemode */ 
            );
            /**Returns  the cubic type mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::CubicType CubicTypeMode
            (
            );
            /**Sets  the cubic type mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetCubicTypeMode
            (
                NXOpen::Features::SectionSurfaceBuilderEx::CubicType cubicTypeMode /** cubictypemode */ 
            );
            /**Returns  the circular type mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::CircularType CircularTypeMode
            (
            );
            /**Sets  the circular type mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetCircularTypeMode
            (
                NXOpen::Features::SectionSurfaceBuilderEx::CircularType circularTypeMode /** circulartypemode */ 
            );
            /**Returns  the section start guide. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SectionStartGuide
            (
            );
            /**Returns  the interior guide1.         
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::ConicTypeFourPointSlope Features::SectionSurfaceBuilderEx::ConicTypeFourPointSlope@endlink , 
                        @link Features::SectionSurfaceBuilderEx::ConicTypeFivePoint Features::SectionSurfaceBuilderEx::ConicTypeFivePoint@endlink , and 
                        @link Features::SectionSurfaceBuilderEx::CircularTypeThreePoint Features::SectionSurfaceBuilderEx::CircularTypeThreePoint@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SectionInteriorGuide1
            (
            );
            /**Returns  the section interior guide2.
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::ConicTypeFourPointSlope Features::SectionSurfaceBuilderEx::ConicTypeFourPointSlope@endlink  and
                        @link Features::SectionSurfaceBuilderEx::ConicTypeFivePoint Features::SectionSurfaceBuilderEx::ConicTypeFivePoint@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SectionInteriorGuide2
            (
            );
            /**Returns  the section interior guide3.
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::ConicTypeFourPointSlope Features::SectionSurfaceBuilderEx::ConicTypeFourPointSlope@endlink  and
                        @link Features::SectionSurfaceBuilderEx::ConicTypeFivePoint Features::SectionSurfaceBuilderEx::ConicTypeFivePoint@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SectionInteriorGuide3
            (
            );
            /**Returns  the section end guide. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SectionEndGuide
            (
            );
            /**Returns  the section orientation guide.
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::CircularTypeCenterRadius Features::SectionSurfaceBuilderEx::CircularTypeCenterRadius@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SectionOrientationGuide
            (
            );
            /**Returns  the slope control. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::SlopeControlType SlopeControl
            (
            );
            /**Sets  the slope control. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSlopeControl
            (
                NXOpen::Features::SectionSurfaceBuilderEx::SlopeControlType slopeControl /** slopecontrol */ 
            );
            /**Returns  the apex curve.
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::ConicTypeShoulder Features::SectionSurfaceBuilderEx::ConicTypeShoulder@endlink , 
                        @link Features::SectionSurfaceBuilderEx::ConicTypeRho Features::SectionSurfaceBuilderEx::ConicTypeRho@endlink , and 
                        @link Features::SectionSurfaceBuilderEx::ConicTypeHilite Features::SectionSurfaceBuilderEx::ConicTypeHilite@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * ApexCurve
            (
            );
            /**Returns  the start slope curve.
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::ConicTypeShoulder Features::SectionSurfaceBuilderEx::ConicTypeShoulder@endlink ,
                        @link Features::SectionSurfaceBuilderEx::ConicTypeRho Features::SectionSurfaceBuilderEx::ConicTypeRho@endlink ,
                        @link Features::SectionSurfaceBuilderEx::ConicTypeHilite Features::SectionSurfaceBuilderEx::ConicTypeHilite@endlink ,
                        @link Features::SectionSurfaceBuilderEx::CubicTypeTwoSlopes Features::SectionSurfaceBuilderEx::CubicTypeTwoSlopes@endlink  and
                        @link Features::SectionSurfaceBuilderEx::ConicTypeFourPointSlope Features::SectionSurfaceBuilderEx::ConicTypeFourPointSlope@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * StartSlopeCurve
            (
            );
            /**Returns  the end slope curve.
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::ConicTypeShoulder Features::SectionSurfaceBuilderEx::ConicTypeShoulder@endlink ,
                        @link Features::SectionSurfaceBuilderEx::ConicTypeRho Features::SectionSurfaceBuilderEx::ConicTypeRho@endlink ,
                        @link Features::SectionSurfaceBuilderEx::ConicTypeHilite Features::SectionSurfaceBuilderEx::ConicTypeHilite@endlink ,
                        @link Features::SectionSurfaceBuilderEx::CubicTypeTwoSlopes Features::SectionSurfaceBuilderEx::CubicTypeTwoSlopes@endlink  and
                        @link Features::SectionSurfaceBuilderEx::ConicTypeFourPointSlope Features::SectionSurfaceBuilderEx::ConicTypeFourPointSlope@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * EndSlopeCurve
            (
            );
            /**Returns  the start face.
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::ConicTypeShoulder Features::SectionSurfaceBuilderEx::ConicTypeShoulder@endlink ,
                        @link Features::SectionSurfaceBuilderEx::ConicTypeRho Features::SectionSurfaceBuilderEx::ConicTypeRho@endlink ,
                        @link Features::SectionSurfaceBuilderEx::ConicTypeHilite Features::SectionSurfaceBuilderEx::ConicTypeHilite@endlink  and
                        @link Features::SectionSurfaceBuilderEx::CubicTypeFilletBridge Features::SectionSurfaceBuilderEx::CubicTypeFilletBridge@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * StartFace
            (
            );
            /**Returns  the start direction.
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::CircularTypeRadiusAngleArc Features::SectionSurfaceBuilderEx::CircularTypeRadiusAngleArc@endlink  and
                        @link Features::SectionSurfaceBuilderEx::CubicTypeFilletBridge Features::SectionSurfaceBuilderEx::CubicTypeFilletBridge@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool StartDirection
            (
            );
            /**Sets  the start direction.
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::CircularTypeRadiusAngleArc Features::SectionSurfaceBuilderEx::CircularTypeRadiusAngleArc@endlink  and
                        @link Features::SectionSurfaceBuilderEx::CubicTypeFilletBridge Features::SectionSurfaceBuilderEx::CubicTypeFilletBridge@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetStartDirection
            (
                bool startDirection /** startdirection */ 
            );
            /**Returns  the end face.
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::ConicTypeShoulder Features::SectionSurfaceBuilderEx::ConicTypeShoulder@endlink ,
                        @link Features::SectionSurfaceBuilderEx::ConicTypeRho Features::SectionSurfaceBuilderEx::ConicTypeRho@endlink ,
                        @link Features::SectionSurfaceBuilderEx::ConicTypeHilite Features::SectionSurfaceBuilderEx::ConicTypeHilite@endlink  and
                        @link Features::SectionSurfaceBuilderEx::CubicTypeFilletBridge Features::SectionSurfaceBuilderEx::CubicTypeFilletBridge@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * EndFace
            (
            );
            /**Returns  the end direction. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool EndDirection
            (
            );
            /**Sets  the end direction. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetEndDirection
            (
                bool endDirection /** enddirection */ 
            );
            /**Returns  the shoulder curve.
                        Only applies to the follow section surface types:
                        @link Features::SectionSurfaceBuilderEx::ConicTypeShoulder Features::SectionSurfaceBuilderEx::ConicTypeShoulder@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * ShoulderCurve
            (
            );
            /**Returns  the start highlight curve.
                        Only applies to the follow section surface type:
                        @link Features::SectionSurfaceBuilderEx::ConicTypeHilite Features::SectionSurfaceBuilderEx::ConicTypeHilite@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * StartHighlightCurve
            (
            );
            /**Returns  the end highlight curve.
                        Only applies to the follow section surface type:
                        @link Features::SectionSurfaceBuilderEx::ConicTypeHilite Features::SectionSurfaceBuilderEx::ConicTypeHilite@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * EndHighlightCurve
            (
            );
            /**Returns  the start continuity. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * StartContinuity
            (
            );
            /**Returns  the end continuity. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * EndContinuity
            (
            );
            /**Returns  the control region. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::ControlRegionType ControlRegion
            (
            );
            /**Sets  the control region. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetControlRegion
            (
                NXOpen::Features::SectionSurfaceBuilderEx::ControlRegionType controlRegion /** controlregion */ 
            );
            /**Returns  the alternate method.
                        This api only applies to the follow section surface methods,
                        circle_tangent and linear-tangent 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int AlternateSolutions
            (
            );
            /**Sets  the alternate method.
                        This api only applies to the follow section surface methods,
                        circle_tangent and linear-tangent 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAlternateSolutions
            (
                int alternateSolutions /** alternatesolutions */ 
            );
            /**Returns  the entire depth skew. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DepthSkewBuilder * EntireDepthSkew
            (
            );
            /**Returns  the start depth skew. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DepthSkewBuilder * StartDepthSkew
            (
            );
            /**Returns  the end depth skew. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DepthSkewBuilder * EndDepthSkew
            (
            );
            /**Returns  the section method circle tangent. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::SectionMethodCircleTangentType SectionMethodCircleTangent
            (
            );
            /**Sets  the section method circle tangent. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSectionMethodCircleTangent
            (
                NXOpen::Features::SectionSurfaceBuilderEx::SectionMethodCircleTangentType sectionMethodCircleTangent /** sectionmethodcircletangent */ 
            );
            /**Returns  the section method rho. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::SectionMethodRhoType SectionMethodRho
            (
            );
            /**Sets  the section method rho. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSectionMethodRho
            (
                NXOpen::Features::SectionSurfaceBuilderEx::SectionMethodRhoType sectionMethodRho /** sectionmethodrho */ 
            );
            /**Returns  the section method fillet bridge. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::SectionMethodFilletBridgeType SectionMethodFilletBridge
            (
            );
            /**Sets  the section method fillet bridge. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSectionMethodFilletBridge
            (
                NXOpen::Features::SectionSurfaceBuilderEx::SectionMethodFilletBridgeType sectionMethodFilletBridge /** sectionmethodfilletbridge */ 
            );
            /**Returns  the rho law. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * RhoLaw
            (
            );
            /**Returns  the radius law. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * RadiusLaw
            (
            );
            /**Returns  the angle law. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * AngleLaw
            (
            );
            /**Returns  the start shape curve. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * StartShapeCurve
            (
            );
            /**Returns  the end shape curve. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * EndShapeCurve
            (
            );
            /**Returns  the spine. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::Spine SpineType
            (
            );
            /**Sets  the spine. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSpineType
            (
                NXOpen::Features::SectionSurfaceBuilderEx::Spine spineType /** spinetype */ 
            );
            /**Returns  the spine vector. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SpineVector
            (
            );
            /**Sets  the spine vector. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSpineVector
            (
                NXOpen::Direction * spineVector /** spinevector */ 
            );
            /**Returns  the spine section. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SpineSection
            (
            );
            /**Returns  the spine start flow direction. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::SpineStartFlowType SpineStartFlowDirection
            (
            );
            /**Sets  the spine start flow direction. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSpineStartFlowDirection
            (
                NXOpen::Features::SectionSurfaceBuilderEx::SpineStartFlowType spineStartFlowDirection /** spinestartflowdirection */ 
            );
            /**Returns  the spine end flow direction. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::SpineEndFlowType SpineEndFlowDirection
            (
            );
            /**Sets  the spine end flow direction. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSpineEndFlowDirection
            (
                NXOpen::Features::SectionSurfaceBuilderEx::SpineEndFlowType spineEndFlowDirection /** spineendflowdirection */ 
            );
            /**Returns  the body preference type. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::BodyType BodyTypePreference
            (
            );
            /**Sets  the body preference type. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetBodyTypePreference
            (
                NXOpen::Features::SectionSurfaceBuilderEx::BodyType type /** type */ 
            );
            /**Returns  the u degree. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::UDegreeType UDegree
            (
            );
            /**Sets  the u degree. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetUDegree
            (
                NXOpen::Features::SectionSurfaceBuilderEx::UDegreeType uDegree /** udegree */ 
            );
            /**Returns  the rebuild. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Rebuild * Rebuild
            (
            );
            /**Returns  the g0 tolerance. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double G0Tolerance
            (
            );
            /**Sets  the g0 tolerance. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetG0Tolerance
            (
                double g0Tolerance /** g0tolerance */ 
            );
            /**Returns  the g1 tolerance. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double G1Tolerance
            (
            );
            /**Sets  the g1 tolerance. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetG1Tolerance
            (
                double g1Tolerance /** g1tolerance */ 
            );
            /**Returns  the g2 tolerance. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double G2Tolerance
            (
            );
            /**Sets  the g2 tolerance. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetG2Tolerance
            (
                double g2Tolerance /** g2tolerance */ 
            );
            /**Returns  the type. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SectionSurfaceBuilderEx::Types Type
            (
            );
            /**Sets  the type. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetType
            (
                NXOpen::Features::SectionSurfaceBuilderEx::Types type /** type */ 
            );
            /**Returns  whether an apex curve should be created. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateApexCurve
            (
            );
            /**Sets  whether an apex curve should be created. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_2 ("advanced freeform modeling") */
            public: void SetCreateApexCurve
            (
                bool createApexCurve /** createapexcurve */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
