#ifndef NXOpen_FEATURES_BRIDGECURVEBUILDEREX_HXX_INCLUDED
#define NXOpen_FEATURES_BRIDGECURVEBUILDEREX_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_BridgeCurveBuilderEx.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_BridgeCurveBuilderEx.hxx>
#include <NXOpen/GeometricUtilities_BridgeCurveConnectivity.hxx>
#include <NXOpen/GeometricUtilities_CurveFitData.hxx>
#include <NXOpen/GeometricUtilities_DepthSkewBuilder.hxx>
#include <NXOpen/GeometricUtilities_TangentMagnitudeBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class BridgeCurveBuilderEx;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BridgeCurveConnectivity;
    }
    namespace GeometricUtilities
    {
        class CurveFitData;
    }
    namespace GeometricUtilities
    {
        class DepthSkewBuilder;
    }
    namespace GeometricUtilities
    {
        class TangentMagnitudeBuilder;
    }
    class ScCollector;
    class Section;
    class SelectCurve;
    class SelectNXObject;
    namespace Features
    {
        class _BridgeCurveBuilderExBuilder;
        class BridgeCurveBuilderExImpl;
        /**
                Represents a @link Features::BridgeCurve Features::BridgeCurve@endlink  builder.
                Use @link Features::BridgeCurveBuilderEx Features::BridgeCurveBuilderEx@endlink  to create, shape and 
                constrain bridges curves between curves, points, surfaces or surface edges.
                The builder can also create symmetric bridge curves across a datum plane,
                datum axis or a vector representing a plane. For more details see the NX
                documentation for Bridge Curves.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateBridgeCurveBuilderEx  NXOpen::Features::FeatureCollection::CreateBridgeCurveBuilderEx @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ConstraintRadius.Value </td> <td> 
         
        1.0 (millimeters part), 0.0625 (inches part) </td> </tr> 

        <tr><td> 
         
        CurveFitData.CurveJoinMethod </td> <td> 
         
        No </td> </tr> 

        <tr><td> 
         
        CurveFitData.Degree </td> <td> 
         
        7 </td> </tr> 

        <tr><td> 
         
        CurveFitData.FitMethod </td> <td> 
         
        DegreeAndSegments </td> </tr> 

        <tr><td> 
         
        CurveFitData.IsAdvancedFit </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CurveFitData.IsAlignShape </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CurveFitData.MaximumDegree </td> <td> 
         
        7 </td> </tr> 

        <tr><td> 
         
        CurveFitData.MaximumSegments </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        CurveFitData.MinimumDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        CurveFitData.Segments </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        EndConnectivity.Continuity.ContinuityType </td> <td> 
         
        G1 </td> </tr> 

        <tr><td> 
         
        Rho.Value </td> <td> 
         
        0.5 </td> </tr> 

        </table>  

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  BridgeCurveBuilderEx : public NXOpen::Features::FeatureBuilder
        {
            /** Start object type */
            public: enum StartObjectTypes
            {
                StartObjectTypesSection/** Section */,
                StartObjectTypesObject/** A point or face */
            };

            /** End object type */
            public: enum EndObjectTypes
            {
                EndObjectTypesSection/** Section */,
                EndObjectTypesObject/** A point or face */,
                EndObjectTypesDatum/** A datum plane or axis for symmetric constraint */,
                EndObjectTypesVector/** A vector representing a plane for symmetric constraint */
            };

            /** Radius constraint methods */
            public: enum RadiusConstraintMethods
            {
                RadiusConstraintMethodsNone/** No constraint */,
                RadiusConstraintMethodsMinimum/** Minimum radius */,
                RadiusConstraintMethodsPeak/** Peak radius */
            };

            /** Shape control methods */
            public: enum ShapeControlMethods
            {
                ShapeControlMethodsTangentMagnitude/** Shape using tangent magnitude at ends */,
                ShapeControlMethodsDepthSkew/** Shape using depth and skew value */,
                ShapeControlMethodsConic/** Shape using rho value of a conic. Valid only when end sections are coplanar. */,
                ShapeControlMethodsTemplateCurve/** Shape by a template curve */
            };

            private: BridgeCurveBuilderExImpl * m_bridgecurvebuilderex_impl;
            private: friend class  _BridgeCurveBuilderExBuilder;
            protected: BridgeCurveBuilderEx();
            public: ~BridgeCurveBuilderEx();
            /**Returns  the start object type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilderEx::StartObjectTypes StartObjectType
            (
            );
            /**Sets  the start object type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling") */
            public: void SetStartObjectType
            (
                NXOpen::Features::BridgeCurveBuilderEx::StartObjectTypes startObjectType /** startobjecttype */ 
            );
            /**Returns  the start section 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * StartSection
            (
            );
            /**Returns  the start object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * StartObject
            (
            );
            /**Returns  the end object type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilderEx::EndObjectTypes EndObjectType
            (
            );
            /**Sets  the end object type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling") */
            public: void SetEndObjectType
            (
                NXOpen::Features::BridgeCurveBuilderEx::EndObjectTypes endObjectType /** endobjecttype */ 
            );
            /**Returns  the end section 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * EndSection
            (
            );
            /**Returns  the end object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * EndObject
            (
            );
            /**Returns  the end vector representing a plane for symmetric modeling 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * EndVector
            (
            );
            /**Sets  the end vector representing a plane for symmetric modeling 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling") */
            public: void SetEndVector
            (
                NXOpen::Direction * endVector /** endvector */ 
            );
            /** Updates the builder based on end vector sense 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling") */
            public: void UpdateOnEndVectorReversal
            (
            );
            /**Returns  the data representing connectivity information at start 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BridgeCurveConnectivity * StartConnectivity
            (
            );
            /**Returns  the data representing connectivity information at end 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BridgeCurveConnectivity * EndConnectivity
            (
            );
            /**Returns  the constraint faces 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ConstraintFaces
            (
            );
            /**Returns  the radius constraint method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilderEx::RadiusConstraintMethods RadiusConstraintMethod
            (
            );
            /**Sets  the radius constraint method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling") */
            public: void SetRadiusConstraintMethod
            (
                NXOpen::Features::BridgeCurveBuilderEx::RadiusConstraintMethods radiusConstraintMethod /** radiusconstraintmethod */ 
            );
            /**Returns  the constraint radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ConstraintRadius
            (
            );
            /**Returns  the shape control method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilderEx::ShapeControlMethods ShapeControlMethod
            (
            );
            /**Sets  the shape control method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling") */
            public: void SetShapeControlMethod
            (
                NXOpen::Features::BridgeCurveBuilderEx::ShapeControlMethods shapeControlMethod /** shapecontrolmethod */ 
            );
            /**Returns  the tangent magnitude 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::TangentMagnitudeBuilder * TangentMagnitude
            (
            );
            /**Returns  the depth skew 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DepthSkewBuilder * DepthSkew
            (
            );
            /**Returns  the rho value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Rho
            (
            );
            /**Returns  the template curve 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectCurve * TemplateCurve
            (
            );
            /**Returns  the flag indicating if a feature should be created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: bool IsAssociative
            (
            );
            /**Sets  the flag indicating if a feature should be created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the curve fitting parameters  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveFitData * CurveFitData
            (
            );
            /** Evaluates the curve 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void Evaluate
            (
            );
            /**Returns  the flag indicating if the nearest cursor position on the section is to be used to locate start or end of the curve 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: bool UseNearestPointOnSection
            (
            );
            /**Sets  the flag indicating if the nearest cursor position on the section is to be used to locate start or end of the curve 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetUseNearestPointOnSection
            (
                bool useNearestPointOnSection /** usenearestpointonsection */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
