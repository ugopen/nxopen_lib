#ifndef NXOpen_PDM_EFFECTIVITYATTRIBUTEPROPERTIESBUILDER_HXX_INCLUDED
#define NXOpen_PDM_EFFECTIVITYATTRIBUTEPROPERTIESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_EffectivityAttributePropertiesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PDM_EffectivityAttributePropertiesBuilder.hxx>
#include <NXOpen/PDM_EffectivityTableBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class EffectivityAttributePropertiesBuilder;
    }
    class Builder;
    class NXObject;
    namespace PDM
    {
        class EffectivityTableBuilder;
    }
    class SelectNXObjectList;
    namespace PDM
    {
        class _EffectivityAttributePropertiesBuilderBuilder;
        class EffectivityAttributePropertiesBuilderImpl;
        /**
                Represents an @link NXOpen::PDM::EffectivityAttributePropertiesBuilder NXOpen::PDM::EffectivityAttributePropertiesBuilder@endlink  to be used for creating effectivity attributes.
                The attribute will be distributed to all objects supplied in the selected object list.
             <br> To create a new instance of this class, use @link NXOpen::PDM::ConfigurationManager::CreateEffectivityAttributePropertiesBuilder  NXOpen::PDM::ConfigurationManager::CreateEffectivityAttributePropertiesBuilder @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  EffectivityAttributePropertiesBuilder : public NXOpen::Builder
        {
            private: EffectivityAttributePropertiesBuilderImpl * m_effectivityattributepropertiesbuilder_impl;
            private: friend class  _EffectivityAttributePropertiesBuilderBuilder;
            protected: EffectivityAttributePropertiesBuilder();
            public: ~EffectivityAttributePropertiesBuilder();
            /**Returns  the selected object(s) list.  The created attribute will be applied to
                    all objects in this list.  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::SelectNXObjectList * SelectedObjects
            (
            );
            /**Returns  the effectivity table builder. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::EffectivityTableBuilder * EffectivityTableBuilder
            (
            );
            /**Returns  the category.  The category is an optional, user-defined string that allows 
                    attributes to be grouped together. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXString Category
            (
            );
            /**Sets  the category.  The category is an optional, user-defined string that allows 
                    attributes to be grouped together. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetCategory
            (
                const NXString & category /** category */ 
            );
            /**Sets  the category.  The category is an optional, user-defined string that allows 
                    attributes to be grouped together. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            void SetCategory
            (
                const char * category /** category */ 
            );
            /**Returns  the attribute title.  The title is required for creating an attribute
                    and must be unique on the given object.  Once the attribute is created,
                    the title cannot be modified. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXString Title
            (
            );
            /**Sets  the attribute title.  The title is required for creating an attribute
                    and must be unique on the given object.  Once the attribute is created,
                    the title cannot be modified. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetTitle
            (
                const NXString & title /** title */ 
            );
            /**Sets  the attribute title.  The title is required for creating an attribute
                    and must be unique on the given object.  Once the attribute is created,
                    the title cannot be modified. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            void SetTitle
            (
                const char * title /** title */ 
            );
            /**Returns  the string value.  Required if creating an attribute of type String. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXString StringValue
            (
            );
            /**Sets  the string value.  Required if creating an attribute of type String. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetStringValue
            (
                const NXString & stringValue /** stringvalue */ 
            );
            /**Sets  the string value.  Required if creating an attribute of type String. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            void SetStringValue
            (
                const char * stringValue /** stringvalue */ 
            );
            /**Returns  the display value.  Required if creating an attribute of type String. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXString DisplayValue
            (
            );
            /**Sets  the display value.  Required if creating an attribute of type String. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetDisplayValue
            (
                const NXString & displayValue /** displayvalue */ 
            );
            /**Sets  the display value.  Required if creating an attribute of type String. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            void SetDisplayValue
            (
                const char * displayValue /** displayvalue */ 
            );
            /** Delete the attribute from the given object. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void Delete
            (
                NXOpen::NXObject * object /** The object containing the attribute */
            );
            /** Create the attribute from the data set in the builder.  Unlike calling commit,
                    this method will not perform an update.   @return  True if the attribute was created/edited successfully 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: bool CreateAttribute
            (
            );
            /** Sets the array of objects that have this attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetAttributeObjects
            (
                const std::vector<NXOpen::NXObject *> & objects /** the array of objects */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
