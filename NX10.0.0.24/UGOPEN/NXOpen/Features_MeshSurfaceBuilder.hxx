#ifndef NXOpen_FEATURES_MESHSURFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MESHSURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MeshSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MeshParameterData.hxx>
#include <NXOpen/MeshProfileString.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SurfaceRebuildData.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class MeshSurfaceBuilder;
    }
    class Curve;
    namespace Features
    {
        class FeatureBuilder;
    }
    class MeshParameterData;
    class MeshProfileString;
    class ScCollector;
    class Section;
    class SurfaceRebuildData;
    namespace Features
    {
        class _MeshSurfaceBuilderBuilder;
        class MeshSurfaceBuilderImpl;
        /** Mesh Surface Builder class.  <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateMeshSurfaceBuilder  NXOpen::Features::FeatureCollection::CreateMeshSurfaceBuilder @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  MeshSurfaceBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** End face constraints types. */
            public: enum ConstraintType
            {
                ConstraintTypeNone/** No constraint */,
                ConstraintTypeTangent/** Tangent       */,
                ConstraintTypeCurvature/** Curvature     */
            };

            /** End face constraints direction. */
            public: enum ConstraintDirection
            {
                ConstraintDirectionNone/** Not specified */,
                ConstraintDirectionIsoparametric/** Isoparametric  */,
                ConstraintDirectionNormal/** Normal   */
            };

            private: MeshSurfaceBuilderImpl * m_meshsurfacebuilder_impl;
            private: friend class  _MeshSurfaceBuilderBuilder;
            protected: MeshSurfaceBuilder();
            public: ~MeshSurfaceBuilder();
            /** Construct a new mesh profile string transient object.  @return  New mesh profile string. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::MeshProfileString * NewProfile
            (
            );
            /**Returns  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::MeshParameterData::FeatureType FeatureType
            (
            );
            /**Sets  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetFeatureType
            (
                NXOpen::MeshParameterData::FeatureType featureType /** feature type */ 
            );
            /** Get tolerances.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: std::vector<double> GetTolerances
            (
                int tolLength /** tol length */ 
            );
            /** Set tolerances for mesh type surfaces. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetTolerances
            (
                const std::vector<double> & tol /** Tolerances */
            );
            /** Get tolerances strings.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: std::vector<NXString> GetToleranceString
            (
                int tolStrLength /** tol str length */ 
            );
            /** Set tolerances strings for mesh type surface.  The strings much match the values. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetToleranceString
            (
                std::vector<NXString> & tolString /** Tolerances   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get profile string point alignment info. Given a profile string, get alignment point
                       parameters on segments indexed by align_index along the profile string.
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void GetProfilePointAlignment
            (
                int stringIndex /** string index in profile strings */,
                int arrayLength /** array length */ ,
                std::vector<int> & alignIndex /** Alignment indices */,
                std::vector<double> & alignParams /** Alignment parameters  */
            );
            /** Set profile string alignment info. For each profile string, user needs to spectify the 
                       point alignment parameters on segments indexed by align_index along the profile string.
                   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetProfilePointAlignment
            (
                int stringIndex /** string index in profile strings */,
                const std::vector<int> & alignIndex /** Alignment indices */,
                const std::vector<double> & alignParams /** Alignment parameters (normalized)  */
            );
            /** Get faces constraints collectors for through curves and curves mesh types surfaces. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void GetFaceConstraintCollectors
            (
                int nSides /** n sides */ ,
                std::vector<int> & facesCons /** Number of faces on each side */,
                int numCollectors /** num collectors */ ,
                std::vector<NXOpen::ScCollector *> & collectors /** Constraints collectors. */,
                int numConsTypes /** num cons types */ ,
                std::vector<NXOpen::Features::MeshSurfaceBuilder::ConstraintType> & consTypes /** type on each side.*/
            );
            /** Set faces constraints collectors for through curves and curves mesh types surfaces. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetFaceConstraintCollectors
            (
                const std::vector<int> & facesCons /** Number of faces on all sides */,
                const std::vector<NXOpen::ScCollector *> & collectors /** Constraints collectors. */,
                const std::vector<NXOpen::Features::MeshSurfaceBuilder::ConstraintType> & consTypes /** type on each side. */
            );
            /** Creates mesh surface profile string. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void BuildProfileFromSections
            (
                bool conehead /** Display conehead?         */,
                NXOpen::MeshProfileString::Type profileStringType /** Mesh profile string type  */,
                NXOpen::MeshParameterData::FeatureType skinType /** Mesh surface type         */,
                NXOpen::MeshProfileString::SelectedPoint stringPointType /** Profile string point type */,
                const std::vector<NXOpen::Section *> & sections /** Sections */,
                bool editInsertProfile /** Flag to indicate if this is temporary
                                                                                                   profile to inserting new string purpose only. */,
                NXOpen::MeshProfileString * profile /** Mesh profile string */
            );
            /** Get mesh profile string with provided index.  @return  Requested profile data. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::MeshProfileString * GetProfile
            (
                int index /** Profile index.  */
            );
            /** Remove a string (string_index) from a profile (profile_index) 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void RemoveProfileString
            (
                int profileIndex /** mesh profile string index */,
                int stringIndex /** String index in mesh profile string */
            );
            /** Insert a string (string_index, with order) into a profile (profile_index). 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void InsertProfileString
            (
                int profileIndex /** mesh profile string index */,
                NXOpen::MeshProfileString::InsertOrder order /** before or after */,
                int stringIndex /** String index in mesh profile string */
            );
            /** Reorder profile string curves. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void ReorderProfileStringCurves
            (
                int stringIndex /** Profile string index. */,
                NXOpen::Curve * stringStartCurve /** New start curve.      */
            );
            /** Validate the new parameters for mesh surface editing. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void ValidateFeatureParameters
            (
            );
            /** Allocate memory for Mesh type surface rebuild data.  @return  Allocated rebuild data. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::SurfaceRebuildData * NewRebuildData
            (
            );
            /**Sets  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetRebuildData
            (
                NXOpen::SurfaceRebuildData * rbData /** Rebuild data */
            );
            /**Returns  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::SurfaceRebuildData * RebuildData
            (
            );
            /** Get end constraints types.  @return  Constraint types 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: std::vector<NXOpen::Features::MeshSurfaceBuilder::ConstraintType> GetFaceConstraintTypes
            (
                int constraintSize /** constraint size */ 
            );
            /** Set end constraints types. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetFaceConstraintTypes
            (
                const std::vector<NXOpen::Features::MeshSurfaceBuilder::ConstraintType> & constraintTypes /** Constraint types */
            );
            /** Create a mesh parameters transient object data.  @return  Allocated rebuild data. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::MeshParameterData * NewParametersData
            (
            );
            /**Sets  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetParametersData
            (
                NXOpen::MeshParameterData * parameters /** parameters */ 
            );
            /**Returns  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::MeshParameterData * ParametersData
            (
            );
            /**Sets  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetSimpleConstruction
            (
                bool simple /** simple */ 
            );
            /**Returns  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: bool SimpleConstruction
            (
            );
            /** Set angle alignment points.  Points will be used to evaluate the alignment angle. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetAngleAlignmentPoints
            (
                const NXOpen::Point3d & point1 /** Point 1 */,
                const NXOpen::Point3d & point2 /** Point 2 */
            );
            /** Get angle alignment points
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void GetAngleAlignmentPoints
            (
                NXOpen::Point3d* point1 /** Point 1 */,
                NXOpen::Point3d* point2 /** Point 2 */
            );
            /** Set distance alignment vector 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetDistanceAlignmentVector
            (
                const NXOpen::Vector3d & vector /** Vector */
            );
            /** Get distance alignment vector  @return  Vector 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Vector3d GetDistanceAlignmentVector
            (
            );
            /** Remove points alignment information.  Remove alignment can be restore by calling 
                       @link Features::MeshSurfaceBuilder::RestorePointsAlignment Features::MeshSurfaceBuilder::RestorePointsAlignment@endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void RemovePointsAlignment
            (
            );
            /** Restore the last removed points alignment information if there is one. 
                       Once restored, the saved alignment information will no logner be available. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void RestorePointsAlignment
            (
            );
            /** Remove spine alignment. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void RemoveSpineAlignment
            (
            );
            /**Returns  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::MeshSurfaceBuilder::ConstraintDirection FaceConstraintDirection
            (
            );
            /**Sets  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetFaceConstraintDirection
            (
                NXOpen::Features::MeshSurfaceBuilder::ConstraintDirection constraintDirection /** constraint direction */ 
            );
            /**Returns  the normal to end sections for Through Curves surface. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: bool NormalToEndSections
            (
            );
            /**Sets  the normal to end sections for Through Curves surface. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetNormalToEndSections
            (
                bool normalToEndSections /** normal to end sections */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
