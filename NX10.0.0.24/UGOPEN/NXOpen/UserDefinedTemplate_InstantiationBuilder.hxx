#ifndef NXOpen_USERDEFINEDTEMPLATE_INSTANTIATIONBUILDER_HXX_INCLUDED
#define NXOpen_USERDEFINEDTEMPLATE_INSTANTIATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UserDefinedTemplate_InstantiationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/UserDefinedTemplate_InstantiationBuilder.hxx>
#include <NXOpen/libnxopencpp_userdefinedtemplate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UserDefinedTemplate
    {
        class InstantiationBuilder;
    }
    class Builder;
    class Expression;
    class NXObject;
    class Part;
    namespace UserDefinedTemplate
    {
        class _InstantiationBuilderBuilder;
        class InstantiationBuilderImpl;
        /**
            Represents a @link UserDefinedTemplate::InstantiationBuilder UserDefinedTemplate::InstantiationBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::UserDefinedTemplate::Collection::CreateInstantiationBuilder  NXOpen::UserDefinedTemplate::Collection::CreateInstantiationBuilder @endlink  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_USERDEFINEDTEMPLATEEXPORT  InstantiationBuilder : public NXOpen::Builder
        {
            /** Output layer options */
            public: enum JaUserdefinedtemplateLayerOption
            {
                JaUserdefinedtemplateLayerOptionWork/** Outputs will follow the work parts layer convention */,
                JaUserdefinedtemplateLayerOptionOriginal/** Outputs will be in the same layer as in authoring part */,
                JaUserdefinedtemplateLayerOptionSpecify/** Outputs will be in user specified layer */
            };

            private: InstantiationBuilderImpl * m_instantiationbuilder_impl;
            private: friend class  _InstantiationBuilderBuilder;
            protected: InstantiationBuilder();
            public: ~InstantiationBuilder();
            /** Return the authoring part of User Defined Template object  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: NXOpen::Part * LoadAuthoringPart
            (
                const NXString & authoringPartName /** Name of the authoring part with full path   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Return the authoring part of User Defined Template object  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            NXOpen::Part * LoadAuthoringPart
            (
                const char * authoringPartName /** Name of the authoring part with full path   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the expressions in User Defined Template  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Expression *> GetExpressions
            (
            );
            /** Returns the matched expression of an original expression in User Defined Template  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * GetMatchedExpression
            (
                NXOpen::Expression * originalExpression /** original expression */ ,
                bool* canBeEdited /** can be edited */ 
            );
            /** Returns the references in User Defined Template  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::NXObject *> GetReferences
            (
            );
            /** Returns the matched reference of an original reference in User Defined Template  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * GetMatchedReference
            (
                NXOpen::NXObject * originalReference /** original reference */ ,
                bool* isDirectionFlipped /** is direction flipped */ 
            );
            /** Set the matched reference of an original reference in User Defined Template 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: void SetMatchedReference
            (
                NXOpen::NXObject * originalReference /** original reference */ ,
                NXOpen::NXObject * matchedReference /** matched reference */ ,
                bool flipDirection /** flip direction */ 
            );
            /**Returns  the property of whether user is allowed to explode User Defined Template instantiation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool Explosion
            (
            );
            /**Sets  the property of whether user is allowed to explode User Defined Template instantiation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: void SetExplosion
            (
                bool explode /** explode */ 
            );
            /**Returns  the property of output layer option of User Defined Template instantiation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::UserDefinedTemplate::InstantiationBuilder::JaUserdefinedtemplateLayerOption LayerOption
            (
            );
            /**Sets  the property of output layer option of User Defined Template instantiation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: void SetLayerOption
            (
                NXOpen::UserDefinedTemplate::InstantiationBuilder::JaUserdefinedtemplateLayerOption layerOption /** layer option */ 
            );
            /**Returns  the output layer number user specify for User Defined Template instantiation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int LayerNumber
            (
            );
            /**Sets  the output layer number user specify for User Defined Template instantiation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: void SetLayerNumber
            (
                int layerNumber /** layer number */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
