#ifndef NXOpen_FEATURES_STUDIOXFORMBUILDEREX_HXX_INCLUDED
#define NXOpen_FEATURES_STUDIOXFORMBUILDEREX_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_StudioXformBuilderEx.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FaceRecognitionBuilder.hxx>
#include <NXOpen/Features_StudioXformBuilderEx.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_ControlPoleManagerData.hxx>
#include <NXOpen/GeometricUtilities_CurveRangeBuilder.hxx>
#include <NXOpen/GeometricUtilities_DegreesAndSegmentsOrPatchesBuilder.hxx>
#include <NXOpen/GeometricUtilities_OrientXpressBuilder.hxx>
#include <NXOpen/GeometricUtilities_SurfaceRangeBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class StudioXformBuilderEx;
    }
    class Direction;
    namespace Features
    {
        class FaceRecognitionBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class ControlPoleManagerData;
    }
    namespace GeometricUtilities
    {
        class CurveRangeBuilder;
    }
    namespace GeometricUtilities
    {
        class DegreesAndSegmentsOrPatchesBuilder;
    }
    namespace GeometricUtilities
    {
        class OrientXpressBuilder;
    }
    namespace GeometricUtilities
    {
        class SurfaceRangeBuilder;
    }
    class NXObject;
    class Plane;
    class Point;
    class SelectNXObjectList;
    namespace Features
    {
        class _StudioXformBuilderExBuilder;
        class StudioXformBuilderExImpl;
        /** Represents a @link NXOpen::Features::StudioXform NXOpen::Features::StudioXform@endlink  builder   <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateStudioXformBuilderEx  NXOpen::Features::FeatureCollection::CreateStudioXformBuilderEx @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AdvancedMethodOption </td> <td> 
         
        AdvancedOff </td> </tr> 

        <tr><td> 
         
        CanUseFaceFinder </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CurveRange.AnchorPosition </td> <td> 
         
        Start </td> </tr> 

        <tr><td> 
         
        DegreesAndSegmentsOrPatches.Degree </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        DegreesAndSegmentsOrPatches.SegmentsOrPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        DegreesAndSegmentsOrPatches.UDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        DegreesAndSegmentsOrPatches.UPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        DegreesAndSegmentsOrPatches.VDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        DegreesAndSegmentsOrPatches.VPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ExtractMethod </td> <td> 
         
        Original </td> </tr> 

        <tr><td> 
         
        FaceFinder.CoaxialEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceFinder.CoplanarAxesEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceFinder.CoplanarEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceFinder.EqualDiameterEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceFinder.OffsetEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceFinder.ParallelEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceFinder.PerpendicularEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceFinder.SymmetricEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceFinder.TangentEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceFinder.ThicknessChainEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceFinder.UseFaceBrowse </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        FallOffScale </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FeatureSaveMethod </td> <td> 
         
        Relative </td> </tr> 

        <tr><td> 
         
        InsertKnotDirection </td> <td> 
         
        UDirection </td> </tr> 

        <tr><td> 
         
        InsertKnotParameter </td> <td> 
         
        20 </td> </tr> 

        <tr><td> 
         
        IsSingleSelection </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        KeepAllContinuity </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        LockPoles </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        LockRegionUEndFlexibility </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        LockRegionUStartFlexibility </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        LockRegionVEndFlexibility </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        LockRegionVStartFlexibility </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MovementMethod </td> <td> 
         
        View </td> </tr> 

        <tr><td> 
         
        PlanarizeDirection </td> <td> 
         
        U </td> </tr> 

        <tr><td> 
         
        PlanarizeMethod </td> <td> 
         
        AtPlaneLocation </td> </tr> 

        <tr><td> 
         
        PlanarizeProjectionPlane </td> <td> 
         
        YZ </td> </tr> 

        <tr><td> 
         
        PrincipalMovementDirection </td> <td> 
         
        Z </td> </tr> 

        <tr><td> 
         
        PrincipalRotatingAxis </td> <td> 
         
        Z </td> </tr> 

        <tr><td> 
         
        PrincipalScalingDirection </td> <td> 
         
        X </td> </tr> 

        <tr><td> 
         
        ProportionalAllU </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ProportionalAllV </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ProportionalFallOffScale (deprecated) </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        ProportionalMoveAfterU </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ProportionalMoveAfterV </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ProportionalMoveBeforeU </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ProportionalMoveBeforeV </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RotatingAxis </td> <td> 
         
        WCS </td> </tr> 

        <tr><td> 
         
        ScalingDirection </td> <td> 
         
        View </td> </tr> 

        <tr><td> 
         
        SurfaceRange.AnchorPosition </td> <td> 
         
        Vertex1 </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  StudioXformBuilderEx : public NXOpen::Features::FeatureBuilder
        {
            /** Represents the Xform editing type */
            public: enum Types
            {
                TypesTranslate/** Translate type of Xform */,
                TypesRotate/** Rotate type of Xform */,
                TypesScale/** Scale type of Xform */,
                TypesPlanarize/** Planarize type of Xform */
            };

            /** Represents the Xform movement type */
            public: enum MovementMethodType
            {
                MovementMethodTypeWCS/** Translate in principal direction */,
                MovementMethodTypeView/** Translate in view direction */,
                MovementMethodTypeVector/** Translate in vector direction */,
                MovementMethodTypePlane/** Translate on a plane */,
                MovementMethodTypeNormal/** Translate in normal direction */,
                MovementMethodTypePolygon/** Translate in polygon direction */
            };

            /** Represents the principal movement direction type */
            public: enum PrincipalMovementDirectionType
            {
                PrincipalMovementDirectionTypeX/** Translate in X direction */,
                PrincipalMovementDirectionTypeY/** Translate in Y direction */,
                PrincipalMovementDirectionTypeZ/** Translate in Z direction */,
                PrincipalMovementDirectionTypeYZ/** Translate on Y-Z plane */,
                PrincipalMovementDirectionTypeXZ/** Translate on X-Z plane */,
                PrincipalMovementDirectionTypeXY/** Translate on X-Y plane */,
                PrincipalMovementDirectionTypeXYZ/** Translate on X-Y-Z coordinates */
            };

            /** Represents the rotation axis type */
            public: enum RotatingAxisType
            {
                RotatingAxisTypeWCS/** Rotate in principal direction */,
                RotatingAxisTypeView/** Rotate in view direction */,
                RotatingAxisTypeVector/** Rotate in vector direction */,
                RotatingAxisTypePlane/** Rotate on a plane */
            };

            /** Represents the principal rotation axis type */
            public: enum PrincipalRotatingAxisType
            {
                PrincipalRotatingAxisTypeX/** Rotate in X direction */,
                PrincipalRotatingAxisTypeY/** Rotate in Y direction */,
                PrincipalRotatingAxisTypeZ/** Rotate in Z direction */
            };

            /** Represents the rotating pivot type */
            public: enum RotatingPivotType
            {
                RotatingPivotTypeRotateaboutobjectcenter/** Rotate pivot at the object center */,
                RotatingPivotTypeRotateaboutselected/** Rotate pivot at the selected object */,
                RotatingPivotTypeRotateaboutpoint/** Rotate pivot at a point */
            };

            /** Represents the scaling direction type */
            public: enum ScalingDirectionType
            {
                ScalingDirectionTypeWCS/** Scale in principal direction */,
                ScalingDirectionTypeView/** Scale in view direction */,
                ScalingDirectionTypeVector/** Scale in vector direction */,
                ScalingDirectionTypePlane/** Scale in plane direction */,
                ScalingDirectionTypePlaneofCurve/** Scale on Plane of curve */
            };

            /** Represents the principal scaling direction type */
            public: enum PrincipalScalingDirectionType
            {
                PrincipalScalingDirectionTypeX/** Scale in X direction */,
                PrincipalScalingDirectionTypeY/** Scale in Y direction */,
                PrincipalScalingDirectionTypeZ/** Scale in Z direction */,
                PrincipalScalingDirectionTypeYZ/** Scale on Y-Z plane */,
                PrincipalScalingDirectionTypeXZ/** Scale on X-Z plane */,
                PrincipalScalingDirectionTypeXY/** Scale on X-Y plane */
            };

            /** Represents the scaling center type */
            public: enum ScalingCenterType
            {
                ScalingCenterTypeScaleaboutobjectcenter/** Scale center at the object center */,
                ScalingCenterTypeScaleaboutselected/** Scale center at the selected object */,
                ScalingCenterTypeScaleaboutpoint/** Scale center at a point */
            };

            /** Represents the planarize method type */
            public: enum PlanarizeMethodType
            {
                PlanarizeMethodTypeAtPlaneLocation/** planarize at plane location */,
                PlanarizeMethodTypeAtPoleLocation/** planarize at pole location */,
                PlanarizeMethodTypeOnaBestFitPlane/** planarize at a best fit plane */
            };

            /** Represents the planarize direction type */
            public: enum PlanarizeDirectionType
            {
                PlanarizeDirectionTypeU/** U direction when planarize */,
                PlanarizeDirectionTypeV/** V direction when planarize */
            };

            /** Represents the planarize projection plane type */
            public: enum PlanarizeProjectionPlaneType
            {
                PlanarizeProjectionPlaneTypeYZ/** On Y-Z plane when planarize */,
                PlanarizeProjectionPlaneTypeXZ/** On X-Z plane when planarize */,
                PlanarizeProjectionPlaneTypeXY/** On X-Y plane when planarize */,
                PlanarizeProjectionPlaneTypePlane/** On arbitrary plane when planarize */
            };

            /** Represents the advanced method type 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Features::StudioXformBuilderEx::AdvancedMethodOptionType NXOpen::Features::StudioXformBuilderEx::AdvancedMethodOptionType@endlink  instead. <br>  
            */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Features::StudioXformBuilderEx::AdvancedMethodOptionType instead.") enum AdvancedMethodType
            {
                AdvancedMethodTypeProportionalMovement/** Proportional movement */,
                AdvancedMethodTypeFalloff/** Fall off, it is deprecated in NX85 release */,
                AdvancedMethodTypeKeepContinuity/** Keep continuity, it is deprecated in NX85 release */,
                AdvancedMethodTypeLockRegion/** Lock region */,
                AdvancedMethodTypeInsertKnot/** Insert knot */,
                AdvancedMethodTypeAdvanceOff/** Turn off advanced methods*/
            };

            /** Represents the advanced method option type */
            public: enum AdvancedMethodOptionType
            {
                AdvancedMethodOptionTypeProportional/** Proportional movement */,
                AdvancedMethodOptionTypeLockRegion/** Lock region */,
                AdvancedMethodOptionTypeInsertKnot/** Insert knot */,
                AdvancedMethodOptionTypeAdvancedOff/** No advanced methods*/
            };

            /** Represents the pole control type in proportional method */
            public: enum ProportionalPoleControlType
            {
                ProportionalPoleControlTypeAll/** All poles are moved */,
                ProportionalPoleControlTypeSelected/** Only selected poles are moved */,
                ProportionalPoleControlTypeByUV/** Poles on U or V are moved */
            };

            /** Represents the insert knot direction type */
            public: enum InsertKnotDirectionType
            {
                InsertKnotDirectionTypeUDirection/** Insert knot in U direction */,
                InsertKnotDirectionTypeVDirection/** Insert knot in V direction */
            };

            /** Represents the feature type */
            public: enum FeatureType
            {
                FeatureTypeRelative/** Relative feature type of Xform */,
                FeatureTypeAbsolute/** Absolute feature type of Xform */
            };

            /** Represents the insert pole type */
            public: enum InsertPoleType
            {
                InsertPoleTypeNext/** Insert pole next to the selected pole */,
                InsertPoleTypePrevious/** Insert pole previous to the selected pole */
            };

            /** Represents the U or V direction of a B-Surface */
            public: enum SurfaceDirectionType
            {
                SurfaceDirectionTypeU/** U direction of a B-Surface */,
                SurfaceDirectionTypeV/** V direction of a B-Surface */
            };

            /** Editing types of a pole of spline belonging to a Studio Spline feature */
            public: enum PoleEditType
            {
                PoleEditTypeNone/** Not edited */,
                PoleEditTypeConstrained/** Edited maintaining constraint */,
                PoleEditTypeFree/** Edited without maintaining constraint */
            };

            /** B-surface extraction method */
            public: enum ExtrationMethodType
            {
                ExtrationMethodTypeOriginal/** Extract original surface */,
                ExtrationMethodTypeMinimumBounded/** Extract minimum bounded surface */,
                ExtrationMethodTypeFittoBoundary/** Extract surface fitted to boundary of face */
            };

            private: StudioXformBuilderExImpl * m_studioxformbuilderex_impl;
            private: friend class  _StudioXformBuilderExBuilder;
            protected: StudioXformBuilderEx();
            public: ~StudioXformBuilderEx();
            /**Returns  the single selection flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSingleSelection
            (
            );
            /**Sets  the single selection flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetSingleSelection
            (
                bool singleSelectionFlag /** singleselectionflag */ 
            );
            /**Returns  the using face finder flag 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CanUseFaceFinder
            (
            );
            /**Sets  the using face finder flag 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetCanUseFaceFinder
            (
                bool canUseFaceFinder /** canusefacefinder */ 
            );
            /**Returns  the object to be transformed. Any face having b-surface
                    type geometry or curve having b-curve geometry can be transformed. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * XformObjects
            (
            );
            /**Returns  the face finder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FaceRecognitionBuilder * FaceFinder
            (
            );
            /**Returns  the control pole manager 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ControlPoleManagerData * ControlPoleManager
            (
            );
            /**Returns  the degrees and segments or patches 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DegreesAndSegmentsOrPatchesBuilder * DegreesAndSegmentsOrPatches
            (
            );
            /**Returns  the movement method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::MovementMethodType MovementMethod
            (
            );
            /**Sets  the movement method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMovementMethod
            (
                NXOpen::Features::StudioXformBuilderEx::MovementMethodType movementMethod /** movementmethod */ 
            );
            /**Returns  the principal movement direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::PrincipalMovementDirectionType PrincipalMovementDirection
            (
            );
            /**Sets  the principal movement direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPrincipalMovementDirection
            (
                NXOpen::Features::StudioXformBuilderEx::PrincipalMovementDirectionType principalMovementDirection /** principalmovementdirection */ 
            );
            /**Returns  the orient express object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OrientXpressBuilder * XformOX
            (
            );
            /**Returns  the movement arbitrary vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * MovementArbitraryVector
            (
            );
            /**Sets  the movement arbitrary vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMovementArbitraryVector
            (
                NXOpen::Direction * movementArbitraryVector /** movementarbitraryvector */ 
            );
            /**Returns  the movement arbitrary plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * MovementArbitraryPlane
            (
            );
            /**Sets  the movement arbitrary plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMovementArbitraryPlane
            (
                NXOpen::Plane * movementArbitraryPlane /** movementarbitraryplane */ 
            );
            /**Returns  the rotating axis 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::RotatingAxisType RotatingAxis
            (
            );
            /**Sets  the rotating axis 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetRotatingAxis
            (
                NXOpen::Features::StudioXformBuilderEx::RotatingAxisType rotatingAxis /** rotatingaxis */ 
            );
            /**Returns  the principal rotating axis 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::PrincipalRotatingAxisType PrincipalRotatingAxis
            (
            );
            /**Sets  the principal rotating axis 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPrincipalRotatingAxis
            (
                NXOpen::Features::StudioXformBuilderEx::PrincipalRotatingAxisType principalRotatingAxis /** principalrotatingaxis */ 
            );
            /**Returns  the rotating arbitrary vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * RotatingArbitraryVector
            (
            );
            /**Sets  the rotating arbitrary vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetRotatingArbitraryVector
            (
                NXOpen::Direction * rotatingArbitraryVector /** rotatingarbitraryvector */ 
            );
            /**Returns  the rotating arbitrary plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * RotatingArbitraryPlane
            (
            );
            /**Sets  the rotating arbitrary plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetRotatingArbitraryPlane
            (
                NXOpen::Plane * rotatingArbitraryPlane /** rotatingarbitraryplane */ 
            );
            /**Returns  the rotating pivot 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::RotatingPivotType RotatingPivot
            (
            );
            /**Sets  the rotating pivot 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetRotatingPivot
            (
                NXOpen::Features::StudioXformBuilderEx::RotatingPivotType rotatingPivot /** rotatingpivot */ 
            );
            /**Returns  the rotating pivot point 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * RotatingPivotPoint
            (
            );
            /**Sets  the rotating pivot point 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetRotatingPivotPoint
            (
                NXOpen::Point * rotatingPivotPoint /** rotatingpivotpoint */ 
            );
            /**Returns  the scaling direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::ScalingDirectionType ScalingDirection
            (
            );
            /**Sets  the scaling direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetScalingDirection
            (
                NXOpen::Features::StudioXformBuilderEx::ScalingDirectionType scalingDirection /** scalingdirection */ 
            );
            /**Returns  the principal scaling direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::PrincipalScalingDirectionType PrincipalScalingDirection
            (
            );
            /**Sets  the principal scaling direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPrincipalScalingDirection
            (
                NXOpen::Features::StudioXformBuilderEx::PrincipalScalingDirectionType principalScalingDirection /** principalscalingdirection */ 
            );
            /**Returns  the scaling arbitrary vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ScalingArbitraryVector
            (
            );
            /**Sets  the scaling arbitrary vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetScalingArbitraryVector
            (
                NXOpen::Direction * scalingArbitraryVector /** scalingarbitraryvector */ 
            );
            /**Returns  the scaling arbitrary plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * ScalingArbitraryPlane
            (
            );
            /**Sets  the scaling arbitrary plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetScalingArbitraryPlane
            (
                NXOpen::Plane * scalingArbitraryPlane /** scalingarbitraryplane */ 
            );
            /**Returns  the scaling center 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::ScalingCenterType ScalingCenter
            (
            );
            /**Sets  the scaling center 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetScalingCenter
            (
                NXOpen::Features::StudioXformBuilderEx::ScalingCenterType scalingCenter /** scalingcenter */ 
            );
            /**Returns  the scaling center point 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ScalingCenterPoint
            (
            );
            /**Sets  the scaling center point 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetScalingCenterPoint
            (
                NXOpen::Point * scalingCenterPoint /** scalingcenterpoint */ 
            );
            /**Returns  the planarize method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::PlanarizeMethodType PlanarizeMethod
            (
            );
            /**Sets  the planarize method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPlanarizeMethod
            (
                NXOpen::Features::StudioXformBuilderEx::PlanarizeMethodType planarizeMethod /** planarizemethod */ 
            );
            /**Returns  the planarize direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::PlanarizeDirectionType PlanarizeDirection
            (
            );
            /**Sets  the planarize direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPlanarizeDirection
            (
                NXOpen::Features::StudioXformBuilderEx::PlanarizeDirectionType planarizeDirection /** planarizedirection */ 
            );
            /**Returns  the planarize projection plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::PlanarizeProjectionPlaneType PlanarizeProjectionPlane
            (
            );
            /**Sets  the planarize projection plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPlanarizeProjectionPlane
            (
                NXOpen::Features::StudioXformBuilderEx::PlanarizeProjectionPlaneType planarizeProjectionPlane /** planarizeprojectionplane */ 
            );
            /**Returns  the planarize arbitrary plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * PlanarizeArbitraryPlane
            (
            );
            /**Sets  the planarize arbitrary plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPlanarizeArbitraryPlane
            (
                NXOpen::Plane * planarizeArbitraryPlane /** planarizearbitraryplane */ 
            );
            /**Returns  the advanced method 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Features::StudioXformBuilderEx::AdvancedMethodOption NXOpen::Features::StudioXformBuilderEx::AdvancedMethodOption@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Features::StudioXformBuilderEx::AdvancedMethodOption instead.") NXOpen::Features::StudioXformBuilderEx::AdvancedMethodType AdvancedMethod
            (
            );
            /**Sets  the advanced method 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Features::StudioXformBuilderEx::SetAdvancedMethodOption NXOpen::Features::StudioXformBuilderEx::SetAdvancedMethodOption@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Features::StudioXformBuilderEx::SetAdvancedMethodOption instead.") void SetAdvancedMethod
            (
                NXOpen::Features::StudioXformBuilderEx::AdvancedMethodType advancedMethod /** advancedmethod */ 
            );
            /**Returns  the advanced method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::AdvancedMethodOptionType AdvancedMethodOption
            (
            );
            /**Sets  the advanced method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetAdvancedMethodOption
            (
                NXOpen::Features::StudioXformBuilderEx::AdvancedMethodOptionType advancedMethod /** advancedmethod */ 
            );
            /**Returns  the proportional pole control type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::ProportionalPoleControlType ProportionalPoleControlOption
            (
            );
            /**Sets  the proportional pole control type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalPoleControlOption
            (
                NXOpen::Features::StudioXformBuilderEx::ProportionalPoleControlType poleControlOption /** polecontroloption */ 
            );
            /**Returns  a value indicating whether to use all poles in U direction during the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ProportionalAllU
            (
            );
            /**Sets  a value indicating whether to use all poles in U direction during the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalAllU
            (
                bool proportionalAllU /** proportionalallu */ 
            );
            /**Returns  a value indicating whether to use all poles in V direction during the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ProportionalAllV
            (
            );
            /**Sets  a value indicating whether to use all poles in V direction during the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalAllV
            (
                bool proportionalAllV /** proportionalallv */ 
            );
            /**Returns  a value indicating the pole number before u to participate in the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int ProportionalMoveBeforeU
            (
            );
            /**Sets  a value indicating the pole number before u to participate in the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalMoveBeforeU
            (
                int proportionalMoveBeforeU /** proportionalmovebeforeu */ 
            );
            /**Returns  a value indicating the pole number after u to participate in the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int ProportionalMoveAfterU
            (
            );
            /**Sets  a value indicating the pole number after u to participate in the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalMoveAfterU
            (
                int proportionalMoveAfterU /** proportionalmoveafteru */ 
            );
            /**Returns  a value indicating the pole number before v to participate in the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int ProportionalMoveBeforeV
            (
            );
            /**Sets  a value indicating the pole number before v to participate in the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalMoveBeforeV
            (
                int proportionalMoveBeforeV /** proportionalmovebeforev */ 
            );
            /**Returns  a value indicating the pole number after v to participate in the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int ProportionalMoveAfterV
            (
            );
            /**Sets  a value indicating the pole number after v to participate in the proportional movement 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalMoveAfterV
            (
                int proportionalMoveAfterV /** proportionalmoveafterv */ 
            );
            /**Returns  the proportional fall off scale 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Features::StudioXformBuilderEx::FallOffScale NXOpen::Features::StudioXformBuilderEx::FallOffScale@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Features::StudioXformBuilderEx::FallOffScale instead.") double ProportionalFallOffScale
            (
            );
            /**Sets  the proportional fall off scale 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Features::StudioXformBuilderEx::SetFallOffScale NXOpen::Features::StudioXformBuilderEx::SetFallOffScale@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Features::StudioXformBuilderEx::SetFallOffScale instead.") void SetProportionalFallOffScale
            (
                double proportionalFallOffScale /** proportionalfalloffscale */ 
            );
            /** Reset the proportional scale 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Features::StudioXformBuilderEx::FallOffReset NXOpen::Features::StudioXformBuilderEx::FallOffReset@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Features::StudioXformBuilderEx::FallOffReset instead.") void ProportionalReset
            (
            );
            /**Returns  the fall off scale 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double FallOffScale
            (
            );
            /**Sets  the fall off scale 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetFallOffScale
            (
                double fallOffScale /** falloffscale */ 
            );
            /** Reset the fall off scale 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void FallOffReset
            (
            );
            /**Returns  a value indicating whether to keep all continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool KeepAllContinuity
            (
            );
            /**Sets  a value indicating whether to keep all continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetKeepAllContinuity
            (
                bool keepAllContinuity /** keepallcontinuity */ 
            );
            /**Returns  the continuity at U minimum 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ContinuityUMin
            (
            );
            /**Returns  the continuity at U maximum 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ContinuityUMax
            (
            );
            /**Returns  the continuity at V minimum 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ContinuityVMin
            (
            );
            /**Returns  the continuity at V maximum 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ContinuityVMax
            (
            );
            /**Returns  a value indicating whether to lock poles in boundary constraints 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool LockPoles
            (
            );
            /**Sets  a value indicating whether to lock poles in boundary constraints 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetLockPoles
            (
                bool lockPoles /** lockpoles */ 
            );
            /**Returns  the curve range 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveRangeBuilder * CurveRange
            (
            );
            /**Returns  the surface range 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SurfaceRangeBuilder * SurfaceRange
            (
            );
            /**Returns  the lock region flexibility at U start 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int LockRegionUStartFlexibility
            (
            );
            /**Sets  the lock region flexibility at U start 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetLockRegionUStartFlexibility
            (
                int lockRegionUStartFlexibility /** lockregionustartflexibility */ 
            );
            /**Returns  the lock region flexibility at U end 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int LockRegionUEndFlexibility
            (
            );
            /**Sets  the lock region flexibility at U end 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetLockRegionUEndFlexibility
            (
                int lockRegionUEndFlexibility /** lockregionuendflexibility */ 
            );
            /**Returns  the lock region flexibility at V start 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int LockRegionVStartFlexibility
            (
            );
            /**Sets  the lock region flexibility at V start 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetLockRegionVStartFlexibility
            (
                int lockRegionVStartFlexibility /** lockregionvstartflexibility */ 
            );
            /**Returns  the lock region flexibility at V end 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int LockRegionVEndFlexibility
            (
            );
            /**Sets  the lock region flexibility at V end 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetLockRegionVEndFlexibility
            (
                int lockRegionVEndFlexibility /** lockregionvendflexibility */ 
            );
            /**Returns  the insert knot direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::InsertKnotDirectionType InsertKnotDirection
            (
            );
            /**Sets  the insert knot direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetInsertKnotDirection
            (
                NXOpen::Features::StudioXformBuilderEx::InsertKnotDirectionType insertKnotDirection /** insertknotdirection */ 
            );
            /**Returns  the parameter where to insert knots 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int InsertKnotParameter
            (
            );
            /**Sets  the parameter where to insert knots 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetInsertKnotParameter
            (
                int insertKnotSlider /** insertknotslider */ 
            );
            /** Insert knots 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void InsertKnots
            (
            );
            /**Returns  the b-surface extraction method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::ExtrationMethodType ExtractMethod
            (
            );
            /**Sets  the b-surface extraction method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetExtractMethod
            (
                NXOpen::Features::StudioXformBuilderEx::ExtrationMethodType extractMethod /** extractmethod */ 
            );
            /**Returns  the value indicating a tolerance to be used to extract a b-surface from a selection face 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double ExtractTolerance
            (
            );
            /**Sets  the value indicating a tolerance to be used to extract a b-surface from a selection face 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetExtractTolerance
            (
                double extractTolerance /** extracttolerance */ 
            );
            /**Returns  the feature save method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::FeatureType FeatureSaveMethod
            (
            );
            /**Sets  the feature save method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetFeatureSaveMethod
            (
                NXOpen::Features::StudioXformBuilderEx::FeatureType featureSaveMethod /** featuresavemethod */ 
            );
            /** Restore the parent face of a selection face
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void RestoreParentFace
            (
            );
            /**Returns  the editing type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilderEx::Types Type
            (
            );
            /**Sets  the editing type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetType
            (
                NXOpen::Features::StudioXformBuilderEx::Types type /** type */ 
            );
            /** Converts parameters of the feature that owns selected xform object. 
                    Converts through points studio spline feature to by poles feature, 
                    otherwise removes parameters of the feature. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ConvertParameters
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to convert pameters from */
            );
            /** Changes degree of the selected xform object 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Features::StudioXformBuilderEx::ChangeDegreeWithParameters NXOpen::Features::StudioXformBuilderEx::ChangeDegreeWithParameters@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Features::StudioXformBuilderEx::ChangeDegreeWithParameters instead.") void ChangeDegree
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to change degree of */
            );
            /** Changes degree of the selected xform object with desired parameters
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ChangeDegreeWithParameters
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to change degree of */,
                int uDegree /** the U degree to change to, valid range is [1, 24] */,
                int vDegree /** the V degree to change to, valid range is [1, 24] */,
                int uPatch /** the U patch to change to, valid value is greater than 1 */,
                int vPatch /** the V patch to change to, valid value is greater than 1 */
            );
            /** Inserts knot in the selected xform object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void InsertKnot
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to insert knot in */
            );
            /** Changes flexibility of the selected xform object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ChangeFlexibility
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to change flexibility of */
            );
            /** Update lock region geometry with current geometry 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateLockRegionGeometry
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to change flexibility of */
            );
            /** Inserts a pole in the selected xform object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void InsertPole
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to insert pole to */,
                int poleIndex /** which pole index to begin insert to */,
                NXOpen::Features::StudioXformBuilderEx::InsertPoleType insertType /** Insert type*/,
                NXOpen::Features::StudioXformBuilderEx::SurfaceDirectionType direction /** U or V direction a pole row on a surface is inserted, pass U direction for a  curve */,
                double location /** a point between 2 poles to indicate where a pole should be inserted, express as % */
            );
            /** Inserts a pole in the selected xform object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void RemovePole
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to remove pole from */,
                int poleIndex /** which pole index to remove */,
                NXOpen::Features::StudioXformBuilderEx::SurfaceDirectionType direction /**U or V direction a pole row on a surface is removed, pass U direction for a  curve  */
            );
            /** Update pole status of the selected BSpine curve 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPoleEditType
            (
                NXOpen::NXObject * xformObject /** spline being edited */,
                int index /** index of a pole being edited*/,
                NXOpen::Features::StudioXformBuilderEx::PoleEditType poleEditType /** the pole edit type */
            );
            /** Replaces the original geometry data of an entity with the current deformed geometry data 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void RebaseOriginalGeometry
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to rebase the geometry data of  */
            );
            /** Move to next object in Lock Region method when more than one objected are in editing 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void LockRegionNextObject
            (
            );
            /** End Lock Region operation to the selected xform object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void EndLockRegion
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to end Lock Region operation of  */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
