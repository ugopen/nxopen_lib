#ifndef NXOpen_WELD_WELDOBJECTBUILDER_HXX_INCLUDED
#define NXOpen_WELD_WELDOBJECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_WeldObjectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Weld_WeldObjectBuilder.hxx>
#include <NXOpen/libnxopencpp_weld_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Weld
    {
        class WeldObjectBuilder;
    }
    namespace Features
    {
        class Feature;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Weld
    {
        class _WeldObjectBuilderBuilder;
        class WeldObjectBuilderImpl;
        /** Represents a @link NXOpen::Weld::WeldObjectBuilder NXOpen::Weld::WeldObjectBuilder@endlink  class used to collect welding objects created or edited from a command. 
         <br>  Created in NX8.0.1.  <br>  
        */
        class NXOPENCPP_WELDEXPORT  WeldObjectBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Commands that a callback will be invoked after dialog completion. */
            public: enum CommandName
            {
                CommandNameNone/** No command. Used to initialize value. */,
                CommandNameGroove/** Groove Weld command */,
                CommandNameFillet/** Fillet Weld command */,
                CommandNameUserDefined/** User Defined Weld command */,
                CommandNameWeldPoint/** Weld Point command */,
                CommandNameBead/** Bead command */,
                CommandNameFill/** Fill command */,
                CommandNameImportCsv/** Import CSV command */,
                CommandNameEasySpot/** Easy Spot command */,
                CommandNameDatumLocator/** Datum Locator command  */,
                CommandNameMeasurementLocator/** Measurement Locator command   */,
                CommandNameEasyMeasurementPattern/** Easy Measurement Pattern command */,
                CommandNamePlugSlot/** Plug Slot command */,
                CommandNameJoint/** Welding Joint command */,
                CommandNameDatumSurface/** Datum Surface command */,
                CommandNameDatumPin/** Datum Pin command */,
                CommandNameSurfaceWeld/** Surface Weld command */,
                CommandNameCompound/** Compound Weld command */,
                CommandNameWeldAttribute/** Edit Weld Attribute */,
                CommandNameJointDefinition/** Edit Joint Definition Parameters */,
                CommandNameJointmark/** Joint Mark command */,
                CommandNameWeldPointWizard/** Weld Point Wizard command */
            };

             /**  @brief  Structure used to identify if each feature is newly created or edited.  

              */
            public:
            struct  FeatureInfo
            {
                public: /** the newly created or edited feature */NXOpen::Features::Feature * Feature;
                public: /** true if a new feature, false if an existing feature was edited. */bool IsNewlyCreated;
                public: FeatureInfo() :
                    Feature(),
                    IsNewlyCreated()
                {
                }
                /** Constructor for the FeatureInfo struct. */ 
                public: FeatureInfo(NXOpen::Features::Feature * featureInitial /** the newly created or edited feature */, 
                        bool isNewlyCreatedInitial /** true if a new feature, false if an existing feature was edited. */) :
                    Feature(featureInitial),
                    IsNewlyCreated(isNewlyCreatedInitial)
                {
                }
            };

            private: WeldObjectBuilderImpl * m_weldobjectbuilder_impl;
            private: friend class  _WeldObjectBuilderBuilder;
            protected: WeldObjectBuilder();
            public: ~WeldObjectBuilder();
            /**Returns  the command name that was last used to create or modify features 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldObjectBuilder::CommandName CommandUsed
            (
            );
            /** Gets the created and modifed features 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void GetFeatureInformation
            (
                std::vector<NXOpen::Weld::WeldObjectBuilder::FeatureInfo> & features /** features created or edited */
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
