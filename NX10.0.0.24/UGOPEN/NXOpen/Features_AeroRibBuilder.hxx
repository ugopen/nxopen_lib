#ifndef NXOpen_FEATURES_AERORIBBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_AERORIBBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_AeroRibBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_AeroRibBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class AeroRibBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Plane;
    class ScCollector;
    class Section;
    namespace Features
    {
        class _AeroRibBuilderBuilder;
        class AeroRibBuilderImpl;
        /**
            Represents a @link Features::AeroRib Features::AeroRib@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::AeroCollection::CreateAeroRibBuilder  NXOpen::Features::AeroCollection::CreateAeroRibBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        GuideObjectType </td> <td> 
         
        Face </td> </tr> 

        <tr><td> 
         
        Height.Value </td> <td> 
         
        25 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        HeightDimensionType </td> <td> 
         
        Simple </td> </tr> 

        <tr><td> 
         
        Limit1Offset.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        Limit1Type </td> <td> 
         
        FromGuideCurve </td> </tr> 

        <tr><td> 
         
        Limit2Offset.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        Limit2Type </td> <td> 
         
        FromGuideCurve </td> </tr> 

        <tr><td> 
         
        Thickness.Value </td> <td> 
         
        2 (millimeters part), 0.1 (inches part) </td> </tr> 

        <tr><td> 
         
        ThicknessDimensionType </td> <td> 
         
        Symmetric </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  AeroRibBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** This attribute represents the Guide Object types */
            public: enum GuideObjectTypes
            {
                GuideObjectTypesFace/** Guide object is face */,
                GuideObjectTypesDatumPlane/** Guide object is datum plane */,
                GuideObjectTypesCurve/** Guide object is curve */
            };

            /** This attribute represents the options for height dimension */
            public: enum HeightDimensionOptions
            {
                HeightDimensionOptionsSimple/** simple */ ,
                HeightDimensionOptionsSymmetric/** symmetric */ 
            };

            /** This attribute represents the limit object types */
            public: enum LimitObjectTypes
            {
                LimitObjectTypesFromGuideCurve/** from guide curve */ ,
                LimitObjectTypesFromSelected/** from selected */ 
            };

            /** This attribute represents the options for thickness dimension */
            public: enum ThicknessDimensionOptions
            {
                ThicknessDimensionOptionsSimple/** simple */ ,
                ThicknessDimensionOptionsSymmetric/** symmetric */ 
            };

            private: AeroRibBuilderImpl * m_aeroribbuilder_impl;
            private: friend class  _AeroRibBuilderBuilder;
            protected: AeroRibBuilder();
            public: ~AeroRibBuilder();
            /**Returns  the skin face collector 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SkinFaceCollector
            (
            );
            /**Returns  the guide object type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroRibBuilder::GuideObjectTypes GuideObjectType
            (
            );
            /**Sets  the guide object type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetGuideObjectType
            (
                NXOpen::Features::AeroRibBuilder::GuideObjectTypes guideObjectType /** guideobjecttype */ 
            );
            /**Returns  the guide faces 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * GuideFaces
            (
            );
            /**Returns  the plane 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the plane 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the section 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );
            /**Returns  the height dimension type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroRibBuilder::HeightDimensionOptions HeightDimensionType
            (
            );
            /**Sets  the height dimension type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetHeightDimensionType
            (
                NXOpen::Features::AeroRibBuilder::HeightDimensionOptions heightDimensionType /** heightdimensiontype */ 
            );
            /**Returns  the height 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the reverse height direction flag. Indicates whether the height direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseHeightDirection
            (
            );
            /**Sets  the reverse height direction flag. Indicates whether the height direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetReverseHeightDirection
            (
                bool reverseHeightDirection /** reverseheightdirection */ 
            );
            /**Returns  the limit1 type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroRibBuilder::LimitObjectTypes Limit1Type
            (
            );
            /**Sets  the limit1 type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetLimit1Type
            (
                NXOpen::Features::AeroRibBuilder::LimitObjectTypes limit1Type /** limit1type */ 
            );
            /**Returns  the limit1 selection 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * Limit1Selection
            (
            );
            /**Returns  the limit1 offset 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Limit1Offset
            (
            );
            /**Returns  the limit2 type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroRibBuilder::LimitObjectTypes Limit2Type
            (
            );
            /**Sets  the limit2 type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetLimit2Type
            (
                NXOpen::Features::AeroRibBuilder::LimitObjectTypes limit2Type /** limit2type */ 
            );
            /**Returns  the limit2 selection 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * Limit2Selection
            (
            );
            /**Returns  the limit2 offset 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Limit2Offset
            (
            );
            /**Returns  the thickness dimension type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AeroRibBuilder::ThicknessDimensionOptions ThicknessDimensionType
            (
            );
            /**Sets  the thickness dimension type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetThicknessDimensionType
            (
                NXOpen::Features::AeroRibBuilder::ThicknessDimensionOptions thicknessDimensionType /** thicknessdimensiontype */ 
            );
            /**Returns  the thickness 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Thickness
            (
            );
            /**Returns  the reverse thickness direction flag. Indicates whether the thickness direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseThicknessDirection
            (
            );
            /**Sets  the reverse thickness direction flag. Indicates whether the thickness direction has been flipped from its initial inferred direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_aero_design (" NX Aero Design") */
            public: void SetReverseThicknessDirection
            (
                bool reverseThicknessDirection /** reversethicknessdirection */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
