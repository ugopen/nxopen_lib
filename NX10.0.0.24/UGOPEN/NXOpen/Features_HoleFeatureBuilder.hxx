#ifndef NXOpen_FEATURES_HOLEFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_HOLEFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_HoleFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_RPOBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class HoleFeatureBuilder;
    }
    class Body;
    class Expression;
    namespace Features
    {
        class RPOBuilder;
    }
    class ISurface;
    namespace Features
    {
        class _HoleFeatureBuilderBuilder;
        class HoleFeatureBuilderImpl;
        /** Represents a Hole feature builder. See @link NXOpen::Features::RPOBuilder NXOpen::Features::RPOBuilder@endlink  for
        details on positioning the hole.  <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateHoleFeatureBuilder  NXOpen::Features::FeatureCollection::CreateHoleFeatureBuilder @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  HoleFeatureBuilder : public NXOpen::Features::RPOBuilder
        {
            /** Represents the subtype of the hole */
            public: enum HoleSubtype
            {
                HoleSubtypeSimple/** Simple hole */,
                HoleSubtypeCounterbore/** Counterbore hole */,
                HoleSubtypeCountersink/** Countersink hole */
            };

            private: HoleFeatureBuilderImpl * m_holefeaturebuilder_impl;
            private: friend class  _HoleFeatureBuilderBuilder;
            protected: HoleFeatureBuilder();
            public: ~HoleFeatureBuilder();
            /** 
            Returns thru face parameter for the hole. 
            If this parameter is set then depth and tip angle 
            are ignored.
             @return  Thru face 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::ISurface * GetThruFace
            (
            );
            /** 
            Sets thru face parameter for the hole. 
            If this parameter is set then depth and tip angle 
            are ignored.

             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetThruFace
            (
                NXOpen::ISurface * thruFace /** Thru face */
            );
            /** 
            Returns target body for the hole. 
            If this parameter is set then depth and tip angle 
            are ignored and will prompt for thru_face.
             @return  Target Body 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Body * GetTargetBody
            (
            );
            /** 
            Sets target body for the hole. 
            If this parameter is set then depth and tip angle 
            are ignored and will prompt for thru_face.

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetBody
            (
                NXOpen::Body * targetBody /** Target Body */
            );
            /**Returns  
            the depth of the hole. 
            If this parameter is set then the thru face is ignored.

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * Depth
            (
            );
            /** 
            Sets the depth of the hole. 
            If this parameter is set then the thru face is ignored.

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetDepth
            (
                const NXString & depth /** Hole depth   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** 
            Sets the depth of the hole. 
            If this parameter is set then the thru face is ignored.

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            void SetDepth
            (
                const char * depth /** Hole depth   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  
            the tip angle of the hole. 
            If this parameter is set then the thru face is ignored.

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * TipAngle
            (
            );
            /** 
            Sets the tip angle of the hole. 
            If this parameter is set then the thru face is ignored.

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetTipAngle
            (
                const NXString & tipAngle /** Tip angle   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** 
            Sets the tip angle of the hole. 
            If this parameter is set then the thru face is ignored.

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            void SetTipAngle
            (
                const char * tipAngle /** Tip angle   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns 
            the type of hole 

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::HoleFeatureBuilder::HoleSubtype Subtype
            (
            );
            /**Sets 
            the type of hole 

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetSubtype
            (
                NXOpen::Features::HoleFeatureBuilder::HoleSubtype subtype /** subtype */ 
            );
            /**Returns  
            the reference point of the hole. 
            This parameter will position the hole unless relative positioning
            dimensions are used

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Point3d HoleLocation
            (
            );
            /**Sets  
            the reference point of the hole. 
            This parameter will position the hole unless relative positioning
            dimensions are used

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleLocation
            (
                const NXOpen::Point3d & referencePoint /** Reference point for the hole */
            );
            /**Returns  
            the reverse direction flag of the hole. 

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: bool ReverseDirection
            (
            );
            /**Sets  
            the reverse direction flag of the hole. 

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseDirection
            (
                bool reverse /** reverse */ 
            );
            /**Returns  
            the placement face of the hole. 

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::ISurface * PlacementFace
            (
            );
            /**Sets  
            the placement face of the hole. 

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetPlacementFace
            (
                NXOpen::ISurface * placementFace /** Placement face */
            );
            /**Returns  
            the diameter of the hole. 

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * Diameter
            (
            );
            /** 
            Sets the diameter of the hole. 

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetDiameter
            (
                const NXString & diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** 
            Sets the diameter of the hole. 

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            void SetDiameter
            (
                const char * diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  
            the diameter of the counterbore for a hole.
            Only used if the hole type is couterbore

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * CounterboreDiameter
            (
            );
            /** 
            Sets the diameter of the counterbore for a hole.
            Only used if the hole type is couterbore

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetCounterboreDiameter
            (
                const NXString & diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** 
            Sets the diameter of the counterbore for a hole.
            Only used if the hole type is couterbore

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            void SetCounterboreDiameter
            (
                const char * diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  
            the depth of the counterbore for a hole.
            Only used if the hole type is couterbore

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * CounterboreDepth
            (
            );
            /** 
            Sets the depth of the counterbore for a hole.
            Only used if the hole type is couterbore

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetCounterboreDepth
            (
                const NXString & depth /** counterbore depth   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** 
            Sets the depth of the counterbore for a hole.
            Only used if the hole type is couterbore

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            void SetCounterboreDepth
            (
                const char * depth /** counterbore depth   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  
            the diameter of the countersink for a hole.
            Only used if the hole type is coutersink

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * CountersinkDiameter
            (
            );
            /** 
            Sets the diameter of the countersink for a hole.
            Only used if the hole type is coutersink

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetCountersinkDiameter
            (
                const NXString & diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** 
            Sets the diameter of the countersink for a hole.
            Only used if the hole type is coutersink

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            void SetCountersinkDiameter
            (
                const char * diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  
            the angle of the countersink for a hole.
            Only used if the hole type is coutersink

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * CountersinkAngle
            (
            );
            /** 
            Sets the angle of the countersink for a hole.
            Only used if the hole type is coutersink

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetCountersinkAngle
            (
                const NXString & angle /** countersink angle   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** 
            Sets the angle of the countersink for a hole.
            Only used if the hole type is coutersink

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            void SetCountersinkAngle
            (
                const char * angle /** countersink angle   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a hole body which can be positioned 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void CreateHole
            (
            );
            /** 
            Sets depth and tip angle parameters for the hole. 

             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetDepthAndTipAngle
            (
                const NXString & depth /** Hole depth   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & tipAngle /** Tip angle of the tool   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** 
            Sets depth and tip angle parameters for the hole. 

             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            void SetDepthAndTipAngle
            (
                const char * depth /** Hole depth   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * tipAngle /** Tip angle of the tool   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets parameters for simple hole 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetSimpleHole
            (
                const NXOpen::Point3d & referencePoint /** Reference point for the hole */,
                bool reverseDirection /** Reverse direction flag, applicable only if placement face is a datum plane */,
                NXOpen::ISurface * placementFace /** Placement face */,
                const NXString & diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets parameters for simple hole 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            void SetSimpleHole
            (
                const NXOpen::Point3d & referencePoint /** Reference point for the hole */,
                bool reverseDirection /** Reverse direction flag, applicable only if placement face is a datum plane */,
                NXOpen::ISurface * placementFace /** Placement face */,
                const char * diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets parameters for counterbore hole 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetCounterboreHole
            (
                const NXOpen::Point3d & referencePoint /** Reference point for the hole */,
                bool reverseDirection /** Reverse direction flag, applicable only if placement face is a datum plane */,
                NXOpen::ISurface * placementFace /** Placement face */,
                const NXString & diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & counterboreDiameter /** Counterbore diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & counterboreDepth /** Counterbore depth   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets parameters for counterbore hole 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            void SetCounterboreHole
            (
                const NXOpen::Point3d & referencePoint /** Reference point for the hole */,
                bool reverseDirection /** Reverse direction flag, applicable only if placement face is a datum plane */,
                NXOpen::ISurface * placementFace /** Placement face */,
                const char * diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * counterboreDiameter /** Counterbore diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * counterboreDepth /** Counterbore depth   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets parameters for countersink hole
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetCountersinkHole
            (
                const NXOpen::Point3d & referencePoint /** Reference point for the hole */,
                bool reverseDirection /** Reverse direction flag, applicable only if placement face is a datum plane */,
                NXOpen::ISurface * placementFace /** Placement face */,
                const NXString & diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & countersinkDiameter /** Countersink diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & countersinkAngle /** Countersink angle   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets parameters for countersink hole
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            void SetCountersinkHole
            (
                const NXOpen::Point3d & referencePoint /** Reference point for the hole */,
                bool reverseDirection /** Reverse direction flag, applicable only if placement face is a datum plane */,
                NXOpen::ISurface * placementFace /** Placement face */,
                const char * diameter /** Hole diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * countersinkDiameter /** Countersink diameter   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * countersinkAngle /** Countersink angle   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
