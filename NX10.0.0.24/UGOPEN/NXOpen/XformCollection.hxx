#ifndef NXOpen_XFORMCOLLECTION_HXX_INCLUDED
#define NXOpen_XFORMCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     XformCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class XformCollection;
    class BasePart;
    class Xform;
    namespace Assemblies
    {
        class Component;
    }
    namespace Assemblies
    {
        class Explosion;
    }
    class Axis;
    class CoordinateSystem;
    class Direction;
    class DisplayableObject;
    class Expression;
    class ICurve;
    class NXObject;
    class Offset;
    class Point;
    class Scalar;
    class View;
    class XformCollectionImpl;
    /** @brief  Represents a collection of @link NXOpen::Xform NXOpen::Xform@endlink  objects.  

     

    Iterating this collection only returns live uncondemned objects contained in the owning part
    of the collection. Note that @link NXOpen::Xform NXOpen::Xform@endlink  is a smart object and many smart objects are condemned as they
    only exist to support other objects and are not displayed. Condemned objects will be deleted when
    their references go away.
     <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  XformCollection : public NXOpen::TaggedObjectCollection
    {
        private: XformCollectionImpl * m_xformcollection_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit XformCollection(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~XformCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::XformCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Xform *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::XformCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::XformCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /**
             Creates a Xform without parameters.
             @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            const NXOpen::Point3d & origin /**   Origin point */,
            const NXOpen::Vector3d & xDirection /**   X direction */,
            const NXOpen::Vector3d & yDirection /**   Y direction */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            double scale /** scale */ 
        );
        /**
             Creates an Xform
             @return   
         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            const NXOpen::Point3d & origin /**   Origin point */,
            const NXOpen::Matrix3x3 & orientation /** Orientation */,
            NXOpen::SmartObject::UpdateOption update /** The update option  */,
            double scale /** Scale */
        );
        /**
            Creates a Xform that based off the model space coordinate system.
            The X and Y Axes are the X and Y Axes of the absolute transform.  The origin is the
            origin of the absolute transform.
             @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            double scale /** scale */ 
        );
        /** Create a Xform based on three points.
             The origin is the first point, the X-Axis is the vector from the first to the
              second point, and the Y-Axis is the vector from the first to the third
              point.
             @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Point * point1 /** point1 */ ,
            NXOpen::Point * point2 /** point2 */ ,
            NXOpen::Point * point3 /** point3 */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            double scale /** scale */ 
        );
        /** Creates a Xform by three planes.  
            Defines a xform based on the input of three planes.  These can be either planar faces or datum planes.
            The X-Axis is normal of the first plane, the Y-Axis is normal of the second plane, the origin is the 
            intersection of the three plane.  The plane can either be a planar @link NXOpen::Face NXOpen::Face@endlink  or 
            a @link NXOpen::DatumPlane NXOpen::DatumPlane@endlink . 
             @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::DisplayableObject * plane1 /** plane1 */ ,
            NXOpen::DisplayableObject * plane2 /** plane2 */ ,
            NXOpen::DisplayableObject * plane3 /** plane3 */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            double scale /** scale */ 
        );
        /** Creates a Xform by picking up a point from an existing coordinate system
             @return  Xform 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::CoordinateSystem * csys /** Existing coordinate system */,
            NXOpen::Point * point0 /** Start point */,
            NXOpen::Point * point1 /** End point */,
            NXOpen::Scalar * rotationScalarX /** Scalar of X rotation */,
            NXOpen::Scalar * rotationScalarY /** Scalar of Y rotation */,
            NXOpen::Scalar * rotationScalarZ /** Scalar of Z rotation */,
            int rotationOption /** Determine the sequence of applying rotation and translation.
                                                                         If the value is 0, then a translation is first applied.
                                                                         Otherwise, a roation is first applied.
                                                                     */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object */,
            double scale /** Xform scalar */
        );
        /** Creates a Xform with an existing view
             @return  Xform 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformWithView
        (
            NXOpen::View * view /** Existing view */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object */
        );
        /** Creates a Xform by offsetting an existing coordinate system through
                a translation and a rotation
             @return  Xform 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::CoordinateSystem * csys /** Existing coordinate system */,
            NXOpen::Offset * point0 /** Start point */,
            NXOpen::Offset * point1 /** End point */,
            NXOpen::Scalar * rotationScalarX /** Scalar of X rotation */,
            NXOpen::Scalar * rotationScalarY /** Scalar of Y rotation */,
            NXOpen::Scalar * rotationScalarZ /** Scalar of Z rotation */,
            int rotationOption /** Determine the sequence of applying rotation and translation.
                                                                         If the value is 0, then a translation is first applied.
                                                                         Otherwise, a roation is first applied.
                                                                     */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object */,
            double scale /** Xform scalar */
        );
        /** Creates an Xform whose location and orientation are determined by applying 
                a specified origin offset and transformation matrix to an existing coordinate system.  
             @return  created Xform 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformByDynamicOffset
        (
            NXOpen::CoordinateSystem * csys /** Existing coordinate system */,
            const NXOpen::Vector3d & originOffset /** Offset for coordinate system origin */,
            const NXOpen::Matrix3x3 & trasformMatrix /** Transformation matrix for coordinate system orientation */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object */,
            double scale /** Scale factor */
        );
        /** Creates a Xform based on a point and two vectors.  The X and Y Axes are the vectors.
         @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Point * origin /** origin */ ,
            NXOpen::Direction * xDirection /** x direction */ ,
            NXOpen::Direction * yDirection /** y direction */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            double scale /** scale */ 
        );
        /** Creates an Xform based on a point and two vectors. The X and Z Axes are the vectors.
         @return  created Xform 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformByPointXDirZDir
        (
            NXOpen::Point * origin /** point */,
            NXOpen::Direction * xDirection /** x vector */,
            NXOpen::Direction * zDirection /** z vector */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object */,
            double scale /** Scale factor */
        );
        /** Creates an Xform based on a point and two vectors. The Y and Z Axes are the vectors.
         @return  created Xform 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformByPointYDirZDir
        (
            NXOpen::Point * origin /** point */,
            NXOpen::Direction * yDirection /** y vector */,
            NXOpen::Direction * zDirection /** z vector */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */,
            double scale /** Scale factor  */
        );
        /** Creates a Xform based on two vectors. The X and Y Axes are vectors, with the
        origin being the vector intersection point.
         @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Direction * xDirection /** x direction */ ,
            NXOpen::Direction * yDirection /** y direction */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            double scale /** scale */ 
        );
        /** Creates a Xform based on a plane and a vector.  The X-Axis is the plane normal
         direction, the Y-Axis is the direction of the projection of the vector onto the plane,
         and the origin is the intersection of the plane and the vector.  The plane can
         either be a planar @link NXOpen::Face NXOpen::Face@endlink  or
         a @link NXOpen::DatumPlane NXOpen::DatumPlane@endlink .

         @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::DisplayableObject * plane /** plane */ ,
            NXOpen::Direction * axis /** axis */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            double scale /** scale */ 
        );
        /** Creates an Xform using a Z axis and X point
        The X-Axis is the vector from the Z-Axis vector to the point;
        the Y-Axis is computed from the X and Z axis; the origin is the
        intersection of the three vectors.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Point * xPoint /** x point */ ,
            NXOpen::Axis * zAxis /** z axis */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates an Xform through a point and perpendicular to a curve or edge.  The Z-axis is
        tangent to the curve or edge, and the X-Y plane goes through the point.
        When you select a linear curve, the X-Axis is a perpendicular vector from the curve to the point.
        When you select a non-linear curve, the
        X-Axis points in an arbitrary orientation and not towards the selected point.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Point * point /** The X-Y plane will go through this point */,
            NXOpen::Point * helperPoint /** helper point */ ,
            NXOpen::ICurve * curve /** The Z-axis will be tangent to the curve */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** 
            Creates a Xform in the context of given @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink .
             @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Assemblies::Component * workOcc /** work occ */ ,
            NXOpen::Assemblies::Component * contextObject /** context object */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** 
            Creates an XForm using the current viewing coordinate system. The X-Axis is parallel to the bottom of the view, 
            the Y-Axis is parallel to the side of the view, and the origin is the origin of the view (the middle of the graphics 
            screen). The coordinate system uses the right-hand rule so the Z-axis points out of the screen. Since the current
            viewing coordinate system does not exist if the NX session is running in batch mode, the absolute 
            coordinate system will be returned instead.
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformFromCurrentView
        (
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            double scale /** scale */ 
        );
        /**
            Creates a Xform from the Xform of a a selected curve, plane, or drafting object.  If the
            selected curve is non-planar an error will be thrown.  If the curve is arc, ellipse, hyperbola,
            parabola, or circle, the origin will be at the respective curve's center.  If the object
            is planar face or a datum plane, the Z-axis is the normal vector of the plane.
             @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::NXObject * object /** Object from which XForm creates */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object */
        );
        /** Creates an Xform based on an object and an explosion.
             @return  Xform 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::NXObject * object /** NX object */,
            NXOpen::Assemblies::Explosion * explosion /** Explosion */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object */
        );
        /** 
             Creates a extract Xform based on object. 
             @return  Xform 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateExtractXform
        (
            NXOpen::NXObject * object /** NX object */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object   */,
            bool forceXformCreation /** Force the interpart xform to be created  */,
            NXOpen::NXObject ** proto /** Prototype of the object being extracted */
        );
        /** Creates an Xform based on the delta difference between the source and
                destination components in the explosion.
             @return  Xform 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Assemblies::Explosion * explosion /** Explosion */,
            NXOpen::Assemblies::Component * sourceComponent /** Source component */,
            NXOpen::Assemblies::Component * destComponent /** Destination component */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object */
        );
        /** Creates an Xform based on origin and a direction.
                The direction passed is taken as the X, Y or Z axis
                based on the @link NXOpen::XYZAxis NXOpen::XYZAxis@endlink  passed. 
                The other two directions are evaluated from the cross product 
                to a non-parallel global axis (global X, Y or Z) 
                @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Point * origin /** origin of the Xform */,
            NXOpen::XYZAxis axis /** specifies whether the direction passed is
                                                               X, Y or Z of the Xform */,
            NXOpen::Direction * direction /** specifies X direction */,
            NXOpen::Scalar * scale /** scalar factor */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option to be used after creating the Xform  */
        );
        /** Creates an Xform based on the delta difference between the source and
                destination components in the explosion.
             @return  Xform 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformWithReverseNormal
        (
            NXOpen::Xform * xform /** XForm to be reversed normal  */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object */
        );
        /** Creates a Motion Xform based on the direction and distance.
             @return  Xform 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformDistanceDirection
        (
            NXOpen::Direction * direction /** direction of DistanceDirectionParms xform */,
            NXOpen::Expression * distance /**distance of DistanceDirectionParms xform */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /** Creates a Motion Xform based on the direction and points.
             @return  Xform 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformDistanceBetweenPoints
        (
            NXOpen::Point * origin /** origin point of DistanceBetweenPtsParms xform */,
            NXOpen::Point * measure /** measure point of DistanceBetweenPtsParms xform */,
            NXOpen::Direction * vector /** direction of DistanceBetweenPtsParms xform*/,
            NXOpen::Expression * distance /** distance of DistanceBetweenPtsParms xform*/,
            NXOpen::Expression * originDistance /** distance between origin point and object to be moved */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /** Creates a Motion Xform based on the axis and points.
             @return  Xform 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformDistanceRadial
        (
            NXOpen::Axis * axis /** axis of DistanceRadialParms xform */,
            NXOpen::Point * point /** measure point of DistanceRadialParms xfrom */,
            NXOpen::Expression * distance /** distance of DistanceRadialParms xfrom*/,
            NXOpen::Expression * originDistance /**distance between axis point and face */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /** Creates a Motion Xform based on the axis and angle.
             @return Xform  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformAngleAxis
        (
            NXOpen::Axis * axis /** angular axis */,
            NXOpen::Expression * angle /** angle */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /** Creates a Motion Xform based on two points.
             @return  Xform 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformTwoPoints
        (
            NXOpen::Point * from /** The "from point" of TwoPointsParms xform */,
            NXOpen::Point * to /** The "to point" of TwoPointsParms xform */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /** Creates a Motion Xform based on the three points and vector.
             @return Xform  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformRotateThreePoints
        (
            NXOpen::Axis * vector /** axis of RotateThreePtsParms xform */,
            NXOpen::Point * start /** start point of RotateThreePtsParms xform  */,
            NXOpen::Point * end /** end point of RotateThreePtsParms xform */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /** Creates a Motion Xform based on a axis and vector.
             @return  Xform 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformAxisVector
        (
            NXOpen::Axis * axis /** axis of AxisToVectorParms xfrom */,
            NXOpen::Direction * vector /** vector of AxisToVectorParms xform  */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /** Creates a Motion Xform based on two csys.
             @return  Xform  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformCsysToCsys
        (
            NXOpen::CoordinateSystem * from /** "from csys" of CsysToCsysParms xform */,
            NXOpen::CoordinateSystem * to /** "to csys" where object is moved for of CsysToCsysParms xform */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /** Creates a Motion Xform based on the distance and angle on object.
             @return  Xform  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformDistanceAngle
        (
            NXOpen::Expression * distance /** linear transform */,
            NXOpen::Expression * angle /** angular transform  */,
            NXOpen::Axis * dirr /** linear direction */,
            NXOpen::Direction * angulardirr /** angular direction */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /** Creates a Motion Xform based on the manip.
             @return  Xform 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformDynamic
        (
            const std::vector<NXOpen::Scalar *> & org /** origin point of manipulator  */,
            const std::vector<NXOpen::Scalar *> & mtx /** matrix of manipulator  */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /** Creates a Motion Xform based on delta x, y, and z values where the x, y, and z 
            directions are relative to a reference coordinate system.
             @return  Xform 
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformDeltaXyz
        (
            const std::vector<NXOpen::Scalar *> & delta /** delta xyz values  */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /** Creates a Xform based on a planar face or datum plane, a X-axis vector direction, and a point.
             @return  created Xform 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Xform * CreateXformByPlaneXDirPoint
        (
            NXOpen::DisplayableObject * plane /** planar face or datum plane */,
            NXOpen::Direction * xDirection /** x vector direction */,
            NXOpen::Point * point /** point */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object */,
            double scale /** Scale factor */,
            bool flipXDirection /** flag to flip the X direction of CSYS */,
            bool flipZDirection /** flag to flip the Z direction of CSYS */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
