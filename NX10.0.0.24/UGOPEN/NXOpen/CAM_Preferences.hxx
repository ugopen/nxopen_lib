#ifndef NXOpen_CAM_PREFERENCES_HXX_INCLUDED
#define NXOpen_CAM_PREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_Preferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_Preferences.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class Preferences;
    }
    class Builder;
    class NXColor;
    namespace CAM
    {
        class _PreferencesBuilder;
        class PreferencesImpl;
        /** Represents a cam preferences Builder  <br> To create a new instance of this class, use @link NXOpen::CAM::CAMSession::CreateCamPreferences  NXOpen::CAM::CAMSession::CreateCamPreferences @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  Preferences : public NXOpen::Builder
        {
            /** the part selection types.
             <br>  @deprecated Deprecated in NX8.0.0.  Use SelectionTypes instead. <br>  
            */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use SelectionTypes instead.") enum PartSelectionTypes
            {
                PartSelectionTypesBodies/** Bodies */,
                PartSelectionTypesFaces/** Faces */,
                PartSelectionTypesCurves/** Curves */,
                PartSelectionTypesSurfaceRegion/** Surface Region */,
                PartSelectionTypesFacetedBodies/** Faceted Bodies Region */
            };

            /** the blank selection types.
             <br>  @deprecated Deprecated in NX8.0.0.  Use SelectionTypes instead. <br>  
            */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use SelectionTypes instead.") enum BlankSelectionTypes
            {
                BlankSelectionTypesBodies/** Bodies */,
                BlankSelectionTypesFaces/** Faces */,
                BlankSelectionTypesCurves/** Curves */,
                BlankSelectionTypesSurfaceRegion/** Surface Region */,
                BlankSelectionTypesFacetedBodies/** Faceted Bodies Region */
            };

            /** the check selection types.
             <br>  @deprecated Deprecated in NX8.0.0.  Use SelectionTypes instead. <br>  
            */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use SelectionTypes instead.") enum CheckSelectionTypes
            {
                CheckSelectionTypesBodies/** Bodies */,
                CheckSelectionTypesFaces/** Faces */,
                CheckSelectionTypesCurves/** Curves */
            };

            /** the cut area selection types.
             <br>  @deprecated Deprecated in NX8.0.0.  Use SelectionTypes instead. <br>  
            */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use SelectionTypes instead.") enum CutAreaSelectionTypes
            {
                CutAreaSelectionTypesBodies/** Bodies */,
                CutAreaSelectionTypesFaces/** Faces */,
                CutAreaSelectionTypesSurfaceRegion/** Surface Region */
            };

            /** the wall selection types.
             <br>  @deprecated Deprecated in NX8.0.0.  Use SelectionTypes instead. <br>  
            */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use SelectionTypes instead.") enum WallSelectionTypes
            {
                WallSelectionTypesBodies/** Bodies */,
                WallSelectionTypesFaces/** Faces */,
                WallSelectionTypesSurfaceRegion/** Surface Region */
            };

            /** the auxiliary floor selection types.
             <br>  @deprecated Deprecated in NX8.0.0.  Use SelectionTypes instead. <br>  
            */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use SelectionTypes instead.") enum AuxiliaryFloorColorSelectionTypes
            {
                AuxiliaryFloorColorSelectionTypesBodies/** Bodies */,
                AuxiliaryFloorColorSelectionTypesFaces/** Faces */,
                AuxiliaryFloorColorSelectionTypesSurfaceRegion/** Surface Region */
            };

            /** the selection types */
            public: enum SelectionTypes
            {
                SelectionTypesNoSelectionFilter/** no selection filter */,
                SelectionTypesCurves/** curves */,
                SelectionTypesEdges/** edges */,
                SelectionTypesFaces/** faces */,
                SelectionTypesFeature/** feature */,
                SelectionTypesSolidBodies/** solid bodies */,
                SelectionTypesSheetBodies/** sheet bodies */,
                SelectionTypesFacetBodies/** facet bodies */,
                SelectionTypesGroups/** groups */,
                SelectionTypesSurfaceRegionFeatures/** surface region features */
            };

            /** the geometry types */
            public: enum GeometryTypes
            {
                GeometryTypesPart/** part */,
                GeometryTypesBlank/** blank */,
                GeometryTypesCheck/** check */,
                GeometryTypesCutArea/** cut area */,
                GeometryTypesAuxiliaryFloor/** auxiliary floor */,
                GeometryTypesWalls/** walls */,
                GeometryTypesSurfaceAreaDrive/** surface area drive geometry */
            };

            /** the information listing types */
            public: enum CsysInformationListingTypes
            {
                CsysInformationListingTypesWcs/** WCS */,
                CsysInformationListingTypesMcs/** MCS */
            };

            /** the IPW material removal coloring types */
            public: enum IpwDmrColoringTypes
            {
                IpwDmrColoringTypesOff/** Off */,
                IpwDmrColoringTypesPerTool/** Per Tool */,
                IpwDmrColoringTypesPerOperation/** Per Operation */
            };

            /** the animation accuracy types */
            public: enum AnimationAccuracyTypes
            {
                AnimationAccuracyTypesFine/** Fine */,
                AnimationAccuracyTypesCoarse/** Coarse */
            };

            private: PreferencesImpl * m_preferences_impl;
            private: friend class  _PreferencesBuilder;
            protected: Preferences();
            public: ~Preferences();
            /**Returns  the display selected objects 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool DisplaySelectedObjects
            (
            );
            /**Sets  the display selected objects 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDisplaySelectedObjects
            (
                bool displaySelectedObjects /** displayselectedobjects */ 
            );
            /**Returns  the display turning ipw 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayTurningIpw
            (
            );
            /**Sets  the display turning ipw 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDisplayTurningIpw
            (
                bool displayTurningIpw /** displayturningipw */ 
            );
            /**Returns  the process assistant 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool RunProcessAssistant
            (
            );
            /**Sets  the process assistant 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRunProcessAssistant
            (
                bool processAssistant /** processassistant */ 
            );
            /**Returns  the auto update dialog 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool AlwaysUpdateDialogs
            (
            );
            /**Sets  the auto update dialog 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAlwaysUpdateDialogs
            (
                bool alwaysUpdateDialogs /** alwaysupdatedialogs */ 
            );
            /**Returns  the show pictures 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowPictures
            (
            );
            /**Sets  the show pictures 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetShowPictures
            (
                bool showPictures /** showpictures */ 
            );
            /**Returns  the scrollable items 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int ScrollAreaSize
            (
            );
            /**Sets  the scrollable items 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetScrollAreaSize
            (
                int scrollableItems /** scrollableitems */ 
            );
            /**Returns  the refresh before each path replay 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ReplayRefreshBeforeEachPath
            (
            );
            /**Sets  the refresh before each path replay 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReplayRefreshBeforeEachPath
            (
                bool refreshBeforeEachPath /** refreshbeforeeachpath */ 
            );
            /**Returns  the update all instances 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool GenerationUpdateInstances
            (
            );
            /**Sets  the update all instances 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGenerationUpdateInstances
            (
                bool updateInstances /** updateinstances */ 
            );
            /**Returns  the pause after each path 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool GenerationPauseAfterEachPath
            (
            );
            /**Sets  the pause after each path 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGenerationPauseAfterEachPath
            (
                bool pauseAfterEachPath /** pauseaftereachpath */ 
            );
            /**Returns  the refresh before each path 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool GenerationRefreshBeforeEachPath
            (
            );
            /**Sets  the refresh before each path 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGenerationRefreshBeforeEachPath
            (
                bool refreshBeforeEachPath /** refreshbeforeeachpath */ 
            );
            /**Returns  the link mcs rcs 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool LinkMcsRcs
            (
            );
            /**Sets  the link mcs rcs 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLinkMcsRcs
            (
                bool linkMcsRcs /** linkmcsrcs */ 
            );
            /**Returns  the relocate parameters 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool RelocateParameters
            (
            );
            /**Sets  the relocate parameters 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRelocateParameters
            (
                bool relocateParameters /** relocateparameters */ 
            );
            /**Returns  the unlink instances 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool UnlinkInstances
            (
            );
            /**Sets  the unlink instances 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUnlinkInstances
            (
                bool unlinkInstances /** unlinkinstances */ 
            );
            /**Returns  the include instances 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeInstances
            (
            );
            /**Sets  the include instances 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIncludeInstances
            (
                bool includeInstances /** includeinstances */ 
            );
            /**Returns  the generate tool paths 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool GeneratePaths
            (
            );
            /**Sets  the generate tool paths 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGeneratePaths
            (
                bool generatePaths /** generatepaths */ 
            );
            /**Returns  the auto maching data 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticallySetMachingData
            (
            );
            /**Sets  the auto maching data 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAutomaticallySetMachingData
            (
                bool autoMachingData /** automachingdata */ 
            );
            /**Returns  the part color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * PartColor
            (
            );
            /**Sets  the part color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPartColor
            (
                NXOpen::NXColor * partColor /** partcolor */ 
            );
            /**Returns  the blank color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BlankColor
            (
            );
            /**Sets  the blank color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBlankColor
            (
                NXOpen::NXColor * blankColor /** blankcolor */ 
            );
            /**Returns  the check color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * CheckColor
            (
            );
            /**Sets  the check color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCheckColor
            (
                NXOpen::NXColor * checkColor /** checkcolor */ 
            );
            /**Returns  the drive color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * DriveColor
            (
            );
            /**Sets  the drive color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDriveColor
            (
                NXOpen::NXColor * driveColor /** drivecolor */ 
            );
            /**Returns  the trim color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * TrimColor
            (
            );
            /**Sets  the trim color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimColor
            (
                NXOpen::NXColor * trimColor /** trimcolor */ 
            );
            /**Returns  the uncut region color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * UncutRegionColor
            (
            );
            /**Sets  the uncut region color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUncutRegionColor
            (
                NXOpen::NXColor * uncutRegionColor /** uncutregioncolor */ 
            );
            /**Returns  the clearance color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ClearanceColor
            (
            );
            /**Sets  the clearance color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetClearanceColor
            (
                NXOpen::NXColor * clearanceColor /** clearancecolor */ 
            );
            /**Returns  the cut area color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * CutAreaColor
            (
            );
            /**Sets  the cut area color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutAreaColor
            (
                NXOpen::NXColor * cutAreaColor /** cutareacolor */ 
            );
            /**Returns  the suspect bounding box color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SuspectBoundingBoxColor
            (
            );
            /**Sets  the suspect bounding box color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSuspectBoundingBoxColor
            (
                NXOpen::NXColor * suspectBoundingBoxColor /** suspectboundingboxcolor */ 
            );
            /**Returns  the wall color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * WallColor
            (
            );
            /**Sets  the wall color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetWallColor
            (
                NXOpen::NXColor * wallColor /** wallcolor */ 
            );
            /**Returns  the top off level 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * TopOffLevelColor
            (
            );
            /**Sets  the top off level 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTopOffLevelColor
            (
                NXOpen::NXColor * topOffLevel /** topofflevel */ 
            );
            /**Returns  the optimized cut level 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptimizedCutLevelColor
            (
            );
            /**Sets  the optimized cut level 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOptimizedCutLevelColor
            (
                NXOpen::NXColor * optimizedCutLevel /** optimizedcutlevel */ 
            );
            /**Returns  the auxiliary floor 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * AuxiliaryFloorColor
            (
            );
            /**Sets  the auxiliary floor 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAuxiliaryFloorColor
            (
                NXOpen::NXColor * auxiliaryFloor /** auxiliaryfloor */ 
            );
            /**Returns  the hub color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * HubColor
            (
            );
            /**Sets  the hub color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetHubColor
            (
                NXOpen::NXColor * hub /** hub */ 
            );
            /**Returns  the shroud color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ShroudColor
            (
            );
            /**Sets  the shroud color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetShroudColor
            (
                NXOpen::NXColor * shroud /** shroud */ 
            );
            /**Returns  the blade color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BladeColor
            (
            );
            /**Sets  the blade color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBladeColor
            (
                NXOpen::NXColor * blade /** blade */ 
            );
            /**Returns  the blade blend color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BladeBlendColor
            (
            );
            /**Sets  the blade blend color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBladeBlendColor
            (
                NXOpen::NXColor * bladeBlend /** bladeblend */ 
            );
            /**Returns  the splitter color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SplitterColor
            (
            );
            /**Sets  the splitter color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSplitterColor
            (
                NXOpen::NXColor * splitter /** splitter */ 
            );
            /**Returns  the part selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") NXOpen::CAM::Preferences::PartSelectionTypes PartSelection
            (
            );
            /**Sets  the part selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") void SetPartSelection
            (
                NXOpen::CAM::Preferences::PartSelectionTypes partSelection /** partselection */ 
            );
            /**Returns  the blank selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") NXOpen::CAM::Preferences::BlankSelectionTypes BlankSelection
            (
            );
            /**Sets  the blank selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") void SetBlankSelection
            (
                NXOpen::CAM::Preferences::BlankSelectionTypes blankSelection /** blankselection */ 
            );
            /**Returns  the check selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") NXOpen::CAM::Preferences::CheckSelectionTypes CheckSelection
            (
            );
            /**Sets  the check selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") void SetCheckSelection
            (
                NXOpen::CAM::Preferences::CheckSelectionTypes checkSelection /** checkselection */ 
            );
            /**Returns  the cut area selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") NXOpen::CAM::Preferences::CutAreaSelectionTypes CutAreaSelection
            (
            );
            /**Sets  the cut area selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") void SetCutAreaSelection
            (
                NXOpen::CAM::Preferences::CutAreaSelectionTypes cutAreaSelection /** cutareaselection */ 
            );
            /**Returns  the wall selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") NXOpen::CAM::Preferences::WallSelectionTypes WallSelection
            (
            );
            /**Sets  the wall selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") void SetWallSelection
            (
                NXOpen::CAM::Preferences::WallSelectionTypes wallSelection /** wallselection */ 
            );
            /**Returns  the auxiliary floor selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") NXOpen::CAM::Preferences::AuxiliaryFloorColorSelectionTypes AuxiliaryFloorColorSelection
            (
            );
            /**Sets  the auxiliary floor selection.
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link CAM::Preferences::GetSelection CAM::Preferences::GetSelection@endlink  and @link CAM::Preferences::SetSelection CAM::Preferences::SetSelection@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Use CAM::Preferences::GetSelection and CAM::Preferences::SetSelection instead.") void SetAuxiliaryFloorColorSelection
            (
                NXOpen::CAM::Preferences::AuxiliaryFloorColorSelectionTypes auxiliaryFloorSelection /** auxiliaryfloorselection */ 
            );
            /** The geometry selection type method  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Preferences::SelectionTypes GetSelection
            (
                NXOpen::CAM::Preferences::GeometryTypes geomType /** geomtype */ 
            );
            /** The geometry selection type method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSelection
            (
                NXOpen::CAM::Preferences::GeometryTypes geomType /** geomtype */ ,
                NXOpen::CAM::Preferences::SelectionTypes selection /** selection */ 
            );
            /**Returns  the enable level based ipw 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool EnableLevelBasedIpw
            (
            );
            /**Sets  the enable level based ipw 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEnableLevelBasedIpw
            (
                bool enableLevelBasedIpw /** enablelevelbasedipw */ 
            );
            /**Returns  the ipw model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool SaveIpwModel
            (
            );
            /**Sets  the ipw model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSaveIpwModel
            (
                bool ipwModel /** ipwmodel */ 
            );
            /**Returns  the level based ipw 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool SaveLevelBasedIpw
            (
            );
            /**Sets  the level based ipw 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSaveLevelBasedIpw
            (
                bool levelBasedIpw /** levelbasedipw */ 
            );
            /**Returns  the use directory original part 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IpwUseDirectoryOfOriginalPart
            (
            );
            /**Sets  the use directory original part 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIpwUseDirectoryOfOriginalPart
            (
                bool useIpwDirectoryOfOriginalPart /** useipwdirectoryoforiginalpart */ 
            );
            /**Returns  the ipw parts folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString IpwPartsFolder
            (
            );
            /**Sets  the ipw parts folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIpwPartsFolder
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the ipw parts folder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetIpwPartsFolder
            (
                const char * foldername /** foldername */ 
            );
            /** Get the ipw default folder  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString GetDefaultIpwFolder
            (
            );
            /**Returns  the base info 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Preferences::CsysInformationListingTypes CsysInformationListing
            (
            );
            /**Sets  the base info 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCsysInformationListing
            (
                NXOpen::CAM::Preferences::CsysInformationListingTypes baseInfo /** baseinfo */ 
            );
            /**Returns  the orient wcs to mcs 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CsysOrientWcsToMcs
            (
            );
            /**Sets  the orient wcs to mcs 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCsysOrientWcsToMcs
            (
                bool orientWcsToMcs /** orientwcstomcs */ 
            );
            /**Returns  the tool edit and display 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool VisualizeToolEditAndDisplay
            (
            );
            /**Sets  the tool edit and display 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeToolEditAndDisplay
            (
                bool toolDisplayColor /** tooldisplaycolor */ 
            );
            /**Returns  the dynamic tool axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool VisualizeDynamicToolAxis
            (
            );
            /**Sets  the dynamic tool axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeDynamicToolAxis
            (
                bool dynToolAxis /** dyntoolaxis */ 
            );
            /**Returns  the tool display color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeToolDisplayColor
            (
            );
            /**Sets  the tool display color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeToolDisplayColor
            (
                NXOpen::NXColor * toolDisplayColor /** tooldisplaycolor */ 
            );
            /**Returns  the turning tool insert 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeToolInsertOrFluteColor
            (
            );
            /**Sets  the turning tool insert 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeToolInsertOrFluteColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the gouges color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeGougesColor
            (
            );
            /**Sets  the gouges color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeGougesColor
            (
                NXOpen::NXColor * gougesColor /** gougescolor */ 
            );
            /**Returns  the collisions color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeCollisionsColor
            (
            );
            /**Sets  the collisions color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeCollisionsColor
            (
                NXOpen::NXColor * collisionsColor /** collisionscolor */ 
            );
            /**Returns  the excess material color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeExcessMaterialColor
            (
            );
            /**Sets  the excess material color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeExcessMaterialColor
            (
                NXOpen::NXColor * excessMaterialColor /** excessmaterialcolor */ 
            );
            /**Returns  the auto block color 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link CAM::Preferences::BlankColor CAM::Preferences::BlankColor@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use CAM::Preferences::BlankColor instead.") NXOpen::NXColor * VisualizeAutoBlockColor
            (
            );
            /**Sets  the auto block color 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link CAM::Preferences::SetBlankColor CAM::Preferences::SetBlankColor@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use CAM::Preferences::SetBlankColor instead.") void SetVisualizeAutoBlockColor
            (
                NXOpen::NXColor * autoBlockColor /** autoblockcolor */ 
            );
            /**Returns  the ipw color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwColor
            (
            );
            /**Sets  the ipw color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwColor
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the temporary containment curve color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeTemporaryContainmentCurveColor
            (
            );
            /**Sets  the temporary containment curve color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeTemporaryContainmentCurveColor
            (
                NXOpen::NXColor * temporaryContainmentCurveColor /** temporarycontainmentcurvecolor */ 
            );
            /**Returns  the safe tool color 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeSafeToolColor
            (
            );
            /**Sets  the safe tool color 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeSafeToolColor
            (
                NXOpen::NXColor * safeToolColor /** safetoolcolor */ 
            );
            /**Returns  the background color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeBackgroundColor
            (
            );
            /**Sets  the background color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeBackgroundColor
            (
                NXOpen::NXColor * backgroundColor /** backgroundcolor */ 
            );
            /**Returns  the tool color1 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAM::Preferences::VisualizeIpwDmrColor1 CAM::Preferences::VisualizeIpwDmrColor1@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAM::Preferences::VisualizeIpwDmrColor1 instead.") NXOpen::NXColor * Visualize2dTool1Color
            (
            );
            /**Sets  the tool color1 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAM::Preferences::SetVisualizeIpwDmrColor1 CAM::Preferences::SetVisualizeIpwDmrColor1@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAM::Preferences::SetVisualizeIpwDmrColor1 instead.") void SetVisualize2dTool1Color
            (
                NXOpen::NXColor * toolColor /** toolcolor */ 
            );
            /**Returns  the tool color2 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAM::Preferences::VisualizeIpwDmrColor2 CAM::Preferences::VisualizeIpwDmrColor2@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAM::Preferences::VisualizeIpwDmrColor2 instead.") NXOpen::NXColor * Visualize2dTool2Color
            (
            );
            /**Sets  the tool color2 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAM::Preferences::SetVisualizeIpwDmrColor2 CAM::Preferences::SetVisualizeIpwDmrColor2@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAM::Preferences::SetVisualizeIpwDmrColor2 instead.") void SetVisualize2dTool2Color
            (
                NXOpen::NXColor * toolColor /** toolcolor */ 
            );
            /**Returns  the tool color3 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAM::Preferences::VisualizeIpwDmrColor3 CAM::Preferences::VisualizeIpwDmrColor3@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAM::Preferences::VisualizeIpwDmrColor3 instead.") NXOpen::NXColor * Visualize2dTool3Color
            (
            );
            /**Sets  the tool color3 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAM::Preferences::SetVisualizeIpwDmrColor3 CAM::Preferences::SetVisualizeIpwDmrColor3@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAM::Preferences::SetVisualizeIpwDmrColor3 instead.") void SetVisualize2dTool3Color
            (
                NXOpen::NXColor * toolColor /** toolcolor */ 
            );
            /**Returns  the tool color4 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAM::Preferences::VisualizeIpwDmrColor4 CAM::Preferences::VisualizeIpwDmrColor4@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAM::Preferences::VisualizeIpwDmrColor4 instead.") NXOpen::NXColor * Visualize2dTool4Color
            (
            );
            /**Sets  the tool color4 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAM::Preferences::SetVisualizeIpwDmrColor4 CAM::Preferences::SetVisualizeIpwDmrColor4@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAM::Preferences::SetVisualizeIpwDmrColor4 instead.") void SetVisualize2dTool4Color
            (
                NXOpen::NXColor * toolColor /** toolcolor */ 
            );
            /**Returns  the tool color5 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAM::Preferences::VisualizeIpwDmrColor5 CAM::Preferences::VisualizeIpwDmrColor5@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAM::Preferences::VisualizeIpwDmrColor5 instead.") NXOpen::NXColor * Visualize2dTool5Color
            (
            );
            /**Sets  the tool color5 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link CAM::Preferences::SetVisualizeIpwDmrColor5 CAM::Preferences::SetVisualizeIpwDmrColor5@endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use CAM::Preferences::SetVisualizeIpwDmrColor5 instead.") void SetVisualize2dTool5Color
            (
                NXOpen::NXColor * toolColor /** toolcolor */ 
            );
            /**Returns  the ipw dmr coloring mode 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Preferences::IpwDmrColoringTypes VisualizeIpwDmrColoringMode
            (
            );
            /**Sets  the ipw dmr coloring mode 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwDmrColoringMode
            (
                NXOpen::CAM::Preferences::IpwDmrColoringTypes coloring /** coloring */ 
            );
            /**Returns  the ipw dmr color1 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwDmrColor1
            (
            );
            /**Sets  the ipw dmr color1 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwDmrColor1
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the ipw dmr color2 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwDmrColor2
            (
            );
            /**Sets  the ipw dmr color2 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwDmrColor2
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the ipw dmr color3 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwDmrColor3
            (
            );
            /**Sets  the ipw dmr color3 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwDmrColor3
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the ipw dmr color4 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwDmrColor4
            (
            );
            /**Sets  the ipw dmr color4 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwDmrColor4
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the ipw dmr color5 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwDmrColor5
            (
            );
            /**Sets  the ipw dmr color5 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwDmrColor5
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the ipw dmr color6 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwDmrColor6
            (
            );
            /**Sets  the ipw dmr color6 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwDmrColor6
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the ipw dmr color7 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwDmrColor7
            (
            );
            /**Sets  the ipw dmr color7 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwDmrColor7
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the ipw dmr color8 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwDmrColor8
            (
            );
            /**Sets  the ipw dmr color8 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwDmrColor8
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the ipw dmr color9 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwDmrColor9
            (
            );
            /**Sets  the ipw dmr color9 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwDmrColor9
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the ipw dmr color10 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwDmrColor10
            (
            );
            /**Sets  the ipw dmr color10 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwDmrColor10
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the ipw translucency 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int VisualizeIpwTranslucency
            (
            );
            /**Sets  the ipw translucency 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwTranslucency
            (
                int ipwTranslucency /** ipwtranslucency */ 
            );
            /**Returns  the animation accuracy 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Preferences::AnimationAccuracyTypes VisualizeAnimationAccuracy
            (
            );
            /**Sets  the animation accuracy 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeAnimationAccuracy
            (
                NXOpen::CAM::Preferences::AnimationAccuracyTypes animationAccuracy /** animationaccuracy */ 
            );
            /**Returns  the chordal tolerance 
             <br>  @deprecated Deprecated in NX8.5.0.  This functionality no longer does anything and can be safely removed. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  This functionality no longer does anything and can be safely removed.") double VisualizeChordalTolerance
            (
            );
            /**Sets  the chordal tolerance 
             <br>  @deprecated Deprecated in NX8.5.0.  This functionality no longer does anything and can be safely removed. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  This functionality no longer does anything and can be safely removed.") void SetVisualizeChordalTolerance
            (
                double chordalTolerance /** chordaltolerance */ 
            );
            /**Returns  the tilt tolerance 
             <br>  @deprecated Deprecated in NX8.5.0.  This functionality no longer does anything and can be safely removed. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  This functionality no longer does anything and can be safely removed.") double VisualizeToolAxisTiltTolerance
            (
            );
            /**Sets  the tilt tolerance 
             <br>  @deprecated Deprecated in NX8.5.0.  This functionality no longer does anything and can be safely removed. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  This functionality no longer does anything and can be safely removed.") void SetVisualizeToolAxisTiltTolerance
            (
                double tiltTolerance /** tilttolerance */ 
            );
            /**Returns  the clsf_decimals 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int ClsfDecimals
            (
            );
            /**Sets  the clsf_decimals 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetClsfDecimals
            (
                int decimals /** decimals */ 
            );
            /**Returns  the force load turret 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ClsfForceLoadTurret
            (
            );
            /**Sets  the force load turret 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetClsfForceLoadTurret
            (
                bool forceLoadTurret /** forceloadturret */ 
            );
            /**Returns  the configuration file 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ConfigurationFile
            (
            );
            /**Sets  the configuration file 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetConfigurationFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the configuration file 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetConfigurationFile
            (
                const char * fileName /** filename */ 
            );
            /** Get the default configuration file  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString GetDefaultConfigurationFile
            (
            );
            /**Returns  the template file 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString TemplateFile
            (
            );
            /**Sets  the template file 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTemplateFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the template file 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetTemplateFile
            (
                const char * fileName /** filename */ 
            );
            /** Get the default template file  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString GetDefaultTemplateFile
            (
            );
            /**Sets  the tool shank color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeToolShankColor
            (
                NXOpen::NXColor * shankColor /** shank color */
            );
            /**Returns  the tool shank color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeToolShankColor
            (
            );
            /**Sets  the tool holder color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeToolHolderColor
            (
                NXOpen::NXColor * holderColor /** holder color */
            );
            /**Returns  the tool holder color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeToolHolderColor
            (
            );
            /**Returns  the tool translucency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int VisualizeToolTranslucency
            (
            );
            /**Sets  the tool translucency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeToolTranslucency
            (
                int toolTranslucency /** tooltranslucency */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
