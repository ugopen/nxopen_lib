#ifndef NXOpen_ROUTING_PLACEMENTSOLUTIONSBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_PLACEMENTSOLUTIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_PlacementSolutionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_PlacementSolutionsBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class PlacementSolutionsBuilder;
    }
    class Builder;
    class TaggedObject;
    namespace Routing
    {
        class _PlacementSolutionsBuilderBuilder;
        class PlacementSolutionsBuilderImpl;
        /** 
            
             <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreatePlacementSolutionsBuilder  NXOpen::Routing::RouteManager::CreatePlacementSolutionsBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  PlacementSolutionsBuilder : public NXOpen::Builder
        {
            private: PlacementSolutionsBuilderImpl * m_placementsolutionsbuilder_impl;
            private: friend class  _PlacementSolutionsBuilderBuilder;
            protected: PlacementSolutionsBuilder();
            public: ~PlacementSolutionsBuilder();
            /** Initialize Placement Data
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void InitializePlacementData
            (
                NXOpen::TaggedObject * part /** The part which the new part was dropped on. */,
                const NXOpen::Point3d & placementPos /** Location the part was placed */,
                NXOpen::TaggedObject * partToPlace /** The part being placed. */
            );
            /** Returns the total number of solutions based on the placement object.  @return  
             <br>  Created in NX8.5.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int GetNumberOfSolutions
            (
            );
            /** Returns the current index of the solution. For example, index 1 of 10 solutions.  @return  
             <br>  Created in NX8.5.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int GetSolutionIndex
            (
            );
            /** Cycle to the next solution. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void NextSolution
            (
            );
            /** Cycle to the first solution. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void FirstSolution
            (
            );
            /** Cycle to the previous solution 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void PreviousSolution
            (
            );
            /** Commit the solution and apply constraints if needed.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ApplyConstraintsAndClear
            (
            );
            /** Commit the solution and apply constraints if needed.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ApplyConstraintsAndClear
            (
                bool lockEngagement /** Lock engagement if applicable. */,
                bool lockRotation /**  Lock Rotation if applicable. */
            );
            /** Applies a rotation to the component about the axis of the port being used for placement. 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ApplyPortRotation
            (
                double angle /** Angle to apply. */
            );
            /** Commit the solution and apply constraints if needed.  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ApplyConstraintsAndClear
            (
                bool lockEngagement /** Lock engagement if applicable. */,
                bool lockRotation /** Lock Rotation if applicable. */,
                bool fixPart /** Fix Part if applicable. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
