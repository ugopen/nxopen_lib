#ifndef NXOpen_ANNOTATIONS_DIMENSIONCOLLECTION_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DIMENSIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DimensionCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_AngularDimensionBuilder.hxx>
#include <NXOpen/Annotations_AppendedTextEditorBuilder.hxx>
#include <NXOpen/Annotations_Associativity.hxx>
#include <NXOpen/Annotations_ChamferDimensionBuilder.hxx>
#include <NXOpen/Annotations_CurveLengthDimensionBuilder.hxx>
#include <NXOpen/Annotations_DimensionData.hxx>
#include <NXOpen/Annotations_GeodesicDimensionBuilder.hxx>
#include <NXOpen/Annotations_LinearDimensionBuilder.hxx>
#include <NXOpen/Annotations_MajorAngularDimensionBuilder.hxx>
#include <NXOpen/Annotations_MinorAngularDimensionBuilder.hxx>
#include <NXOpen/Annotations_OrdinateDimensionBuilder.hxx>
#include <NXOpen/Annotations_PmiAngularDimensionBuilder.hxx>
#include <NXOpen/Annotations_PmiChamferDimensionBuilder.hxx>
#include <NXOpen/Annotations_PmiCurveLengthDimensionBuilder.hxx>
#include <NXOpen/Annotations_PmiData.hxx>
#include <NXOpen/Annotations_PmiLinearDimensionBuilder.hxx>
#include <NXOpen/Annotations_PmiMajorAngularDimensionBuilder.hxx>
#include <NXOpen/Annotations_PmiMinorAngularDimensionBuilder.hxx>
#include <NXOpen/Annotations_PmiOrdinateDimensionBuilder.hxx>
#include <NXOpen/Annotations_PmiRadialDimensionBuilder.hxx>
#include <NXOpen/Annotations_PmiRapidDimensionBuilder.hxx>
#include <NXOpen/Annotations_PmiThicknessDimensionBuilder.hxx>
#include <NXOpen/Annotations_RadialDimensionBuilder.hxx>
#include <NXOpen/Annotations_RapidDimensionBuilder.hxx>
#include <NXOpen/Annotations_ThicknessDimensionBuilder.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class DimensionCollection;
    }
    class Part;
    namespace Annotations
    {
        class Dimension;
    }
    namespace Annotations
    {
        class AngularDimensionBuilder;
    }
    namespace Annotations
    {
        class AppendedTextEditorBuilder;
    }
    namespace Annotations
    {
        class ArcLengthDimension;
    }
    namespace Annotations
    {
        class Associativity;
    }
    namespace Annotations
    {
        class BaseAngularDimension;
    }
    namespace Annotations
    {
        class BaseArcLengthDimension;
    }
    namespace Annotations
    {
        class BaseChamferDimension;
    }
    namespace Annotations
    {
        class BaseConcentricCircleDimension;
    }
    namespace Annotations
    {
        class ChamferDimension;
    }
    namespace Annotations
    {
        class ChamferDimensionBuilder;
    }
    namespace Annotations
    {
        class ConcentricCircleDimension;
    }
    namespace Annotations
    {
        class CurveLengthDimensionBuilder;
    }
    namespace Annotations
    {
        class CylindricalDimension;
    }
    namespace Annotations
    {
        class DiameterDimension;
    }
    namespace Annotations
    {
        class DimensionData;
    }
    namespace Annotations
    {
        class FoldedRadiusDimension;
    }
    namespace Annotations
    {
        class GeodesicDimensionBuilder;
    }
    namespace Annotations
    {
        class HoleDimension;
    }
    namespace Annotations
    {
        class HorizontalDimension;
    }
    namespace Annotations
    {
        class HorizontalOrdinateDimension;
    }
    namespace Annotations
    {
        class LinearDimensionBuilder;
    }
    namespace Annotations
    {
        class MajorAngularDimension;
    }
    namespace Annotations
    {
        class MajorAngularDimensionBuilder;
    }
    namespace Annotations
    {
        class MinorAngularDimension;
    }
    namespace Annotations
    {
        class MinorAngularDimensionBuilder;
    }
    namespace Annotations
    {
        class OrdinateDimension;
    }
    namespace Annotations
    {
        class OrdinateDimensionBuilder;
    }
    namespace Annotations
    {
        class OrdinateOriginDimension;
    }
    namespace Annotations
    {
        class ParallelDimension;
    }
    namespace Annotations
    {
        class PerpendicularDimension;
    }
    namespace Annotations
    {
        class PmiAngularDimensionBuilder;
    }
    namespace Annotations
    {
        class PmiArcLengthDimension;
    }
    namespace Annotations
    {
        class PmiChamferDimension;
    }
    namespace Annotations
    {
        class PmiChamferDimensionBuilder;
    }
    namespace Annotations
    {
        class PmiConcentricCircleDimension;
    }
    namespace Annotations
    {
        class PmiCurveLengthDimensionBuilder;
    }
    namespace Annotations
    {
        class PmiCylindricalDimension;
    }
    namespace Annotations
    {
        class PmiData;
    }
    namespace Annotations
    {
        class PmiDiameterDimension;
    }
    namespace Annotations
    {
        class PmiFoldedRadiusDimension;
    }
    namespace Annotations
    {
        class PmiHoleDimension;
    }
    namespace Annotations
    {
        class PmiHorizontalDimension;
    }
    namespace Annotations
    {
        class PmiHorizontalOrdinateDimension;
    }
    namespace Annotations
    {
        class PmiLinearDimensionBuilder;
    }
    namespace Annotations
    {
        class PmiMajorAngularDimension;
    }
    namespace Annotations
    {
        class PmiMajorAngularDimensionBuilder;
    }
    namespace Annotations
    {
        class PmiMinorAngularDimension;
    }
    namespace Annotations
    {
        class PmiMinorAngularDimensionBuilder;
    }
    namespace Annotations
    {
        class PmiOrdinateDimensionBuilder;
    }
    namespace Annotations
    {
        class PmiOrdinateOriginDimension;
    }
    namespace Annotations
    {
        class PmiParallelDimension;
    }
    namespace Annotations
    {
        class PmiPerpendicularDimension;
    }
    namespace Annotations
    {
        class PmiRadialDimensionBuilder;
    }
    namespace Annotations
    {
        class PmiRadiusDimension;
    }
    namespace Annotations
    {
        class PmiRapidDimensionBuilder;
    }
    namespace Annotations
    {
        class PmiThicknessDimensionBuilder;
    }
    namespace Annotations
    {
        class PmiVerticalDimension;
    }
    namespace Annotations
    {
        class PmiVerticalOrdinateDimension;
    }
    namespace Annotations
    {
        class RadialDimensionBuilder;
    }
    namespace Annotations
    {
        class RadiusDimension;
    }
    namespace Annotations
    {
        class RapidDimensionBuilder;
    }
    namespace Annotations
    {
        class ThicknessDimensionBuilder;
    }
    namespace Annotations
    {
        class VerticalDimension;
    }
    namespace Annotations
    {
        class VerticalOrdinateDimension;
    }
    class Xform;
    namespace Annotations
    {
        class DimensionCollectionImpl;
        /** Represents a collection of @link NXOpen::Annotations::Dimension NXOpen::Annotations::Dimension@endlink  objects  <br> This is an collection class.  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  DimensionCollection : public NXOpen::TaggedObjectCollection
        {
            private: DimensionCollectionImpl * m_dimensioncollection_impl;
            private: NXOpen::Part* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit DimensionCollection(NXOpen::Part *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~DimensionCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Annotations::DimensionCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Annotations::Dimension *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Annotations::DimensionCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_ANNOTATIONSEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_ANNOTATIONSEXPORT  void next();
                NXOpen::Annotations::DimensionCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a major angular dimension  @return  New major angular dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::MajorAngularDimension * CreateMajorAngularDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI major angular dimension  @return  New PMI major angular dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiMajorAngularDimension * CreatePmiMajorAngularDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a minor angular dimension  @return  New minor angular dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::MinorAngularDimension * CreateMinorAngularDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI minor angular dimension  @return  New PMI minor angular dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiMinorAngularDimension * CreatePmiMinorAngularDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates an arc length dimension  @return  New arc length dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::ArcLengthDimension * CreateArcLengthDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI arc length dimension  @return  New PMI arc length dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiArcLengthDimension * CreatePmiArcLengthDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a chamfer dimension  @return  New chamfer dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::ChamferDimension * CreateChamferDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI chamfer dimnension  @return  New PMI chamfer dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiChamferDimension * CreatePmiChamferDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /**  Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a concentric circle dimension  @return  New concentric circle dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::ConcentricCircleDimension * CreateConcentricCircleDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI concentric circle dimension  @return  New PMI concentric circle dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiConcentricCircleDimension * CreatePmiConcentricCircleDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a cylindrical dimension  @return  New cylindrical dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::CylindricalDimension * CreateCylindricalDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI cylindrical dimension  @return  New PMI cylindrical dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiCylindricalDimension * CreatePmiCylindricalDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a diameter dimension  @return  New diameter dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::DiameterDimension * CreateDiameterDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI diameter dimension  @return  New PMI diameter dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiDiameterDimension * CreatePmiDiameterDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a folded radius dimension  @return  New folded radius dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::FoldedRadiusDimension * CreateFoldedRadiusDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI folded radius dimension  @return  New PMI folded radius dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiFoldedRadiusDimension * CreatePmiFoldedRadiusDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a hole dimension  @return  New hole dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::HoleDimension * CreateHoleDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI hole dimension  @return  New PMI hole dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiHoleDimension * CreatePmiHoleDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a horizontal dimension  @return  New horizontal dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::HorizontalDimension * CreateHorizontalDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI horizontal dimension  @return  New PMI horizontal dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiHorizontalDimension * CreatePmiHorizontalDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a horizontal ordinate dimension  @return  New horizontal ordinate dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::HorizontalOrdinateDimension * CreateHorizontalOrdinateDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI horizontal ordinate dimension  @return  New PMI horizontal ordinate dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiHorizontalOrdinateDimension * CreatePmiHorizontalOrdinateDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a parallel dimension  @return  New parallel dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::ParallelDimension * CreateParallelDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI parallel dimension  @return  New PMI parallel dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiParallelDimension * CreatePmiParallelDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a perpendicular dimension  @return  New perpendicular dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::PerpendicularDimension * CreatePerpendicularDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI perpendicular dimension  @return  New PMI perpendicular dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiPerpendicularDimension * CreatePmiPerpendicularDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a radius dimension  @return  New radius dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::RadiusDimension * CreateRadiusDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::RadiusDimensionType radiusType /** Radius type */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI radius dimension  @return  New PMI radius dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiRadiusDimension * CreatePmiRadiusDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::RadiusDimensionType radiusType /** Radius type */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a vertical dimension  @return  New vertical dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::VerticalDimension * CreateVerticalDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI vertical dimension  @return  New PMI vertical dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiVerticalDimension * CreatePmiVerticalDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a vertical ordinate dimension  @return  New vertical ordinate dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::VerticalOrdinateDimension * CreateVerticalOrdinateDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI vertical ordinate dimension  @return  New PMI vertical ordinate dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiVerticalOrdinateDimension * CreatePmiVerticalOrdinateDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates an ordinate origin dimension  @return  New ordinate origin dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::OrdinateOriginDimension * CreateOrdinateOriginDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a PMI ordinate origin dimension  @return  New PMI ordinate origin dimension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiOrdinateOriginDimension * CreatePmiOrdinateOriginDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */
            );
            /** Creates a horizontal ordinate automatic dimension 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void CreateHorizontalOrdinateAutoDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */,
                bool allowDuplicate /** TRUE - Allow dimensions with duplicate values */,
                bool repositionDim /** TRUE - Reposition existing dimensions */
            );
            /** Creates a PMI horizontal ordinate automatic dimension 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void CreatePmiHorizontalOrdinateAutoDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */,
                bool allowDuplicate /** TRUE - Allow dimensions with duplicate values */,
                bool repositionDim /** TRUE - Reposition existing dimensions */
            );
            /** Creates a vertical ordinate automatic dimension 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void CreateVerticalOrdinateAutoDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */,
                bool allowDuplicate /** TRUE - Allow dimensions with duplicate values */,
                bool repositionDim /** TRUE - Reposition existing dimensions */
            );
            /** Creates a PMI vertical ordinate automatic dimension 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void CreatePmiVerticalOrdinateAutoDimension
            (
                NXOpen::Annotations::DimensionData * dimensionData /** Dimension data */,
                NXOpen::Annotations::PmiData * pmiData /** PMI data */,
                NXOpen::Xform * annotationPlane /** Annotation plane on which the dimension lies */,
                const NXOpen::Point3d & origin /** Origin for the dimension */,
                bool allowDuplicate /** TRUE - Allow dimensions with duplicate values */,
                bool repositionDim /** TRUE - Reposition existing dimensions */
            );
            /** Creates a @link NXOpen::Annotations::ThicknessDimensionBuilder NXOpen::Annotations::ThicknessDimensionBuilder@endlink   @return  the thickness dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::ThicknessDimensionBuilder * CreateThicknessDimensionBuilder
            (
                NXOpen::Annotations::BaseConcentricCircleDimension * thicknessDimension /** the Drafting or Inherited PMI thickness dimension to be edited,
                                                                                                                                                if NULL,  then create an thickness dimension  */
            );
            /** Creates a @link NXOpen::Annotations::PmiThicknessDimensionBuilder NXOpen::Annotations::PmiThicknessDimensionBuilder@endlink   @return  the thickness dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiThicknessDimensionBuilder * CreatePmiThicknessDimensionBuilder
            (
                NXOpen::Annotations::PmiConcentricCircleDimension * thicknessDimension /** the PMI thickness dimension to be edited,
                                                                                                                                                if NULL,  then create an thickness dimension  */
            );
            /** Creates a @link NXOpen::Annotations::CurveLengthDimensionBuilder NXOpen::Annotations::CurveLengthDimensionBuilder@endlink   @return  the curve length dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::CurveLengthDimensionBuilder * CreateCurveLengthDimensionBuilder
            (
                NXOpen::Annotations::BaseArcLengthDimension * curveLengthDimension /** the Drafting or Inherited PMI curve length dimension to be edited,
                                                                                                                                                if NULL,  then create an curve length dimension  */
            );
            /** Creates a @link NXOpen::Annotations::PmiCurveLengthDimensionBuilder NXOpen::Annotations::PmiCurveLengthDimensionBuilder@endlink   @return  the curve length dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiCurveLengthDimensionBuilder * CreatePmiCurveLengthDimensionBuilder
            (
                NXOpen::Annotations::PmiArcLengthDimension * curveLengthDimension /** the PMI curve length dimension to be edited,
                                                                                                                                                 if NULL,  then create an curve length dimension  */
            );
            /** Creates a @link NXOpen::Annotations::ChamferDimensionBuilder NXOpen::Annotations::ChamferDimensionBuilder@endlink   @return  the chamfer dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::ChamferDimensionBuilder * CreateChamferDimensionBuilder
            (
                NXOpen::Annotations::BaseChamferDimension * chamferDimension /** the Drafting or PMI Inherited PMI chamfer dimension to be edited,
                                                                                                                                            if NULL,  then create an chamfer dimension  */
            );
            /** Creates a @link NXOpen::Annotations::PmiChamferDimensionBuilder NXOpen::Annotations::PmiChamferDimensionBuilder@endlink   @return  the chamfer dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiChamferDimensionBuilder * CreatePmiChamferDimensionBuilder
            (
                NXOpen::Annotations::PmiChamferDimension * chamferDimension /** the PMI chamfer dimension to be edited,
                                                                                                                                            if NULL,  then create an chamfer dimension  */
            );
            /** Creates a @link NXOpen::Annotations::LinearDimensionBuilder NXOpen::Annotations::LinearDimensionBuilder@endlink   @return  the linear dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::LinearDimensionBuilder * CreateLinearDimensionBuilder
            (
                NXOpen::Annotations::Dimension * linearDimension /** the Drafting or PMI linear dimension to be edited,
                                                                                                                                            if NULL,  then create an linear dimension  */
            );
            /** Creates a @link NXOpen::Annotations::PmiLinearDimensionBuilder NXOpen::Annotations::PmiLinearDimensionBuilder@endlink   @return  the linear dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiLinearDimensionBuilder * CreatePmiLinearDimensionBuilder
            (
                NXOpen::Annotations::Dimension * linearDimension /** the PMI linear dimension to be edited,
                                                                                                                                          if NULL,  then create an linear dimension  */
            );
            /** Creates a @link NXOpen::Annotations::RadialDimensionBuilder NXOpen::Annotations::RadialDimensionBuilder@endlink   @return  the radial dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::RadialDimensionBuilder * CreateRadialDimensionBuilder
            (
                NXOpen::Annotations::Dimension * radialDimension /** the Drafting or PMI inherited radial dimension to be edited,
                                                                                                                                          if NULL,  then create an radial dimension  */
            );
            /** Creates a @link NXOpen::Annotations::PmiRadialDimensionBuilder NXOpen::Annotations::PmiRadialDimensionBuilder@endlink   @return  the radial dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiRadialDimensionBuilder * CreatePmiRadialDimensionBuilder
            (
                NXOpen::Annotations::Dimension * radialDimension /** the PMI radial dimension to be edited,
                                                                                                                                          if NULL,  then create an radial dimension  */
            );
            /** Creates a @link NXOpen::Annotations::RapidDimensionBuilder NXOpen::Annotations::RapidDimensionBuilder@endlink   @return  the Rapid dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::RapidDimensionBuilder * CreateRapidDimensionBuilder
            (
                NXOpen::Annotations::Dimension * rapidDimension /** NULL.  Create only. */
            );
            /** Creates a @link NXOpen::Annotations::PmiRapidDimensionBuilder NXOpen::Annotations::PmiRapidDimensionBuilder@endlink   @return  the Rapid dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiRapidDimensionBuilder * CreatePmiRapidDimensionBuilder
            (
                NXOpen::Annotations::Dimension * rapidDimension /** NULL.  Create only. */
            );
            /** Creates a @link NXOpen::Annotations::AngularDimensionBuilder NXOpen::Annotations::AngularDimensionBuilder@endlink   @return  the Angular dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::AngularDimensionBuilder * CreateAngularDimensionBuilder
            (
                NXOpen::Annotations::BaseAngularDimension * angularDimension /** the Drafting or PMI inherited angular dimension to be edited,
                                                                                                                                        if NULL, then create an angular dimension  */
            );
            /** Creates a @link NXOpen::Annotations::AngularDimensionBuilder NXOpen::Annotations::AngularDimensionBuilder@endlink   @return  the Angular dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::MajorAngularDimensionBuilder * CreateMajorAngularDimensionBuilder
            (
                NXOpen::Annotations::MajorAngularDimension * angularDimension /** the Drafting or PMI inherited angular dimension to be edited,
                                                                                                                                        if NULL, then create an angular dimension  */
            );
            /** Creates a @link NXOpen::Annotations::AngularDimensionBuilder NXOpen::Annotations::AngularDimensionBuilder@endlink   @return  the Angular dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::MinorAngularDimensionBuilder * CreateMinorAngularDimensionBuilder
            (
                NXOpen::Annotations::MinorAngularDimension * angularDimension /** the Drafting or PMI inherited angular dimension to be edited,
                                                                                                                                        if NULL, then create an angular dimension  */
            );
            /** Creates a @link NXOpen::Annotations::PmiAngularDimensionBuilder NXOpen::Annotations::PmiAngularDimensionBuilder@endlink   @return  the Angular dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiAngularDimensionBuilder * CreatePmiAngularDimensionBuilder
            (
                NXOpen::Annotations::Dimension * angularDimension /** the PMI angular dimension to be edited,
                                                                                                                                         if NULL, then create an angular dimension  */
            );
            /** Creates a @link NXOpen::Annotations::PmiMajorAngularDimensionBuilder NXOpen::Annotations::PmiMajorAngularDimensionBuilder@endlink   @return  the Angular dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiMajorAngularDimensionBuilder * CreatePmiMajorAngularDimensionBuilder
            (
                NXOpen::Annotations::BaseAngularDimension * angularDimension /** the Drafting or PMI inherited angular dimension to be edited,
                                                                                                                                        if NULL, then create an angular dimension  */
            );
            /** Creates a @link NXOpen::Annotations::PmiMinorAngularDimensionBuilder NXOpen::Annotations::PmiMinorAngularDimensionBuilder@endlink   @return  the Angular dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiMinorAngularDimensionBuilder * CreatePmiMinorAngularDimensionBuilder
            (
                NXOpen::Annotations::BaseAngularDimension * angularDimension /** the Drafting or PMI inherited angular dimension to be edited,
                                                                                                                                        if NULL, then create an angular dimension  */
            );
            /** Creates a @link NXOpen::Annotations::OrdinateDimensionBuilder NXOpen::Annotations::OrdinateDimensionBuilder@endlink   @return  the ordinate dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::OrdinateDimensionBuilder * CreateOrdinateDimensionBuilder
            (
                NXOpen::Annotations::OrdinateDimension * ordinateDimension /** the Drafting or PMI inherited ordinate dimension to be edited,
                                                                                                                                          if NULL, then create an ordinate dimension  */
            );
            /** Creates a @link NXOpen::Annotations::PmiOrdinateDimensionBuilder NXOpen::Annotations::PmiOrdinateDimensionBuilder@endlink   @return  the ordinate dimension builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiOrdinateDimensionBuilder * CreatePmiOrdinateDimensionBuilder
            (
                NXOpen::Annotations::OrdinateDimension * ordinateDimension /** the PMI ordinate dimension to be edited,
                                                                                                                                           if NULL, then create an ordinate dimension  */
            );
            /** Creates a @link NXOpen::Annotations::AppendedTextEditorBuilder NXOpen::Annotations::AppendedTextEditorBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AppendedTextEditorBuilder * CreateAppendedTextEditorBuilder
            (
                NXOpen::Annotations::Dimension * dimension /** @link NXOpen::Annotations::Dimension NXOpen::Annotations::Dimension@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Annotations::GeodesicDimensionBuilder NXOpen::Annotations::GeodesicDimensionBuilder@endlink   @return  the geodesic dimension builder 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Annotations::GeodesicDimensionBuilder * CreateGeodesicDimensionBuilder
            (
                NXOpen::Annotations::Dimension * dimension /** @link NXOpen::Annotations::Dimension NXOpen::Annotations::Dimension@endlink  to be edited */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
