#ifndef NXOpen_USERDEFINEDOBJECTS_USERDEFINEDCLASS_HXX_INCLUDED
#define NXOpen_USERDEFINEDOBJECTS_USERDEFINEDCLASS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UserDefinedObjects_UserDefinedClass.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_userdefinedobjects_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UserDefinedObjects
    {
        class UserDefinedClass;
    }
    namespace UserDefinedObjects
    {
        class UserDefinedDisplayEvent;
    }
    namespace UserDefinedObjects
    {
        class UserDefinedEvent;
    }
    namespace UserDefinedObjects
    {
        class UserDefinedLinkEvent;
    }
    namespace UserDefinedObjects
    {
    }
    namespace UserDefinedObjects
    {
        class UserDefinedClassImpl;
        /** JA interface for the UserDefinedClass object  <br> To create a new instance of this class, use @link NXOpen::UserDefinedObjects::UserDefinedClassManager::NewUserDefinedClass  NXOpen::UserDefinedObjects::UserDefinedClassManager::NewUserDefinedClass @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_USERDEFINEDOBJECTSEXPORT  UserDefinedClass : public NXOpen::TransientObject
        {
            /** Allow owned object selection on all objects owned by an object of this @link NXOpen::UserDefinedObjects::UserDefinedClass NXOpen::UserDefinedObjects::UserDefinedClass@endlink . */
            public: enum AllowOwnedObjectSelection
            {
                AllowOwnedObjectSelectionOff = 1/** You do NOT have permission to select objects owned by this class. */,
                AllowOwnedObjectSelectionOn/** You have permission to select objects owned by this class. */
            };

            /** Allow query class from name options for a @link NXOpen::UserDefinedObjects::UserDefinedObject NXOpen::UserDefinedObjects::UserDefinedObject@endlink  of this class. */
            public: enum AllowQueryClass
            {
                AllowQueryClassOff = 1/** You do NOT have permission to query the class from it's name. */,
                AllowQueryClassOn/** You have permission to query the class from it's name. */
            };

            /** Allow query class from name options for a @link NXOpen::UserDefinedObjects::UserDefinedObject NXOpen::UserDefinedObjects::UserDefinedObject@endlink . */
            public: enum Selection
            {
                SelectionOff = 1/** UDO's of this class will NOT be selectable. */,
                SelectionOn/** UDO's of this class will be selectable. */
            };

            public: /** Prototype for display, selection, attention point, fit and screen-size-fit callbacks 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<int, NXOpen::UserDefinedObjects::UserDefinedDisplayEvent *> DisplayCallback;
            public: /** Prototype for update, and delete callbacks 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<int, NXOpen::UserDefinedObjects::UserDefinedLinkEvent *> LinkCallback;
            public: /** Prototype for information, edit, and suppress callbacks 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<int, NXOpen::UserDefinedObjects::UserDefinedEvent *> GenericCallback;
            private: UserDefinedClassImpl * m_userdefinedclass_impl;
            /// \cond NX_NO_DOC 
            public: explicit UserDefinedClass(void *ptr);
            /// \endcond 
            /** Frees the memory associated with this object.  After invocation of this
                      method, the object is no longer valid.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~UserDefinedClass();
            /**Returns  the class name of the @link NXOpen::UserDefinedObjects::UserDefinedClass NXOpen::UserDefinedObjects::UserDefinedClass@endlink . 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ClassName
            (
            );
            /**Returns  the friendly name of the @link NXOpen::UserDefinedObjects::UserDefinedClass NXOpen::UserDefinedObjects::UserDefinedClass@endlink . 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FriendlyName
            (
            );
            /**Returns  the allow query class from name flag. Specifies whether or not you are allowed to query the @link NXOpen::UserDefinedObjects::UserDefinedObject NXOpen::UserDefinedObjects::UserDefinedObject@endlink  from the class name. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::UserDefinedObjects::UserDefinedClass::AllowQueryClass AllowQueryClassFromName
            (
            );
            /**Sets  the allow query class from name flag. Specifies whether or not you are allowed to query the @link NXOpen::UserDefinedObjects::UserDefinedObject NXOpen::UserDefinedObjects::UserDefinedObject@endlink  from the class name. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAllowQueryClassFromName
            (
                NXOpen::UserDefinedObjects::UserDefinedClass::AllowQueryClass allowQueryClassFromName /** allow query class from name */ 
            );
            /**Returns  the allow owned object selection flag. Specifies whether or not you have permission to select objects owned by @link NXOpen::UserDefinedObjects::UserDefinedObject NXOpen::UserDefinedObjects::UserDefinedObject@endlink 's of this class. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::UserDefinedObjects::UserDefinedClass::AllowOwnedObjectSelection AllowOwnedObjectSelectionOption
            (
            );
            /**Sets  the allow owned object selection flag. Specifies whether or not you have permission to select objects owned by @link NXOpen::UserDefinedObjects::UserDefinedObject NXOpen::UserDefinedObjects::UserDefinedObject@endlink 's of this class. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAllowOwnedObjectSelectionOption
            (
                NXOpen::UserDefinedObjects::UserDefinedClass::AllowOwnedObjectSelection allowOwnedObjectSelectionOption /** allow owned object selection option */ 
            );
            /** Gets the is occurrenceable flag for this class. 
                    Legacy Open C UDO's required a reference UDO to determine Occurrenceability.  Occurrenceability is now set
                    on a class by class basis (no reference UDO required).  In the event that you have a legacy UDO you wish to query for occurenceability, 
                    you will need set the is occurrenceable flag with the new native language method (which does not require a reference UDO) 
                    If you do not set the is occurrenceable flag, and instead use the old open c is occurrenceable callback, you will risk error raising during this
                    method because we will automatically pass NULL in as the reference UDO to the legacy is occurrenceable callback. @return  Specifies whether or not to populate occurrences for @link NXOpen::UserDefinedObjects::UserDefinedObject NXOpen::UserDefinedObjects::UserDefinedObject@endlink 's of this class. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetIsOccurrenceableFlag
            (
            );
            /** Sets the is occurrenceable flag for this class. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIsOccurrenceableFlag
            (
                bool isOccurrenceable /** Specifies whether or not to populate occurrences for @link NXOpen::UserDefinedObjects::UserDefinedObject NXOpen::UserDefinedObjects::UserDefinedObject@endlink 's of this class. */
            );
            /**Returns  the warn user flag. 
                    Specifies the behavior of warning the user if a @link NXOpen::UserDefinedObjects::
                    UserDefinedObject NXOpen::UserDefinedObjects::
                    UserDefinedObject@endlink  of the given @link NXOpen::UserDefinedObjects::UserDefinedClass NXOpen::UserDefinedObjects::UserDefinedClass@endlink  
                    is found in a part, but the code implementing the methods for the UDO is not loaded.
                    The default action is to not warn the user. If the UDO author sets this flag
                    to TRUE, all UDO's of this class that are created will be marked so that the
                    user will be warned if the UDO methods have not been loaded, but a UDO of the
                    class is in the part. This warning will be issued to the listing window,
                    when the first object of the given class is retrieved. This warning will
                    only be given once per session.

                    This flag is set on every UDO object. Therefore for any part, there may be a mixture UDO objects of a given class, 
                    some having this flag set to TRUE and some objects having the flag set to FALSE. This is particularly true since all 
                    UDO objects created before NX 3.0 will have this flag set to FALSE. If the UDO methods for a class are not loaded, 
                    any one UDO with this flag set to TRUE in a part is enough for the warning to be issued to the listing window. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool WarnUserFlag
            (
            );
            /**Sets  the warn user flag. 
                    Specifies the behavior of warning the user if a @link NXOpen::UserDefinedObjects::
                    UserDefinedObject NXOpen::UserDefinedObjects::
                    UserDefinedObject@endlink  of the given @link NXOpen::UserDefinedObjects::UserDefinedClass NXOpen::UserDefinedObjects::UserDefinedClass@endlink  
                    is found in a part, but the code implementing the methods for the UDO is not loaded.
                    The default action is to not warn the user. If the UDO author sets this flag
                    to TRUE, all UDO's of this class that are created will be marked so that the
                    user will be warned if the UDO methods have not been loaded, but a UDO of the
                    class is in the part. This warning will be issued to the listing window,
                    when the first object of the given class is retrieved. This warning will
                    only be given once per session.

                    This flag is set on every UDO object. Therefore for any part, there may be a mixture UDO objects of a given class, 
                    some having this flag set to TRUE and some objects having the flag set to FALSE. This is particularly true since all 
                    UDO objects created before NX 3.0 will have this flag set to FALSE. If the UDO methods for a class are not loaded, 
                    any one UDO with this flag set to TRUE in a part is enough for the warning to be issued to the listing window. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWarnUserFlag
            (
                bool warnUser /** TRUE - the user will be warned when opening a part containing a UDO of this class without first loading it's required methods. FALSE - the user will NOT be warned. */
            );
            /** Registers UDO display callback. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddDisplayHandler
            (
                const NXOpen::UserDefinedObjects::UserDefinedClass::DisplayCallback&  displayEvent /** display event */ 
            );
            /** Registers the UDO selection callback. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddSelectionHandler
            (
                const NXOpen::UserDefinedObjects::UserDefinedClass::DisplayCallback&  displayEvent /** display event */ 
            );
            /** Registers the attention point callback. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddAttentionPointHandler
            (
                const NXOpen::UserDefinedObjects::UserDefinedClass::DisplayCallback&  displayEvent /** display event */ 
            );
            /** Registers the fit callback.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddFitHandler
            (
                const NXOpen::UserDefinedObjects::UserDefinedClass::DisplayCallback&  displayEvent /** display event */ 
            );
            /** Registers the screen size fit callback.  The screen size fit callback is called when
                        it is necesary to determine the bounding box of a screen size object (one which
                        remains the same size on the screen independent of the view scale) during a fit
                        computation.  As of NX 8.0 the only geometry types supported for User Defined Objects
                        which are screen size are ScreenStandardText and AbsoluteRotationScreenSizeText.
                        If your User Defined Object does not have any of these objects, then you should not
                        call @link NXOpen::UserDefinedObjects::UserDefinedClass::AddScreenSizeFitHandler NXOpen::UserDefinedObjects::UserDefinedClass::AddScreenSizeFitHandler@endlink  because to do
                        do would incur a performance penalty. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void AddScreenSizeFitHandler
            (
                const NXOpen::UserDefinedObjects::UserDefinedClass::DisplayCallback&  displayEvent /** display event */ 
            );
            /** Registers the update callback. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddUpdateHandler
            (
                const NXOpen::UserDefinedObjects::UserDefinedClass::LinkCallback&  linkEvent /** link event */ 
            );
            /** Registers the delete callback. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddDeleteHandler
            (
                const NXOpen::UserDefinedObjects::UserDefinedClass::LinkCallback&  linkEvent /** link event */ 
            );
            /** Registers the information callback. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddInformationHandler
            (
                const NXOpen::UserDefinedObjects::UserDefinedClass::GenericCallback&  udoEvent /** udo event */ 
            );
            /** Registers the edit callback. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddEditHandler
            (
                const NXOpen::UserDefinedObjects::UserDefinedClass::GenericCallback&  udoEvent /** udo event */ 
            );
            /** Registers the suppress callback. 
                    
                    Note this callback is not called unless you have a UDO FEATURE.  Also it *may* not
                    get called when the system automatically suppresses the feature during update.

                    Also note the user should check the suppression status of the feature in their callback to
                    see if the input udo feature is currently getting suppressed or unsuppressed. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void AddSuppressHandler
            (
                const NXOpen::UserDefinedObjects::UserDefinedClass::GenericCallback&  udoEvent /** udo event */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
