#ifndef NXOpen_MOTION_GRAPHBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_GRAPHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_GraphBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion_GraphBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class GraphBuilder;
    }
    class Builder;
    class NXObject;
    namespace Motion
    {
        class _GraphBuilderBuilder;
        class GraphBuilderImpl;
        /**
            Represents a @link Motion::GraphBuilder Motion::GraphBuilder@endlink ,
            only creation is supported
             <br> To create a new instance of this class, use @link NXOpen::Motion::GraphManager::CreateGraphBuilder  NXOpen::Motion::GraphManager::CreateGraphBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  GraphBuilder : public NXOpen::Builder
        {
             /** Contains the structure of curve associated with curve data. */
            public:
            struct  CurveData
            {
                public: /** Attribute object */NXOpen::NXObject * MotionObject;
                public: /** Attribute request choice */int RequestIndex;
                public: /** Attribute component choice */int ComponentIndex;
                public: /** Attribute csys choice */int RequestCsysIndex;
                public: CurveData() :
                    MotionObject(),
                    RequestIndex(),
                    ComponentIndex(),
                    RequestCsysIndex()
                {
                }
                /** Constructor for the CurveData struct. */ 
                public: CurveData(NXOpen::NXObject * motionObjectInitial /** Attribute object */, 
                        int requestIndexInitial /** Attribute request choice */, 
                        int componentIndexInitial /** Attribute component choice */, 
                        int requestCsysIndexInitial /** Attribute csys choice */) :
                    MotionObject(motionObjectInitial),
                    RequestIndex(requestIndexInitial),
                    ComponentIndex(componentIndexInitial),
                    RequestCsysIndex(requestCsysIndexInitial)
                {
                }
            };

            /** Request attribute of the curve data. */
            public: enum RequestChoices
            {
                RequestChoicesDisplacement/** Displacement */,
                RequestChoicesVelocity/** Velocity */,
                RequestChoicesAcceleration/** Acceleration */,
                RequestChoicesForce/** Force */,
                RequestChoicesMotorDriver/** Motor Driver */
            };

            /** Component attribute of the curve data. */
            public: enum ComponentChoices
            {
                ComponentChoicesMag/** Magnitude */,
                ComponentChoicesX/** X */,
                ComponentChoicesY/** Y */,
                ComponentChoicesZ/** Z */,
                ComponentChoicesAmag/** Angular Magnitude */,
                ComponentChoicesXy/** XY */,
                ComponentChoicesYz/** YZ */,
                ComponentChoicesZx/** ZX */,
                ComponentChoicesInputVoltage/** Input Voltage */,
                ComponentChoicesElectricCurrent/** Electric Current */,
                ComponentChoicesElectricTorque/** Electric Torque */,
                ComponentChoicesSignalChart/** Signal Chart */
            };

            /** Csys attribute of the curve data. */
            public: enum CsysChoices
            {
                CsysChoicesRelative/** Relative */,
                CsysChoicesAbsolute/** Absolute */
            };

            /** X axis type choice. */
            public: enum XAxisTypeChoices
            {
                XAxisTypeChoicesDefaultTime/** Time */,
                XAxisTypeChoicesUserDefined/** User defined */
            };

            /** Plot output type  */
            public: enum PlotStyleChoices
            {
                PlotStyleChoicesFtk/** To FTK */,
                PlotStyleChoicesSpreadsheet/** To Spreadsheet */
            };

            private: GraphBuilderImpl * m_graphbuilder_impl;
            private: friend class  _GraphBuilderBuilder;
            protected: GraphBuilder();
            public: ~GraphBuilder();
            /** Get the motion objects  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<NXOpen::NXObject *> GetMotionObjects
            (
            );
            /** Set the motion objects 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMotionObjects
            (
                const std::vector<NXOpen::NXObject *> & motionObjects /** motion objects */ 
            );
            /** Returns the object currently being edited by this builder. If
                    a new object is being created, and the builder has not yet
                    been commited, returns NULL.
                  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * GetObject
            (
            );
            /**Returns  the object selected from motion objects 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::NXObject * Object
            (
            );
            /**Sets  the object selected from motion objects 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetObject
            (
                NXOpen::NXObject * object /** object */ 
            );
            /**Returns  the request 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::GraphBuilder::RequestChoices Request
            (
            );
            /**Sets  the request 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRequest
            (
                NXOpen::Motion::GraphBuilder::RequestChoices request /** request */ 
            );
            /**Returns  the component 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::GraphBuilder::ComponentChoices Component
            (
            );
            /**Sets  the component 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetComponent
            (
                NXOpen::Motion::GraphBuilder::ComponentChoices component /** component */ 
            );
            /**Returns  the csystype 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::GraphBuilder::CsysChoices CoordinateSystemType
            (
            );
            /**Sets  the csystype 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCoordinateSystemType
            (
                NXOpen::Motion::GraphBuilder::CsysChoices coordinateSystemType /** coordinate system type */ 
            );
            /** Move up the curves in the y curve list by one step 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void MoveUpYCurves
            (
                const std::vector<int> & selectedIndices /** a list of y curve indeces */
            );
            /** Move down the curves in the y curve list by one step 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void MoveDownYCurves
            (
                const std::vector<int> & selectedIndices /** a list of y curve indeces */
            );
            /** Get the defined y curves  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<NXOpen::Motion::GraphBuilder::CurveData> GetYCurves
            (
            );
            /** Add curves to the end of y curve list 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AddYCurves
            (
                const std::vector<NXOpen::Motion::GraphBuilder::CurveData> & curves /** curves */ 
            );
            /** Remove the curve from the y curve list 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void RemoveYCurve
            (
                const NXOpen::Motion::GraphBuilder::CurveData & yCurve /** y curve */ 
            );
            /**Returns  the x axis type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::GraphBuilder::XAxisTypeChoices XAxisType
            (
            );
            /**Sets  the x axis type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetXAxisType
            (
                NXOpen::Motion::GraphBuilder::XAxisTypeChoices xAxisType /** x axis type */ 
            );
            /**Returns  the x curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::GraphBuilder::CurveData XCurve
            (
            );
            /** Set x curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetXCurve
            (
                const NXOpen::Motion::GraphBuilder::CurveData & newCurve /** new curve */ 
            );
            /**Returns  the graph title 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString GraphTitle
            (
            );
            /**Sets  the graph title 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetGraphTitle
            (
                const NXString & graphTitle /** graph title */ 
            );
            /**Sets  the graph title 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetGraphTitle
            (
                const char * graphTitle /** graph title */ 
            );
            /**Returns  the plot enable flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool PlotEnable
            (
            );
            /**Sets  the plot enable flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPlotEnable
            (
                bool plotEnable /** plot enable */ 
            );
            /**Returns  the plot style choice 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::GraphBuilder::PlotStyleChoices PlotStyle
            (
            );
            /**Sets  the plot style choice 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPlotStyle
            (
                NXOpen::Motion::GraphBuilder::PlotStyleChoices plotStyle /** plot style */ 
            );
            /**Returns  the store enable flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool StoreEnable
            (
            );
            /**Sets  the store enable flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStoreEnable
            (
                bool storeEnable /** store enable */ 
            );
            /**Returns  the afu file name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString AfuFile
            (
            );
            /**Sets  the afu file name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAfuFile
            (
                const NXString & fileName /** file name */ 
            );
            /**Sets  the afu file name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetAfuFile
            (
                const char * fileName /** file name */ 
            );
            /**Returns  the mode id
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int Mode
            (
            );
            /**Sets  the mode id
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMode
            (
                int modeID /** modeid */ 
            );
            /**Returns  the mode request 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::GraphBuilder::RequestChoices ModeRequest
            (
            );
            /**Sets  the mode request 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetModeRequest
            (
                NXOpen::Motion::GraphBuilder::RequestChoices modeRequest /** mode request */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
