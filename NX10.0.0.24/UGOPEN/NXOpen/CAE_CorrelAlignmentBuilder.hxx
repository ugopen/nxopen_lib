#ifndef NXOpen_CAE_CORRELALIGNMENTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_CORRELALIGNMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CorrelAlignmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_CorrelAlignmentBuilder.hxx>
#include <NXOpen/CAE_CorrelBaseBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class CorrelAlignmentBuilder;
    }
    namespace CAE
    {
        class CorrelBaseBuilder;
    }
    class Point;
    namespace CAE
    {
        class _CorrelAlignmentBuilderBuilder;
        class CorrelAlignmentBuilderImpl;
        /** This builder is used to control the alignment parameters of a @link NXOpen::CAE::CorrelSolution NXOpen::CAE::CorrelSolution@endlink   <br> To create a new instance of this class, use @link NXOpen::CAE::SimSolution::CreateAlignmentBuilder  NXOpen::CAE::SimSolution::CreateAlignmentBuilder @endlink  <br> 
         <br>  Created in NX6.0.1.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  CorrelAlignmentBuilder : public NXOpen::CAE::CorrelBaseBuilder
        {
            /** the way the scaling factor is computed */
            public: enum ScalingChoice
            {
                ScalingChoiceFromSecondAxis/** Computed from the lenght of the second axis */,
                ScalingChoiceSpecify/** User specified scaling factor */
            };

             /** Specifies the data for the selected reference points */
            public:
            struct  ReferencePt
            {
                public: /** defined */ bool Defined;
                public: /** x */ double X;
                public: /** y */ double Y;
                public: /** Point Coordinate */double Z;
                public: ReferencePt() :
                    Defined(),
                    X(),
                    Y(),
                    Z()
                {
                }
                /** Constructor for the ReferencePt struct. */ 
                public: ReferencePt(bool definedInitial /** defined */ , 
                        double xInitial /** x */ , 
                        double yInitial /** y */ , 
                        double zInitial /** Point Coordinate */) :
                    Defined(definedInitial),
                    X(xInitial),
                    Y(yInitial),
                    Z(zInitial)
                {
                }
            };

            private: CorrelAlignmentBuilderImpl * m_correlalignmentbuilder_impl;
            private: friend class  _CorrelAlignmentBuilderBuilder;
            protected: CorrelAlignmentBuilder();
            public: ~CorrelAlignmentBuilder();
            /** Gets the reference common origin point  @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::CorrelAlignmentBuilder::ReferencePt GetReferencePt1
            (
            );
            /** Sets the reference common origin point 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetReferencePt1
            (
                const NXOpen::CAE::CorrelAlignmentBuilder::ReferencePt & referencePt1 /** Reference Point 1 */
            );
            /**Returns  the working common origin point 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * WrkPt1
            (
            );
            /**Sets  the working common origin point 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetWrkPt1
            (
                NXOpen::Point * wrkPt1 /** wrkpt1 */ 
            );
            /** Gets the reference first axis origin point  @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::CorrelAlignmentBuilder::ReferencePt GetReferencePt2
            (
            );
            /** Sets the reference first axis origin point 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetReferencePt2
            (
                const NXOpen::CAE::CorrelAlignmentBuilder::ReferencePt & referencePt2 /** Reference Point 2 */
            );
            /**Returns  the working first axis origin point 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * WrkPt2
            (
            );
            /**Sets  the working first axis origin point 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetWrkPt2
            (
                NXOpen::Point * wrkPt2 /** wrkpt2 */ 
            );
            /** Gets the reference second axis point  @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::CorrelAlignmentBuilder::ReferencePt GetReferencePt3
            (
            );
            /** Sets the reference second axis point 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetReferencePt3
            (
                const NXOpen::CAE::CorrelAlignmentBuilder::ReferencePt & referencePt3 /** Reference Point 3 */
            );
            /**Returns  the working second axis point 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * WrkPt3
            (
            );
            /**Sets  the working second axis point 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetWrkPt3
            (
                NXOpen::Point * wrkPt3 /** wrkpt3 */ 
            );
            /**Returns  the scaling type 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::CorrelAlignmentBuilder::ScalingChoice ScalingType
            (
            );
            /**Sets  the scaling type 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetScalingType
            (
                NXOpen::CAE::CorrelAlignmentBuilder::ScalingChoice scalingType /** scalingtype */ 
            );
            /**Returns  the scaling value 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: double ScalingValue
            (
            );
            /**Sets  the scaling value 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetScalingValue
            (
                double scalingValue /** scalingvalue */ 
            );
            /**Returns  the save xml transform
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool SaveXmlTransform
            (
            );
            /**Sets  the save xml transform
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetSaveXmlTransform
            (
                bool saveXmlTransform /** savexmltransform */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
