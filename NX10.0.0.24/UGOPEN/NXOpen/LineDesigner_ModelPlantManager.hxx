#ifndef NXOpen_LINEDESIGNER_MODELPLANTMANAGER_HXX_INCLUDED
#define NXOpen_LINEDESIGNER_MODELPLANTMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     LineDesigner_ModelPlantManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/LineDesigner_ModelPlantRoot.hxx>
#include <NXOpen/LineDesigner_ModelProductionUnit.hxx>
#include <NXOpen/LineDesigner_ModelResourceInstance.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/liblinedesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace LineDesigner
    {
        class ModelPlantManager;
    }
    class Session;
    namespace LineDesigner
    {
        class ModelBaseObject;
    }
    namespace LineDesigner
    {
        class ModelPlantRoot;
    }
    namespace LineDesigner
    {
        class ModelProductionUnit;
    }
    namespace LineDesigner
    {
        class ModelResourceInstance;
    }
    class NXObject;
    namespace LineDesigner
    {
        class ModelPlantManagerImpl;
        /** Represents a manager of line designer model  <br> Use the static method in this class to obtain an instance.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class LINEDESIGNEROPENCPPEXPORT  ModelPlantManager
        {
            private: ModelPlantManagerImpl * m_modelplantmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ModelPlantManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static ModelPlantManager* theModelPlantManager;
            /** Returns the ModelPlantManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static ModelPlantManager* GetModelPlantManager(NXOpen::Session *owner);
            public: ~ModelPlantManager();
            /**  Establish Plant Model Root  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::LineDesigner::ModelPlantRoot * GetModelPlantRoot
            (
            );
            /**  Read Plant Model   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::NXObject * ReadPlantModel
            (
                NXOpen::LineDesigner::ModelPlantRoot * modelPlantRoot /** modelplantroot */ 
            );
            /**  Clean Plant Model  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void CleanPlantModel
            (
                NXOpen::LineDesigner::ModelPlantRoot * modelPlantRoot /** modelplantroot */ 
            );
            /**  Activate Plant Model  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void ActivatePlantModel
            (
                NXOpen::LineDesigner::ModelPlantRoot * modelPlantRoot /** modelplantroot */ ,
                bool activate /** activate */ 
            );
            /**  Set Target Production Unit  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetTargetProductionUnit
            (
                NXOpen::LineDesigner::ModelPlantRoot * modelPlantRoot /** modelplantroot */ ,
                NXOpen::LineDesigner::ModelProductionUnit * productionUnit /** productionunit */ ,
                bool keep /** keep */ 
            );
            /**  Restore Target Production Unit  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void RestoreTargetProductionUnit
            (
                NXOpen::LineDesigner::ModelPlantRoot * modelPlantRoot /** modelplantroot */ 
            );
            /**  Move Resource Instances  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void MoveResourceInstances
            (
                NXOpen::LineDesigner::ModelPlantRoot * modelPlantRoot /** modelplantroot */ ,
                const std::vector<NXOpen::LineDesigner::ModelResourceInstance *> & resourceInstances /** resourceinstances */ ,
                NXOpen::LineDesigner::ModelBaseObject * newParent /** newparent */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
