#ifndef NXOpen_CAE_CONTACTMESHBUILDER_HXX_INCLUDED
#define NXOpen_CAE_CONTACTMESHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ContactMeshBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ContactMeshBuilder.hxx>
#include <NXOpen/CAE_ElementTypeBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ContactMeshBuilder;
    }
    class Builder;
    namespace CAE
    {
        class ElementTypeBuilder;
    }
    namespace CAE
    {
        class SelectCAEEdge;
    }
    class Point;
    namespace CAE
    {
        class _ContactMeshBuilderBuilder;
        class ContactMeshBuilderImpl;
        /**
            Represents a @link NXOpen::CAE::ContactMeshBuilder NXOpen::CAE::ContactMeshBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::CAE::MeshManager::CreateContactMeshBuilder  NXOpen::CAE::MeshManager::CreateContactMeshBuilder @endlink  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ContactMeshBuilder : public NXOpen::Builder
        {
            /** the type of alignment to be created */
            public: enum AlignmentType
            {
                AlignmentTypeMinimumdistance/** minimumdistance */ ,
                AlignmentTypeNormaltocontactedge/** normaltocontactedge */ 
            };

            private: ContactMeshBuilderImpl * m_contactmeshbuilder_impl;
            private: friend class  _ContactMeshBuilderBuilder;
            protected: ContactMeshBuilder();
            public: ~ContactMeshBuilder();
            /**Returns  the contact edge or the source edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectCAEEdge * ContactEdge
            (
            );
            /**Returns  the start point of contact on contact edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ContactEdgeStartPoint
            (
            );
            /**Sets  the start point of contact on contact edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetContactEdgeStartPoint
            (
                NXOpen::Point * contactEdgeStartPoint /** contactedgestartpoint */ 
            );
            /**Returns  the end point of contact on contact edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ContactEdgeEndPoint
            (
            );
            /**Sets  the end point of contact on contact edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetContactEdgeEndPoint
            (
                NXOpen::Point * contactEdgeEndPoint /** contactedgeendpoint */ 
            );
            /**Returns  the target edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectCAEEdge * TargetEdge
            (
            );
            /**Returns  a flag to align target edge nodes 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool AlignTargetEdgeNodes
            (
            );
            /**Sets  a flag to align target edge nodes 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetAlignTargetEdgeNodes
            (
                bool alignTargetEdgeNodes /** aligntargetedgenodes */ 
            );
            /**Returns  the alingment method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ContactMeshBuilder::AlignmentType AlignmentMethod
            (
            );
            /**Sets  the alingment method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetAlignmentMethod
            (
                NXOpen::CAE::ContactMeshBuilder::AlignmentType alignmentMethod /** alignmentmethod */ 
            );
            /**Returns  the start point of contact on target edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * TargetEdgeStartPoint
            (
            );
            /**Sets  the start point of contact on target edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetTargetEdgeStartPoint
            (
                NXOpen::Point * targetEdgeStartPoint /** targetedgestartpoint */ 
            );
            /**Returns  the end point of contact on target edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * TargetEdgeEndPoint
            (
            );
            /**Sets  the end point of contact on target edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetTargetEdgeEndPoint
            (
                NXOpen::Point * targetEdgeEndPoint /** targetedgeendpoint */ 
            );
            /**Returns  the element type to be created
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementTypeBuilder * ElementType
            (
            );
            /**Returns  the number of contact elements 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int NumElements
            (
            );
            /**Sets  the number of contact elements 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNumElements
            (
                int numElements /** numelements */ 
            );
            /**Returns  a flag to enable gap tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableGapTolerance
            (
            );
            /**Sets  a flag to enable gap tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetEnableGapTolerance
            (
                bool enableGapTolerance /** enablegaptolerance */ 
            );
            /**Returns  the gap tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double GapTolerance
            (
            );
            /**Sets  the gap tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGapTolerance
            (
                double gapTolerance /** gaptolerance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
