#ifndef NXOpen_TOOLING_CLEARANCEMANAGEMENTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_CLEARANCEMANAGEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ClearanceManagementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_ClearanceManagementBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ClearanceManagementBuilder;
    }
    class Builder;
    class ScCollector;
    class SelectBody;
    namespace Tooling
    {
        class _ClearanceManagementBuilderBuilder;
        class ClearanceManagementBuilderImpl;
        /** Progressive Die Wizard  builder to management clearances.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ClearanceManagementCollection::CreateClearanceManagementBuilder  NXOpen::Tooling::ClearanceManagementCollection::CreateClearanceManagementBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        IsHighLightFacesWithSameClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlateClearanceEighth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlateClearanceFifth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlateClearanceFirst </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlateClearanceFourth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlateClearanceNinth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlateClearanceSecond </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlateClearanceSeventh </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlateClearanceSixth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlateClearanceTenth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlateClearanceThird </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ShowPartAndClearanceHoleOnly </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ToolPartOrTargetPart </td> <td> 
         
        ToolPart </td> </tr> 

        <tr><td> 
         
        TypeAssignOrCheck </td> <td> 
         
        AssignClearances </td> </tr> 

        <tr><td> 
         
        UsePlateClearanceEighth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UsePlateClearanceFifth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UsePlateClearanceFirst </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UsePlateClearanceFourth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UsePlateClearanceNinth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UsePlateClearanceSecond </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UsePlateClearanceSeventh </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UsePlateClearanceSixth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UsePlateClearanceTenth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UsePlateClearanceThird </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ClearanceManagementBuilder : public NXOpen::Builder
        {
            /** Specifies type to assign or check clearances */
            public: enum Type
            {
                TypeAssignClearances/** assign clearances */ ,
                TypeCheckClearances/** check clearances */ 
            };

            /** Specifies clearance management part. */
            public: enum Selection
            {
                SelectionToolPart/** tool part */ ,
                SelectionTargetPart/** target part */ 
            };

            private: ClearanceManagementBuilderImpl * m_clearancemanagementbuilder_impl;
            private: friend class  _ClearanceManagementBuilderBuilder;
            protected: ClearanceManagementBuilder();
            public: ~ClearanceManagementBuilder();
            /**Returns  the clearance management type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ClearanceManagementBuilder::Type TypeAssignOrCheck
            (
            );
            /**Sets  the clearance management type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTypeAssignOrCheck
            (
                NXOpen::Tooling::ClearanceManagementBuilder::Type typeAssignOrCheck /** typeassignorcheck */ 
            );
            /**Returns  the select face. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectFace
            (
            );
            /**Returns  the option whether highlight faces with same clearance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsHighLightFacesWithSameClearance
            (
            );
            /**Sets  the option whether highlight faces with same clearance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHighLightFacesWithSameClearance
            (
                bool isHighLightFacesWithSameClearance /** ishighlightfaceswithsameclearance */ 
            );
            /**Returns  the name and full path of specified file. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SpecifyClearanceDataFile
            (
            );
            /**Sets  the name and full path of specified file. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSpecifyClearanceDataFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the name and full path of specified file. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetSpecifyClearanceDataFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the option whether use plate clearance first. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceFirst
            (
            );
            /**Sets  the option whether use plate clearance first. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceFirst
            (
                bool usePlateClearanceFirst /** useplateclearancefirst */ 
            );
            /**Returns  the plate clearance first. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceFirst
            (
            );
            /**Sets  the plate clearance first. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceFirst
            (
                double plateClearanceFirst /** plateclearancefirst */ 
            );
            /**Returns  the option whether use plate clearance second. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceSecond
            (
            );
            /**Sets  the option whether use plate clearance second. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceSecond
            (
                bool usePlateClearanceSecond /** useplateclearancesecond */ 
            );
            /**Returns  the plate clearance second. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceSecond
            (
            );
            /**Sets  the plate clearance second. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceSecond
            (
                double plateClearanceSecond /** plateclearancesecond */ 
            );
            /**Returns  the option whether use plate clearance third. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceThird
            (
            );
            /**Sets  the option whether use plate clearance third. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceThird
            (
                bool usePlateClearanceThird /** useplateclearancethird */ 
            );
            /**Returns  the plate clearance third. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceThird
            (
            );
            /**Sets  the plate clearance third. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceThird
            (
                double plateClaranceThird /** plateclarancethird */ 
            );
            /**Returns  the option whether use plate clearance fourth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceFourth
            (
            );
            /**Sets  the option whether use plate clearance fourth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceFourth
            (
                bool usePlateClearanceFourth /** useplateclearancefourth */ 
            );
            /**Returns  the plate clearance fourth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceFourth
            (
            );
            /**Sets  the plate clearance fourth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceFourth
            (
                double plateClearanceFourth /** plateclearancefourth */ 
            );
            /**Returns  the option whether use plate clearance fifth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceFifth
            (
            );
            /**Sets  the option whether use plate clearance fifth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceFifth
            (
                bool usePlateClearanceFifth /** useplateclearancefifth */ 
            );
            /**Returns  the plate clearance fifth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceFifth
            (
            );
            /**Sets  the plate clearance fifth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceFifth
            (
                double plateClearanceFifth /** plateclearancefifth */ 
            );
            /**Returns  the option whether use plate clearance sixth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceSixth
            (
            );
            /**Sets  the option whether use plate clearance sixth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceSixth
            (
                bool usePlateClearanceSixth /** useplateclearancesixth */ 
            );
            /**Returns  the plate clearance sixth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceSixth
            (
            );
            /**Sets  the plate clearance sixth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceSixth
            (
                double plateClearanceSixth /** plateclearancesixth */ 
            );
            /**Returns  the option whether use plate clearance seventh. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceSeventh
            (
            );
            /**Sets  the option whether use plate clearance seventh. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceSeventh
            (
                bool usePlateClearanceSeventh /** useplateclearanceseventh */ 
            );
            /**Returns  the plate clearance seventh. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceSeventh
            (
            );
            /**Sets  the plate clearance seventh. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceSeventh
            (
                double plateClearanceSeventh /** plateclearanceseventh */ 
            );
            /**Returns  the option whether use plate clearance eighth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceEighth
            (
            );
            /**Sets  the option whether use plate clearance eighth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceEighth
            (
                bool usePlateClearanceEighth /** useplateclearanceeighth */ 
            );
            /**Returns  the plate clearance eighth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceEighth
            (
            );
            /**Sets  the plate clearance eighth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceEighth
            (
                double plateClearanceEighth /** plateclearanceeighth */ 
            );
            /**Returns  the option whether use plate clearance ninth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceNinth
            (
            );
            /**Sets  the option whether use plate clearance ninth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceNinth
            (
                bool usePlateClearanceNinth /** useplateclearanceninth */ 
            );
            /**Returns  the plate clearance ninth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceNinth
            (
            );
            /**Sets  the plate clearance ninth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceNinth
            (
                double plateClearanceNinth /** plateclearanceninth */ 
            );
            /**Returns  the option whether use plate clearance tenth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePlateClearanceTenth
            (
            );
            /**Sets  the option whether use plate clearance tenth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePlateClearanceTenth
            (
                bool usePlateClearanceTenth /** useplateclearancetenth */ 
            );
            /**Returns  the plate clearance tenth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateClearanceTenth
            (
            );
            /**Sets  the plate clearance tenth. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPlateClearanceTenth
            (
                double plateClearanceTenth /** plateclearancetenth */ 
            );
            /**Returns  the tool part or target part. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ClearanceManagementBuilder::Selection ToolPartOrTargetPart
            (
            );
            /**Sets  the tool part or target part. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetToolPartOrTargetPart
            (
                NXOpen::Tooling::ClearanceManagementBuilder::Selection toolPartOrTargetPart /** toolpartortargetpart */ 
            );
            /**Returns  the selected part. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * SelectPart
            (
            );
            /**Returns  the option to show selected part and clearance hole only. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowPartAndClearanceHoleOnly
            (
            );
            /**Sets  the option to show selected part and clearance hole only. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetShowPartAndClearanceHoleOnly
            (
                bool showPartAndClearanceHoleOnly /** showpartandclearanceholeonly */ 
            );
            /** Set the parameter number, names and values in the tree list into builder attribute. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetParameters
            (
                std::vector<NXString> & paraNames /** an array of names */,
                std::vector<NXString> & paraValues /** an array of values */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
