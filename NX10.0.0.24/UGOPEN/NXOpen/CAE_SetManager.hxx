#ifndef NXOpen_CAE_SETMANAGER_HXX_INCLUDED
#define NXOpen_CAE_SETMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SetManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_CAESet.hxx>
#include <NXOpen/CAE_SetObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SetManager;
    }
    namespace CAE
    {
        class CAEEdge;
    }
    namespace CAE
    {
        class CAESet;
    }
    namespace CAE
    {
        class CAEVertex;
    }
    namespace CAE
    {
        class CaeGroup;
    }
    namespace CAE
    {
        class FEElemEdge;
    }
    namespace CAE
    {
        class FENode;
    }
    class NXObject;
    class TaggedObject;
    namespace CAE
    {
        class _SetManagerBuilder;
        class SetManagerImpl;
        /**  @brief  Represents a group of CAE object sets. The objects in each set
                can be used to create loads, constraints ..etc 

           <br> This is a sub object  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SetManager : public NXOpen::NXObject
        {
            private: SetManagerImpl * m_setmanager_impl;
            private: friend class  _SetManagerBuilder;
            protected: SetManager();
            public: ~SetManager();
            /**Returns  the count of objects in the set 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int TargetSetCount
            (
            );
            /** Creates a CAE.CAESet  @return  the cae set created 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CAESet * CreateCaeSet
            (
            );
            /** Sets the CAE edge path in the specified set
                     
             <br>  @deprecated Deprecated in NX10.0.0.  Use overloaded @link CAE::SetManager::SetTargetSetEdgePath CAE::SetManager::SetTargetSetEdgePath@endlink  with additional arguments instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use overloaded CAE::SetManager::SetTargetSetEdgePath with additional arguments instead.") void SetTargetSetEdgePath
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::CAEEdge *> & seedEdges /** seed edges to define the path */,
                const std::vector<NXOpen::CAE::CAEVertex *> & seedVertices /** seed vertices to define the path */
            );
            /** Sets the CAE edge path in the specified set
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetEdgePath
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::CAEEdge *> & seedEdges /** seed edges to define the path */,
                const std::vector<NXOpen::CAE::CAEVertex *> & seedVertices /** seed vertices to define the path */,
                const std::vector<bool> & preferFreeEdges /** if true for seed, prefer free edges */,
                const std::vector<bool> & allowGapJumping /** if true for seed, gaps between edges will be jumped*/,
                const std::vector<double> & gapJumpingTolerance /** if allowGapJumping is true for seed, this is the tolerance to use for jumping gaps between edges*/
            );
            /** Sets the CAE element edge path in the specified set
                     
             <br>  @deprecated Deprecated in NX10.0.0.  Use overloaded @link CAE::SetManager::SetTargetSetElemEdgePath CAE::SetManager::SetTargetSetElemEdgePath@endlink  with additional arguments instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use overloaded CAE::SetManager::SetTargetSetElemEdgePath with additional arguments instead.") void SetTargetSetElemEdgePath
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::FEElemEdge *> & seedEdges /** seed element edges to define the path */,
                const std::vector<NXOpen::CAE::FENode *> & seedVertices /** seed nodes to define the path */
            );
            /** Sets the CAE element edge path in the specified set
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetElemEdgePath
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::FEElemEdge *> & seedEdges /** seed element edges to define the path */,
                const std::vector<NXOpen::CAE::FENode *> & seedVertices /** seed nodes to define the path */,
                const std::vector<bool> & preferFreeEdges /** if true for seed, prefer free element edges */,
                const std::vector<bool> & preferGeometryAssociatedEdges /** if true for seed, prefer geometry associated element edges*/,
                const std::vector<bool> & preferFeatureElementEdges /** if true for seed, prefer feature element edges*/,
                const std::vector<double> & featureAngleTolerance /** if preferFeatureElementEdge is true for seed, this is the feature angle tolerance to use*/,
                const std::vector<bool> & allowGapJumping /** if true for seed, gaps between element edges will be jumped*/,
                const std::vector<double> & gapJumpingTolerance /** if allowGapJumping is true for seed, this is the tolerance to use for jumping gaps between element edges*/
            );
            /** Sets the CAE group in the specified set
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetGroup
            (
                int setIndex /** index of the set */,
                NXOpen::CAE::CaeSetGroupFilterType filterType /** filter to extract type of objects from the group */,
                NXOpen::CAE::CaeGroup * group /** group to add to set */
            );
            /** Gets the CAE group in the specified set
                      @return  group object from set. may be NULL 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * GetTargetSetGroup
            (
                int setIndex /** index of the set */
            );
            /** Sets the CAE objects in the specified set
                     
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetMembers
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::SetObject> & objects /** objects to add to set */
            );
            /** Sets the CAE objects in the specified target set exclude set
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetExcludedMembers
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::SetObject> & excludedObjects /** excluded objects to add to set */
            );
            /** Gets the objects for the specified target set
                     
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetTargetSetMembers
            (
                int setIndex /** index of the set */,
                NXOpen::NXObject ** displayCoordinateSystem /** display coordinate system */,
                std::vector<NXOpen::CAE::SetObject> & objects /** objects in set */
            );
            /** Gets the objects for the specified target set excluded set
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetTargetSetExcludedMembers
            (
                int setIndex /** index of the set */,
                std::vector<NXOpen::CAE::SetObject> & objects /** objects in set */
            );
            /** Clears the objects stored in the set specified in
                        the set manager
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void CleanTargetSet
            (
                int setIndex /** index of the set in the set manager*/
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
