#ifndef NXOpen_CAM_INSPECTIONANALYZEOUTPUTBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONANALYZEOUTPUTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionAnalyzeOutputBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionAnalyzeOutputBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionAnalyzeOutputBuilder;
    }
    class Builder;
    namespace CAM
    {
        class _InspectionAnalyzeOutputBuilderBuilder;
        class InspectionAnalyzeOutputBuilderImpl;
        /** Inspection Analyze Output options dialog builder  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionOperationCollection::CreateInspectionAnalyzeOutputBuilder  NXOpen::CAM::InspectionOperationCollection::CreateInspectionAnalyzeOutputBuilder @endlink  <br> 
         <br>  Created in NX8.5.1.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionAnalyzeOutputBuilder : public NXOpen::Builder
        {
            /** Inspection Analysis Output Format Types */
            public: enum OutputFormatType
            {
                OutputFormatTypeStandardTextListing/** Standard Text Listing */,
                OutputFormatTypeDimensionalMarkupLanguage/** DML */,
                OutputFormatTypePdf/** PDF */
            };

            /** Inspection Analysis Output Reporting Csys Types */
            public: enum ReportingCsysType
            {
                ReportingCsysTypePcs/** Active PCS */,
                ReportingCsysTypeDrf/** Datum Reference Frame */,
                ReportingCsysTypeSetupABS/** Setup Absolute */,
                ReportingCsysTypePartABS/** Part Absolute */
            };

            private: InspectionAnalyzeOutputBuilderImpl * m_inspectionanalyzeoutputbuilder_impl;
            private: friend class  _InspectionAnalyzeOutputBuilderBuilder;
            protected: InspectionAnalyzeOutputBuilder();
            public: ~InspectionAnalyzeOutputBuilder();
            /**Returns  the analysis results output file format 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAnalyzeOutputBuilder::OutputFormatType OutputFormat
            (
            );
            /**Sets  the analysis results output file format 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetOutputFormat
            (
                NXOpen::CAM::InspectionAnalyzeOutputBuilder::OutputFormatType outputFormat /** outputformat */ 
            );
            /**Returns  the output file 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXString OutputFile
            (
            );
            /**Sets  the output file 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetOutputFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the output file 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetOutputFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the extension to use for text format files 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXString TextExtension
            (
            );
            /**Sets  the extension to use for text format files 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTextExtension
            (
                const NXString & textExtension /** textextension */ 
            );
            /**Sets  the extension to use for text format files 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetTextExtension
            (
                const char * textExtension /** textextension */ 
            );
            /**Returns  the extension to use for dml format files 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXString DmlExtension
            (
            );
            /**Sets  the extension to use for dml format files 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDmlExtension
            (
                const NXString & dmlExtension /** dmlextension */ 
            );
            /**Sets  the extension to use for dml format files 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetDmlExtension
            (
                const char * dmlExtension /** dmlextension */ 
            );
            /**Returns  the report header option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool ReportHeader
            (
            );
            /**Sets  the report header option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetReportHeader
            (
                bool reportHeader /** reportheader */ 
            );
            /**Returns  the feature summary option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool FeatureSummary
            (
            );
            /**Sets  the feature summary option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatureSummary
            (
                bool featureSummary /** featuresummary */ 
            );
            /**Returns  the tolerance summary option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool ToleranceSummary
            (
            );
            /**Sets  the tolerance summary option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetToleranceSummary
            (
                bool toleranceSummary /** tolerancesummary */ 
            );
            /**Returns  the feature detail option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool FeatureDetail
            (
            );
            /**Sets  the feature detail option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatureDetail
            (
                bool featureDetail /** featuredetail */ 
            );
            /**Returns  the tolerance detail option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool ToleranceDetail
            (
            );
            /**Sets  the tolerance detail option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetToleranceDetail
            (
                bool toleranceDetail /** tolerancedetail */ 
            );
            /**Returns  the point detail option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool PointDetail
            (
            );
            /**Sets  the point detail option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointDetail
            (
                bool pointDetail /** pointdetail */ 
            );
            /**Returns  the drf transform option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool DrfTransform
            (
            );
            /**Sets  the drf transform option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDrfTransform
            (
                bool drfTransform /** drftransform */ 
            );
            /**Returns  the reporting csys to use 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAnalyzeOutputBuilder::ReportingCsysType ReportingCsys
            (
            );
            /**Sets  the reporting csys to use 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetReportingCsys
            (
                NXOpen::CAM::InspectionAnalyzeOutputBuilder::ReportingCsysType reportingCsys /** reportingcsys */ 
            );
            /**Returns  the PCS to use for DML output 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXString DmlPcs
            (
            );
            /**Sets  the PCS to use for DML output 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDmlPcs
            (
                const NXString & dmlPcs /** dmlpcs */ 
            );
            /**Sets  the PCS to use for DML output 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetDmlPcs
            (
                const char * dmlPcs /** dmlpcs */ 
            );
            /**Returns  the option to list output to window 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool ListOutput
            (
            );
            /**Sets  the option to list output to window 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetListOutput
            (
                bool listOutput /** listoutput */ 
            );
            /** Generate text output 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void OutputText
            (
            );
            /** Generate DML output 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void OutputDml
            (
            );
            /** Returns the selected operations.  @return  Selected operation names 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetSelectedOps
            (
            );
            /** Sets the selected operations. 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSelectedOps
            (
                std::vector<NXString> & selectedOps /** Selected operation names   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
