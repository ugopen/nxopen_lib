#ifndef NXOpen_CAE_LAMINATEDYNAMICEVENTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_LAMINATEDYNAMICEVENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_LaminateDynamicEventBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_LaminateDynamicEventBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class LaminateDynamicEventBuilder;
    }
    class Builder;
    namespace CAE
    {
        class ModelingObjectPropertyTable;
    }
    class CoordinateSystem;
    class TaggedObject;
    namespace CAE
    {
        class _LaminateDynamicEventBuilderBuilder;
        class LaminateDynamicEventBuilderImpl;
        /** Represents a @link CAE::LaminateDynamicEvent CAE::LaminateDynamicEvent@endlink  builder  <br> This is an abstract class.  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  LaminateDynamicEventBuilder : public NXOpen::Builder
        {
            /** The reference enum. */
            public: enum ReferenceTypeEnum
            {
                ReferenceTypeEnumRelative/** relative */ ,
                ReferenceTypeEnumAbsolute/** absolute */ 
            };

            /** The excitation axis enum. */
            public: enum ExcitationSelectedAxisEnum
            {
                ExcitationSelectedAxisEnumX/** x */ ,
                ExcitationSelectedAxisEnumY/** y */ ,
                ExcitationSelectedAxisEnumZ/** z */ 
            };

            private: LaminateDynamicEventBuilderImpl * m_laminatedynamiceventbuilder_impl;
            private: friend class  _LaminateDynamicEventBuilderBuilder;
            protected: LaminateDynamicEventBuilder();
            public: ~LaminateDynamicEventBuilder();
            /**Returns  the event name 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DynamicEventName
            (
            );
            /**Sets  the event name 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetDynamicEventName
            (
                const NXString & dynamicEventName /** dynamiceventname */ 
            );
            /**Sets  the event name 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            void SetDynamicEventName
            (
                const char * dynamicEventName /** dynamiceventname */ 
            );
            /**Returns  the lower bound freq 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double LowerBoundFrequency
            (
            );
            /**Sets  the lower bound freq 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetLowerBoundFrequency
            (
                double lowerBoundFrequency /** lowerboundfrequency */ 
            );
            /**Returns  the upper bound freq 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double UpperBoundFrequency
            (
            );
            /**Sets  the upper bound freq 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetUpperBoundFrequency
            (
                double upperBoundFrequency /** upperboundfrequency */ 
            );
            /**Returns  the reference type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateDynamicEventBuilder::ReferenceTypeEnum ReferenceType
            (
            );
            /**Sets  the reference type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetReferenceType
            (
                NXOpen::CAE::LaminateDynamicEventBuilder::ReferenceTypeEnum referenceType /** referencetype */ 
            );
            /**Returns  the nastran basic 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool NastranBasicCsys
            (
            );
            /**Sets  the nastran basic 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetNastranBasicCsys
            (
                bool nastranBasicCsys /** nastranbasiccsys */ 
            );
            /**Returns  the excitation coordinate system 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * ExcitationCsys
            (
            );
            /**Sets  the excitation coordinate system 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetExcitationCsys
            (
                NXOpen::CoordinateSystem * excitationCsys /** excitationcsys */ 
            );
            /**Returns  the excitation axis 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateDynamicEventBuilder::ExcitationSelectedAxisEnum ExcitationSelectedAxis
            (
            );
            /**Sets  the excitation axis 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetExcitationSelectedAxis
            (
                NXOpen::CAE::LaminateDynamicEventBuilder::ExcitationSelectedAxisEnum excitationSelectedAxis /** excitationselectedaxis */ 
            );
            /**Returns  the function. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * UserFunction
            (
            );
            /**Sets  the function. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetUserFunction
            (
                NXOpen::TaggedObject * userFunction /** userfunction */ 
            );
            /** Get the output request.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelingObjectPropertyTable * GetOutputRequestObject
            (
            );
            /** Set the output request. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetOutputRequestObject
            (
                NXOpen::CAE::ModelingObjectPropertyTable * ssmo /** ssmo */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
