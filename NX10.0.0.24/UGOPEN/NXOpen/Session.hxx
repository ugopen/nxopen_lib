#ifndef NXOpen_SESSION_HXX_INCLUDED
#define NXOpen_SESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Session.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_GRMSearch.hxx>
#include <NXOpen/Display_TransientText.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/BaseSession.hxx>
#include <NXOpen/PDM_PersistentSettings.hxx>
#include <NXOpen/PDM_SessionSettings.hxx>
#include <NXOpen/PartCleanup.hxx>
#include <NXOpen/TableEditorDefaultDataProvider.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Session;
    class AssembliesUtils;
    class AttributeManager;
    class BasePart;
    namespace CAE
    {
        class AfuManager;
    }
    namespace CAE
    {
        class CaeSession;
    }
    namespace CAE
    {
        namespace FTK
        {
            class DataManager;
        }
    }
    namespace CAE
    {
        namespace FTK
        {
            class FTKManager;
        }
    }
    namespace CAE
    {
        class GRMSearch;
    }
    namespace CAE
    {
        class Post;
    }
    namespace CAE
    {
        class ResultManager;
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class XYPlotManager;
        }
    }
    namespace CAM
    {
        class CAMSession;
    }
    class CollaborativeContentManager;
    class DexManager;
    namespace Display
    {
        class TransientText;
    }
    class DisplayManager;
    class DrawingUtils;
    class EngineeringFunction;
    class ErrorList;
    namespace Features
    {
        class UserDefinedFeatureClassManager;
    }
    namespace Gateway
    {
        class BookmarkFile;
    }
    class Information;
    namespace Issue
    {
        class IssueManager;
    }
    class LicenseManager;
    class LinkedPartManager;
    class ListingWindow;
    class LogFile;
    namespace Markup
    {
        class MarkupManager;
    }
    class MathUtils;
    class Measurement;
    namespace Mechatronics
    {
        class MechatronicsSession;
    }
    namespace Motion
    {
        class MotionSession;
    }
    namespace Motion
    {
        class MotionSimulation;
    }
    namespace Options
    {
        class OptionsManager;
    }
    namespace PDM
    {
        class ConfigurationManager;
    }
    namespace PDM
    {
        class PdmSearchManager;
    }
    namespace PDM
    {
        class PdmSession;
    }
    namespace PDM
    {
        class PersistentSettings;
    }
    namespace PDM
    {
        class RequirementUtils;
    }
    namespace PDM
    {
        class SessionSettings;
    }
    class PartCleanup;
    class PartCollection;
    namespace Preferences
    {
        class SessionPreferences;
    }
    class PvtransManager;
    namespace Routing
    {
        class DesignRuleManager;
    }
    class Sketch;
    class SubdivisionTaskEnvironment;
    class TableEditorDefaultDataProvider;
    class TaggedObject;
    namespace Tooling
    {
        class ToolingSession;
    }
    class Update;
    namespace UserDefinedObjects
    {
        class UserDefinedClassManager;
    }
    namespace Validate
    {
        class ValidationManager;
    }
    namespace Validate
    {
        class XmlComparator;
    }
    namespace VisualReporting
    {
        class VisualReportManager;
    }
    namespace Weld
    {
        class CustomManager;
    }
    namespace Weld
    {
        class WeldCpdUtils;
    }
    class SessionImpl;
    /** Represents the NX session.

        For language bindings that support remoting, the server must export it for this 
        class to be obtained by a client.

     
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  Session : public NXOpen::BaseSession
    {
        /** Describes when an automation library should be unloaded
            from a running session. To use the enum, implement a static function
            called GetUnloadOption in your automation program which returns one
            of these options as an integer. (Note that this function must also
            have a string argument that is currently not used for anything.) NX
            will call this method once the automation program has exited to
            determine when to unload the library. */
        public: enum LibraryUnloadOption
        {
            LibraryUnloadOptionImmediately = 1/** unload the library
                        as soon as the automation program has completed */,
            LibraryUnloadOptionExplicitly/** unload the library
                        from the "Unload Shared Image" dialog */,
            LibraryUnloadOptionAtTermination/** unload the library
                        when the NX session terminates */
        };

        /** Represents a undo mark.  This is used to rollback to previous states of
             the model. */
        public: enum UndoMarkId { UndoMarkIdDummyMember }; // Used as an id
        /** Indicates the visibility of an undo mark */
        public: enum MarkVisibility
        {
            MarkVisibilityVisible/** visible */ ,
            MarkVisibilityInvisible/** invisible */ ,
            MarkVisibilityAnyVisibility/** Use only in query methods */
        };

        /** Indicates whether project assignment is for item, item revision or dataset */
        public: enum ProjectAssignmentObjectType
        {
            ProjectAssignmentObjectTypePart/** item*/,
            ProjectAssignmentObjectTypePartrev/** item rev*/,
            ProjectAssignmentObjectTypeAppdata/** data set */,
            ProjectAssignmentObjectTypeCollaborativeProductDevelopmentDe/** Collaborative Product Development -Design Element */
        };

        /** Indicates project assignment state */
        public: enum ProjectAssignmentState
        {
            ProjectAssignmentStateNone = 10/** to remove project from all objects*/,
            ProjectAssignmentStatePartial/** to skip project assignment*/,
            ProjectAssignmentStateFull/** to assign project to all objects */
        };

         /** This structure contains data about an undo mark */
        public:
        struct  UndoMarkData
        {
            public: /** ID of the mark */NXOpen::Session::UndoMarkId Id;
            public: /** visibility of the mark */NXOpen::Session::MarkVisibility Visibility;
            public: UndoMarkData() :
                Id((NXOpen::Session::UndoMarkId)0),
                Visibility((NXOpen::Session::MarkVisibility)0)
            {
            }
            /** Constructor for the UndoMarkData struct. */ 
            public: UndoMarkData(NXOpen::Session::UndoMarkId idInitial /** ID of the mark */, 
                    NXOpen::Session::MarkVisibility visibilityInitial /** visibility of the mark */) :
                Id(idInitial),
                Visibility(visibilityInitial)
            {
            }
        };

        /** Persistence policies for transient modified parts */
        public: enum TransientPartPolicy
        {
            TransientPartPolicyRetainTransience/** Retain transient status when non-retainable mods made */,
            TransientPartPolicyRemoveTransience/** Remove transient status when non-retainable mods made */
        };

        private: SessionImpl * m_session_impl;
        private: static Session *theSession;
        public: static Session *GetSession();
        private: friend class  _SessionBuilder;
        protected: Session();
        public: ~Session();
        /** Creates an undo mark  @return  mark ID 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Session::UndoMarkId SetUndoMark
        (
            NXOpen::Session::MarkVisibility markVisibility /** mark visibility */ ,
            const NXString & name /** mark name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates an undo mark  @return  mark ID 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Session::UndoMarkId SetUndoMark
        (
            NXOpen::Session::MarkVisibility markVisibility /** mark visibility */ ,
            const char * name /** mark name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Undo to last visible mark. This will not delete the undo mark. Use 
                @link UndoLastNVisibleMarks UndoLastNVisibleMarks@endlink  to delete the undo mark also. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void UndoToLastVisibleMark
        (
        );
        /** Undo to a specified number of visible marks starting with the most
                recently created visible mark.  If the number is less than 1, then
                all visible marks are undone.  If the number is greater than the
                total number of visible marks, then all visible marks will be undone.
                Marks undone via this routine may be redone via @link Redo Redo@endlink 
                if the operations undone permit it. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void UndoLastNVisibleMarks
        (
            int n /** Number of visible marks to undo */,
            bool* marksRecycled /** True if undo succeeded but no marks remain. This may indicate previous marks have been recycled. */,
            bool* undoUnavailable /** True if not all requested marks were undone and the application has locked the undo system. */
        );
        /** Redo the last undo if possible. Only does one mark but may be repeated
                for all redoable marks. Only marks undone by @link UndoLastNVisibleMarks UndoLastNVisibleMarks@endlink 
                are redoable. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void Redo
        (
        );
        /** Undo to the specified mark 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void UndoToMark
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark to undo to */,
            const NXString & markName /** Name of mark to undo to.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Undo to the specified mark 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void UndoToMark
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark to undo to */,
            const char * markName /** Name of mark to undo to.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Undo to the specified mark and output status to status bar.
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void UndoToMarkWithStatus
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark to undo to */,
            const NXString & markName /** Name of mark to undo to.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Undo to the specified mark and output status to status bar.
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void UndoToMarkWithStatus
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark to undo to */,
            const char * markName /** Name of mark to undo to.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes an undo mark.  If you want to delete a mark and all marks that were created after that
            mark, use @link DeleteUndoMarksUpToMark DeleteUndoMarksUpToMark@endlink  instead. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteUndoMark
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark */,
            const NXString & markName /** Name of mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes an undo mark.  If you want to delete a mark and all marks that were created after that
            mark, use @link DeleteUndoMarksUpToMark DeleteUndoMarksUpToMark@endlink  instead. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void DeleteUndoMark
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark */,
            const char * markName /** Name of mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes all undo marks up to and including the specified mark.
            If you only want to delete a mark, but do not want to delete the marks that were created after 
            that mark, use @link DeleteUndoMark DeleteUndoMark@endlink  instead.  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteUndoMarksUpToMark
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark */,
            const NXString & markName /** Name of mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool deleteAllIfNotFound /** Whether to delete all marks if the specified mark is not found */
        );
        /** Deletes all undo marks up to and including the specified mark.
            If you only want to delete a mark, but do not want to delete the marks that were created after 
            that mark, use @link DeleteUndoMark DeleteUndoMark@endlink  instead.  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void DeleteUndoMarksUpToMark
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark */,
            const char * markName /** Name of mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool deleteAllIfNotFound /** Whether to delete all marks if the specified mark is not found */
        );
        /** Deletes all undo marks 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteAllUndoMarks
        (
        );
        /** Sets the visibility of the specified undo mark 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUndoMarkVisibility
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark */,
            const NXString & markName /** Name of the mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Session::MarkVisibility visibility /** the new visibility */
        );
        /** Sets the visibility of the specified undo mark 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SetUndoMarkVisibility
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark */,
            const char * markName /** Name of the mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Session::MarkVisibility visibility /** the new visibility */
        );
        /** Returns the visibility of the specified undo mark  @return  visibility of the mark 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Session::MarkVisibility GetUndoMarkVisibility
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark */,
            const NXString & markName /** Name of the mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the visibility of the specified undo mark  @return  visibility of the mark 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Session::MarkVisibility GetUndoMarkVisibility
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark */,
            const char * markName /** Name of the mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the name of the specified undo mark  @return  the mark's name 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetUndoMarkName
        (
            NXOpen::Session::UndoMarkId markId /** ID of the mark */
        );
        /** Sets the name of the undo mark 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUndoMarkName
        (
            NXOpen::Session::UndoMarkId markId /** ID of the mark */,
            const NXString & markName /** Name of the mark.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the name of the undo mark 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SetUndoMarkName
        (
            NXOpen::Session::UndoMarkId markId /** ID of the mark */,
            const char * markName /** Name of the mark.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns true if the specified mark exists  @return  True if and only if the mark exists 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool DoesUndoMarkExist
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark */,
            const NXString & markName /** Name of the mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns true if the specified mark exists  @return  True if and only if the mark exists 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        bool DoesUndoMarkExist
        (
            NXOpen::Session::UndoMarkId markId /** ID of mark */,
            const char * markName /** Name of the mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns a list of all the undo marks with the specified visibility  @return  List of the undo marks 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::Session::UndoMarkData> GetAllUndoMarks
        (
            NXOpen::Session::MarkVisibility visibility /** Used to limit the results to marks with the specified visibility */
        );
        /** Returns the newest undo mark with the specified visibility  @return  ID of the next undo mark.
                                                       This will be zero if there are no undo marks 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Session::UndoMarkId GetNewestUndoMark
        (
            NXOpen::Session::MarkVisibility visibility /** the visibility mask */
        );
        /**Returns  the newest visible undo mark 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Session::UndoMarkId NewestVisibleUndoMark
        (
        );
        /** This method is called by the NX user interface before
            entering a task environment.  This method will make invisible all the undo 
            marks that currently exist.
            The reason for doing this is so that the user sees only the undo marks
            created in the task environment.
            The method @link NXOpen::Session::EndTaskEnvironment NXOpen::Session::EndTaskEnvironment@endlink 
            will restore the marks to the visibility that they had before this
            method was called. 
            This method should not be called if NX is already in a task environment.
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void BeginTaskEnvironment
        (
        );
        /** This method deletes all the undo marks that have been created since
            entering the task environment via 
            @link NXOpen::Session::BeginTaskEnvironment NXOpen::Session::BeginTaskEnvironment@endlink .  
            An exception will be thrown if this method is called
            when NX is not in a task environment.  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteUndoMarksSetInTaskEnvironment
        (
        );
        /** This method is called by the NX user interface when leaving
            a task environment.  This method will make visible all the undo marks that
            were made invisible by @link NXOpen::Session::BeginTaskEnvironment NXOpen::Session::BeginTaskEnvironment@endlink .
            An exception will be thrown if this method is called
            when NX is not in a task environment.  
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void EndTaskEnvironment
        (
        );
        /**Returns  true if and only if NX is in a task environment 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsInTaskEnvironment
        (
        );
        /**Returns  the active sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Sketch * ActiveSketch
        (
        );
        /** Constructs a new PartCleanup object.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartCleanup * NewPartCleanup
        (
        );
        /** Creates a new error list.
            Warning: this method may be removed in a future release  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ErrorList * NewErrorList
        (
        );
        /** Creates a new database session option controller  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PDM::SessionSettings * NewDatabaseSessionOptions
        (
        );
        /** Creates a new database persistent option controller  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PDM::PersistentSettings * NewDatabasePersistentOptions
        (
        );
        /** Creates a new CAE GRM Search object  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::CAE::GRMSearch * NewCaeGrmsearch
        (
        );
        /**Returns  the full path to the journal that is currently being
            executed 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString ExecutingJournal
        (
        );
        /** Create the CAM session 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateCamSession
        (
        );
        /** Check if the CAM session is initialized  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsCamSessionInitialized
        (
        );
        /** Create the Inspection session 
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateInspectionSession
        (
        );
        /** Check if the Inspection session is initialized  @return  
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsInspectionSessionInitialized
        (
        );
        /**Sets  the persistence policy for transient parts in the session 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTransientPartPersistencePolicy
        (
            NXOpen::Session::TransientPartPolicy policy /** policy */ 
        );
        /**Returns  the persistence policy for transient parts in the session 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Session::TransientPartPolicy TransientPartPersistencePolicy
        (
        );
        /** Gets a named property of the object. The property names are based upon the 
                properties provided by the NXOpen API. 
              @return  The value of the property, expressed as a string 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetProperty
        (
            NXOpen::TaggedObject * object /** The object to query */,
            const NXString & propertyName /** The name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Gets a named property of the object. The property names are based upon the 
                properties provided by the NXOpen API. 
              @return  The value of the property, expressed as a string 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        NXString GetProperty
        (
            NXOpen::TaggedObject * object /** The object to query */,
            const char * propertyName /** The name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets a named property of the object. The property names are based upon the 
                properties provided by the NXOpen API. 
             
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetProperty
        (
            NXOpen::TaggedObject * object /** The object to query */,
            const NXString & propertyName /** The name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & value /** The value of the property, expressed as a string */
        );
        /** Sets a named property of the object. The property names are based upon the 
                properties provided by the NXOpen API. 
             
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetProperty
        (
            NXOpen::TaggedObject * object /** The object to query */,
            const char * propertyName /** The name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * value /** The value of the property, expressed as a string */
        );
        /** Gets a list of the named properties of this object  @return  array of property names 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetNamedProperties
        (
            NXOpen::TaggedObject * object /** The object to query */
        );
        /** Gets a list of the classes defined in the current session  @return  array of class names 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetClasses
        (
        );
        /** Gets a list of the named properties of a named class 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void GetNamedProperties
        (
            const NXString & className /** The name of the class to query   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<NXString> & properties /** array of property names */,
            std::vector<NXString> & propertyTypes /** type name of corresponding property */
        );
        /** Gets a list of the named properties of a named class 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void GetNamedProperties
        (
            const char * className /** The name of the class to query   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<NXString> & properties /** array of property names */,
            std::vector<NXString> & propertyTypes /** type name of corresponding property */
        );
        /** Deletes all @link NXOpen::Facet::FacetedFace NXOpen::Facet::FacetedFace@endlink  and @link NXOpen::Facet::FacetedEdge NXOpen::Facet::FacetedEdge@endlink  objects 
                in the current session 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void CleanUpFacetedFacesAndEdges
        (
        );
        /**  Assign or remove projects to/from objects
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void AssignRemoveProjects
        (
            std::vector<NXString> & cliNames /** cli names of the objects to assign projects to    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<NXOpen::Session::ProjectAssignmentObjectType> & objectTypes /** one of item, item rev or dataset type */,
            std::vector<NXString> & projectNames /** names of the projects to assign   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<NXOpen::Session::ProjectAssignmentState> & assignmentStates /** assignment states */
        );
        /** Returns the value of a NX enviroment variable   @return  the value assigned to this environment variable 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXString GetEnvironmentVariableValue
        (
            const NXString & envVaribable /** the environment variable name, which may be case sensitive on some platforms   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the value of a NX enviroment variable   @return  the value assigned to this environment variable 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        NXString GetEnvironmentVariableValue
        (
            const char * envVaribable /** the environment variable name, which may be case sensitive on some platforms   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  true if and only if NX is batch mode (or in other words not running interactively).   
         <br>  Created in NX8.0.3.  <br>  
         <br> License requirements : None */
        public: bool IsBatch
        (
        );
        /** Sets the value of a NX enviroment variable  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: void SetEnvironmentVariableValue
        (
            const NXString & envVaribable /** the environment variable name, which may be case sensitive on some platforms   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & envValue /** the value to be assigned to this environment variable   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets the value of a NX enviroment variable  
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        void SetEnvironmentVariableValue
        (
            const char * envVaribable /** the environment variable name, which may be case sensitive on some platforms   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * envValue /** the value to be assigned to this environment variable   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**  Enable redo for NXOpen programs. As default redo is enabled in NX.
                 One can disable redo to save memory for memory intensive NX Open programs. After the NX Open program is executed
                 redo will be restored back to enabled state.
                 In case redo is enabled from previous disbaled state , it must be done just before setting a undo mark.
                 Note that, redo is not supported for the visible marks set before making this call.
             @return  Returns previous redo state
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: bool EnableRedo
        (
            bool enableRedo /** True will enable redo for NXOpen programs.
                                                   False should disable the redo for NXOpen programs*/
        );
        /** Returns a new @link NXOpen::Display::TransientText NXOpen::Display::TransientText@endlink  object  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::TransientText * NewTransientText
        (
        );
        /**  Assign or remove projects to/from CPD objects
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void AssignRemoveProjectsBasedOnPartOccs
        (
            const std::vector<NXOpen::TaggedObject *> & partOccs /** Array of components to assign/remove projects to */,
            const std::vector<NXOpen::Session::ProjectAssignmentObjectType> & objectTypes /** currently only DE */,
            std::vector<NXString> & projectNames /** names of the projects to assign   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<NXOpen::Session::ProjectAssignmentState> & assignmentStates /** assignment states */
        );
        /** Registers a request to immediately switch to the specified application and open the corresponding user environment.
            The current application will change immediately. The argument is an application button name as specified
            and registered in a Menuscript file. For example specify UG_APP_MODELING to enter the modeling application.
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void ApplicationSwitchImmediate
        (
            const NXString & applicationName /** Button name of requested application   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Registers a request to immediately switch to the specified application and open the corresponding user environment.
            The current application will change immediately. The argument is an application button name as specified
            and registered in a Menuscript file. For example specify UG_APP_MODELING to enter the modeling application.
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        void ApplicationSwitchImmediate
        (
            const char * applicationName /** Button name of requested application   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  the name of the current application.
             
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXString ApplicationName
        (
        );
        /** Creates a data provider for a table editor.  @return  
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::TableEditorDefaultDataProvider * CreateTableEditorDefaultDataProvider
        (
            NXOpen::BasePart * part /** The part that owns the data provider. The owner is not strictly required
                                                               (that is, it can be NULL), but its use is suggested if a part exists to
                                                               ensure proper cleanup of the builder in case the client does not explicitly
                                                               clean it up properly.  */
        );
        /** Delete transient data associated with @link NXOpen::Display::DynamicSectionCut NXOpen::Display::DynamicSectionCut@endlink 
                objects in the session. One example of transient data generation is
                measurement to a dynamic section-cut. Transient section curves are
                generated in order to perform non-associative measurement. These 
                transient curves are destroyed once measurement operation is
                finished.
              @return  Indicates whether any transient data is deleted.
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: bool DeleteTransientDynamicSectionCutData
        (
        );
        /** Exits the part navigator 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void ExitPartNavigator
        (
        );
        /** Opens the part navigator 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void OpenPartNavigator
        (
        );
        /** Check if the Part Navigator is open or close  @return  true if Part Navigator is open false if close
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsPartNavigatorOpen
        (
        );


        /** Returns the @link NXOpen::CAE::AfuManager NXOpen::CAE::AfuManager@endlink  belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::CAE::AfuManager *AfuManager();
        /** Returns the @link NXOpen::DexManager NXOpen::DexManager@endlink  belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::DexManager *DexManager();
        /** Returns the @link NXOpen::PvtransManager NXOpen::PvtransManager@endlink  belonging to this session 
         <br>  Created in NX8.5.0.  <br>  
        */
        public: NXOpen::PvtransManager *PvtransManager();
        /** Returns the @link NXOpen::CAE::FTK::FTKManager NXOpen::CAE::FTK::FTKManager@endlink  belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::CAE::FTK::FTKManager *FTKManager();
        /** Returns the @link NXOpen::CAE::Post NXOpen::CAE::Post@endlink  belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::CAE::Post *Post();
        /** Returns the @link NXOpen::CAE::ResultManager NXOpen::CAE::ResultManager@endlink  belonging to this session 
         <br>  Created in NX6.0.2.  <br>  
        */
        public: NXOpen::CAE::ResultManager *ResultManager();
        /** Returns the @link NXOpen::CAE::CaeSession NXOpen::CAE::CaeSession@endlink  belonging to this session 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::CAE::CaeSession *CaeSession();
        /** Returns the @link NXOpen::Update NXOpen::Update@endlink  belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Update *UpdateManager();
        /** Returns the @link NXOpen::PartCollection NXOpen::PartCollection@endlink  belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::PartCollection *Parts();
        /** Returns the @link NXOpen::Weld::CustomManager NXOpen::Weld::CustomManager@endlink  belonging to this session 
         <br>  Created in NX8.0.0.  <br>  
        */
        public: NXOpen::Weld::CustomManager *WeldCustomManager();
        /** Returns the @link NXOpen::Validate::ValidationManager NXOpen::Validate::ValidationManager@endlink  belonging to this session 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::Validate::ValidationManager *ValidationManager();
        /** Returns the @link NXOpen::ListingWindow NXOpen::ListingWindow@endlink  belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ListingWindow *ListingWindow();
        /** Returns the @link NXOpen::DisplayManager NXOpen::DisplayManager@endlink  belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::DisplayManager *DisplayManager();
        /** Returns the @link NXOpen::MathUtils NXOpen::MathUtils@endlink  instance belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::MathUtils *MathUtils();
        /** Returns the @link NXOpen::EngineeringFunction NXOpen::EngineeringFunction@endlink  instance belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::EngineeringFunction *EngineeringFunction();
        /** Returns the @link NXOpen::Measurement NXOpen::Measurement@endlink  instance belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Measurement *Measurement();
        /** Returns the @link NXOpen::Information NXOpen::Information@endlink  instance belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Information *Information();
        /** Returns the preferences instance for the session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Preferences::SessionPreferences *Preferences();
        /** Returns the log file instance for this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::LogFile *LogFile();
        /** Returns the CAM session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::CAM::CAMSession *CAMSession();
        /** Returns the DesignRule 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Routing::DesignRuleManager *DesignRuleManager();
        /** Returns the @link NXOpen::Options::OptionsManager NXOpen::Options::OptionsManager@endlink  instance belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Options::OptionsManager *OptionsManager();
        /** Returns the @link NXOpen::LicenseManager NXOpen::LicenseManager@endlink  belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::LicenseManager *LicenseManager();
        /** Returns the @link NXOpen::UserDefinedObjects::UserDefinedClassManager NXOpen::UserDefinedObjects::UserDefinedClassManager@endlink  belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::UserDefinedObjects::UserDefinedClassManager *UserDefinedClassManager();
        /** Returns the @link NXOpen::AssembliesUtils NXOpen::AssembliesUtils@endlink  instance belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::AssembliesUtils *AssembliesUtils();
        /** Returns the @link NXOpen::DrawingUtils NXOpen::DrawingUtils@endlink  instance belonging to this session 
         <br>  Created in NX8.5.3.  <br>  
        */
        public: NXOpen::DrawingUtils *DrawingUtils();
        /** Returns the @link NXOpen::PDM::RequirementUtils NXOpen::PDM::RequirementUtils@endlink  instance belonging to this session 
         <br>  Created in NX6.0.3.  <br>  
        */
        public: NXOpen::PDM::RequirementUtils *RequirementUtils();
        /** Returns the Motion session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Motion::MotionSession *MotionSession();
        /** Returns the Motion session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Motion::MotionSimulation *MotionSimulation();
        /** Returns the @link NXOpen::PDM::PdmSearchManager NXOpen::PDM::PdmSearchManager@endlink  instance belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::PDM::PdmSearchManager *PdmSearchManager();
        /** Returns the @link NXOpen::Validate::XmlComparator NXOpen::Validate::XmlComparator@endlink  instance belonging to this session 
         <br>  Created in NX6.0.2.  <br>  
        */
        public: NXOpen::Validate::XmlComparator *XmlComparator();
        /** Returns the @link NXOpen::CAE::FTK::DataManager NXOpen::CAE::FTK::DataManager@endlink  belonging to this session 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::CAE::FTK::DataManager *DataManager();
        /** Returns the @link NXOpen::VisualReporting::VisualReportManager NXOpen::VisualReporting::VisualReportManager@endlink  instance belonging to this session 
         <br>  Created in NX7.0.0.  <br>  
        */
        public: NXOpen::VisualReporting::VisualReportManager *VisualReportManager();
        /** Returns the @link NXOpen::CAE::Xyplot::XYPlotManager NXOpen::CAE::Xyplot::XYPlotManager@endlink  belonging to this session 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::CAE::Xyplot::XYPlotManager *XYPlotManager();
        /** Returns the @link NXOpen::PDM::PdmSession NXOpen::PDM::PdmSession@endlink  belonging to this session 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::PDM::PdmSession *PdmSession();
        /** Returns the @link NXOpen::Tooling::ToolingSession NXOpen::Tooling::ToolingSession@endlink  belonging to this session 
         <br>  Created in NX8.0.0.  <br>  
        */
        public: NXOpen::Tooling::ToolingSession *ToolingSession();
        /** Returns the @link NXOpen::Features::UserDefinedFeatureClassManager NXOpen::Features::UserDefinedFeatureClassManager@endlink  belonging to this session 
         <br>  Created in NX8.0.0.  <br>  
        */
        public: NXOpen::Features::UserDefinedFeatureClassManager *UserDefinedFeatureClassManager();
        /** Returns the @link NXOpen::Issue::IssueManager NXOpen::Issue::IssueManager@endlink  belonging to this session 
         <br>  Created in NX8.5.0.  <br>  
        */
        public: NXOpen::Issue::IssueManager *IssueManager();
        /** Returns the @link NXOpen::AttributeManager NXOpen::AttributeManager@endlink  belonging to this session 
         <br>  Created in NX8.5.0.  <br>  
        */
        public: NXOpen::AttributeManager *AttributeManager();
        /** Returns the @link NXOpen::LinkedPartManager NXOpen::LinkedPartManager@endlink  belonging to this session 
         <br>  Created in NX8.5.0.  <br>  
        */
        public: NXOpen::LinkedPartManager *LinkedPartManager();
        /** Returns the @link NXOpen::CollaborativeContentManager NXOpen::CollaborativeContentManager@endlink  belonging to this session 
         <br>  Created in NX8.5.0.  <br>  
        */
        public: NXOpen::CollaborativeContentManager *CollaborativeContentManager();
        /** Returns the @link NXOpen::Mechatronics::MechatronicsSession NXOpen::Mechatronics::MechatronicsSession@endlink  belonging to this session 
         <br>  Created in NX9.0.0.  <br>  
        */
        public: NXOpen::Mechatronics::MechatronicsSession *MechatronicsSession();
        /** Returns the @link NXOpen::PDM::ConfigurationManager NXOpen::PDM::ConfigurationManager@endlink  belonging to this session 
         <br>  Created in NX9.0.0.  <br>  
        */
        public: NXOpen::PDM::ConfigurationManager *ConfigurationManager();
        /** Returns the @link NXOpen::Gateway::BookmarkFile NXOpen::Gateway::BookmarkFile@endlink  belonging to this session 
         <br>  Created in NX10.0.0.  <br>  
        */
        public: NXOpen::Gateway::BookmarkFile *BookmarkFile();
        /** Returns the @link NXOpen::SubdivisionTaskEnvironment NXOpen::SubdivisionTaskEnvironment@endlink  belonging to this session 
         <br>  Created in NX9.0.0.  <br>  
        */
        public: NXOpen::SubdivisionTaskEnvironment *SubdivisionTaskEnvironment();
        /** Returns the @link NXOpen::Weld::WeldCpdUtils NXOpen::Weld::WeldCpdUtils@endlink  instance belonging to this session 
         <br>  Created in NX9.0.0.  <br>  
        */
        public: NXOpen::Weld::WeldCpdUtils *WeldCpdUtils();
        /** Returns the @link NXOpen::Markup::MarkupManager NXOpen::Markup::MarkupManager@endlink  instance belonging to this session 
         <br>  Created in NX10.0.0.  <br>  
        */
        public: NXOpen::Markup::MarkupManager *MarkupManager();
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
