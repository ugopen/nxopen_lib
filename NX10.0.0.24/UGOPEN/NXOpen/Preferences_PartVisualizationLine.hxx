#ifndef NXOpen_PREFERENCES_PARTVISUALIZATIONLINE_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTVISUALIZATIONLINE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartVisualizationLine.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class PartVisualizationLine;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    namespace Preferences
    {
        class PartVisualizationLineImpl;
        /** Represents the set of visualization preferences under Line tab applicable to part  <br> To obtain an instance of this class, refer to @link NXOpen::Preferences::PartPreferences  NXOpen::Preferences::PartPreferences @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  PartVisualizationLine
        {
            /** Describes whether Line Font Display type is hardware or software. */
            public: enum LineFontDisplayType
            {
                LineFontDisplayTypeSoftware/** software */ ,
                LineFontDisplayTypeHardware/** hardware */ 
            };

            private: PartVisualizationLineImpl * m_partvisualizationline_impl;
            private: NXOpen::Preferences::PartPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PartVisualizationLine(NXOpen::Preferences::PartPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PartVisualizationLine();
            /**Returns  the line font display. Controls the line font. The Hardware option uses the system graphics library to generate the 
            seven standard line fonts. Selecting hardware line fonts can improve drawing performance and reduce memory consumption. 
            The Software option generates non-solid curves with the values entered for the Dash, Space, and Symbol size. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartVisualizationLine::LineFontDisplayType LineFontDisplay
            (
            );
            /**Sets  the line font display. Controls the line font. The Hardware option uses the system graphics library to generate the 
            seven standard line fonts. Selecting hardware line fonts can improve drawing performance and reduce memory consumption. 
            The Software option generates non-solid curves with the values entered for the Dash, Space, and Symbol size. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLineFontDisplay
            (
                NXOpen::Preferences::PartVisualizationLine::LineFontDisplayType lineFontDisplay /** line font display */ 
            );
            /**Returns  the dash size. Sets the length of a segment of a dashed curve. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: double DashSize
            (
            );
            /**Sets  the dash size. Sets the length of a segment of a dashed curve. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDashSize
            (
                double lineDashSize /** line dash size */ 
            );
            /**Returns  the space size. Sets the distance between two segments of a dashed curve. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: double SpaceSize
            (
            );
            /**Sets  the space size. Sets the distance between two segments of a dashed curve. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpaceSize
            (
                double lineSpaceSize /** line space size */ 
            );
            /**Returns  the symbol size. Controls the displayed size of symbols used in software line fonts. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: double SymbolSize
            (
            );
            /**Sets  the symbol size. Controls the displayed size of symbols used in software line fonts. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSymbolSize
            (
                double lineSymbolSize /** line symbol size */ 
            );
            /**Returns  the curve tolerance. Specifies the level of detail for the current Display Mode. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: double CurveTolerance
            (
            );
            /**Sets  the curve tolerance. Specifies the level of detail for the current Display Mode. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurveTolerance
            (
                double lineCurveTolerance /** line curve tolerance */ 
            );
            /**Returns  the show widths option. If true, the object width attribute determines the displayed width of lines or curves used 
            to represent an object.If false, all curves are drawn thin, regardless of object width settings. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowWidths
            (
            );
            /**Sets  the show widths option. If true, the object width attribute determines the displayed width of lines or curves used 
            to represent an object.If false, all curves are drawn thin, regardless of object width settings. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowWidths
            (
                bool isShowWidthOn /** isshowwidthon */ 
            );
            /**Returns  the width scale option. Controls scaling of the width of lines and curves displayed in the graphics window. If set to 0.0 (the minimum value), 
                widths range from 1 to 3 pixels. If set to 1.0 (the maximum value), widths range from 1 to the maximum supported pixel width. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double WidthScale
            (
            );
            /**Sets  the width scale option. Controls scaling of the width of lines and curves displayed in the graphics window. If set to 0.0 (the minimum value), 
                widths range from 1 to 3 pixels. If set to 1.0 (the maximum value), widths range from 1 to the maximum supported pixel width. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetWidthScale
            (
                double widthScale /** width scale */ 
            );
            /** Returns the show widths and width scale options. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void GetWidthOptions
            (
                bool* showWidths /** 
                             the show widths option, which controls whether or not the 
                             object width attribute determines the displayed width of 
                             lines and curves. */,
                double* widthScale /**  
                             the width scale option, which controls scaling of the width 
                             of lines and curves displayed in the graphics window.  */
            );
            /** Modifies the show widths and width scale options. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetWidthOptions
            (
                bool showWidths /** 
                            the show widths option, which controls whether or not the 
                            object width attribute determines the displayed width of 
                            lines and curves. */,
                double widthScale /**  
                            the width scale option, which controls scaling of the width 
                            of lines and curves displayed in the graphics window.  */
            );
            /** Returns options that control width appearance in the graphics window. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetPixelWidths
            (
                std::vector<int> & pixelWidths /**
                          Array of 9 pixel widths, one for each of the 9 width settings,
                          that defines the appearance of widths in the graphics window.
                          Valid pixel widths range from 1 to 9. */
            );
            /** Modifies pixel widths used in the graphics window. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPixelWidths
            (
                const std::vector<int> & pixelWidths /**
                               Array of 9 pixel widths, one for each of the 9 width settings,
                               that defines the appearance of widths in the graphics window.
                               Valid pixel widths range from 1 to 9. */
            );
            /** Returns pixel widths used in the graphics window. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetPixelWidthOptions
            (
                bool* useWidthScale /**
                             If true, width appearance in the graphics window is controlled
                             by width scale. If false, width appearance is controlled by
                             pixel widths. */,
                double* widthScale /**
                             the width scale option, which controls scaling of widths in the
                             graphics window when useWidthScale is true. If set to 0.0 (the
                             minimum value), widths range from 1 to 3 pixels. If set to 1.0
                             (the maximum value), widths range from 1 to 9 pixels. */,
                std::vector<int> & pixelWidths /**
                             Array of 9 pixel widths, one for each of the 9 width settings,
                             that defines the appearance of widths in the graphics window
                             when useWidthScale is false. Valid pixel widths range from
                             1 to 9. */
            );
            /** Modifies options that control width appearance in the graphics window. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPixelWidthOptions
            (
                bool useWidthScale /**
                               If true, width appearance in the graphics window is controlled
                               by width scale. If false, width appearance is controlled by
                               pixel widths. */,
                double widthScale /**
                               the width scale option, which controls scaling of widths in the
                               graphics window when useWidthScale is true. If set to 0.0 (the
                               minimum value), widths range from 1 to 3 pixels. If set to 1.0
                               (the maximum value), widths range from 1 to 9 pixels. */,
                const std::vector<int> & pixelWidths /**
                               Array of 9 pixel widths, one for each of the 9 width settings,
                               that defines the appearance of widths in the graphics window
                               when useWidthScale is false. Valid pixel widths range from
                               1 to 9. */
            );
            /** Resets all pixel width options to settings specified by customer
                defaults. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void ResetPixelWidthOptions
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
