#ifndef NXOpen_WELD_WELDGROOVEBUILDER_HXX_INCLUDED
#define NXOpen_WELD_WELDGROOVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_WeldGrooveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/Weld_CharacteristicsBuilder.hxx>
#include <NXOpen/Weld_WeldGrooveBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_weld_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Weld
    {
        class WeldGrooveBuilder;
    }
    class Expression;
    class Face;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    class ScCollector;
    class Section;
    namespace Weld
    {
        class CharacteristicsBuilder;
    }
    namespace Weld
    {
        class _WeldGrooveBuilderBuilder;
        class WeldGrooveBuilderImpl;
        /** Represents a @link NXOpen::Weld::WeldGroove NXOpen::Weld::WeldGroove@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Weld::WeldManager::CreateWeldGroove1Builder  NXOpen::Weld::WeldManager::CreateWeldGroove1Builder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AssignWeldPMI </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ContourHeight.Value </td> <td> 
         
        3.0 (millimeters part), 0.118 (inches part) </td> </tr> 

        <tr><td> 
         
        ContourType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        CreateSkipWelds </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        EdgeType </td> <td> 
         
        NotPrepared </td> </tr> 

        <tr><td> 
         
        EndAngle.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        GrooveAngle.Value </td> <td> 
         
        45.0 </td> </tr> 

        <tr><td> 
         
        GrooveRadius.Value </td> <td> 
         
        1.0 (millimeters part), 0.04 (inches part) </td> </tr> 

        <tr><td> 
         
        IsRootOpening </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsRootPenetration </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Method </td> <td> 
         
        NumberLength </td> </tr> 

        <tr><td> 
         
        NumberOfWelds.Value </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        PenetrationDepth.Value </td> <td> 
         
        3.0 (millimeters part), 0.118 (inches part) </td> </tr> 

        <tr><td> 
         
        PrepareEdges </td> <td> 
         
        EntireLength </td> </tr> 

        <tr><td> 
         
        RecreateDeletedWelds </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RootOpening.Value </td> <td> 
         
        3.0 (millimeters part), 0.118 (inches part) </td> </tr> 

        <tr><td> 
         
        RootPenetration.Value </td> <td> 
         
        3.0 (millimeters part), 0.118 (inches part) </td> </tr> 

        <tr><td> 
         
        SecondPenetrationDepth.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        SegmentLength.Value </td> <td> 
         
        3.0 (millimeters part), 0.118 (inches part) </td> </tr> 

        <tr><td> 
         
        SingleFaceSet </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Spacing.Value </td> <td> 
         
        3.0 (millimeters part), 0.118 (inches part) </td> </tr> 

        <tr><td> 
         
        StartAngle.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TaperMethod </td> <td> 
         
        FromTopFace </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        SquareButt </td> </tr> 

        <tr><td> 
         
        UseFillin </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        WeldSymmetric </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_WELDEXPORT  WeldGrooveBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** The types of Groove to create */
            public: enum Types
            {
                TypesSquareButt/** Square Butt              */,
                TypesVGroove/** V Groove                 */,
                TypesBevelGroove/** Bevel Groove             */,
                TypesUGroove/** U Groove                 */,
                TypesJGroove/** J Groove                 */,
                TypesFlaredVGroove/** Flared V Groove          */,
                TypesFlaredBevelGroove/** Flared Bevel Groove      */,
                TypesFillinFlaredVGroove/** fillin flared vgroove */ ,
                TypesFillinFlaredBevelGroove/** Fillin Flared Bevel Groove*/
            };

            /** The options for Contour Type */
            public: enum Contour
            {
                ContourNone/** None   */,
                ContourConvex/** Convex */,
                ContourFlush/** Flush  */,
                ContourConcave/** concave */ 
            };

            /** The options for creating Skip Weld  */
            public: enum SkipWeldMethod
            {
                SkipWeldMethodNumberLength/** Number and Length  */,
                SkipWeldMethodNumberSpacing/** Number and Spacing */,
                SkipWeldMethodSpacingLength/** Spacing and Length */
            };

            /** A value indicating whether the edges have been prepared  */
            public: enum Edge
            {
                EdgeNotPrepared/** Not Prepared */,
                EdgePrepared/** Prepared */
            };

            /** The type of edges to be prepared */
            public: enum Prepare
            {
                PrepareNone/** None */,
                PrepareEntireLength/** Entire Length */,
                PrepareWeldLimits/** Weld Limits */,
                PrepareComplex/** Complex */
            };

            /** The type of Taper Method */
            public: enum Taper
            {
                TaperFromEndFace/** From End Face */,
                TaperFromTopFace/** From Top Face */
            };

            private: WeldGrooveBuilderImpl * m_weldgroovebuilder_impl;
            private: friend class  _WeldGrooveBuilderBuilder;
            protected: WeldGrooveBuilder();
            public: ~WeldGrooveBuilder();
            /**Returns  the type of the groove 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldGrooveBuilder::Types Type
            (
            );
            /**Sets  the type of the groove 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetType
            (
                NXOpen::Weld::WeldGrooveBuilder::Types type /** type */ 
            );
            /**Returns  the face set1 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::ScCollector * FaceSet1
            (
            );
            /**Returns  the face set2 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::ScCollector * FaceSet2
            (
            );
            /**Returns  the first edge set 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Section * EdgeSet1
            (
            );
            /**Returns  the second edge set 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Section * EdgeSet2
            (
            );
            /**Returns  the contour type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldGrooveBuilder::Contour ContourType
            (
            );
            /**Sets  the contour type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetContourType
            (
                NXOpen::Weld::WeldGrooveBuilder::Contour contour /** contour */ 
            );
            /**Returns  a value indicating whether root opening is true  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool IsRootOpening
            (
            );
            /**Sets  a value indicating whether root opening is true  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetRootOpening
            (
                bool isRootOpening /** isrootopening */ 
            );
            /**Returns  a value indicating whether root depth is true  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool IsRootPenetration
            (
            );
            /**Sets  a value indicating whether root depth is true  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetRootPenetration
            (
                bool isRootPenetration /** isrootpenetration */ 
            );
            /**Returns  the root opening 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * RootOpening
            (
            );
            /**Returns  the root penetration 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * RootPenetration
            (
            );
            /**Returns  the contour height 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * ContourHeight
            (
            );
            /**Returns  the groove angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * GrooveAngle
            (
            );
            /**Returns  the groove radius 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * GrooveRadius
            (
            );
            /**Returns  the penetration depth 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * PenetrationDepth
            (
            );
            /**Returns  a value indicating whether the second depth is the same as the first depth  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool WeldSymmetric
            (
            );
            /**Sets  a value indicating whether the second depth is the same as the first depth  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetWeldSymmetric
            (
                bool weldSymmetric /** weldsymmetric */ 
            );
            /**Returns  the second penetration depth 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * SecondPenetrationDepth
            (
            );
            /**Returns  the start limit as defined by the distance along the edge  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * StartDistance
            (
            );
            /**Returns  the taper angle at the start of the weld 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * StartAngle
            (
            );
            /**Returns  the end limit as defined by the distance along the edge  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * EndDistance
            (
            );
            /**Returns  the taper angle at the end of the weld 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * EndAngle
            (
            );
            /**Returns  a value indicating whether to create skip welds   
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool CreateSkipWelds
            (
            );
            /**Sets  a value indicating whether to create skip welds   
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetCreateSkipWelds
            (
                bool createSkipWelds /** createskipwelds */ 
            );
            /**Returns  a value indicating whether to recreate deleted welds  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool RecreateDeletedWelds
            (
            );
            /**Sets  a value indicating whether to recreate deleted welds  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetRecreateDeletedWelds
            (
                bool recreateDeletedWelds /** recreatedeletedwelds */ 
            );
            /**Returns  the method for creating skip welds 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldGrooveBuilder::SkipWeldMethod Method
            (
            );
            /**Sets  the method for creating skip welds 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetMethod
            (
                NXOpen::Weld::WeldGrooveBuilder::SkipWeldMethod method /** method */ 
            );
            /**Returns  the number of welds 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * NumberOfWelds
            (
            );
            /**Returns  the length of weld 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * SegmentLength
            (
            );
            /**Returns  the spacing between welds 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Expression * Spacing
            (
            );
            /**Returns  the characteristics 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::CharacteristicsBuilder * Characteristics
            (
            );
            /**Returns  a value indicating whether to use fillin 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool UseFillin
            (
            );
            /**Sets  a value indicating whether to use fillin 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetUseFillin
            (
                bool useFillin /** usefillin */ 
            );
            /**Returns  the edge type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldGrooveBuilder::Edge EdgeType
            (
            );
            /**Sets  the edge type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetEdgeType
            (
                NXOpen::Weld::WeldGrooveBuilder::Edge edgeType /** edgetype */ 
            );
            /**Returns  the type of edges to prepare 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldGrooveBuilder::Prepare PrepareEdges
            (
            );
            /**Sets  the type of edges to prepare 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetPrepareEdges
            (
                NXOpen::Weld::WeldGrooveBuilder::Prepare prepareEdges /** prepareedges */ 
            );
            /**Returns  the taper method 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldGrooveBuilder::Taper TaperMethod
            (
            );
            /**Sets  the taper method 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetTaperMethod
            (
                NXOpen::Weld::WeldGrooveBuilder::Taper taperMethod /** tapermethod */ 
            );
            /**Returns  the distance tolerance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  a value indicating whether the single face set is true  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool SingleFaceSet
            (
            );
            /**Sets  a value indicating whether the single face set is true  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSingleFaceSet
            (
                bool singleFaceSet /** singlefaceset */ 
            );
            /**Returns  a value indicating whether the assign weld pmi is true  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: bool AssignWeldPMI
            (
            );
            /**Sets  a value indicating whether the assign weld pmi is true  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetAssignWeldPMI
            (
                bool assignWeldPMI /** assignweldpmi */ 
            );
            /**Returns  the first seed face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Face * SeedFace1
            (
            );
            /**Sets  the first seed face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSeedFace1
            (
                NXOpen::Face * seedFace1 /** seedface1 */ 
            );
            /**Returns  the point on the first face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Point3d SeedPoint1
            (
            );
            /**Sets  the point on the first face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSeedPoint1
            (
                const NXOpen::Point3d & seedPoint1 /** seedpoint1 */ 
            );
            /**Returns  the second seed face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Face * SeedFace2
            (
            );
            /**Sets  the second seed face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSeedFace2
            (
                NXOpen::Face * seedFace2 /** seedface2 */ 
            );
            /**Returns  the point on the second face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Point3d SeedPoint2
            (
            );
            /**Sets  the point on the second face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetSeedPoint2
            (
                const NXOpen::Point3d & seedPoint1 /** seedpoint1 */ 
            );
            /**Returns  the u parameter for first face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double Uparameter1
            (
            );
            /**Sets  the u parameter for first face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetUparameter1
            (
                double u1 /** u1 */ 
            );
            /**Returns  the v parameter for first face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double Vparameter1
            (
            );
            /**Sets  the v parameter for first face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetVparameter1
            (
                double v1 /** v1 */ 
            );
            /**Returns  the u parameter for second face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double Uparameter2
            (
            );
            /**Sets  the u parameter for second face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetUparameter2
            (
                double u2 /** u2 */ 
            );
            /**Returns  the v parameter for second face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: double Vparameter2
            (
            );
            /**Sets  the v parameter for second face 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void SetVparameter2
            (
                double v2 /** v2 */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
