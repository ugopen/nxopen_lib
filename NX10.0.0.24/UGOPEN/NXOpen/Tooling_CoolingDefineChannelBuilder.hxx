#ifndef NXOpen_TOOLING_COOLINGDEFINECHANNELBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_COOLINGDEFINECHANNELBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_CoolingDefineChannelBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_ModlMotion.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_CoolingDefineChannelBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class CoolingDefineChannelBuilder;
    }
    class Body;
    class Builder;
    class Expression;
    namespace GeometricUtilities
    {
        class ModlMotion;
    }
    class Point;
    class SelectBody;
    namespace Tooling
    {
        class _CoolingDefineChannelBuilderBuilder;
        class CoolingDefineChannelBuilderImpl;
        /**The builder class for Cooling Define Channel which assists you
               to create channels directly. <br> To create a new instance of this class, use @link NXOpen::Tooling::CoolingDefineChannelCollection::CreateCoolingDefineChannelBuilder  NXOpen::Tooling::CoolingDefineChannelCollection::CreateCoolingDefineChannelBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AdjustBoundaryChannel </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Diameter.Value </td> <td> 
         
        10 (millimeters part), 0.375 (inches part) </td> </tr> 

        <tr><td> 
         
        ExtensionSolution </td> <td> 
         
        NoExtension </td> </tr> 

        <tr><td> 
         
        Motion.DeltaEnum </td> <td> 
         
        ReferenceWcsWorkPart </td> </tr> 

        <tr><td> 
         
        Motion.DeltaXc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Motion.DeltaYc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Motion.DeltaZc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        TipAngle.Value </td> <td> 
         
        118 </td> </tr> 

        <tr><td> 
         
        TipEndType </td> <td> 
         
        None </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  CoolingDefineChannelBuilder : public NXOpen::Builder
        {
            /** Types to specify how to assign attributes to the created body. */
            public: enum Types
            {
                TypesChannel/** channel */ ,
                TypesBaffle/** baffle */ 
            };

            /** The extension types of channel*/
            public: enum ExtensionTypes
            {
                ExtensionTypesNoExtension/**No extension*/,
                ExtensionTypesAlongExtrusionDirection/**Extend channel to boundary body along the extrusion direction*/,
                ExtensionTypesAlongReverseExtrusionDirection/**Extend channel to boundary body along the reverse extrusion direction*/,
                ExtensionTypesAlongBothDirections/**Extend channel to boundary body along both direction*/
            };

            /** The tip end types of channel*/
            public: enum TipEndTypes
            {
                TipEndTypesNone/**No tip angle*/,
                TipEndTypesAngle/**Angle tip*/,
                TipEndTypesRound/**Round tip*/
            };

            private: CoolingDefineChannelBuilderImpl * m_coolingdefinechannelbuilder_impl;
            private: friend class  _CoolingDefineChannelBuilderBuilder;
            protected: CoolingDefineChannelBuilder();
            public: ~CoolingDefineChannelBuilder();
            /**Returns  the type of attributes assigned to the created body attribute type values. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CoolingDefineChannelBuilder::Types Type
            (
            );
            /**Sets  the type of attributes assigned to the created body attribute type values. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetType
            (
                NXOpen::Tooling::CoolingDefineChannelBuilder::Types type /** type */ 
            );
            /**Returns  the point as the start position of the channel. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * StartPoint
            (
            );
            /**Sets  the point as the start position of the channel. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetStartPoint
            (
                NXOpen::Point * startPoint /** startpoint */ 
            );
            /**Returns  the boundary body 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * LimitBody
            (
            );
            /**Returns  the object which defines the transformation from start point to end point. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlMotion * Motion
            (
            );
            /**Returns  the candidate extension types 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CoolingDefineChannelBuilder::ExtensionTypes ExtensionSolution
            (
            );
            /**Sets  the candidate extension types 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetExtensionSolution
            (
                NXOpen::Tooling::CoolingDefineChannelBuilder::ExtensionTypes extensionSolution /** extensionsolution */ 
            );
            /**Returns  the flag to indicate whether to extend boundary channel or not 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool AdjustBoundaryChannel
            (
            );
            /**Sets  the flag to indicate whether to extend boundary channel or not 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetAdjustBoundaryChannel
            (
                bool adjustBoundaryChannel /** adjustboundarychannel */ 
            );
            /**Returns  the candidate of tip end type
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CoolingDefineChannelBuilder::TipEndTypes TipEndType
            (
            );
            /**Sets  the candidate of tip end type
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetTipEndType
            (
                NXOpen::Tooling::CoolingDefineChannelBuilder::TipEndTypes tipEndType /** tipendtype */ 
            );
            /**Returns  the value for the tip angle of the channel. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TipAngle
            (
            );
            /**Returns  the channel diameter 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Diameter
            (
            );
            /**Returns  the channel diameter 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double ChannelDiameter
            (
            );
            /**Sets  the channel diameter 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetChannelDiameter
            (
                double channelDiameter /** channeldiameter */ 
            );
            /** Sets the boundary body to do channel extension 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBoundaryBody
            (
                NXOpen::Body * body /** the body set as boundary body*/
            );
            /** Gets the boundary body automatically
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void AutoGetBoundaryBody
            (
            );
            /** Sets the value that whether the boundary body is automatically got or not
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetAutoSelectBoundary
            (
                bool autoSelectBoundary /** autoselectboundary */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
