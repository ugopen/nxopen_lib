#ifndef NXOpen_DIE_TRIMLINEDEVELOPMENTBUILDER_HXX_INCLUDED
#define NXOpen_DIE_TRIMLINEDEVELOPMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_TrimLineDevelopmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DieLimitsBuilder.hxx>
#include <NXOpen/Die_TrimLineDevelopmentBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class TrimLineDevelopmentBuilder;
    }
    namespace Die
    {
        class DieLimitsBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    class ScCollector;
    class Section;
    namespace Die
    {
        class _TrimLineDevelopmentBuilderBuilder;
        class TrimLineDevelopmentBuilderImpl;
        /**
            Represents a @link NXOpen::Features::TrimLineDevelopment NXOpen::Features::TrimLineDevelopment@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Die::DieCollection::CreateTrimLineDevelopmentBuilder  NXOpen::Die::DieCollection::CreateTrimLineDevelopmentBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  TrimLineDevelopmentBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Indicates which trim curves to output */
            public: enum OutputMethodName
            {
                OutputMethodNameGeometric/** Geometric curve only */,
                OutputMethodNameCorrected/** Corrected curve only */,
                OutputMethodNameBoth/** Both geometric and corrected curves */
            };

            /** Indicates type of curve smoothing  */
            public: enum SmoothingName
            {
                SmoothingNameLinear/** Linear (no smoothing) */,
                SmoothingNameCubic/** Cubic approximation */,
                SmoothingNameQuintic/** Quintic approximation */
            };

            /** Indicates type of material */
            public: enum MaterialTypeName
            {
                MaterialTypeNameSteel/** Steel */,
                MaterialTypeNameAluminum/** Aluminum */
            };

            /** The 2-D mesh element type of onestep unform. */
            public: enum MeshElement
            {
                MeshElementTriangle/**Generate 2D triangle mesh element*/,
                MeshElementQuadrate/**Generate 2D quadrate mesh element*/
            };

            /** The solver convergency level of onestep unform. */
            public: enum Convergency
            {
                ConvergencyLow/**Onestep solver convergency level is low*/,
                ConvergencyMedium/**Onestep solver convergency level is medium*/,
                ConvergencyHigh/**Onestep solver convergency level is high*/
            };

            /** The surface types of onestep unform. */
            public: enum Surface
            {
                SurfaceInner/**Onestep solver will offset inner surface and enlarge it*/,
                SurfaceMiddle/**Onestep solver will not offset middle surface */,
                SurfaceOuter/**Onestep solver will offset outer surface and shrink it */
            };

            private: TrimLineDevelopmentBuilderImpl * m_trimlinedevelopmentbuilder_impl;
            private: friend class  _TrimLineDevelopmentBuilderBuilder;
            protected: TrimLineDevelopmentBuilder();
            public: ~TrimLineDevelopmentBuilder();
            /**Returns  the collection of formed faces 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * Faces
            (
            );
            /**Returns  the forming boundary 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FormingBoundary
            (
            );
            /**Returns  the collection of addendum faces 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * Addendum
            (
            );
            /**Returns  the collection of constraint curve from unform region 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * ConstraintCurveFromUnformRegion
            (
            );
            /**Returns  the collection of constraint curve from target region 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * ConstraintCurveFromTargetRegion
            (
            );
            /**Returns  the point in product region 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * RegionPoint
            (
            );
            /**Sets  the point in product region 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRegionPoint
            (
                NXOpen::Point * regionPoint /** regionpoint */ 
            );
            /**Returns  the first limit point 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * LimitPoint1
            (
            );
            /**Sets  the first limit point 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetLimitPoint1
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the last limit point 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * LimitPoint2
            (
            );
            /**Sets  the last limit point 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetLimitPoint2
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the draw direction.  Also points in the direction of material side of metal 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DrawDirection
            (
            );
            /**Sets  the draw direction.  Also points in the direction of material side of metal 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDrawDirection
            (
                NXOpen::Direction * punchDirection /** punchdirection */ 
            );
            /** Creates a default draw vector by finding the least squares plane of the formed faces 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DefaultDraw
            (
            );
            /**Returns  the spine string, which determines the orientation of the sample planes 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * Spine
            (
            );
            /** Creates a smoothed spine curve from the forming boundary using the spine radius value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateDefaultSpine
            (
            );
            /**Returns  the spine radius, used by @link NXOpen::Die::TrimLineDevelopmentBuilder::CreateDefaultSpine NXOpen::Die::TrimLineDevelopmentBuilder::CreateDefaultSpine@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double SpineRadius
            (
            );
            /**Sets  the spine radius, used by @link NXOpen::Die::TrimLineDevelopmentBuilder::CreateDefaultSpine NXOpen::Die::TrimLineDevelopmentBuilder::CreateDefaultSpine@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSpineRadius
            (
                double spineRadius /** spineradius */ 
            );
            /**Returns  the curve output method - geometric, corrected or both 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::TrimLineDevelopmentBuilder::OutputMethodName OutputMethod
            (
            );
            /**Sets  the curve output method - geometric, corrected or both 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOutputMethod
            (
                NXOpen::Die::TrimLineDevelopmentBuilder::OutputMethodName outputMethod /** outputmethod */ 
            );
            /**Returns  the curve smoothing method - linear (none), cubic or quintic 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::TrimLineDevelopmentBuilder::SmoothingName Smoothing
            (
            );
            /**Sets  the curve smoothing method - linear (none), cubic or quintic 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSmoothing
            (
                NXOpen::Die::TrimLineDevelopmentBuilder::SmoothingName smoothing /** smoothing */ 
            );
            /**Returns  the sample density index which controls the density of the sample planes.  Value should be between 1 and 9 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int SampleDensityIndex
            (
            );
            /**Sets  the sample density index which controls the density of the sample planes.  Value should be between 1 and 9 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSampleDensityIndex
            (
                int sampleDensityIndex /** sampledensityindex */ 
            );
            /**Returns  the material type - steel or aluminum 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::TrimLineDevelopmentBuilder::MaterialTypeName MaterialType
            (
            );
            /**Sets  the material type - steel or aluminum 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialType
            (
                NXOpen::Die::TrimLineDevelopmentBuilder::MaterialTypeName materialType /** materialtype */ 
            );
            /**Returns  the material thickness.  Value should be greater than zero. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Thickness
            (
            );
            /**Returns  the bend allowance formula.  Value should be between 0 and 1 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BendAllowance
            (
            );
            /**Returns  the remove loops setting.  True indicates loops should be removed from the output curves 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool RemoveLoops
            (
            );
            /**Sets  the remove loops setting.  True indicates loops should be removed from the output curves 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRemoveLoops
            (
                bool removeLoops /** removeloops */ 
            );
            /**Returns  the associative switch.  True indicates a feature should be output 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative switch.  True indicates a feature should be output 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the distance tolerance.  Used for sewing sheet bodies and joining curves 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance.  Used for sewing sheet bodies and joining curves 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDistanceTolerance
            (
                double distTol /** disttol */ 
            );
            /**Returns  the limits to control the span of the addendum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieLimitsBuilder * Limits
            (
            );
            /** Create FEM 2-D meshes based on the unform region surfaces and the target region surfaces.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void Mesh
            (
            );
            /** Starts solver to calculate. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void Calculation
            (
            );
            /**Returns  the material property elasticity(E) which enables a material to return to its original shape and dimension. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyE
            (
            );
            /**Returns  the surface type used to determine offset direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::TrimLineDevelopmentBuilder::Surface SurfaceType
            (
            );
            /**Sets  the surface type used to determine offset direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSurfaceType
            (
                NXOpen::Die::TrimLineDevelopmentBuilder::Surface surfaceType /** surfacetype */ 
            );
            /**Returns  the option to infer thickness.
                    If it is true, the thickness will be auto-detected. If it is false, thickness will be required to input.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool InferThickness
            (
            );
            /**Sets  the option to infer thickness.
                    If it is true, the thickness will be auto-detected. If it is false, thickness will be required to input.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetInferThickness
            (
                bool inferThickness /** inferthickness */ 
            );
            /**Returns  the thickness of sheet metal model. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double SheetThickness
            (
            );
            /**Sets  the thickness of sheet metal model. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSheetThickness
            (
                double thickness /** thickness */ 
            );
            /**Sets  the material property elasticity(E) which enables a material to return to its original shape and dimension. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialPropertyE
            (
                double materialPropertyE /** materialpropertye */ 
            );
            /**Returns  the density of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyDensity
            (
            );
            /**Sets  the density of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialPropertyDensity
            (
                double materialPropertyDensity /** materialpropertydensity */ 
            );
            /**Returns  the material Poisson's ratio between the contraction at right angles to a stress and the direct extension. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyPoisson
            (
            );
            /**Sets  the material Poisson's ratio between the contraction at right angles to a stress and the direct extension. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialPropertyPoisson
            (
                double materialPropertyPoisson /** materialpropertypoisson */ 
            );
            /**Returns  the yield stress of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyYieldStress
            (
            );
            /**Sets  the yield stress of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialPropertyYieldStress
            (
                double materialPropertyYieldStress /** materialpropertyyieldstress */ 
            );
            /**Returns  the  material n(Hardening Exponent) to represent the constant index used in calculations for stress-strain behaviour. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyN
            (
            );
            /**Sets  the  material n(Hardening Exponent) to represent the constant index used in calculations for stress-strain behaviour. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialPropertyN
            (
                double materialPropertyN /** materialpropertyn */ 
            );
            /**Returns  the material initial strain to represent in a material upon achieving the given loading conditions in a relaxation or creep test. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyInitialStrain
            (
            );
            /**Sets  the material initial strain to represent in a material upon achieving the given loading conditions in a relaxation or creep test. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialPropertyInitialStrain
            (
                double materialPropertyInitialStrain /** materialpropertyinitialstrain */ 
            );
            /**Returns  the friction of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyF
            (
            );
            /**Sets  the friction of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialPropertyF
            (
                double materialPropertyF /** materialpropertyf */ 
            );
            /**Returns  the K(Strength Coefficient) of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyK
            (
            );
            /**Sets  the K(Strength Coefficient) of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialPropertyK
            (
                double materialPropertyK /** materialpropertyk */ 
            );
            /**Returns  the r0(Anisotropy Coefficient) of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyR0
            (
            );
            /**Sets  the r0(Anisotropy Coefficient) of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialPropertyR0
            (
                double materialPropertyR0 /** materialpropertyr0 */ 
            );
            /**Returns  the r45(Anisotropy Coefficient) of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyR45
            (
            );
            /**Sets  the r45(Anisotropy Coefficient) of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialPropertyR45
            (
                double materialPropertyR45 /** materialpropertyr45 */ 
            );
            /**Returns  the r90(Anisotropy Coefficient) of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyR90
            (
            );
            /**Sets  the r90(Anisotropy Coefficient) of material. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaterialPropertyR90
            (
                double materialPropertyR90 /** materialpropertyr90 */ 
            );
            /**Returns  the 2-D mesh element type, either triangle or quadrate element.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::TrimLineDevelopmentBuilder::MeshElement MeshElementType
            (
            );
            /**Sets  the 2-D mesh element type, either triangle or quadrate element.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMeshElementType
            (
                NXOpen::Die::TrimLineDevelopmentBuilder::MeshElement meshElementType /** meshelementtype */ 
            );
            /**Returns  the option to indicate whether or not to unform the profile to the other side on the target body. 
                     This option is appliable only in case the following conditions are all satisfied: entire unform to seperate target body, Curve to Curve constraint on inner edges.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseSide
            (
            );
            /**Sets  the option to indicate whether or not to unform the profile to the other side on the target body. 
                     This option is appliable only in case the following conditions are all satisfied: entire unform to seperate target body, Curve to Curve constraint on inner edges.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetReverseSide
            (
                bool reverseSide /** reverseside */ 
            );
            /**Returns  the option to infer 2-D element size. 
                    If it is true, the element size will be auto-detected. If it is false, the element size will be required as input. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool InferElementSize
            (
            );
            /**Sets  the option to infer 2-D element size. 
                    If it is true, the element size will be auto-detected. If it is false, the element size will be required as input. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetInferElementSize
            (
                bool inforElementSize /** inforelementsize */ 
            );
            /**Returns  the 2-D element size for mesh. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MeshElementSize
            (
            );
            /**Sets  the 2-D element size for mesh. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMeshElementSize
            (
                double meshElementSize /** meshelementsize */ 
            );
            /**Returns  the option to split quadrate element to triangle element when creating meshes. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool MeshSplitQuad
            (
            );
            /**Sets  the option to split quadrate element to triangle element when creating meshes. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMeshSplitQuad
            (
                bool meshSplitQuad /** meshsplitquad */ 
            );
            /**Returns  the maximum warp for meshing. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MeshMaxWarp
            (
            );
            /**Sets  the maximum warp for meshing. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMeshMaxWarp
            (
                double meshMaxWarp /** meshmaxwarp */ 
            );
            /**Returns  the maximum Jacobian for mesh elements. It is used to control the element shape and quality. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MeshMaxJacobian
            (
            );
            /**Sets  the maximum Jacobian for mesh elements. It is used to control the element shape and quality. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMeshMaxJacobian
            (
                double meshMaxJacobian /** meshmaxjacobian */ 
            );
            /**Returns  the option to attemp mapping for mesh elements. 
                    If it is true, mesh element nodes will be mapped to the orginal surface to ensure the accuracy. if it is false, it will not do mapping. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool MeshAttemptMapping
            (
            );
            /**Sets  the option to attemp mapping for mesh elements. 
                    If it is true, mesh element nodes will be mapped to the orginal surface to ensure the accuracy. if it is false, it will not do mapping. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMeshAttemptMapping
            (
                bool meshAttemptMapping /** meshattemptmapping */ 
            );
            /**Returns  the variation of mesh element size. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int MeshSizeVariation
            (
            );
            /**Sets  the variation of mesh element size. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMeshSizeVariation
            (
                int meshSizeVariation /** meshsizevariation */ 
            );
            /**Returns  the option to process fillet for mesh element.
                    If it is true, the small fillet area will be specially processed when generate mesh element. If it is false, it will be not specially processed. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool MeshProcessFillet
            (
            );
            /**Sets  the option to process fillet for mesh element.
                    If it is true, the small fillet area will be specially processed when generate mesh element. If it is false, it will be not specially processed. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMeshProcessFillet
            (
                bool meshProcessFillet /** meshprocessfillet */ 
            );
            /**Returns  the value of small feature for mesh setting
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MeshSmallFeature
            (
            );
            /**Sets  the value of small feature for mesh setting
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMeshSmallFeature
            (
                double meshSmallFeature /** meshsmallfeature */ 
            );
            /**Returns  the convergency level of onestep solver. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::TrimLineDevelopmentBuilder::Convergency SolverConvergencyLevel
            (
            );
            /**Sets  the convergency level of onestep solver. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSolverConvergencyLevel
            (
                NXOpen::Die::TrimLineDevelopmentBuilder::Convergency solverConvergencyLevel /** solverconvergencylevel */ 
            );
            /**Returns the maximum number of iteration steps in onestep solver. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int SolverMaxIterationSteps
            (
            );
            /**Sets the maximum number of iteration steps in onestep solver. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSolverMaxIterationSteps
            (
                int solverMaxIterationSteps /** solvermaxiterationsteps */ 
            );
            /**Returns  the option to save analysis result into feature.
                    If it is true, save analysis result into feature. If it is false, do not save analysis result into feature.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool SolverSaveAnalysisResultsIntoFeature
            (
            );
            /**Sets  the option to save analysis result into feature.
                    If it is true, save analysis result into feature. If it is false, do not save analysis result into feature.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSolverSaveAnalysisResultsIntoFeature
            (
                bool solverSaveAnalysisResultsIntoFeature /** solversaveanalysisresultsintofeature */ 
            );
            /**Returns  the option to join output curves.
                    If it is true, join output curves. If it is false, do not join output curves
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool SolverJoinOutputCurves
            (
            );
            /**Sets  the option to join output curves.
                    If it is true, join output curves. If it is false, do not join output curves
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSolverJoinOutputCurves
            (
                bool solverJoinOutputCurves /** solverjoinoutputcurves */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
