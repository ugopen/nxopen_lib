#ifndef NXOpen_GATEWAY_BOOKMARKFILE_HXX_INCLUDED
#define NXOpen_GATEWAY_BOOKMARKFILE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Gateway_BookmarkFile.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_gateway_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Gateway
    {
        class BookmarkFile;
    }
    class Session;
    namespace Gateway
    {
        class BookmarkFileImpl;
        /** Represents operations which can be done on bookmark files.
             <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_GATEWAYEXPORT  BookmarkFile
        {
            private: BookmarkFileImpl * m_bookmarkfile_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit BookmarkFile(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~BookmarkFile();
            /** Creates a bookmark file including a description.
                        See @link BasePart::BookmarkOption BasePart::BookmarkOption@endlink  for an explanation of the options
                        which are not supported in batch mode.  Also in batch mode, the description is not
                        written to the bookmark file. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveWithDescription
            (
                const NXString & pathName /** Full path name of bookmark file. */,
                NXOpen::BasePart::BookmarkOption bookmarkOption /** See definitions of @link NXOpen::BasePart::BookmarkOption NXOpen::BasePart::BookmarkOption@endlink  */,
                const NXString & description /** A text string to be stored in the bookmark file */
            );
            /** Creates a bookmark file including a description.
                        See @link BasePart::BookmarkOption BasePart::BookmarkOption@endlink  for an explanation of the options
                        which are not supported in batch mode.  Also in batch mode, the description is not
                        written to the bookmark file. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            void SaveWithDescription
            (
                const char * pathName /** Full path name of bookmark file. */,
                NXOpen::BasePart::BookmarkOption bookmarkOption /** See definitions of @link NXOpen::BasePart::BookmarkOption NXOpen::BasePart::BookmarkOption@endlink  */,
                const char * description /** A text string to be stored in the bookmark file */
            );
            /** Renames an existing bookmark file.  @return  Full path name to the renamed bookmark file.
                                                                     This text string must be freed by the
                                                                     caller. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Rename
            (
                const NXString & oldPathName /** Full path name of existing bookmark file. */,
                const NXString & newFileName /** New name to assign to the bookmark file.
                                                                         This will replace the basic name in
                                                                         the oldPathname. */,
                bool okToOverwriteExistingFile /** Is it okay to overwrite an existing file
                                                                         with the same name as oldPathName plus
                                                                         newFileName? */
            );
            /** Renames an existing bookmark file.  @return  Full path name to the renamed bookmark file.
                                                                     This text string must be freed by the
                                                                     caller. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            NXString Rename
            (
                const char * oldPathName /** Full path name of existing bookmark file. */,
                const char * newFileName /** New name to assign to the bookmark file.
                                                                         This will replace the basic name in
                                                                         the oldPathname. */,
                bool okToOverwriteExistingFile /** Is it okay to overwrite an existing file
                                                                         with the same name as oldPathName plus
                                                                         newFileName? */
            );
            /** Changes the description of an existing bookmark file. Otherwise the bookmark file is unchanged. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDescription
            (
                const NXString & pathName /** Full path name of an existing bookmark file. */,
                const NXString & description /** A text string to replace the current description in the bookmark file */
            );
            /** Changes the description of an existing bookmark file. Otherwise the bookmark file is unchanged. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            void SetDescription
            (
                const char * pathName /** Full path name of an existing bookmark file. */,
                const char * description /** A text string to replace the current description in the bookmark file */
            );
            /** Deletes an existing bookmark file. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void Delete
            (
                const NXString & pathName /** Full path name of existing bookmark file to delete */
            );
            /** Deletes an existing bookmark file. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            void Delete
            (
                const char * pathName /** Full path name of existing bookmark file to delete */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
