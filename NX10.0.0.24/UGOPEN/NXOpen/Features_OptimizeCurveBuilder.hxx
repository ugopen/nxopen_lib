#ifndef NXOpen_FEATURES_OPTIMIZECURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_OPTIMIZECURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_OptimizeCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_OptimizeCurveBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class OptimizeCurveBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class SelectDisplayableObjectList;
    namespace Features
    {
        class _OptimizeCurveBuilderBuilder;
        class OptimizeCurveBuilderImpl;
        /** Represents a builder of optimize curve <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateOptimizeCurveBuilder  NXOpen::Features::FeatureCollection::CreateOptimizeCurveBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CreateSketch </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IncludePoints </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  OptimizeCurveBuilder : public NXOpen::Builder
        {
            private: OptimizeCurveBuilderImpl * m_optimizecurvebuilder_impl;
            private: friend class  _OptimizeCurveBuilderBuilder;
            protected: OptimizeCurveBuilder();
            public: ~OptimizeCurveBuilder();
            /**Returns  the curves and points to optimize. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * CurvesToOptimize
            (
            );
            /**Returns  the destination csys as global axis. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * DestinationCsys
            (
            );
            /**Sets  the destination csys as global axis. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDestinationCsys
            (
                NXOpen::CoordinateSystem * destinationCsys /** destinationcsys */ 
            );
            /**Returns  the create sketch flag. If true, creates a sketch and add the optimized curves to the sketch, else doesn't. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateSketch
            (
            );
            /**Sets  the create sketch flag. If true, creates a sketch and add the optimized curves to the sketch, else doesn't. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCreateSketch
            (
                bool createSketch /** createsketch */ 
            );
            /**Returns  the distance threshold 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceThreshold
            (
            );
            /**Sets  the distance threshold 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceThreshold
            (
                double distanceThreshold /** distancethreshold */ 
            );
            /**Returns  the angle threshold 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleThreshold
            (
            );
            /**Sets  the angle threshold 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngleThreshold
            (
                double angleThreshold /** anglethreshold */ 
            );
            /**Returns  the include points flag. If true, includes points for optimization, else doesn't 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludePoints
            (
            );
            /**Sets  the include points flag. If true, includes points for optimization, else doesn't 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIncludePoints
            (
                bool includePoints /** includepoints */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
