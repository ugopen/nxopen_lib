#ifndef NXOpen_ASSEMBLIES_SUBSETCOLLECTION_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_SUBSETCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_SubsetCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_AttributeSearchTerm.hxx>
#include <NXOpen/Assemblies_AttributeSearchTermBuilder.hxx>
#include <NXOpen/Assemblies_BoxSearchTerm.hxx>
#include <NXOpen/Assemblies_BoxSearchTermBuilder.hxx>
#include <NXOpen/Assemblies_PlaneSearchTerm.hxx>
#include <NXOpen/Assemblies_PlaneSearchTermBuilder.hxx>
#include <NXOpen/Assemblies_PositioningTask.hxx>
#include <NXOpen/Assemblies_PositioningTaskBuilder.hxx>
#include <NXOpen/Assemblies_ProximitySearchTerm.hxx>
#include <NXOpen/Assemblies_ProximitySearchTermBuilder.hxx>
#include <NXOpen/Assemblies_Subset.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        class SubsetCollection;
    }
    namespace Assemblies
    {
        class ComponentAssembly;
    }
    namespace Assemblies
    {
        class Subset;
    }
    namespace Assemblies
    {
        class AttributeSearchTerm;
    }
    namespace Assemblies
    {
        class AttributeSearchTermBuilder;
    }
    namespace Assemblies
    {
        class BoxSearchTerm;
    }
    namespace Assemblies
    {
        class BoxSearchTermBuilder;
    }
    namespace Assemblies
    {
        class PlaneSearchTerm;
    }
    namespace Assemblies
    {
        class PlaneSearchTermBuilder;
    }
    namespace Assemblies
    {
        class PositioningTask;
    }
    namespace Assemblies
    {
        class PositioningTaskBuilder;
    }
    namespace Assemblies
    {
        class ProximitySearchTerm;
    }
    namespace Assemblies
    {
        class ProximitySearchTermBuilder;
    }
    namespace Assemblies
    {
        class SubsetBuilder;
    }
    namespace Assemblies
    {
        class SubsetCollectionImpl;
        /** Represents a collection of subset.  <br> To obtain an instance of this class, refer to @link NXOpen::Assemblies::ComponentAssembly  NXOpen::Assemblies::ComponentAssembly @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_ASSEMBLIESEXPORT  SubsetCollection : public NXOpen::TaggedObjectCollection
        {
            private: SubsetCollectionImpl * m_subsetcollection_impl;
            private: NXOpen::Assemblies::ComponentAssembly* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SubsetCollection(NXOpen::Assemblies::ComponentAssembly *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SubsetCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Assemblies::SubsetCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Assemblies::Subset *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Assemblies::SubsetCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_ASSEMBLIESEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_ASSEMBLIESEXPORT  void next();
                NXOpen::Assemblies::SubsetCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates an @link NXOpen::Assemblies::SubsetBuilder NXOpen::Assemblies::SubsetBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::SubsetBuilder * CreateSubsetBuilder
            (
                NXOpen::Assemblies::Subset * subset /** @link NXOpen::Assemblies::Subset NXOpen::Assemblies::Subset@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::Assemblies::BoxSearchTermBuilder NXOpen::Assemblies::BoxSearchTermBuilder@endlink .
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::BoxSearchTermBuilder * CreateBoxSearchTermBuilder
            (
                NXOpen::Assemblies::BoxSearchTerm * boxSearchTerm /** @link NXOpen::Assemblies::BoxSearchTerm NXOpen::Assemblies::BoxSearchTerm@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::Assemblies::PlaneSearchTermBuilder NXOpen::Assemblies::PlaneSearchTermBuilder@endlink .
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::PlaneSearchTermBuilder * CreatePlaneSearchTermBuilder
            (
                NXOpen::Assemblies::PlaneSearchTerm * planeSearchTerm /** @link NXOpen::Assemblies::PlaneSearchTerm NXOpen::Assemblies::PlaneSearchTerm@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::Assemblies::AttributeSearchTermBuilder NXOpen::Assemblies::AttributeSearchTermBuilder@endlink .
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::AttributeSearchTermBuilder * CreateAttributeSearchTermBuilder
            (
                NXOpen::Assemblies::AttributeSearchTerm * attributeSearchTerm /** @link NXOpen::Assemblies::AttributeSearchTerm NXOpen::Assemblies::AttributeSearchTerm@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::Assemblies::ProximitySearchTermBuilder NXOpen::Assemblies::ProximitySearchTermBuilder@endlink .
                     @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::ProximitySearchTermBuilder * CreateProximitySearchTermBuilder
            (
                NXOpen::Assemblies::ProximitySearchTerm * proximitySearchTerm /** @link NXOpen::Assemblies::ProximitySearchTerm NXOpen::Assemblies::ProximitySearchTerm@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::Assemblies::PositioningTaskBuilder NXOpen::Assemblies::PositioningTaskBuilder@endlink  
                     @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::Assemblies::PositioningTaskBuilder * CreatePositioningTaskBuilder
            (
                NXOpen::Assemblies::PositioningTask * positioningTask /** positioningtask */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
