#ifndef NXOpen_MECHATRONICS_SYSTEMOBJECT_HXX_INCLUDED
#define NXOpen_MECHATRONICS_SYSTEMOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_SystemObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_SystemObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class SystemObject;
    }
    namespace Assemblies
    {
        class Component;
    }
    class NXObject;
    namespace Mechatronics
    {
        class _SystemObjectBuilder;
        class SystemObjectImpl;
        /** Represents the System Object. System Object is the entity displaying in
                System Navigator.  <br> This is an abstract class and cannot be created.  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  SystemObject : public NXOpen::NXObject
        {
            /** Reorder object type to specify the relative position. */
            public: enum ReorderType
            {
                ReorderTypeBefore = 1/** Before */,
                ReorderTypeAfter/**  After */
            };

            /** Relation type. */
            public: enum RelationType
            {
                RelationTypeEcad = 1/** ECAD relation type */
            };

            private: SystemObjectImpl * m_systemobject_impl;
            private: friend class  _SystemObjectBuilder;
            protected: SystemObject();
            public: ~SystemObject();
            /** Adds @link Assemblies::Component Assemblies::Component@endlink . 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void AddComponent
            (
                const std::vector<NXOpen::Assemblies::Component *> & comps /** comps */ 
            );
            /** Removes @link Assemblies::Component Assemblies::Component@endlink . 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void RemoveComponent
            (
                const std::vector<NXOpen::Assemblies::Component *> & comps /** comps */ 
            );
            /** Adds operation object. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void AddOperation
            (
                const std::vector<NXOpen::NXObject *> & opers /** opers */ 
            );
            /** Removes operation object. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void RemoveOperation
            (
                const std::vector<NXOpen::NXObject *> & opers /** opers */ 
            );
            /** Adds signal adapter objects. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void AddSignalAdapters
            (
                const std::vector<NXOpen::NXObject *> & adapters /** adapters */ 
            );
            /** Removes signal adapter objects. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void RemoveSignalAdapters
            (
                const std::vector<NXOpen::NXObject *> & adapters /** adapters */ 
            );
            /** Restructure system object. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void RestructureObject
            (
                NXOpen::Mechatronics::SystemObject * pDestination /** pdestination */ 
            );
            /** Adds behavioral physics objects. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void AddPhysicsObjects
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /** Removes behavioral physics objects. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void RemovePhysicsObjects
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /** Gets behavioral physics objects. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void GetPhysicsObjects
            (
                std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /** Reorders system objects. The method will reorder the objects in the same level
                        of the structure. The source object will be moved to the destination and the
                        sibling will update the order accordingly. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void ReorderObject
            (
                NXOpen::Mechatronics::SystemObject * pDestination /** pdestination */ ,
                NXOpen::Mechatronics::SystemObject::ReorderType beforeOrAfter /** Reorder Before/After */
            );
            /** Renames system object instance. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void RenameInstance
            (
                const NXString & name /** name */ 
            );
            /** Renames system object instance. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            void RenameInstance
            (
                const char * name /** name */ 
            );
            /** Creates the trace link for system objects. This method only makes sense in NX Manager mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void CreateTraceLink
            (
                NXOpen::Mechatronics::SystemObject * pComplying /** pcomplying */ 
            );
            /** Removes the trace link for system objects. This method only makes sense in NX Manager mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void RemoveTraceLink
            (
                NXOpen::Mechatronics::SystemObject * pComplying /** pcomplying */ 
            );
            /** Get the single designation including aspect, letter code and index.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXString GetSingleDesignation
            (
            );
            /** Set the single designation including aspect, letter code and index. The aspect, letter code
                     and index are joined together and comply with the rules defined in the configuration file. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetSingleDesignation
            (
                const NXString & designation /** designation */ 
            );
            /** Set the single designation including aspect, letter code and index. The aspect, letter code
                     and index are joined together and comply with the rules defined in the configuration file. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            void SetSingleDesignation
            (
                const char * designation /** designation */ 
            );
            /** Perform naming rule check and update the designation. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void ApplyNamingRule
            (
            );
            /** Associate a specified item to this system object. This method only makes sense in NX Manager mode. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void AssociateItem
            (
                NXOpen::Mechatronics::SystemObject::RelationType type /** The relation type. */,
                const NXString & itemMFKID /** The item MFK ID of association item. */,
                const NXString & revisionID /** The revision ID of association item. */
            );
            /** Associate a specified item to this system object. This method only makes sense in NX Manager mode. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            void AssociateItem
            (
                NXOpen::Mechatronics::SystemObject::RelationType type /** The relation type. */,
                const char * itemMFKID /** The item MFK ID of association item. */,
                const char * revisionID /** The revision ID of association item. */
            );
            /** Query the associated item with a specified type. This method only makes sense in NX Manager mode. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void GetAssociateItem
            (
                NXOpen::Mechatronics::SystemObject::RelationType type /** The relation type. */,
                NXString* itemMFKID /** The item MFK ID of association item. */,
                NXString* revisionID /** The revision ID of association item. */
            );
            /** Dissociate a specified item from this system object. This method only makes sense in NX Manager mode. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void DissociateItem
            (
                const NXString & itemMFKID /** The item MFK ID of dissociation item. */,
                const NXString & revisionID /** The revision ID of dissociation item. */
            );
            /** Dissociate a specified item from this system object. This method only makes sense in NX Manager mode. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            void DissociateItem
            (
                const char * itemMFKID /** The item MFK ID of dissociation item. */,
                const char * revisionID /** The revision ID of dissociation item. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
