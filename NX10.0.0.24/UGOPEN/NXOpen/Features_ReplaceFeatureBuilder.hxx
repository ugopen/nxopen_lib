#ifndef NXOpen_FEATURES_REPLACEFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_REPLACEFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ReplaceFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureReferencesBuilder.hxx>
#include <NXOpen/Features_ReplaceFeatureBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class ReplaceFeatureBuilder;
    }
    class Builder;
    namespace Features
    {
        class FeatureReferencesBuilder;
    }
    namespace Features
    {
        class SelectFeatureList;
    }
    class NXObject;
    namespace Features
    {
        class _ReplaceFeatureBuilderBuilder;
        class ReplaceFeatureBuilderImpl;
        /** Represents a replace feature builder. The replace features does not
            create a feature, but assists the user through the process of replacing
            a feature with a new one.  <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateReplaceFeatureBuilder  NXOpen::Features::FeatureCollection::CreateReplaceFeatureBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CopyReplacementFeature </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DeleteOriginalFeature </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MappingMethod </td> <td> 
         
        MapOnlyObjectsWithModelingDependencies </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  ReplaceFeatureBuilder : public NXOpen::Builder
        {
            /** Type of mapping method to be used for replace feature */
            public: enum MappingMethodType
            {
                MappingMethodTypeMapOnlyObjectsWithModelingDependencies/** map only objects with modeling dependencies */ ,
                MappingMethodTypeMapAllObjects/** Not supported yet */
            };

            private: ReplaceFeatureBuilderImpl * m_replacefeaturebuilder_impl;
            private: friend class  _ReplaceFeatureBuilderBuilder;
            protected: ReplaceFeatureBuilder();
            public: ~ReplaceFeatureBuilder();
            /**Returns  the selection list of features to be replaced 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SelectFeatureList * SelectFeature
            (
            );
            /**Returns  the selection list of replacement features 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SelectFeatureList * ReplacementFeature
            (
            );
            /**Returns  the mapping method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ReplaceFeatureBuilder::MappingMethodType MappingMethod
            (
            );
            /**Sets  the mapping method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMappingMethod
            (
                NXOpen::Features::ReplaceFeatureBuilder::MappingMethodType mappingMethod /** mappingmethod */ 
            );
            /**Returns  the distance tolerance to use for mapping 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double MappingTolerance
            (
            );
            /**Sets  the distance tolerance to use for mapping 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMappingTolerance
            (
                double mappingTolerance /** mappingtolerance */ 
            );
            /**Returns  the feature references builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FeatureReferencesBuilder * FeatureReferences
            (
            );
            /**Returns  the indication on whether to keep the original feature or not. True indicates the feature should be kept. 
             <br>  @deprecated Deprecated in NX7.5.2.  Use @link Features::ReplaceFeatureBuilder::DeleteOriginalFeature Features::ReplaceFeatureBuilder::DeleteOriginalFeature@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.2.  Use Features::ReplaceFeatureBuilder::DeleteOriginalFeature instead.") bool KeepFeatureToReplace
            (
            );
            /**Sets  the indication on whether to keep the original feature or not. True indicates the feature should be kept. 
             <br>  @deprecated Deprecated in NX7.5.2.  Use @link Features::ReplaceFeatureBuilder::SetDeleteOriginalFeature Features::ReplaceFeatureBuilder::SetDeleteOriginalFeature@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX7.5.2.  Use Features::ReplaceFeatureBuilder::SetDeleteOriginalFeature instead.") void SetKeepFeatureToReplace
            (
                bool keepFeatureToReplace /** keepfeaturetoreplace */ 
            );
            /**Returns  the indication on whether to delete the original feature or not. True indicates the feature should be deleted. 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool DeleteOriginalFeature
            (
            );
            /**Sets  the indication on whether to delete the original feature or not. True indicates the feature should be deleted. 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeleteOriginalFeature
            (
                bool deleteOriginalFeature /** deleteoriginalfeature */ 
            );
            /**Returns  the indication on whether to copy the replacement feature. True indicates that the replacement feature should be copied before replacing the specified feature. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool CopyReplacementFeature
            (
            );
            /**Sets  the indication on whether to copy the replacement feature. True indicates that the replacement feature should be copied before replacing the specified feature. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCopyReplacementFeature
            (
                bool copyReplacementFeature /** copyreplacementfeature */ 
            );
            /** Set the matching reference using the index into the feature references 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchingForIndex
            (
                int indices /** Index to use in the feature references builder */,
                NXOpen::NXObject * matchingTag /** Matching value */
            );
            /** Set the matching reference using the parent to match in the feature references 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchingForParent
            (
                NXOpen::NXObject * parentTag /** Parent to match in the feature references builder */,
                NXOpen::NXObject * matchingTag /** Matching value */
            );
            /** Populate the feature references according to the replaced feature
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UpdateMap
            (
            );
            /** Match the map automatically 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void AutomatchMap
            (
            );
            /**Returns  the indication on whether to use the unique mapping of parent objects instead of whole Selection Intent. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayUniqueInputsToMap
            (
            );
            /**Sets  the indication on whether to use the unique mapping of parent objects instead of whole Selection Intent. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDisplayUniqueInputsToMap
            (
                bool displayUniqueInputsToMap /** displayuniqueinputstomap */ 
            );
            /**Returns   the Geometric Matching Allowance is increased or decreased  from its previous value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsMappingToleranceIncreased
            (
            );
            /**Sets   the Geometric Matching Allowance is increased or decreased  from its previous value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMappingToleranceIncreased
            (
                bool isMappingToleranceIncreased /** ismappingtoleranceincreased */ 
            );
            /**Returns  the indication on whether to perform automatic geometric matching or not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DoAutomaticGeomMatch
            (
            );
            /**Sets  the indication on whether to perform automatic geometric matching or not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDoAutomaticGeomMatch
            (
                bool doAutomaticGeomMatch /** doautomaticgeommatch */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
