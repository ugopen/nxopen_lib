#ifndef NXOpen_FEATURES_ANALYZEPOCKETBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_ANALYZEPOCKETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_AnalyzePocketBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_AnalyzePocketBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class AnalyzePocketBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    namespace Features
    {
        class _AnalyzePocketBuilderBuilder;
        class AnalyzePocketBuilderImpl;
        /** Represents a @link NXOpen::Features::AnalyzePocket NXOpen::Features::AnalyzePocket@endlink  builder for Analyze Pocket feature.  <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateAnalyzePocketBuilder  NXOpen::Features::FeatureCollection::CreateAnalyzePocketBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AcutelyAngledWallsChecker </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        Diameter.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        FluteLength.Value </td> <td> 
         
        10.0 (millimeters part), 0.38 (inches part) </td> </tr> 

        <tr><td> 
         
        InaccessibleAreasChecker </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        LowerRadius.Value </td> <td> 
         
        5.0 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        NeckDiameter.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ToolType </td> <td> 
         
        EndMill </td> </tr> 

        <tr><td> 
         
        UndercutsChecker </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        UpperRadius.Value </td> <td> 
         
        5.0 (millimeters part), 0.25 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  AnalyzePocketBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Represents the tool type which defines how the angled walls are cut. */
            public: enum ToolTypes
            {
                ToolTypesUnknown/** unknown. */,
                ToolTypesEndMill/** End Mill. */,
                ToolTypesTCutter/** T Cutter. */,
                ToolTypesSphericalMill/** Spherical Mill. */
            };

            /** Represents the solution which defines how the End Mill is positioned with the angled walls. */
            public: enum AngledWallSolutions
            {
                AngledWallSolutionsUnknown/** Unknown End Mill solution. */,
                AngledWallSolutionsSwarfCutWall/** One pass End Mill. The tool is following the angled wall and not perpendicular to the pocket floor. */,
                AngledWallSolutionsCutFloorAndSwarfCutWall/** Two pass End Mill. During first pass you keep the tool perpendicular to the pocket floor and during second pass you follow the angled wall. */,
                AngledWallSolutionsCutFloor/** One pass End Mill. The tool is perpendicular to the pocket floor and not follow the angled wall. */,
                AngledWallSolutionsSwarfCutWallAndFloor/** Two pass End Mill. During first pass you follow the angled wall and during second pass you rotate the tool to follow the floor. */
            };

            private: AnalyzePocketBuilderImpl * m_analyzepocketbuilder_impl;
            private: friend class  _AnalyzePocketBuilderBuilder;
            protected: AnalyzePocketBuilder();
            public: ~AnalyzePocketBuilder();
            /**Returns  the collector of floor faces. It can be a single face, or multiple faces 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FloorFaces
            (
            );
            /**Sets  the collector of floor faces. It can be a single face, or multiple faces 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFloorFaces
            (
                NXOpen::ScCollector * floorFaces /** floor faces */ 
            );
            /**Returns  the collector of wall faces. It can be a single face, or multiple faces 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * WallFaces
            (
            );
            /**Sets  the collector of wall faces. It can be a single face, or multiple faces 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWallFaces
            (
                NXOpen::ScCollector * wallFaces /** wall faces */ 
            );
            /**Returns  the tool type defines how the angled walls are cut. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::AnalyzePocketBuilder::ToolTypes ToolType
            (
            );
            /**Sets  the tool type defines how the angled walls are cut. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToolType
            (
                NXOpen::Features::AnalyzePocketBuilder::ToolTypes toolType /** tool type */ 
            );
            /**Returns  the diameter defines the diameter of End Mill or Shperical Mill. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Diameter
            (
            );
            /**Returns  the lower radius defines the radius of blend on the bottom of End Mill or T Cutter. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LowerRadius
            (
            );
            /**Returns  the upper radius defines the radius of blend on the upper part of T Cutter. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UpperRadius
            (
            );
            /**Returns  the neck diameter defines the diameter of the neck of T Cutter. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * NeckDiameter
            (
            );
            /**Returns  the flute length defines the length of the flute of T Cutter. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FluteLength
            (
            );
            /**Returns  the flag specifying whether to check undercuts. If True, check the undercuts, else it is not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool UndercutsChecker
            (
            );
            /**Sets  the flag specifying whether to check undercuts. If True, check the undercuts, else it is not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUndercutsChecker
            (
                bool undercutsChecker /** undercuts checker */ 
            );
            /**Returns  the flag specifying whether to check acutely angled walls. If True, check the acutely angled walls, else it is not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool AcutelyAngledWallsChecker
            (
            );
            /**Sets  the flag specifying whether to check acutely angled walls. If True, check the acutely angled walls, else it is not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAcutelyAngledWallsChecker
            (
                bool acutelyAngledWallsChecker /** acutely angled walls checker */ 
            );
            /**Returns  the flag specifying whether to check inaccessible areas. If True, check the inaccessible areas, else it is not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool InaccessibleAreasChecker
            (
            );
            /**Sets  the flag specifying whether to check inaccessible areas. If True, check the inaccessible areas, else it is not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetInaccessibleAreasChecker
            (
                bool inaccessibleAreasChecker /** inaccessible areas checker */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
