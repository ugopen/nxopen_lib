#ifndef NXOpen_SIM_KINEMATICSINUMERIKCABUILDER_HXX_INCLUDED
#define NXOpen_SIM_KINEMATICSINUMERIKCABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_KinematicSinumerikCaBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SIM_KinematicSinumerikCaBuilder.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        class KinematicSinumerikCaBuilder;
    }
    class Builder;
    namespace SIM
    {
        class _KinematicSinumerikCaBuilderBuilder;
        class KinematicSinumerikCaBuilderImpl;
        /** This class is used for edit sinumerik collision avoidance properties.
                Calling @link Builder::Commit Builder::Commit@endlink  on this builder will only return NULL.
             <br> Use the @link KinematicConfigurator KinematicConfigurator@endlink  class to create a KinematicSinumerikCaBuilder object.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_SIMEXPORT  KinematicSinumerikCaBuilder : public NXOpen::Builder
        {
            /** The init state types */
            public: enum PlcInitStateTypes
            {
                PlcInitStateTypesActive/** Active     */,
                PlcInitStateTypesInactive/** Inactive   */,
                PlcInitStateTypesPreselect/** Preselect */
            };

            /** The usage types */
            public: enum PlcUsageTypes
            {
                PlcUsageTypesCollisionCheck/** Collision Check */,
                PlcUsageTypesVisualize/** Visualize       */,
                PlcUsageTypesAll/** All             */
            };

            private: KinematicSinumerikCaBuilderImpl * m_kinematicsinumerikcabuilder_impl;
            private: friend class  _KinematicSinumerikCaBuilderBuilder;
            protected: KinematicSinumerikCaBuilder();
            public: ~KinematicSinumerikCaBuilder();
            /**Returns  the PLC bit for this protection area
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int PlcBit
            (
            );
            /**Sets  the PLC bit for this protection area
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_sinumerik_ca ("Sinumerik Collision Avoidance") */
            public: void SetPlcBit
            (
                int bit /** the plc bit value 0-63 */
            );
            /**Returns  the detail level for this protection area 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int DetailLevel
            (
            );
            /**Sets  the detail level for this protection area 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_sinumerik_ca ("Sinumerik Collision Avoidance") */
            public: void SetDetailLevel
            (
                int level /** the detail value value 0-3 */
            );
            /**Returns  the initial PLC state for this protection area 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::KinematicSinumerikCaBuilder::PlcInitStateTypes PlcInitState
            (
            );
            /**Sets  the initial PLC state for this protection area 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_sinumerik_ca ("Sinumerik Collision Avoidance") */
            public: void SetPlcInitState
            (
                NXOpen::SIM::KinematicSinumerikCaBuilder::PlcInitStateTypes state /** the init state */
            );
            /**Returns  the PLC usage for this protection area 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::KinematicSinumerikCaBuilder::PlcUsageTypes PlcUsage
            (
            );
            /**Sets  the PLC usage for this protection area 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_sinumerik_ca ("Sinumerik Collision Avoidance") */
            public: void SetPlcUsage
            (
                NXOpen::SIM::KinematicSinumerikCaBuilder::PlcUsageTypes usage /** the usage */
            );
            /**Returns  the magazine location index for this automatic protection area
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int MagazineLocationIndex
            (
            );
            /**Sets  the magazine location index for this automatic protection area
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_sinumerik_ca ("Sinumerik Collision Avoidance") */
            public: void SetMagazineLocationIndex
            (
                int index /** the magazine location index */
            );
            /**Returns  the magazine index for this automatic protection area 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int MagazineIndex
            (
            );
            /**Sets  the magazine index for this automatic protection area 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_sinumerik_ca ("Sinumerik Collision Avoidance") */
            public: void SetMagazineIndex
            (
                int index /** the magazine index */
            );
            /**Returns  the TO-index for this automatic protection area 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int TOIndex
            (
            );
            /**Sets  the TO-index for this automatic protection area 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_sinumerik_ca ("Sinumerik Collision Avoidance") */
            public: void SetTOIndex
            (
                int index /** the TO number */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
