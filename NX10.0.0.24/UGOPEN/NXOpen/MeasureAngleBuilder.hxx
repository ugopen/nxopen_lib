#ifndef NXOpen_MEASUREANGLEBUILDER_HXX_INCLUDED
#define NXOpen_MEASUREANGLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MeasureAngleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MeasureAngleBuilder.hxx>
#include <NXOpen/MeasureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class MeasureAngleBuilder;
    class Direction;
    class MeasureBuilder;
    class Point;
    class SelectDisplayableObject;
    class _MeasureAngleBuilderBuilder;
    class MeasureAngleBuilderImpl;
    /**
    Represents a @link MeasureAngleBuilder MeasureAngleBuilder@endlink 
     <br> To create a new instance of this class, use @link NXOpen::MeasureManager::CreateMeasureAngleBuilder  NXOpen::MeasureManager::CreateMeasureAngleBuilder @endlink  <br> 
     <br>  Created in NX5.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  MeasureAngleBuilder : public NXOpen::MeasureBuilder
    {
        /** Represents the angle type. */
        public: enum AngleType
        {
            AngleTypeThreePoints/** three points */ ,
            AngleTypeTwoObjects/** two objects */ ,
            AngleTypeScreenPoints/** screen points */ 
        };

        /** Represents the projection type. */
        public: enum ProjectionType
        {
            ProjectionTypeAngle3d/** angle3d */ ,
            ProjectionTypeAngleXy/** angle xy */ ,
            ProjectionTypeTrueAngle/** true angle */ 
        };

        /** Represents the orientation type */
        public: enum OrientationType
        {
            OrientationTypeInnerAngle/** inner angle */ ,
            OrientationTypeOuterAngle/** outer angle */ 
        };

        /** Represents the object type. */
        public: enum ObjectType
        {
            ObjectTypeObject/** object */ ,
            ObjectTypeFeature/** feature */ ,
            ObjectTypeVector/** vector */ 
        };

        private: MeasureAngleBuilderImpl * m_measureanglebuilder_impl;
        private: friend class  _MeasureAngleBuilderBuilder;
        protected: MeasureAngleBuilder();
        public: ~MeasureAngleBuilder();
        /**Returns  the base point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Point * BasePoint
        (
        );
        /**Sets  the base point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetBasePoint
        (
            NXOpen::Point * basePoint /** basepoint */ 
        );
        /**Returns  the end point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Point * BaseEnd
        (
        );
        /**Sets  the end point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetBaseEnd
        (
            NXOpen::Point * baseEnd /** baseend */ 
        );
        /**Returns  the protractor end point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Point * ProtractorEnd
        (
        );
        /**Sets  the protractor end point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetProtractorEnd
        (
            NXOpen::Point * protractorEnd /** protractorend */ 
        );
        /**Returns  the object1 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SelectDisplayableObject * Object1
        (
        );
        /**Returns  the object2 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SelectDisplayableObject * Object2
        (
        );
        /**Returns  the feature1 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SelectDisplayableObject * Feature1
        (
        );
        /**Returns  the feature2 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SelectDisplayableObject * Feature2
        (
        );
        /**Returns  the vector1 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Direction * Vector1
        (
        );
        /**Sets  the vector1 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetVector1
        (
            NXOpen::Direction * vector1 /** vector1 */ 
        );
        /**Returns  the vector2 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Direction * Vector2
        (
        );
        /**Sets  the vector2 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetVector2
        (
            NXOpen::Direction * vector2 /** vector2 */ 
        );
        /**Returns  the otype1 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureAngleBuilder::ObjectType Objtype1
        (
        );
        /**Sets  the otype1 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetObjtype1
        (
            NXOpen::MeasureAngleBuilder::ObjectType objtype /** objtype */ 
        );
        /**Returns  the otype2 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureAngleBuilder::ObjectType Objtype2
        (
        );
        /**Sets  the otype2 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetObjtype2
        (
            NXOpen::MeasureAngleBuilder::ObjectType objtype /** objtype */ 
        );
        /**Returns  the ptype 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureAngleBuilder::ProjectionType Ptype
        (
        );
        /**Sets  the ptype 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetPtype
        (
            NXOpen::MeasureAngleBuilder::ProjectionType mtype /** mtype */ 
        );
        /**Returns  the orientation 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureAngleBuilder::OrientationType Orientation
        (
        );
        /**Sets  the orientation 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetOrientation
        (
            NXOpen::MeasureAngleBuilder::OrientationType mtype /** mtype */ 
        );
        /**Returns  the exact flag 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: bool IsExact
        (
        );
        /**Sets  the exact flag 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetExact
        (
            bool isExact /** isexact */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
