#ifndef NXOpen_CUTVIEWCOLLECTION_HXX_INCLUDED
#define NXOpen_CUTVIEWCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CutViewCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class CutViewCollection;
    class Part;
    class CutView;
    class Body;
    class DisplayableObject;
    class ModelingView;
    class CutViewCollectionImpl;
    /** Represents a collection of @link NXOpen::CutView NXOpen::CutView@endlink  objects.  <br> To obtain an instance of this class, refer to @link NXOpen::Part  NXOpen::Part @endlink  <br> 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  CutViewCollection : public NXOpen::TaggedObjectCollection
    {
        private: CutViewCollectionImpl * m_cutviewcollection_impl;
        private: NXOpen::Part* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit CutViewCollection(NXOpen::Part *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~CutViewCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::CutViewCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::CutView *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::CutViewCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::CutViewCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Finds the @link  NXOpen::CutView   NXOpen::CutView @endlink  with the given identifier
            as recorded in a journal.  An object may not return the same value as its
            JournalIdentifier in different versions of the software.  However,
            newer versions of the software should find the same object when
            FindObject is passed older versions of its journal identifier. In general,
            this method should not be used in handwritten code and exists to
            support record and playback of journals.

            An exception will be thrown if no object can be found with the given
            journal identifier.  @return  View with this identifier 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::CutView * FindObject
        (
            const NXString & journalIdentifier /** Identifier of the cut view to be found */
        );
        /** Finds the @link  NXOpen::CutView   NXOpen::CutView @endlink  with the given identifier
            as recorded in a journal.  An object may not return the same value as its
            JournalIdentifier in different versions of the software.  However,
            newer versions of the software should find the same object when
            FindObject is passed older versions of its journal identifier. In general,
            this method should not be used in handwritten code and exists to
            support record and playback of journals.

            An exception will be thrown if no object can be found with the given
            journal identifier.  @return  View with this identifier 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::CutView * FindObject
        (
            const char * journalIdentifier /** Identifier of the cut view to be found */
        );
        /** Update the Master Cut feature associated with a cut view. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateCutView
        (
            NXOpen::CutView * view /** Cut view */
        );
        /** Delete the Master Cut feature associated with a cut view. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteCutView
        (
            NXOpen::CutView * view /** Cut view */
        );
        /** Create a linked section view.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ModelingView * CreateLinkedSectionView
        (
            NXOpen::CutView * view /** Cut view */
        );
        /** Return a "true" if the body is a cut body.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsCutBody
        (
            NXOpen::Body * body /** body */ 
        );
        /** Return a "true" if the body is a cut body in the view.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsCutBodyOfView
        (
            NXOpen::Body * body /** body */ ,
            NXOpen::CutView * view /** Cut view */,
            NXOpen::Body ** uncutBody /** Corresponding Uncut body */
        );
        /** Return a "true" if the body is an uncut body in the view.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsUncutBodyOfView
        (
            NXOpen::Body * body /** body */ ,
            NXOpen::CutView * view /** Cut view */,
            NXOpen::Body ** cutBody /** Corresponding Cut body */
        );
        /** Return a "true" if the body is a tool body.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsToolBody
        (
            NXOpen::Body * body /** body */ 
        );
        /** Find the cut views of an object.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::DisplayableObject *> GetCutViewsOfObject
        (
            NXOpen::Body * body /** body */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
