#ifndef NXOpen_TOOLING_DIEENGTRIMANGLECHECKBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_DIEENGTRIMANGLECHECKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_DieEngTrimAngleCheckBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Tooling_DieEngTrimAngleCheckBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class DieEngTrimAngleCheckBuilder;
    }
    class Builder;
    class Curve;
    class Direction;
    class Expression;
    class ICurve;
    class ScCollector;
    namespace Tooling
    {
        class _DieEngTrimAngleCheckBuilderBuilder;
        class DieEngTrimAngleCheckBuilderImpl;
        /** Represents a Trim Angle Check builder  <br> To create a new instance of this class, use @link NXOpen::Tooling::AutoDieCollection::CreateDieEngTrimAngleCheckBuilder  NXOpen::Tooling::AutoDieCollection::CreateDieEngTrimAngleCheckBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CheckPointSpacing.Value </td> <td> 
         
        25.4 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        DirectionOption </td> <td> 
         
        ByVector </td> </tr> 

        <tr><td> 
         
        ElevationAngle.Value </td> <td> 
         
        90 </td> </tr> 

        <tr><td> 
         
        LineScale </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        MaxAngle.Value </td> <td> 
         
        20 </td> </tr> 

        <tr><td> 
         
        MinAngle.Value </td> <td> 
         
        -15 </td> </tr> 

        <tr><td> 
         
        PlaneAngle.Value </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  DieEngTrimAngleCheckBuilder : public NXOpen::Builder
        {
            /** Options to determine the method to specify direction. */
            public: enum DirectionOptions
            {
                DirectionOptionsByVector/** by vector */ ,
                DirectionOptionsByAngles/** by angles */ 
            };

            private: DieEngTrimAngleCheckBuilderImpl * m_dieengtrimanglecheckbuilder_impl;
            private: friend class  _DieEngTrimAngleCheckBuilderBuilder;
            protected: DieEngTrimAngleCheckBuilder();
            public: ~DieEngTrimAngleCheckBuilder();
            /**Returns  the trimming faces 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * TrimmingFaces
            (
            );
            /**Returns  the trimming curves 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * TrimmingCurves
            (
            );
            /**Returns  the option to set the method of defining trimming direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieEngTrimAngleCheckBuilder::DirectionOptions DirectionOption
            (
            );
            /**Sets  the option to set the method of defining trimming direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDirectionOption
            (
                NXOpen::Tooling::DieEngTrimAngleCheckBuilder::DirectionOptions directionOption /** directionoption */ 
            );
            /**Returns  the trimming direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * TrimmingDirection
            (
            );
            /**Sets  the trimming direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTrimmingDirection
            (
                NXOpen::Direction * trimmingDirection /** trimmingdirection */ 
            );
            /**Returns  the elevation angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ElevationAngle
            (
            );
            /**Returns  the plane angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PlaneAngle
            (
            );
            /**Returns  the upper limit of a valid trim angle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxAngle
            (
            );
            /**Returns  the lower limit of a valid trim angle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinAngle
            (
            );
            /**Returns  the maximum distance between two check points 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CheckPointSpacing
            (
            );
            /**Returns  the line scale 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double LineScale
            (
            );
            /**Sets  the line scale 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetLineScale
            (
                double lineScale /** linescale */ 
            );
            /**Returns  the option to indicate whether to fit or not when selecting trimming curve(s) on the trimming curve list 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool AutoFit
            (
            );
            /**Sets  the option to indicate whether to fit or not when selecting trimming curve(s) on the trimming curve list 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAutoFit
            (
                bool autoFit /** autofit */ 
            );
            /**Returns  the option to indicate whether to hide the feedback objects whose trim angles are in the safe zone or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool HideSafeZone
            (
            );
            /**Sets  the option to indicate whether to hide the feedback objects whose trim angles are in the safe zone or not 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetHideSafeZone
            (
                bool hideSafeZone /** hidesafezone */ 
            );
            /** Get the joined trimming curves. If join is not needed, they are the copies of trimming curves. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetJoinedSelectedCurves
            (
                std::vector<NXOpen::Curve *> & joinedSelectedCurves /** joinedselectedcurves */ 
            );
            /** Set the joined trimming curves. If join is not needed, they are the copies of trimming curves. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetJoinedSelectedCurves
            (
                const std::vector<NXOpen::Curve *> & joinedSelectedCurves /** joinedselectedcurves */ 
            );
            /** Get the vector tags of joined trimming curve trim sides. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetTrimSideTags
            (
                std::vector<NXOpen::Direction *> & trimSideTags /** trimsidetags */ 
            );
            /** Set the vector tags of joined trimming curve trim sides. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTrimSideTags
            (
                const std::vector<NXOpen::Direction *> & trimSideTags /** trimsidetags */ 
            );
            /** Join the input curves and edges. Original curves and edges won't be modified. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void JoinCurvesAndEdges
            (
                const std::vector<NXOpen::ICurve *> & inputCrvs /** Curves/Edges to be joined. */,
                double distTol /** Distance tolerance. */,
                std::vector<NXOpen::ICurve *> & outputCrvs /** Joined curves/edges or copies of the input curves/edges if join is not needed. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
