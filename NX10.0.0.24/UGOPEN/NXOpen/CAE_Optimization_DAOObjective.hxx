#ifndef NXOpen_CAE_OPTIMIZATION_DAOOBJECTIVE_HXX_INCLUDED
#define NXOpen_CAE_OPTIMIZATION_DAOOBJECTIVE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Optimization_DAOObjective.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Optimization_DAOObjective.hxx>
#include <NXOpen/CAE_Optimization_DAOOptimizationDataTypes.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Optimization
        {
            class DAOObjective;
        }
    }
    namespace CAE
    {
        class ResultMeasure;
    }
    class DisplayableObject;
    class NXObject;
    class Unit;
    namespace CAE
    {
        namespace Optimization
        {
            class _DAOObjectiveBuilder;
            class DAOObjectiveImpl;
            /** Represents a @link NXOpen::CAE::Optimization::DAOObjective NXOpen::CAE::Optimization::DAOObjective@endlink . 
             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  DAOObjective : public NXOpen::NXObject
            {
                private: DAOObjectiveImpl * m_daoobjective_impl;
                private: friend class  _DAOObjectiveBuilder;
                protected: DAOObjective();
                public: ~DAOObjective();
                /**Returns  the category type 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::Category CategoryType
                (
                );
                /**Sets  the category type 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetCategoryType
                (
                    NXOpen::CAE::Optimization::Category categoryType /** Category type */
                );
                /**Returns  the geometry type 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::Geometry GeometryType
                (
                );
                /**Sets  the geometry type 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetGeometryType
                (
                    NXOpen::CAE::Optimization::Geometry geometryType /** Geometry type */
                );
                /**Returns  the objective response 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::Response Response
                (
                );
                /**Sets  the objective response 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetResponse
                (
                    NXOpen::CAE::Optimization::Response objectiveResponse /** Objective response */
                );
                /**Returns  the objective goal 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::Goal ObjectiveGoal
                (
                );
                /**Sets  the objective goal 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetObjectiveGoal
                (
                    NXOpen::CAE::Optimization::Goal objectiveGoal /** Objective goal */
                );
                /**Returns  the target value 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double TargetValue
                (
                );
                /**Sets  the target value 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetTargetValue
                (
                    double targetValue /** Target value */
                );
                /**Returns  the target unit 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Unit * TargetUnit
                (
                );
                /**Sets  the target unit 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetTargetUnit
                (
                    NXOpen::Unit * targetUnit /** Target unit */
                );
                /** Gets the target geometry  @return  Target geometry 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::DisplayableObject *> GetGeometry
                (
                );
                /** Sets the target geometry 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetGeometry
                (
                    const std::vector<NXOpen::DisplayableObject *> & geometry /** Target geometry */
                );
                /** Gets the objective result group number  @return  Result group number 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetNumberResultGroup
                (
                );
                /** Gets the objective results  @return  Objective optimization results 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<double> GetResults
                (
                    int resultGroupIndex /** Result group index */
                );
                /**Returns  the frequency load case index 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: int LoadCase
                (
                );
                /**Sets  the frequency load case index 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetLoadCase
                (
                    int loadcase /** loadcase */ 
                );
                /**Returns  the frequency mode number 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: int ModeNumber
                (
                );
                /**Sets  the frequency mode number 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetModeNumber
                (
                    int modeNumber /** Mode number */
                );
                /**Returns  the result measure 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::ResultMeasure * ResultMeasure
                (
                );
                /**Sets  the result measure 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetResultMeasure
                (
                    NXOpen::CAE::ResultMeasure * resMeas /** resmeas */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
