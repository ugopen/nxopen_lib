#ifndef NXOpen_FEATURES_VEHICLEDESIGN_ALLAROUNDVISIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VEHICLEDESIGN_ALLAROUNDVISIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VehicleDesign_AllAroundVisionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_VehicleDesign_AllAroundVisionBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace VehicleDesign
        {
            class AllAroundVisionBuilder;
        }
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class NXColor;
    class Point;
    class ScCollector;
    class Section;
    namespace Features
    {
        namespace VehicleDesign
        {
            class _AllAroundVisionBuilderBuilder;
            class AllAroundVisionBuilderImpl;
            /**
                    A @link Features::VehicleDesign::AllAroundVisionBuilder Features::VehicleDesign::AllAroundVisionBuilder@endlink  used to create or edit
                    a vehicle design @link Features::VehicleDesign::AllAroundVision Features::VehicleDesign::AllAroundVision@endlink  feature.
                     <br> To create a new instance of this class, use @link NXOpen::Features::VehicleDesignCollection::CreateAllAroundVisionBuilder  NXOpen::Features::VehicleDesignCollection::CreateAllAroundVisionBuilder @endlink  <br> 
            Default values.
            <table border="1"> 
             
            <tr><th> 
            Property</th>  <th> 
            Value</th> </tr>
            <tr><td> 
             
            CreateIntersectionGeometry </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            UseFrontHeadRests </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            UseRearHeadRests </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            UseWireFrameOnly </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            VisionAreaRadius.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            WindowType </td> <td> 
             
            Face </td> </tr> 

            </table>  

             <br>  Created in NX8.5.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  AllAroundVisionBuilder : public NXOpen::Features::FeatureBuilder
            {
                /** Used to indicate the type of obstructing geometry to use. */
                public: enum Types
                {
                    TypesPillars/** Pillars as obstructing geometry. */,
                    TypesWindows/** Windows as non-obstructing geometry. */
                };

                /** Used to indicate the type of geometry used to define the window. */
                public: enum WindowTypes
                {
                    WindowTypesFace/** Face Object for Windows. */,
                    WindowTypesCurve/** Curve Object for Windows. */
                };

                private: AllAroundVisionBuilderImpl * m_allaroundvisionbuilder_impl;
                private: friend class  _AllAroundVisionBuilderBuilder;
                protected: AllAroundVisionBuilder();
                public: ~AllAroundVisionBuilder();
                /**Returns  the seat reference point(SgRP). 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * SeatReferencePoint
                (
                );
                /**Sets  the seat reference point(SgRP). 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSeatReferencePoint
                (
                    NXOpen::Point * seatReferencePoint /** seatreferencepoint */ 
                );
                /**Returns  the faces representing the car geometry to use as obstructing elements. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * CarGeometry
                (
                );
                /**Returns  the type of geometry used to define the window. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::AllAroundVisionBuilder::WindowTypes WindowType
                (
                );
                /**Sets  the type of geometry used to define the window. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWindowType
                (
                    NXOpen::Features::VehicleDesign::AllAroundVisionBuilder::WindowTypes windowType /** windowtype */ 
                );
                /**Returns  the faces representing the window geometry to use as non-obstructing elements. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * WindowFaceGeometry
                (
                );
                /**Returns  the curves representing the window geometry to use as non-obstructing elements. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Section * WindowCurveGeometry
                (
                );
                /**Returns  the faces representing the front head rest geometry to use as obstructing elements. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * FrontHeadRestGeometry
                (
                );
                /**Returns  the faces representing the rear head rest geometry to use as obstructing elements. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * RearHeadRestGeometry
                (
                );
                /**Returns  the radius of a circle definiing the vision area. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * VisionAreaRadius
                (
                );
                /**Returns  the color of the visible area. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * VisibleColor
                (
                );
                /**Sets  the color of the visible area. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetVisibleColor
                (
                    NXOpen::NXColor * visibleColor /** visiblecolor */ 
                );
                /**Returns  the color of the obstructed area. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * ObstructedColor
                (
                );
                /**Sets  the color of the obstructed area. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetObstructedColor
                (
                    NXOpen::NXColor * obstructedColor /** obstructedcolor */ 
                );
                /**Returns  the translucency of the vision area. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: int Translucency
                (
                );
                /**Sets  the translucency of the vision area. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTranslucency
                (
                    int translucency /** translucency */ 
                );
                /**Returns  the indication if the front head rests geometry should be used. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool UseFrontHeadRests
                (
                );
                /**Sets  the indication if the front head rests geometry should be used. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetUseFrontHeadRests
                (
                    bool useFrontHeadRests /** usefrontheadrests */ 
                );
                /**Returns  the indication if rear head rests geometry should be used. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool UseRearHeadRests
                (
                );
                /**Sets  the indication if rear head rests geometry should be used. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetUseRearHeadRests
                (
                    bool useRearHeadRests /** userearheadrests */ 
                );
                /**Returns  the indication if only wire frame should be used. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool UseWireFrameOnly
                (
                );
                /**Sets  the indication if only wire frame should be used. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetUseWireFrameOnly
                (
                    bool useWireFrameOnly /** usewireframeonly */ 
                );
                /**Returns  the indication if the intersection geometry should be created. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool CreateIntersectionGeometry
                (
                );
                /**Sets  the indication if the intersection geometry should be created. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetCreateIntersectionGeometry
                (
                    bool createIntersectionGeometry /** createintersectiongeometry */ 
                );
                /**Returns  the distance tolerance. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: double DistanceTolerance
                (
                );
                /**Sets  the distance tolerance. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDistanceTolerance
                (
                    double distanceTolerance /** distancetolerance */ 
                );
                /**Returns  the type of obstructing geometry being supplied. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::AllAroundVisionBuilder::Types Type
                (
                );
                /**Sets  the type of obstructing geometry being supplied. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetType
                (
                    NXOpen::Features::VehicleDesign::AllAroundVisionBuilder::Types type /** type */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
