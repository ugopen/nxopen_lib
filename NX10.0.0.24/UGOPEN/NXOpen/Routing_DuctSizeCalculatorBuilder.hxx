#ifndef NXOpen_ROUTING_DUCTSIZECALCULATORBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_DUCTSIZECALCULATORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DuctSizeCalculatorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_DuctSizeCalculatorBuilder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class DuctSizeCalculatorBuilder;
    }
    class Builder;
    class Expression;
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace Routing
    {
        class _DuctSizeCalculatorBuilderBuilder;
        class DuctSizeCalculatorBuilderImpl;
        /** Builder to perform calculations of the duct which is to be used in the HVAC applications. The duct has some flow attributes and has dimentions. <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreateDuctSizeCalculatorBuilder  NXOpen::Routing::RouteManager::CreateDuctSizeCalculatorBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DuctAreaExp.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        DuctAspectRatioExp.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DuctDiameterExp.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        DuctEqvalentDiameterExp.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        DuctHeightExp.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        DuctShape </td> <td> 
         
        Rectangular </td> </tr> 

        <tr><td> 
         
        DuctWidthExp.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        IsCreateSpaceReservationEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsDisplayFlowParamsEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        VelocityExp.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        VolumeFlowRateExp.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  DuctSizeCalculatorBuilder : public NXOpen::Builder
        {
            /** This enum represents the shape of the duct */
            public: enum DuctShapeType
            {
                DuctShapeTypeRectangular/** rectangular */ ,
                DuctShapeTypeCircular/** circular */ ,
                DuctShapeTypeFlatOval/** flat oval */ 
            };

            private: DuctSizeCalculatorBuilderImpl * m_ductsizecalculatorbuilder_impl;
            private: friend class  _DuctSizeCalculatorBuilderBuilder;
            protected: DuctSizeCalculatorBuilder();
            public: ~DuctSizeCalculatorBuilder();
            /**Returns  the route object collector  Stores the routing segments for which calculations are to be done 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::RouteObjectCollector * RouteObjectCollector
            (
            );
            /**Returns  the volume flow rate associated with the duct. This is a flow parameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Expression * VolumeFlowRateExp
            (
            );
            /**Returns  the velocity component Flow parameter for the duct.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Expression * VelocityExp
            (
            );
            /**Returns  the shape of the duct 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Routing::DuctSizeCalculatorBuilder::DuctShapeType DuctShape
            (
            );
            /**Sets  the shape of the duct 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetDuctShape
            (
                NXOpen::Routing::DuctSizeCalculatorBuilder::DuctShapeType ductShape /** ductshape */ 
            );
            /**Returns  the duct width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Expression * DuctWidthExp
            (
            );
            /**Returns  the duct height 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Expression * DuctHeightExp
            (
            );
            /**Returns  the Aspect ratio of the duct dimentions 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Expression * DuctAspectRatioExp
            (
            );
            /**Returns  the duct diameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Expression * DuctDiameterExp
            (
            );
            /**Returns  the duct equivalent diameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Expression * DuctEqvalentDiameterExp
            (
            );
            /**Returns  the duct area 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: NXOpen::Expression * DuctAreaExp
            (
            );
            /**Returns  the status of the create space reservation toggle; whether the toggle is on  or off. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: bool IsCreateSpaceReservationEnabled
            (
            );
            /**Sets  the status of the create space reservation toggle; whether the toggle is on  or off. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetCreateSpaceReservationEnabled
            (
                bool isCreateSpaceReservation /** iscreatespacereservation */ 
            );
            /**Returns  the ON or OFF status of the Display flow parameters over Segments toggle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: bool IsDisplayFlowParamsEnabled
            (
            );
            /**Sets  the ON or OFF status of the Display flow parameters over Segments toggle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetDisplayFlowParamsEnabled
            (
                bool isDispFlowParams /** isdispflowparams */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
