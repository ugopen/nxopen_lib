#ifndef NXOpen_FEATURES_OFFSETCURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_OFFSETCURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_OffsetCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_OffsetCurveBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveFitData.hxx>
#include <NXOpen/GeometricUtilities_CurveFitOptions.hxx>
#include <NXOpen/GeometricUtilities_CurveOptions.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class OffsetCurveBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveFitData;
    }
    namespace GeometricUtilities
    {
        class CurveFitOptions;
    }
    namespace GeometricUtilities
    {
        class CurveOptions;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    class ICurve;
    class Point;
    class Section;
    namespace Features
    {
        class _OffsetCurveBuilderBuilder;
        class OffsetCurveBuilderImpl;
        /** Represents a @link NXOpen::Features::OffsetCurve NXOpen::Features::OffsetCurve@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateOffsetCurveBuilder  NXOpen::Features::FeatureCollection::CreateOffsetCurveBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CurveFitData.CurveJoinMethod </td> <td> 
         
        No </td> </tr> 

        <tr><td> 
         
        CurveFitData.Degree </td> <td> 
         
        7 </td> </tr> 

        <tr><td> 
         
        CurveFitData.FitMethod </td> <td> 
         
        DegreeAndSegments </td> </tr> 

        <tr><td> 
         
        CurveFitData.IsAdvancedFit </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CurveFitData.IsAlignShape </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CurveFitData.MaximumDegree </td> <td> 
         
        7 </td> </tr> 

        <tr><td> 
         
        CurveFitData.MaximumSegments </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        CurveFitData.MinimumDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        CurveFitData.Segments </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        CurveFitMethod.FitOption </td> <td> 
         
        Cubic </td> </tr> 

        <tr><td> 
         
        CurveFitMethod.MaximumDegree </td> <td> 
         
        7 </td> </tr> 

        <tr><td> 
         
        CurveFitMethod.MaximumSegments </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        DraftAngle.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        DraftHeight.Value </td> <td> 
         
        5.0 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        ExtendFactor </td> <td> 
         
        1.0 </td> </tr> 

        <tr><td> 
         
        GroupObjects </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        InputCurvesOptions.Associative </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        LawControl.EndValue.Value </td> <td> 
         
        5.0 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        LawControl.Function </td> <td> 
         
        ft </td> </tr> 

        <tr><td> 
         
        LawControl.LawType </td> <td> 
         
        Constant </td> </tr> 

        <tr><td> 
         
        LawControl.Parameter </td> <td> 
         
        t </td> </tr> 

        <tr><td> 
         
        LawControl.StartValue.Value </td> <td> 
         
        5.0 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        LawControl.Value.Value </td> <td> 
         
        5.0 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        NumberOfCopies </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Offset3dDistance.Value </td> <td> 
         
        5.0 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        OffsetDistance.Value </td> <td> 
         
        5.0 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        RoughOffset </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        TrimMethod </td> <td> 
         
        ExtendTangents </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        Distance </td> </tr> 

        </table>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  OffsetCurveBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Represents the Offset Curve trim option */
            public: enum TrimOption
            {
                TrimOptionNone/** None */,
                TrimOptionExtendTangents/** Extend Tangents */,
                TrimOptionFillet/** Fillet */
            };

            /** Represents the Offset Curve types */
            public: enum Types
            {
                TypesDistance/** Distance */,
                TypesDraft/** Draft */,
                TypesLawControl/** Law Control */,
                TypesAxial3d/** 3D Axial */
            };

            private: OffsetCurveBuilderImpl * m_offsetcurvebuilder_impl;
            private: friend class  _OffsetCurveBuilderBuilder;
            protected: OffsetCurveBuilder();
            public: ~OffsetCurveBuilder();
            /**Returns  the offset type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::OffsetCurveBuilder::Types Type
            (
            );
            /**Sets  the offset type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetType
            (
                NXOpen::Features::OffsetCurveBuilder::Types type /** type */ 
            );
            /**Returns  the curves to offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * CurvesToOffset
            (
            );
            /**Returns  the point on offset plane 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PointOnOffsetPlane
            (
            );
            /**Sets  the point on offset plane 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetPointOnOffsetPlane
            (
                NXOpen::Point * pointOnOffsetPlane /** pointonoffsetplane */ 
            );
            /**Returns  the distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetDistance
            (
            );
            /**Returns  the height 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DraftHeight
            (
            );
            /**Returns  the angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DraftAngle
            (
            );
            /**Returns  the Law builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * LawControl
            (
            );
            /**Returns  the offset3d 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Offset3dDistance
            (
            );
            /**Returns  the direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * AxialOffsetDirection
            (
            );
            /**Sets  the direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetAxialOffsetDirection
            (
                NXOpen::Direction * direction /** direction */ 
            );
            /**Returns  the number of copies 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfCopies
            (
            );
            /**Sets  the number of copies 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetNumberOfCopies
            (
                int numberOfCopies /** numberofcopies */ 
            );
            /**Returns  the reverse direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the input curves 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveOptions * InputCurvesOptions
            (
            );
            /**Returns  the trim 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::OffsetCurveBuilder::TrimOption TrimMethod
            (
            );
            /**Sets  the trim 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetTrimMethod
            (
                NXOpen::Features::OffsetCurveBuilder::TrimOption trim /** trim */ 
            );
            /**Returns  the extend factor 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double ExtendFactor
            (
            );
            /**Sets  the extend factor 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetExtendFactor
            (
                double extendFactor /** extendfactor */ 
            );
            /**Returns  the group objects 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool GroupObjects
            (
            );
            /**Sets  the group objects 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetGroupObjects
            (
                bool groupObjects /** groupobjects */ 
            );
            /**Returns  the rough offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool RoughOffset
            (
            );
            /**Sets  the rough offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetRoughOffset
            (
                bool roughOffset /** roughoffset */ 
            );
            /**Returns  the curve fit method 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveFitOptions * CurveFitMethod
            (
            );
            /**Returns  the curve fit settings 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveFitData * CurveFitData
            (
            );
            /**Returns  the distance tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the distance tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /** To compute offset direction. To compute offset direction whenever it is required or needs to be updated. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void ComputeOffsetDirection
            (
                NXOpen::Vector3d* offsetDirection /** direction of offset */,
                NXOpen::Point3d* startPoint /** start point of direction */
            );
            /** To compute offset direction on the seed entity at the given seed point. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void ComputeOffsetDirection
            (
                NXOpen::ICurve * seedEntity /** seed entity that is part of section of offset curve builder */,
                const NXOpen::Point3d & seedPoint /** seed point on the seed entity at which to compute the offset direction */,
                NXOpen::Vector3d* offsetDirection /** direction of offset at seed point on seed entity */,
                NXOpen::Point3d* startPoint /** start point of entities in section of offset curve */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
