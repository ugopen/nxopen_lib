#ifndef NXOpen_MECHATRONICS_DISPLAYCHANGERBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_DISPLAYCHANGERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_DisplayChangerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_DisplayChangerBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class DisplayChangerBuilder;
    }
    class Builder;
    namespace Mechatronics
    {
        class SelectCollisionSensor;
    }
    namespace Mechatronics
    {
        class _DisplayChangerBuilderBuilder;
        class DisplayChangerBuilderImpl;
        /** Represents a @link NXOpen::Mechatronics::DisplayChanger NXOpen::Mechatronics::DisplayChanger@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Mechatronics::DisplayChangerCollection::CreateDisplayChangerBuilder  NXOpen::Mechatronics::DisplayChangerCollection::CreateDisplayChangerBuilder @endlink  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  DisplayChangerBuilder : public NXOpen::Builder
        {
            /** the execute modes. */
            public: enum ExecuteModes
            {
                ExecuteModesNone/** Never execute */,
                ExecuteModesAlways/** Always execute */,
                ExecuteModesOnceOnly/** Only execute once */
            };

            private: DisplayChangerBuilderImpl * m_displaychangerbuilder_impl;
            private: friend class  _DisplayChangerBuilderBuilder;
            protected: DisplayChangerBuilder();
            public: ~DisplayChangerBuilder();
            /**Returns  the object select. This can be a @link NXOpen::Mechatronics::CollisionSensor NXOpen::Mechatronics::CollisionSensor@endlink . 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Mechatronics::SelectCollisionSensor * CollisionSensor
            (
            );
            /**Returns  the execute mode. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Mechatronics::DisplayChangerBuilder::ExecuteModes ExecuteMode
            (
            );
            /**Sets  the execute mode. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetExecuteMode
            (
                NXOpen::Mechatronics::DisplayChangerBuilder::ExecuteModes mode /** mode */ 
            );
            /**Returns  the initial color display property 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int Color
            (
            );
            /**Sets  the initial color display property 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetColor
            (
                int color /** color */ 
            );
            /**Returns  the initial translucency display property. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int Translucency
            (
            );
            /**Sets  the initial translucency display property. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetTranslucency
            (
                int translucency /** translucency */ 
            );
            /**Returns  the initial visibility display property. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool InitVisibility
            (
            );
            /**Sets  the initial visibility display property. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetInitVisibility
            (
                bool visibility /** visibility */ 
            );
            /**Returns  the name. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
