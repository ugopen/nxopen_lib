#ifndef NXOpen_FEATURES_BRIDGESURFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_BRIDGESURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_BridgeSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_BridgeSurfaceBuilder.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_CurveRangeBuilder.hxx>
#include <NXOpen/GeometricUtilities_FlowDirection.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/GeometricUtilities_Rebuild.hxx>
#include <NXOpen/GeometricUtilities_TangentMagnitudeBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class BridgeSurfaceBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class CurveRangeBuilder;
    }
    namespace GeometricUtilities
    {
        class FlowDirection;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace GeometricUtilities
    {
        class Rebuild;
    }
    namespace GeometricUtilities
    {
        class TangentMagnitudeBuilder;
    }
    class SelectNXObject;
    namespace Features
    {
        class _BridgeSurfaceBuilderBuilder;
        class BridgeSurfaceBuilderImpl;
        /**
            Represents a @link NXOpen::Features::BridgeSurface NXOpen::Features::BridgeSurface@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateBridgeSurfaceBuilder  NXOpen::Features::FeatureCollection::CreateBridgeSurfaceBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        EdgeFlowDirection.FlowDirectionType </td> <td> 
         
        NotSpecified </td> </tr> 

        <tr><td> 
         
        FirstEdgeContinuity.ContinuityType </td> <td> 
         
        G1 </td> </tr> 

        <tr><td> 
         
        FirstEdgeRange.AnchorPosition </td> <td> 
         
        Start </td> </tr> 

        <tr><td> 
         
        IsFirstEdgeLimitEndToEnd </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsSecondEdgeLimitEndToEnd </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SecondEdgeContinuity.ContinuityType </td> <td> 
         
        G1 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  BridgeSurfaceBuilder : public NXOpen::Features::FeatureBuilder
        {
            private: BridgeSurfaceBuilderImpl * m_bridgesurfacebuilder_impl;
            private: friend class  _BridgeSurfaceBuilderBuilder;
            protected: BridgeSurfaceBuilder();
            public: ~BridgeSurfaceBuilder();
            /**Returns  the first edge selection 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * FirstEdgeSelection
            (
            );
            /**Returns  the flag indicating if the first edge direction is reversed 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsFirstEdgeReversed
            (
            );
            /**Sets  the flag indicating if the first edge direction is reversed 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFirstEdgeReversed
            (
                bool isFirstEdgeReversed /** isfirstedgereversed */ 
            );
            /**Returns  the second edge selection 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SecondEdgeSelection
            (
            );
            /**Returns  the flag indicating if the second edge direction is reversed 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSecondEdgeReversed
            (
            );
            /**Sets  the flag indicating if the second edge direction is reversed 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondEdgeReversed
            (
                bool isSecondEdgeReversed /** issecondedgereversed */ 
            );
            /**Returns  the first edge continuity 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * FirstEdgeContinuity
            (
            );
            /**Returns  the flag indicating if continuity direction at first edge is reversed 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsFirstEdgeContinuityReversed
            (
            );
            /**Sets  the flag indicating if continuity direction at first edge is reversed 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFirstEdgeContinuityReversed
            (
                bool isFirstEdgeContinuityReversed /** isfirstedgecontinuityreversed */ 
            );
            /**Returns  the second edge continuity 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * SecondEdgeContinuity
            (
            );
            /**Returns  the flag indicating if continuity direction at second edge is reversed 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSecondEdgeContinuityReversed
            (
            );
            /**Sets  the flag indicating if continuity direction at second edge is reversed 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondEdgeContinuityReversed
            (
                bool isSecondEdgeContinuityReversed /** issecondedgecontinuityreversed */ 
            );
            /**Returns  the edge tangent magnitude 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::TangentMagnitudeBuilder * EdgeTangentMagnitude
            (
            );
            /**Returns  the flow direction. See @link NXOpen::GeometricUtilities::FlowDirection NXOpen::GeometricUtilities::FlowDirection@endlink  for details.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FlowDirection * EdgeFlowDirection
            (
            );
            /**Returns  the flag indicating if the start handles are linked 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsStartHandlesLinked
            (
            );
            /**Sets  the flag indicating if the start handles are linked 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartHandlesLinked
            (
                bool isStartHandlesLinked /** isstarthandleslinked */ 
            );
            /**Returns  the flag indicating if the end handles are linked 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsEndHandlesLinked
            (
            );
            /**Sets  the flag indicating if the end handles are linked 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndHandlesLinked
            (
                bool isEndHandlesLinked /** isendhandleslinked */ 
            );
            /**Returns  the flag indicating if the first edge limit is end to end 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsFirstEdgeLimitEndToEnd
            (
            );
            /**Sets  the flag indicating if the first edge limit is end to end 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFirstEdgeLimitEndToEnd
            (
                bool isFirstEdgeLimitEndToEnd /** isfirstedgelimitendtoend */ 
            );
            /**Returns  the first edge range 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveRangeBuilder * FirstEdgeRange
            (
            );
            /**Returns  the first edge offset 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * FirstEdgeOffset
            (
            );
            /**Returns  the flag indicating if the second edge limit is end to end 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSecondEdgeLimitEndToEnd
            (
            );
            /**Sets  the flag indicating if the second edge limit is end to end 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondEdgeLimitEndToEnd
            (
                bool isSecondEdgeLimitEndToEnd /** issecondedgelimitendtoend */ 
            );
            /**Returns  the second edge range 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveRangeBuilder * SecondEdgeRange
            (
            );
            /**Returns  the second edge offset 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * SecondEdgeOffset
            (
            );
            /**Returns  the surface rebuild data 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Rebuild * Rebuild
            (
            );
            /**Returns  the g0 tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double G0Tolerance
            (
            );
            /**Sets  the g0 tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetG0Tolerance
            (
                double g0Tolerance /** g0tolerance */ 
            );
            /**Returns  the g1 tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double G1Tolerance
            (
            );
            /**Sets  the g1 tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetG1Tolerance
            (
                double g1Tolerance /** g1tolerance */ 
            );
            /**Returns  the g2 tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double G2Tolerance
            (
            );
            /**Sets  the g2 tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetG2Tolerance
            (
                double g2Tolerance /** g2tolerance */ 
            );
            /** Constructs bridge surface boundary curve 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ConstructSurfaceBoundaryCurve
            (
                bool startBoundary /** True if start boundary and false if end boundary */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
