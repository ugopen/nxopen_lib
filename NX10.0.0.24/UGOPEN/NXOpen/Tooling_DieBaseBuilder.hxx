#ifndef NXOpen_TOOLING_DIEBASEBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_DIEBASEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_DieBaseBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_DieBaseBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class DieBaseBuilder;
    }
    class Builder;
    class SelectBody;
    class SelectBodyList;
    class SelectPart;
    namespace Tooling
    {
        class _DieBaseBuilderBuilder;
        class DieBaseBuilderImpl;
        /** Represents Progressive Die Wizard and Engineering Die Wizard builder to manage die base.  <br> To create a new instance of this class, use @link NXOpen::Tooling::DieBaseCollection::CreateDieBaseBuilder  NXOpen::Tooling::DieBaseCollection::CreateDieBaseBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AlongDirection </td> <td> 
         
        AlongXDirection </td> </tr> 

        <tr><td> 
         
        Catalog </td> <td> 
         
        Dme </td> </tr> 

        <tr><td> 
         
        Close </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DbEdgeDistance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DbRefPointX </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DbRefPointY </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DesignToolOpt </td> <td> 
         
        Split </td> </tr> 

        <tr><td> 
         
        DieBaseType </td> <td> 
         
        Pdw </td> </tr> 

        <tr><td> 
         
        FirstLength </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        GapFirst </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        GapSecond </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        LoadDBOnly </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        OpenDist </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ParentNode </td> <td> 
         
        Control </td> </tr> 

        <tr><td> 
         
        PlateLength </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlateWidth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PlatesNumber </td> <td> 
         
        PlateNine </td> </tr> 

        <tr><td> 
         
        Rename </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SecondLength </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SplitGap </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SplitSubSingle </td> <td> 
         
        WholeSubDiebase </td> </tr> 

        <tr><td> 
         
        StripTravelDistance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        StandardDieBase </td> </tr> 

        <tr><td> 
         
        XDistanceFirst </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        XDistanceSecond </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        YDistanceFirst </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        YDistanceSecond </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  DieBaseBuilder : public NXOpen::Builder
        {
            /** die base types. */
            public: enum Types
            {
                TypesStandardDieBase/** standard die base */,
                TypesCustomizeDieBase/** customize die base */,
                TypesDesignTools/** die base design tools */
            };

            /** parent node options. */
            public: enum ParentNodeOpt
            {
                ParentNodeOptControl/** use PDW project's control part as parent part */,
                ParentNodeOptDie/** use PDW project's die part as parent part */,
                ParentNodeOptSubFirst/** use PDW project's sub-die base as parent part */,
                ParentNodeOptSubSecond/** use PDW project's sub-die base as parent part */,
                ParentNodeOptDieBaseFirst/** use PDW project's die base part as parent part */
            };

            /** die bse types options. */
            public: enum DieBaseTypeOpt
            {
                DieBaseTypeOptPdw/** progressive die type */,
                DieBaseTypeOptSingleDie/** single die type */,
                DieBaseTypeOptCompoundDie/** compound die type */,
                DieBaseTypeOptDrawDie/** draw die type */
            };

            /** catalog options. */
            public: enum CatalogOpt
            {
                CatalogOptDme/** catalog for DME */,
                CatalogOptFutaba/** catalog for FUTABA */
            };

            /** plates number options. */
            public: enum PlatesNumberOpt
            {
                PlatesNumberOptPlateFive/** plates number is 5 */,
                PlatesNumberOptPlateEight/** plates number is 8 */,
                PlatesNumberOptPlateNine/** plates number is 9 */,
                PlatesNumberOptPlateTen/** plates number is 10 */,
                PlatesNumberOptPlateTwelve/** plates number is 12 */
            };

            /** design tool options. */
            public: enum DesignToolOption
            {
                DesignToolOptionSplit/** split sub die base */,
                DesignToolOptionMerge/** merge sub die base */,
                DesignToolOptionAlign/** align sub die base */,
                DesignToolOptionAdjust/** adjust length of sub die base */,
                DesignToolOptionSave/** save sub die base as template */,
                DesignToolOptionDelete/** delete selected die base */
            };

            /** along direction options. */
            public: enum AlongDirectionOpt
            {
                AlongDirectionOptAlongXDirection/** along X direction */,
                AlongDirectionOptAlongYDirection/** along Y direction */
            };

            /** split method. */
            public: enum SplitMethod
            {
                SplitMethodWholeSubDiebase/** select whole sub-diebase */,
                SplitMethodSinglePlate/** select single plate */
            };

            private: DieBaseBuilderImpl * m_diebasebuilder_impl;
            private: friend class  _DieBaseBuilderBuilder;
            protected: DieBaseBuilder();
            public: ~DieBaseBuilder();
            /**Returns  the die base type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieBaseBuilder::Types Type
            (
            );
            /**Sets  the die base type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::DieBaseBuilder::Types type /** type */ 
            );
            /**Returns  the selected die base. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * DieBase
            (
            );
            /**Returns  the parent node. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieBaseBuilder::ParentNodeOpt ParentNode
            (
            );
            /**Sets  the parent node. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetParentNode
            (
                NXOpen::Tooling::DieBaseBuilder::ParentNodeOpt parentNode /** parentnode */ 
            );
            /**Returns  the parent part name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ParentPartName
            (
            );
            /**Sets  the parent part name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetParentPartName
            (
                const NXString & parentPart /** Specifies the parent part name */
            );
            /**Sets  the parent part name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetParentPartName
            (
                const char * parentPart /** Specifies the parent part name */
            );
            /**Returns  the new die base part name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewDieBaseName
            (
            );
            /**Sets  the new die base part name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetNewDieBaseName
            (
                const NXString & dieBaseName /** Specifies the new die base name */
            );
            /**Sets  the new die base part name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetNewDieBaseName
            (
                const char * dieBaseName /** Specifies the new die base name */
            );
            /**Returns  the die base type( progressive die, single die, draw die or compound die). 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieBaseBuilder::DieBaseTypeOpt DieBaseType
            (
            );
            /**Sets  the die base type( progressive die, single die, draw die or compound die). 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetDieBaseType
            (
                NXOpen::Tooling::DieBaseBuilder::DieBaseTypeOpt dieBaseType /** diebasetype */ 
            );
            /**Returns  the die base catalog. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieBaseBuilder::CatalogOpt Catalog
            (
            );
            /**Sets  the die base catalog. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetCatalog
            (
                NXOpen::Tooling::DieBaseBuilder::CatalogOpt catalog /** catalog */ 
            );
            /**Returns  the user defined plates number.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieBaseBuilder::PlatesNumberOpt PlatesNumber
            (
            );
            /**Sets  the user defined plates number.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetPlatesNumber
            (
                NXOpen::Tooling::DieBaseBuilder::PlatesNumberOpt platesNumber /** platesnumber */ 
            );
            /** The action to pick work area for die base. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void PickArea
            (
            );
            /** The action to specify the reference point for the die base 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void RefPoint
            (
            );
            /** The action to edit die base register file. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DieBaseReg
            (
            );
            /** The action to edit die base data file. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DieBaseData
            (
            );
            /**Returns  the distance to die base edge.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DbEdgeDistance
            (
            );
            /**Sets  the distance to die base edge.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetDbEdgeDistance
            (
                double dbEdgeDistance /** dbedgedistance */ 
            );
            /**Returns  the X coordinates of reference point.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DbRefPointX
            (
            );
            /**Sets  the X coordinates of reference point.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetDbRefPointX
            (
                double dbRefPointX /** dbrefpointx */ 
            );
            /**Returns  the Y coordinates of reference point.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DbRefPointY
            (
            );
            /**Sets  the Y coordinates of reference point.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetDbRefPointY
            (
                double dbRefPointY /** dbrefpointy */ 
            );
            /**Returns  the option whether load die base only or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool LoadDBOnly
            (
            );
            /**Sets  the option whether load die base only or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetLoadDBOnly
            (
                bool loadDBOnly /** loaddbonly */ 
            );
            /**Returns  the option whether rename the die base or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool Rename
            (
            );
            /**Sets  the option whether rename the die base or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetRename
            (
                bool rename /** rename */ 
            );
            /**Returns  the plate length value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateLength
            (
            );
            /**Sets  the plate length value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetPlateLength
            (
                double plateLength /** platelength */ 
            );
            /**Returns  the plate width value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PlateWidth
            (
            );
            /**Sets  the plate width value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetPlateWidth
            (
                double plateWidth /** platewidth */ 
            );
            /**Returns  the strip travel distance value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double StripTravelDistance
            (
            );
            /**Sets  the strip travel distance value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetStripTravelDistance
            (
                double stripTravelDistance /** striptraveldistance */ 
            );
            /**Returns  the first distance along X value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double XDistanceFirst
            (
            );
            /**Sets  the first distance along X value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetXDistanceFirst
            (
                double xDistanceFirst /** xdistancefirst */ 
            );
            /**Returns  the second distance along X value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double XDistanceSecond
            (
            );
            /**Sets  the second distance along X value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetXDistanceSecond
            (
                double xDistanceSecond /** xdistancesecond */ 
            );
            /**Returns  the first distance along Y value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double YDistanceFirst
            (
            );
            /**Sets  the first distance along Y value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetYDistanceFirst
            (
                double yDistanceFirst /** ydistancefirst */ 
            );
            /**Returns  the second distance along Y value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double YDistanceSecond
            (
            );
            /**Sets  the second distance along Y value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetYDistanceSecond
            (
                double dySecond /** dysecond */ 
            );
            /**Returns  the die close status value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Close
            (
            );
            /**Sets  the die close status value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetClose
            (
                double close /** close */ 
            );
            /**Returns  the first gap value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double GapFirst
            (
            );
            /**Sets  the first gap value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetGapFirst
            (
                double gapFirst /** gapfirst */ 
            );
            /**Returns  the second gap value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double GapSecond
            (
            );
            /**Sets  the second gap value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetGapSecond
            (
                double gapSecond /** gapsecond */ 
            );
            /**Returns  the open distance value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OpenDist
            (
            );
            /**Sets  the open distance value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetOpenDist
            (
                double openDist /** opendist */ 
            );
            /**Returns  the selected sub die base part. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectPart * SelectSubDieBase
            (
            );
            /**Returns  the selected die plates. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectPart * SelectPlateToSplit
            (
            );
            /**Returns  the design tool options. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieBaseBuilder::DesignToolOption DesignToolOpt
            (
            );
            /**Sets  the design tool options. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetDesignToolOpt
            (
                NXOpen::Tooling::DieBaseBuilder::DesignToolOption designToolOpt /** designtoolopt */ 
            );
            /**Returns  the direction options. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieBaseBuilder::AlongDirectionOpt AlongDirection
            (
            );
            /**Sets  the direction options. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetAlongDirection
            (
                NXOpen::Tooling::DieBaseBuilder::AlongDirectionOpt alongDirection /** alongdirection */ 
            );
            /**Returns  the split options: whole sub die base or single plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieBaseBuilder::SplitMethod SplitSubSingle
            (
            );
            /**Sets  the split options: whole sub die base or single plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetSplitSubSingle
            (
                NXOpen::Tooling::DieBaseBuilder::SplitMethod splitSubSingle /** splitsubsingle */ 
            );
            /** The action to pick split location. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void PickSplitLocation
            (
            );
            /**Returns  the first section length. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double FirstLength
            (
            );
            /**Sets  the first section length. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetFirstLength
            (
                double firstLength /** firstlength */ 
            );
            /**Returns  the second section length. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double SecondLength
            (
            );
            /**Sets  the second section length. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetSecondLength
            (
                double secondLength /** secondlength */ 
            );
            /** The action to pick location for die base. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void PickLocation
            (
            );
            /**Returns  the plate length value.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double AdjustedPlateLength
            (
            );
            /**Sets  the plate length value.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetAdjustedPlateLength
            (
                double adjustedPlateLength /** adjustedplatelength */ 
            );
            /**Returns  the split gap value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double SplitGap
            (
            );
            /**Sets  the split gap value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetSplitGap
            (
                double splitGap /** splitgap */ 
            );
            /**Returns  the selected die base to delete. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * DieBaseToDelete
            (
            );
            /** The action to delete selected die base. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteSelectedDieBase
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
