#ifndef NXOpen_TOOLING_REMOVEHOLESBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_REMOVEHOLESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_RemoveHolesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Tooling_RemoveHolesBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class RemoveHolesBuilder;
    }
    class Builder;
    class Edge;
    class Face;
    class NXObject;
    class ScCollector;
    namespace Tooling
    {
        class _RemoveHolesBuilderBuilder;
        class RemoveHolesBuilderImpl;
        /**Remove Hole is used to patch holes for a solid body. It returns a delete face 
            feature tag when success and NULL_TAG when fail.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateRemoveHolesBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateRemoveHolesBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        MergeOutput </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SelectionType </td> <td> 
         
        Body </td> </tr> 

        </table>  

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  RemoveHolesBuilder : public NXOpen::Builder
        {
            /** select object types, body or face */
            public: enum SelectionTypes
            {
                SelectionTypesBody/** select body type */,
                SelectionTypesFace/** select face type */
            };

            private: RemoveHolesBuilderImpl * m_removeholesbuilder_impl;
            private: friend class  _RemoveHolesBuilderBuilder;
            protected: RemoveHolesBuilder();
            public: ~RemoveHolesBuilder();
            /**Returns  the selection type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::RemoveHolesBuilder::SelectionTypes SelectionType
            (
            );
            /**Sets  the selection type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectionType
            (
                NXOpen::Tooling::RemoveHolesBuilder::SelectionTypes selType /** seltype */ 
            );
            /**Returns  the body selection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BodySelection
            (
            );
            /**Returns  the face to patch 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FaceToPatch
            (
            );
            /**Returns  the hole faces 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * HoleFace
            (
            );
            /** Add the hole data 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AddHolesData
            (
                const std::vector<NXOpen::Edge *> & edges /** the edges of the holes information*/,
                const std::vector<NXOpen::Face *> & faces /**  the faces of the holes information*/
            );
            /** Set object highlight or unhighlight. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHighlight
            (
                NXOpen::NXObject * object /** the object to highlight or unhighlight. */,
                bool highlight /**  the status to highlight or unhighlight. */
            );
            /** Remove the hole from hole data from builder. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void RemoveHoleData
            (
                const NXString & holeName /** the hole name */
            );
            /** Remove the hole from hole data from builder. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void RemoveHoleData
            (
                const char * holeName /** the hole name */
            );
            /** Clear all the hole data that was input to the builder. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ClearHoleData
            (
            );
            /**Returns  the reduce number of output features setting 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool MergeOutput
            (
            );
            /**Sets  the reduce number of output features setting 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMergeOutput
            (
                bool mergeOutput /** mergeoutput */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
