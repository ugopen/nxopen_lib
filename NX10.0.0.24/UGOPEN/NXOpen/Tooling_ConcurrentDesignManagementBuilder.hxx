#ifndef NXOpen_TOOLING_CONCURRENTDESIGNMANAGEMENTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_CONCURRENTDESIGNMANAGEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ConcurrentDesignManagementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_ConcurrentDesignManagementBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ConcurrentDesignManagementBuilder;
    }
    namespace Assemblies
    {
        class SelectComponent;
    }
    class Builder;
    namespace Tooling
    {
        class _ConcurrentDesignManagementBuilderBuilder;
        class ConcurrentDesignManagementBuilderImpl;
        /** Represents a @link NXOpen::Tooling::ConcurrentDesignManagementBuilder NXOpen::Tooling::ConcurrentDesignManagementBuilder@endlink  to support concurrent design workflow management.  <br> To create a new instance of this class, use @link NXOpen::Tooling::WorkflowManagementCollection::CreateConcurrentDesignManagementBuilder  NXOpen::Tooling::WorkflowManagementCollection::CreateConcurrentDesignManagementBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        SetAsMyDefaultTask </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UpdateOptions </td> <td> 
         
        SaveMyComponents </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ConcurrentDesignManagementBuilder : public NXOpen::Builder
        {
            /** Specifies the types of concurrent design management. */
            public: enum Types
            {
                TypesDesignerLogin/** the designer login page */,
                TypesTaskAssignment/** the task assignment page */,
                TypesSaveAndUpdate/** the save and update page */
            };

            /** Specifies the types of the update action. */
            public: enum UpdateTypes
            {
                UpdateTypesSaveMyComponents/** the save my components action */,
                UpdateTypesUpdateOtherComponents/** the update other components action */
            };

            private: ConcurrentDesignManagementBuilderImpl * m_concurrentdesignmanagementbuilder_impl;
            private: friend class  _ConcurrentDesignManagementBuilderBuilder;
            protected: ConcurrentDesignManagementBuilder();
            public: ~ConcurrentDesignManagementBuilder();
            /**Returns  the project leader name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ProjectLeader
            (
            );
            /**Sets  the project leader name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetProjectLeader
            (
                const NXString & projectLeader /** projectleader */ 
            );
            /**Sets  the project leader name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetProjectLeader
            (
                const char * projectLeader /** projectleader */ 
            );
            /**Returns  the user name to login. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString UserName
            (
            );
            /**Sets  the user name to login. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetUserName
            (
                const NXString & userName /** username */ 
            );
            /**Sets  the user name to login. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetUserName
            (
                const char * userName /** username */ 
            );
            /**Returns  the selected component to assign to a designer. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponent * SelectComponent
            (
            );
            /**Returns  the designer name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DesignerName
            (
            );
            /**Sets  the designer name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetDesignerName
            (
                const NXString & designerName /** designername */ 
            );
            /**Sets  the designer name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetDesignerName
            (
                const char * designerName /** designername */ 
            );
            /**Returns  the task description string 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TaskDescription
            (
            );
            /**Sets  the task description string 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetTaskDescription
            (
                const NXString & taskDescription /** taskdescription */ 
            );
            /**Sets  the task description string 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetTaskDescription
            (
                const char * taskDescription /** taskdescription */ 
            );
            /**Returns  the option to set as the current user's default task. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool SetAsMyDefaultTask
            (
            );
            /**Sets  the option to set as the current user's default task. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetSetAsMyDefaultTask
            (
                bool setAsMyDefaultTask /** setasmydefaulttask */ 
            );
            /**Returns  the update type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ConcurrentDesignManagementBuilder::UpdateTypes UpdateOptions
            (
            );
            /**Sets  the update type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetUpdateOptions
            (
                NXOpen::Tooling::ConcurrentDesignManagementBuilder::UpdateTypes updateOptions /** updateoptions */ 
            );
            /**Returns  the type of concurrent design management. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ConcurrentDesignManagementBuilder::Types Type
            (
            );
            /**Sets  the type of concurrent design management. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::ConcurrentDesignManagementBuilder::Types type /** type */ 
            );
            /**Returns  the designer names. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DesignTasks
            (
            );
            /**Sets  the designer names. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetDesignTasks
            (
                const NXString & designTasks /** designtasks */ 
            );
            /**Sets  the designer names. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetDesignTasks
            (
                const char * designTasks /** designtasks */ 
            );
            /**Returns  the index of the selected designer. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int SelectedDesignerIndex
            (
            );
            /**Sets  the index of the selected designer. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetSelectedDesignerIndex
            (
                int selectedDesignerIndex /** selecteddesignerindex */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
