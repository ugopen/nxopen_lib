#ifndef NXOpen_RESOURCEBARMANAGER_HXX_INCLUDED
#define NXOpen_RESOURCEBARMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ResourceBarManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/WindowHandle.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ResourceBarManager;
    class UI;
    class WindowHandle;
    class ResourceBarManagerImpl;
    /** Represents an interface to manage Resource Bar tabs.
        The class can be used to create new tabs and manage the visibility and activation state of these tabs on the Resource Bar.
     <br> To obtain an instance of this class, refer to @link NXOpen::UI  NXOpen::UI @endlink  <br> 
     <br>  Created in NX10.0.0.  <br>  
    */
    class NXOPENUICPPEXPORT  ResourceBarManager
    {
        public: /** Prototype for the callback used to activate a tab page. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<int, int> ActivationCallback;
        private: ResourceBarManagerImpl * m_resourcebarmanager_impl;
        private: NXOpen::UI* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit ResourceBarManager(NXOpen::UI *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~ResourceBarManager();
        /** Create a tab by registering the tab data. 
                The new tab will show up right away if the Resource Bar is currently visible.
             @return  The unique tab id for the registered tab 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: int Create
        (
            const NXString & tabTitle /** Tab title. This title will be displayed in tooltip as well */,
            const NXString & tabIcon /** Tab bitmap. User can specify a NX bitmap or a new bitmap with path */
        );
        /** Create a tab by registering the tab data. 
                The new tab will show up right away if the Resource Bar is currently visible.
             @return  The unique tab id for the registered tab 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        int Create
        (
            const char * tabTitle /** Tab title. This title will be displayed in tooltip as well */,
            const char * tabIcon /** Tab bitmap. User can specify a NX bitmap or a new bitmap with path */
        );
        /** Register a callback which will be called whenever a custom tab is about to be activated.  @return  Identifier of registered callback 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: int RegisterActivationCallback
        (
            int tabId /** A unigue tab id identifying the callback */,
            const NXOpen::ResourceBarManager::ActivationCallback&  activateTabCb /** Callback to register */
        );
        /** Activate the resource bar tab. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void ActivateTab
        (
            int tabId /** The unique tab id */
        );
        /** Return a NX docking window associated with the given tab id. 
                The docking window will be created only when the custom tab is being activated. 
                Applications can use the docking window as the parent window to host their child window in resource bar area.
             @return  The tab window associated with the given tab id 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::WindowHandle * GetWindowHandle
        (
            int tabId /** The unique tab id */
        );
        /** Set the visibility of the tab in the resource bar area.
                The tab is visible by default when it gets created.
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTabVisibility
        (
            int tabId /** The unique tab id */,
            bool visible /** Turn the tab's visibility on or off */
        );
        /** Remove and destroy the tab asscociated with the given tab id from the resource bar area. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void Destroy
        (
            int tabId /** The unique tab id */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
