#ifndef NXOpen_PLOTBUILDER_HXX_INCLUDED
#define NXOpen_PLOTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PlotBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PlotBuilder.hxx>
#include <NXOpen/PlotColorsWidthsBuilder.hxx>
#include <NXOpen/PlotSourceBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class PlotBuilder;
    class Builder;
    class PlotColorsWidthsBuilder;
    class PlotSourceBuilder;
    class _PlotBuilderBuilder;
    class PlotBuilderImpl;
    /**
        Represents a @link NXOpen::PlotBuilder NXOpen::PlotBuilder@endlink .  This class contains all information relating to
        plotting.  The user must specify the sheets to be plotted by setting the appropriate fields 
        through the @link NXOpen::PlotSourceBuilder NXOpen::PlotSourceBuilder@endlink .  For each sheet selected, a temporary CGM 
        file name must be supplied.  Once the sheets are selected, the user must set the plotter and 
        profile fields.  If the plotter selected is an image file (JPEG, TIFF, EMF, CGM, or PNG), then 
        a graphic filename must also be supplied for each sheet selected.  The PlotBuilder class also 
        handles all Banner data and Manufacturing data to be used during plotting.  This class is created 
        using @link NXOpen::PlotManager NXOpen::PlotManager@endlink .
         <br> To create a new instance of this class, use @link NXOpen::PlotManager::CreatePlotBuilder  NXOpen::PlotManager::CreatePlotBuilder @endlink  <br> 
     <br>  Created in NX5.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  PlotBuilder : public NXOpen::Builder
    {
        /** Specifies the type of plot */
        public: enum PlotTypes
        {
            PlotTypesStandard/** Standard Plot */,
            PlotTypesUsingLayout/** Plot Using a Layout */
        };

        /** Specifies which units are associated to the dimensions */
        public: enum UnitsOption
        {
            UnitsOptionMetric/** Metric */,
            UnitsOptionEnglish/** English */
        };

        /** Specifies the x-coordinate for the banner location */
        public: enum XdisplayOption
        {
            XdisplayOptionLeft/** X dimension left */,
            XdisplayOptionCenter/** X dimension center */,
            XdisplayOptionRight/** X dimension right */
        };

        /** Specifies the y-coordinate for the banner location */
        public: enum YdisplayOption
        {
            YdisplayOptionBottom/** Y dimension bottom */,
            YdisplayOptionCenter/** Y dimension center */,
            YdisplayOptionTop/** Y dimension top */
        };

        /** Specifies the rotation of the banner */
        public: enum RotationOption
        {
            RotationOptionDegree0/** 0 degree rotation */,
            RotationOptionDegree90/** 90 degree rotation */,
            RotationOptionDegree180/** 180 degree rotation */,
            RotationOptionDegree270/** 270 degree rotation */
        };

        /** Specifies the justification of the banner */
        public: enum JustificationOption
        {
            JustificationOptionLeft/** Left Justify */,
            JustificationOptionCenter/** Center Justify */,
            JustificationOptionRight/** Right Justify */
        };

        /** Specifies the plot image resolution */
        public: enum ImageResolutionOption
        {
            ImageResolutionOptionDraft/** Draft Resolution */,
            ImageResolutionOptionLow/** Low Resolution */,
            ImageResolutionOptionMedium/** Medium Resolution */,
            ImageResolutionOptionHigh/** High Resolution */
        };

        private: PlotBuilderImpl * m_plotbuilder_impl;
        private: friend class  _PlotBuilderBuilder;
        protected: PlotBuilder();
        public: ~PlotBuilder();
        /**Returns  the type of plot.  This can be Standard or Plot Using a Layout. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PlotBuilder::PlotTypes PlotType
        (
        );
        /**Sets  the type of plot.  This can be Standard or Plot Using a Layout. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPlotType
        (
            NXOpen::PlotBuilder::PlotTypes plotType /** plottype */ 
        );
        /** Add Plot to Layout.  This routine adds a sheet to the plot layout. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void AddToPlotLayout
        (
        );
        /** Clear Plot from Layout.  This routine clears all sheets from the plot layout. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void ClearPlotLayout
        (
        );
        /**Returns  the display banner.  If true, the specified banner options will be used in adding
                    a banner to the plot.  If false, no banner will be used to plot. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool DisplayBanner
        (
        );
        /**Sets  the display banner.  If true, the specified banner options will be used in adding
                    a banner to the plot.  If false, no banner will be used to plot. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDisplayBanner
        (
            bool displayBanner /** displaybanner */ 
        );
        /**Returns  the banner message.  This text field will be added to the banner if Display
                    Banner is set to true. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString BannerMessage
        (
        );
        /**Sets  the banner message.  This text field will be added to the banner if Display
                    Banner is set to true. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetBannerMessage
        (
            const NXString & bannerMessage /** bannermessage */ 
        );
        /**Sets  the banner message.  This text field will be added to the banner if Display
                    Banner is set to true. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetBannerMessage
        (
            const char * bannerMessage /** bannermessage */ 
        );
        /**Returns  the units used to create the banner.  The units can be either English or
                    Metric and they pertain to the X-offset, the Y-offset, and the character
                    size when creating a banner. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PlotBuilder::UnitsOption Units
        (
        );
        /**Sets  the units used to create the banner.  The units can be either English or
                    Metric and they pertain to the X-offset, the Y-offset, and the character
                    size when creating a banner. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUnits
        (
            NXOpen::PlotBuilder::UnitsOption units /** units */ 
        );
        /**Returns  the X coordinate of a banner.  If Display Banner is true, the
                    X and Y coordinates will determine where the banner will appear when plotting. 
                    This can be set to Left, Center, or Right.  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PlotBuilder::XdisplayOption XDisplay
        (
        );
        /**Sets  the X coordinate of a banner.  If Display Banner is true, the
                    X and Y coordinates will determine where the banner will appear when plotting. 
                    This can be set to Left, Center, or Right.  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetXDisplay
        (
            NXOpen::PlotBuilder::XdisplayOption xDisplay /** xdisplay */ 
        );
        /**Returns  the X coordinate offset of a banner.  If Display Banner is true, the X offset
                    will be used as the offset value in combination with the X coordinate to determine 
                    where the banner will appear when plotting. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: double XOffset
        (
        );
        /**Sets  the X coordinate offset of a banner.  If Display Banner is true, the X offset
                    will be used as the offset value in combination with the X coordinate to determine 
                    where the banner will appear when plotting. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetXOffset
        (
            double xOffset /** xoffset */ 
        );
        /**Returns  the Y coordinate of a banner.  If Display Banner is true, the
                    X and Y coordinates will determine where the banner will appear when plotting. 
                    This can be set to Bottom, Center, or Top.  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PlotBuilder::YdisplayOption YDisplay
        (
        );
        /**Sets  the Y coordinate of a banner.  If Display Banner is true, the
                    X and Y coordinates will determine where the banner will appear when plotting. 
                    This can be set to Bottom, Center, or Top.  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetYDisplay
        (
            NXOpen::PlotBuilder::YdisplayOption yDisplay /** ydisplay */ 
        );
        /**Returns  the Y coordinate offset of a banner.  If Display Banner is true, the Y offset
                    will be used as the offset value in combination with the Y coordinate to determine 
                    where the banner will appear when plotting. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: double YOffset
        (
        );
        /**Sets  the Y coordinate offset of a banner.  If Display Banner is true, the Y offset
                    will be used as the offset value in combination with the Y coordinate to determine 
                    where the banner will appear when plotting. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetYOffset
        (
            double yOffset /** yoffset */ 
        );
        /**Returns  the character size of the banner.  If Display Banner is true, the character size
                    value will be used to determine the size of the banner text. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: double CharacterSize
        (
        );
        /**Sets  the character size of the banner.  If Display Banner is true, the character size
                    value will be used to determine the size of the banner text. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCharacterSize
        (
            double characterSize /** charactersize */ 
        );
        /**Returns  the rotation of the banner.  This can be set to 0, 90, 180, or 270 and will determine
                    the rotation of the banner if Display Banner is true. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PlotBuilder::RotationOption Rotation
        (
        );
        /**Sets  the rotation of the banner.  This can be set to 0, 90, 180, or 270 and will determine
                    the rotation of the banner if Display Banner is true. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetRotation
        (
            NXOpen::PlotBuilder::RotationOption rotation /** rotation */ 
        );
        /**Returns  the justification of the banner text.  If Display Banner is true, the justification
                    will be used to position the banner text.  This can be set to Left Justify, Center
                    Justify, or Right Justify. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PlotBuilder::JustificationOption Justification
        (
        );
        /**Sets  the justification of the banner text.  If Display Banner is true, the justification
                    will be used to position the banner text.  This can be set to Left Justify, Center
                    Justify, or Right Justify. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetJustification
        (
            NXOpen::PlotBuilder::JustificationOption justification /** justification */ 
        );
        /** Saves the selected sheets as CGM files. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SaveCgm
        (
        );
        /** Initialize the SDI dialog. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void AdvancedPlot
        (
        );
        /**Returns  the number of copies to be plotted.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: int Copies
        (
        );
        /**Sets  the number of copies to be plotted.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCopies
        (
            int copies /** copies */ 
        );
        /**Returns  the job name to be used for plotting. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString JobName
        (
        );
        /**Sets  the job name to be used for plotting. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetJobName
        (
            const NXString & jobName /** jobname */ 
        );
        /**Sets  the job name to be used for plotting. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetJobName
        (
            const char * jobName /** jobname */ 
        );
        /**Returns  the plotting tolerance.  The tolerance is a unitless value that controls
                    the accuracy or smoothness of plotted curve geometry.  Values must be greater
                    than or equal to 0.0001.  Smaller values produce smoother curves. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: double Tolerance
        (
        );
        /**Sets  the plotting tolerance.  The tolerance is a unitless value that controls
                    the accuracy or smoothness of plotted curve geometry.  Values must be greater
                    than or equal to 0.0001.  Smaller values produce smoother curves. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTolerance
        (
            double tolerance /** tolerance */ 
        );
        /**Returns  the option to plot clsf data.  If clsf data is true, the current clsf data
                    will be included in the plot. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool ClsfData
        (
        );
        /**Sets  the option to plot clsf data.  If clsf data is true, the current clsf data
                    will be included in the plot. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetClsfData
        (
            bool clsfData /** clsfdata */ 
        );
        /**Returns  the raster images option.  This option determines whether or not raster images will
                    be used when plotting. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool RasterImages
        (
        );
        /**Sets  the raster images option.  This option determines whether or not raster images will
                    be used when plotting. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetRasterImages
        (
            bool rasterImages /** rasterimages */ 
        );
        /**Returns  the shaded geometry as wireframe option.  If set to true, this option will show 
                    shaded objects as wireframes.  The shaded objects will be represented as shaded 
                    if this option is set to false. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool ShadedGeometry
        (
        );
        /**Sets  the shaded geometry as wireframe option.  If set to true, this option will show 
                    shaded objects as wireframes.  The shaded objects will be represented as shaded 
                    if this option is set to false. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetShadedGeometry
        (
            bool shadedGeometry /** shadedgeometry */ 
        );
        /**Returns  the Colors Widths builder.  The Colors Widths builder contains all information
                    relating to both colors and widths. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PlotColorsWidthsBuilder * ColorsWidthsBuilder
        (
        );
        /**Returns  the Source builder.  The Source builder contains all data involving the sheets to
                    to be plotted. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PlotSourceBuilder * SourceBuilder
        (
        );
        /** Gets all the temporary CGM filenames to be plotted.  This list will contain the full
                    path of the temporary CGM file to be used during plotting.  This list must equal the
                    number of sheets selected to plot and these files will be deleted after the plotting
                    operation is finished.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetFilenames
        (
        );
        /** Sets all the temporary CGM filenames to be plotted.  This list will contain the full
                    path of the temporary CGM file to be used during plotting.  This list must equal the
                    number of sheets selected to plot and the files will be deleted after the plotting
                    operation is finished. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFilenames
        (
            std::vector<NXString> & filenames /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Gets all the Graphic filenames to be saved.  If the plotter selected is an image type 
                    (JPEG, CGM, TIFF, EMF, or PNG) then the graphic filenames text list will contain the
                    full path of where these images will be saved to disk.  This list must equal the number
                    of sheets selected to plot.  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetGraphicFilenames
        (
        );
        /** Sets all the Graphic filenames to be saved.  If the plotter selected is an image type 
                    (JPEG, CGM, TIFF, EMF, or PNG) then the graphic filenames text list will contain the
                    full path of where these images will be saved to disk.  This list must equal the number
                    of sheets selected to plot. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetGraphicFilenames
        (
            std::vector<NXString> & filenames /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  the plotter text.  The plotter field represents which plotter the user wishes to plot to, it
                    can be an available printer or an image type (JPEG, CGM, TIFF, EMF, or PNG).  If the plotter
                    is a printer, then the appropriate printer group containing the chosen printer must also 
                    be set. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString PlotterText
        (
        );
        /**Sets  the plotter text.  The plotter field represents which plotter the user wishes to plot to, it
                    can be an available printer or an image type (JPEG, CGM, TIFF, EMF, or PNG).  If the plotter
                    is a printer, then the appropriate printer group containing the chosen printer must also 
                    be set. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPlotterText
        (
            const NXString & plotter /** plotter */ 
        );
        /**Sets  the plotter text.  The plotter field represents which plotter the user wishes to plot to, it
                    can be an available printer or an image type (JPEG, CGM, TIFF, EMF, or PNG).  If the plotter
                    is a printer, then the appropriate printer group containing the chosen printer must also 
                    be set. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetPlotterText
        (
            const char * plotter /** plotter */ 
        );
        /**Returns  the profile text.  The profile must be a valid SDI created profile associated with the
                    current plotter. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString ProfileText
        (
        );
        /**Sets  the profile text.  The profile must be a valid SDI created profile associated with the
                    current plotter. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetProfileText
        (
            const NXString & profile /** profile */ 
        );
        /**Sets  the profile text.  The profile must be a valid SDI created profile associated with the
                    current plotter. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetProfileText
        (
            const char * profile /** profile */ 
        );
        /**Returns  the printer group text.  The printer group must be set if a printer is used as
                the plotter. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString PrinterGroupText
        (
        );
        /**Sets  the printer group text.  The printer group must be set if a printer is used as
                the plotter. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPrinterGroupText
        (
            const NXString & printerGroup /** printergroup */ 
        );
        /**Sets  the printer group text.  The printer group must be set if a printer is used as
                the plotter. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void SetPrinterGroupText
        (
            const char * printerGroup /** printergroup */ 
        );
        /**Returns  the resolution of images created for plotting shaded views. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PlotBuilder::ImageResolutionOption ImageResolution
        (
        );
        /**Sets  the resolution of images created for plotting shaded views. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetImageResolution
        (
            NXOpen::PlotBuilder::ImageResolutionOption imageResolution /** imageresolution */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
