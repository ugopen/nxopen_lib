#ifndef NXOpen_WCS_HXX_INCLUDED
#define NXOpen_WCS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     WCS.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class WCS;
    class BasePart;
    class CartesianCoordinateSystem;
    class WCSImpl;
    /** Represents the World Coordinate System.
     <br> 
    The origin coordinates and orientation matrix are always relative to
    the absolute coordinate system.
     <br> 
     <br> 
    In order to use any of the WCS methods, the display part must be
    the part that owns the WCS.
     <br> 
     <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  WCS
    {
        /** Specifies the X, Y, or Z axis */
        public: enum Axis
        {
            AxisXAxis = 1/** xaxis */ ,
            AxisYAxis/** yaxis */ ,
            AxisZAxis/** zaxis */ 
        };

        private: WCSImpl * m_wcs_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit WCS(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~WCS();
        /**Sets  the origin of the WCS 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetOrigin
        (
            const NXOpen::Point3d & origin /** origin */ 
        );
        /**Returns  the origin of the WCS 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point3d Origin
        (
        );
        /** Saves the WCS.  A new cartesian coordinate system is created in the
            <b>work</b> part, even though the WCS is owned by the display part. @return  The saved coordinate system 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::CartesianCoordinateSystem * Save
        (
        );
        /**Returns  the CartesianCoordinateSystem associated with the WCS 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::CartesianCoordinateSystem * CoordinateSystem
        (
        );
        /** Sets the origin and orientation matrix of the WCS 
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetOriginAndMatrix
        (
            const NXOpen::Point3d & origin /** Origin relative to the absolute coordinate system */,
            const NXOpen::Matrix3x3 & matrix /** Orientation relative to the absolute coordinate system.
                                             Must be orthonormal. */
        );
        /** Rotates the WCS about the specified axis.  The angle
            is in degrees. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Rotate
        (
            NXOpen::WCS::Axis rotationAxis /** Which WCS axis to rotate about (X, Y, or Z) */,
            double angle /** Angle of rotation in degrees */
        );
        /**Returns  the visibility of the WCS 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool Visibility
        (
        );
        /**Sets  the visibility of the WCS 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetVisibility
        (
            bool isVisible /** is visible */ 
        );
        /** Changes the coordinate system of the WCS to a new
            coordinate system.  The return value is the old coordinate system.
            The old coordinate system will be displayed after the WCS is moved
            to the location of the new coordinate system.  @return  The old coordinate system for the WCS 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::CartesianCoordinateSystem * SetCoordinateSystem
        (
            NXOpen::CartesianCoordinateSystem * newCs /** The new coordinate system for the WCS */
        );
        /** Creates a WCS at a new coordinate system.  The return value
             is the old coordinate system of wcs.  @return  The old coordinate system for the WCS 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::CartesianCoordinateSystem * SetCoordinateSystemCartesianAtCsys
        (
            NXOpen::CartesianCoordinateSystem * newCs /** New coordinate system location for the WCS */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
