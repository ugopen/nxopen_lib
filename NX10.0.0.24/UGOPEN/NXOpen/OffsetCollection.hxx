#ifndef NXOpen_OFFSETCOLLECTION_HXX_INCLUDED
#define NXOpen_OFFSETCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     OffsetCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/Offset.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class OffsetCollection;
    class BasePart;
    class Offset;
    class Direction;
    class Face;
    class ICurve;
    class Point;
    class Scalar;
    class SmartObject;
    class Xform;
    class OffsetCollectionImpl;
    /** @brief  Represents a collection of @link NXOpen::Offset NXOpen::Offset@endlink .  

     

    Iterating this collection only returns live uncondemned objects contained in the owning part
    of the collection. Note that @link NXOpen::Offset NXOpen::Offset@endlink  is a smart object and many smart objects are condemned as they
    only exist to support other objects and are not displayed. Condemned objects will be deleted when
    their references go away. <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  OffsetCollection : public NXOpen::TaggedObjectCollection
    {
        private: OffsetCollectionImpl * m_offsetcollection_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit OffsetCollection(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~OffsetCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::OffsetCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Offset *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::OffsetCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::OffsetCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** 
           Create an @link Offset Offset@endlink  without parameters.
            @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateOffset
        (
            const NXOpen::Point3d & origin /**  Point of Offset */,
            const NXOpen::Vector3d & vector /**  Offset vector */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
           Create an @link Offset Offset@endlink  using X, Y and Z deltas.
            @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateOffsetRectangular
        (
            NXOpen::Scalar * deltaX /** delta x */ ,
            NXOpen::Scalar * deltaY /** delta y */ ,
            NXOpen::Scalar * deltaZ /** delta z */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** 
           Creates a smart cylindrical @link Offset Offset@endlink . 
           The radius, angle, and zdelta are the three parameters of cylindrical coordinates.
            @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateOffsetCylindrical
        (
            NXOpen::Scalar * radius /** radius */ ,
            NXOpen::Scalar * angle /**  Angle in radians */,
            NXOpen::Scalar * deltaZ /**  Delta along axis of cylinder */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
           Creates a smart spherical @link Offset Offset@endlink .
           The radius, angle1, and angle2 are the three parameters of spherical coordinates.
            @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateOffsetSpherical
        (
            NXOpen::Scalar * radius /** radius */ ,
            NXOpen::Scalar * angle1 /**  Longitude angle in radians */,
            NXOpen::Scalar * angle2 /**  Colatitude angle in radians */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
           Creates an @link Offset Offset@endlink  using a Smart @link Direction Direction@endlink  and distance.
            @return   
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateOffset
        (
            NXOpen::Direction * direction /** direction */ ,
            NXOpen::Scalar * distance /** Distance along direction */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Offset Offset@endlink  on a @link ICurve ICurve@endlink  using a
               @link Scalar Scalar@endlink  representing the t parameter. The Offset created
               represents curvature of the curve at parameter t.  @return   
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateCurvature
        (
            NXOpen::ICurve * icurve /** @link Curve Curve@endlink  or @link Edge Edge@endlink  */,
            NXOpen::Scalar * t /** t */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Offset Offset@endlink  on a @link ICurve ICurve@endlink  using a
               @link Point Point@endlink . The Offset created represents curvature of the curve at a point. 
               The input point could be an extract point whose parent point is a point on curve.
               User can optionally supply a curve in which case it is honored instead of looking for the parent
               curve of the input point. In that case input point is projected on the curve to find the curvature
               at the projected location.
            @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateCurvature
        (
            NXOpen::Point * atPoint /** An extract point or a non associative point in which case  
                                                            a curve should be specified.*/,
            NXOpen::ICurve * icurve /** Optional @link Curve Curve@endlink  or @link Edge Edge@endlink  input */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Offset Offset@endlink  on a @link ICurve ICurve@endlink  using a
               @link Scalar Scalar@endlink  representing the t parameter. The Offset created
               represents curvature derivative of the curve at parameter t.   @return   
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateCurvatureDerivative
        (
            NXOpen::ICurve * icurve /** @link Curve Curve@endlink  or @link Edge Edge@endlink  */,
            NXOpen::Scalar * t /** t */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Offset Offset@endlink  on a @link ICurve ICurve@endlink  using a
               @link Point Point@endlink . The Offset created represents curvature derivative of the curve at a point.
               The input point could be an extract point whose parent point is a point on curve.
               User can optionally supply a curve in which case it is honored instead of looking for the parent
               curve of the input point. In that case input point is projected on the curve to find the curvature
               derivative at the projected location. 
             @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateCurvatureDerivative
        (
            NXOpen::Point * atPoint /** An extract point or a non associative point in which case  
                                                            a curve should be specified.*/,
            NXOpen::ICurve * icurve /** Optional @link Curve Curve@endlink  or @link Edge Edge@endlink  input */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Offset Offset@endlink  on a @link Face Face@endlink  using two 
               @link Scalar Scalar@endlink s representing the u and v parameters with option of
               direction on the face. The Offset created represents the curvature of the face 
               at u and v parameter in a direction specified by the option.  @return   
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateCurvature
        (
            NXOpen::Face * face /** face */ ,
            NXOpen::Scalar * u /** u */ ,
            NXOpen::Scalar * v /** v */ ,
            bool absoluteUv /** true if u and v are absolute parameters */,
            NXOpen::Offset::OnFaceOption option /** option */ ,
            NXOpen::Direction * sectionDirection /** necessary when option is @link Offset::OnFaceOptionSection Offset::OnFaceOptionSection@endlink  */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Offset Offset@endlink  on a @link Face Face@endlink  using two 
               @link Scalar Scalar@endlink s representing the u and v parameters with option of
               direction on the face. The Offset created represents the curvature derivative
               of the face at u and v parameter in a direction specified by the option.  @return   
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateCurvatureDerivative
        (
            NXOpen::Face * face /** face */ ,
            NXOpen::Scalar * u /** u */ ,
            NXOpen::Scalar * v /** v */ ,
            bool absoluteUv /** true if u and v are absolute parameters */,
            NXOpen::Offset::OnFaceOption option /** option */ ,
            NXOpen::Direction * sectionDirection /** necessary when option is @link Offset::OnFaceOptionSection Offset::OnFaceOptionSection@endlink  */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Offset Offset@endlink  on a @link Face Face@endlink  using a 
               @link Point Point@endlink . The Offset created represents the curvature of the face 
               at a point in a direction specified by the option. 
               The input point could be a point on curve whose parent curve is an edge or a
               curve on surface feature. Or it could be an extract point whose parent point is a point on face.
               User can optionally supply a face in which case it is honored instead of looking for the parent
               face of the input point. In that case input point is projected on the face to find the curvature
               at the projected location.
             @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateCurvature
        (
            NXOpen::Point * atPoint /** A point on curve or an extract point. In case of a non associative point
                                                            a face must be specified. */,
            NXOpen::Face * face /** Optional input */,
            NXOpen::Offset::OnFaceOption option /** option */ ,
            NXOpen::SmartObject * sectionDirection /** An object of type @link Direction Direction@endlink  or @link Scalar Scalar@endlink  and is necessary when option is @link Offset::OnFaceOptionSection Offset::OnFaceOptionSection@endlink  */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link Offset Offset@endlink  on a @link Face Face@endlink  using a 
               @link Point Point@endlink . The Offset created represents the curvature derivative
               of the face at a point in a direction specified by the option. 
               The input point could be a point on curve whose parent curve is an edge or a
               curve on surface feature. Or it could be an extract point whose parent point is a point on face.
               User can optionally supply a face in which case it is honored instead of looking for the parent
               face of the input point. In that case input point is projected on the face to find the curvature
               derivative at the projected location.
             @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateCurvatureDerivative
        (
            NXOpen::Point * atPoint /** A point on curve or an extract point. In case of a non associative point
                                                            a face must be specified. */,
            NXOpen::Face * face /** Optional input */,
            NXOpen::Offset::OnFaceOption option /** option */ ,
            NXOpen::SmartObject * sectionDirection /** An object of type @link Direction Direction@endlink  or @link Scalar Scalar@endlink  and is necessary when option is @link Offset::OnFaceOptionSection Offset::OnFaceOptionSection@endlink  */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a sectional @link Offset Offset@endlink  on a @link Face Face@endlink  using two 
               @link Scalar Scalar@endlink s representing the u and v parameters and a 
               @link Scalar Scalar@endlink  representing section angle measured with respect to
               positive U parameter direction at u and v parameters of the face. The Offset created
               represents the curvature of the face at u and v parameter in the sectional direction.  @return   
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateCurvature
        (
            NXOpen::Face * face /** face */ ,
            NXOpen::Scalar * u /** u */ ,
            NXOpen::Scalar * v /** v */ ,
            bool absoluteUv /** true if u and v are absolute parameters */,
            NXOpen::Scalar * sectionAngle /** measured in degree */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a sectional @link Offset Offset@endlink  on a @link Face Face@endlink  using two 
               @link Scalar Scalar@endlink s representing the u and v parameters and a 
               @link Scalar Scalar@endlink  representing section angle measured with respect to
               positive U parameter direction at u and v parameters of the face. The Offset created
               represents the curvature derivative of the face at u and v parameter in 
               the sectional direction.  @return   
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateCurvatureDerivative
        (
            NXOpen::Face * face /** face */ ,
            NXOpen::Scalar * u /** u */ ,
            NXOpen::Scalar * v /** v */ ,
            bool absoluteUv /** true if u and v are absolute parameters */,
            NXOpen::Scalar * sectionAngle /** measured in degree */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
           Creates a @link Offset Offset@endlink  via an extract @link Offset Offset@endlink  with optional transformation.
            @return   
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Offset * CreateOffset
        (
            NXOpen::Offset * offsetIn /** Offset extract */,
            NXOpen::Xform * xform /**  Optional transformation */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
