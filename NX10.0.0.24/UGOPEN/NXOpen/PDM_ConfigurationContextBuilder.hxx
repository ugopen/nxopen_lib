#ifndef NXOpen_PDM_CONFIGURATIONCONTEXTBUILDER_HXX_INCLUDED
#define NXOpen_PDM_CONFIGURATIONCONTEXTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_ConfigurationContextBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CollaborativeDesign.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PDM_ConfigurationContextBuilder.hxx>
#include <NXOpen/PDM_EffectivityTableBuilder.hxx>
#include <NXOpen/PDM_VariantConfigurationBuilder.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class ConfigurationContextBuilder;
    }
    class Builder;
    class CollaborativeDesign;
    namespace PDM
    {
        class EffectivityTableBuilder;
    }
    namespace PDM
    {
        class VariantConfigurationBuilder;
    }
    namespace PDM
    {
        class _ConfigurationContextBuilderBuilder;
        class ConfigurationContextBuilderImpl;
        /** Represents a @link NXOpen::PDM::ConfigurationContextBuilder NXOpen::PDM::ConfigurationContextBuilder@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::PDM::ConfigurationManager::CreateConfigurationContextBuilder  NXOpen::PDM::ConfigurationManager::CreateConfigurationContextBuilder @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  ConfigurationContextBuilder : public NXOpen::Builder
        {
            /** configuration mode */
            public: enum ConfigContextMode
            {
                ConfigContextModeNx4gd/** nx4gd */ ,
                ConfigContextModeAssemblies/** assemblies */ 
            };

            /** configuration type */
            public: enum ConfigContextType
            {
                ConfigContextTypeAsSaved/** as saved */ ,
                ConfigContextTypePushedfromTeamcenter/** pushedfrom teamcenter */ ,
                ConfigContextTypeDefineorLoadContext/** defineor load context */ 
            };

            /** configuration detail */
            public: enum ConfigurationDetail
            {
                ConfigurationDetailLoadfromTeamcenter/** loadfrom teamcenter */ ,
                ConfigurationDetailDefineinNX/** definein nx */ 
            };

            private: ConfigurationContextBuilderImpl * m_configurationcontextbuilder_impl;
            private: friend class  _ConfigurationContextBuilderBuilder;
            protected: ConfigurationContextBuilder();
            public: ~ConfigurationContextBuilder();
            /**Returns  the configuration mode 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::ConfigurationContextBuilder::ConfigContextMode ConfigMode
            (
            );
            /**Returns  the configuration type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::ConfigurationContextBuilder::ConfigContextType ConfigType
            (
            );
            /**Sets  the configuration type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetConfigType
            (
                NXOpen::PDM::ConfigurationContextBuilder::ConfigContextType configType /** configtype */ 
            );
            /**Returns  the configuration detail 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::ConfigurationContextBuilder::ConfigurationDetail ConfigDetail
            (
            );
            /**Sets  the configuration detail 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetConfigDetail
            (
                NXOpen::PDM::ConfigurationContextBuilder::ConfigurationDetail configDetail /** configdetail */ 
            );
            /**Returns  the revision rule  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXString RevisionRule
            (
            );
            /**Sets  the revision rule  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetRevisionRule
            (
                const NXString & revisionRule /** revisionrule */ 
            );
            /**Sets  the revision rule  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            void SetRevisionRule
            (
                const char * revisionRule /** revisionrule */ 
            );
            /**Returns  the override folder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OverrideFolder
            (
            );
            /**Sets  the override folder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetOverrideFolder
            (
                const NXString & folderName /** foldername */ 
            );
            /**Sets  the override folder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            void SetOverrideFolder
            (
                const char * folderName /** foldername */ 
            );
            /**Returns  the @link NXOpen::PDM::EffectivityTableBuilder NXOpen::PDM::EffectivityTableBuilder@endlink  builder used to edit the effectivity 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::PDM::EffectivityTableBuilder * EffectivityTable
            (
            );
            /**Returns  the @link NXOpen::PDM::VariantConfigurationBuilder NXOpen::PDM::VariantConfigurationBuilder@endlink  builder used to edit variant rule configuration 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::PDM::VariantConfigurationBuilder * VariantConfiguration
            (
            );
            /**Returns  the collaborative design 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: NXOpen::CollaborativeDesign * CollaborativeDesign
            (
            );
            /**Sets  the collaborative design 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetCollaborativeDesign
            (
                NXOpen::CollaborativeDesign * collaborativeDesign /** collaborativedesign */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
