#ifndef NXOpen_ANNOTATIONS_SEARCHCRITERIASURFACEFINISHBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_SEARCHCRITERIASURFACEFINISHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_SearchCriteriaSurfaceFinishBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_SearchCriteriaSurfaceFinishBuilder.hxx>
#include <NXOpen/Annotations_SearchModelViewBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class SearchCriteriaSurfaceFinishBuilder;
    }
    class Builder;
    namespace Annotations
    {
        class _SearchCriteriaSurfaceFinishBuilderBuilder;
        class SearchCriteriaSurfaceFinishBuilderImpl;
        /** Represents SearchCriteriaSurfaceFinishBuilder  <br> To create a new instance of this class, use @link NXOpen::Annotations::SearchModelViewCollection::CreateSearchCriteriaSurfaceFinishBuilder  NXOpen::Annotations::SearchModelViewCollection::CreateSearchCriteriaSurfaceFinishBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  SearchCriteriaSurfaceFinishBuilder : public NXOpen::Builder
        {
            /** Lists the search pmi surface finish type*/
            public: enum SurfaceFinishTypes
            {
                SurfaceFinishTypesOpen/** open*/,
                SurfaceFinishTypesOpenAndModifier/** open and modifier*/,
                SurfaceFinishTypesOpenAndModifierAndAllAround/** opem and modifier and all around*/,
                SurfaceFinishTypesRequired/** required*/,
                SurfaceFinishTypesRequiredAndModifier/** required and modifier*/,
                SurfaceFinishTypesRequiredAndModifierAndAllAround/** required and modifier and all around*/,
                SurfaceFinishTypesProhibited/** prohibited*/,
                SurfaceFinishTypesProhibitedAndModifier/** prohibiter and modifier*/,
                SurfaceFinishTypesProhibitedAndModifierAndAllAround/** prohibiter and modifier and all around*/
            };

            /** Lists the Tolerance type of surface finish value*/
            public: enum ToleranceTypeOptions
            {
                ToleranceTypeOptionsNoTolerance/** no tolerance*/,
                ToleranceTypeOptionsEqualBilateral/** equal bilateral*/,
                ToleranceTypeOptionsBilateral/** bilateral*/,
                ToleranceTypeOptionsUnilateralPlus/** unilateral + */,
                ToleranceTypeOptionsUnilateralMinus/** unilateral - */,
                ToleranceTypeOptionsPlusLimit2Lines/** + limit 2 lines*/,
                ToleranceTypeOptionsMinusLimit2Lines/** - limit 2 lines*/,
                ToleranceTypeOptionsPlusLimit1Line/** + limit 1 line*/,
                ToleranceTypeOptionsNegposlimitMinusLimit1Line/** negposlimit- limit 1 line*/
            };

            private: SearchCriteriaSurfaceFinishBuilderImpl * m_searchcriteriasurfacefinishbuilder_impl;
            private: friend class  _SearchCriteriaSurfaceFinishBuilderBuilder;
            protected: SearchCriteriaSurfaceFinishBuilder();
            public: ~SearchCriteriaSurfaceFinishBuilder();
            /**Returns  the surface finish type toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool BySurfaceFinishType
            (
            );
            /**Sets  the surface finish type toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBySurfaceFinishType
            (
                bool surfaceFinishType /** surfacefinishtype */ 
            );
            /**Returns  the surface finish type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchCriteriaSurfaceFinishBuilder::SurfaceFinishTypes SurfaceFinishType
            (
            );
            /**Sets  the surface finish type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSurfaceFinishType
            (
                NXOpen::Annotations::SearchCriteriaSurfaceFinishBuilder::SurfaceFinishTypes surfaceFinishType /** surfacefinishtype */ 
            );
            /**Returns  the upper text toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByUpperText
            (
            );
            /**Sets  the upper text toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByUpperText
            (
                bool upperText /** uppertext */ 
            );
            /**Returns  the upper text enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions UpperTextType
            (
            );
            /**Sets  the upper text enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUpperTextType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions upperTextType /** uppertexttype */ 
            );
            /**Returns  the upper text text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString UpperTextText
            (
            );
            /**Sets  the upper text text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUpperTextText
            (
                const NXString & upperTextText /** uppertexttext */ 
            );
            /**Sets  the upper text text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetUpperTextText
            (
                const char * upperTextText /** uppertexttext */ 
            );
            /**Returns  the lower text toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByLowerText
            (
            );
            /**Sets  the lower text toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByLowerText
            (
                bool lowerText /** lowertext */ 
            );
            /**Returns  the lower text enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions LowerTextType
            (
            );
            /**Sets  the lower text enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLowerTextType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions lowerTextType /** lowertexttype */ 
            );
            /**Returns  the lower text text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString LowerTextText
            (
            );
            /**Sets  the lower text text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLowerTextText
            (
                const NXString & lowerTextText /** lowertexttext */ 
            );
            /**Sets  the lower text text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetLowerTextText
            (
                const char * lowerTextText /** lowertexttext */ 
            );
            /**Returns  the waviness text toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByWavinessText
            (
            );
            /**Sets  the waviness text toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByWavinessText
            (
                bool wavinessText /** wavinesstext */ 
            );
            /**Returns  the waviness text enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions WavinessTextType
            (
            );
            /**Sets  the waviness text enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetWavinessTextType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions wavinessTextType /** wavinesstexttype */ 
            );
            /**Returns  the waviness text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString WavinessText
            (
            );
            /**Sets  the waviness text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetWavinessText
            (
                const NXString & wavinessText /** wavinesstext */ 
            );
            /**Sets  the waviness text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetWavinessText
            (
                const char * wavinessText /** wavinesstext */ 
            );
            /**Returns  the cutoff toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByCutoff
            (
            );
            /**Sets  the cutoff toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByCutoff
            (
                bool cutoff /** cutoff */ 
            );
            /**Returns  the cutoff enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions CutoffType
            (
            );
            /**Sets  the cutoff enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCutoffType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions cutoffType /** cutofftype */ 
            );
            /**Returns  the cutoff text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString CutoffText
            (
            );
            /**Sets  the cutoff text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCutoffText
            (
                const NXString & cutoffText /** cutofftext */ 
            );
            /**Sets  the cutoff text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetCutoffText
            (
                const char * cutoffText /** cutofftext */ 
            );
            /**Returns  the lay symbol toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByLaySymbol
            (
            );
            /**Sets  the lay symbol toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByLaySymbol
            (
                bool laySymbol /** laysymbol */ 
            );
            /**Returns  the lay symbol enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions LaySymbolType
            (
            );
            /**Sets  the lay symbol enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLaySymbolType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions laySymbolType /** laysymboltype */ 
            );
            /**Returns  the lay symbol text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString LaySymbolText
            (
            );
            /**Sets  the lay symbol text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLaySymbolText
            (
                const NXString & laySymbolText /** laysymboltext */ 
            );
            /**Sets  the lay symbol text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetLaySymbolText
            (
                const char * laySymbolText /** laysymboltext */ 
            );
            /**Returns  the machining toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByMachining
            (
            );
            /**Sets  the machining toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByMachining
            (
                bool machining /** machining */ 
            );
            /**Returns  the machining enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions MachiningType
            (
            );
            /**Sets  the machining enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMachiningType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions machiningType /** machiningtype */ 
            );
            /**Returns  the machining text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString MachiningText
            (
            );
            /**Sets  the machining text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMachiningText
            (
                const NXString & machiningText /** machiningtext */ 
            );
            /**Sets  the machining text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetMachiningText
            (
                const char * machiningText /** machiningtext */ 
            );
            /**Returns  the production process toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByProductionProcess
            (
            );
            /**Sets  the production process toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByProductionProcess
            (
                bool productionProcess /** productionprocess */ 
            );
            /**Returns  the production process enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions ProductionProcessType
            (
            );
            /**Sets  the production process enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetProductionProcessType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions productionProcessType /** productionprocesstype */ 
            );
            /**Returns  the production process text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ProductionProcessText
            (
            );
            /**Sets  the production process text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetProductionProcessText
            (
                const NXString & productionProcessText /** productionprocesstext */ 
            );
            /**Sets  the production process text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetProductionProcessText
            (
                const char * productionProcessText /** productionprocesstext */ 
            );
            /**Returns  the secondary roughness toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool BySecondaryRoughness
            (
            );
            /**Sets  the secondary roughness toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBySecondaryRoughness
            (
                bool secondaryRoughness /** secondaryroughness */ 
            );
            /**Returns  the secondary roughness enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions SecondaryRoughnessType
            (
            );
            /**Sets  the secondary roughness enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSecondaryRoughnessType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions secondaryRoughnessType /** secondaryroughnesstype */ 
            );
            /**Returns  the secondary roughness text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString SecondaryRoughnessText
            (
            );
            /**Sets  the secondary roughness text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSecondaryRoughnessText
            (
                const NXString & secondaryRoughnessText /** secondaryroughnesstext */ 
            );
            /**Sets  the secondary roughness text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetSecondaryRoughnessText
            (
                const char * secondaryRoughnessText /** secondaryroughnesstext */ 
            );
            /**Returns  the option to decide if searching the surface finish by the tertiary roughness 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByTertiaryRoughness
            (
            );
            /**Sets  the option to decide if searching the surface finish by the tertiary roughness 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByTertiaryRoughness
            (
                bool tertiaryRoughness /** tertiaryroughness */ 
            );
            /**Returns  the tertiary roughness enum 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions TertiaryRoughnessType
            (
            );
            /**Sets  the tertiary roughness enum 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTertiaryRoughnessType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions tertiaryRoughnessType /** tertiaryroughnesstype */ 
            );
            /**Returns  the tertiary roughness text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TertiaryRoughnessText
            (
            );
            /**Sets  the tertiary roughness text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTertiaryRoughnessText
            (
                const NXString & tertiaryRoughnessText /** tertiaryroughnesstext */ 
            );
            /**Sets  the tertiary roughness text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetTertiaryRoughnessText
            (
                const char * tertiaryRoughnessText /** tertiaryroughnesstext */ 
            );
            /**Returns  the roughness toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByRoughness
            (
            );
            /**Sets  the roughness toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByRoughness
            (
                bool roughness /** roughness */ 
            );
            /**Returns  the roughness enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions RoughnessType
            (
            );
            /**Sets  the roughness enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRoughnessType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions roughnessType /** roughnesstype */ 
            );
            /**Returns  the roughness text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString RoughnessText
            (
            );
            /**Sets  the roughness text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRoughnessText
            (
                const NXString & roughnessText /** roughnesstext */ 
            );
            /**Sets  the roughness text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetRoughnessText
            (
                const char * roughnessText /** roughnesstext */ 
            );
            /**Returns  the tolerance type toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByMachiningToleranceType
            (
            );
            /**Sets  the tolerance type toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByMachiningToleranceType
            (
                bool byMachiningToleranceType /** bymachiningtolerancetype */ 
            );
            /**Returns  the tolerance type enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchCriteriaSurfaceFinishBuilder::ToleranceTypeOptions MachiningToleranceType
            (
            );
            /**Sets  the tolerance type enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMachiningToleranceType
            (
                NXOpen::Annotations::SearchCriteriaSurfaceFinishBuilder::ToleranceTypeOptions machiningToleranceType /** machiningtolerancetype */ 
            );
            /**Returns  the tolerance toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByTolerance
            (
            );
            /**Sets  the tolerance toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByTolerance
            (
                bool tolerance /** tolerance */ 
            );
            /**Returns  the tolerance enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions ToleranceType
            (
            );
            /**Sets  the tolerance enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetToleranceType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions toleranceType /** tolerancetype */ 
            );
            /**Returns  the tolerance value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceValue
            (
            );
            /**Sets  the tolerance value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetToleranceValue
            (
                double toleranceValue /** tolerancevalue */ 
            );
            /**Returns  the upper tolerance toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByUpperTolerance
            (
            );
            /**Sets  the upper tolerance toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByUpperTolerance
            (
                bool upperTolerance /** uppertolerance */ 
            );
            /**Returns  the upper tolerance enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions UpperToleranceType
            (
            );
            /**Sets  the upper tolerance enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUpperToleranceType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions upperToleranceType /** uppertolerancetype */ 
            );
            /**Returns  the upper tolerance value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double UpperToleranceValue
            (
            );
            /**Sets  the upper tolerance value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUpperToleranceValue
            (
                double upperToleranceValue /** uppertolerancevalue */ 
            );
            /**Returns  the lower tolerance toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ByLowerTolerance
            (
            );
            /**Sets  the lower tolerance toggle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetByLowerTolerance
            (
                bool lowerTolerance /** lowertolerance */ 
            );
            /**Returns  the lower tolerance enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions LowerToleranceType
            (
            );
            /**Sets  the lower tolerance enum 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLowerToleranceType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions lowerToleranceType /** lowertolerancetype */ 
            );
            /**Returns  the lower tolerance value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double LowerToleranceValue
            (
            );
            /**Sets  the lower tolerance value 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetLowerToleranceValue
            (
                double lowerToleranceValue /** lowertolerancevalue */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
