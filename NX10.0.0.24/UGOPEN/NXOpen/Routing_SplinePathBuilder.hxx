#ifndef NXOpen_ROUTING_SPLINEPATHBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_SPLINEPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_SplinePathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Positioning_Constraint.hxx>
#include <NXOpen/Routing_SplinePathBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class SplinePathBuilder;
    }
    class Builder;
    class Curve;
    class Direction;
    class Expression;
    class Point;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _SplinePathBuilderBuilder;
        class SplinePathBuilderImpl;
        /** 
            Builder for creating a D-Cubed constrained spline.
            The builder allows for the creation of splines, editing of splines,
            adding extensions, adding stock offset points, adding stock, locking length,
            adding slack, and locking to objects. 
             <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreateSplinePathBuilder  NXOpen::Routing::RouteManager::CreateSplinePathBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  SplinePathBuilder : public NXOpen::Builder
        {
            /** Describes the method the spline is defined as.*/
            public: enum SplinePathSlackType
            {
                SplinePathSlackTypePercentLength/** A control point (Thru-Point) spline. */,
                SplinePathSlackTypeAdditionalLength/** A interpolating (By-Poles) spline.*/,
                SplinePathSlackTypeUndefined/** The spline is undefined. */
            };

            /** Describes user attribute methods options  These value are used to set minimum checking method.
                    If checking method is ratio to diameter than allowable radius will be computed by ratioToDiameter x Stock Diameter*/
            public: enum SplinePathAttributeOptions
            {
                SplinePathAttributeOptionsRadius/** A radius method option for spline user attribute  */,
                SplinePathAttributeOptionsRatioToDiameter/** A  ratio to diameter method option for spline user attribute*/
            };

            private: SplinePathBuilderImpl * m_splinepathbuilder_impl;
            private: friend class  _SplinePathBuilderBuilder;
            protected: SplinePathBuilder();
            public: ~SplinePathBuilder();
            /** Adds a defining point to the current spline or creates the first
                        point of the new spline.  @return  Returns the index the point was added along the spline.
                                                                                             For example, if 3 points exist on the spline and the new point
                                                                                             was added between points 0 and 1 this variable would be set to 1.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int AddDefiningPointToSpline
            (
                NXOpen::Point * point /** Point to add. */,
                bool createNewPoint /** Should the builder create a new point based on the one provided. */
            );
            /** Adds a defining point to the spline. The new point will be the new endpoint of the spline. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AddDefiningPointAtAbsoluteCoords
            (
                const NXOpen::Point3d & point /** Point to add. */
            );
            /** Updates the position of a point on the spline.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UpdateDefiningPointPositionAtIndex
            (
                int index /** The index in the list of defining spline points to move. */,
                NXOpen::Point * point /** Point representing the new position. */,
                bool inDrag /** True if the point is currently being dragged. */
            );
            /** Deletes a defining point from the spline. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void DeleteDefiningPointAtIndex
            (
                int index /** Index of the point to delete. */
            );
            /** Sets the splines method to points or poles. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetSplineMethod
            (
                NXOpen::Positioning::Constraint::SplineType sMethod /** Set the defining method of the spline. */
            );
            /** Sets whether the spline will attempt to lock points to selected object. This flag is only checked when
                     adding a point to a spline by passing in a smart point to derive a new dumb spline point from. If the smart
                     point is derived from a port, rcp, or other routing object the new spline defining point will lock to that
                     object. This flag is also checked during commit, where endpoint associativity is applied. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetLockToSelectedFlag
            (
                bool lockSelected /** True to lock to selected objects. */
            );
            /** Sets whether or not additional points will be added to a spline which is created as the result of
                        a subdivide. If true, new points will be added to maintain a shape similar to the original curve. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAddPointsOnSubdivideFlag
            (
                bool addPoints /** True to add points to subdivided splines. */
            );
            /** Sets whether or not additional the newly created spline will be made tangent to connecting splines. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCreateTangencyFlag
            (
                bool createTangency /** True to add tangency. */
            );
            /** Gets the current length of the spline.  @return  The length of the current spline. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetSplineLength
            (
            );
            /** Gets the current length of the spline without shaping applied. @return  The length of the current spline without shaping. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetSplineLengthNoShaping
            (
            );
            /** Locks the length of the current spline. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void LockSplineLengthWithShaping
            (
                NXOpen::Expression * length /** The length to lock the spline to. */,
                NXOpen::Direction * downDirection /** downdirection */ 
            );
            /** Locks the length of the current spline. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void LockSplineLengthNoShaping
            (
                NXOpen::Expression * length /** Expression containing the desired length. */
            );
            /** Removes all shaping applied to the spline (Lock length, slacking). 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveAllShaping
            (
            );
            /** 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void IsLengthLocked
            (
                NXOpen::Expression ** lockedLengthVal /** lockedlengthval */ ,
                bool* isLocked /** islocked */ ,
                NXOpen::Direction ** downDir /** downdir */ 
            );
            /** 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AddSlackToSpline
            (
                NXOpen::Routing::SplinePathBuilder::SplinePathSlackType slackType /** slacktype */ ,
                NXOpen::Expression * slackValue /** slackvalue */ ,
                NXOpen::Direction * downDir /** downdir */ 
            );
            /** 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void IsSplineSlacked
            (
                bool* slacked /** slacked */ ,
                NXOpen::Routing::SplinePathBuilder::SplinePathSlackType* slackType /** slacktype */ ,
                NXOpen::Expression ** slackValue /** slackvalue */ ,
                NXOpen::Direction ** downDir /** downdir */ 
            );
            /** Initialize the D-Cubed dragging functionality for the point at index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void InitializeDrag
            (
                int index /** Index of the point to drag */
            );
            /** Clears the current drag network 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void CommitDrag
            (
                NXOpen::Point * definingPoint /** Optional of UI point defining the position of the spline point. */
            );
            /** Assigns an extension to the point at pointIndex. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AssignExtension
            (
                int pointIndex /** Index of the point to assing extensions to. */,
                NXOpen::Direction * direction /** Direction of the extension. */,
                NXOpen::Expression * forwardExtVal /** Length of the forward extension. */,
                NXOpen::Expression * backExtVal /** Length of the backward extension.*/
            );
            /** Assigns an extension to the point at pointIndex for Heal Path. 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AssignHealPathExtension
            (
                int pointIndex /** Index of the point to assing extensions to. */,
                NXOpen::Direction * direction /** Direction of the extension. */,
                NXOpen::Expression * forwardExtVal /** Length of the forward extension. */,
                NXOpen::Expression * backExtVal /** Length of the backward extension.*/
            );
            /** When a spline is selected for editing, the builder will anaylyze the spline
                        and gather all of the defining data. The dialog will use this function
                        to retrieve the defining data from the builder to populate its fields.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AskDefiningData
            (
                std::vector<NXOpen::Point *> & points /** Defining points of the spline. */
            );
            /** Get the extension expressions at the given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetExtensionDataForPointAtIndex
            (
                int index /** Index of hte point to anaylze */,
                NXOpen::Expression ** forwardVal /** Forward Extension Length. */,
                NXOpen::Expression ** backwardVal /** Backward Extension Length. */,
                NXOpen::Vector3d* extDir /** Extension direction. */
            );
            /** Gets the positions of the defining points. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetDefiningPointPositions
            (
                std::vector<double> & pointPositions /** array of doubles representing the defining points. */
            );
            /** Gets the routing segment managed by the builder, if it exists.  @return  Visible Routing BCurve Segment 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Curve * GetRouteSegment
            (
            );
            /** Gets the RCPs managed by the builder, if they exist.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::ControlPoint * GetStartAndEndRcp
            (
                NXOpen::Routing::ControlPoint ** startRcp /** Segment Start Rcp. */
            );
            /** Detaches the point at the selected index from all objects its attached to using a Touch constraint. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void DetachPoint
            (
                int index /** Index of point to detach. */
            );
            /** Returns the Stock Offset data associated with a given point. Output can be NULL if the 
                        associated point is not a stock offset point. 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetOffsetData
            (
                int index /** Index of point to detach. */,
                int* method /** The type of offset object. 0 = Not Offset, 
                                                                                          1 = Stock Offset Point, 2 = Stock Offset Surface */,
                NXOpen::Point ** basePoint /** The base point frim the offset object. */,
                NXOpen::Direction ** offDir /** The offset direction */,
                NXString* exp /** The expression defining the offset distance. */
            );
            /** Blanks all the stocks on the current segment and returns the stock with the largest diameter  @return  The stock with the largest diameter 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::Stock * BlankStockAndGetLargestDia
            (
            );
            /** Unblanks stocks which were blanked by calling BlankStockAndGetLargestDia
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UnblankStocks
            (
            );
            /** Returns the minimum length of the spline.  The minimum length is the straight line distance between all defining points,  
                        including extensions.  @return The minimum length of the spline 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetLockedSplineMinimumLength
            (
            );
            /**Sets  whether the spline minimum radius value should be checked or not on this spline.
             <br>  Created in NX9.1.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetUseMinimumCheckingValue
            (
                bool useMinRadius /** useminradius */ 
            );
            /**Returns  whether the spline minimum radius value should be checked or not on this spline.
             <br>  Created in NX9.1.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool UseMinimumCheckingValue
            (
            );
            /**Returns  the minimum checking method for this spline. See @link NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions@endlink  for valid options 
             <br>  Created in NX9.1.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions MinimumCheckingMethod
            (
            );
            /**Sets  the minimum checking method for this spline. See @link NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions@endlink  for valid options 
             <br>  Created in NX9.1.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetMinimumCheckingMethod
            (
                NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions routeCheckingMethod /** routecheckingmethod */ 
            );
            /**Returns  the minimum radius allowed for this spline. 
             <br>  Created in NX9.1.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * MinimumCheckingAllowableValue
            (
            );
            /**Returns  the minimum ratio allowed for this spline
             <br>  Created in NX9.1.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * MinimumCheckingAllowableRatio
            (
            );
            /**Sets  whether the spline minimum radius value should be displayed or not. 
             <br>  Created in NX9.1.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetShowSplineMinimumRadius
            (
                bool allowDisplay /** allowdisplay */ 
            );
            /**Returns  whether the spline minimum radius value should be displayed or not. 
             <br>  Created in NX9.1.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool ShowSplineMinimumRadius
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
