#ifndef NXOpen_JAMTESTNAMESPACE_TAGGED_HXX_INCLUDED
#define NXOpen_JAMTESTNAMESPACE_TAGGED_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     JamTestNamespace_Tagged.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/JamTestNamespace_Subobject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopenjamtestcpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace JamTestNamespace
    {
        class Tagged;
    }
    namespace JamTestNamespace
    {
        class Subobject;
    }
    namespace JamTestNamespace
    {
        class _TaggedBuilder;
        class TaggedImpl;
        /** Test class for wrapping a tagged object  <br> not done yet  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENJAMTESTCPPEXPORT  Tagged : public NXOpen::TaggedObject
        {
            private: TaggedImpl * m_tagged_impl;
            private: friend class  _TaggedBuilder;
            protected: Tagged();
            public: ~Tagged();
            /**Returns  the Test for returning a single subobject 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::JamTestNamespace::Subobject * Subobject
            (
            );
            /** Test for returning a subobject array (contents will all be the same object )  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::JamTestNamespace::Subobject *> GetSubobjects
            (
                int n /** n */ 
            );
            /** Test for input of single subobject  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool OwnsSubobject
            (
                NXOpen::JamTestNamespace::Subobject * obj /** obj */ 
            );
            /** Test for input of subobject array  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: int OwnsOneOf
            (
                const std::vector<NXOpen::JamTestNamespace::Subobject *> & objects /** objects */ 
            );
            /**Returns  the Id of this Tagged object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: int Id
            (
            );
            /**Returns  the Id of the Tagged object's subobject 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: int SubobjectId
            (
            );
            /** Destroy the current subobject of this object and create a new one 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void NewSubobject
            (
            );
            /** Reset Pre-Call Status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ResetPreCallStatus
            (
            );
            /**Returns  the reset Pre-Call Status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool PreCallStatus
            (
            );
            /** Reset Pre-Call2 Status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ResetPreCallStatus2
            (
            );
            /**Returns  the reset Pre-Call2 Status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool PreCallStatus2
            (
            );
            /**The Jax pre call with API_THIS argument 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAttributeAPIThis
            (
                const NXString & title /** title */ ,
                int value /** value */ 
            );
            /**The Jax pre call with API_THIS argument 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetAttributeAPIThis
            (
                const char * title /** title */ ,
                int value /** value */ 
            );
            /** The Jax pre call with specified argument 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAttributeSpecifiedArgs
            (
                const NXString & title /** title */ ,
                int value /** value */ 
            );
            /** The Jax pre call with specified argument 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetAttributeSpecifiedArgs
            (
                const char * title /** title */ ,
                int value /** value */ 
            );
            /** The  no args 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAttributeNoArgs
            (
                const NXString & title /** title */ ,
                int value /** value */ 
            );
            /** The  no args 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetAttributeNoArgs
            (
                const char * title /** title */ ,
                int value /** value */ 
            );
            /** The  no args 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAttributeNoArgs2
            (
                const NXString & title /** title */ ,
                int value /** value */ 
            );
            /** The  no args 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetAttributeNoArgs2
            (
                const char * title /** title */ ,
                int value /** value */ 
            );
            /** The  no args error 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAttributeNoArgsError
            (
                const NXString & title /** title */ ,
                int value /** value */ 
            );
            /** The  no args error 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetAttributeNoArgsError
            (
                const char * title /** title */ ,
                int value /** value */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
