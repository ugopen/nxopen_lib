#ifndef NXOpen_DIE_DRAWBEADBUILDER_HXX_INCLUDED
#define NXOpen_DIE_DRAWBEADBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_DrawBeadBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DieAttributesBuilder.hxx>
#include <NXOpen/Die_DieDirectionBuilder.hxx>
#include <NXOpen/Die_DieLocationBuilder.hxx>
#include <NXOpen/Die_DrawBeadBuilder.hxx>
#include <NXOpen/Die_DrawBeadTaperBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class DrawBeadBuilder;
    }
    namespace Die
    {
        class DieAttributesBuilder;
    }
    namespace Die
    {
        class DieDirectionBuilder;
    }
    namespace Die
    {
        class DieLocationBuilder;
    }
    namespace Die
    {
        class DrawBeadSegmentBuilder;
    }
    namespace Die
    {
        class DrawBeadSegmentBuilderList;
    }
    namespace Die
    {
        class DrawBeadTaperBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    class Section;
    namespace Die
    {
        class _DrawBeadBuilderBuilder;
        class DrawBeadBuilderImpl;
        /**
            Represents a builder that is used to create or edit a @link NXOpen::Die::DrawBead NXOpen::Die::DrawBead@endlink  feature.
             <br> To create a new instance of this class, use @link NXOpen::Die::DieCollection::CreateDrawBeadBuilder  NXOpen::Die::DieCollection::CreateDrawBeadBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BaseOrientation </td> <td> 
         
        Vertical </td> </tr> 

        <tr><td> 
         
        BuildEndTaper </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        BuildStartTaper </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        CenterlineProjection </td> <td> 
         
        DrawDirection </td> </tr> 

        <tr><td> 
         
        Clearance.Value </td> <td> 
         
        0.2 (millimeters part), 0.008 (inches part) </td> </tr> 

        <tr><td> 
         
        EndPoint.InputType </td> <td> 
         
        SelectLocation </td> </tr> 

        <tr><td> 
         
        EndTaper.TaperRadius.Value </td> <td> 
         
        90 (millimeters part), 3.8 (inches part) </td> </tr> 

        <tr><td> 
         
        EndTaper.TaperType </td> <td> 
         
        Spherical </td> </tr> 

        <tr><td> 
         
        EndTaper.TaperWashoutHeight.Value </td> <td> 
         
        10 (millimeters part), 0.4 (inches part) </td> </tr> 

        <tr><td> 
         
        EndTaper.TaperWashoutLength.Value </td> <td> 
         
        50 (millimeters part), 2 (inches part) </td> </tr> 

        <tr><td> 
         
        FemaleDepthType </td> <td> 
         
        Derived </td> </tr> 

        <tr><td> 
         
        FemaleDepthValue.Value </td> <td> 
         
        11 (millimeters part), 0.43 (inches part) </td> </tr> 

        <tr><td> 
         
        FemaleWidthType </td> <td> 
         
        Derived </td> </tr> 

        <tr><td> 
         
        FemaleWidthValue.Value </td> <td> 
         
        12.4 (millimeters part), 0.488 (inches part) </td> </tr> 

        <tr><td> 
         
        GenerateHeightCurve </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MachineOffset </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MaleBeadPosition </td> <td> 
         
        Upper </td> </tr> 

        <tr><td> 
         
        MetalThickness.Value </td> <td> 
         
        1 (millimeters part), 0.04 (inches part) </td> </tr> 

        <tr><td> 
         
        OrientSectionToDraw </td> <td> 
         
        DrawDirection </td> </tr> 

        <tr><td> 
         
        Output </td> <td> 
         
        Male </td> </tr> 

        <tr><td> 
         
        TaperBead </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TransitionDefinition </td> <td> 
         
        Automatic </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  DrawBeadBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Identifes which casting the male bead is created in. */
            public: enum MaleBeadPositionTypes
            {
                MaleBeadPositionTypesUpper/** Attach the male bead to the upper die casting. */,
                MaleBeadPositionTypesLower/** Attach the male bead to the lower die casting. */
            };

            /** Identifes how the centerline should be projected to the placement face during processing. */
            public: enum ProjectionDirectionTypes
            {
                ProjectionDirectionTypesDrawDirection/** Project the centerline along the draw direction vector. */,
                ProjectionDirectionTypesNormalToPlacementFace/** Project the centerline along the placement face normal. */
            };

            /** Identifies the orientation of the base parameters to the sheet metal. */
            public: enum OrientationTypes
            {
                OrientationTypesOrthogonal/** The width and angle parameters are orthogonal, or normal, to the sheet metal normal at the section location. */,
                OrientationTypesVertical/** The width and angle parameters are oriented along the draw direction at the section location. */
            };

            /** Specifies how the transition area should be determined from segment to segment within a single bead. */
            public: enum TransitionDefinitionTypes
            {
                TransitionDefinitionTypesAutomatic/** Shorten the bead segment that has the lowest height. */,
                TransitionDefinitionTypesManual/** User specified start and end segments so transition areas are fully defined. */
            };

            /** Specifies how the female depth is calculated or defined. */
            public: enum FemaleDepthTypes
            {
                FemaleDepthTypesDerived/** The female depth is derived from the male bead (Max Male Depth + Constant). */,
                FemaleDepthTypesConstant/** The female depth is a user specified constant. */
            };

            /** Specifies how the feamle width is calcualted or defined. */
            public: enum FemaleWidthTypes
            {
                FemaleWidthTypesDerived/** The female width is derived from the male (Male Width + 2(Sheet Metal Thickness + Clearance)). */,
                FemaleWidthTypesConstant/** The female width is a user specified constant. */
            };

            /** Specifies what type of output is desired for the feature creation. */
            public: enum OutputTypes
            {
                OutputTypesNone/** Creates a small sphere on the centerline. */,
                OutputTypesMale/** Creates the male bead only. */,
                OutputTypesPlusFemale/** Creates the male and female bead. */,
                OutputTypesPlusSheetMetal/** Creates the male, female and sheet metal bead. */
            };

            /** Specifies if the segment height section parameter should be oriented to the draw direction or the sheet metal normal at the section location. */
            public: enum OrientSectionToDrawTypes
            {
                OrientSectionToDrawTypesDrawDirection/** Orient height parameter to the draw direction. */,
                OrientSectionToDrawTypesSheetMetalNormal/** Orient height parameter to the sheet metal normal at the section location. */
            };

            private: DrawBeadBuilderImpl * m_drawbeadbuilder_impl;
            private: friend class  _DrawBeadBuilderBuilder;
            protected: DrawBeadBuilder();
            public: ~DrawBeadBuilder();
            /**Returns  the casting in which to create the male bead. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadBuilder::MaleBeadPositionTypes MaleBeadPosition
            (
            );
            /**Sets  the casting in which to create the male bead. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaleBeadPosition
            (
                NXOpen::Die::DrawBeadBuilder::MaleBeadPositionTypes maleBeadPosition /** malebeadposition */ 
            );
            /**Returns  the collector containing faces (which will sew together) that identifies the surface shape the bead is attached too. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * PlacementFace
            (
            );
            /**Returns  the indication if the thickness of the sheet metal should be the same as the sewn face normals. True indicates that the sheet will be thickened in the same direction as the sewn face normals. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseMetalThickness
            (
            );
            /**Sets  the indication if the thickness of the sheet metal should be the same as the sewn face normals. True indicates that the sheet will be thickened in the same direction as the sewn face normals. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetReverseMetalThickness
            (
                bool reverseMetalThickness /** reversemetalthickness */ 
            );
            /**Returns  the section containing the centerline of the bead. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * Centerline
            (
            );
            /**Returns  the projection method to apply to the centerline to place it on the sewn faces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadBuilder::ProjectionDirectionTypes CenterlineProjection
            (
            );
            /**Sets  the projection method to apply to the centerline to place it on the sewn faces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCenterlineProjection
            (
                NXOpen::Die::DrawBeadBuilder::ProjectionDirectionTypes centerlineProjection /** centerlineprojection */ 
            );
            /**Returns  the point location defining the start of the centerline. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieLocationBuilder * StartPoint
            (
            );
            /**Returns  the point location defining the end of the centerline. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieLocationBuilder * EndPoint
            (
            );
            /**Returns  the draw direction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieDirectionBuilder * DrawDirection
            (
            );
            /**Returns  the expression containing the sheet metal thickness value. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MetalThickness
            (
            );
            /**Returns  the expression containing the clearance value between the male and female bead sheets. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Clearance
            (
            );
            /**Returns  the indication if the "Left" direction for section orientation should be reversed from the default direction. 
                        The default direction is determined by the cross of the centerline tangency and the draw direction. True indicates that the default calculation should be reversed. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ReferenceDirection
            (
            );
            /**Sets  the indication if the "Left" direction for section orientation should be reversed from the default direction. 
                        The default direction is determined by the cross of the centerline tangency and the draw direction. True indicates that the default calculation should be reversed. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetReferenceDirection
            (
                bool referenceDirection /** referencedirection */ 
            );
            /**Returns  the indication if the bead should allow taper to be added to the side walls. Changing this will affect all segments and may affect the transition definition and output. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool TaperBead
            (
            );
            /**Sets  the indication if the bead should allow taper to be added to the side walls. Changing this will affect all segments and may affect the transition definition and output. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTaperBead
            (
                bool taperBead /** taperbead */ 
            );
            /**Returns  the orientation used to construct the sections representing the bead shape. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadBuilder::OrientationTypes BaseOrientation
            (
            );
            /**Sets  the orientation used to construct the sections representing the bead shape. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBaseOrientation
            (
                NXOpen::Die::DrawBeadBuilder::OrientationTypes baseOrientation /** baseorientation */ 
            );
            /**Returns  the method used to build the transition between segments. Changing this will affect all segments. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadBuilder::TransitionDefinitionTypes TransitionDefinition
            (
            );
            /**Sets  the method used to build the transition between segments. Changing this will affect all segments. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTransitionDefinition
            (
                NXOpen::Die::DrawBeadBuilder::TransitionDefinitionTypes transitionDefinition /** transitiondefinition */ 
            );
            /**Returns  the method used to calculate the female depth. Only valid when taper bead is false. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadBuilder::FemaleDepthTypes FemaleDepthType
            (
            );
            /**Sets  the method used to calculate the female depth. Only valid when taper bead is false. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFemaleDepthType
            (
                NXOpen::Die::DrawBeadBuilder::FemaleDepthTypes femaleDepthType /** femaledepthtype */ 
            );
            /**Returns  the expression containing the female depth value. Only valid when taper bead is false and type is @link NXOpen::Die::DrawBeadBuilder::FemaleDepthTypesConstant NXOpen::Die::DrawBeadBuilder::FemaleDepthTypesConstant@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FemaleDepthValue
            (
            );
            /**Returns  the method used to calculate the female width. Changing this will affect all segments. Only valid when taper bead is false. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadBuilder::FemaleWidthTypes FemaleWidthType
            (
            );
            /**Sets  the method used to calculate the female width. Changing this will affect all segments. Only valid when taper bead is false. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFemaleWidthType
            (
                NXOpen::Die::DrawBeadBuilder::FemaleWidthTypes femaleWidthType /** femalewidthtype */ 
            );
            /**Returns  the expression containing the female width value. Only valid when taper bead is false and type is @link NXOpen::Die::DrawBeadBuilder::FemaleWidthTypesConstant NXOpen::Die::DrawBeadBuilder::FemaleWidthTypesConstant@endlink .
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FemaleWidthValue
            (
            );
            /** For each curve of the centerline, create a bead segment. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateSegmentsFromCenterlineCurves
            (
            );
            /** Creates a @link NXOpen::Die::DrawBeadSegmentBuilder NXOpen::Die::DrawBeadSegmentBuilder@endlink  builder.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Die::DrawBeadSegmentBuilder * CreateDrawBeadSegment
            (
            );
            /**Returns  the list of @link NXOpen::Die::DrawBeadSegmentBuilder NXOpen::Die::DrawBeadSegmentBuilder@endlink  defining the bead sections along the centerline. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadSegmentBuilderList * SegmentList
            (
            );
            /**Returns  the indication if the taper at the start of the bead should be built. True indicates that the taper at the start of the bead should be created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool BuildStartTaper
            (
            );
            /**Sets  the indication if the taper at the start of the bead should be built. True indicates that the taper at the start of the bead should be created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBuildStartTaper
            (
                bool buildStartTaper /** buildstarttaper */ 
            );
            /**Returns  the taper definition at the start of the bead. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadTaperBuilder * StartTaper
            (
            );
            /**Returns  the indication if the taper at the end of the bead should be built. True indicates that the taper at the end of the bead should be created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool BuildEndTaper
            (
            );
            /**Sets  the indication if the taper at the end of the bead should be built. True indicates that the taper at the end of the bead should be created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBuildEndTaper
            (
                bool buildEndTaper /** buildendtaper */ 
            );
            /**Returns  the taper definition at the end of the bead. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadTaperBuilder * EndTaper
            (
            );
            /**Returns  the output to be constructed by the draw bead feature. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadBuilder::OutputTypes Output
            (
            );
            /**Sets  the output to be constructed by the draw bead feature. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOutput
            (
                NXOpen::Die::DrawBeadBuilder::OutputTypes output /** output */ 
            );
            /**Returns  the indication if the male and female output bodies are to be built with machining. Only valid when taper bead is true. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool MachineOffset
            (
            );
            /**Sets  the indication if the male and female output bodies are to be built with machining. Only valid when taper bead is true. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMachineOffset
            (
                bool machineOffset /** machineoffset */ 
            );
            /**Returns  the indication if the height curve should be generated. True if the height curve should be generated and kept. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool GenerateHeightCurve
            (
            );
            /**Sets  the indication if the height curve should be generated. True if the height curve should be generated and kept. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetGenerateHeightCurve
            (
                bool generateHeightCurve /** generateheightcurve */ 
            );
            /**Returns  the method used to orient the section dimensions. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DrawBeadBuilder::OrientSectionToDrawTypes OrientSectionToDraw
            (
            );
            /**Sets  the method used to orient the section dimensions. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOrientSectionToDraw
            (
                NXOpen::Die::DrawBeadBuilder::OrientSectionToDrawTypes orientSectionToDraw /** orientsectiontodraw */ 
            );
            /**Returns  the attribute definition to be applied to the male bead sheet body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * MaleSheetAttribute
            (
            );
            /**Returns  the attribute definition to be applied to the faces of the male bead sheet body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * MaleFaceAttribute
            (
            );
            /**Returns  the attribute definition to be applied to the female bead sheet body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * FemaleSheetAttribute
            (
            );
            /**Returns  the attribute definition to be applied to the faces of the female bead sheet body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * FemaleFaceAttribute
            (
            );
            /**Returns  the attribute definition to be applied to the sheet metal sheet body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * SheetMetalSheetAttribute
            (
            );
            /**Returns  the attribute definition to be applied to the faces of the sheet metal sheet body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * SheetMetalFaceAttribute
            (
            );
            /**Returns  the title of the real attribute to be applied to the male and female bodies. The value of the attribute specifies the machining offset value to be applied. The value is derived during feature construction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * MachiningOffsetTitleAttribute
            (
            );
            /**Returns  the distance tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /** Set the default draw direction to the -Z direction of the work coordinate system. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDefaultDrawDirection
            (
            );
            /** Set the detailed description strings of the draw bead. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMoreDetails
            (
                std::vector<NXString> & strings /** Array of detail strings.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get the detailed description strings of the draw bead.  @return  Array of detail strings. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: std::vector<NXString> GetMoreDetails
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
