#ifndef NXOpen_CAM_SURFACEDRIVEGEOMETRYSET_HXX_INCLUDED
#define NXOpen_CAM_SURFACEDRIVEGEOMETRYSET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_SurfaceDriveGeometrySet.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_SurfaceDriveGeometrySet.hxx>
#include <NXOpen/CAM_Typedefs.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class SurfaceDriveGeometrySet;
    }
    class NXObject;
    namespace CAM
    {
        class _SurfaceDriveGeometrySetBuilder;
        class SurfaceDriveGeometrySetImpl;
        /** Represents a geometry set for a CAM object. Multiple sets define the actual geometry of a specific type.  <br> To create a new instance of this class, use @link NXOpen::CAM::SurfaceDriveGeometry::CreateEmptyGeometrySet  NXOpen::CAM::SurfaceDriveGeometry::CreateEmptyGeometrySet @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  SurfaceDriveGeometrySet : public NXOpen::TaggedObject
        {
            private: SurfaceDriveGeometrySetImpl * m_surfacedrivegeometryset_impl;
            private: friend class  _SurfaceDriveGeometrySetBuilder;
            protected: SurfaceDriveGeometrySet();
            public: ~SurfaceDriveGeometrySet();
            /**Returns  the flag whether this set has custom tolerances activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CustomTolerance
            (
            );
            /**Sets  the flag whether this set has custom tolerances activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomTolerance
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the inner tolerance value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Intol
            (
            );
            /**Sets  the inner tolerance value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIntol
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the outer tolerance value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Outtol
            (
            );
            /**Sets  the outer tolerance value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOuttol
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the flag whether this set has custom stock activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CustomStock
            (
            );
            /**Sets  the flag whether this set has custom stock activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomStock
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the initial stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double InitialStock
            (
            );
            /**Sets  the initial stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInitialStock
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the drive stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DriveStock
            (
            );
            /**Sets  the drive stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDriveStock
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the safe clearance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double SafeClearance
            (
            );
            /**Sets  the safe clearance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSafeClearance
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the flag whether this set has custom feed rate activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CustomFeed
            (
            );
            /**Sets  the flag whether this set has custom feed rate activated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomFeed
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the feed rate value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double FeedValue
            (
            );
            /**Sets  the feed rate value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFeedValue
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the feed rate unit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::FeedRateUnit FeedUnit
            (
            );
            /**Sets  the feed rate unit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFeedUnit
            (
                NXOpen::CAM::FeedRateUnit newValue /** newvalue */ 
            );
            /**Returns  the surface 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * Surface
            (
            );
            /**Sets  the surface 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSurface
            (
                NXOpen::NXObject * surf /** surf */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
