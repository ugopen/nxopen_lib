#ifndef NXOpen_CAE_RESPONSESIMULATION_SOLUTION_HXX_INCLUDED
#define NXOpen_CAE_RESPONSESIMULATION_SOLUTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResponseSimulation_Solution.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ResponseSimulation_EvaluationParameters.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class Solution;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class EvaluationParameters;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class FrfEvaluationSetting;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class ModalProperties;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class RSEvent;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class Sensor;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class StrainGage;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class TransmissibilityEvaluationSetting;
        }
    }
    class NXObject;
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class _SolutionBuilder;
            class SolutionImpl;
            /** Represents a meta solution providing response analysis functionalities in the .sim file   <br> To create or edit an instance of this class, use @link NXOpen::CAE::ResponseSimulation::SolutionBuilder  NXOpen::CAE::ResponseSimulation::SolutionBuilder @endlink  <br> 
             <br>  Created in NX5.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  Solution : public NXOpen::NXObject
            {
                private: SolutionImpl * m_solution_impl;
                private: friend class  _SolutionBuilder;
                protected: Solution();
                public: ~Solution();
                /** Returns the response simulation solution name  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXString GetSolutionName
                (
                );
                /** Sets the response simulation solution name 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSolutionName
                (
                    const NXString & solutionName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                    bool renameResultFile /** if there are result files associated with the solution, rename the files or not*/
                );
                /** Sets the response simulation solution name 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                void SetSolutionName
                (
                    const char * solutionName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                    bool renameResultFile /** if there are result files associated with the solution, rename the files or not*/
                );
                /** Deletes a response simulation solution, including all events and excitations
                            under it 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void Destroy
                (
                    bool deleteResultFile /** delete the result files associated with the solution or not */
                );
                /** Returns the modal properties of Response Analysis Meta solution @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::ModalProperties * GetModalProperties
                (
                );
                /** Returns the evaluation parameters of Response Analysis Meta solution @return  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::EvaluationParameters * GetEvaluationParameters
                (
                );
                /** Returns all the events of the solution @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: std::vector<NXOpen::CAE::ResponseSimulation::RSEvent *> GetEvents
                (
                );
                /** Imports an event to the solution  @return   
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::RSEvent * ImportEvent
                (
                    const NXString & eventDefinitionFile /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                    const NXString & suggestedName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Imports an event to the solution  @return   
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                NXOpen::CAE::ResponseSimulation::RSEvent * ImportEvent
                (
                    const char * eventDefinitionFile /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                    const char * suggestedName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Clones an event to the solution  @return   
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::RSEvent * CloneEvent
                (
                    NXOpen::CAE::ResponseSimulation::RSEvent * sourceEvent /** source event */ ,
                    const NXString & suggestedName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Clones an event to the solution  @return   
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                NXOpen::CAE::ResponseSimulation::RSEvent * CloneEvent
                (
                    NXOpen::CAE::ResponseSimulation::RSEvent * sourceEvent /** source event */ ,
                    const char * suggestedName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /**Returns  the active event 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::RSEvent * ActiveEvent
                (
                );
                /**Sets  the active event 
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetActiveEvent
                (
                    NXOpen::CAE::ResponseSimulation::RSEvent * activeEvent /** active event */ 
                );
                /** Returns the result file name of solution  @return  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXString GetResultFileName
                (
                );
                /** Performs evaluation for FRF. The evaluation results will be stored in an AFU file,
                        which name could be returned by @link NXOpen::CAE::ResponseSimulation::Solution::GetResultFileName NXOpen::CAE::ResponseSimulation::Solution::GetResultFileName@endlink  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void EvaluateFrf
                (
                    NXOpen::CAE::ResponseSimulation::FrfEvaluationSetting * evaluationSetting /** evaluation setting */ 
                );
                /** Performs evaluation for transimissibility. The evaluation results will be stored in an AFU file,
                        which name could be returned by @link NXOpen::CAE::ResponseSimulation::Solution::GetResultFileName NXOpen::CAE::ResponseSimulation::Solution::GetResultFileName@endlink  
                 <br>  Created in NX5.0.0.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void EvaluateTransmissibility
                (
                    NXOpen::CAE::ResponseSimulation::TransmissibilityEvaluationSetting * evaluationSetting /** evaluation setting */ 
                );
                /** Clones a sensor to the solution  @return   
                 <br>  Created in NX5.0.1.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::Sensor * CloneSensor
                (
                    NXOpen::CAE::ResponseSimulation::Sensor * sourceSensor /** source sensor */ ,
                    const NXString & suggestedName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Clones a sensor to the solution  @return   
                 <br>  Created in NX5.0.1.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                NXOpen::CAE::ResponseSimulation::Sensor * CloneSensor
                (
                    NXOpen::CAE::ResponseSimulation::Sensor * sourceSensor /** source sensor */ ,
                    const char * suggestedName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Clones a strain gage to the solution  @return   
                 <br>  Created in NX5.0.1.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::StrainGage * CloneStrainGage
                (
                    NXOpen::CAE::ResponseSimulation::StrainGage * sourceGage /** source gage */ ,
                    const NXString & suggestedName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Clones a strain gage to the solution  @return   
                 <br>  Created in NX5.0.1.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                NXOpen::CAE::ResponseSimulation::StrainGage * CloneStrainGage
                (
                    NXOpen::CAE::ResponseSimulation::StrainGage * sourceGage /** source gage */ ,
                    const char * suggestedName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Checks status and updates solution properties for the solution which became obsolete because
                            referenced modal shape file was changed. The solution will be reactivated as normal state after status checking. 
                 <br>  Created in NX8.0.1.  <br>  
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void CheckObsoleteStatus
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
