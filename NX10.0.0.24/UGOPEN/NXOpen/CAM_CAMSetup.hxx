#ifndef NXOpen_CAM_CAMSETUP_HXX_INCLUDED
#define NXOpen_CAM_CAMSETUP_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CAMSetup.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CAMObject.hxx>
#include <NXOpen/CAM_ObjectNotes.hxx>
#include <NXOpen/CAM_CAMObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class CAMSetup;
    }
    namespace CAM
    {
        class CAMFeature;
    }
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class CutDepthChecker;
    }
    namespace CAM
    {
        class FeatureProcessBuilder;
    }
    namespace CAM
    {
        class FeatureRecognitionBuilder;
    }
    namespace CAM
    {
        class FeatureTeaching;
    }
    namespace CAM
    {
        class FeedsOptimizeBuilder;
    }
    namespace CAM
    {
        class NCAssistantBuilder;
    }
    namespace CAM
    {
        class NCGroup;
    }
    namespace CAM
    {
        class NCGroupCollection;
    }
    namespace CAM
    {
        class NcmctPartMountingBuilder;
    }
    namespace CAM
    {
        class ObjectNotes;
    }
    namespace CAM
    {
        class ObjectsFeedsBuilder;
    }
    namespace CAM
    {
        class ObjectsUdeSet;
    }
    namespace CAM
    {
        class OperationCollection;
    }
    namespace CAM
    {
        class OperationTeaching;
    }
    namespace CAM
    {
        class OperationTransformBuilder;
    }
    namespace CAM
    {
        class PreprocessGeometryBuilder;
    }
    namespace CAM
    {
        class SurfaceRegions;
    }
    namespace CAM
    {
        class Tool;
    }
    namespace CAM
    {
        class ToolPathDivideBuilder;
    }
    namespace CAM
    {
        class ToolPathSplitBuilder;
    }
    namespace CAM
    {
        class ToolPathTiltBuilder;
    }
    namespace Features
    {
        class Feature;
    }
    namespace CAM
    {
        class _CAMSetupBuilder;
        class CAMSetupImpl;
        /** cam setup  <br> To obtain an instance of this class, use @link NXOpen::Part::CAMSetup  NXOpen::Part::CAMSetup @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  CAMSetup : public NXOpen::CAM::CAMObject
        {
            /** Output units used in output clsf and postprocess.*/
            public: enum OutputUnits
            {
                OutputUnitsInch/** use inch as output unit */,
                OutputUnitsMetric/** use metric as output unit */,
                OutputUnitsPostDefined/** use post defined unit as output unit */
            };

            /** Output warning setting for Postprocess */
            public: enum PostprocessSettingsOutputWarning
            {
                PostprocessSettingsOutputWarningYes/** output the warning file */,
                PostprocessSettingsOutputWarningNo/** not output the warning file */,
                PostprocessSettingsOutputWarningPostDefined/** use post defined setting */
            };

            /** Review tool setting for Postprocess */
            public: enum PostprocessSettingsReviewTool
            {
                PostprocessSettingsReviewToolOn/** show the review tool window */,
                PostprocessSettingsReviewToolOff/** not show the review tool window */,
                PostprocessSettingsReviewToolPostDefined/** use post defined setting */
            };

            /** Paste position.*/
            public: enum Paste
            {
                PasteBefore/** paste before */,
                PasteInside/** paste inside */,
                PasteAfter/** paste after */
            };

            /** The UDE type*/
            public: enum Ude
            {
                UdeStart/** start UDE */,
                UdeEnd/** end UDE */
            };

            /** ONT view.*/
            public: enum View
            {
                ViewProgramOrder/** program order */,
                ViewMachineMethod/** machine method */,
                ViewGeometry/** geometry */,
                ViewMachineTool/** machine tool */
            };

            private: CAMSetupImpl * m_camsetup_impl;
            private: friend class  _CAMSetupBuilder;
            protected: CAMSetup();
            public: ~CAMSetup();
            /** Show 2D workpiece 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Show2dWorkpiece
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Show ingoing 2D workpiece 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Show2dWorkpieceIn
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Show outgoing 2D workpiece 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Show2dWorkpieceOut
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Show 3D workpiece 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Show3dWorkpiece
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Parallel create 3D 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void ParallelCreate3d
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Show spinning 3D workpiece
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void ShowSpinning3dWorkpiece
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Delete 3D workpieces of the selected operations 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Delete3dWorkpieces
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of operations */
            );
            /** Generate tool path 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void GenerateToolPath
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Replay tool path 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void ReplayToolPath
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** List tool path 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void ListToolPath
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Delete tool path 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void DeleteToolPath
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Output CLSF 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void OutputClsf
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const NXString & clsfFormat /** clsf format   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & outfileName /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits outputUnits /** output file unit */
            );
            /** Output CLSF 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void OutputClsf
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const char * clsfFormat /** clsf format   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * outfileName /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits outputUnits /** output file unit */
            );
            /** Postprocess 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Postprocess
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const NXString & machineType /** machine type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & outfileName /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits outputUnits /** output file unit */
            );
            /** Postprocess 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void Postprocess
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const char * machineType /** machine type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * outfileName /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits outputUnits /** output file unit */
            );
            /** Postprocess 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void PostprocessWithSetting
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const NXString & machineType /** machine type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & outfileName /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits outputUnits /** output file unit */,
                NXOpen::CAM::CAMSetup::PostprocessSettingsOutputWarning outputWarning /** whether ouput warning file */,
                NXOpen::CAM::CAMSetup::PostprocessSettingsReviewTool reviewTool /** whether active review tool window */
            );
            /** Postprocess 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void PostprocessWithSetting
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const char * machineType /** machine type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * outfileName /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits outputUnits /** output file unit */,
                NXOpen::CAM::CAMSetup::PostprocessSettingsOutputWarning outputWarning /** whether ouput warning file */,
                NXOpen::CAM::CAMSetup::PostprocessSettingsReviewTool reviewTool /** whether active review tool window */
            );
            /** Cut objects 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void CutObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objectsToBeMoved /** array of objects to be moved */
            );
            /** Move objects 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void MoveObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objectsToBeMoved /** array of objects to be moved */,
                NXOpen::CAM::CAMObject * destinationObject /** the destination object */,
                NXOpen::CAM::CAMSetup::Paste pastePosition /** paste inside or after the destination object */
            );
            /** Buffer objects to the clipboard and prepare for copy later 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void BufferObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objectsToBeBuffered /** array of objects to be buffered */
            );
            /** Copy objects  @return  array of new objects 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: std::vector<NXOpen::CAM::CAMObject *> CopyObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objectsToBeMoved /** array of objects to be moved */,
                NXOpen::CAM::CAMObject * destinationObject /** the destination object */,
                NXOpen::CAM::CAMSetup::Paste pastePosition /** paste inside or after the destination object */
            );
            /** Copy objects with reference @return  array of new objects 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: std::vector<NXOpen::CAM::CAMObject *> CopyObjectsWithReference
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objectsToBeMoved /** array of objects to be moved */,
                NXOpen::CAM::CAMObject * destinationObject /** the destination object */,
                NXOpen::CAM::CAMSetup::Paste pastePosition /** paste inside or after the destination object */
            );
            /** Create Tool Path Divide builder  @return  array of new objects 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ToolPathDivideBuilder * CreateToolPathDivideBuilder
            (
                const std::vector<NXOpen::CAM::CAMObject *> & tpObjectsToDivide /** array of objects to divide */
            );
            /** Tool Path Divide 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void DivideToolPaths
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                NXOpen::CAM::ToolPathDivideBuilder * builder /** builder containing split parameters */
            );
            /** Lock Tool Path 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void LockToolPaths
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                bool lock /** lock the tool path if true, else unlock the tool path */
            );
            /** Lock Tool Path  @return  tool path lock status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool IsToolPathLocked
            (
                NXOpen::CAM::CAMObject * object /** object whose tool path is checked */
            );
            /** Approve objects 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void ApproveObjects
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Unapprove objects 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void UnapproveObjects
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Create Transform builder. 
                    Note: Commit a Transform Builder will apply a transformation.  @return  created Transform Builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::OperationTransformBuilder * CreateOperationTransformBuilder
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objectsToTransform /** array of objects to transform */
            );
            /** Creates a preprocess geometry builder  @return  preprocess geometry builder created 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::PreprocessGeometryBuilder * CreatePreprocessGeometryBuilder
            (
            );
            /** Creates a surface regions builder  @return  surface regions builder created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::SurfaceRegions * CreateSurfaceRegions
            (
                NXOpen::Features::Feature * feature /** Feature to be edited */
            );
            /** Creates a CAM.FeatureRecognitionBuilder  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FeatureRecognitionBuilder * CreateFeatureRecognitionBuilder
            (
                NXOpen::CAM::CAMObject * param /** not used */
            );
            /** Creates a CAM.FeatureTeaching  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FeatureTeaching * CreateFeatureTeaching
            (
                NXOpen::CAM::CAMObject * param /** not used */
            );
            /** Creates a CAM.OperationTeaching  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::OperationTeaching * CreateOperationTeaching
            (
                NXOpen::CAM::CAMObject * param /** not used */
            );
            /** Optimize 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Optimize
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects to optimize */,
                bool consolidateTools /** consolidate tools */,
                bool minimizeToolChanges /** minimize tool changes */,
                bool createOptimizationGroup /** create optimization group */
            );
            /** Set Template status 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTemplateStatus
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects to adjust */,
                bool useAsParent /** object can be used as a template or not */,
                bool createIfParentCreated /** create if parent is created */
            );
            /** Gouge Check 
             <br>  @deprecated Deprecated in NX9.0.0.  Use new version with additional arguments instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use new version with additional arguments instead.") void GougeCheck
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects to do gouge checking */,
                bool checkForHolderCollision /** check for tool holder collision */
            );
            /** Gouge Check 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void GougeCheck
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects to do gouge checking */,
                bool checkForHolderCollision /** check for tool holder collision */,
                bool useParametric /** use parametric tool shape  */,
                bool useUserdefStock /** use user defined stock */,
                double userdefStock /** user defined stock */
            );
            /** Customize from Template 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void CustomizationUpdateFromTemplate
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** destination objects for customization */
            );
            /** Customize from Object 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void CustomizationUpdateFromObject
            (
                NXOpen::CAM::CAMObject * destinationObject /** destination object for customization */,
                NXOpen::CAM::CAMObject * sourceObject /** source object for customization */
            );
            /** Set Machining Data  @return  array of errors 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: std::vector<NXOpen::CAM::CAMObject::ErrorItem> SetMachiningData
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Check for suppressed geometry  @return  
             <br>  Created in NX5.0.4.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool HasSuppressedGeom
            (
                NXOpen::CAM::CAMObject * param /** object to test */
            );
            /** Remove suppressed geometry 
             <br>  Created in NX5.0.4.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void RemoveSuppressedGeom
            (
                NXOpen::CAM::CAMObject * param /** object to operate on */
            );
            /** Create Tool Path Split by Holder builder  @return  array of new objects 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ToolPathSplitBuilder * CreateToolPathSplitBuilder
            (
                const std::vector<NXOpen::CAM::CAMObject *> & tpObjectsToDivide /** array of objects to divide */
            );
            /** Tool Path Split by Holder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SplitToolPaths
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                NXOpen::CAM::ToolPathSplitBuilder * builder /** builder containing split parameters */
            );
            /** Create Feeds builder.  @return  created object feed builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ObjectsFeedsBuilder * CreateFeedsBuilder
            (
                const std::vector<NXOpen::CAM::CAMObject *> & params /** array of objects */
            );
            /** Create Notes.  @return  created object notes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ObjectNotes * CreateObjectNotes
            (
                NXOpen::CAM::CAMObject * opr /** opr */ 
            );
            /** Check if the specified object is an operation.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsOperation
            (
                NXOpen::CAM::CAMObject * camobject /** camobject */ 
            );
            /** Check if the specified object is a group.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsGroup
            (
                NXOpen::CAM::CAMObject * camObject /** camobject */ 
            );
            /** Get root of the specified branch.  @return root of the specified branch
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NCGroup * GetRoot
            (
                NXOpen::CAM::CAMSetup::View branch /** branch from which to get setup root */
            );
            /** Creates NC Assistant builder  @return  NC Assistant builder created 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NCAssistantBuilder * CreateNCAssistantBuilder
            (
            );
            /** Creates a feeds optimize builder  @return  feeds optimize builder created 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FeedsOptimizeBuilder * CreateFeedsOptimizeBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Create ObjectsUdeSet.  @return  created objects ude set 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ObjectsUdeSet * CreateObjectsUdeSet
            (
                const std::vector<NXOpen::CAM::CAMObject *> & params /** array of operations or groups */,
                NXOpen::CAM::CAMSetup::Ude udeType /** ude type */
            );
            /** Create ObjectsUdeSet for features  @return  created objects ude set 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ObjectsUdeSet * CreateObjectsUdeSet
            (
                const std::vector<NXOpen::CAM::CAMObject *> & params /** array of operations */,
                NXOpen::CAM::CAMSetup::Ude udeType /** ude type */,
                const std::vector<NXOpen::CAM::CAMFeature *> & features /** array of features */
            );
            /** Minimum tool length 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void MinToolLen
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Creates a CAM.FeatureProcessBuilder  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: NXOpen::CAM::FeatureProcessBuilder * CreateFeatureProcessBuilder
            (
            );
            /** Retrieve a tool from library  @return  created the tool library 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Tool * RetrieveTool
            (
                const NXString & libRef /** the library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool* success /** success */ 
            );
            /** Retrieve a tool from library  @return  created the tool library 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAM::Tool * RetrieveTool
            (
                const char * libRef /** the library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool* success /** success */ 
            );
            /** Retrieve a tool from library to the target @return  created the tool library 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Tool * RetrieveTool
            (
                const NXString & libRef /** the library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMObject * target /** the target where the tool is mounted */,
                NXOpen::CAM::CAMObject ** nextTarget /** the next target where the tool can be mounted */,
                bool* success /** success */ 
            );
            /** Retrieve a tool from library to the target @return  created the tool library 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAM::Tool * RetrieveTool
            (
                const char * libRef /** the library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMObject * target /** the target where the tool is mounted */,
                NXOpen::CAM::CAMObject ** nextTarget /** the next target where the tool can be mounted */,
                bool* success /** success */ 
            );
            /** Create Tool Path Tilt builder  @return  array of new objects 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ToolPathTiltBuilder * CreateToolPathTiltBuilder
            (
                const std::vector<NXOpen::CAM::CAMObject *> & tpObjectsToTilt /** array of objects to tilt */
            );
            /** Tool Path Tilt 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void TiltToolPaths
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                NXOpen::CAM::ToolPathTiltBuilder * builder /** builder containing tilt parameters */
            );
            /** Creates a Part Mounting Builder.
                     Note: Commit a Part Mounting Builder will perform the Part Mounting and no object is returned.  @return  part mounting builder created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NcmctPartMountingBuilder * CreateNcmctPartMountingBuilder
            (
                const NXString & libRef /** a unique library reference identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a Part Mounting Builder.
                     Note: Commit a Part Mounting Builder will perform the Part Mounting and no object is returned.  @return  part mounting builder created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            NXOpen::CAM::NcmctPartMountingBuilder * CreateNcmctPartMountingBuilder
            (
                const char * libRef /** a unique library reference identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Retrieve a device from library  @return  machine device created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::NCGroup * RetrieveDevice
            (
                const NXString & libRef /** a unique library reference identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Retrieve a device from library  @return  machine device created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAM::NCGroup * RetrieveDevice
            (
                const char * libRef /** a unique library reference identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the flag indicating if this setup is initialized from a library.
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: bool IsLibrarySetup
            (
            );
            /**Returns  the template library reference
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: NXString LibraryReference
            (
            );
            /**Sets  the template library reference
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLibraryReference
            (
                const NXString & libraryReference /** libraryreference */ 
            );
            /**Sets  the template library reference
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetLibraryReference
            (
                const char * libraryReference /** libraryreference */ 
            );
            /** Parallel Generate tool path 
             <br>  Created in NX7.5.5.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void ParallelGenerate
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Part material @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXString GetPartMaterial
            (
            );
            /** Part material
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPartMaterial
            (
                const NXString & libRef /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Part material
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetPartMaterial
            (
                const char * libRef /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a Cut Depth Checker.
                     Note: Commit will not return an object @return  the cut depth checker object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::CutDepthChecker * CreateCutDepthChecker
            (
            );
            /** Removes: 
                    - The machine part component from the CAM assembly 
                    - The machine kinematics from the CAM Setup
                    - Carriers and Pockets from the CAM Setup, this means cleanup the Operation Navigator
                
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void RemoveMachine
            (
            );
            /** Removes vnck machine data 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void DeleteVnckMachineData
            (
            );
            /** Get the param object which is invoking the exit API @return  the cam exit object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::CAMObject * GetCamExitObject
            (
            );
            /** Get part material data
             <br>  Created in NX8.0.2.  <br>  
             <br> License requirements : None */
            public: void GetPartMaterialData
            (
                NXString* libref /** libref */ ,
                NXString* name /** name */ ,
                NXString* description /** description */ ,
                NXString* code /** code */ ,
                NXString* hardness /** hardness */ 
            );
            /** Get machine libref @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString GetMachineLibref
            (
            );
            /** Restore dependencies of selected objects
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void RestoreDependencies
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Update geometry dependencies of selected objects
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void UpdateGeometryDependencies
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Remove dependencies of selected objects
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void RemoveDependencies
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Switch Layer and Layout 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SwitchLayerLayout
            (
                NXOpen::CAM::CAMObject * object /** the object for which the layer and layout has to be switched */
            );
            /**Returns  the setting for ball center output at posting time
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: bool OutputBallCenter
            (
            );
            /**Sets  the setting for ball center output at posting time
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOutputBallCenter
            (
                bool outputBallCenter /** outputballcenter */ 
            );


            /** Returns the NCGroupCollection instance belonging to this setup 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAM::NCGroupCollection *CAMGroupCollection();
            /** Returns the OperationCollection instance belonging to this setup 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAM::OperationCollection *CAMOperationCollection();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
