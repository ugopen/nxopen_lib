#ifndef NXOpen_FEATURES_DRAFTBODYBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_DRAFTBODYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_DraftBodyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_DraftBodyBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class DraftBodyBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    class SelectDisplayableObject;
    namespace Features
    {
        class _DraftBodyBuilderBuilder;
        class DraftBodyBuilderImpl;
        /**
            Represents a @link NXOpen::Features::DraftBody NXOpen::Features::DraftBody@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateDraftBodyBuilder  NXOpen::Features::FeatureCollection::CreateDraftBodyBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DraftAngle.Value </td> <td> 
         
        10.0 </td> </tr> 

        <tr><td> 
         
        DraftMethod </td> <td> 
         
        Isocline </td> </tr> 

        <tr><td> 
         
        ExtremeFacePointOverridesStationary </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        FilletRadius.Value </td> <td> 
         
        2.5 (millimeters part), 0.1 (inches part) </td> </tr> 

        <tr><td> 
         
        MatchScope </td> <td> 
         
        All </td> </tr> 

        <tr><td> 
         
        MatchType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        RepairPartingEdge </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        RepairRadius.Value (deprecated) </td> <td> 
         
        2.5 (millimeters part), 0.1 (inches part) </td> </tr> 

        <tr><td> 
         
        RepairingOption (deprecated) </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        Edges </td> </tr> 

        </table>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  DraftBodyBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Describes the Draft Body method as true draft or isocline draft.
                     */
            public: enum Method
            {
                MethodIsocline/** Indicates use of isocline algorithm to create draft. Default value. */,
                MethodTrueDraft/** Indicates use of true draft algorithm to create draft.*/
            };

            /** Describes the different match options.
                     */
            public: enum MatchOption
            {
                MatchOptionNone/** No match option is specified */,
                MatchOptionAll/** All faces-to-draft are to be matched */,
                MatchOptionAllButSelected/** All faces-to-draft except the ones explicitly indicated are to be matched */
            };

            /** Describes the different match scopes.
                     */
            public: enum MatchingScope
            {
                MatchingScopeAll/** All faces-to-draft are to be matched */,
                MatchingScopeAllButSelected/** All faces-to-draft except the ones explicitly indicated are to be matched */
            };

            /** Describes the different match types
                     */
            public: enum MatchingType
            {
                MatchingTypeNone/** No match type is specified */,
                MatchingTypeToIsocline/** Match type Isocline */,
                MatchingTypeTangentToFace/** Match type Tangent to face */,
                MatchingTypeFromEdges/** Match type from edges */
            };

            /** Describes the different repair options.
                     */
            public: enum RepairOption
            {
                RepairOptionNone/** No repair option is specified */,
                RepairOptionBlends/** Repair concave miter corners with blends */,
                RepairOptionPlanes/** Repair concave miter corners with planes */,
                RepairOptionBoth/** Repair concave miter corners with both blends and planes */
            };

            /** Describes the different repair parting edges options.
                     */
            public: enum RepairingPartingEdgeOption
            {
                RepairingPartingEdgeOptionNone/** No repair parting edge option is specified */,
                RepairingPartingEdgeOptionWithFillet/** Repair concave miter corners with fillet */,
                RepairingPartingEdgeOptionWithLineAndFillet/** Repair concave miter corners with both fillet and line */
            };

            /** Describes the different Draft Body types
                     */
            public: enum Types
            {
                TypesEdges/** From Edges */,
                TypesFaces/** Faces to Draft */
            };

            private: DraftBodyBuilderImpl * m_draftbodybuilder_impl;
            private: friend class  _DraftBodyBuilderBuilder;
            protected: DraftBodyBuilder();
            public: ~DraftBodyBuilder();
            /**Returns  the draft body type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::DraftBodyBuilder::Types Type
            (
            );
            /**Sets  the draft body type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::DraftBodyBuilder::Types type /** type */ 
            );
            /**Returns  the parting object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * PartingObject
            (
            );
            /**Returns  the draw direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DrawDirection
            (
            );
            /**Sets  the draw direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDrawDirection
            (
                NXOpen::Direction * drawDirection /** drawdirection */ 
            );
            /**Returns  the stationary edges above parting 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * StationaryEdgesAboveParting
            (
            );
            /**Returns  the stationary edges below parting 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * StationaryEdgesBelowParting
            (
            );
            /**Returns  the faces to draft 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FacesToDraft
            (
            );
            /**Returns  the draft angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DraftAngle
            (
            );
            /**Returns  the draft method 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::DraftBodyBuilder::Method DraftMethod
            (
            );
            /**Sets  the draft method 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDraftMethod
            (
                NXOpen::Features::DraftBodyBuilder::Method draftMethod /** draftmethod */ 
            );
            /**Returns  the matching option 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::DraftBodyBuilder::MatchScope NXOpen::Features::DraftBodyBuilder::MatchScope@endlink  instead <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::DraftBodyBuilder::MatchScope instead") NXOpen::Features::DraftBodyBuilder::MatchOption MatchingOption
            (
            );
            /**Sets  the matching option 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::DraftBodyBuilder::SetMatchScope NXOpen::Features::DraftBodyBuilder::SetMatchScope@endlink  instead <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::DraftBodyBuilder::SetMatchScope instead") void SetMatchingOption
            (
                NXOpen::Features::DraftBodyBuilder::MatchOption matchingOption /** matchingoption */ 
            );
            /**Returns  the match scope 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::DraftBodyBuilder::MatchingScope MatchScope
            (
            );
            /**Sets  the match scope 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchScope
            (
                NXOpen::Features::DraftBodyBuilder::MatchingScope matchingScope /** matchingscope */ 
            );
            /**Returns  the match type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::DraftBodyBuilder::MatchingType MatchType
            (
            );
            /**Sets  the match type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchType
            (
                NXOpen::Features::DraftBodyBuilder::MatchingType matchType /** matchtype */ 
            );
            /**Returns  the edges that will not be matched when matching option is AllButSelected 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * UnmatchedEdges
            (
            );
            /**Returns  the faces that will not be matched when matching option is AllButSelected 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * UnmatchedFaces
            (
            );
            /**Returns  the repairing option 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::DraftBodyBuilder::RepairPartingEdge NXOpen::Features::DraftBodyBuilder::RepairPartingEdge@endlink  instead <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::DraftBodyBuilder::RepairPartingEdge instead") NXOpen::Features::DraftBodyBuilder::RepairOption RepairingOption
            (
            );
            /**Sets  the repairing option 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::DraftBodyBuilder::SetRepairPartingEdge NXOpen::Features::DraftBodyBuilder::SetRepairPartingEdge@endlink  instead <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::DraftBodyBuilder::SetRepairPartingEdge instead") void SetRepairingOption
            (
                NXOpen::Features::DraftBodyBuilder::RepairOption repairingOption /** repairingoption */ 
            );
            /**Returns  the repairing parting edge 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::DraftBodyBuilder::RepairingPartingEdgeOption RepairPartingEdge
            (
            );
            /**Sets  the repairing parting edge 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRepairPartingEdge
            (
                NXOpen::Features::DraftBodyBuilder::RepairingPartingEdgeOption repairingPartingEdges /** repairingpartingedges */ 
            );
            /**Returns  the repair radius 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::DraftBodyBuilder::FilletRadius NXOpen::Features::DraftBodyBuilder::FilletRadius@endlink  instead <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::DraftBodyBuilder::FilletRadius instead") NXOpen::Expression * RepairRadius
            (
            );
            /**Returns  the fillet radius 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FilletRadius
            (
            );
            /**Returns  the extreme face point overrides stationary 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ExtremeFacePointOverridesStationary
            (
            );
            /**Sets  the extreme face point overrides stationary 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtremeFacePointOverridesStationary
            (
                bool extremeFacePointOverridesStationary /** extremefacepointoverridesstationary */ 
            );
            /**Returns  the edges to move to drafted face 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * EdgesToMoveToDraftedFace
            (
            );
            /**Returns  the faces to move to drafted face 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FacesToMoveToDraftedFace
            (
            );
            /**Returns  the tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
