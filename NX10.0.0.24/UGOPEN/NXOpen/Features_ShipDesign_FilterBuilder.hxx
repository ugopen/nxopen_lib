#ifndef NXOpen_FEATURES_SHIPDESIGN_FILTERBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHIPDESIGN_FILTERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShipDesign_FilterBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace ShipDesign
        {
            class FilterBuilder;
        }
    }
    class Builder;
    class NXObject;
    class TaggedObject;
    namespace Features
    {
        namespace ShipDesign
        {
            class _FilterBuilderBuilder;
            class FilterBuilderImpl;
            /** A builder that allows the user to define common properties of ship objects and then
                    add objects of similar properties to the select object list.  <br> To create a new instance of this class, use @link NXOpen::Features::ShipCollection::CreateFilterBuilder  NXOpen::Features::ShipCollection::CreateFilterBuilder @endlink  <br> 
             <br>  Created in NX8.5.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  FilterBuilder : public NXOpen::Builder
            {
                private: FilterBuilderImpl * m_filterbuilder_impl;
                private: friend class  _FilterBuilderBuilder;
                protected: FilterBuilder();
                public: ~FilterBuilder();
                /** Gets the names of the properties that can be chosen for filtering the selection. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: void GetAvailableProperties
                (
                    std::vector<NXString> & properties /** properties */ 
                );
                /** Gets the current status true == on or selected, false == off or not selected of the input property.  @return  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool GetPropertyStatus
                (
                    const NXString & property /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Gets the current status true == on or selected, false == off or not selected of the input property.  @return  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                bool GetPropertyStatus
                (
                    const char * property /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** GSts the current status true == on or selected, false == off or not selected of the input property. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: void SetPropertyStatus
                (
                    const NXString & property /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                    bool onOrOff /** onoroff */ 
                );
                /** GSts the current status true == on or selected, false == off or not selected of the input property. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                void SetPropertyStatus
                (
                    const char * property /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                    bool onOrOff /** onoroff */ 
                );
                /**Returns  the object that is used to compare the property values with. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::TaggedObject * CompareObject
                (
                );
                /**Sets  the object that is used to compare the property values with. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: void SetCompareObject
                (
                    NXOpen::TaggedObject * compareObject /** compareobject */ 
                );
                /** Frees the memory allocated by @link Features::ShipDesign::FilterBuilder::GetAvailableProperties Features::ShipDesign::FilterBuilder::GetAvailableProperties@endlink  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: void FreeAvailableProperties
                (
                    std::vector<NXString> & properties /** properties */ 
                );
                /** Tests if the object is valid given the current status of the properties. Outputs true if the
                            object passes the tests, false if it does not.  @return  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool IsObjectValid
                (
                    NXOpen::NXObject * object /** object */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
