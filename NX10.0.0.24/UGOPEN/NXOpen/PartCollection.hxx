#ifndef NXOpen_PARTCOLLECTION_HXX_INCLUDED
#define NXOpen_PARTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PartCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/LinkedMirrorPartBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/Part.hxx>
#include <NXOpen/PartCloseResponses.hxx>
#include <NXOpen/PartLoadStatus.hxx>
#include <NXOpen/PartReopenReport.hxx>
#include <NXOpen/PartSaveStatus.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class PartCollection;
    class Session;
    class Part;
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class FileNew;
    class LinkedMirrorPartBuilder;
    class LoadOptions;
    namespace PDM
    {
        class PartManager;
    }
    class PartCloseResponses;
    class PartLoadStatus;
    class PartReopenReport;
    class PartSaveStatus;
    class SaveOptions;
    namespace ShapeSearch
    {
        class SearchManager;
    }
    class PartCollectionImpl;
    /** Represents the collection of all parts in a session.

     <br>  
     Several methods including @link NXOpen::PartCollection::NewDisplay NXOpen::PartCollection::NewDisplay@endlink ,
     @link NXOpen::PartCollection::OpenDisplay NXOpen::PartCollection::OpenDisplay@endlink  and @link NXOpen::BasePart::SaveAs NXOpen::BasePart::SaveAs@endlink 
     can take part names in NX Manager command-line format while running in NX Manager mode.
     This format is as follows:
     <br> 

     @code 
         Master Part:        \<@\>DB/part-number/revision
                             \<@\>DB/part-number/revision/master
                             \<@\>DB/part-number/revision/master
                             \<@\>DB/part-number/revision/master/version
         Non-Master Part:    \<@\>DB/part-number/revision/type/name
                             \<@\>DB/part-number/revision/type/name/version
     @endcode 

     <br> 
     The separator character ('/') may be any character not used in
     the part-number, revision or type fields. It is inferred
     as the first character after the "\<@\>DB" prefix.
     <br> 
     <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  PartCollection : public NXOpen::TaggedObjectCollection
    {
        /**  @brief  Indicates the reason why it was not possible to use Design in Context (i.e. to set
                the work part to a component of the displayed part.)  

          Used as a return code for
                @link NXOpen::PartCollection::SetDisplay NXOpen::PartCollection::SetDisplay@endlink 
            */
        public: enum SdpsStatus
        {
            SdpsStatusOk/** The work part was set successfully. This code indicates 
                                                                success: all other codes indicate failure */,
            SdpsStatusOutsideModelling/** The modelling application is not active */,
            SdpsStatusDrawingDisplayed/** A drawing is currently displayed */,
            SdpsStatusInPartsList/** The Part List module is active */,
            SdpsStatusGdt/** The Tolerancing module is active */,
            SdpsStatusUnitsMismatch/** The work part and displayed part have different units */
        };

        /** Controls the reference set used when setting the work component. See @link SetWorkComponent SetWorkComponent@endlink  */
        public: enum RefsetOption
        {
            RefsetOptionEntire/** Use the "Entire Part" reference set for the new work component  */,
            RefsetOptionCurrent/** Use the component's current reference set */,
            RefsetOptionPreserveRefset/** Do not change the value of the reference set */
        };

        /** Controls the behavior when setting the work component. See @link SetWorkComponent SetWorkComponent@endlink  */
        public: enum WorkComponentOption
        {
            WorkComponentOptionVisible/** If the given work component is not visible, chose another component that 
                                                            represents the same part. If no suitable visible component can be found,
                                                            throw an exception. This option ensures that the new work component will
                                                            always be visible. */,
            WorkComponentOptionGiven/** Use the given work component, regardless of visibility. */
        };

        public: /** User defined method that is called whenever a new part is created. Do not create, open, save
                other parts or change display part inside this callback. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<void, NXOpen::BasePart *> PartCreatedHandler;
        public: /** User defined method that is called whenever a part is opened. Do not create, open, save
                other parts or change display part inside this callback. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<void, NXOpen::BasePart *> PartOpenedHandler;
        public: /** User defined method that is called whenever a part is saved.Do not create, open, save
                other parts or change display part inside this callback. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<void, NXOpen::BasePart *> PartSavedHandler;
        public: /** User defined method that is called whenever a part is saved as a specified name. Do not create, open, save
                other parts or change display part inside this callback. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<void, NXOpen::BasePart *> PartSavedAsHandler;
        public: /** User defined method that is called whenever a part is in the process of being closed. Do not create, open, save
                other parts or change display part inside this callback. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<void, NXOpen::BasePart *> PartClosedHandler;
        public: /** User defined method that is called whenever a part is modified 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<void, NXOpen::BasePart *> PartModifiedHandler;
        public: /** User defined method that is called whenever a part is renamed 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<void, NXOpen::BasePart *> PartRenamedHandler;
        public: /** User defined method that is called whenever the work part changes 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<void, NXOpen::BasePart *> WorkPartChangedHandler;
        private: PartCollectionImpl * m_partcollection_impl;
        private: NXOpen::Session* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit PartCollection(NXOpen::Session *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~PartCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::PartCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Part *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::PartCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::PartCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Finds the @link  NXOpen::BasePart   NXOpen::BasePart @endlink  with the given name. The part must have been loaded 
            in this session.
            
            An exception will be thrown if no object can be found with the given name.
             @return  The part with the given name. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart * FindObject
        (
            const NXString & name /** The name of the @link  NXOpen::BasePart   NXOpen::BasePart @endlink . This may either be the full pathname of the leaf name. */
        );
        /** Finds the @link  NXOpen::BasePart   NXOpen::BasePart @endlink  with the given name. The part must have been loaded 
            in this session.
            
            An exception will be thrown if no object can be found with the given name.
             @return  The part with the given name. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::BasePart * FindObject
        (
            const char * name /** The name of the @link  NXOpen::BasePart   NXOpen::BasePart @endlink . This may either be the full pathname of the leaf name. */
        );
        /**  @brief Creates a new .prt part and sets this part as the display part. 

         
            
                 <br> 
                <b>Note:</b> This method should only be used to create new .prt parts.
                Use @link NXOpen::PartCollection::NewDisplay NXOpen::PartCollection::NewDisplay@endlink  to
                create other types of parts other than .prt parts.
                 <br> 
             @return  Newly created part 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Part * NewDisplay
        (
            const NXString & name /** Name of new part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Part::Units units /** Units of new part */
        );
        /**  @brief Creates a new .prt part and sets this part as the display part. 

         
            
                 <br> 
                <b>Note:</b> This method should only be used to create new .prt parts.
                Use @link NXOpen::PartCollection::NewDisplay NXOpen::PartCollection::NewDisplay@endlink  to
                create other types of parts other than .prt parts.
                 <br> 
             @return  Newly created part 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Part * NewDisplay
        (
            const char * name /** Name of new part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Part::Units units /** Units of new part */
        );
        /** Creates a new part and sets this part as the display part.  @return  Newly created part 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart * NewBaseDisplay
        (
            const NXString & name /** Name of new part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::BasePart::Units units /** Units of new part */
        );
        /** Creates a new part and sets this part as the display part.  @return  Newly created part 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::BasePart * NewBaseDisplay
        (
            const char * name /** Name of new part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::BasePart::Units units /** Units of new part */
        );
        /**  @brief Opens an existing .prt part, but does not set it to be the displayed part. 

         
                See @link OpenDisplay OpenDisplay@endlink .

                 <br> 
                <b>Note:</b> This method should only be used to open .prt parts.
                Use @link NXOpen::PartCollection::OpenBase NXOpen::PartCollection::OpenBase@endlink  to
                open other types of parts other than .prt parts.
                 <br> 
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Part * Open
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** loadStatus /** Parts
                        that could not be loaded and their associated errors. */
        );
        /**  @brief Opens an existing .prt part, but does not set it to be the displayed part. 

         
                See @link OpenDisplay OpenDisplay@endlink .

                 <br> 
                <b>Note:</b> This method should only be used to open .prt parts.
                Use @link NXOpen::PartCollection::OpenBase NXOpen::PartCollection::OpenBase@endlink  to
                open other types of parts other than .prt parts.
                 <br> 
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Part * Open
        (
            const char * filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** loadStatus /** Parts
                        that could not be loaded and their associated errors. */
        );
        /** Opens an existing part, but does not set it to be the displayed part.
                See @link OpenBaseDisplay OpenBaseDisplay@endlink .

                 <br> 
                <b>Note:</b> This method can also be used to open bookmark files and parts other than .prt parts.
                 <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart * OpenBase
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** loadStatus /** Parts
                        that could not be loaded and their associated errors. */
        );
        /** Opens an existing part, but does not set it to be the displayed part.
                See @link OpenBaseDisplay OpenBaseDisplay@endlink .

                 <br> 
                <b>Note:</b> This method can also be used to open bookmark files and parts other than .prt parts.
                 <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::BasePart * OpenBase
        (
            const char * filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** loadStatus /** Parts
                        that could not be loaded and their associated errors. */
        );
        /**  @brief Opens an existing .prt part and sets this part as the display part. 

         
                
                 <br> 
                <b>Note:</b> This method should only be used to open .prt parts.
                Use @link NXOpen::PartCollection::OpenBaseDisplay NXOpen::PartCollection::OpenBaseDisplay@endlink  to
                open other types of parts other than .prt parts.
                 <br> 

                This method will load components in the following manner depending
                on how the @link NXOpen::LoadOptions::ComponentsToLoad NXOpen::LoadOptions::ComponentsToLoad@endlink  
                property is set:
                 <br> 
                1) "All Components" (@link NXOpen::LoadOptions::LoadComponentsAll NXOpen::LoadOptions::LoadComponentsAll@endlink )
                   will load all components of the assembly.
                 <br> 
                 <br> 

                2) "Last Used Component Set" (@link NXOpen::LoadOptions::LoadComponentsLastSet NXOpen::LoadOptions::LoadComponentsLastSet@endlink )
                    will load the components in the last saved component set.

                 <br> 
                 <br> 

                3) "No Components" (@link NXOpen::LoadOptions::LoadComponentsNone NXOpen::LoadOptions::LoadComponentsNone@endlink ),
                   "Use Last Filter" (@link NXOpen::LoadOptions::LoadComponentsLastFilter NXOpen::LoadOptions::LoadComponentsLastFilter@endlink ) or
                   "Specify Filter" (@link NXOpen::LoadOptions::LoadComponentsSpecifyFilter NXOpen::LoadOptions::LoadComponentsSpecifyFilter@endlink )
                   will load none of the components of the assembly.
                 <br> 
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Part * OpenDisplay
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** loadStatus /** Parts 
                        that could not be loaded and their associated errors. */
        );
        /**  @brief Opens an existing .prt part and sets this part as the display part. 

         
                
                 <br> 
                <b>Note:</b> This method should only be used to open .prt parts.
                Use @link NXOpen::PartCollection::OpenBaseDisplay NXOpen::PartCollection::OpenBaseDisplay@endlink  to
                open other types of parts other than .prt parts.
                 <br> 

                This method will load components in the following manner depending
                on how the @link NXOpen::LoadOptions::ComponentsToLoad NXOpen::LoadOptions::ComponentsToLoad@endlink  
                property is set:
                 <br> 
                1) "All Components" (@link NXOpen::LoadOptions::LoadComponentsAll NXOpen::LoadOptions::LoadComponentsAll@endlink )
                   will load all components of the assembly.
                 <br> 
                 <br> 

                2) "Last Used Component Set" (@link NXOpen::LoadOptions::LoadComponentsLastSet NXOpen::LoadOptions::LoadComponentsLastSet@endlink )
                    will load the components in the last saved component set.

                 <br> 
                 <br> 

                3) "No Components" (@link NXOpen::LoadOptions::LoadComponentsNone NXOpen::LoadOptions::LoadComponentsNone@endlink ),
                   "Use Last Filter" (@link NXOpen::LoadOptions::LoadComponentsLastFilter NXOpen::LoadOptions::LoadComponentsLastFilter@endlink ) or
                   "Specify Filter" (@link NXOpen::LoadOptions::LoadComponentsSpecifyFilter NXOpen::LoadOptions::LoadComponentsSpecifyFilter@endlink )
                   will load none of the components of the assembly.
                 <br> 
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Part * OpenDisplay
        (
            const char * filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** loadStatus /** Parts 
                        that could not be loaded and their associated errors. */
        );
        /** Opens an existing part and sets this part as the display part.

                This method will load components in the following manner depending
                on how the @link NXOpen::LoadOptions::ComponentsToLoad NXOpen::LoadOptions::ComponentsToLoad@endlink  
                property is set:
                 <br> 
                1) "All Components" (@link NXOpen::LoadOptions::LoadComponentsAll NXOpen::LoadOptions::LoadComponentsAll@endlink )
                   will load all components of the assembly.
                 <br> 
                 <br> 

                2) "Last Used Component Set" (@link NXOpen::LoadOptions::LoadComponentsLastSet NXOpen::LoadOptions::LoadComponentsLastSet@endlink )
                    will load the components in the last saved component set.

                 <br> 
                 <br> 

                3) "No Components" (@link NXOpen::LoadOptions::LoadComponentsNone NXOpen::LoadOptions::LoadComponentsNone@endlink ),
                   "Use Last Filter" (@link NXOpen::LoadOptions::LoadComponentsLastFilter NXOpen::LoadOptions::LoadComponentsLastFilter@endlink ) or
                   "Specify Filter" (@link NXOpen::LoadOptions::LoadComponentsSpecifyFilter NXOpen::LoadOptions::LoadComponentsSpecifyFilter@endlink )
                   will load none of the components of the assembly.
                 <br> 

                 <br> 
                <b>Note:</b> This method can also be used to open bookmark files and parts other than .prt parts.
                 <br> 

                 <br> 
                <b>Note:</b>  If this method is used in batch mode for a bookmark file which had been
                created using any of these options:
                   @link BasePart::BookmarkOptionAllPlusDisplay BasePart::BookmarkOptionAllPlusDisplay@endlink 
                   @link BasePart::BookmarkOptionComponentGroupsLoadOptionsPlusDisplay BasePart::BookmarkOptionComponentGroupsLoadOptionsPlusDisplay@endlink 
                   @link BasePart::BookmarkOptionComponentGroupsOnlyPlusDisplay BasePart::BookmarkOptionComponentGroupsOnlyPlusDisplay@endlink 
                   @link BasePart::BookmarkOptionDisplayOnly BasePart::BookmarkOptionDisplayOnly@endlink 
                the display data in the bookmark file will not be applied to the displayed part.
                 <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart * OpenBaseDisplay
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** loadStatus /** Parts 
                        that could not be loaded and their associated errors. */
        );
        /** Opens an existing part and sets this part as the display part.

                This method will load components in the following manner depending
                on how the @link NXOpen::LoadOptions::ComponentsToLoad NXOpen::LoadOptions::ComponentsToLoad@endlink  
                property is set:
                 <br> 
                1) "All Components" (@link NXOpen::LoadOptions::LoadComponentsAll NXOpen::LoadOptions::LoadComponentsAll@endlink )
                   will load all components of the assembly.
                 <br> 
                 <br> 

                2) "Last Used Component Set" (@link NXOpen::LoadOptions::LoadComponentsLastSet NXOpen::LoadOptions::LoadComponentsLastSet@endlink )
                    will load the components in the last saved component set.

                 <br> 
                 <br> 

                3) "No Components" (@link NXOpen::LoadOptions::LoadComponentsNone NXOpen::LoadOptions::LoadComponentsNone@endlink ),
                   "Use Last Filter" (@link NXOpen::LoadOptions::LoadComponentsLastFilter NXOpen::LoadOptions::LoadComponentsLastFilter@endlink ) or
                   "Specify Filter" (@link NXOpen::LoadOptions::LoadComponentsSpecifyFilter NXOpen::LoadOptions::LoadComponentsSpecifyFilter@endlink )
                   will load none of the components of the assembly.
                 <br> 

                 <br> 
                <b>Note:</b> This method can also be used to open bookmark files and parts other than .prt parts.
                 <br> 

                 <br> 
                <b>Note:</b>  If this method is used in batch mode for a bookmark file which had been
                created using any of these options:
                   @link BasePart::BookmarkOptionAllPlusDisplay BasePart::BookmarkOptionAllPlusDisplay@endlink 
                   @link BasePart::BookmarkOptionComponentGroupsLoadOptionsPlusDisplay BasePart::BookmarkOptionComponentGroupsLoadOptionsPlusDisplay@endlink 
                   @link BasePart::BookmarkOptionComponentGroupsOnlyPlusDisplay BasePart::BookmarkOptionComponentGroupsOnlyPlusDisplay@endlink 
                   @link BasePart::BookmarkOptionDisplayOnly BasePart::BookmarkOptionDisplayOnly@endlink 
                the display data in the bookmark file will not be applied to the displayed part.
                 <br> 
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::BasePart * OpenBaseDisplay
        (
            const char * filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** loadStatus /** Parts 
                        that could not be loaded and their associated errors. */
        );
        /** Saves all modified parts in a session. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SaveAll
        (
            bool* anyPartsModified /** Indicates whether any parts
                        in the session were actually modified before the save operation
                        was called. If false, then no parts were modified and, thus, a
                        save was not attempted on any of the parts. */,
            NXOpen::PartSaveStatus ** saveStatus /** Parts that could not be saved and their associated errors. */
        );
        /** Closes all the parts open in the session. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void CloseAll
        (
            NXOpen::BasePart::CloseModified closeModified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink . If 
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link NXOpen::PartCloseResponses NXOpen::PartCloseResponses@endlink  for how to add responses to this
                        class. */
        );
        /** Reopens all modified parts in the session.  @return  Report
                   containing results of reopen command 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartReopenReport * ReopenAll
        (
            NXOpen::BasePart::CloseModified closeModified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink . If 
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link NXOpen::PartCloseResponses NXOpen::PartCloseResponses@endlink  for how to add responses to this
                        class. */
        );
        /**Returns  the current work part of the session. This is either the displayed part, or 
                a part represented by a component in the displayed part's @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink .
                See: @link NXOpen::PartCollection::WorkComponent NXOpen::PartCollection::WorkComponent@endlink 

                 <br>  An error will be thrown if the work part is not a .prt part.  <br> 
             
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Part * Work
        (
        );
        /**Returns  the current work part of the session. This is either the displayed part, or 
                a part represented by a component in the displayed part's @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink .
                See: @link NXOpen::PartCollection::WorkComponent NXOpen::PartCollection::WorkComponent@endlink 
             
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart * BaseWork
        (
        );
        /**Returns  the current display part of the session. An error will be thrown if the
            display part is not a .prt part. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Part * Display
        (
        );
        /**Returns  the current display part of the session. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart * BaseDisplay
        (
        );
        /** Sets the current work part. The work component will be set to one of the visible components that 
                represent this part in the current visible assembly. See @link SetWorkComponent SetWorkComponent@endlink . 
                If no visible component is available, then an exception is thrown.
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetWork
        (
            NXOpen::BasePart * part /** The new work part. */
        );
        /**Returns 
               the work component. This is the component in the displayed part's 
               @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink  which represents the current work part. 
               Note that there may be several different components which represent the same 
               work part. In this case, one of them will be selected as the work component, while
               the others will be greyed out on the main display.
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Assemblies::Component * WorkComponent
        (
        );
        /**
               Sets the work component. If the part represented by the new work component is not
               already the work part, then sets the work part appropriately. The new component's 
               reference set will be set to "Entire Part".
                <br> 
               Note that if the given work component is not visible, but an alternative component
               which represents the same part is visible, then the alternative component will be chosen
               as the new work component. If no visible component can be found, an exception is thrown
                <br> 
               
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetWorkComponent
        (
            NXOpen::Assemblies::Component * workComponent /** The new work component. This must be a component defined in the 
                                                                         @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink  of the current displayed part. 
                                                                         May be NULL, in which case the work part is reset to the displayed part.
                                                                     */,
            NXOpen::PartLoadStatus ** loadStatus /** Any errors found when loading the new work part. */
        );
        /**
               Sets the work component. If the part represented by the new work component is not
               already the work part, then sets the work part appropriately.
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetWorkComponent
        (
            NXOpen::Assemblies::Component * workComponent /** The new work component. This must be a component defined in the 
                                                                         @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink  of the current displayed part. 
                                                                         May be NULL, in which case the work part is reset to the displayed part.
                                                                     */,
            NXOpen::PartCollection::RefsetOption refsetOption /** Controls the reference set of the new component. */,
            NXOpen::PartCollection::WorkComponentOption visibility /** Controls the behavior if the new component is not visible */,
            NXOpen::PartLoadStatus ** loadStatus /** Any errors found when loading the new work part. */
        );
        /**
               Sets the component with override part as the work component.
               Error is raised, if component doesn't have override part.
             @return  Any errors found when loading the new work part. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartLoadStatus * SetWorkComponentOverride
        (
            NXOpen::Assemblies::Component * workComponent /** The new work component. This must be a component defined in the 
                                                                                    @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink  of the current displayed part.
                                                                                */
        );
        /** 
                Sets the displayed part.
             @return  Returns OK if the work part could be maintained, or a status code
                                                           indicating the reason 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartCollection::SdpsStatus SetDisplay
        (
            NXOpen::BasePart * part /** The new displayed part */,
            bool maintainWorkPart /** If true, and if the current work part is a component of the
                                                           new displayed part, then the work part remains unchanged. Otherwise
                                                           the work part is set to the new displayed part.
                                                       */,
            bool setEntirePart /** If true, and if maintain_work_part is true,
                                                                         the reference set of the work_component will be set 
                                                                         to "Entire Part". If false, it will be left unchanged. See
                                                                         @link NXOpen::Assemblies::ComponentAssembly::ReplaceReferenceSet NXOpen::Assemblies::ComponentAssembly::ReplaceReferenceSet@endlink 
                                                                     */,
            NXOpen::PartLoadStatus ** loadStatus /** Any errors found when loading the new work part. */
        );
        /** Constructs a new PartCloseResponses class. This class is used to
            communicate whether to close certain parts if they are modified during part close.  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartCloseResponses * NewPartCloseResponses
        (
        );
        /** Creates a @link NXOpen::FileNew NXOpen::FileNew@endlink   @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::FileNew * FileNew
        (
        );
        /** Registers a user defined method that is called whenever a new part is created  @return  identifier of registered method (used to unregister the method) 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int AddPartCreatedHandler
        (
            const NXOpen::PartCollection::PartCreatedHandler&  handler /** method to register */
        );
        /** Unregisters a user defined method that is called whenever a new part is created 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void RemovePartCreatedHandler
        (
            int id /** identifier for method to unregister */
        );
        /** Registers a user defined method that is called whenever a part is opened  @return  identifier of registered method (used to unregister the method) 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int AddPartOpenedHandler
        (
            const NXOpen::PartCollection::PartOpenedHandler&  handler /** method to register */
        );
        /** Unregisters a user defined method that is called whenever a part is opened 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void RemovePartOpenedHandler
        (
            int id /** identifier for method to unregister */
        );
        /** Registers a user defined method that is called whenever a part is saved  @return  identifier of registered method (used to unregister the method) 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int AddPartSavedHandler
        (
            const NXOpen::PartCollection::PartSavedHandler&  handler /** method to register */
        );
        /** Unregisters a user defined method that is called whenever a part is saved 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void RemovePartSavedHandler
        (
            int id /** identifier for method to unregister */
        );
        /** Registers a user defined method that is called whenever a part is saved as a specified name  @return  identifier of registered method (used to unregister the method) 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int AddPartSavedAsHandler
        (
            const NXOpen::PartCollection::PartSavedAsHandler&  handler /** method to register */
        );
        /** Unregisters a user defined method that is called whenever a part is saved as a specified name 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void RemovePartSavedAsHandler
        (
            int id /** identifier for method to unregister */
        );
        /** Registers a user defined method that is called whenever a part is in the process of being closed  @return  identifier of registered method (used to unregister the method) 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int AddPartClosedHandler
        (
            const NXOpen::PartCollection::PartClosedHandler&  handler /** method to register */
        );
        /** Unregisters a user defined method that is called whenever a part is in the process of being closed 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void RemovePartClosedHandler
        (
            int id /** identifier for method to unregister */
        );
        /** Registers a user defined method that is called whenever a part is modified  @return  identifier of registered method (used to unregister the method) 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int AddPartModifiedHandler
        (
            const NXOpen::PartCollection::PartModifiedHandler&  handler /** method to register */
        );
        /** Unregisters a user defined method that is called whenever a part is modified 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void RemovePartModifiedHandler
        (
            int id /** identifier for method to unregister */
        );
        /** Registers a user defined method that is called whenever a part is renamed  @return  identifier of registered method (used to unregister the method) 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int AddPartRenamedHandler
        (
            const NXOpen::PartCollection::PartRenamedHandler&  handler /** method to register */
        );
        /** Unregisters a user defined method that is called whenever a part is renamed 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void RemovePartRenamedHandler
        (
            int id /** identifier for method to unregister */
        );
        /** Registers a method that is called whenever the work part changes  @return  identifier of registered method (used to unregister the method) 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int AddWorkPartChangedHandler
        (
            const NXOpen::PartCollection::WorkPartChangedHandler&  handler /** method to register */
        );
        /** Unregisters a method that is called whenever the work part changes. Do not create, open, save
                other parts or change display part inside this callback. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void RemoveWorkPartChangedHandler
        (
            int id /** identifier for method to unregister */
        );
        /** Saves all modified parts in a session.  @return  Parts that could not be saved and their associated errors. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartSaveStatus * ForceSaveAll
        (
        );
        /** Specify template data to open seed part or empty item revision 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSeedPartTemplateData
        (
            const NXString & filename /** Name of the part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & templateName /** Name of the template   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool addMaster /** Whether master should be added as child */
        );
        /** Specify template data to open seed part or empty item revision 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetSeedPartTemplateData
        (
            const char * filename /** Name of the part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * templateName /** Name of the template   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool addMaster /** Whether master should be added as child */
        );
        /** Open unpopulated dataset with blank template 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void OpenSeedPartBlankTemplate
        (
            const NXString & filename /** Name of the part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool addMaster /** whether to add master as component */
        );
        /** Open unpopulated dataset with blank template 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void OpenSeedPartBlankTemplate
        (
            const char * filename /** Name of the part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool addMaster /** whether to add master as component */
        );
        /** Set non master seed part data for opening unpopulated non master part 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNonmasterSeedPartData
        (
            const NXString & filename /** Name of the part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Set non master seed part data for opening unpopulated non master part 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetNonmasterSeedPartData
        (
            const char * filename /** Name of the part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a @link NXOpen::LinkedMirrorPartBuilder NXOpen::LinkedMirrorPartBuilder@endlink   @return  the LinkedMirrorPartBuilder object
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::LinkedMirrorPartBuilder * CreateLinkedMirrorPartBuilder
        (
            NXOpen::Part * part /** part */ 
        );
        /** Check whether given part is a linked mirrored part  @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: bool IsMirroredPart
        (
            NXOpen::Part * part /** input part */
        );
        /** Check whether given part is an exact linked mirrored part  @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: bool IsExactMirroredPart
        (
            NXOpen::Part * part /** input part */
        );
        /** Set the type of linked mirrored part 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetMirrorPartType
        (
            NXOpen::Part * part /** input part */,
            NXOpen::LinkedMirrorPartBuilder::MirrorPartTypeOption mirrorOption /** mirroroption */ 
        );
        /** Get the type of linked mirrored part  @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::LinkedMirrorPartBuilder::MirrorPartTypeOption GetMirrorPartType
        (
            NXOpen::Part * part /** input part */
        );
        /** Get source part name of mirror part  @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXString GetSourcePartNameOfMirrorPart
        (
            NXOpen::Part * mirrorPart /** input part */
        );
        /** Set password to the part. This method should only be used with GC Toolkits. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetPassword
        (
            NXOpen::Part * part /** part */ ,
            const NXString & uAdminPassword /** admin password */,
            const NXString & uReadPassword /** read password */,
            const NXString & uWritePassword /** write password */,
            const NXString & uFullControlPassword /** full control password */
        );
        /** Set password to the part. This method should only be used with GC Toolkits. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetPassword
        (
            NXOpen::Part * part /** part */ ,
            const char * uAdminPassword /** admin password */,
            const char * uReadPassword /** read password */,
            const char * uWritePassword /** write password */,
            const char * uFullControlPassword /** full control password */
        );
        /** Remove password of the part. This method should only be used with GC Toolkits. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void RemovePassword
        (
            NXOpen::Part * part /** part */ 
        );
        /** Input password to the current session. This method should only be used with GC Toolkits. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetOpenPassword
        (
            const NXString & fileName /** filename */ ,
            const NXString & password /** open password */
        );
        /** Input password to the current session. This method should only be used with GC Toolkits. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetOpenPassword
        (
            const char * fileName /** filename */ ,
            const char * password /** open password */
        );
        /** Import tool design package  @return  Top level assembly 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Part * ImportToolDesignPackage
        (
            const NXString & filename /** Tool design package   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & outputDirectory /** Output directory   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** loadStatus /** Parts that could not be loaded and their associated errors. */,
            NXOpen::PartSaveStatus ** saveStatus /** Parts that could not be saved and their associated errors. */
        );
        /** Import tool design package  @return  Top level assembly 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Part * ImportToolDesignPackage
        (
            const char * filename /** Tool design package   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const char * outputDirectory /** Output directory   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** loadStatus /** Parts that could not be loaded and their associated errors. */,
            NXOpen::PartSaveStatus ** saveStatus /** Parts that could not be saved and their associated errors. */
        );
        /** Get the type of mirror coordinate system for the given linked mirrored part  @return  
         <br>  Created in NX8.5.1.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::LinkedMirrorPartBuilder::MirrorCsysOption GetMirrorCsysOptionOfMirrorPart
        (
            NXOpen::Part * part /** input linked mirror part. Error is raised if input is not a linked mirror part */
        );
        /** Get the origin point and the normal direction of the mirror plane for the given linked mirrored part 
         <br>  Created in NX8.5.1.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void GetMirrorPlaneDataOfMirrorPart
        (
            NXOpen::Part * part /** input linked mirror part. Error is raised if input is not a linked mirror part */,
            NXOpen::Point3d* mirrorPlaneOrigin /** mirror plane origin */,
            NXOpen::Vector3d* mirrorPlaneDirection /** mirror plane normal direction */
        );
        /**
                Solves all the constraints, that have been postponed in their arrangement, 
                in every loaded part in the session. This could lead to updating the model if required. 
            
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        public: void SolveAllPostponedConstraints
        (
        );


        /** The @link NXOpen::LoadOptions NXOpen::LoadOptions@endlink  that determines how parts are loaded in this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::LoadOptions *LoadOptions();
        /** The @link NXOpen::SaveOptions NXOpen::SaveOptions@endlink  that determines how parts are saved in this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::SaveOptions *SaveOptions();
        /** The @link NXOpen::PDM::PartManager NXOpen::PDM::PartManager@endlink  that manages creation of parts in NX Manager mode 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::PDM::PartManager *PDMPartManager();
        /** The @link NXOpen::ShapeSearch::SearchManager NXOpen::ShapeSearch::SearchManager@endlink  that manages shape search in this session 
         <br>  Created in NX6.0.0.  <br>  
        */
        public: NXOpen::ShapeSearch::SearchManager *ShapeSearchManager();
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
