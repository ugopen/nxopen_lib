#ifndef NXOpen_ROUTING_STOCKBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_STOCKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_StockBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_PathStockBuilder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/Routing_StockBuilder.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class StockBuilder;
    }
    class Builder;
    class Expression;
    namespace Routing
    {
        class PathStockBuilder;
    }
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace Routing
    {
        class _StockBuilderBuilder;
        class StockBuilderImpl;
        /** Builder for creating/editing stocks.
                Create Stock: Takes a set of segments and assign the selected the stock
                to the segments. The stock style and orientation settings are optional.
                Edit Stock: Takes in the selected stock to edit as input and redefines
                the stock with the new settings.
             <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreateStockBuilder  NXOpen::Routing::RouteManager::CreateStockBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        FlipStock </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RemoveExistingStock </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        RotationValue.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StockStyle </td> <td> 
         
        SimpleSolid </td> </tr> 

        <tr><td> 
         
        SwapProfile </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  StockBuilder : public NXOpen::Builder
        {
            /** The stock display style*/
            public: enum StockStyleType
            {
                StockStyleTypeCenterline/** Centreline     */,
                StockStyleTypeSimpleSolid/** Simple Solid   */,
                StockStyleTypeDetailedSolid/** Detailed Solid */
            };

            private: StockBuilderImpl * m_stockbuilder_impl;
            private: friend class  _StockBuilderBuilder;
            protected: StockBuilder();
            public: ~StockBuilder();
            /**Returns  the routing object collector that collects segments to assign stock to. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::RouteObjectCollector * SegmentCollector
            (
            );
            /**Returns  the stock settings for stock assignment. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::PathStockBuilder * StockSettings
            (
            );
            /**Sets  the stock settings for stock assignment. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockSettings
            (
                NXOpen::Routing::PathStockBuilder * stockBuilder /** stockbuilder */ 
            );
            /**Returns  the stock style of the stock to assign 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockBuilder::StockStyleType StockStyle
            (
            );
            /**Sets  the stock style of the stock to assign 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockStyle
            (
                NXOpen::Routing::StockBuilder::StockStyleType stockStyle /** stockstyle */ 
            );
            /**Returns  the remove existing stock flag. If set to TRUE the existing stock
                        on the path will be removed when assigning new stock.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool RemoveExistingStock
            (
            );
            /**Sets  the remove existing stock flag. If set to TRUE the existing stock
                        on the path will be removed when assigning new stock.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetRemoveExistingStock
            (
                bool removeStock /** removestock */ 
            );
            /**Returns  the stock flip flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool FlipStock
            (
            );
            /**Sets  the stock flip flag 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetFlipStock
            (
                bool flipStock /** flipstock */ 
            );
            /**Returns  the profile swap flag. Determines whether the profile should be
                        at the path start or end.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool SwapProfile
            (
            );
            /**Sets  the profile swap flag. Determines whether the profile should be
                        at the path start or end.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetSwapProfile
            (
                bool swapProfile /** swapprofile */ 
            );
            /**Returns  the rotation value. Determines the rotation angle of the stock. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * RotationValue
            (
            );
            /**Returns  the @link Routing::Anchor Routing::Anchor@endlink  name associated with the stock. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString StockAnchor
            (
            );
            /**Sets  the @link Routing::Anchor Routing::Anchor@endlink  name associated with the stock. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockAnchor
            (
                const NXString & anchorName /** anchorname */ 
            );
            /**Sets  the @link Routing::Anchor Routing::Anchor@endlink  name associated with the stock. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetStockAnchor
            (
                const char * anchorName /** anchorname */ 
            );
            /**Sets  the grid topology eligibility flag. When this flag is set, a non circular stock will produce bend faces in the bend regions instead of merged faces.
                        This flag has no effect on circular stock. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetGridTopologyEligibilityFlag
            (
                bool gridOptionEligible /** gridoptioneligible */ 
            );
            /**Returns  the grid topology eligibility flag. When this flag is set, a non circular stock will produce bend faces in the bend regions instead of merged faces.
                        This flag has no effect on circular stock. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool GridTopologyEligibilityFlag
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
