#ifndef NXOpen_SCRULEFACTORY_HXX_INCLUDED
#define NXOpen_SCRULEFACTORY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ScRuleFactory.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/SelectionIntentRule.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ScRuleFactory;
    class Part;
    class ApparentChainingRule;
    class Body;
    class BodyDumbRule;
    class BodyFeatureRule;
    class BodyGroupRule;
    class Curve;
    class CurveChainRule;
    class CurveDumbRule;
    class CurveFeatureChainRule;
    class CurveFeatureRule;
    class CurveFeatureTangentRule;
    class CurveGroupRule;
    class CurveTangentRule;
    class DatumPlane;
    class DisplayableObject;
    class Edge;
    class EdgeBodyRule;
    class EdgeBoundaryRule;
    class EdgeChainRule;
    class EdgeDumbRule;
    class EdgeFaceRule;
    class EdgeFeatureRule;
    class EdgeIntersectRule;
    class EdgeMultipleSeedTangentRule;
    class EdgeSheetBoundaryRule;
    class EdgeTangentRule;
    class EdgeVertexRule;
    class EdgeVertexTangentRule;
    class Face;
    class FaceAdjacentRule;
    class FaceAllBlendRule;
    class FaceAndAdjacentFacesRule;
    class FaceBodyRule;
    class FaceBossPocketFacesRule;
    class FaceConnectedBlendRule;
    class FaceDumbRule;
    class FaceFeatureRule;
    class FaceMergedRibFacesRule;
    class FaceRegionBoundaryRule;
    class FaceRegionRule;
    class FaceRibFacesRule;
    class FaceSlotFacesRule;
    class FaceTangentRule;
    class FeatureIntersectionEdgesRule;
    class FeaturePointsRule;
    namespace Features
    {
        class Feature;
    }
    class FollowFilletRule;
    class Group;
    class IBaseCurve;
    class ICurve;
    class NXObject;
    class OuterEdgesOfFacesRule;
    class Point;
    class RegionBoundaryRule;
    class RibTopFaceEdgesRule;
    class SelectionIntentRule;
    class View;
    class ScRuleFactoryImpl;
    /** This class contains the factory methods for creating selection intent rules  <br> To obtain an instance of this class, refer to @link NXOpen::Part  NXOpen::Part @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ScRuleFactory
    {
        private: ScRuleFactoryImpl * m_scrulefactory_impl;
        private: NXOpen::Part* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit ScRuleFactory(NXOpen::Part *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~ScRuleFactory();
        /** Creates selection intent rule: @link  EdgeDumbRule   EdgeDumbRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeDumbRule * CreateRuleEdgeDumb
        (
            const std::vector<NXOpen::Edge *> & edges /** Edges which creates this rule.*/
        );
        /** Creates selection intent rule: @link  EdgeChainRule   EdgeChainRule @endlink  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeChainRule * CreateRuleEdgeChain
        (
            NXOpen::Edge * startEdge /** Start edge of edge chain.*/,
            NXOpen::Edge * endEdge /** End edge of edge chain. */,
            bool isFromStart /** True: the chain starts from the start
                                                  point of the start edge if end edge is provided*/
        );
        /** Creates selection intent rule: @link  EdgeMultipleSeedTangentRule   EdgeMultipleSeedTangentRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeMultipleSeedTangentRule * CreateRuleEdgeMultipleSeedTangent
        (
            const std::vector<NXOpen::Edge *> & seedEdges /** Seed edges. */,
            double angleTolerance /** Angle tolerance for tangent edges. */,
            bool hasSameConvexity /** True: will only find tangnet edges that has the same convexity */
        );
        /** Creates selection intent rule: @link  EdgeTangentRule   EdgeTangentRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeTangentRule * CreateRuleEdgeTangent
        (
            NXOpen::Edge * startEdge /** Start edge of edge chain. */,
            NXOpen::Edge * endEdge /** End edge of edge chain. It can be null (Nothing)*/,
            bool isFromStart /** True: the tangent starts from the start
                                                  point of the start edge if end edge is provided*/,
            double angleTolerance /** Angle tolerance for tangent edges */,
            bool hasSameConvexity /** True: will only find tangnet edges that has the same convexity.*/
        );
        /** Creates selection intent rule: @link  EdgeFaceRule   EdgeFaceRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeFaceRule * CreateRuleEdgeFace
        (
            const std::vector<NXOpen::Face *> & faces /** Faces whose edges are used to create this rule.*/
        );
        /** Creates selection intent rule: @link  EdgeBodyRule   EdgeBodyRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeBodyRule * CreateRuleEdgeBody
        (
            NXOpen::Body * body /** Body whose edges are uded to create this rule.*/
        );
        /** Creates selection intent rule: @link  EdgeFeatureRule   EdgeFeatureRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeFeatureRule * CreateRuleEdgeFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose edges are used to create edge feature rule.*/
        );
        /** Creates selection intent rule: @link  EdgeFeatureRule   EdgeFeatureRule @endlink  for the given feature from a part occurrence.   @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeFeatureRule * CreateRuleEdgeFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose edges are used to create edge feature rule.*/,
            NXOpen::DisplayableObject * partOccurrence /** Part occurrence of the seed edge that is used to create this rule.*/
        );
        /** Creates selection intent rule: @link  EdgeFeatureRule   EdgeFeatureRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeSheetBoundaryRule * CreateRuleEdgeSheetBoundary
        (
            NXOpen::Body * sheet /**  Sheet body whose boundary edges are used to create this rule.*/
        );
        /** Creates selection intent rule: @link  EdgeBoundaryRule   EdgeBoundaryRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeBoundaryRule * CreateRuleEdgeBoundary
        (
            const std::vector<NXOpen::Face *> & facesOfFeatures /** Faces whose boundary edges are used to create this rule. */
        );
        /** Creates selection intent rule: @link  EdgeIntersectRule   EdgeIntersectRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeIntersectRule * CreateRuleEdgeIntersect
        (
            const std::vector<NXOpen::Face *> & facesOfFeatures1 /** Faces of feature1 whose boundary edges are used to create this rule.*/,
            const std::vector<NXOpen::Face *> & facesOfFeatures2 /** Faces of feature2 whose boundary edges are used to create this rule.*/
        );
        /** Creates selection intent rule: @link  EdgeVertexRule   EdgeVertexRule @endlink   @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeVertexRule * CreateRuleEdgeVertex
        (
            NXOpen::Edge * startEdge /** Start edge of edge chain. */,
            bool isFromStart /** True: the chain starts from the start
                                                  point of the start edge if end edge is provided*/
        );
        /** Creates selection intent rule: @link  EdgeVertexTangentRule   EdgeVertexTangentRule @endlink   @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeVertexTangentRule * CreateRuleEdgeVertexTangent
        (
            NXOpen::Edge * startEdge /** Start edge of edge chain. */,
            bool isFromStart /** True: the tangent starts from the start
                                                  point of the start edge if end edge is provided*/,
            double angleTolerance /** Angle tolerance for tangent edges */,
            bool hasSameConvexity /** True: will only find tangent edges that has the same convexity.*/
        );
        /** Creates selection intent rule: @link  CurveDumbRule   CurveDumbRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::CurveDumbRule * CreateRuleCurveDumb
        (
            const std::vector<NXOpen::Curve *> & curves /** Curves which creates this rule. */
        );
        /** Creates selection intent rule: @link  CurveDumbRule   CurveDumbRule @endlink   @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::CurveDumbRule * CreateRuleBaseCurveDumb
        (
            const std::vector<NXOpen::IBaseCurve *> & curves /** Curves which creates this rule. */
        );
        /** Creates selection intent rule: @link  CurveDumbRule   CurveDumbRule @endlink   @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::CurveDumbRule * CreateRuleCurveDumbFromPoints
        (
            const std::vector<NXOpen::Point *> & points /** Points which creates this rule. */
        );
        /** Creates selection intent rule: @link  CurveFeatureRule   CurveFeatureRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::CurveFeatureRule * CreateRuleCurveFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose curves are used to create this rule. */
        );
        /** Creates selection intent rule: @link  CurveFeatureRule   CurveFeatureRule @endlink  for the given feature from a part occurrence.  @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::CurveFeatureRule * CreateRuleCurveFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose curves are used to create this rule. */,
            NXOpen::DisplayableObject * partOccurrence /** Part occurrence of the seed curve that is used to create this rule. */
        );
        /** Creates selection intent rule: @link  CurveFeatureChainRule   CurveFeatureChainRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::CurveFeatureChainRule * CreateRuleCurveFeatureChain
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose curves are used to create this rule.*/,
            NXOpen::Curve * seedCurve /** Seed curve */,
            NXOpen::Curve * endCurve /** End curve of curve chain. It can be null (Nothing) */,
            bool isFromSeedStart /** True: the chain starts from the start
                                                           point of the seed curve */,
            double gapTolerance /** Gap tolerance. */
        );
        /** Creates selection intent rule: @link  CurveFeatureTangentRule   CurveFeatureTangentRule @endlink   @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::CurveFeatureTangentRule * CreateRuleCurveFeatureTangent
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Feaures whose tangent curves are used to create this rule. */,
            NXOpen::Curve * seedCurve /** Seed Curve */,
            NXOpen::Curve * endCurve /** End curve of curve chain. It can be null (Nothing)*/,
            bool isFromSeedStart /** True: the chain starts from the start
                                                 point of the seed curve */,
            double angleTolerance /** Angle tolerance for tangent curves */,
            double gapTolerance /** Gap tolerance for tangent curves */
        );
        /** Creates selection intent rule: @link  FollowFilletRule   FollowFilletRule @endlink   @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FollowFilletRule * CreateRuleFollowFillet
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose curves are used to create this rule.*/,
            const std::vector<NXOpen::Body *> & bodies /** Bodies whose edges are used to create this rule.*/,
            const std::vector<NXOpen::ICurve *> & basicCurves /** Non-associative basic curves that are used to create this rule.*/,
            NXOpen::ICurve * seedWireframe /** Seed wireframe */,
            NXOpen::ICurve * endWireframe /** End wireframe. It can be null (Nothing) */,
            bool isFromSeedStart /** True: the chain starts from the start point of the seed wireframe */,
            const NXOpen::Point3d & seedPoint /** Seed point. */,
            double gapTolerance /** Gap tolerance. */,
            double angleTolerance /** Angle tolerance. */,
            NXOpen::FollowFilletRuleType method /** Selection Intent method. */
        );
        /** Creates selection intent rule: @link  FeaturePointsRule   FeaturePointsRule @endlink  for the given feature from a part occurrence.  @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FeaturePointsRule * CreateRuleFeaturePoints
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose points are used to create this rule. */,
            NXOpen::DisplayableObject * partOccurrence /** Part occurrence of seed point that is used to create this rule. */
        );
        /** Creates selection intent rule: @link  FeaturePointsRule   FeaturePointsRule @endlink   @return  
         <br>  Created in NX5.0.2.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FeaturePointsRule * CreateRuleFeaturePoints
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose points are used to create this rule. */
        );
        /** Creates selection intent rule: @link  RegionBoundaryRule   RegionBoundaryRule @endlink   @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::RegionBoundaryRule * CreateRuleRegionBoundary
        (
            NXOpen::DisplayableObject * seedObj /** face or sketch */,
            const std::vector<NXOpen::ICurve *> & curves /** Curve input for this rule.*/,
            const NXOpen::Point3d & seedPoint /** Seed point. */,
            double distanceTolerance /** Distance tolerance. */
        );
        /** Creates selection intent rule: @link  FaceDumbRule   FaceDumbRule @endlink   @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceDumbRule * CreateRuleFaceDumb
        (
            const std::vector<NXOpen::Face *> & faces /** Feaures whose tangent curves are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceDumbRule   FaceDumbRule @endlink   @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceDumbRule * CreateRuleFaceDatum
        (
            const std::vector<NXOpen::DatumPlane *> & faces /** Feaures whose tangent curves are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceTangentRule   FaceTangentRule @endlink   @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceTangentRule * CreateRuleFaceTangent
        (
            NXOpen::Face * seedFace /** Feaures whose tangent curves are used to create this rule. */,
            const std::vector<NXOpen::Face *> & boundaryFaces /** Feaures whose tangent curves are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceTangentRule   FaceTangentRule @endlink  with tangent tolerance  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceTangentRule * CreateRuleFaceTangent
        (
            NXOpen::Face * seedFace /** Feaures whose tangent curves are used to create this rule. */,
            const std::vector<NXOpen::Face *> & boundaryFaces /** Feaures whose tangent curves are used to create this rule. */,
            double angleTolerance /** Tangent angle tolerance. */
        );
        /** Creates selection intent rule: @link  FaceBodyRule   FaceBodyRule @endlink   @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceBodyRule * CreateRuleFaceBody
        (
            NXOpen::Body * body /** Body faces are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceRegionRule   FaceRegionRule @endlink   @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceRegionRule * CreateRuleFaceRegion
        (
            NXOpen::Face * seedFace /** Body faces are used to create this rule. */,
            const std::vector<NXOpen::Face *> & boundaryFaces /** Feaures whose tangent faces are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceFeatureRule   FaceFeatureRule @endlink   @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceFeatureRule * CreateRuleFaceFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Feaures whose faces are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceFeatureRule   FaceFeatureRule @endlink  for the given feature from a part occurrence. @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceFeatureRule * CreateRuleFaceFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Feaures whose faces are used to create this rule. */,
            NXOpen::DisplayableObject * partOccurrence /** Part occurrence of seed face that is used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceAdjacentRule   FaceAdjacentRule @endlink   @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceAdjacentRule * CreateRuleFaceAdjacent
        (
            NXOpen::Face * seedFace /** Faces to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceConnectedBlendRule   FaceConnectedBlendRule @endlink   @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceConnectedBlendRule * CreateRuleFaceConnectedBlend
        (
            NXOpen::Face * seedFace /** Faces to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceConnectedBlendRule   FaceConnectedBlendRule @endlink   @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceConnectedBlendRule * CreateRuleFaceConnectedBlend
        (
            NXOpen::Face * seedFace /** Faces to create this rule. */,
            bool includeBlendLike /** True: will find blend and blend-like faces */,
            NXOpen::Features::Feature * feature /** Feature to create this rule */
        );
        /** Creates selection intent rule: @link  FaceConnectedBlendRule   FaceConnectedBlendRule @endlink   @return  
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceConnectedBlendRule * CreateRuleFaceConnectedBlend
        (
            NXOpen::Face * seedFace /** Faces to create this rule. */,
            bool includeBlendLike /** True: will find blend and blend-like faces */,
            bool includeUnlabeledBlend /** True: will find unlabeled blend faces */,
            NXOpen::Features::Feature * feature /** Feature to create this rule */
        );
        /** Creates selection intent rule: @link  FaceAllBlendRule   FaceAllBlendRule @endlink   @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceAllBlendRule * CreateRuleFaceAllBlend
        (
            NXOpen::Body * body /** Body faces are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceAllBlendRule   FaceAllBlendRule @endlink   @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceAllBlendRule * CreateRuleFaceAllBlend
        (
            NXOpen::Body * body /** Body faces are used to create this rule. */,
            NXOpen::Features::Feature * feature /** Feature to create this rule */
        );
        /** Creates selection intent rule: @link  FaceRibFacesRule   FaceRibFacesRule @endlink   @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceRibFacesRule * CreateRuleFaceRib
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceRibFacesRule   FaceRibFacesRule @endlink   @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceRibFacesRule * CreateRuleFaceRib
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */,
            bool includeBoundaryBlends /** return blends at the feature periphery */,
            bool traverseInteriorLoops /** process interior loop */
        );
        /** Creates selection intent rule: @link  FaceMergedRibFacesRule   FaceMergedRibFacesRule @endlink   @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceMergedRibFacesRule * CreateRuleFaceMergedRib
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */,
            NXOpen::Edge * edge /** Edge that disambiguates the result - can be NULL*/
        );
        /** Creates selection intent rule: @link  FaceMergedRibFacesRule   FaceMergedRibFacesRule @endlink   @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceMergedRibFacesRule * CreateRuleFaceMergedRib
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */,
            NXOpen::Edge * edge /** Edge that disambiguates the result - can be NULL*/,
            bool includeBoundaryBlends /** return blends at the feature periphery */
        );
        /** Creates selection intent rule: @link  FaceMergedRibFacesRule   FaceMergedRibFacesRule @endlink   @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceMergedRibFacesRule * CreateRuleFaceMergedRib
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */,
            bool includeBoundaryBlends /** return blends at the feature periphery */,
            const NXOpen::Point3d & seedPoint /** Seed pick point point. */
        );
        /** Creates selection intent rule: @link  FaceSlotFacesRule   FaceSlotFacesRule @endlink   @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceSlotFacesRule * CreateRuleFaceSlot
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceSlotFacesRule   FaceSlotFacesRule @endlink   @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceSlotFacesRule * CreateRuleFaceSlot
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */,
            bool includeBoundaryBlends /** return blends at the feature periphery */,
            bool traverseInteriorLoops /** process interior loop */
        );
        /** Creates selection intent rule: @link  FaceBossPocketFacesRule   FaceBossPocketFacesRule @endlink   @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceBossPocketFacesRule * CreateRuleFaceBossPocket
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceBossPocketFacesRule   FaceBossPocketFacesRule @endlink   @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceBossPocketFacesRule * CreateRuleFaceBossPocket
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */,
            bool includeBoundaryBlends /** return blends at the feature periphery */
        );
        /** Creates selection intent rule: @link  FaceTangentRule   FaceTangentRule @endlink  where the boundaries also update with original intent @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceTangentRule * CreateRuleFaceTangentWithSmartBoundaries
        (
            NXOpen::Face * seedFace /** Seed face to create this rule. */,
            const std::vector<NXOpen::SelectionIntentRule *> & boundaryFaceRules /** Rules defining the boundaries. */
        );
        /** Creates selection intent rule: @link  FaceRegionRule   FaceRegionRule @endlink  where the boundaries also update with original intent  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceRegionRule * CreateRuleFaceRegionWithSmartBoundaries
        (
            NXOpen::Face * seedFace /** Seed face  to create this rule. */,
            const std::vector<NXOpen::SelectionIntentRule *> & boundaryFaceRules /** Rules defining the boundaries. */
        );
        /** Creates selection intent rule: @link  FaceRegionBoundaryRule   FaceRegionBoundaryRule @endlink   @return  
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceRegionBoundaryRule * CreateRuleFaceRegionBoundary
        (
            NXOpen::Face * seedObj /** Seed face */,
            const std::vector<NXOpen::ICurve *> & curves /** Curve input for this rule.*/,
            const NXOpen::Point3d & seedPoint /** Seed point. */,
            double distanceTolerance /** Distance tolerance. */
        );
        /** Creates selection intent rule: @link  FaceAndAdjacentFacesRule   FaceAndAdjacentFacesRule @endlink   @return  
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceAndAdjacentFacesRule * CreateRuleFaceAndAdjacentFaces
        (
            NXOpen::Face * seedFace /** Face to create this rule. */
        );
        /** Creates selection intent rule: @link  CurveGroupRule   CurveGroupRule @endlink   @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::CurveGroupRule * CreateRuleCurveGroup
        (
            const std::vector<NXOpen::Group *> & groups /** Groups whose curves are used to create this rule. */
        );
        /** Creates selection intent rule: @link  BodyDumbRule   BodyDumbRule @endlink   @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::BodyDumbRule * CreateRuleBodyDumb
        (
            const std::vector<NXOpen::Body *> & bodies /** Bodies used to create this rule. */
        );
        /** Creates selection intent rule: @link  BodyDumbRule   BodyDumbRule @endlink  with the option to include or exclude sheet bodies  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::BodyDumbRule * CreateRuleBodyDumb
        (
            const std::vector<NXOpen::Body *> & bodies /** Bodies used to create this rule. */,
            bool includeSheetBodies /** includesheetbodies */ 
        );
        /** Creates selection intent rule: @link   BodyFeatureRule    BodyFeatureRule @endlink   @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::BodyFeatureRule * CreateRuleBodyFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Feaures whose bodies are used to create this rule. */
        );
        /** Creates selection intent rule: @link   BodyFeatureRule    BodyFeatureRule @endlink  with the option to include or exclude sheet bodies @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::BodyFeatureRule * CreateRuleBodyFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Feaures whose bodies are used to create this rule. */,
            bool includeSheetBodies /** includesheetbodies */ 
        );
        /** Creates selection intent rule: @link   BodyFeatureRule    BodyFeatureRule @endlink  for the given feature from a part occurrence. @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::BodyFeatureRule * CreateRuleBodyFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Feaures whose bodies are used to create this rule. */,
            NXOpen::DisplayableObject * partOccurrence /** Part occurrence of seed body that is used to create this rule.*/
        );
        /** Creates selection intent rule: @link   BodyFeatureRule    BodyFeatureRule @endlink  for the given feature from a part occurrence, with the option to include or exclude sheet bodies @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::BodyFeatureRule * CreateRuleBodyFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Feaures whose bodies are used to create this rule. */,
            bool includeSheetBodies /** includesheetbodies */ ,
            NXOpen::DisplayableObject * partOccurrence /** Part occurrence of seed body that is used to create this rule.*/
        );
        /** Creates selection intent rule: @link   BodyGroupRule    BodyGroupRule @endlink   @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::BodyGroupRule * CreateRuleBodyGroup
        (
            const std::vector<NXOpen::Group *> & groups /** Groups whose bodies are used to create this rule. */
        );
        /** Creates selection intent rule: @link  BodyFeatureRule   BodyFeatureRule @endlink  with the option to include or exclude sheet bodies  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::BodyGroupRule * CreateRuleBodyGroup
        (
            const std::vector<NXOpen::Group *> & groups /** Groups whose bodies are used to create this rule. */,
            bool includeSheetBodies /** includesheetbodies */ 
        );
        /** Creates selection intent rule: @link  FollowFilletRule   FollowFilletRule @endlink  with stop at intersection option ON  @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FollowFilletRule * CreateRuleFollowFillet
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose curves are used to create this rule.*/,
            const std::vector<NXOpen::Body *> & bodies /** Bodies whose edges are used to create this rule.*/,
            const std::vector<NXOpen::ICurve *> & basicCurves /** Non-associative basic curves that are used to create this rule.*/,
            NXOpen::ICurve * seedWireframe /** Seed wireframe */,
            const NXOpen::Point3d & seedPoint /** Seed point. */,
            double gapTolerance /** Gap tolerance. */,
            double angleTolerance /** Angle tolerance. */,
            NXOpen::FollowFilletRuleType method /** Selection Intent method. */
        );
        /** Creates selection intent rule: @link  EdgeChainRule   EdgeChainRule @endlink  @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeChainRule * CreateRuleEdgeChain
        (
            NXOpen::Edge * startEdge /** Start edge of edge chain.*/,
            NXOpen::Edge * endEdge /** End edge of edge chain. */,
            bool isFromStart /** True: the chain starts from the start
                                                   point of the start edge if end edge is provided*/,
            NXOpen::Face * commonFace /** Face on which chain edges are to be found. Chain Between case*/,
            bool allowLaminarEdge /** Allow only laminar edges? */
        );
        /** Creates selection intent rule: @link  EdgeTangentRule   EdgeTangentRule @endlink   @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::EdgeTangentRule * CreateRuleEdgeTangent
        (
            NXOpen::Edge * startEdge /** Start edge of edge chain. */,
            NXOpen::Edge * endEdge /** End edge of edge chain. It can be null.*/,
            bool isFromStart /** True: the tangent chain starts from the start
                                                  point of the start edge if end edge is provided*/,
            double angleTolerance /** Angle tolerance for tangent edges */,
            bool hasSameConvexity /** True: will only find tangnet edges that has the same convexity.*/,
            bool allowLaminarEdge /** Allow only laminar edges? */
        );
        /** Creates selection intent rule: @link  ApparentChainingRule   ApparentChainingRule @endlink   @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::ApparentChainingRule * CreateRuleApparentChaining
        (
            NXOpen::ICurve * seedCurve /** The seed curve. */,
            NXOpen::View * view /** The view. */,
            NXOpen::ApparentChainingRuleType chainingMethod /** Selection Intent method. */,
            NXOpen::ApparentChainingRuleSelection selectionMask /** The selection type none, edge or curve. */,
            double chainingTolerance /** The chaining tolernace. */,
            double angleTolerance /** The angle tolerance. */
        );
        /** Creates selection intent rule: @link  OuterEdgesOfFacesRule   OuterEdgesOfFacesRule @endlink   @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::OuterEdgesOfFacesRule * CreateRuleOuterEdgesOfFaces
        (
            const std::vector<NXOpen::NXObject *> & facesOfFeatures /** Faces whose boundary edges are used to create this rule. */
        );
        /** Creates selection intent rule: @link  RibTopFaceEdgesRule   RibTopFaceEdgesRule @endlink   @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::RibTopFaceEdgesRule * CreateRuleRibTopFaceEdges
        (
            const std::vector<NXOpen::NXObject *> & facesOfFeatures /** Faces whose boundary edges are used to create this rule. */
        );
        /** Creates selection intent rule: @link  CurveChainRule   CurveChainRule @endlink   @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::CurveChainRule * CreateRuleCurveChain
        (
            NXOpen::ICurve * seedCurve /** Seed curve */,
            NXOpen::ICurve * endCurve /** End curve of curve chain. It can be null (Nothing) */,
            bool isFromSeedStart /** True: the chain starts from the start
                                                           point of the seed curve */,
            double gapTolerance /** Gap tolerance. */
        );
        /** Creates selection intent rule: @link  CurveTangentRule   CurveTangentRule @endlink   @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::CurveTangentRule * CreateRuleCurveTangent
        (
            NXOpen::ICurve * seedCurve /** Seed Curve */,
            NXOpen::ICurve * endCurve /** End curve of curve chain. It can be null (Nothing)*/,
            bool isFromSeedStart /** True: the chain starts from the start
                                                 point of the seed curve */,
            double angleTolerance /** Angle tolerance for tangent curves */,
            double gapTolerance /** Gap tolerance for tangent curves */
        );
        /** Creates selection intent rule: @link  FeatureIntersectionEdgesRule   FeatureIntersectionEdgesRule @endlink   @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FeatureIntersectionEdgesRule * CreateRuleFeatureIntersectionEdges
        (
            const std::vector<NXOpen::NXObject *> & features /** Features whose intersection edges are used to create this rule. */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
