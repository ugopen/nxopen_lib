#ifndef NXOpen_ANNOTATIONS_SYMBOLCATALOGPARAMETERBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_SYMBOLCATALOGPARAMETERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_SymbolCatalogParameterBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_SymbolCatalogParameterBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class SymbolCatalogParameterBuilder;
    }
    class Builder;
    namespace Annotations
    {
        class _SymbolCatalogParameterBuilderBuilder;
        class SymbolCatalogParameterBuilderImpl;
        /** This builder allows you to define one parameter for a symbol  <br> To create a new instance of this class, use @link NXOpen::Annotations::SymbolCatalogBuilder::NewParameter  NXOpen::Annotations::SymbolCatalogBuilder::NewParameter @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  SymbolCatalogParameterBuilder : public NXOpen::Builder
        {
            private: SymbolCatalogParameterBuilderImpl * m_symbolcatalogparameterbuilder_impl;
            private: friend class  _SymbolCatalogParameterBuilderBuilder;
            protected: SymbolCatalogParameterBuilder();
            public: ~SymbolCatalogParameterBuilder();
            /**Returns  the label string of the parameter,
                        NOTE: Client must free the returned char* with SM_free    
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Label
            (
            );
            /**Sets  the label string of the parameter,
                        NOTE: Client must free the returned char* with SM_free    
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetLabel
            (
                const NXString & label /** label */ 
            );
            /**Sets  the label string of the parameter,
                        NOTE: Client must free the returned char* with SM_free    
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void SetLabel
            (
                const char * label /** label */ 
            );
            /**Returns  the value string of the parameter,
                        NOTE: Client must free the returned char* with SM_free
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Value
            (
            );
            /**Sets  the value string of the parameter,
                        NOTE: Client must free the returned char* with SM_free
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetValue
            (
                const NXString & paraValue /** paravalue */ 
            );
            /**Sets  the value string of the parameter,
                        NOTE: Client must free the returned char* with SM_free
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void SetValue
            (
                const char * paraValue /** paravalue */ 
            );
            /**Returns  the logical name of the parameter,
                        NOTE: Client must free the returned char* with SM_free
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LogicalName
            (
            );
            /**Sets  the logical name of the parameter,
                        NOTE: Client must free the returned char* with SM_free
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void SetLogicalName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the logical name of the parameter,
                        NOTE: Client must free the returned char* with SM_free
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            void SetLogicalName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
