#ifndef NXOpen_ATTRIBUTEPROPERTIESBASEBUILDER_HXX_INCLUDED
#define NXOpen_ATTRIBUTEPROPERTIESBASEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AttributePropertiesBaseBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AttributePropertiesBaseBuilder.hxx>
#include <NXOpen/DateBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class AttributePropertiesBaseBuilder;
    class Builder;
    class DateBuilder;
    class Expression;
    class NXObject;
    class SelectNXObjectList;
    class _AttributePropertiesBaseBuilderBuilder;
    class AttributePropertiesBaseBuilderImpl;
    /**
        Represents an @link NXOpen::AttributePropertiesBaseBuilder NXOpen::AttributePropertiesBaseBuilder@endlink  to be used for creating attributes.
        A basic attribute consists of a title, a type, and a value.  There are six types of attributes:
        Null, Boolean, Integer, Number, String, and Date.  The type detemines which value field will be
        read during creation.  An attribute may reference an expression instead of setting a value.  In
        this case, the referenced expression's value will also serve as the attribute's value and will 
        update when the expression changes.
        
        If an attribute template exists with the same title as the attribute, then the attribute will
        assume all characteristics of the cooresponding template including the type.  Attribute templates
        reside at the part level and provide extra information for referencing attributes.  They 
        are created using @link NXOpen::AttributeTemplatesBuilder NXOpen::AttributeTemplatesBuilder@endlink .  
        
        The attribute will be distributed to all objects supplied in the selected object list.
         <br> This is an abstract class, and cannot be instantiated.  <br> 
     <br>  Created in NX8.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  AttributePropertiesBaseBuilder : public NXOpen::Builder
    {
        /** Specifies which object will be used when applying attributes.  The options available
                    are determined by the objects passed in.  These options will not be used if the object
                    passed in is a part. 
         <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::AttributePropertiesBaseBuilder::SetAttributeObjects NXOpen::AttributePropertiesBaseBuilder::SetAttributeObjects@endlink  instead. <br>  
        */
        public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::AttributePropertiesBaseBuilder::SetAttributeObjects instead.") enum ObjectOptions
        {
            ObjectOptionsObject/** Apply attribute to the object in the select object list */,
            ObjectOptionsFeature/** Apply attribute to the feature in the select object list */,
            ObjectOptionsOccurrence/** Apply attribute to the occurrence only */,
            ObjectOptionsComponentInstance/** Apply attribute to the instance of the component.  
                                                                                                    All occurrences of the instance will inherit this attribute. */,
            ObjectOptionsReferenceSet/** Apply attribute to the reference set */,
            ObjectOptionsObjectInComponentPart/** Apply attribute to the object in the component part */,
            ObjectOptionsComponentAsPartAttribute/** Apply attribute to the component as a part attribute */,
            ObjectOptionsEmpty/** No objects are contained in the select object list */
        };

        /** Specifies the data type of the attribute, this cannot be changed once the attribute
                    has been created */
        public: enum DataTypeOptions
        {
            DataTypeOptionsNull/** Null, the attribute will have no value */,
            DataTypeOptionsBoolean/** Boolean, the value will be true or false */,
            DataTypeOptionsInteger/** Integer, the value is a whole number */,
            DataTypeOptionsNumber/** Number, the value is a floating point number and may contain units */,
            DataTypeOptionsString/** String, the value will be a textual string */,
            DataTypeOptionsDate/** Date, the value will be date and time */
        };

        /** The value choices for an attribute of type Boolean */
        public: enum BooleanValueOptions
        {
            BooleanValueOptionsFalse/** False */,
            BooleanValueOptionsTrue/** True */
        };

        private: AttributePropertiesBaseBuilderImpl * m_attributepropertiesbasebuilder_impl;
        private: friend class  _AttributePropertiesBaseBuilderBuilder;
        protected: AttributePropertiesBaseBuilder();
        public: ~AttributePropertiesBaseBuilder();
        /**Returns  the selected object(s) list.  The created attribute will be applied to
                    all objects in this list.  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SelectNXObjectList * SelectedObjects
        (
        );
        /**Returns  the object picker.  This determines what objects the attribute will be applied to.  If 
                    modified, the select object list will change based on this value. 
         <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::AttributePropertiesBaseBuilder::SetAttributeObjects NXOpen::AttributePropertiesBaseBuilder::SetAttributeObjects@endlink  instead. <br>  

         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::AttributePropertiesBaseBuilder::SetAttributeObjects instead.") NXOpen::AttributePropertiesBaseBuilder::ObjectOptions ObjectPicker
        (
        );
        /**Sets  the object picker.  This determines what objects the attribute will be applied to.  If 
                    modified, the select object list will change based on this value. 
         <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::AttributePropertiesBaseBuilder::SetAttributeObjects NXOpen::AttributePropertiesBaseBuilder::SetAttributeObjects@endlink  instead. <br>  

         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::AttributePropertiesBaseBuilder::SetAttributeObjects instead.") void SetObjectPicker
        (
            NXOpen::AttributePropertiesBaseBuilder::ObjectOptions objectPicker /** objectpicker */ 
        );
        /**Returns  the category.  The category is an optional, user-defined string that allows 
                    attributes to be grouped together. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Category
        (
        );
        /**Sets  the category.  The category is an optional, user-defined string that allows 
                    attributes to be grouped together. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCategory
        (
            const NXString & category /** category */ 
        );
        /**Sets  the category.  The category is an optional, user-defined string that allows 
                    attributes to be grouped together. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetCategory
        (
            const char * category /** category */ 
        );
        /**Returns  the attribute title.  The title is required for creating an attribute
                    and must be unique on the given object.  Once the attribute is created,
                    the title cannot be modified. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Title
        (
        );
        /**Sets  the attribute title.  The title is required for creating an attribute
                    and must be unique on the given object.  Once the attribute is created,
                    the title cannot be modified. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTitle
        (
            const NXString & title /** title */ 
        );
        /**Sets  the attribute title.  The title is required for creating an attribute
                    and must be unique on the given object.  Once the attribute is created,
                    the title cannot be modified. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetTitle
        (
            const char * title /** title */ 
        );
        /**Returns  the data type, which determines the type of attribute to be created.
                    Once the attribute is created, the data type cannot be modified. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions DataType
        (
        );
        /**Sets  the data type, which determines the type of attribute to be created.
                    Once the attribute is created, the data type cannot be modified. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDataType
        (
            NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions dataType /** datatype */ 
        );
        /**Returns  the units associated with an attribute of type Number.  Once the attribute
                    is created, the unit measure (length, area, etc) cannot be changed.  However
                    the units (mm, ft, etc) within the measure can be changed. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Units
        (
        );
        /**Sets  the units associated with an attribute of type Number.  Once the attribute
                    is created, the unit measure (length, area, etc) cannot be changed.  However
                    the units (mm, ft, etc) within the measure can be changed. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUnits
        (
            const NXString & units /** units */ 
        );
        /**Sets  the units associated with an attribute of type Number.  Once the attribute
                    is created, the unit measure (length, area, etc) cannot be changed.  However
                    the units (mm, ft, etc) within the measure can be changed. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetUnits
        (
            const char * units /** units */ 
        );
        /**Returns  the string value.  Required if creating an attribute of type String. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString StringValue
        (
        );
        /**Sets  the string value.  Required if creating an attribute of type String. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetStringValue
        (
            const NXString & stringValue /** stringvalue */ 
        );
        /**Sets  the string value.  Required if creating an attribute of type String. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetStringValue
        (
            const char * stringValue /** stringvalue */ 
        );
        /**Returns  the value alias.  Optional for any attribute. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXString ValueAlias
        (
        );
        /**Sets  the value alias.  Optional for any attribute. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetValueAlias
        (
            const NXString & valueAlias /** valuealias */ 
        );
        /**Sets  the value alias.  Optional for any attribute. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        void SetValueAlias
        (
            const char * valueAlias /** valuealias */ 
        );
        /**Returns  the integer value.  Required if creating an attribute of type Integer. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: int IntegerValue
        (
        );
        /**Sets  the integer value.  Required if creating an attribute of type Integer. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIntegerValue
        (
            int integerValue /** integervalue */ 
        );
        /**Returns  the number value.  Required if creating an attribute of type Number. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: double NumberValue
        (
        );
        /**Sets  the number value.  Required if creating an attribute of type Number. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNumberValue
        (
            double numberValue /** numbervalue */ 
        );
        /**Returns  the boolean value.  Required if creating an attribute of type Boolean. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AttributePropertiesBaseBuilder::BooleanValueOptions BooleanValue
        (
        );
        /**Sets  the boolean value.  Required if creating an attribute of type Boolean. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetBooleanValue
        (
            NXOpen::AttributePropertiesBaseBuilder::BooleanValueOptions boolValue /** boolvalue */ 
        );
        /**Returns  the date value.  The Date object will contain the value for an 
                    attribute of type Date.  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DateBuilder * DateValue
        (
        );
        /**Returns  the expression referenced from this attribute.  Only used for attributes
                    of type Number, Integer, Boolean, and String.  If an expression is referenced, no
                    value fields need to be set, as the attribute uses the value from the
                    expression. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * Expression
        (
        );
        /**Sets  the expression referenced from this attribute.  Only used for attributes
                    of type Number, Integer, Boolean, and String.  If an expression is referenced, no
                    value fields need to be set, as the attribute uses the value from the
                    expression. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetExpression
        (
            NXOpen::Expression * expression /** expression */ 
        );
        /**Returns  the 'is reference type' flag is set for attributes that are linked to system expressions.  The
                    type must also be set to String for the Reference attribut to be created/edited. 
                    If a Reference attribute is no longer linked to a system expression, it will 
                    become a String attribute. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsReferenceType
        (
        );
        /**Sets  the 'is reference type' flag is set for attributes that are linked to system expressions.  The
                    type must also be set to String for the Reference attribut to be created/edited. 
                    If a Reference attribute is no longer linked to a system expression, it will 
                    become a String attribute. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetReferenceType
        (
            bool isReferenceType /** isreferencetype */ 
        );
        /**Returns  the 'LockOnSave' flag is set for attributes that will be locked once the part is saved (and reloaded) 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool LockOnSave
        (
        );
        /**Sets  the 'LockOnSave' flag is set for attributes that will be locked once the part is saved (and reloaded) 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLockOnSave
        (
            bool lockOnSave /** lockonsave */ 
        );
        /**Returns  the 'is array' flag is set for attributes that have more than one value.  When this is set, the index
                    needs to be provided to indicate which element will be modified. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsArray
        (
        );
        /**Sets  the 'is array' flag is set for attributes that have more than one value.  When this is set, the index
                    needs to be provided to indicate which element will be modified. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetArray
        (
            bool isArray /** isarray */ 
        );
        /**Returns  the array index.  Required if modifying an attribute that has more than one value.  The IsArray flag
                    must also be set. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: int ArrayIndex
        (
        );
        /**Sets  the array index.  Required if modifying an attribute that has more than one value.  The IsArray flag
                    must also be set. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetArrayIndex
        (
            int arrayIndex /** arrayindex */ 
        );
        /** Delete the attribute from the given object. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void Delete
        (
            NXOpen::NXObject * object /** The object containing the attribute */
        );
        /** Delete the attribute array from the given object. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteArray
        (
            NXOpen::NXObject * object /** The object containing the attribute */
        );
        /** Create the attribute from the data set in the builder.  Unlike calling commit,
                    this method will not perform an update.   @return  True if the attribute was created/edited successfully 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool CreateAttribute
        (
        );
        /** Sets the array of objects that have this attribute 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetAttributeObjects
        (
            const std::vector<NXOpen::NXObject *> & objects /** the array of objects */
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
